<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields ( Field ... org.springframework.data.mongodb.core.aggregation.Field[] ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.Field[] , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.Fields ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.aggregation.Field[] ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; java.util.List<org.springframework.data.mongodb.core.aggregation.Field> < Field > java.util.List<org.springframework.data.mongodb.core.aggregation.Field> = new java.util.ArrayList<org.springframework.data.mongodb.core.aggregation.Field> < Field > ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.data.mongodb.core.aggregation.Field> . add ( org.springframework.data.mongodb.core.aggregation.Field ( java.lang.String ) ) ; } return new org.springframework.data.mongodb.core.aggregation.Fields ( java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.Field org.springframework.data.mongodb.core.aggregation.Field ( java.lang.String java.lang.String ) { return new org.springframework.data.mongodb.core.aggregation.Fields.AggregationField ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.Field org.springframework.data.mongodb.core.aggregation.Field ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.Fields.AggregationField ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( java.util.List<org.springframework.data.mongodb.core.aggregation.Field> < Field > java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ) { Assert . notNull ( java.util.List<org.springframework.data.mongodb.core.aggregation.Field> , STRING ) ; this . java.util.List<org.springframework.data.mongodb.core.aggregation.Field> = java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ( java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ) ; }  <METHOD_END>
<METHOD_START> private static final java.util.List<org.springframework.data.mongodb.core.aggregation.Field> < Field > java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ( java.util.List<org.springframework.data.mongodb.core.aggregation.Field> < Field > java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ) { java.util.Map<java.lang.String,org.springframework.data.mongodb.core.aggregation.Field> < java.lang.String , Field > java.util.Map<java.lang.String,org.springframework.data.mongodb.core.aggregation.Field> = new java.util.HashMap<java.lang.String,org.springframework.data.mongodb.core.aggregation.Field> < java.lang.String , Field > ( ) ; for ( Field org.springframework.data.mongodb.core.aggregation.Field : java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ) { java.lang.String java.lang.String = org.springframework.data.mongodb.core.aggregation.Field . getName ( ) ; Field org.springframework.data.mongodb.core.aggregation.Field = java.util.Map<java.lang.String,org.springframework.data.mongodb.core.aggregation.Field> . get ( java.lang.String ) ; if ( org.springframework.data.mongodb.core.aggregation.Field != null ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.aggregation.Field , org.springframework.data.mongodb.core.aggregation.Field ) ) ; } java.util.Map<java.lang.String,org.springframework.data.mongodb.core.aggregation.Field> . put ( java.lang.String , org.springframework.data.mongodb.core.aggregation.Field ) ; } return java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ; }  <METHOD_END>
<METHOD_START> private void ( org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields , Field org.springframework.data.mongodb.core.aggregation.Field ) { this . java.util.List<org.springframework.data.mongodb.core.aggregation.Field> = new java.util.ArrayList<org.springframework.data.mongodb.core.aggregation.Field> < Field > ( org.springframework.data.mongodb.core.aggregation.Fields . java.util.List<org.springframework.data.mongodb.core.aggregation.Field> . size ( ) + NUMBER ) ; this . java.util.List<org.springframework.data.mongodb.core.aggregation.Field> . addAll ( org.springframework.data.mongodb.core.aggregation.Fields . java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ) ; this . java.util.List<org.springframework.data.mongodb.core.aggregation.Field> . add ( org.springframework.data.mongodb.core.aggregation.Field ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields ( java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.aggregation.Fields ( new org.springframework.data.mongodb.core.aggregation.Fields.AggregationField ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.aggregation.Fields ( new org.springframework.data.mongodb.core.aggregation.Fields.AggregationField ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields ( Field org.springframework.data.mongodb.core.aggregation.Field ) { return new org.springframework.data.mongodb.core.aggregation.Fields ( this , org.springframework.data.mongodb.core.aggregation.Field ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields ( org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields ) { org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields = this ; for ( Field org.springframework.data.mongodb.core.aggregation.Field : org.springframework.data.mongodb.core.aggregation.Fields ) { org.springframework.data.mongodb.core.aggregation.Fields = org.springframework.data.mongodb.core.aggregation.Fields . org.springframework.data.mongodb.core.aggregation.Fields ( org.springframework.data.mongodb.core.aggregation.Field ) ; } return org.springframework.data.mongodb.core.aggregation.Fields ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.Field org.springframework.data.mongodb.core.aggregation.Field ( java.lang.String java.lang.String ) { for ( Field org.springframework.data.mongodb.core.aggregation.Field : java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ) { if ( org.springframework.data.mongodb.core.aggregation.Field . getName ( ) . equals ( java.lang.String ) ) { return org.springframework.data.mongodb.core.aggregation.Field ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.data.mongodb.core.aggregation.Field> < Field > java.util.Iterator<org.springframework.data.mongodb.core.aggregation.Field> ( ) { return java.util.List<org.springframework.data.mongodb.core.aggregation.Field> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.mongodb.core.aggregation.Field> < Field > java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ( ) { return java.util.Collections . java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ( java.util.List<org.springframework.data.mongodb.core.aggregation.Field> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; Assert . hasText ( java.lang.String , STRING ) ; if ( java.lang.String == null && java.lang.String . boolean ( STRING ) ) { this . java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( '.' ) + NUMBER ) ; this . java.lang.String = java.lang.String ; } else { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; } }  <METHOD_END>
<METHOD_START> private static final java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( java.lang.String == null ) { return java.lang.String ; } if ( Aggregation . SystemVariable . isReferingToSystemVariable ( java.lang.String ) ) { return java.lang.String ; } int int = java.lang.String . int ( '$' ) ; return int == - NUMBER ? java.lang.String : java.lang.String . java.lang.String ( int + NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return this . java.lang.String ( ) ; } return StringUtils . hasText ( this . java.lang.String ) ? this . java.lang.String : this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! java.lang.String ( ) . boolean ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.String . boolean ( STRING ) && ! java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.mongodb.core.aggregation.Fields.AggregationField ) ) { return false ; } org.springframework.data.mongodb.core.aggregation.Fields.AggregationField org.springframework.data.mongodb.core.aggregation.Fields.AggregationField = ( org.springframework.data.mongodb.core.aggregation.Fields.AggregationField ) java.lang.Object ; return this . java.lang.String . boolean ( org.springframework.data.mongodb.core.aggregation.Fields.AggregationField . java.lang.String ) && ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.mongodb.core.aggregation.Fields.AggregationField . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; int += NUMBER * java.lang.String . int ( ) ; int += NUMBER * ObjectUtils . nullSafeHashCode ( java.lang.String ) ; return int ; }  <METHOD_END>
