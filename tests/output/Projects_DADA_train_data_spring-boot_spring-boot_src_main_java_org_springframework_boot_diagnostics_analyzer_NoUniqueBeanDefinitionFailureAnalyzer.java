<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.diagnostics.analyzer.BeanFactory ) throws org.springframework.boot.diagnostics.analyzer.BeansException { Assert . isInstanceOf ( ConfigurableBeanFactory .class , org.springframework.boot.diagnostics.analyzer.BeanFactory ) ; this . org.springframework.boot.diagnostics.analyzer.ConfigurableBeanFactory = ( ConfigurableBeanFactory ) org.springframework.boot.diagnostics.analyzer.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.diagnostics.analyzer.FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( java.lang.Throwable java.lang.Throwable , NoUniqueBeanDefinitionException org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionException , java.lang.String java.lang.String ) { if ( java.lang.String == null ) { return null ; } java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionException ) ; if ( java.lang.String[] == null ) { return null ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String[] . int ) ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { void ( java.lang.StringBuilder , java.lang.String ) ; } return new FailureAnalysis ( java.lang.StringBuilder . java.lang.String ( ) , STRING + STRING + STRING , org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionException ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.StringBuilder java.lang.StringBuilder , java.lang.String java.lang.String ) { try { BeanDefinition org.springframework.boot.diagnostics.analyzer.BeanDefinition = this . org.springframework.boot.diagnostics.analyzer.ConfigurableBeanFactory . getMergedBeanDefinition ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.String , org.springframework.boot.diagnostics.analyzer.BeanDefinition ) ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.diagnostics.analyzer.NoSuchBeanDefinitionException ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , BeanDefinition org.springframework.boot.diagnostics.analyzer.BeanDefinition ) { if ( StringUtils . hasText ( org.springframework.boot.diagnostics.analyzer.BeanDefinition . getFactoryMethodName ( ) ) ) { return java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.boot.diagnostics.analyzer.BeanDefinition . getFactoryMethodName ( ) , org.springframework.boot.diagnostics.analyzer.BeanDefinition . getResourceDescription ( ) ) ; } return java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.boot.diagnostics.analyzer.BeanDefinition . getResourceDescription ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( NoUniqueBeanDefinitionException org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionException ) { if ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionException . getMessage ( ) . indexOf ( STRING ) > - NUMBER ) { return StringUtils . commaDelimitedListToStringArray ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionException . getMessage ( ) . substring ( org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionException . getMessage ( ) . lastIndexOf ( STRING ) + NUMBER ) . trim ( ) ) ; } return null ; }  <METHOD_END>
