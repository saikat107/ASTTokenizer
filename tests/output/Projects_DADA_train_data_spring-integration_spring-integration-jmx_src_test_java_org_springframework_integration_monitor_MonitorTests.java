<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; DefaultMessageChannelMetrics org.springframework.integration.monitor.DefaultMessageChannelMetrics = TestUtils . getPropertyValue ( this . org.springframework.integration.monitor.DirectChannel , STRING , DefaultMessageChannelMetrics .class ) ; org.springframework.integration.monitor.DefaultMessageChannelMetrics = Mockito . spy ( org.springframework.integration.monitor.DefaultMessageChannelMetrics ) ; Mockito . doAnswer ( invocation -> { Object result = invocation . callRealMethod ( ) ; afterSendLatch . countDown ( ) ; return result ; } ) . when ( org.springframework.integration.monitor.DefaultMessageChannelMetrics ) . afterSend ( Mockito . any ( MetricsContext .class ) , Mockito . eq ( java.lang.Boolean . java.lang.Boolean ) ) ; new DirectFieldAccessor ( this . org.springframework.integration.monitor.DirectChannel ) . setPropertyValue ( STRING , org.springframework.integration.monitor.DefaultMessageChannelMetrics ) ; MessagingTemplate org.springframework.integration.monitor.MessagingTemplate = new MessagingTemplate ( this . org.springframework.integration.monitor.QueueChannel ) ; org.springframework.integration.monitor.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; java.lang.Integer java.lang.Integer = org.springframework.integration.monitor.MessagingTemplate . convertSendAndReceive ( STRING , java.lang.Integer .class ) ; assertEquals ( NUMBER , java.lang.Integer . int ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.monitor.MonitorTests.TestHandler . getActiveCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.monitor.MonitorTests.TestHandler . getHandleCount ( ) ) ; assertThat ( this . org.springframework.integration.monitor.MonitorTests.TestHandler . getDuration ( ) . getMax ( ) , greaterThan ( NUMBER ) ) ; assertThat ( this . org.springframework.integration.monitor.MonitorTests.TestHandler . getDuration ( ) . getMax ( ) , lessThan ( NUMBER ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.monitor.QueueChannel . getSendCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.monitor.QueueChannel . getReceiveCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.monitor.DirectChannel . getSendCount ( ) ) ; assertThat ( this . org.springframework.integration.monitor.DirectChannel . getSendDuration ( ) . getMax ( ) , greaterThan ( NUMBER ) ) ; assertThat ( this . org.springframework.integration.monitor.DirectChannel . getSendDuration ( ) . getMax ( ) , lessThan ( NUMBER ) ) ; Message < ? > org.springframework.integration.monitor.Message<?> = this . org.springframework.integration.monitor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.monitor.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.monitor.Message<> . getPayload ( ) ) ; org.springframework.integration.monitor.Message<?> = this . org.springframework.integration.monitor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.monitor.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.monitor.Message<> . getPayload ( ) ) ; assertThat ( this . org.springframework.integration.monitor.MonitorTests.TestSource . getMessageCount ( ) , greaterThanOrEqualTo ( NUMBER ) ) ; assertThat ( this . org.springframework.integration.monitor.NullChannel . getSendCount ( ) , greaterThanOrEqualTo ( NUMBER ) ) ; assertThat ( this . org.springframework.integration.monitor.PublishSubscribeChannel . getSendCount ( ) , greaterThanOrEqualTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.monitor.Message<?> ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } return getActiveCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { return getMessageCount ( ) ; }  <METHOD_END>
