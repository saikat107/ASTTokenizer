<METHOD_START> public void ( boolean boolean , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . boolean = boolean ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.lang.Exception { if ( CorsUtils . isPreFlightRequest ( org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest ) || ! this . boolean ) { return true ; } HandlerMethod org.springframework.boot.actuate.endpoint.mvc.HandlerMethod = ( HandlerMethod ) java.lang.Object ; if ( HttpMethod . OPTIONS . matches ( org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest . getMethod ( ) ) && ! ( org.springframework.boot.actuate.endpoint.mvc.HandlerMethod . getBean ( ) instanceof MvcEndpoint ) ) { return true ; } MvcEndpoint org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint = ( MvcEndpoint ) org.springframework.boot.actuate.endpoint.mvc.HandlerMethod . getBean ( ) ; if ( ! org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint . isSensitive ( ) ) { return true ; } if ( boolean ( org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest ) ) { return true ; } void ( org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse ) ; return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( HttpServletRequest org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest ) { org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor.AuthoritiesValidator org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor.AuthoritiesValidator = null ; if ( boolean ( ) ) { org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor.AuthoritiesValidator = new org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor.AuthoritiesValidator ( ) ; } for ( java.lang.String java.lang.String : this . java.util.List<java.lang.String> ) { if ( org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest . isUserInRole ( java.lang.String ) ) { return true ; } if ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor.AuthoritiesValidator != null && org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor.AuthoritiesValidator . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ClassUtils . isPresent ( STRING , java.lang.Class<? extends org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse ) throws java.lang.Exception { if ( org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest . getUserPrincipal ( ) != null ) { java.lang.String java.lang.String = StringUtils . collectionToDelimitedString ( this . java.util.List<java.lang.String> , STRING ) ; org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse . sendError ( HttpStatus . FORBIDDEN . value ( ) , STRING + java.lang.String ) ; } else { void ( ) ; org.springframework.boot.actuate.endpoint.mvc.HttpServletResponse . sendError ( HttpStatus . UNAUTHORIZED . value ( ) , STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) && org.springframework.boot.actuate.endpoint.mvc.Log . isInfoEnabled ( ) ) { org.springframework.boot.actuate.endpoint.mvc.Log . info ( STRING + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { Authentication org.springframework.boot.actuate.endpoint.mvc.Authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( org.springframework.boot.actuate.endpoint.mvc.Authentication != null ) { for ( GrantedAuthority org.springframework.boot.actuate.endpoint.mvc.GrantedAuthority : org.springframework.boot.actuate.endpoint.mvc.Authentication . getAuthorities ( ) ) { if ( org.springframework.boot.actuate.endpoint.mvc.GrantedAuthority . getAuthority ( ) . equals ( java.lang.String ) ) { return true ; } } } return false ; }  <METHOD_END>
