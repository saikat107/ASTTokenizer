<METHOD_START> @ Test public void void ( ) { class A { @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( final Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; } } class B extends A {		} @ java.lang.SuppressWarnings ( STRING ) class C extends B {		} MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new B ( ) , STRING ) ; Message < ? > org.springframework.integration.handler.Message<?> = ( Message < ? > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( final Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class A { @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; } } class B extends A { @ java.lang.Override public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; } } @ java.lang.SuppressWarnings ( STRING ) class C extends B {		} MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new B ( ) , STRING ) ; Message < ? > org.springframework.integration.handler.Message<?> = ( Message < ? > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { class A { @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; } } class B extends A { @ java.lang.Override public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; } } class C extends B { @ java.lang.Override public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; } } MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new C ( ) , STRING ) ; Message < ? > org.springframework.integration.handler.Message<?> = ( Message < ? > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { class A { @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; } } class B extends A {		} class C extends B { @ java.lang.Override public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; } } MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new C ( ) , STRING ) ; Message < ? > org.springframework.integration.handler.Message<?> = ( Message < ? > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.handler.Message<java.lang.String> < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return MessageBuilder . fromMessage ( org.springframework.integration.handler.Message<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestBean ( ) , STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestBean ( ) , STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestBean ( ) , STRING ) ; Message < ? > org.springframework.integration.handler.Message<?> = ( Message < ? > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestBean ( ) , STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestBean ( ) , STRING ) ; Message < ? > org.springframework.integration.handler.Message<?> = ( Message < ? > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestBean ( ) , STRING ) ; Message < ? > org.springframework.integration.handler.Message<?> = ( Message < ? > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestBean ( ) , STRING ) ; Message < ? > org.springframework.integration.handler.Message<?> = ( Message < ? > ) org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestBean ( ) , STRING ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestBean ( ) , STRING ) ; assertNull ( org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , Message .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage <> ( NUMBER ) ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.OverloadedMethodBean org.springframework.integration.handler.MethodInvokingMessageProcessorTests.OverloadedMethodBean = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.OverloadedMethodBean ( ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.OverloadedMethodBean , ServiceActivator .class ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; assertNotNull ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.OverloadedMethodBean . java.lang.Object ) ; assertEquals ( java.lang.String .class , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.OverloadedMethodBean . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.OverloadedMethodBean . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.ExpectedException . expect ( MessageHandlingException .class ) ; org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; assertEquals ( STRING , org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.ExpectedException . expect ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.ExceptionCauseMatcher ( java.lang.UnsupportedOperationException .class ) ) ; org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService , java.lang.reflect.Method ) ; assertEquals ( STRING , org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.ExpectedException . expect ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.ExceptionCauseMatcher ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.CheckedException .class ) ) ; org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService , java.lang.reflect.Method ) ; assertEquals ( STRING , org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.ExpectedException . expect ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.ExceptionCauseMatcher ( SpelEvaluationException .class ) ) ; org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestDifferentErrorService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestDifferentErrorService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestDifferentErrorService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestDifferentErrorService , java.lang.reflect.Method ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . setUseSpelInvoker ( true ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , Message .class , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . setUseSpelInvoker ( true ) ; void ( org.springframework.integration.handler.MethodInvokingMessageProcessor , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . setUseSpelInvoker ( true ) ; DirectFieldAccessor org.springframework.integration.handler.DirectFieldAccessor = org.springframework.integration.handler.DirectFieldAccessor ( org.springframework.integration.handler.MethodInvokingMessageProcessor ) ; void ( org.springframework.integration.handler.MethodInvokingMessageProcessor , true ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.handler.MethodInvokingMessageProcessor , STRING ) ) ; void ( org.springframework.integration.handler.MethodInvokingMessageProcessor , true ) ; org.springframework.integration.handler.DirectFieldAccessor . setPropertyValue ( STRING , SpelCompilerMode . OFF ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor , boolean boolean ) { Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; try { java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( MessageHandlingException org.springframework.integration.handler.MessageHandlingException ) { if ( boolean ) { assertThat ( org.springframework.integration.handler.MessageHandlingException . getCause ( ) . getMessage ( ) , equalTo ( STRING ) ) ; } else { assertThat ( org.springframework.integration.handler.MessageHandlingException . getCause ( ) . getCause ( ) . getMessage ( ) , equalTo ( STRING ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . setUseSpelInvoker ( true ) ; void ( org.springframework.integration.handler.MethodInvokingMessageProcessor , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . setUseSpelInvoker ( true ) ; DirectFieldAccessor org.springframework.integration.handler.DirectFieldAccessor = org.springframework.integration.handler.DirectFieldAccessor ( org.springframework.integration.handler.MethodInvokingMessageProcessor ) ; void ( org.springframework.integration.handler.MethodInvokingMessageProcessor , true ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.handler.MethodInvokingMessageProcessor , STRING ) ) ; void ( org.springframework.integration.handler.MethodInvokingMessageProcessor , true ) ; org.springframework.integration.handler.DirectFieldAccessor . setPropertyValue ( STRING , SpelCompilerMode . OFF ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor , boolean boolean ) { Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.DotBean ( ) ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.DotBean ( ) ) . setHeader ( STRING , new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.DotBean ( ) ) . build ( ) ; java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.DotBean ( ) ) . build ( ) ; try { java.lang.Object = org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( MessageHandlingException org.springframework.integration.handler.MessageHandlingException ) { if ( boolean ) { assertThat ( org.springframework.integration.handler.MessageHandlingException . getCause ( ) . getMessage ( ) , equalTo ( STRING ) ) ; } else { assertThat ( org.springframework.integration.handler.MessageHandlingException . getCause ( ) . getCause ( ) . getMessage ( ) , equalTo ( STRING ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AmbiguousMethodBean org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AmbiguousMethodBean = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AmbiguousMethodBean ( ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AmbiguousMethodBean , STRING ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertNotNull ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AmbiguousMethodBean . java.lang.Object ) ; assertEquals ( java.lang.String .class , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AmbiguousMethodBean . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AmbiguousMethodBean . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GatewayProxyFactoryBean org.springframework.integration.handler.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.handler.GatewayProxyFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.GatewayProxyFactoryBean . getObject ( ) ; MessagingMethodInvokerHelper org.springframework.integration.handler.MessagingMethodInvokerHelper = new MessagingMethodInvokerHelper ( new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.TestErrorService ( ) , STRING , true ) ; java.lang.reflect.Method java.lang.reflect.Method = MessagingMethodInvokerHelper .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; java.lang.reflect.Method . void ( true ) ; java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( org.springframework.integration.handler.MessagingMethodInvokerHelper , java.lang.Object ) ; assertSame ( RequestReplyExchanger .class , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class Foo { @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( Message < java.lang.Number > org.springframework.integration.handler.Message<java.lang.Number> ) { return STRING + ( org.springframework.integration.handler.Message<java.lang.Number> . getPayload ( ) . intValue ( ) * NUMBER ) ; } @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer . java.lang.String ( ) ; } @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; } } MessagingMethodInvokerHelper org.springframework.integration.handler.MessagingMethodInvokerHelper = new MessagingMethodInvokerHelper ( new Foo ( ) , ( java.lang.String ) null , false ) ; assertEquals ( STRING , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( NUMBER ) ) ) ; assertEquals ( STRING , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( NUMBER ) ) ) ; assertEquals ( STRING , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( new java.util.Date ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( Message < java.lang.Number > org.springframework.integration.handler.Message<java.lang.Number> ) { return STRING + ( org.springframework.integration.handler.Message<java.lang.Number> . getPayload ( ) . intValue ( ) * NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class Foo { @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; } } try { new MessagingMethodInvokerHelper ( new Foo ( ) , ( java.lang.String ) null , false ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( java.lang.IllegalArgumentException .class ) ) ; assertEquals ( STRING , java.lang.Exception . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class Foo { @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return org.springframework.integration.handler.Message<java.lang.String> . getPayload ( ) ; } @ java.lang.SuppressWarnings ( STRING ) public java.lang.Integer java.lang.Integer ( Message < java.lang.Integer > org.springframework.integration.handler.Message<java.lang.Integer> ) { return org.springframework.integration.handler.Message<java.lang.Integer> . getPayload ( ) ; } @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return org.springframework.integration.handler.Message<> . getPayload ( ) ; } } Foo targetObject = new Foo ( ) ; MessagingMethodInvokerHelper org.springframework.integration.handler.MessagingMethodInvokerHelper = new MessagingMethodInvokerHelper ( targetObject , ( java.lang.String ) null , false ) ; assertEquals ( STRING , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( STRING ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( NUMBER ) ) ) ; assertEquals ( targetObject , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( targetObject ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { return org.springframework.integration.handler.Message<java.lang.String> . getPayload ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Integer java.lang.Integer ( Message < java.lang.Integer > org.springframework.integration.handler.Message<java.lang.Integer> ) { return org.springframework.integration.handler.Message<java.lang.Integer> . getPayload ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return org.springframework.integration.handler.Message<> . getPayload ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class Foo { @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; } @ java.lang.SuppressWarnings ( STRING ) public java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer ; } @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; } } Foo targetObject = new Foo ( ) ; MessagingMethodInvokerHelper org.springframework.integration.handler.MessagingMethodInvokerHelper = new MessagingMethodInvokerHelper ( targetObject , ( java.lang.String ) null , false ) ; assertEquals ( STRING , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( STRING ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( NUMBER ) ) ) ; assertEquals ( targetObject , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( targetObject ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class Foo { @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { fail ( STRING ) ; return org.springframework.integration.handler.Message<java.lang.String> ; } @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return java.lang.String ; } @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( ) { return STRING ; } } Foo targetObject = new Foo ( ) ; MessagingMethodInvokerHelper org.springframework.integration.handler.MessagingMethodInvokerHelper = new MessagingMethodInvokerHelper ( targetObject , ( java.lang.String ) null , false ) ; assertEquals ( STRING , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( STRING ) ) ) ; assertEquals ( STRING , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage < java.lang.Object > ( targetObject ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> ) { fail ( STRING ) ; return org.springframework.integration.handler.Message<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.IneligibleMethodBean org.springframework.integration.handler.MethodInvokingMessageProcessorTests.IneligibleMethodBean = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.IneligibleMethodBean ( ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.IneligibleMethodBean , STRING ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertNotNull ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.IneligibleMethodBean . java.lang.Object ) ; assertEquals ( java.lang.String .class , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.IneligibleMethodBean . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.IneligibleMethodBean . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class Foo { private final java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; @ java.lang.SuppressWarnings ( STRING ) public void void ( java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> , @ Header ( value = STRING , required = false ) java.lang.String java.lang.String , @ Header ( STRING ) java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , ( java.util.Optional<java.lang.String> . boolean ( ) ? java.util.Optional<java.lang.String> . java.lang.String ( ) : null ) ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , ( java.util.Optional<java.lang.String> . boolean ( ) ? java.util.Optional<java.lang.String> . java.lang.String ( ) : null ) ) ; } } Foo targetObject = new Foo ( ) ; MessagingMethodInvokerHelper org.springframework.integration.handler.MessagingMethodInvokerHelper = new MessagingMethodInvokerHelper ( targetObject , ( java.lang.String ) null , false ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage <> ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; assertNull ( targetObject . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertNull ( targetObject . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertNull ( targetObject . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertEquals ( STRING , targetObject . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , targetObject . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , targetObject . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> , @ Header ( value = STRING , required = false ) java.lang.String java.lang.String , @ Header ( STRING ) java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , ( java.util.Optional<java.lang.String> . boolean ( ) ? java.util.Optional<java.lang.String> . java.lang.String ( ) : null ) ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , ( java.util.Optional<java.lang.String> . boolean ( ) ? java.util.Optional<java.lang.String> . java.lang.String ( ) : null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { class Foo { @ ServiceActivator private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; } } MessagingMethodInvokerHelper org.springframework.integration.handler.MessagingMethodInvokerHelper = new MessagingMethodInvokerHelper ( new Foo ( ) , ServiceActivator .class , false ) ; assertEquals ( STRING , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage <> ( STRING ) ) ) ; assertEquals ( STRING , org.springframework.integration.handler.MessagingMethodInvokerHelper . process ( new GenericMessage <> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService . java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService> ( ) . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . setUseSpelInvoker ( true ) ; Message < java.lang.Integer > org.springframework.integration.handler.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; StopWatch org.springframework.integration.handler.StopWatch = new StopWatch ( STRING ) ; int int = NUMBER ; org.springframework.integration.handler.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.Integer> ) ; } org.springframework.integration.handler.StopWatch . stop ( ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; org.springframework.integration.handler.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.Integer> ) ; } org.springframework.integration.handler.StopWatch . stop ( ) ; DirectFieldAccessor org.springframework.integration.handler.DirectFieldAccessor = org.springframework.integration.handler.DirectFieldAccessor ( org.springframework.integration.handler.MethodInvokingMessageProcessor ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.AnnotatedTestService , java.lang.reflect.Method ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . setUseSpelInvoker ( true ) ; org.springframework.integration.handler.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( org.springframework.integration.handler.Message<java.lang.Integer> ) ; } org.springframework.integration.handler.StopWatch . stop ( ) ; org.springframework.integration.handler.Log . warn ( org.springframework.integration.handler.StopWatch . prettyPrint ( ) ) ; org.springframework.integration.handler.DirectFieldAccessor . setPropertyValue ( STRING , SpelCompilerMode . OFF ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class A { @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Object java.lang.Object ) { throw new java.lang.IllegalStateException ( new java.lang.IllegalArgumentException ( STRING ) ) ; } } MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( new A ( ) , STRING ) ; try { org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage <> ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) , instanceOf ( java.lang.IllegalArgumentException .class ) ) ; assertEquals ( A .class . java.lang.String ( ) , java.lang.Exception . java.lang.Throwable ( ) . java.lang.StackTraceElement[] ( ) [ NUMBER ] . java.lang.String ( ) ) ; } assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.handler.MethodInvokingMessageProcessor , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Object java.lang.Object ) { throw new java.lang.IllegalStateException ( new java.lang.IllegalArgumentException ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicReference<java.lang.Object> < java.lang.Object > java.util.concurrent.atomic.AtomicReference<java.lang.Object> = new java.util.concurrent.atomic.AtomicReference<java.lang.Object> <> ( ) ; class MyHandler implements MessageHandler { @ java.lang.Override public void void ( Message < ? > org.springframework.integration.handler.Message<?> ) throws org.springframework.integration.handler.MessagingException { java.util.concurrent.atomic.AtomicReference<java.lang.Object> . void ( org.springframework.integration.handler.Message<> . getPayload ( ) ) ; } } MessageHandler org.springframework.integration.handler.MessageHandler = new MyHandler ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; ProxyFactory org.springframework.integration.handler.ProxyFactory = new ProxyFactory ( org.springframework.integration.handler.MessageHandler ) ; org.springframework.integration.handler.ProxyFactory . addAdvice ( ( MethodInterceptor ) i -> { adviceCalled . set ( true ) ; return i . proceed ( ) ; } ) ; org.springframework.integration.handler.MessageHandler = ( MessageHandler ) org.springframework.integration.handler.ProxyFactory . getProxy ( java.lang.Class<? extends org.springframework.integration.handler.MethodInvokingMessageProcessorTests> ( ) . java.lang.ClassLoader ( ) ) ; MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.handler.MessageHandler , STRING ) ; org.springframework.integration.handler.MethodInvokingMessageProcessor . processMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.Object> . java.lang.Object ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.handler.Message<?> ) throws org.springframework.integration.handler.MessagingException { java.util.concurrent.atomic.AtomicReference<java.lang.Object> . void ( org.springframework.integration.handler.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean = new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean ( ) ; MessagingMethodInvokerHelper < ? > org.springframework.integration.handler.MessagingMethodInvokerHelper<?> = new MessagingMethodInvokerHelper <> ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , false ) ; Message < ? > org.springframework.integration.handler.Message<?> = new GenericMessage <> ( STRING ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<> . process ( org.springframework.integration.handler.Message<> ) ; assertEquals ( SpelCompilerMode . OFF , TestUtils . getPropertyValue ( org.springframework.integration.handler.MessagingMethodInvokerHelper<> , STRING ) ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<?> = new MessagingMethodInvokerHelper <> ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , false ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<> . process ( org.springframework.integration.handler.Message<> ) ; assertEquals ( SpelCompilerMode . IMMEDIATE , TestUtils . getPropertyValue ( org.springframework.integration.handler.MessagingMethodInvokerHelper<> , STRING ) ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<?> = new MessagingMethodInvokerHelper <> ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , false ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<> . process ( org.springframework.integration.handler.Message<> ) ; assertEquals ( SpelCompilerMode . MIXED , TestUtils . getPropertyValue ( org.springframework.integration.handler.MessagingMethodInvokerHelper<> , STRING ) ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<?> = new MessagingMethodInvokerHelper <> ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , false ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<> . process ( org.springframework.integration.handler.Message<> ) ; assertEquals ( SpelCompilerMode . OFF , TestUtils . getPropertyValue ( org.springframework.integration.handler.MessagingMethodInvokerHelper<> , STRING ) ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<?> = new MessagingMethodInvokerHelper <> ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , false ) ; try { org.springframework.integration.handler.MessagingMethodInvokerHelper<> . process ( org.springframework.integration.handler.Message<> ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException . java.lang.String ( ) , equalTo ( STRING ) ) ; } org.springframework.integration.handler.MessagingMethodInvokerHelper<?> = new MessagingMethodInvokerHelper <> ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean , org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , false ) ; ConfigurableListableBeanFactory org.springframework.integration.handler.ConfigurableListableBeanFactory = mock ( ConfigurableListableBeanFactory .class ) ; willAnswer ( returnsFirstArg ( ) ) . given ( org.springframework.integration.handler.ConfigurableListableBeanFactory ) . resolveEmbeddedValue ( anyString ( ) ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<> . setBeanFactory ( org.springframework.integration.handler.ConfigurableListableBeanFactory ) ; try { org.springframework.integration.handler.MessagingMethodInvokerHelper<> . process ( org.springframework.integration.handler.Message<> ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException . java.lang.String ( ) , equalTo ( STRING + STRING ) ) ; } org.springframework.integration.handler.MessagingMethodInvokerHelper<?> = new MessagingMethodInvokerHelper <> ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean , STRING , false ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<> . process ( org.springframework.integration.handler.Message<> ) ; assertEquals ( SpelCompilerMode . IMMEDIATE , TestUtils . getPropertyValue ( org.springframework.integration.handler.MessagingMethodInvokerHelper<> , STRING ) ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<?> = new MessagingMethodInvokerHelper <> ( org.springframework.integration.handler.MethodInvokingMessageProcessorTests.UseSpelInvokerBean , ServiceActivator .class , false ) ; org.springframework.integration.handler.MessagingMethodInvokerHelper<> . process ( org.springframework.integration.handler.Message<> ) ; assertEquals ( SpelCompilerMode . MIXED , TestUtils . getPropertyValue ( org.springframework.integration.handler.MessagingMethodInvokerHelper<> , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.handler.DirectFieldAccessor org.springframework.integration.handler.DirectFieldAccessor ( MethodInvokingMessageProcessor org.springframework.integration.handler.MethodInvokingMessageProcessor ) { SpelParserConfiguration org.springframework.integration.handler.SpelParserConfiguration = TestUtils . getPropertyValue ( org.springframework.integration.handler.MethodInvokingMessageProcessor , STRING , SpelParserConfiguration .class ) ; DirectFieldAccessor org.springframework.integration.handler.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.handler.SpelParserConfiguration ) ; org.springframework.integration.handler.DirectFieldAccessor . setPropertyValue ( STRING , SpelCompilerMode . IMMEDIATE ) ; return org.springframework.integration.handler.DirectFieldAccessor ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Class<? extends java.lang.Exception> < ? extends java.lang.Exception > java.lang.Class<? extends java.lang.Exception> ) { this . java.lang.Class<? extends java.lang.Exception> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable = java.lang.Exception . java.lang.Throwable ( ) ; assertNotNull ( STRING + java.lang.Exception , java.lang.Throwable ) ; return java.lang.Class<> . boolean ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Description org.springframework.integration.handler.Description ) { org.springframework.integration.handler.Description . appendText ( STRING ) . appendValue ( java.lang.Class<> ) . appendText ( STRING ) . appendValue ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.Exception { throw new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.CheckedException ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.Exception { throw new org.springframework.integration.handler.MethodInvokingMessageProcessorTests.CheckedException ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.handler.Message<?> < ? > org.springframework.integration.handler.Message<?> ( java.lang.String java.lang.String ) { return new GenericMessage < java.lang.String > ( java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( Message < ? > org.springframework.integration.handler.Message<?> ) { return org.springframework.integration.handler.Message<> . getPayload ( ) + STRING ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.handler.Message<?> < ? > org.springframework.integration.handler.Message<?> ( Message < ? > org.springframework.integration.handler.Message<?> ) { return new GenericMessage < java.lang.String > ( org.springframework.integration.handler.Message<> . getPayload ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.handler.Message<?> < ? > org.springframework.integration.handler.Message<?> ( GenericMessage < java.lang.String > org.springframework.integration.handler.GenericMessage<java.lang.String> ) { return new GenericMessage < java.lang.String > ( org.springframework.integration.handler.GenericMessage<java.lang.String> . getPayload ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.handler.GenericMessage<java.lang.String> < java.lang.String > org.springframework.integration.handler.GenericMessage<java.lang.String> ( GenericMessage < java.lang.String > org.springframework.integration.handler.GenericMessage<java.lang.String> ) { return new GenericMessage < java.lang.String > ( org.springframework.integration.handler.GenericMessage<java.lang.String> . getPayload ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String , @ Header ( STRING ) java.lang.Integer java.lang.Integer ) { return java.lang.String + STRING + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> public int int ( int int ) { return int ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( Message < ? > org.springframework.integration.handler.Message<?> ) { return ( java.lang.String ) org.springframework.integration.handler.Message<> . getPayload ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( Message < ? > org.springframework.integration.handler.Message<?> , @ Header ( STRING ) java.lang.Integer java.lang.Integer ) { return ( java.lang.String ) org.springframework.integration.handler.Message<> . getPayload ( ) + STRING + java.lang.Integer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Header java.lang.String java.lang.String , @ Header ( STRING ) java.lang.Integer java.lang.Integer ) { return java.lang.String + STRING + java.lang.Integer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( @ Header ( required = false ) java.lang.Integer java.lang.Integer ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( @ Header ( STRING ) java.lang.Integer java.lang.Integer ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Header ( required = false ) java.lang.String java.lang.String , @ Header ( STRING ) java.lang.Integer java.lang.Integer ) { return java.lang.String + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Header ( name = STRING , required = false ) java.lang.String java.lang.String , @ Header ( name = STRING ) java.lang.Integer java.lang.Integer ) { return java.lang.String + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.util.Properties java.util.Properties ( java.util.Properties java.util.Properties ) { return java.util.Properties ; }  <METHOD_END>
<METHOD_START> public java.util.Map java.util.Map ( java.util.Map java.util.Map ) { return java.util.Map ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Object = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { this . java.lang.Object = java.lang.String ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( int int ) { this . java.lang.Object = int ; return java.lang.Integer . java.lang.Integer ( int ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Object = boolean ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { this . java.lang.Object = java.lang.String ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.Object = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String , int int ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ UseSpelInvoker public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ UseSpelInvoker ( STRING ) public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ ServiceActivator @ UseSpelInvoker ( STRING ) public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ UseSpelInvoker ( STRING ) public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ UseSpelInvoker ( STRING ) public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ UseSpelInvoker ( STRING ) public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
