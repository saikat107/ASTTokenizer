<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( STRING ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( STRING ) , notNullValue ( ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( STRING ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( STRING ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . getState ( ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getState ( ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> . getEvent ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; org.springframework.statemachine.zookeeper.CuratorFramework . create ( ) . creatingParentsIfNeeded ( ) . forPath ( STRING ) ; org.springframework.statemachine.zookeeper.CuratorFramework . create ( ) . creatingParentsIfNeeded ( ) . forPath ( STRING , new byte [ NUMBER ] ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING , true , NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( STRING ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( STRING ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( STRING ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( STRING ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( STRING ) , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . checkExists ( ) . forPath ( STRING ) , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , is ( NUMBER ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING , STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.CuratorFramework . getData ( ) . forPath ( STRING ) . length , greaterThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( null , STRING , true , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; } assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + int ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; } assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + int ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + int ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; java.lang.Exception java.lang.Exception = null ; try { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { if ( ( ( int % NUMBER ) == NUMBER ) ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; } else { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } if ( java.lang.Exception != null ) { assertThat ( java.lang.Exception , instanceOf ( StateMachineException .class ) ) ; assertThat ( ( ( StateMachineException ) java.lang.Exception ) . contains ( KeeperException . KeeperException .class ) , is ( true ) ) ; } else { assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + int ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + int ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; if ( ( ( int % NUMBER ) == NUMBER ) ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; } else { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; } assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; java.lang.Thread . void ( NUMBER ) ; } assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + int ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; java.lang.Thread . void ( NUMBER ) ; } assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + int ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + int ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; } assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + int ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + int ) ) ; } org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; } assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . size ( ) , is ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + ( int + NUMBER ) ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . get ( int ) . getEvent ( ) , is ( STRING + ( int + NUMBER ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING , true , NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble . addEnsembleListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble . join ( new org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestStateMachine ( ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . void ( NUMBER , NUMBER , NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; } assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble . boolean = true ; TestUtils . callMethod ( STRING , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble ) ; java.lang.String java.lang.String = STRING ; if ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<java.lang.Exception> . int ( ) > NUMBER ) { java.lang.String = org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<java.lang.Exception> . java.lang.Exception ( NUMBER ) . java.lang.String ( ) ; } assertThat ( java.lang.String , org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.List<java.lang.Exception> . int ( ) , is ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.OverflowControlZookeeperStateMachineEnsemble . setState ( new DefaultStateMachineContext < java.lang.String , java.lang.String > ( STRING + int , STRING + int , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) , new DefaultExtendedState ( ) ) ) ; } assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsembleTests.TestEnsembleListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public void ( CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework , java.lang.String java.lang.String , boolean boolean , int int ) { super( org.springframework.statemachine.zookeeper.CuratorFramework , java.lang.String , boolean , int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( boolean ) { super. registerWatcherForStatePath ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> , StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> , StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> ) { java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineEnsembleException org.springframework.statemachine.zookeeper.StateMachineEnsembleException ) { java.util.List<java.lang.Exception> . boolean ( org.springframework.statemachine.zookeeper.StateMachineEnsembleException ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { void ( int , int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.List<org.springframework.statemachine.zookeeper.StateMachineContext<java.lang.String,java.lang.String>> . clear ( ) ; java.util.List<java.lang.Exception> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.zookeeper.StateMachineAccessor<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineAccessor<java.lang.String,java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < java.lang.String > org.springframework.statemachine.zookeeper.Message<java.lang.String> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.zookeeper.State<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.State<java.lang.String,java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.statemachine.zookeeper.State<java.lang.String,java.lang.String>> < State < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.zookeeper.State<java.lang.String,java.lang.String>> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.statemachine.zookeeper.Transition<java.lang.String,java.lang.String>> < Transition < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.zookeeper.Transition<java.lang.String,java.lang.String>> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Exception java.lang.Exception ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineListener < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineListener<java.lang.String,java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineListener < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineListener<java.lang.String,java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.zookeeper.State<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.State<java.lang.String,java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.zookeeper.ExtendedState org.springframework.statemachine.zookeeper.ExtendedState ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.UUID java.util.UUID ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
