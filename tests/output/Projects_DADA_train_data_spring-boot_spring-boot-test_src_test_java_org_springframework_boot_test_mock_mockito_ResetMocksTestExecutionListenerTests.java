<METHOD_START> @ Test public void void ( ) { given ( org.springframework.boot.test.mock.mockito.ExampleService ( STRING ) . greeting ( ) ) . willReturn ( STRING ) ; given ( org.springframework.boot.test.mock.mockito.ExampleService ( STRING ) . greeting ( ) ) . willReturn ( STRING ) ; given ( org.springframework.boot.test.mock.mockito.ExampleService ( STRING ) . greeting ( ) ) . willReturn ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.boot.test.mock.mockito.ExampleService ( STRING ) . greeting ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.test.mock.mockito.ExampleService ( STRING ) . greeting ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.ExampleService ( STRING ) . greeting ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.test.mock.mockito.ExampleService org.springframework.boot.test.mock.mockito.ExampleService ( java.lang.String java.lang.String ) { return this . org.springframework.boot.test.mock.mockito.ApplicationContext . getBean ( java.lang.String , ExampleService .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.ExampleService org.springframework.boot.test.mock.mockito.ExampleService ( MockitoBeans org.springframework.boot.test.mock.mockito.MockitoBeans ) { ExampleService org.springframework.boot.test.mock.mockito.ExampleService = mock ( ExampleService .class , MockReset . before ( ) ) ; org.springframework.boot.test.mock.mockito.MockitoBeans . add ( org.springframework.boot.test.mock.mockito.ExampleService ) ; return org.springframework.boot.test.mock.mockito.ExampleService ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.ExampleService org.springframework.boot.test.mock.mockito.ExampleService ( MockitoBeans org.springframework.boot.test.mock.mockito.MockitoBeans ) { ExampleService org.springframework.boot.test.mock.mockito.ExampleService = mock ( ExampleService .class , MockReset . after ( ) ) ; org.springframework.boot.test.mock.mockito.MockitoBeans . add ( org.springframework.boot.test.mock.mockito.ExampleService ) ; return org.springframework.boot.test.mock.mockito.ExampleService ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.ExampleService org.springframework.boot.test.mock.mockito.ExampleService ( MockitoBeans org.springframework.boot.test.mock.mockito.MockitoBeans ) { ExampleService org.springframework.boot.test.mock.mockito.ExampleService = mock ( ExampleService .class ) ; org.springframework.boot.test.mock.mockito.MockitoBeans . add ( org.springframework.boot.test.mock.mockito.ExampleService ) ; return org.springframework.boot.test.mock.mockito.ExampleService ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy public org.springframework.boot.test.mock.mockito.ExampleService org.springframework.boot.test.mock.mockito.ExampleService ( ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListenerTests.BrokenFactoryBean org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListenerTests.BrokenFactoryBean ( ) { return new org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListenerTests.BrokenFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.String .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
