<METHOD_START> @ Test public void void ( ) { assertThat ( ReactiveWrappers . isNoValueType ( Mono .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isNoValueType ( Flux .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isNoValueType ( Single .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isNoValueType ( Completable .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrappers . isNoValueType ( Observable .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isNoValueType ( Publisher .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isNoValueType ( io . io . io .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isNoValueType ( io . io . io .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isNoValueType ( Flowable .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isNoValueType ( io . io . io .class ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ReactiveWrappers . isSingleValueType ( Mono .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( Flux .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( Single .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( Completable .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( Observable .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( Publisher .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( io . io . io .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( io . io . io .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( io . io . io .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( Flowable .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( io . io . io .class ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ReactiveWrappers . isMultiValueType ( Mono .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isMultiValueType ( Flux .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrappers . isMultiValueType ( Single .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( Completable .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isMultiValueType ( Observable .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrappers . isMultiValueType ( Publisher .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrappers . isMultiValueType ( io . io . io .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isSingleValueType ( io . io . io .class ) ) . isFalse ( ) ; assertThat ( ReactiveWrappers . isMultiValueType ( Flowable .class ) ) . isTrue ( ) ; assertThat ( ReactiveWrappers . isMultiValueType ( io . io . io .class ) ) . isTrue ( ) ; }  <METHOD_END>
