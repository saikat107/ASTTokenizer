<METHOD_START> public static void void ( ParserContext org.springframework.web.servlet.config.ParserContext , java.lang.Object java.lang.Object ) { void ( org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; void ( org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; void ( org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.config.RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference ( RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference , ParserContext org.springframework.web.servlet.config.ParserContext , java.lang.Object java.lang.Object ) { if ( org.springframework.web.servlet.config.RuntimeBeanReference != null ) { if ( org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . isAlias ( java.lang.String ) ) { org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . removeAlias ( java.lang.String ) ; } org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerAlias ( org.springframework.web.servlet.config.RuntimeBeanReference . getBeanName ( ) , java.lang.String ) ; } else if ( ! org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . isAlias ( java.lang.String ) && ! org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( UrlPathHelper .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; } return new RuntimeBeanReference ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.config.RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference ( RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference , ParserContext org.springframework.web.servlet.config.ParserContext , java.lang.Object java.lang.Object ) { if ( org.springframework.web.servlet.config.RuntimeBeanReference != null ) { if ( org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . isAlias ( java.lang.String ) ) { org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . removeAlias ( java.lang.String ) ; } org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerAlias ( org.springframework.web.servlet.config.RuntimeBeanReference . getBeanName ( ) , java.lang.String ) ; } else if ( ! org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . isAlias ( java.lang.String ) && ! org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( AntPathMatcher .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; } return new RuntimeBeanReference ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ParserContext org.springframework.web.servlet.config.ParserContext , java.lang.Object java.lang.Object ) { if ( ! org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( BeanNameUrlHandlerMapping .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , NUMBER ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = org.springframework.web.servlet.config.MvcNamespaceUtils . org.springframework.web.servlet.config.RuntimeBeanReference ( null , org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( ParserContext org.springframework.web.servlet.config.ParserContext , java.lang.Object java.lang.Object ) { if ( ! org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( HttpRequestHandlerAdapter .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( ParserContext org.springframework.web.servlet.config.ParserContext , java.lang.Object java.lang.Object ) { if ( ! org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( SimpleControllerHandlerAdapter .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.web.servlet.config.RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> , ParserContext org.springframework.web.servlet.config.ParserContext , java.lang.Object java.lang.Object ) { if ( ! org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( java.util.LinkedHashMap .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; if ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> != null ) { org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> ) ; } org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; } else if ( java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> != null ) { BeanDefinition org.springframework.web.servlet.config.BeanDefinition = org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . getBeanDefinition ( java.lang.String ) ; org.springframework.web.servlet.config.BeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.config.CorsConfiguration> ) ; } return new RuntimeBeanReference ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( ParserContext org.springframework.web.servlet.config.ParserContext ) { java.lang.String java.lang.String = AnnotationDrivenBeanDefinitionParser . HANDLER_MAPPING_BEAN_NAME ; if ( org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { BeanDefinition org.springframework.web.servlet.config.BeanDefinition = org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . getBeanDefinition ( java.lang.String ) ; return org.springframework.web.servlet.config.BeanDefinition . getPropertyValues ( ) . get ( STRING ) ; } java.lang.String = AnnotationDrivenBeanDefinitionParser . CONTENT_NEGOTIATION_MANAGER_BEAN_NAME ; if ( org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { return new RuntimeBeanReference ( java.lang.String ) ; } return null ; }  <METHOD_END>
