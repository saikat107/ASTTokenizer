<METHOD_START> public void ( byte [] byte[] ) { this( byte[] , new DefaultLobHandler ( ) ); }  <METHOD_END>
<METHOD_START> public void ( byte [] byte[] , LobHandler org.springframework.jdbc.core.support.LobHandler ) { this . java.lang.Object = byte[] ; this . int = ( byte[] != null ? byte[] . int : NUMBER ) ; this . org.springframework.jdbc.core.support.LobCreator = org.springframework.jdbc.core.support.LobHandler . getLobCreator ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , new DefaultLobHandler ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , LobHandler org.springframework.jdbc.core.support.LobHandler ) { this . java.lang.Object = java.lang.String ; this . int = ( java.lang.String != null ? java.lang.String . int ( ) : NUMBER ) ; this . org.springframework.jdbc.core.support.LobCreator = org.springframework.jdbc.core.support.LobHandler . getLobCreator ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.io.InputStream java.io.InputStream , int int ) { this( java.io.InputStream , int , new DefaultLobHandler ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.io.InputStream java.io.InputStream , int int , LobHandler org.springframework.jdbc.core.support.LobHandler ) { this . java.lang.Object = java.io.InputStream ; this . int = int ; this . org.springframework.jdbc.core.support.LobCreator = org.springframework.jdbc.core.support.LobHandler . getLobCreator ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.io.Reader java.io.Reader , int int ) { this( java.io.Reader , int , new DefaultLobHandler ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.io.Reader java.io.Reader , int int , LobHandler org.springframework.jdbc.core.support.LobHandler ) { this . java.lang.Object = java.io.Reader ; this . int = int ; this . org.springframework.jdbc.core.support.LobCreator = org.springframework.jdbc.core.support.LobHandler . getLobCreator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , int int , java.lang.String java.lang.String ) throws java.sql.SQLException { if ( int == java.sql.Types . int ) { if ( this . java.lang.Object instanceof byte [] || this . java.lang.Object == null ) { this . org.springframework.jdbc.core.support.LobCreator . setBlobAsBytes ( java.sql.PreparedStatement , int , ( byte [] ) this . java.lang.Object ) ; } else if ( this . java.lang.Object instanceof java.lang.String ) { this . org.springframework.jdbc.core.support.LobCreator . setBlobAsBytes ( java.sql.PreparedStatement , int , ( ( java.lang.String ) this . java.lang.Object ) . byte[] ( ) ) ; } else if ( this . java.lang.Object instanceof java.io.InputStream ) { this . org.springframework.jdbc.core.support.LobCreator . setBlobAsBinaryStream ( java.sql.PreparedStatement , int , ( java.io.InputStream ) this . java.lang.Object , this . int ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING ) ; } } else if ( int == java.sql.Types . int ) { if ( this . java.lang.Object instanceof java.lang.String || this . java.lang.Object == null ) { this . org.springframework.jdbc.core.support.LobCreator . setClobAsString ( java.sql.PreparedStatement , int , ( java.lang.String ) this . java.lang.Object ) ; } else if ( this . java.lang.Object instanceof java.io.InputStream ) { this . org.springframework.jdbc.core.support.LobCreator . setClobAsAsciiStream ( java.sql.PreparedStatement , int , ( java.io.InputStream ) this . java.lang.Object , this . int ) ; } else if ( this . java.lang.Object instanceof java.io.Reader ) { this . org.springframework.jdbc.core.support.LobCreator . setClobAsCharacterStream ( java.sql.PreparedStatement , int , ( java.io.Reader ) this . java.lang.Object , this . int ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING ) ; } } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.jdbc.core.support.LobCreator . close ( ) ; }  <METHOD_END>
