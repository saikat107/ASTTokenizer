<METHOD_START> @ Before public void void ( ) { int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.groovy.config.GroovyControlBusTests.MyGroovyCustomizer . boolean = false ; Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.groovy.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.groovy.config.PollableChannel . receive ( NUMBER ) ) ; assertTrue ( this . org.springframework.integration.groovy.config.GroovyControlBusTests.MyGroovyCustomizer . boolean ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.groovy.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception . java.lang.Throwable ( ) ; assertTrue ( STRING + java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) + STRING + java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable instanceof BeanCreationException ) ; assertTrue ( java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( new org.springframework.integration.groovy.config.GroovyControlBusTests.MockRequestAttributes ( ) ) ; Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.groovy.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; fail ( STRING ) ; } catch ( MessageHandlingException org.springframework.integration.groovy.config.MessageHandlingException ) { java.lang.Throwable java.lang.Throwable = org.springframework.integration.groovy.config.MessageHandlingException . getCause ( ) ; assertTrue ( STRING + java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) + STRING + java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable instanceof BeanCreationNotAllowedException ) ; assertTrue ( java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; fail ( STRING ) ; } catch ( MessageHandlingException org.springframework.integration.groovy.config.MessageHandlingException ) { java.lang.Throwable java.lang.Throwable = org.springframework.integration.groovy.config.MessageHandlingException . getCause ( ) ; assertTrue ( STRING + java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) + STRING + java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable instanceof BeanIsAbstractException ) ; assertTrue ( java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.groovy.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ManagedOperation public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( GroovyObject org.springframework.integration.groovy.config.GroovyObject ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , int int ) { return java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , int int ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , int int ) {		}  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( int int ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Runnable java.lang.Runnable , int int ) {		}  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.groovy.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.groovy.config.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.groovy.config.ExecutionCallback . execute ( ) ; }  <METHOD_END>
