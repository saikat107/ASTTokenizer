<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( final FunctionContext org.springframework.data.gemfire.function.FunctionContext ) { java.lang.Object [] java.lang.Object[] = super. resolveFunctionArguments ( org.springframework.data.gemfire.function.FunctionContext ) ; if ( boolean ( ) ) { int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { if ( java.lang.Object instanceof PdxInstance ) { java.lang.String java.lang.String = ( ( PdxInstance ) java.lang.Object ) . getClassName ( ) ; if ( boolean ( java.lang.String ) ) { java.lang.Object[] [ int ] = ( ( PdxInstance ) java.lang.Object ) . getObject ( ) ; } } int ++ ; } } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { try { return ( CacheFactory . getAnyInstance ( ) . getPdxSerializer ( ) != null ) ; } catch ( CacheClosedException org.springframework.data.gemfire.function.CacheClosedException ) { return false ; } }  <METHOD_END>
<METHOD_START> boolean boolean ( final java.lang.String java.lang.String ) { return ( boolean ( java.lang.String ) && boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( final java.lang.String java.lang.String ) { return ClassUtils . isPresent ( java.lang.String , java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( final java.lang.String java.lang.String ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.reflect.Method ( ) . java.lang.Class<?>[] ( ) ) { if ( java.lang.Class<> . java.lang.String ( ) . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
