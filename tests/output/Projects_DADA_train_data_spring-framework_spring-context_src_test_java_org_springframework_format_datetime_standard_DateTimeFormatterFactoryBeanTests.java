<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean . isSingleton ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean . getObjectType ( ) , is ( equalTo ( ( java.lang.Class ) java.time.format.DateTimeFormatter .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean . getObject ( ) . toString ( ) , is ( equalTo ( java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter ( java.time.format.FormatStyle . java.time.format.FormatStyle ) . java.lang.String ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean . afterPropertiesSet ( ) ; java.time.format.DateTimeFormatter java.time.format.DateTimeFormatter = org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean . getObject ( ) ; assertThat ( java.time.format.DateTimeFormatter . java.lang.String ( ) , is ( equalTo ( java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter ( java.time.format.FormatStyle . java.time.format.FormatStyle ) . java.lang.String ( ) ) ) ) ; org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean . setStylePattern ( STRING ) ; assertThat ( org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean . getObject ( ) , is ( sameInstance ( java.time.format.DateTimeFormatter ) ) ) ; }  <METHOD_END>
