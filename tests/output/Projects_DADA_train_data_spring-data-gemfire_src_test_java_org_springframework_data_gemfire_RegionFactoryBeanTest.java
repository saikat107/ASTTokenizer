<METHOD_START> @ After public void void ( ) { org.springframework.data.gemfire.RegionFactoryBean . setDataPolicy ( ( DataPolicy ) null ) ; org.springframework.data.gemfire.RegionFactoryBean . setShortcut ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.data.gemfire.RegionFactoryBeanConfig org.springframework.data.gemfire.RegionFactoryBeanConfig ( ) { return new RegionFactoryBeanConfig ( new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean ( ) , STRING ) { @ java.lang.Override public void void ( ) {			} @ java.lang.Override public void void ( ) { Region org.springframework.data.gemfire.Region = regionFactoryBean . getRegion ( ) ; assertEquals ( DataPolicy . DEFAULT , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Region org.springframework.data.gemfire.Region = regionFactoryBean . getRegion ( ) ; assertEquals ( DataPolicy . DEFAULT , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.data.gemfire.RegionFactoryBeanConfig org.springframework.data.gemfire.RegionFactoryBeanConfig ( ) { return new RegionFactoryBeanConfig ( new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean ( ) , STRING ) { @ java.lang.Override public void void ( ) { regionFactoryBean . setPersistent ( true ) ; } @ java.lang.Override public void void ( ) { Region org.springframework.data.gemfire.Region = regionFactoryBean . getRegion ( ) ; assertEquals ( DataPolicy . PERSISTENT_REPLICATE , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { regionFactoryBean . setPersistent ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Region org.springframework.data.gemfire.Region = regionFactoryBean . getRegion ( ) ; assertEquals ( DataPolicy . PERSISTENT_REPLICATE , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private org.springframework.data.gemfire.RegionFactoryBeanConfig org.springframework.data.gemfire.RegionFactoryBeanConfig ( ) { return new RegionFactoryBeanConfig ( new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean ( ) , STRING ) { @ java.lang.Override public void void ( ) { regionFactoryBean . setDataPolicy ( STRING ) ; regionFactoryBean . setPersistent ( false ) ; } @ java.lang.Override public void void ( ) { assertNotNull ( this . exception ) ; assertEquals ( STRING , exception . getMessage ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { regionFactoryBean . setDataPolicy ( STRING ) ; regionFactoryBean . setPersistent ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { assertNotNull ( this . exception ) ; assertEquals ( STRING , exception . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { add ( org.springframework.data.gemfire.RegionFactoryBeanConfig ( ) ) ; add ( org.springframework.data.gemfire.RegionFactoryBeanConfig ( ) ) ; add ( org.springframework.data.gemfire.RegionFactoryBeanConfig ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.PartitionAttributes org.springframework.data.gemfire.PartitionAttributes ( final java.lang.String java.lang.String , final int int , final long long , final int int , final long long , final long long , final int int ) throws java.lang.Exception { PartitionAttributesFactoryBean org.springframework.data.gemfire.PartitionAttributesFactoryBean = new PartitionAttributesFactoryBean ( ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setColocatedWith ( java.lang.String ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setLocalMaxMemory ( int ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setRecoveryDelay ( long ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setRedundantCopies ( int ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setStartupRecoveryDelay ( long ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setTotalMaxMemory ( long ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setTotalNumBuckets ( int ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . afterPropertiesSet ( ) ; return org.springframework.data.gemfire.PartitionAttributesFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.RegionAttributes org.springframework.data.gemfire.RegionAttributes ( final DataPolicy ... org.springframework.data.gemfire.DataPolicy[] ) { RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; when ( org.springframework.data.gemfire.RegionAttributes . getDataPolicy ( ) ) . thenReturn ( ArrayUtils . getFirst ( org.springframework.data.gemfire.DataPolicy[] , DataPolicy . DEFAULT ) ) ; return org.springframework.data.gemfire.RegionAttributes ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.RegionFactory<?,?> < ? , ? > org.springframework.data.gemfire.RegionFactory<?,?> ( ) { return mock ( RegionFactory .class ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.RegionFactory<?,?> < ? , ? > org.springframework.data.gemfire.RegionFactory<?,?> ( ) { return new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactoryBean < ? , ? > org.springframework.data.gemfire.RegionFactoryBean<?,?> = new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( null ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . assertDataPolicyAndPersistentAttributesAreCompatible ( DataPolicy . PARTITION ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . assertDataPolicyAndPersistentAttributesAreCompatible ( DataPolicy . REPLICATE ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . assertDataPolicyAndPersistentAttributesAreCompatible ( DataPolicy . PERSISTENT_PARTITION ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . assertDataPolicyAndPersistentAttributesAreCompatible ( DataPolicy . PERSISTENT_REPLICATE ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . assertDataPolicyAndPersistentAttributesAreCompatible ( DataPolicy . PARTITION ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . assertDataPolicyAndPersistentAttributesAreCompatible ( DataPolicy . REPLICATE ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . assertDataPolicyAndPersistentAttributesAreCompatible ( DataPolicy . PERSISTENT_PARTITION ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . assertDataPolicyAndPersistentAttributesAreCompatible ( DataPolicy . PERSISTENT_REPLICATE ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { RegionFactoryBean < ? , ? > org.springframework.data.gemfire.RegionFactoryBean<?,?> = new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . assertDataPolicyAndPersistentAttributesAreCompatible ( DataPolicy . REPLICATE ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { RegionFactoryBean < ? , ? > org.springframework.data.gemfire.RegionFactoryBean<?,?> = new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . assertDataPolicyAndPersistentAttributesAreCompatible ( DataPolicy . PERSISTENT_PARTITION ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactoryBean < ? , ? > org.springframework.data.gemfire.RegionFactoryBean<?,?> = new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; assertFalse ( org.springframework.data.gemfire.RegionFactoryBean<,> . isPersistent ( ) ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( false ) ; assertFalse ( org.springframework.data.gemfire.RegionFactoryBean<,> . isPersistent ( ) ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( true ) ; assertTrue ( org.springframework.data.gemfire.RegionFactoryBean<,> . isPersistent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactoryBean < ? , ? > org.springframework.data.gemfire.RegionFactoryBean<?,?> = new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; assertTrue ( org.springframework.data.gemfire.RegionFactoryBean<,> . isPersistentUnspecified ( ) ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( false ) ; assertFalse ( org.springframework.data.gemfire.RegionFactoryBean<,> . isPersistentUnspecified ( ) ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( true ) ; assertFalse ( org.springframework.data.gemfire.RegionFactoryBean<,> . isPersistentUnspecified ( ) ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( null ) ; assertTrue ( org.springframework.data.gemfire.RegionFactoryBean<,> . isPersistentUnspecified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactoryBean < ? , ? > org.springframework.data.gemfire.RegionFactoryBean<?,?> = new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; assertFalse ( org.springframework.data.gemfire.RegionFactoryBean<,> . isNotPersistent ( ) ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( true ) ; assertFalse ( org.springframework.data.gemfire.RegionFactoryBean<,> . isNotPersistent ( ) ) ; org.springframework.data.gemfire.RegionFactoryBean<,> . setPersistent ( false ) ; assertTrue ( org.springframework.data.gemfire.RegionFactoryBean<,> . isNotPersistent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; final RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.Cache . createRegionFactory ( eq ( RegionShortcut . PARTITION_REDUNDANT_PERSISTENT_OVERFLOW ) ) ) . thenReturn ( org.springframework.data.gemfire.RegionFactory ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; RegionFactoryBean org.springframework.data.gemfire.RegionFactoryBean = new RegionFactoryBean ( ) { @ java.lang.Override org.springframework.data.gemfire.DataPolicy org.springframework.data.gemfire.DataPolicy ( final RegionFactory org.springframework.data.gemfire.RegionFactory ) { return DataPolicy . PERSISTENT_PARTITION ; } @ java.lang.Override public void void ( final DataPolicy org.springframework.data.gemfire.DataPolicy ) { assertEquals ( DataPolicy . PERSISTENT_PARTITION , org.springframework.data.gemfire.DataPolicy ) ; super. setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } @ java.lang.Override protected org.springframework.data.gemfire.RegionFactory org.springframework.data.gemfire.RegionFactory ( RegionFactory org.springframework.data.gemfire.RegionFactory , RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { return org.springframework.data.gemfire.RegionFactory ; } } ; org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( org.springframework.data.gemfire.RegionAttributes ) ; org.springframework.data.gemfire.RegionFactoryBean . setShortcut ( RegionShortcut . PARTITION_REDUNDANT_PERSISTENT_OVERFLOW ) ; assertSame ( org.springframework.data.gemfire.RegionFactory , org.springframework.data.gemfire.RegionFactoryBean . createRegionFactory ( org.springframework.data.gemfire.Cache ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . createRegionFactory ( eq ( RegionShortcut . PARTITION_REDUNDANT_PERSISTENT_OVERFLOW ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.DataPolicy org.springframework.data.gemfire.DataPolicy ( final RegionFactory org.springframework.data.gemfire.RegionFactory ) { return DataPolicy . PERSISTENT_PARTITION ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final DataPolicy org.springframework.data.gemfire.DataPolicy ) { assertEquals ( DataPolicy . PERSISTENT_PARTITION , org.springframework.data.gemfire.DataPolicy ) ; super. setDataPolicy ( org.springframework.data.gemfire.DataPolicy ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.RegionFactory org.springframework.data.gemfire.RegionFactory ( RegionFactory org.springframework.data.gemfire.RegionFactory , RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { return org.springframework.data.gemfire.RegionFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.Cache . createRegionFactory ( eq ( org.springframework.data.gemfire.RegionAttributes ) ) ) . thenReturn ( org.springframework.data.gemfire.RegionFactory ) ; RegionFactoryBean org.springframework.data.gemfire.RegionFactoryBean = new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( org.springframework.data.gemfire.RegionAttributes ) ; org.springframework.data.gemfire.RegionFactoryBean . setShortcut ( null ) ; assertSame ( org.springframework.data.gemfire.RegionFactory , org.springframework.data.gemfire.RegionFactoryBean . createRegionFactory ( org.springframework.data.gemfire.Cache ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . createRegionFactory ( eq ( org.springframework.data.gemfire.RegionAttributes ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.Cache . createRegionFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.RegionFactory ) ; RegionFactoryBean org.springframework.data.gemfire.RegionFactoryBean = new org.springframework.data.gemfire.RegionFactoryBeanTest.TestRegionFactoryBean ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( null ) ; org.springframework.data.gemfire.RegionFactoryBean . setShortcut ( null ) ; assertSame ( org.springframework.data.gemfire.RegionFactory , org.springframework.data.gemfire.RegionFactoryBean . createRegionFactory ( org.springframework.data.gemfire.Cache ) ) ; verify ( org.springframework.data.gemfire.Cache ) . createRegionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvictionAttributes org.springframework.data.gemfire.EvictionAttributes = EvictionAttributes . createLRUEntryAttributes ( ) ; ExpirationAttributes org.springframework.data.gemfire.ExpirationAttributes = new ExpirationAttributes ( NUMBER , ExpirationAction . LOCAL_DESTROY ) ; MembershipAttributes org.springframework.data.gemfire.MembershipAttributes = new MembershipAttributes ( ) ; PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.PartitionAttributes ( STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; SubscriptionAttributes org.springframework.data.gemfire.SubscriptionAttributes = new SubscriptionAttributes ( ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; RegionFactory < java.lang.Long , java.lang.String > org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> = ( RegionFactory < java.lang.Long , java.lang.String > ) org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.RegionAttributes . getCloningEnabled ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.RegionAttributes . getConcurrencyChecksEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getConcurrencyLevel ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.RegionAttributes . getCustomEntryIdleTimeout ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.RegionAttributes . getCustomEntryTimeToLive ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.RegionAttributes . isDiskSynchronous ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getEnableAsyncConflation ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.RegionAttributes . getEnableSubscriptionConflation ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.RegionAttributes . getEntryIdleTimeout ( ) ) . thenReturn ( org.springframework.data.gemfire.ExpirationAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getEntryTimeToLive ( ) ) . thenReturn ( org.springframework.data.gemfire.ExpirationAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getEvictionAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.EvictionAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getIgnoreJTA ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.RegionAttributes . getIndexMaintenanceSynchronous ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.RegionAttributes . getInitialCapacity ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.RegionAttributes . getKeyConstraint ( ) ) . thenReturn ( java.lang.Long .class ) ; when ( org.springframework.data.gemfire.RegionAttributes . getLoadFactor ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.RegionAttributes . isLockGrantor ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getMembershipAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.MembershipAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getMulticastEnabled ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.PartitionAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getPoolName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.RegionAttributes . getRegionIdleTimeout ( ) ) . thenReturn ( org.springframework.data.gemfire.ExpirationAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getRegionTimeToLive ( ) ) . thenReturn ( org.springframework.data.gemfire.ExpirationAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getStatisticsEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getSubscriptionAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.SubscriptionAttributes ) ; RegionFactoryBean org.springframework.data.gemfire.RegionFactoryBean = new RegionFactoryBean ( ) { @ java.lang.Override boolean boolean ( final RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { return true ; } @ java.lang.Override void void ( final RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { } } ; org.springframework.data.gemfire.RegionFactoryBean . mergeRegionAttributes ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> , org.springframework.data.gemfire.RegionAttributes ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setCloningEnabled ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setConcurrencyChecksEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setConcurrencyLevel ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setCustomEntryIdleTimeout ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setCustomEntryTimeToLive ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setDiskSynchronous ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setEnableAsyncConflation ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setEnableSubscriptionConflation ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setEntryIdleTimeout ( same ( org.springframework.data.gemfire.ExpirationAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setEntryTimeToLive ( same ( org.springframework.data.gemfire.ExpirationAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setEvictionAttributes ( same ( org.springframework.data.gemfire.EvictionAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setIgnoreJTA ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setIndexMaintenanceSynchronous ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setInitialCapacity ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setKeyConstraint ( java.lang.Long .class ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setLoadFactor ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setLockGrantor ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setMembershipAttributes ( same ( org.springframework.data.gemfire.MembershipAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setMulticastEnabled ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setPartitionAttributes ( eq ( org.springframework.data.gemfire.PartitionAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setPoolName ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setRegionIdleTimeout ( same ( org.springframework.data.gemfire.ExpirationAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setRegionTimeToLive ( same ( org.springframework.data.gemfire.ExpirationAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setStatisticsEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setSubscriptionAttributes ( same ( org.springframework.data.gemfire.SubscriptionAttributes ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override boolean boolean ( final RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( final RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . mergeRegionAttributes ( org.springframework.data.gemfire.RegionFactory , null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setCloningEnabled ( false ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setConcurrencyChecksEnabled ( true ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setConcurrencyLevel ( NUMBER ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setCustomEntryIdleTimeout ( any ( CustomExpiry .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setCustomEntryTimeToLive ( any ( CustomExpiry .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDiskSynchronous ( true ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setEnableAsyncConflation ( true ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setEnableSubscriptionConflation ( false ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setEntryIdleTimeout ( any ( ExpirationAttributes .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setEntryTimeToLive ( any ( ExpirationAttributes .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setEvictionAttributes ( any ( EvictionAttributes .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setIgnoreJTA ( false ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setIndexMaintenanceSynchronous ( false ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setInitialCapacity ( NUMBER ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setKeyConstraint ( any ( java.lang.Class .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setLoadFactor ( NUMBER ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setLockGrantor ( true ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setMembershipAttributes ( any ( MembershipAttributes .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setMulticastEnabled ( false ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setPartitionAttributes ( any ( PartitionAttributes .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setPoolName ( any ( java.lang.String .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setRegionIdleTimeout ( any ( ExpirationAttributes .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setRegionTimeToLive ( any ( ExpirationAttributes .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setStatisticsEnabled ( true ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setSubscriptionAttributes ( any ( SubscriptionAttributes .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setValueConstraint ( any ( java.lang.Class .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpirationAttributes org.springframework.data.gemfire.ExpirationAttributes = new ExpirationAttributes ( NUMBER , ExpirationAction . LOCAL_INVALIDATE ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; RegionFactory < java.lang.Long , java.lang.String > org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> = ( RegionFactory < java.lang.Long , java.lang.String > ) org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.RegionAttributes . getCloningEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getConcurrencyChecksEnabled ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.RegionAttributes . getConcurrencyLevel ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.RegionAttributes . getCustomEntryIdleTimeout ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.RegionAttributes . getCustomEntryTimeToLive ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.RegionAttributes . isDiskSynchronous ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.RegionAttributes . getEnableAsyncConflation ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getEnableSubscriptionConflation ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getEntryIdleTimeout ( ) ) . thenReturn ( org.springframework.data.gemfire.ExpirationAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getEntryTimeToLive ( ) ) . thenReturn ( org.springframework.data.gemfire.ExpirationAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getEvictionAttributes ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.RegionAttributes . getIgnoreJTA ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getIndexMaintenanceSynchronous ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getInitialCapacity ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.RegionAttributes . getKeyConstraint ( ) ) . thenReturn ( java.lang.Long .class ) ; when ( org.springframework.data.gemfire.RegionAttributes . getLoadFactor ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.RegionAttributes . isLockGrantor ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.RegionAttributes . getMembershipAttributes ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.RegionAttributes . getMulticastEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.RegionAttributes . getPoolName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.RegionAttributes . getRegionIdleTimeout ( ) ) . thenReturn ( org.springframework.data.gemfire.ExpirationAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getRegionTimeToLive ( ) ) . thenReturn ( org.springframework.data.gemfire.ExpirationAttributes ) ; when ( org.springframework.data.gemfire.RegionAttributes . getStatisticsEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.RegionAttributes . getSubscriptionAttributes ( ) ) . thenReturn ( null ) ; RegionFactoryBean org.springframework.data.gemfire.RegionFactoryBean = new RegionFactoryBean ( ) { @ java.lang.Override boolean boolean ( final RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { return false ; } @ java.lang.Override void void ( final RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { } } ; org.springframework.data.gemfire.RegionFactoryBean . mergeRegionAttributes ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> , org.springframework.data.gemfire.RegionAttributes ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setCloningEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setConcurrencyChecksEnabled ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setConcurrencyLevel ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setCustomEntryIdleTimeout ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setCustomEntryTimeToLive ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setDiskSynchronous ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setEnableAsyncConflation ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setEnableSubscriptionConflation ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setEntryIdleTimeout ( same ( org.springframework.data.gemfire.ExpirationAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setEntryTimeToLive ( same ( org.springframework.data.gemfire.ExpirationAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> , never ( ) ) . setEvictionAttributes ( any ( EvictionAttributes .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setIgnoreJTA ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setIndexMaintenanceSynchronous ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setInitialCapacity ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setKeyConstraint ( java.lang.Long .class ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setLoadFactor ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setLockGrantor ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setMembershipAttributes ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setMulticastEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> , never ( ) ) . setPartitionAttributes ( any ( PartitionAttributes .class ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setPoolName ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setRegionIdleTimeout ( same ( org.springframework.data.gemfire.ExpirationAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setRegionTimeToLive ( same ( org.springframework.data.gemfire.ExpirationAttributes ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setStatisticsEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.RegionFactory<java.lang.Long,java.lang.String> ) . setSubscriptionAttributes ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override boolean boolean ( final RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( final RegionAttributes org.springframework.data.gemfire.RegionAttributes ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.PartitionAttributes ( STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.PartitionAttributes ) ; org.springframework.data.gemfire.RegionFactoryBean . setShortcut ( RegionShortcut . PARTITION_PROXY_REDUNDANT ) ; org.springframework.data.gemfire.RegionFactoryBean . mergePartitionAttributes ( org.springframework.data.gemfire.RegionFactory , org.springframework.data.gemfire.RegionAttributes ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = TestUtils . readField ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.RegionFactory ) ) ; PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.PartitionAttributes ) ; assertNotSame ( org.springframework.data.gemfire.PartitionAttributes , org.springframework.data.gemfire.PartitionAttributes ) ; assertEquals ( STRING , org.springframework.data.gemfire.PartitionAttributes . getColocatedWith ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getLocalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRedundantCopies ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getStartupRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalNumBuckets ( ) ) ; verify ( org.springframework.data.gemfire.RegionAttributes , times ( NUMBER ) ) . getPartitionAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.PartitionAttributes ( STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.PartitionAttributes ) ; org.springframework.data.gemfire.RegionFactoryBean . setShortcut ( RegionShortcut . PARTITION_REDUNDANT ) ; org.springframework.data.gemfire.RegionFactoryBean . mergePartitionAttributes ( org.springframework.data.gemfire.RegionFactory , org.springframework.data.gemfire.RegionAttributes ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = TestUtils . readField ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.RegionFactory ) ) ; PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.PartitionAttributes ) ; assertNotSame ( org.springframework.data.gemfire.PartitionAttributes , org.springframework.data.gemfire.PartitionAttributes ) ; assertEquals ( STRING , org.springframework.data.gemfire.PartitionAttributes . getColocatedWith ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getLocalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRedundantCopies ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getStartupRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalNumBuckets ( ) ) ; verify ( org.springframework.data.gemfire.RegionAttributes , times ( NUMBER ) ) . getPartitionAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.PartitionAttributes ( STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.PartitionAttributes ) ; org.springframework.data.gemfire.RegionFactoryBean . setShortcut ( RegionShortcut . PARTITION_REDUNDANT_PERSISTENT_OVERFLOW ) ; org.springframework.data.gemfire.RegionFactoryBean . mergePartitionAttributes ( org.springframework.data.gemfire.RegionFactory , org.springframework.data.gemfire.RegionAttributes ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = TestUtils . readField ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.RegionFactory ) ) ; PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.PartitionAttributes ) ; assertNotSame ( org.springframework.data.gemfire.PartitionAttributes , org.springframework.data.gemfire.PartitionAttributes ) ; assertEquals ( STRING , org.springframework.data.gemfire.PartitionAttributes . getColocatedWith ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getLocalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRedundantCopies ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getStartupRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalNumBuckets ( ) ) ; verify ( org.springframework.data.gemfire.RegionAttributes , times ( NUMBER ) ) . getPartitionAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.PartitionAttributes ( STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.PartitionAttributes ) ; org.springframework.data.gemfire.RegionFactoryBean . setShortcut ( RegionShortcut . PARTITION_PROXY ) ; org.springframework.data.gemfire.RegionFactoryBean . mergePartitionAttributes ( org.springframework.data.gemfire.RegionFactory , org.springframework.data.gemfire.RegionAttributes ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = TestUtils . readField ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.RegionFactory ) ) ; PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.PartitionAttributes ) ; assertNotSame ( org.springframework.data.gemfire.PartitionAttributes , org.springframework.data.gemfire.PartitionAttributes ) ; assertEquals ( STRING , org.springframework.data.gemfire.PartitionAttributes . getColocatedWith ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getLocalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRedundantCopies ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getStartupRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalNumBuckets ( ) ) ; verify ( org.springframework.data.gemfire.RegionAttributes , times ( NUMBER ) ) . getPartitionAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.PartitionAttributes ( STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.PartitionAttributes ) ; org.springframework.data.gemfire.RegionFactoryBean . setShortcut ( RegionShortcut . PARTITION ) ; org.springframework.data.gemfire.RegionFactoryBean . mergePartitionAttributes ( org.springframework.data.gemfire.RegionFactory , org.springframework.data.gemfire.RegionAttributes ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = TestUtils . readField ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.RegionFactory ) ) ; PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.PartitionAttributes ) ; assertNotSame ( org.springframework.data.gemfire.PartitionAttributes , org.springframework.data.gemfire.PartitionAttributes ) ; assertEquals ( STRING , org.springframework.data.gemfire.PartitionAttributes . getColocatedWith ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getLocalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRedundantCopies ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getStartupRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalNumBuckets ( ) ) ; verify ( org.springframework.data.gemfire.RegionAttributes , times ( NUMBER ) ) . getPartitionAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionAttributes org.springframework.data.gemfire.RegionAttributes = mock ( RegionAttributes .class ) ; RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; when ( org.springframework.data.gemfire.RegionAttributes . getPartitionAttributes ( ) ) . thenReturn ( null ) ; org.springframework.data.gemfire.RegionFactoryBean . setShortcut ( null ) ; org.springframework.data.gemfire.RegionFactoryBean . mergePartitionAttributes ( org.springframework.data.gemfire.RegionFactory , org.springframework.data.gemfire.RegionAttributes ) ; verify ( org.springframework.data.gemfire.RegionAttributes , times ( NUMBER ) ) . getPartitionAttributes ( ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setPartitionAttributes ( any ( PartitionAttributes .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . NORMAL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PRELOADED ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . EMPTY ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( org.springframework.data.gemfire.RegionAttributes ( DataPolicy . PRELOADED ) ) ; org.springframework.data.gemfire.RegionFactoryBean . setDataPolicy ( ( DataPolicy ) null ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory , times ( NUMBER ) ) . setDataPolicy ( eq ( DataPolicy . PRELOADED ) ) ; assertEquals ( DataPolicy . PRELOADED , org.springframework.data.gemfire.RegionFactoryBean . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( org.springframework.data.gemfire.RegionAttributes ( DataPolicy . PARTITION ) ) ; org.springframework.data.gemfire.RegionFactoryBean . setDataPolicy ( ( DataPolicy ) null ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory , times ( NUMBER ) ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.RegionFactoryBean . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( org.springframework.data.gemfire.RegionAttributes ( DataPolicy . PERSISTENT_PARTITION ) ) ; org.springframework.data.gemfire.RegionFactoryBean . setDataPolicy ( ( DataPolicy ) null ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , ( java.lang.String ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory , times ( NUMBER ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; assertEquals ( DataPolicy . PERSISTENT_PARTITION , org.springframework.data.gemfire.RegionFactoryBean . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( org.springframework.data.gemfire.RegionAttributes ( DataPolicy . PERSISTENT_PARTITION ) ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , ( java.lang.String ) null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_PARTITION ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( org.springframework.data.gemfire.RegionAttributes ( DataPolicy . PARTITION ) ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , ( java.lang.String ) null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PARTITION ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( org.springframework.data.gemfire.RegionAttributes ( ) ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( null ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , ( DataPolicy ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( org.springframework.data.gemfire.RegionAttributes ( ) ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , ( DataPolicy ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setAttributes ( org.springframework.data.gemfire.RegionAttributes ( ) ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , ( DataPolicy ) null ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , DataPolicy . REPLICATE ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . REPLICATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , null , DataPolicy . PERSISTENT_REPLICATE ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , DataPolicy . PERSISTENT_REPLICATE ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . REPLICATE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; try { org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( null ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . DEFAULT ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; verify ( org.springframework.data.gemfire.RegionFactory , never ( ) ) . setDataPolicy ( eq ( DataPolicy . REPLICATE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , false , DataPolicy . REPLICATE ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . REPLICATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = org.springframework.data.gemfire.RegionFactory<?,?> ( ) ; org.springframework.data.gemfire.RegionFactoryBean . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean . resolveDataPolicy ( org.springframework.data.gemfire.RegionFactory , true , DataPolicy . PERSISTENT_REPLICATE ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setDataPolicy ( eq ( DataPolicy . PERSISTENT_REPLICATE ) ) ; }  <METHOD_END>
<METHOD_START> protected void ( ) { super( ( GemFireCacheImpl ) null ); }  <METHOD_END>
