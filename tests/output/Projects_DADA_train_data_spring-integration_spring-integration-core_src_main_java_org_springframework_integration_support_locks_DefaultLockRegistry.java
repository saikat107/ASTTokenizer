<METHOD_START> public void ( ) { this( NUMBER ); }  <METHOD_END>
<METHOD_START> public void ( int int ) { java.lang.String java.lang.String = java.lang.Integer . java.lang.String ( int ) ; Assert . isTrue ( java.lang.String . int ( ) < NUMBER && ( int == NUMBER || java.lang.String . int ( '0' ) < java.lang.String . int ( '1' ) ) , STRING ) ; this . int = int ; int int = this . int + NUMBER ; this . java.util.concurrent.locks.Lock[] = new java.util.concurrent.locks.ReentrantLock [ int ] ; for ( int int = NUMBER ; int < int ; int ++ ) { this . java.util.concurrent.locks.Lock[] [ int ] = new java.util.concurrent.locks.ReentrantLock ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; java.lang.Integer java.lang.Integer = java.lang.Object . int ( ) & this . int ; return this . java.util.concurrent.locks.Lock[] [ java.lang.Integer ] ; }  <METHOD_END>
