<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.view.ServletException { StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; MutablePropertyValues org.springframework.web.servlet.view.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.view.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , STRING ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . registerSingleton ( STRING , InternalResourceView .class , org.springframework.web.servlet.view.MutablePropertyValues ) ; MutablePropertyValues org.springframework.web.servlet.view.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.view.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , STRING ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . registerSingleton ( STRING , JstlView .class , org.springframework.web.servlet.view.MutablePropertyValues ) ; BeanNameViewResolver org.springframework.web.servlet.view.BeanNameViewResolver = new BeanNameViewResolver ( ) ; org.springframework.web.servlet.view.BeanNameViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.BeanNameViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , InternalResourceView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.BeanNameViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( JstlView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UrlBasedViewResolver org.springframework.web.servlet.view.UrlBasedViewResolver = new UrlBasedViewResolver ( ) ; try { org.springframework.web.servlet.view.UrlBasedViewResolver . setViewClass ( null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlBasedViewResolver org.springframework.web.servlet.view.UrlBasedViewResolver = new UrlBasedViewResolver ( ) ; org.springframework.web.servlet.view.UrlBasedViewResolver . setViewClass ( JstlView .class ) ; void ( org.springframework.web.servlet.view.UrlBasedViewResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UrlBasedViewResolver org.springframework.web.servlet.view.UrlBasedViewResolver = new UrlBasedViewResolver ( ) ; org.springframework.web.servlet.view.UrlBasedViewResolver . setViewClass ( JstlView .class ) ; void ( org.springframework.web.servlet.view.UrlBasedViewResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new InternalResourceViewResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new InternalResourceViewResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( UrlBasedViewResolver org.springframework.web.servlet.view.UrlBasedViewResolver ) throws java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.servlet.view.UrlBasedViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.UrlBasedViewResolver . setContentType ( STRING ) ; org.springframework.web.servlet.view.UrlBasedViewResolver . setRequestContextAttribute ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getContentType ( ) ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getContentType ( ) ) ; HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.view.StaticWebApplicationContext . getServletContext ( ) ) ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new AcceptHeaderLocaleResolver ( ) ) ; org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( DispatcherServlet . THEME_RESOLVER_ATTRIBUTE , new FixedThemeResolver ( ) ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; TestBean org.springframework.web.servlet.view.TestBean = new TestBean ( ) ; java.util.Map . java.lang.Object ( STRING , org.springframework.web.servlet.view.TestBean ) ; org.springframework.web.servlet.view.View . render ( java.util.Map , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.view.TestBean . equals ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( STRING ) instanceof RequestContext ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , RedirectView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( RedirectView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; assertSame ( STRING , org.springframework.web.servlet.view.StaticWebApplicationContext , ( ( RedirectView ) org.springframework.web.servlet.view.View ) . getApplicationContext ( ) ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , InternalResourceView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( UrlBasedViewResolver org.springframework.web.servlet.view.UrlBasedViewResolver ) throws java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.servlet.view.UrlBasedViewResolver . setPrefix ( STRING ) ; org.springframework.web.servlet.view.UrlBasedViewResolver . setSuffix ( STRING ) ; org.springframework.web.servlet.view.UrlBasedViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , RedirectView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( RedirectView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.UrlBasedViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , InternalResourceView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.servlet.view.MockServletContext = new MockServletContext ( ) ; StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( org.springframework.web.servlet.view.MockServletContext ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; InternalResourceViewResolver org.springframework.web.servlet.view.InternalResourceViewResolver = new InternalResourceViewResolver ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setAttributes ( java.util.Properties ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setAttributesMap ( java.util.Map ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; java.util.Map java.util.Map = ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getStaticAttributes ( ) ; assertEquals ( STRING , java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.Map . java.lang.Object ( STRING ) ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; java.util.Map = ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getStaticAttributes ( ) ; assertEquals ( STRING , java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.Map . java.lang.Object ( STRING ) ) ; MockHttpServletRequest org.springframework.web.servlet.view.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.view.MockServletContext ) ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new AcceptHeaderLocaleResolver ( ) ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; TestBean org.springframework.web.servlet.view.TestBean = new TestBean ( ) ; java.util.Map . java.lang.Object ( STRING , org.springframework.web.servlet.view.TestBean ) ; org.springframework.web.servlet.view.View . render ( java.util.Map , org.springframework.web.servlet.view.MockHttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.view.TestBean . equals ( org.springframework.web.servlet.view.MockHttpServletRequest . getAttribute ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.view.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; assertEquals ( STRING , org.springframework.web.servlet.view.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.web.servlet.view.MockHttpServletRequest . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.servlet.view.MockServletContext = new MockServletContext ( ) ; final StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . registerSingleton ( STRING , TestBean .class ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . registerSingleton ( STRING , TestBean .class ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( org.springframework.web.servlet.view.MockServletContext ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; InternalResourceViewResolver org.springframework.web.servlet.view.InternalResourceViewResolver = new InternalResourceViewResolver ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setAttributes ( java.util.Properties ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setAttributesMap ( java.util.Map ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setExposeContextBeansAsAttributes ( true ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; MockHttpServletRequest org.springframework.web.servlet.view.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.view.MockServletContext ) { @ java.lang.Override public org.springframework.web.servlet.view.RequestDispatcher org.springframework.web.servlet.view.RequestDispatcher ( java.lang.String java.lang.String ) { return new MockRequestDispatcher ( java.lang.String ) { @ java.lang.Override public void void ( ServletRequest org.springframework.web.servlet.view.ServletRequest , ServletResponse org.springframework.web.servlet.view.ServletResponse ) { assertTrue ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) == null ) ; assertEquals ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.view.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.view.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; } } ; } } ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new AcceptHeaderLocaleResolver ( ) ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; org.springframework.web.servlet.view.View . render ( new java.util.HashMap ( ) , org.springframework.web.servlet.view.MockHttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.view.RequestDispatcher org.springframework.web.servlet.view.RequestDispatcher ( java.lang.String java.lang.String ) { return new MockRequestDispatcher ( java.lang.String ) { @ java.lang.Override public void void ( ServletRequest org.springframework.web.servlet.view.ServletRequest , ServletResponse org.springframework.web.servlet.view.ServletResponse ) { assertTrue ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) == null ) ; assertEquals ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.view.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.view.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.web.servlet.view.ServletRequest , ServletResponse org.springframework.web.servlet.view.ServletResponse ) { assertTrue ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) == null ) ; assertEquals ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.view.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.view.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.servlet.view.MockServletContext = new MockServletContext ( ) ; final StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . registerSingleton ( STRING , TestBean .class ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . registerSingleton ( STRING , TestBean .class ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( org.springframework.web.servlet.view.MockServletContext ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; InternalResourceViewResolver org.springframework.web.servlet.view.InternalResourceViewResolver = new InternalResourceViewResolver ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setAttributes ( java.util.Properties ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setAttributesMap ( java.util.Map ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setExposedContextBeanNames ( new java.lang.String [] { STRING } ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; MockHttpServletRequest org.springframework.web.servlet.view.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.view.MockServletContext ) { @ java.lang.Override public org.springframework.web.servlet.view.RequestDispatcher org.springframework.web.servlet.view.RequestDispatcher ( java.lang.String java.lang.String ) { return new MockRequestDispatcher ( java.lang.String ) { @ java.lang.Override public void void ( ServletRequest org.springframework.web.servlet.view.ServletRequest , ServletResponse org.springframework.web.servlet.view.ServletResponse ) { assertTrue ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) == null ) ; assertEquals ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertNull ( org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.view.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; } } ; } } ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new AcceptHeaderLocaleResolver ( ) ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; org.springframework.web.servlet.view.View . render ( new java.util.HashMap ( ) , org.springframework.web.servlet.view.MockHttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.view.RequestDispatcher org.springframework.web.servlet.view.RequestDispatcher ( java.lang.String java.lang.String ) { return new MockRequestDispatcher ( java.lang.String ) { @ java.lang.Override public void void ( ServletRequest org.springframework.web.servlet.view.ServletRequest , ServletResponse org.springframework.web.servlet.view.ServletResponse ) { assertTrue ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) == null ) ; assertEquals ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertNull ( org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.view.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.web.servlet.view.ServletRequest , ServletResponse org.springframework.web.servlet.view.ServletResponse ) { assertTrue ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) == null ) ; assertEquals ( STRING , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertNull ( org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.view.StaticWebApplicationContext . getBean ( STRING ) , org.springframework.web.servlet.view.ServletRequest . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Locale java.util.Locale = ! java.util.Locale . java.util.Locale . boolean ( java.util.Locale . java.util.Locale ( ) ) ? java.util.Locale . java.util.Locale : java.util.Locale . java.util.Locale ; MockServletContext org.springframework.web.servlet.view.MockServletContext = new MockServletContext ( ) ; StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( org.springframework.web.servlet.view.MockServletContext ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . addMessage ( STRING , java.util.Locale , STRING ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; InternalResourceViewResolver org.springframework.web.servlet.view.InternalResourceViewResolver = new InternalResourceViewResolver ( ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setViewClass ( JstlView .class ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( JstlView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( JstlView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.view.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.view.MockServletContext ) ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new FixedLocaleResolver ( java.util.Locale ) ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; TestBean org.springframework.web.servlet.view.TestBean = new TestBean ( ) ; java.util.Map . java.lang.Object ( STRING , org.springframework.web.servlet.view.TestBean ) ; org.springframework.web.servlet.view.View . render ( java.util.Map , org.springframework.web.servlet.view.MockHttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.view.TestBean . equals ( org.springframework.web.servlet.view.MockHttpServletRequest . getAttribute ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.view.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; assertEquals ( java.util.Locale , Config . get ( org.springframework.web.servlet.view.MockHttpServletRequest , Config . FMT_LOCALE ) ) ; LocalizationContext org.springframework.web.servlet.view.LocalizationContext = ( LocalizationContext ) Config . get ( org.springframework.web.servlet.view.MockHttpServletRequest , Config . FMT_LOCALIZATION_CONTEXT ) ; assertEquals ( STRING , org.springframework.web.servlet.view.LocalizationContext . getResourceBundle ( ) . getString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Locale java.util.Locale = ! java.util.Locale . java.util.Locale . boolean ( java.util.Locale . java.util.Locale ( ) ) ? java.util.Locale . java.util.Locale : java.util.Locale . java.util.Locale ; MockServletContext org.springframework.web.servlet.view.MockServletContext = new MockServletContext ( ) ; org.springframework.web.servlet.view.MockServletContext . addInitParameter ( Config . FMT_LOCALIZATION_CONTEXT , STRING ) ; StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( org.springframework.web.servlet.view.MockServletContext ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . addMessage ( STRING , java.util.Locale , STRING ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; InternalResourceViewResolver org.springframework.web.servlet.view.InternalResourceViewResolver = new InternalResourceViewResolver ( ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setViewClass ( JstlView .class ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( JstlView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , JstlView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; assertEquals ( STRING , STRING , ( ( JstlView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.view.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.view.MockServletContext ) ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new FixedLocaleResolver ( java.util.Locale ) ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; TestBean org.springframework.web.servlet.view.TestBean = new TestBean ( ) ; java.util.Map . java.lang.Object ( STRING , org.springframework.web.servlet.view.TestBean ) ; org.springframework.web.servlet.view.View . render ( java.util.Map , org.springframework.web.servlet.view.MockHttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.view.TestBean . equals ( org.springframework.web.servlet.view.MockHttpServletRequest . getAttribute ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.view.MockHttpServletRequest . getAttribute ( STRING ) == null ) ; assertEquals ( java.util.Locale , Config . get ( org.springframework.web.servlet.view.MockHttpServletRequest , Config . FMT_LOCALE ) ) ; LocalizationContext org.springframework.web.servlet.view.LocalizationContext = ( LocalizationContext ) Config . get ( org.springframework.web.servlet.view.MockHttpServletRequest , Config . FMT_LOCALIZATION_CONTEXT ) ; assertEquals ( STRING , org.springframework.web.servlet.view.LocalizationContext . getResourceBundle ( ) . getString ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.view.LocalizationContext . getResourceBundle ( ) . getString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . registerSingleton ( STRING , TestBean .class ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; TestBean org.springframework.web.servlet.view.TestBean = ( TestBean ) org.springframework.web.servlet.view.StaticWebApplicationContext . getBean ( STRING ) ; XmlViewResolver org.springframework.web.servlet.view.XmlViewResolver = new XmlViewResolver ( ) ; org.springframework.web.servlet.view.XmlViewResolver . setLocation ( new ClassPathResource ( STRING ) ) ; org.springframework.web.servlet.view.XmlViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.XmlViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.view.ViewResolverTests.TestView .class . boolean ( org.springframework.web.servlet.view.View . getClass ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.XmlViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertTrue ( STRING , JstlView .class . boolean ( org.springframework.web.servlet.view.View . getClass ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( ( ( InternalResourceView ) org.springframework.web.servlet.view.View ) . getUrl ( ) ) ) ; ServletContext org.springframework.web.servlet.view.ServletContext = new MockServletContext ( ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; TestBean org.springframework.web.servlet.view.TestBean = new TestBean ( ) ; java.util.Map . java.lang.Object ( STRING , org.springframework.web.servlet.view.TestBean ) ; HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.view.ServletContext ) ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new AcceptHeaderLocaleResolver ( ) ) ; org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( DispatcherServlet . THEME_RESOLVER_ATTRIBUTE , new FixedThemeResolver ( ) ) ; org.springframework.web.servlet.view.View . render ( java.util.Map , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.view.TestBean . equals ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( STRING ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.view.TestBean . equals ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( STRING ) ) ) ; org.springframework.web.servlet.view.HttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.view.ServletContext ) ; org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new AcceptHeaderLocaleResolver ( ) ) ; org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( DispatcherServlet . THEME_RESOLVER_ATTRIBUTE , new FixedThemeResolver ( ) ) ; org.springframework.web.servlet.view.View . render ( java.util.Map , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; assertTrue ( STRING , org.springframework.web.servlet.view.TestBean . equals ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( STRING ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( STRING ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) { @ java.lang.Override protected org.springframework.web.servlet.view.Resource org.springframework.web.servlet.view.Resource ( java.lang.String java.lang.String ) { assertTrue ( STRING , XmlViewResolver . DEFAULT_LOCATION . equals ( java.lang.String ) ) ; return super. getResourceByPath ( java.lang.String ) ; } } ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; XmlViewResolver org.springframework.web.servlet.view.XmlViewResolver = new XmlViewResolver ( ) ; try { org.springframework.web.servlet.view.XmlViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.XmlViewResolver . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.web.servlet.view.BeanDefinitionStoreException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.Resource org.springframework.web.servlet.view.Resource ( java.lang.String java.lang.String ) { assertTrue ( STRING , XmlViewResolver . DEFAULT_LOCATION . equals ( java.lang.String ) ) ; return super. getResourceByPath ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) { @ java.lang.Override protected org.springframework.web.servlet.view.Resource org.springframework.web.servlet.view.Resource ( java.lang.String java.lang.String ) { assertTrue ( STRING , XmlViewResolver . DEFAULT_LOCATION . equals ( java.lang.String ) ) ; return super. getResourceByPath ( java.lang.String ) ; } } ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; XmlViewResolver org.springframework.web.servlet.view.XmlViewResolver = new XmlViewResolver ( ) ; org.springframework.web.servlet.view.XmlViewResolver . setCache ( false ) ; try { org.springframework.web.servlet.view.XmlViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; } catch ( ApplicationContextException org.springframework.web.servlet.view.ApplicationContextException ) { fail ( STRING + org.springframework.web.servlet.view.ApplicationContextException . getMessage ( ) ) ; } try { org.springframework.web.servlet.view.XmlViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.web.servlet.view.BeanDefinitionStoreException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.Resource org.springframework.web.servlet.view.Resource ( java.lang.String java.lang.String ) { assertTrue ( STRING , XmlViewResolver . DEFAULT_LOCATION . equals ( java.lang.String ) ) ; return super. getResourceByPath ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; InternalResourceViewResolver org.springframework.web.servlet.view.InternalResourceViewResolver = new InternalResourceViewResolver ( ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setViewClass ( JstlView .class ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; if ( org.springframework.web.servlet.view.View != org.springframework.web.servlet.view.View ) { fail ( STRING ) ; } org.springframework.web.servlet.view.InternalResourceViewResolver . removeFromCache ( STRING , java.util.Locale . java.util.Locale ( ) ) ; org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.InternalResourceViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; if ( org.springframework.web.servlet.view.View == org.springframework.web.servlet.view.View ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; AbstractCachingViewResolver org.springframework.web.servlet.view.AbstractCachingViewResolver = new AbstractCachingViewResolver ( ) { @ java.lang.Override protected org.springframework.web.servlet.view.View org.springframework.web.servlet.view.View ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.lang.Exception { java.util.concurrent.atomic.AtomicInteger . int ( ) ; return null ; } } ; org.springframework.web.servlet.view.AbstractCachingViewResolver . setCacheUnresolved ( false ) ; org.springframework.web.servlet.view.AbstractCachingViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; org.springframework.web.servlet.view.AbstractCachingViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.web.servlet.view.AbstractCachingViewResolver . setCacheUnresolved ( true ) ; org.springframework.web.servlet.view.AbstractCachingViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; org.springframework.web.servlet.view.AbstractCachingViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; org.springframework.web.servlet.view.AbstractCachingViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; org.springframework.web.servlet.view.AbstractCachingViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; org.springframework.web.servlet.view.AbstractCachingViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.View org.springframework.web.servlet.view.View ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.lang.Exception { java.util.concurrent.atomic.AtomicInteger . int ( ) ; return null ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.web.servlet.view.Resource ) { if ( ! ( org.springframework.web.servlet.view.Resource instanceof ServletContextResource ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.web.servlet.view.Resource . getClass ( ) . getName ( ) ) ; } }  <METHOD_END>
