<METHOD_START> @ Test public void void ( ) java.lang.Exception { LiteralExpression org.springframework.expression.spel.LiteralExpression = new LiteralExpression ( STRING ) ; void ( STRING , org.springframework.expression.spel.LiteralExpression . getValue ( ) ) ; void ( STRING , org.springframework.expression.spel.LiteralExpression . getValue ( java.lang.String .class ) ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; void ( STRING , org.springframework.expression.spel.LiteralExpression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; void ( STRING , org.springframework.expression.spel.LiteralExpression . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.String .class ) ) ; void ( STRING , org.springframework.expression.spel.LiteralExpression . getValue ( new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) ) ) ; void ( STRING , org.springframework.expression.spel.LiteralExpression . getValue ( new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) , java.lang.String .class ) ) ; void ( STRING , org.springframework.expression.spel.LiteralExpression . getValue ( org.springframework.expression.spel.EvaluationContext , new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) ) ) ; void ( STRING , org.springframework.expression.spel.LiteralExpression . getValue ( org.springframework.expression.spel.EvaluationContext , new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) , java.lang.String .class ) ) ; assertEquals ( STRING , org.springframework.expression.spel.LiteralExpression . getExpressionString ( ) ) ; assertFalse ( org.springframework.expression.spel.LiteralExpression . isWritable ( new StandardEvaluationContext ( ) ) ) ; assertFalse ( org.springframework.expression.spel.LiteralExpression . isWritable ( new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) ) ) ; assertFalse ( org.springframework.expression.spel.LiteralExpression . isWritable ( new StandardEvaluationContext ( ) , new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { LiteralExpression org.springframework.expression.spel.LiteralExpression = new LiteralExpression ( STRING ) ; org.springframework.expression.spel.LiteralExpression . setValue ( new StandardEvaluationContext ( ) , STRING ) ; fail ( STRING ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { assertEquals ( org.springframework.expression.spel.EvaluationException . getExpressionString ( ) , STRING ) ; } try { LiteralExpression org.springframework.expression.spel.LiteralExpression = new LiteralExpression ( STRING ) ; org.springframework.expression.spel.LiteralExpression . setValue ( new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) , STRING ) ; fail ( STRING ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { assertEquals ( org.springframework.expression.spel.EvaluationException . getExpressionString ( ) , STRING ) ; } try { LiteralExpression org.springframework.expression.spel.LiteralExpression = new LiteralExpression ( STRING ) ; org.springframework.expression.spel.LiteralExpression . setValue ( new StandardEvaluationContext ( ) , new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) , STRING ) ; fail ( STRING ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { assertEquals ( org.springframework.expression.spel.EvaluationException . getExpressionString ( ) , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LiteralExpression org.springframework.expression.spel.LiteralExpression = new LiteralExpression ( STRING ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.LiteralExpression . getValueType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.LiteralExpression . getValueType ( new StandardEvaluationContext ( ) ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.LiteralExpression . getValueType ( new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.LiteralExpression . getValueType ( new StandardEvaluationContext ( ) , new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.LiteralExpression . getValueTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.LiteralExpression . getValueTypeDescriptor ( new StandardEvaluationContext ( ) ) . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.LiteralExpression . getValueTypeDescriptor ( new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) ) . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.LiteralExpression . getValueTypeDescriptor ( new StandardEvaluationContext ( ) , new org.springframework.expression.spel.LiteralExpressionTests.Rooty ( ) ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof java.lang.String ) ) { fail ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING + java.lang.Object + STRING ) ; } if ( ! ( ( java.lang.String ) java.lang.Object ) . boolean ( java.lang.String ) ) { fail ( STRING + java.lang.String + STRING + java.lang.Object + STRING ) ; } }  <METHOD_END>
