<METHOD_START> public void ( ) { super( MediaType . ALL ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.http.converter.MediaType org.springframework.http.converter.MediaType ( java.lang.Object java.lang.Object ) { Resource org.springframework.http.converter.Resource = null ; if ( java.lang.Object instanceof ResourceRegion ) { org.springframework.http.converter.Resource = ( ( ResourceRegion ) java.lang.Object ) . getResource ( ) ; } else { java.util.Collection<org.springframework.http.converter.ResourceRegion> < ResourceRegion > java.util.Collection<org.springframework.http.converter.ResourceRegion> = ( java.util.Collection<org.springframework.http.converter.ResourceRegion> < ResourceRegion > ) java.lang.Object ; if ( java.util.Collection<org.springframework.http.converter.ResourceRegion> . size ( ) > NUMBER ) { org.springframework.http.converter.Resource = java.util.Collection<org.springframework.http.converter.ResourceRegion> . iterator ( ) . next ( ) . getResource ( ) ; } } return MediaTypeFactory . getMediaType ( org.springframework.http.converter.Resource ) . orElse ( MediaType . APPLICATION_OCTET_STREAM ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> , HttpInputMessage org.springframework.http.converter.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotReadableException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.converter.ResourceRegion org.springframework.http.converter.ResourceRegion ( java.lang.Class<?> < ? > java.lang.Class<?> , HttpInputMessage org.springframework.http.converter.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotReadableException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return boolean ( java.lang.Class<> , null , org.springframework.http.converter.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { if ( ! ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) ) { return ResourceRegion .class . boolean ( ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ) ; } java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ; if ( ! ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type ( ) instanceof java.lang.Class ) ) { return false ; } java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.reflect.ParameterizedType . java.lang.reflect.Type ( ) ; if ( ! ( java.util.Collection .class . boolean ( java.lang.Class<> ) ) ) { return false ; } if ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) . int != NUMBER ) { return false ; } java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ; if ( ! ( java.lang.reflect.Type instanceof java.lang.Class ) ) { return false ; } java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ; return java.lang.Class<> . boolean ( ResourceRegion .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.Object java.lang.Object , java.lang.reflect.Type java.lang.reflect.Type , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException { if ( java.lang.Object instanceof ResourceRegion ) { void ( ( ResourceRegion ) java.lang.Object , org.springframework.http.converter.HttpOutputMessage ) ; } else { java.util.Collection<org.springframework.http.converter.ResourceRegion> < ResourceRegion > java.util.Collection<org.springframework.http.converter.ResourceRegion> = ( java.util.Collection<org.springframework.http.converter.ResourceRegion> < ResourceRegion > ) java.lang.Object ; if ( java.util.Collection<org.springframework.http.converter.ResourceRegion> . size ( ) == NUMBER ) { void ( java.util.Collection<org.springframework.http.converter.ResourceRegion> . iterator ( ) . next ( ) , org.springframework.http.converter.HttpOutputMessage ) ; } else { void ( ( java.util.Collection<org.springframework.http.converter.ResourceRegion> < ResourceRegion > ) java.lang.Object , org.springframework.http.converter.HttpOutputMessage ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ResourceRegion org.springframework.http.converter.ResourceRegion , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage ) throws java.io.IOException { Assert . notNull ( org.springframework.http.converter.ResourceRegion , STRING ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) ; long long = org.springframework.http.converter.ResourceRegion . getPosition ( ) ; long long = long + org.springframework.http.converter.ResourceRegion . getCount ( ) - NUMBER ; java.lang.Long java.lang.Long = org.springframework.http.converter.ResourceRegion . getResource ( ) . contentLength ( ) ; long = java.lang.Math . long ( long , java.lang.Long - NUMBER ) ; long long = long - long + NUMBER ; org.springframework.http.converter.HttpHeaders . add ( STRING , STRING + long + '-' + long + '/' + java.lang.Long ) ; org.springframework.http.converter.HttpHeaders . setContentLength ( long ) ; java.io.InputStream java.io.InputStream = org.springframework.http.converter.ResourceRegion . getResource ( ) . getInputStream ( ) ; try { StreamUtils . copyRange ( java.io.InputStream , org.springframework.http.converter.HttpOutputMessage . getBody ( ) , long , long ) ; } finally { try { java.io.InputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.http.converter.ResourceRegion> < ResourceRegion > java.util.Collection<org.springframework.http.converter.ResourceRegion> , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage ) throws java.io.IOException { Assert . notNull ( java.util.Collection<org.springframework.http.converter.ResourceRegion> , STRING ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) ; MediaType org.springframework.http.converter.MediaType = org.springframework.http.converter.HttpHeaders . getContentType ( ) ; java.lang.String java.lang.String = MimeTypeUtils . generateMultipartBoundaryString ( ) ; org.springframework.http.converter.HttpHeaders . set ( HttpHeaders . CONTENT_TYPE , STRING + java.lang.String ) ; java.io.OutputStream java.io.OutputStream = org.springframework.http.converter.HttpOutputMessage . getBody ( ) ; for ( ResourceRegion org.springframework.http.converter.ResourceRegion : java.util.Collection<org.springframework.http.converter.ResourceRegion> ) { long long = org.springframework.http.converter.ResourceRegion . getPosition ( ) ; long long = long + org.springframework.http.converter.ResourceRegion . getCount ( ) - NUMBER ; java.io.InputStream java.io.InputStream = org.springframework.http.converter.ResourceRegion . getResource ( ) . getInputStream ( ) ; void ( java.io.OutputStream ) ; void ( java.io.OutputStream , STRING + java.lang.String ) ; void ( java.io.OutputStream ) ; if ( org.springframework.http.converter.MediaType != null ) { void ( java.io.OutputStream , STRING + org.springframework.http.converter.MediaType . toString ( ) ) ; void ( java.io.OutputStream ) ; } java.lang.Long java.lang.Long = org.springframework.http.converter.ResourceRegion . getResource ( ) . contentLength ( ) ; long = java.lang.Math . long ( long , java.lang.Long - NUMBER ) ; void ( java.io.OutputStream , STRING + long + '-' + long + '/' + java.lang.Long ) ; void ( java.io.OutputStream ) ; void ( java.io.OutputStream ) ; StreamUtils . copyRange ( java.io.InputStream , java.io.OutputStream , long , long ) ; } void ( java.io.OutputStream ) ; void ( java.io.OutputStream , STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { java.io.OutputStream . void ( '\r' ) ; java.io.OutputStream . void ( '\n' ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.io.OutputStream java.io.OutputStream , java.lang.String java.lang.String ) throws java.io.IOException { java.io.OutputStream . void ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
