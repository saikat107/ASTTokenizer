<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; this . boolean = ( java.lang.ClassLoader != null ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { if ( ! this . boolean ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Class<?> < ? > java.lang.Class<?> , ProxyFactory org.springframework.aop.framework.ProxyFactory ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ClassUtils . getAllInterfacesForClass ( java.lang.Class<> , java.lang.ClassLoader ( ) ) ; boolean boolean = false ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( ! boolean ( java.lang.Class<> ) && ! boolean ( java.lang.Class<> ) && java.lang.Class<> . java.lang.reflect.Method[] ( ) . int > NUMBER ) { boolean = true ; break; } } if ( boolean ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { org.springframework.aop.framework.ProxyFactory . addInterface ( java.lang.Class<> ) ; } } else { org.springframework.aop.framework.ProxyFactory . setProxyTargetClass ( true ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( InitializingBean .class == java.lang.Class<> || DisposableBean .class == java.lang.Class<> || ObjectUtils . containsElement ( java.lang.Class<> . java.lang.Class<?>[] ( ) , Aware .class ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( java.lang.Class<> . java.lang.String ( ) . boolean ( STRING ) || java.lang.Class<> . java.lang.String ( ) . boolean ( STRING ) || java.lang.Class<> . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
