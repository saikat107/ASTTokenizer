<METHOD_START> @ javax.annotation.PostConstruct void void ( ) { if ( ! boolean ) { boolean = true ; void ( ) ; } }  <METHOD_END>
<METHOD_START> void void ( ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( STRING , java.lang.Class<? extends org.springframework.boot.devtools.autoconfigure.HateoasObjenesisCacheDisabler> ( ) . java.lang.ClassLoader ( ) ) ; void ( java.lang.Class<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { try { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Class<> , STRING ) ; if ( java.lang.reflect.Field != null ) { ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; java.lang.Object java.lang.Object = ReflectionUtils . getField ( java.lang.reflect.Field , null ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; ReflectionUtils . setField ( java.lang.reflect.Field , java.lang.Object , null ) ; } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.devtools.autoconfigure.Log . warn ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
