<METHOD_START> public void void ( ) java.lang.Exception { when ( java.io.File . boolean ( ) ) . thenReturn ( true ) ; when ( java.io.File . boolean ( ) ) . thenReturn ( true ) ; when ( java.io.File . boolean ( ) ) . thenReturn ( true ) ; when ( java.io.File . java.lang.String ( ) ) . thenReturn ( STRING ) ; when ( java.io.File . java.lang.String ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.file.FileLocker . lock ( isA ( java.io.File .class ) ) ) . thenReturn ( true ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { void ( ) ; this . org.springframework.integration.file.FileReadingMessageSource = new FileReadingMessageSource ( java.util.Comparator<java.io.File> ) ; this . org.springframework.integration.file.FileReadingMessageSource . setDirectory ( java.io.File ) ; this . org.springframework.integration.file.FileReadingMessageSource . setLocker ( org.springframework.integration.file.FileLocker ) ; this . org.springframework.integration.file.FileReadingMessageSource . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( java.io.File . java.io.File[] ( ) ) . thenReturn ( new java.io.File [] { java.io.File } ) ; assertThat ( org.springframework.integration.file.FileReadingMessageSource . receive ( ) . getPayload ( ) , is ( java.io.File ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( java.io.File . java.io.File[] ( ) ) . thenReturn ( new java.io.File [] { java.io.File } ) ; Message < java.io.File > org.springframework.integration.file.Message<java.io.File> = org.springframework.integration.file.FileReadingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.file.Message<java.io.File> ) ; org.springframework.integration.file.FileReadingMessageSource . onFailure ( org.springframework.integration.file.Message<java.io.File> ) ; assertEquals ( org.springframework.integration.file.Message<java.io.File> . getPayload ( ) , org.springframework.integration.file.FileReadingMessageSource . receive ( ) . getPayload ( ) ) ; verify ( java.io.File , times ( NUMBER ) ) . listFiles ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = mock ( java.io.File .class ) ; when ( java.io.File . java.lang.String ( ) ) . thenReturn ( STRING ) ; when ( java.io.File . java.io.File[] ( ) ) . thenReturn ( new java.io.File [] { java.io.File , java.io.File } ) ; org.springframework.integration.file.FileReadingMessageSource . setScanEachPoll ( true ) ; assertNotNull ( org.springframework.integration.file.FileReadingMessageSource . receive ( ) ) ; assertNotNull ( org.springframework.integration.file.FileReadingMessageSource . receive ( ) ) ; assertNull ( org.springframework.integration.file.FileReadingMessageSource . receive ( ) ) ; verify ( java.io.File , times ( NUMBER ) ) . listFiles ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( java.io.File . java.io.File[] ( ) ) . thenReturn ( new java.io.File [] { java.io.File } ) ; Message < java.io.File > org.springframework.integration.file.Message<java.io.File> = org.springframework.integration.file.FileReadingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.file.Message<java.io.File> ) ; assertEquals ( java.io.File , org.springframework.integration.file.Message<java.io.File> . getPayload ( ) ) ; assertNull ( org.springframework.integration.file.FileReadingMessageSource . receive ( ) ) ; verify ( java.io.File , times ( NUMBER ) ) . listFiles ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.file.FileReadingMessageSource . setFilter ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { when ( java.io.File . java.io.File[] ( ) ) . thenReturn ( new java.io.File [] { java.io.File } ) ; Message < java.io.File > org.springframework.integration.file.Message<java.io.File> = org.springframework.integration.file.FileReadingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.file.Message<java.io.File> ) ; assertEquals ( java.io.File , org.springframework.integration.file.Message<java.io.File> . getPayload ( ) ) ; verify ( org.springframework.integration.file.FileLocker ) . lock ( java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { when ( java.io.File . java.io.File[] ( ) ) . thenReturn ( new java.io.File [] { java.io.File } ) ; when ( org.springframework.integration.file.FileLocker . lock ( java.io.File ) ) . thenReturn ( false ) ; Message < java.io.File > org.springframework.integration.file.Message<java.io.File> = org.springframework.integration.file.FileReadingMessageSource . receive ( ) ; assertNull ( org.springframework.integration.file.Message<java.io.File> ) ; verify ( org.springframework.integration.file.FileLocker ) . lock ( java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = mock ( java.io.File .class ) ; when ( java.io.File . java.lang.String ( ) ) . thenReturn ( STRING ) ; java.io.File java.io.File = mock ( java.io.File .class ) ; when ( java.io.File . java.lang.String ( ) ) . thenReturn ( STRING ) ; java.io.File java.io.File = mock ( java.io.File .class ) ; when ( java.io.File . java.lang.String ( ) ) . thenReturn ( STRING ) ; when ( java.util.Comparator<java.io.File> . int ( java.io.File , java.io.File ) ) . thenReturn ( NUMBER ) ; when ( java.util.Comparator<java.io.File> . int ( java.io.File , java.io.File ) ) . thenReturn ( NUMBER ) ; when ( java.util.Comparator<java.io.File> . int ( java.io.File , java.io.File ) ) . thenReturn ( - NUMBER ) ; when ( java.io.File . java.io.File[] ( ) ) . thenReturn ( new java.io.File [] { java.io.File , java.io.File , java.io.File } ) ; assertSame ( java.io.File , org.springframework.integration.file.FileReadingMessageSource . receive ( ) . getPayload ( ) ) ; assertSame ( java.io.File , org.springframework.integration.file.FileReadingMessageSource . receive ( ) . getPayload ( ) ) ; assertSame ( java.io.File , org.springframework.integration.file.FileReadingMessageSource . receive ( ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.file.FileReadingMessageSource . receive ( ) ) ; verify ( java.io.File , times ( NUMBER ) ) . listFiles ( ) ; }  <METHOD_END>
