<METHOD_START> public static org.springframework.util.MimeType org.springframework.util.MimeType ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasLength ( java.lang.String ) ) { throw new InvalidMimeTypeException ( java.lang.String , STRING ) ; } int int = java.lang.String . int ( ';' ) ; java.lang.String java.lang.String = ( int >= NUMBER ? java.lang.String . java.lang.String ( NUMBER , int ) : java.lang.String ) . java.lang.String ( ) ; if ( java.lang.String . boolean ( ) ) { throw new InvalidMimeTypeException ( java.lang.String , STRING ) ; } if ( MimeType . WILDCARD_TYPE . equals ( java.lang.String ) ) { java.lang.String = STRING ; } int int = java.lang.String . int ( '/' ) ; if ( int == - NUMBER ) { throw new InvalidMimeTypeException ( java.lang.String , STRING ) ; } if ( int == java.lang.String . int ( ) - NUMBER ) { throw new InvalidMimeTypeException ( java.lang.String , STRING ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) ) ; if ( MimeType . WILDCARD_TYPE . equals ( java.lang.String ) && ! MimeType . WILDCARD_TYPE . equals ( java.lang.String ) ) { throw new InvalidMimeTypeException ( java.lang.String , STRING ) ; } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = null ; do { int int = int + NUMBER ; boolean boolean = false ; while ( int < java.lang.String . int ( ) ) { char char = java.lang.String . char ( int ) ; if ( char == ';' ) { if ( ! boolean ) { break; } } else if ( char == '"' ) { boolean = ! boolean ; } int ++ ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER , int ) . java.lang.String ( ) ; if ( java.lang.String . int ( ) > NUMBER ) { if ( java.util.Map<java.lang.String,java.lang.String> == null ) { java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; } int int = java.lang.String . int ( '=' ) ; if ( int >= NUMBER ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } } int = int ; } while ( int < java.lang.String . int ( ) ); try { return new MimeType ( java.lang.String , java.lang.String , java.util.Map<java.lang.String,java.lang.String> ) ; } catch ( java.nio.charset.UnsupportedCharsetException java.nio.charset.UnsupportedCharsetException ) { throw new InvalidMimeTypeException ( java.lang.String , STRING + java.nio.charset.UnsupportedCharsetException . java.lang.String ( ) + STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new InvalidMimeTypeException ( java.lang.String , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.util.MimeType> < MimeType > java.util.List<org.springframework.util.MimeType> ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasLength ( java.lang.String ) ) { return java.util.Collections . java.util.List<org.springframework.util.MimeType> ( ) ; } java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; java.util.List<org.springframework.util.MimeType> < MimeType > java.util.List<org.springframework.util.MimeType> = new java.util.ArrayList<org.springframework.util.MimeType> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.util.MimeType> . add ( org.springframework.util.MimeType ( java.lang.String ) ) ; } return java.util.List<org.springframework.util.MimeType> ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.util.Collection<? extends org.springframework.util.MimeType> < ? extends MimeType > java.util.Collection<? extends org.springframework.util.MimeType> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.util.Iterator<? extends org.springframework.util.MimeType> < ? extends MimeType > java.util.Iterator<? extends org.springframework.util.MimeType> = java.util.Collection<> . java.util.Iterator<> ( ) ; java.util.Iterator<> . boolean ( ) ;) { MimeType org.springframework.util.MimeType = java.util.Iterator<> . next ( ) ; org.springframework.util.MimeType . appendTo ( java.lang.StringBuilder ) ; if ( java.util.Iterator<> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.util.List<org.springframework.util.MimeType> < MimeType > java.util.List<org.springframework.util.MimeType> ) { Assert . notNull ( java.util.List<org.springframework.util.MimeType> , STRING ) ; if ( java.util.List<org.springframework.util.MimeType> . size ( ) > NUMBER ) { java.util.Collections . void ( java.util.List<org.springframework.util.MimeType> , java.util.Comparator<org.springframework.util.MimeType> ) ; } }  <METHOD_END>
<METHOD_START> public static byte [] byte[] ( ) { byte [] byte[] = new byte [ java.util.Random . int ( NUMBER ) + NUMBER ] ; for ( int int = NUMBER ; int < byte[] . int ; int ++ ) { byte[] [ int ] = byte[] [ java.util.Random . int ( byte[] . int ) ] ; } return byte[] ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return new java.lang.String ( byte[] ( ) , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
