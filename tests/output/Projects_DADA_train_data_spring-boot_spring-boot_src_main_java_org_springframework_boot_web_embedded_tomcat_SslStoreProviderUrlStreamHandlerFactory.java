<METHOD_START> void ( SslStoreProvider org.springframework.boot.web.embedded.tomcat.SslStoreProvider ) { this . org.springframework.boot.web.embedded.tomcat.SslStoreProvider = org.springframework.boot.web.embedded.tomcat.SslStoreProvider ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URLStreamHandler java.net.URLStreamHandler ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return new java.net.URLStreamHandler ( ) { @ java.lang.Override protected java.net.URLConnection java.net.URLConnection ( java.net.URL java.net.URL ) throws java.io.IOException { try { if ( java.lang.String . boolean ( java.net.URL . java.lang.String ( ) ) ) { return new org.springframework.boot.web.embedded.tomcat.SslStoreProviderUrlStreamHandlerFactory.KeyStoreUrlConnection ( java.net.URL , org.springframework.boot.web.embedded.tomcat.SslStoreProviderUrlStreamHandlerFactory .this . org.springframework.boot.web.embedded.tomcat.SslStoreProvider . getKeyStore ( ) ) ; } if ( java.lang.String . boolean ( java.net.URL . java.lang.String ( ) ) ) { return new org.springframework.boot.web.embedded.tomcat.SslStoreProviderUrlStreamHandlerFactory.KeyStoreUrlConnection ( java.net.URL , org.springframework.boot.web.embedded.tomcat.SslStoreProviderUrlStreamHandlerFactory .this . org.springframework.boot.web.embedded.tomcat.SslStoreProvider . getTrustStore ( ) ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.io.IOException ( java.lang.Exception ) ; } throw new java.io.IOException ( STRING + java.net.URL . java.lang.String ( ) ) ; } } ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.net.URLConnection java.net.URLConnection ( java.net.URL java.net.URL ) throws java.io.IOException { try { if ( java.lang.String . boolean ( java.net.URL . java.lang.String ( ) ) ) { return new org.springframework.boot.web.embedded.tomcat.SslStoreProviderUrlStreamHandlerFactory.KeyStoreUrlConnection ( java.net.URL , org.springframework.boot.web.embedded.tomcat.SslStoreProviderUrlStreamHandlerFactory .this . org.springframework.boot.web.embedded.tomcat.SslStoreProvider . getKeyStore ( ) ) ; } if ( java.lang.String . boolean ( java.net.URL . java.lang.String ( ) ) ) { return new org.springframework.boot.web.embedded.tomcat.SslStoreProviderUrlStreamHandlerFactory.KeyStoreUrlConnection ( java.net.URL , org.springframework.boot.web.embedded.tomcat.SslStoreProviderUrlStreamHandlerFactory .this . org.springframework.boot.web.embedded.tomcat.SslStoreProvider . getTrustStore ( ) ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.io.IOException ( java.lang.Exception ) ; } throw new java.io.IOException ( STRING + java.net.URL . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private void ( java.net.URL java.net.URL , java.security.KeyStore java.security.KeyStore ) { super( java.net.URL ); this . java.security.KeyStore = java.security.KeyStore ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { try { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; this . java.security.KeyStore . void ( java.io.ByteArrayOutputStream , new char [ NUMBER ] ) ; return new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.io.IOException ( java.lang.Exception ) ; } }  <METHOD_END>
