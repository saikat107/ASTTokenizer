<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext != null ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Before @ After public void void ( ) { ReflectionTestUtils . setField ( TomcatURLStreamHandlerFactory .class , STRING , null ) ; ReflectionTestUtils . setField ( java.net.URL .class , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebServerWithNothing .class , org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.BaseConfiguration .class ) ; DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( DispatcherServlet .class ) ; void ( ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet . getMultipartResolver ( ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( StandardServletMultipartResolver .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( MultipartResolver .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebServerWithNoMultipartJetty .class , org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.BaseConfiguration .class ) ; DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( DispatcherServlet .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet . getMultipartResolver ( ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( StandardServletMultipartResolver .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( MultipartResolver .class ) ) . hasSize ( NUMBER ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebServerWithNoMultipartUndertow .class , org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.BaseConfiguration .class ) ; DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( DispatcherServlet .class ) ; void ( ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet . getMultipartResolver ( ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( StandardServletMultipartResolver .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( MultipartResolver .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebServerWithNoMultipartTomcat .class , org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.BaseConfiguration .class ) ; DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( DispatcherServlet .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet . getMultipartResolver ( ) ) . isNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( StandardServletMultipartResolver .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( MultipartResolver .class ) ) . hasSize ( NUMBER ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebServerWithEverythingJetty .class , org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( MultipartConfigElement .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( StandardServletMultipartResolver .class ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( DispatcherServlet .class ) . getMultipartResolver ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebServerWithEverythingTomcat .class , org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.BaseConfiguration .class ) ; new RestTemplate ( ) . getForObject ( STRING + this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getWebServer ( ) . getPort ( ) + STRING , java.lang.String .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( MultipartConfigElement .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( StandardServletMultipartResolver .class ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( DispatcherServlet .class ) . getMultipartResolver ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebServerWithEverythingUndertow .class , org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( MultipartConfigElement .class ) ; void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( StandardServletMultipartResolver .class ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( DispatcherServlet .class ) . getMultipartResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.String java.lang.String , int int ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.String ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebServerWithNoMultipartTomcat .class , org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( MultipartProperties .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( MultipartConfigElement .class ) ) . hasSize ( int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebServerWithCustomMultipartResolver .class , org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.BaseConfiguration .class ) ; MultipartResolver org.springframework.boot.autoconfigure.web.servlet.MultipartResolver = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( MultipartResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.MultipartResolver ) . isNotInstanceOf ( StandardServletMultipartResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebServerWithNothing .class , org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; StandardServletMultipartResolver org.springframework.boot.autoconfigure.web.servlet.StandardServletMultipartResolver = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( StandardServletMultipartResolver .class ) ; boolean boolean = ( java.lang.Boolean ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.web.servlet.StandardServletMultipartResolver , STRING ) ; assertThat ( boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { HttpComponentsClientHttpRequestFactory org.springframework.boot.autoconfigure.web.servlet.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( ) ; ClientHttpRequest org.springframework.boot.autoconfigure.web.servlet.ClientHttpRequest = org.springframework.boot.autoconfigure.web.servlet.HttpComponentsClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING + this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getWebServer ( ) . getPort ( ) + STRING ) , HttpMethod . GET ) ; ClientHttpResponse org.springframework.boot.autoconfigure.web.servlet.ClientHttpResponse = org.springframework.boot.autoconfigure.web.servlet.ClientHttpRequest . execute ( ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ClientHttpResponse . getStatusCode ( ) ) . isEqualTo ( HttpStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { RestTemplate org.springframework.boot.autoconfigure.web.servlet.RestTemplate = new RestTemplate ( ) ; java.lang.String java.lang.String = STRING + this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getWebServer ( ) . getPort ( ) + STRING ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RestTemplate . getForObject ( java.lang.String , java.lang.String .class ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ( ) { return new JettyServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) { return new org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ( ) { return new UndertowServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) { return new org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.ServerProperties org.springframework.boot.autoconfigure.web.servlet.ServerProperties ( ) { ServerProperties org.springframework.boot.autoconfigure.web.servlet.ServerProperties = new ServerProperties ( ) ; org.springframework.boot.autoconfigure.web.servlet.ServerProperties . setPort ( NUMBER ) ; return org.springframework.boot.autoconfigure.web.servlet.ServerProperties ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) { return new org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement ( ) { return new MultipartConfigElement ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ( ) { return new JettyServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) { return new org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement ( ) { return new MultipartConfigElement ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) { return new org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement ( ) { return new MultipartConfigElement ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ( ) { return new UndertowServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) { return new org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfigurationTests.WebController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.web.servlet.MultipartResolver org.springframework.boot.autoconfigure.web.servlet.MultipartResolver ( ) { return mock ( MultipartResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseBody public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
