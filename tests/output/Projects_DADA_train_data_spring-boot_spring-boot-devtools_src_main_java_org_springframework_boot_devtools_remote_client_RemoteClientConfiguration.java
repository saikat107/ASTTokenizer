<METHOD_START> public void ( DevToolsProperties org.springframework.boot.devtools.remote.client.DevToolsProperties ) { this . org.springframework.boot.devtools.remote.client.DevToolsProperties = org.springframework.boot.devtools.remote.client.DevToolsProperties ; }  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.boot.devtools.remote.client.PropertySourcesPlaceholderConfigurer org.springframework.boot.devtools.remote.client.PropertySourcesPlaceholderConfigurer ( ) { return new PropertySourcesPlaceholderConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory ( ) { java.util.List<org.springframework.boot.devtools.remote.client.ClientHttpRequestInterceptor> < ClientHttpRequestInterceptor > java.util.List<org.springframework.boot.devtools.remote.client.ClientHttpRequestInterceptor> = java.util.Arrays . java.util.List ( org.springframework.boot.devtools.remote.client.ClientHttpRequestInterceptor ( ) ) ; SimpleClientHttpRequestFactory org.springframework.boot.devtools.remote.client.SimpleClientHttpRequestFactory = new SimpleClientHttpRequestFactory ( ) ; Proxy org.springframework.boot.devtools.remote.client.Proxy = this . org.springframework.boot.devtools.remote.client.DevToolsProperties . getRemote ( ) . getProxy ( ) ; if ( org.springframework.boot.devtools.remote.client.Proxy . getHost ( ) != null && org.springframework.boot.devtools.remote.client.Proxy . getPort ( ) != null ) { org.springframework.boot.devtools.remote.client.SimpleClientHttpRequestFactory . setProxy ( new java . net . java.net.Proxy ( java.net.Proxy.Type . java.net.Proxy.Type , new java.net.InetSocketAddress ( org.springframework.boot.devtools.remote.client.Proxy . getHost ( ) , org.springframework.boot.devtools.remote.client.Proxy . getPort ( ) ) ) ) ; } return new InterceptingClientHttpRequestFactory ( org.springframework.boot.devtools.remote.client.SimpleClientHttpRequestFactory , java.util.List<org.springframework.boot.devtools.remote.client.ClientHttpRequestInterceptor> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.remote.client.ClientHttpRequestInterceptor org.springframework.boot.devtools.remote.client.ClientHttpRequestInterceptor ( ) { RemoteDevToolsProperties org.springframework.boot.devtools.remote.client.RemoteDevToolsProperties = this . org.springframework.boot.devtools.remote.client.DevToolsProperties . getRemote ( ) ; java.lang.String java.lang.String = org.springframework.boot.devtools.remote.client.RemoteDevToolsProperties . getSecretHeaderName ( ) ; java.lang.String java.lang.String = org.springframework.boot.devtools.remote.client.RemoteDevToolsProperties . getSecret ( ) ; Assert . state ( java.lang.String != null , STRING + STRING ) ; return new HttpHeaderInterceptor ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct private void void ( ) { RemoteDevToolsProperties org.springframework.boot.devtools.remote.client.RemoteDevToolsProperties = this . org.springframework.boot.devtools.remote.client.DevToolsProperties . getRemote ( ) ; if ( ! org.springframework.boot.devtools.remote.client.RemoteDevToolsProperties . getDebug ( ) . isEnabled ( ) && ! org.springframework.boot.devtools.remote.client.RemoteDevToolsProperties . getRestart ( ) . isEnabled ( ) ) { org.springframework.boot.devtools.remote.client.Log . warn ( STRING ) ; } if ( ! this . java.lang.String . boolean ( STRING ) ) { org.springframework.boot.devtools.remote.client.Log . warn ( STRING + this . java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Bean @ RestartScope @ ConditionalOnMissingBean public org.springframework.boot.devtools.remote.client.LiveReloadServer org.springframework.boot.devtools.remote.client.LiveReloadServer ( ) { return new LiveReloadServer ( this . org.springframework.boot.devtools.remote.client.DevToolsProperties . getLivereload ( ) . getPort ( ) , Restarter . getInstance ( ) . getThreadFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ EventListener public void void ( ClassPathChangedEvent org.springframework.boot.devtools.remote.client.ClassPathChangedEvent ) { java.lang.String java.lang.String = this . java.lang.String + this . org.springframework.boot.devtools.remote.client.DevToolsProperties . getRemote ( ) . getContextPath ( ) ; this . java.util.concurrent.ExecutorService . void ( new DelayedLiveReloadTrigger ( org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer ( ) , this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer org.springframework.boot.devtools.remote.client.OptionalLiveReloadServer ( ) { return new OptionalLiveReloadServer ( this . org.springframework.boot.devtools.remote.client.LiveReloadServer ) ; }  <METHOD_END>
<METHOD_START> final java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService ( ) { return this . java.util.concurrent.ExecutorService ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.remote.client.ClassPathFileSystemWatcher org.springframework.boot.devtools.remote.client.ClassPathFileSystemWatcher ( ) { DefaultRestartInitializer org.springframework.boot.devtools.remote.client.DefaultRestartInitializer = new DefaultRestartInitializer ( ) ; java.net.URL [] java.net.URL[] = org.springframework.boot.devtools.remote.client.DefaultRestartInitializer . getInitialUrls ( java.lang.Thread . java.lang.Thread ( ) ) ; if ( java.net.URL[] == null ) { java.net.URL[] = new java.net.URL [ NUMBER ] ; } return new ClassPathFileSystemWatcher ( org.springframework.boot.devtools.remote.client.FileSystemWatcherFactory ( ) , org.springframework.boot.devtools.remote.client.ClassPathRestartStrategy ( ) , java.net.URL[] ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.remote.client.FileSystemWatcherFactory org.springframework.boot.devtools.remote.client.FileSystemWatcherFactory ( ) { return new FileSystemWatcherFactory ( ) { @ java.lang.Override public org.springframework.boot.devtools.remote.client.FileSystemWatcher org.springframework.boot.devtools.remote.client.FileSystemWatcher ( ) { return org.springframework.boot.devtools.remote.client.FileSystemWatcher ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.devtools.remote.client.FileSystemWatcher org.springframework.boot.devtools.remote.client.FileSystemWatcher ( ) { return org.springframework.boot.devtools.remote.client.FileSystemWatcher ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.remote.client.FileSystemWatcher org.springframework.boot.devtools.remote.client.FileSystemWatcher ( ) { Restart org.springframework.boot.devtools.remote.client.Restart = this . org.springframework.boot.devtools.remote.client.DevToolsProperties . getRestart ( ) ; FileSystemWatcher org.springframework.boot.devtools.remote.client.FileSystemWatcher = new FileSystemWatcher ( true , org.springframework.boot.devtools.remote.client.Restart . getPollInterval ( ) , org.springframework.boot.devtools.remote.client.Restart . getQuietPeriod ( ) ) ; java.lang.String java.lang.String = org.springframework.boot.devtools.remote.client.Restart . getTriggerFile ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { org.springframework.boot.devtools.remote.client.FileSystemWatcher . setTriggerFilter ( new TriggerFileFilter ( java.lang.String ) ) ; } return org.springframework.boot.devtools.remote.client.FileSystemWatcher ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.remote.client.ClassPathRestartStrategy org.springframework.boot.devtools.remote.client.ClassPathRestartStrategy ( ) { return new PatternClassPathRestartStrategy ( this . org.springframework.boot.devtools.remote.client.DevToolsProperties . getRestart ( ) . getAllExclude ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.remote.client.ClassPathChangeUploader org.springframework.boot.devtools.remote.client.ClassPathChangeUploader ( ClientHttpRequestFactory org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory ) { java.lang.String java.lang.String = this . java.lang.String + this . org.springframework.boot.devtools.remote.client.DevToolsProperties . getRemote ( ) . getContextPath ( ) + STRING ; return new ClassPathChangeUploader ( java.lang.String , org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.remote.client.TunnelClient org.springframework.boot.devtools.remote.client.TunnelClient ( ClientHttpRequestFactory org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory ) { RemoteDevToolsProperties org.springframework.boot.devtools.remote.client.RemoteDevToolsProperties = this . org.springframework.boot.devtools.remote.client.DevToolsProperties . getRemote ( ) ; java.lang.String java.lang.String = this . java.lang.String + org.springframework.boot.devtools.remote.client.RemoteDevToolsProperties . getContextPath ( ) + STRING ; TunnelConnection org.springframework.boot.devtools.remote.client.TunnelConnection = new HttpTunnelConnection ( java.lang.String , org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory ) ; int int = org.springframework.boot.devtools.remote.client.RemoteDevToolsProperties . getDebug ( ) . getLocalPort ( ) ; TunnelClient org.springframework.boot.devtools.remote.client.TunnelClient = new TunnelClient ( int , org.springframework.boot.devtools.remote.client.TunnelConnection ) ; org.springframework.boot.devtools.remote.client.TunnelClient . addListener ( new LoggingTunnelClientListener ( ) ) ; return org.springframework.boot.devtools.remote.client.TunnelClient ; }  <METHOD_END>
