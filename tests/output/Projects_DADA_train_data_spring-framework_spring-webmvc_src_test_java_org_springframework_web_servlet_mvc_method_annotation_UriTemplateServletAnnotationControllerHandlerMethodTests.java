<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.SimpleUriTemplateController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.MultipleUriTemplateController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext = initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.ModelValidatingViewResolver .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.ViewRenderingController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.ModelValidatingViewResolver org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.ModelValidatingViewResolver = org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext . getBean ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.ModelValidatingViewResolver .class ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.ModelValidatingViewResolver . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.ModelValidatingViewResolver .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.BindingUriTemplateController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.NonBindingUriTemplateController .class ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.AmbiguousUriTemplateController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.RelativePathUriTemplateController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.SimpleUriTemplateController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.SimpleUriTemplateController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , HttpServletResponse . SC_BAD_REQUEST , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.ExplicitSubPathController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.ImplicitSubPathController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.CrudController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.MethodNotAllowedController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.MultiPathController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.CustomRegexController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.MenuTreeController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.VariableNamesController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.VariableNamesController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests.Spr6978Controller .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable ( STRING ) int int , @ MatrixVariable ( required = false , defaultValue = STRING ) int int , java.io.Writer java.io.Writer ) throws java.io.IOException { assertEquals ( STRING , NUMBER , int ) ; java.io.Writer . void ( STRING + int + STRING + int ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable ( STRING ) java.lang.String java.lang.String , @ PathVariable int int , @ PathVariable java.lang.String java.lang.String , @ MatrixVariable ( name = STRING , pathVar = STRING ) int int , @ MatrixVariable ( name = STRING , pathVar = STRING ) int int , java.io.Writer java.io.Writer ) throws java.io.IOException { assertEquals ( STRING , STRING , java.lang.String ) ; assertEquals ( STRING , NUMBER , int ) ; java.io.Writer . void ( STRING + java.lang.String + STRING + int + STRING + int + STRING + java.lang.String + STRING + int ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable ( STRING ) java.lang.String java.lang.String , @ PathVariable int int , @ PathVariable java.lang.String java.lang.String , @ MatrixVariable MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> ) { assertEquals ( STRING , STRING , java.lang.String ) ; assertEquals ( STRING , NUMBER , int ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ PathVariable ( STRING ) java.lang.String java.lang.String ) { assertEquals ( STRING , STRING , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . initBeanPropertyAccess ( ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING ) ; java.text.SimpleDateFormat . void ( false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , new CustomDateEditor ( java.text.SimpleDateFormat , false ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable ( STRING ) java.lang.String java.lang.String , @ PathVariable java.util.Date java.util.Date , java.io.Writer java.io.Writer )				throws java.io.IOException { assertEquals ( STRING , STRING , java.lang.String ) ; assertEquals ( STRING , new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER ) . java.util.Date ( ) , java.util.Date ) ; java.io.Writer . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable ( STRING ) java.lang.String java.lang.String , @ PathVariable java.util.Date java.util.Date , java.io.Writer java.io.Writer )				throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable ( STRING ) java.lang.String java.lang.String , @ PathVariable int int , java.io.Writer java.io.Writer )				throws java.io.IOException { assertEquals ( STRING , STRING , java.lang.String ) ; assertEquals ( STRING , NUMBER , int ) ; java.io.Writer . void ( STRING + java.lang.String + STRING + int ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable ( STRING ) java.lang.String java.lang.String , java.io.Writer java.io.Writer ) throws java.io.IOException { assertEquals ( STRING , STRING , java.lang.String ) ; java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable java.lang.String java.lang.String , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable java.lang.String java.lang.String , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable ( STRING ) int int , @ PathVariable ( STRING ) java.lang.String java.lang.String , @ MatrixVariable java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> , java.io.Writer java.io.Writer ) throws java.io.IOException { assertEquals ( STRING , NUMBER , int ) ; java.io.Writer . void ( STRING + int + STRING + java.lang.String + STRING + java.util.List<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable java.lang.Double java.lang.Double , @ PathVariable java.lang.Double java.lang.Double , java.io.Writer java.io.Writer )			throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.Double + STRING + java.lang.Double ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . POST ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public void void ( @ PathVariable java.lang.String java.lang.String , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . PUT ) public void void ( @ PathVariable java.lang.String java.lang.String , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . DELETE ) public void void ( @ PathVariable java.lang.String java.lang.String , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET ) public void void ( java.io.Writer java.io.Writer ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET , value = STRING ) public void void ( @ PathVariable long long , java.io.Writer java.io.Writer ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . PUT , value = STRING ) public void void ( @ PathVariable long long , java.io.Writer java.io.Writer ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . DELETE , value = STRING ) public void void ( @ PathVariable long long , java.io.Writer java.io.Writer ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = { STRING , STRING STRING } ) public void void ( @ PathVariable java.lang.String java.lang.String , @ PathVariable int int , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; java.io.Writer . void ( STRING + java.lang.String ) ; java.io.Writer . void ( STRING + int ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = { STRING , STRING STRING } ) public void void ( @ PathVariable java.lang.String java.lang.String , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; java.io.Writer . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = { STRING } ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = { STRING } ) public void void ( @ PathVariable int int , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; java.io.Writer . void ( STRING + int ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable ( STRING ) java.lang.String java.lang.String , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public void void ( @ PathVariable java.lang.String java.lang.String , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . DELETE ) public void void ( @ PathVariable java.lang.String java.lang.String , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public void void ( @ PathVariable final java.lang.String java.lang.String , @ PathVariable final long long , java.io.Writer java.io.Writer )				throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.String + STRING + long ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public void void ( @ PathVariable final long long , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + long ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) public void void ( @ PathVariable final java.lang.String java.lang.String , @ PathVariable final long long , java.io.Writer java.io.Writer )				throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.String + STRING + long ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.View org.springframework.web.servlet.mvc.method.annotation.View ( final java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.lang.Exception { return new AbstractView ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; } @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.lang.Exception { for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { assertTrue ( STRING + java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; int ++ ; } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.lang.Exception { for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { assertTrue ( STRING + java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; int ++ ; } }  <METHOD_END>
