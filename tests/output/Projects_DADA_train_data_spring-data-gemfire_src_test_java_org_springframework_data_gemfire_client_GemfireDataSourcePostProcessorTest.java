<METHOD_START> protected org.springframework.data.gemfire.client.RegionInformation org.springframework.data.gemfire.client.RegionInformation ( Region < ? , ? > org.springframework.data.gemfire.client.Region<?,?> ) { return new RegionInformation ( org.springframework.data.gemfire.client.Region<,> , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ( java.lang.String java.lang.String ) { Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> = mock ( Region .class , java.lang.String ) ; RegionAttributes < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.RegionAttributes<java.lang.Object,java.lang.Object> = mock ( RegionAttributes .class , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; when ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> . getFullPath ( ) ) . thenReturn ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) ) ; when ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> . getParentRegion ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.client.RegionAttributes<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.client.RegionAttributes<java.lang.Object,java.lang.Object> . getDataPolicy ( ) ) . thenReturn ( DataPolicy . PARTITION ) ; when ( org.springframework.data.gemfire.client.RegionAttributes<java.lang.Object,java.lang.Object> . getScope ( ) ) . thenReturn ( Scope . DISTRIBUTED_ACK ) ; return org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( ) ; if ( java.lang.Iterable<T> != null ) { for ( T T : java.lang.Iterable<T> ) { java.util.List<T> . boolean ( T ) ; } } return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final ConfigurableListableBeanFactory org.springframework.data.gemfire.client.ConfigurableListableBeanFactory = mock ( ConfigurableListableBeanFactory .class , STRING ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; GemfireDataSourcePostProcessor org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor = new GemfireDataSourcePostProcessor ( null ) { @ java.lang.Override java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ( ) { return java.util.List<java.lang.String> ; } @ java.lang.Override void void ( ConfigurableListableBeanFactory org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ) { assertThat ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , is ( sameInstance ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory ) ) ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Iterable<java.lang.String> ) ; java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ; } } ; org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor . postProcessBeanFactory ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ( ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( ConfigurableListableBeanFactory org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ) { assertThat ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , is ( sameInstance ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory ) ) ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Iterable<java.lang.String> ) ; java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; GemfireDataSourcePostProcessor org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor = new GemfireDataSourcePostProcessor ( null ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) < T > T T ( Function org.springframework.data.gemfire.client.Function , java.lang.Object ... java.lang.Object[] ) { assertThat ( org.springframework.data.gemfire.client.Function , is ( instanceOf ( ListRegionsOnServerFunction .class ) ) ) ; return ( T ) java.util.List<java.lang.String> ; } } ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor . regionNames ( ) ; assertSame ( java.util.List<java.lang.String> , java.lang.Iterable<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) < T > T T ( Function org.springframework.data.gemfire.client.Function , java.lang.Object ... java.lang.Object[] ) { assertThat ( org.springframework.data.gemfire.client.Function , is ( instanceOf ( ListRegionsOnServerFunction .class ) ) ) ; return ( T ) java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; GemfireDataSourcePostProcessor org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor = new GemfireDataSourcePostProcessor ( null ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) < T > T T ( Function org.springframework.data.gemfire.client.Function , java.lang.Object ... java.lang.Object[] ) { if ( org.springframework.data.gemfire.client.Function instanceof ListRegionsOnServerFunction ) { throw new java.lang.RuntimeException ( STRING ) ; } else if ( org.springframework.data.gemfire.client.Function instanceof GetRegionsFunction ) { return ( T ) java.util.Arrays . java.util.List ( org.springframework.data.gemfire.client.RegionInformation ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) , org.springframework.data.gemfire.client.RegionInformation ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ) . toArray ( ) ; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Function . getClass ( ) . getName ( ) , org.springframework.data.gemfire.client.Function . getId ( ) ) ) ; } } ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor . regionNames ( ) ; assertThat ( java.util.List<java.lang.String> ( java.lang.Iterable<java.lang.String> ) . boolean ( java.util.List<java.lang.String> ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) < T > T T ( Function org.springframework.data.gemfire.client.Function , java.lang.Object ... java.lang.Object[] ) { if ( org.springframework.data.gemfire.client.Function instanceof ListRegionsOnServerFunction ) { throw new java.lang.RuntimeException ( STRING ) ; } else if ( org.springframework.data.gemfire.client.Function instanceof GetRegionsFunction ) { return ( T ) java.util.Arrays . java.util.List ( org.springframework.data.gemfire.client.RegionInformation ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) , org.springframework.data.gemfire.client.RegionInformation ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ) . toArray ( ) ; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Function . getClass ( ) . getName ( ) , org.springframework.data.gemfire.client.Function . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireDataSourcePostProcessor org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor = new GemfireDataSourcePostProcessor ( null ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) < T > T T ( Function org.springframework.data.gemfire.client.Function , java.lang.Object ... java.lang.Object[] ) { if ( org.springframework.data.gemfire.client.Function instanceof ListRegionsOnServerFunction ) { throw new java.lang.RuntimeException ( STRING ) ; } else if ( org.springframework.data.gemfire.client.Function instanceof GetRegionsFunction ) { return null ; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Function . getClass ( ) . getName ( ) , org.springframework.data.gemfire.client.Function . getId ( ) ) ) ; } } ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor . regionNames ( ) ; assertThat ( java.lang.Iterable<java.lang.String> , is ( not ( nullValue ( ) ) ) ) ; assertThat ( java.lang.Iterable<java.lang.String> . java.util.Iterator<java.lang.String> ( ) , ( is ( not ( nullValue ( ) ) ) ) ) ; assertThat ( java.lang.Iterable<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . boolean ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) < T > T T ( Function org.springframework.data.gemfire.client.Function , java.lang.Object ... java.lang.Object[] ) { if ( org.springframework.data.gemfire.client.Function instanceof ListRegionsOnServerFunction ) { throw new java.lang.RuntimeException ( STRING ) ; } else if ( org.springframework.data.gemfire.client.Function instanceof GetRegionsFunction ) { return null ; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Function . getClass ( ) . getName ( ) , org.springframework.data.gemfire.client.Function . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; GemfireDataSourcePostProcessor org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor = new GemfireDataSourcePostProcessor ( null ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) < T > T T ( Function org.springframework.data.gemfire.client.Function , java.lang.Object ... java.lang.Object[] ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Function . getClass ( ) . getName ( ) , org.springframework.data.gemfire.client.Function . getId ( ) ) ) ; } @ java.lang.Override void void ( final java.lang.String java.lang.String , final java.lang.Object ... java.lang.Object[] ) { assertThat ( java.lang.String . boolean ( STRING ) , is ( true ) ) ; java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ; } } ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor . regionNames ( ) ; assertThat ( java.lang.Iterable<java.lang.String> , is ( not ( nullValue ( ) ) ) ) ; assertThat ( java.lang.Iterable<java.lang.String> . java.util.Iterator<java.lang.String> ( ) , ( is ( not ( nullValue ( ) ) ) ) ) ; assertThat ( java.lang.Iterable<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . boolean ( ) , is ( false ) ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) < T > T T ( Function org.springframework.data.gemfire.client.Function , java.lang.Object ... java.lang.Object[] ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Function . getClass ( ) . getName ( ) , org.springframework.data.gemfire.client.Function . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( final java.lang.String java.lang.String , final java.lang.Object ... java.lang.Object[] ) { assertThat ( java.lang.String . boolean ( STRING ) , is ( true ) ) ; java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new GemfireDataSourcePostProcessor ( null ) . containsRegionInformation ( new java.lang.Object [] { org.springframework.data.gemfire.client.RegionInformation ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ( STRING ) ) } ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new GemfireDataSourcePostProcessor ( null ) . containsRegionInformation ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.client.RegionInformation ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ( STRING ) ) ) ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new GemfireDataSourcePostProcessor ( null ) . containsRegionInformation ( new java.lang.Object [] { STRING } ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new GemfireDataSourcePostProcessor ( null ) . containsRegionInformation ( new java.lang.Object [ NUMBER ] ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new GemfireDataSourcePostProcessor ( null ) . containsRegionInformation ( null ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class , STRING ) ; ClientRegionFactory org.springframework.data.gemfire.client.ClientRegionFactory = mock ( ClientRegionFactory .class , STRING ) ; when ( org.springframework.data.gemfire.client.ClientCache . createClientRegionFactory ( eq ( ClientRegionShortcut . PROXY ) ) ) . thenReturn ( org.springframework.data.gemfire.client.ClientRegionFactory ) ; Region org.springframework.data.gemfire.client.Region = mock ( Region .class , STRING ) ; Region org.springframework.data.gemfire.client.Region = mock ( Region .class , STRING ) ; final java.util.Map<java.lang.String,org.springframework.data.gemfire.client.Region<?,?>> < java.lang.String , Region < ? , ? > > java.util.Map<java.lang.String,org.springframework.data.gemfire.client.Region<?,?>> = new java.util.HashMap<java.lang.String,org.springframework.data.gemfire.client.Region<?,?>> < java.lang.String , Region < ? , ? > > ( NUMBER ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.client.Region<?,?>> . put ( STRING , org.springframework.data.gemfire.client.Region ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.client.Region<?,?>> . put ( STRING , org.springframework.data.gemfire.client.Region ) ; doAnswer ( new Answer < Region < ? , ? > > ( ) { @ java.lang.Override public org.springframework.data.gemfire.client.Region<?,?> < ? , ? > org.springframework.data.gemfire.client.Region<?,?> ( final InvocationOnMock org.springframework.data.gemfire.client.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.client.InvocationOnMock . getArgument ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.client.Region<?,?>> . containsKey ( java.lang.String ) , is ( true ) ) ; return java.util.Map<java.lang.String,org.springframework.data.gemfire.client.Region<?,?>> . get ( java.lang.String ) ; } } ) . when ( org.springframework.data.gemfire.client.ClientRegionFactory ) . create ( any ( java.lang.String .class ) ) ; ConfigurableListableBeanFactory org.springframework.data.gemfire.client.ConfigurableListableBeanFactory = mock ( ConfigurableListableBeanFactory .class , STRING ) ; when ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory . containsBean ( any ( java.lang.String .class ) ) ) . thenReturn ( false ) ; GemfireDataSourcePostProcessor org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor = new GemfireDataSourcePostProcessor ( org.springframework.data.gemfire.client.ClientCache ) ; org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor . createClientRegionProxies ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , java.util.Map<java.lang.String,org.springframework.data.gemfire.client.Region<?,?>> . keySet ( ) ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . createClientRegionFactory ( eq ( ClientRegionShortcut . PROXY ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . create ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . create ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , times ( NUMBER ) ) . registerSingleton ( eq ( STRING ) , same ( org.springframework.data.gemfire.client.Region ) ) ; verify ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , times ( NUMBER ) ) . registerSingleton ( eq ( STRING ) , same ( org.springframework.data.gemfire.client.Region ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.client.Region<?,?> < ? , ? > org.springframework.data.gemfire.client.Region<?,?> ( final InvocationOnMock org.springframework.data.gemfire.client.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.client.InvocationOnMock . getArgument ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.client.Region<?,?>> . containsKey ( java.lang.String ) , is ( true ) ) ; return java.util.Map<java.lang.String,org.springframework.data.gemfire.client.Region<?,?>> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class , STRING ) ; ClientRegionFactory org.springframework.data.gemfire.client.ClientRegionFactory = mock ( ClientRegionFactory .class , STRING ) ; when ( org.springframework.data.gemfire.client.ClientCache . createClientRegionFactory ( eq ( ClientRegionShortcut . PROXY ) ) ) . thenReturn ( org.springframework.data.gemfire.client.ClientRegionFactory ) ; Region org.springframework.data.gemfire.client.Region = mock ( Region .class , STRING ) ; ConfigurableListableBeanFactory org.springframework.data.gemfire.client.ConfigurableListableBeanFactory = mock ( ConfigurableListableBeanFactory .class , STRING ) ; when ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory . containsBean ( any ( java.lang.String .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory . getBean ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.client.Region ) ; GemfireDataSourcePostProcessor org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor = new GemfireDataSourcePostProcessor ( org.springframework.data.gemfire.client.ClientCache ) ; org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor . createClientRegionProxies ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . createClientRegionFactory ( eq ( ClientRegionShortcut . PROXY ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , never ( ) ) . create ( any ( java.lang.String .class ) ) ; verify ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , never ( ) ) . registerSingleton ( any ( java.lang.String .class ) , any ( Region .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class , STRING ) ; ClientRegionFactory org.springframework.data.gemfire.client.ClientRegionFactory = mock ( ClientRegionFactory .class , STRING ) ; when ( org.springframework.data.gemfire.client.ClientCache . createClientRegionFactory ( eq ( ClientRegionShortcut . PROXY ) ) ) . thenReturn ( org.springframework.data.gemfire.client.ClientRegionFactory ) ; ConfigurableListableBeanFactory org.springframework.data.gemfire.client.ConfigurableListableBeanFactory = mock ( ConfigurableListableBeanFactory .class , STRING ) ; when ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory . containsBean ( any ( java.lang.String .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory . getBean ( any ( java.lang.String .class ) ) ) . thenReturn ( new java.lang.Object ( ) ) ; GemfireDataSourcePostProcessor org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor = new GemfireDataSourcePostProcessor ( org.springframework.data.gemfire.client.ClientCache ) ; try { org.springframework.data.gemfire.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.client.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.client.ExpectedException . expectMessage ( is ( equalTo ( java.lang.String . java.lang.String ( STRING , STRING , java.lang.Object .class . java.lang.String ( ) ) ) ) ) ; org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor . createClientRegionProxies ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; } finally { verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . createClientRegionFactory ( eq ( ClientRegionShortcut . PROXY ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , never ( ) ) . create ( any ( java.lang.String .class ) ) ; verify ( org.springframework.data.gemfire.client.ConfigurableListableBeanFactory , never ( ) ) . registerSingleton ( any ( java.lang.String .class ) , any ( Region .class ) ) ; } }  <METHOD_END>
