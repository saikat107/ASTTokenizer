<METHOD_START> @ Before public void void ( ) { assertThat ( org.springframework.data.gemfire.expiration.Region<java.lang.Object,java.lang.Object> , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.Region<java.lang.Object,java.lang.Object> . getName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.Region<java.lang.Object,java.lang.Object> . getFullPath ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , STRING ) ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.ExpirationAttributes , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.ExpirationAttributes . getTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.ExpirationAttributes . getAction ( ) , is ( equalTo ( ExpirationAction . DESTROY ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> , is ( instanceOf ( CustomExpiry .class ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getDefaultExpirationAttributes ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> , is ( instanceOf ( CustomExpiry .class ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getDefaultExpirationAttributes ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> , is ( instanceOf ( CustomExpiry .class ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getDefaultExpirationAttributes ( ) , is ( sameInstance ( org.springframework.data.gemfire.expiration.ExpirationAttributes ) ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ExpirationAttributes org.springframework.data.gemfire.expiration.ExpirationAttributes , ExpirationAttributes org.springframework.data.gemfire.expiration.ExpirationAttributes ) { void ( org.springframework.data.gemfire.expiration.ExpirationAttributes , org.springframework.data.gemfire.expiration.ExpirationAttributes . getTimeout ( ) , org.springframework.data.gemfire.expiration.ExpirationAttributes . getAction ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ExpirationAttributes org.springframework.data.gemfire.expiration.ExpirationAttributes , int int , ExpirationAction org.springframework.data.gemfire.expiration.ExpirationAction ) { assertThat ( org.springframework.data.gemfire.expiration.ExpirationAttributes , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.ExpirationAttributes . getTimeout ( ) , is ( equalTo ( int ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.ExpirationAttributes . getAction ( ) , is ( equalTo ( org.springframework.data.gemfire.expiration.ExpirationAction ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected Region . Region < java.lang.Object , java.lang.Object > mockRegionEntry ( java.lang.Object java.lang.Object ) { Region . Region < java.lang.Object , java.lang.Object > mockRegionEntry = mock ( Region . Region .class , STRING ) ; when ( mockRegionEntry . getValue ( ) ) . thenReturn ( java.lang.Object ) ; return mockRegionEntry ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomExpiry < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.expiration.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) . getCustomEntryIdleTimeout ( ) ; void ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithTimeToLiveAndGenericExpirationPolicies ( ) ) ) , NUMBER , ExpirationAction . INVALIDATE ) ; void ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithIdleTimeoutExpirationPolicy ( ) ) ) , NUMBER , ExpirationAction . INVALIDATE ) ; void ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithGenericExpirationPolicy ( ) ) ) , NUMBER , ExpirationAction . DESTROY ) ; assertThat ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithNoExpirationPolicy ( ) ) ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryTimeToLiveExpirationPolicy ( ) ) ) , is ( nullValue ( ) ) ) ; void ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryIdleTimeoutExpirationPolicy ( ) ) ) , NUMBER , ExpirationAction . INVALIDATE ) ; void ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryGenericExpirationPolicy ( ) ) ) , NUMBER , ExpirationAction . DESTROY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomExpiry < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.expiration.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) . getCustomEntryTimeToLive ( ) ; void ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithTimeToLiveAndGenericExpirationPolicies ( ) ) ) , NUMBER , ExpirationAction . DESTROY ) ; void ( org.springframework.data.gemfire.expiration.ExpirationAttributes , org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithIdleTimeoutExpirationPolicy ( ) ) ) ) ; void ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithGenericExpirationPolicy ( ) ) ) , NUMBER , ExpirationAction . DESTROY ) ; void ( org.springframework.data.gemfire.expiration.ExpirationAttributes , org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithNoExpirationPolicy ( ) ) ) ) ; void ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryTimeToLiveExpirationPolicy ( ) ) ) , NUMBER , ExpirationAction . LOCAL_INVALIDATE ) ; void ( org.springframework.data.gemfire.expiration.ExpirationAttributes , org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryIdleTimeoutExpirationPolicy ( ) ) ) ) ; void ( org.springframework.data.gemfire.expiration.CustomExpiry<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryGenericExpirationPolicy ( ) ) ) , NUMBER , ExpirationAction . DESTROY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithTimeToLiveAndGenericExpirationPolicies ( ) ) ) , NUMBER , ExpirationAction . INVALIDATE ) ; assertThat ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithIdleTimeoutExpirationPolicy ( ) ) ) , is ( nullValue ( ) ) ) ; void ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithGenericExpirationPolicy ( ) ) ) , NUMBER , ExpirationAction . DESTROY ) ; assertThat ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.ApplicationDomainObjectWithNoExpirationPolicy ( ) ) ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryTimeToLiveExpirationPolicy ( ) ) ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryIdleTimeoutExpirationPolicy ( ) ) ) , is ( nullValue ( ) ) ) ; void ( org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryGenericExpirationPolicy ( ) ) ) , NUMBER , ExpirationAction . DESTROY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.expiration.ExpectedException . expect ( EvaluationException .class ) ; org.springframework.data.gemfire.expiration.ExpectedException . expectCause ( isA ( java.lang.IllegalArgumentException .class ) ) ; org.springframework.data.gemfire.expiration.ExpectedException . expectMessage ( java.lang.String . java.lang.String ( STRING , STRING ) ) ; org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryWithInvalidExpirationAction ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.expiration.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.expiration.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.expiration.AnnotationBasedExpiration<java.lang.Object,java.lang.Object> . getExpiry ( mockRegionEntry ( new org.springframework.data.gemfire.expiration.AnnotationBasedExpirationConfigurationIntegrationTest.RegionEntryWithInvalidExpirationTimeout ( ) ) ) ; }  <METHOD_END>
