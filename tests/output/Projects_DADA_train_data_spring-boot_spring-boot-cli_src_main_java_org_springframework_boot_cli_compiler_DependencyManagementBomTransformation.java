<METHOD_START> public void ( DependencyResolutionContext org.springframework.boot.cli.compiler.DependencyResolutionContext ) { super( java.util.Set<java.lang.String> , true ); this . org.springframework.boot.cli.compiler.DependencyResolutionContext = org.springframework.boot.cli.compiler.DependencyResolutionContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) { if ( ! java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> . isEmpty ( ) ) { if ( java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> . size ( ) > NUMBER ) { for ( AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode : java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) { void ( org.springframework.boot.cli.compiler.AnnotationNode ) ; } } else { void ( java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> . get ( NUMBER ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode ) { Expression org.springframework.boot.cli.compiler.Expression = org.springframework.boot.cli.compiler.AnnotationNode . getMember ( STRING ) ; java.util.List<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.List<java.util.Map<java.lang.String,java.lang.String>> = java.util.List<java.util.Map<java.lang.String,java.lang.String>> ( org.springframework.boot.cli.compiler.Expression ) ; void ( java.util.List<java.util.Map<java.lang.String,java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.List<java.util.Map<java.lang.String,java.lang.String>> ( Expression org.springframework.boot.cli.compiler.Expression ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = null ; java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> < ConstantExpression > java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> = java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ( org.springframework.boot.cli.compiler.Expression ) ; java.util.List<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.List<java.util.Map<java.lang.String,java.lang.String>> = new java.util.ArrayList <> ( java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> . size ( ) ) ; for ( ConstantExpression org.springframework.boot.cli.compiler.ConstantExpression : java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ) { java.lang.Object java.lang.Object = org.springframework.boot.cli.compiler.ConstantExpression . getValue ( ) ; if ( java.lang.Object instanceof java.lang.String ) { java.lang.String [] java.lang.String[] = ( ( java.lang.String ) org.springframework.boot.cli.compiler.ConstantExpression . getValue ( ) ) . java.lang.String[] ( STRING ) ; if ( java.lang.String[] . int == NUMBER ) { java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String[] [ NUMBER ] ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String[] [ NUMBER ] ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String[] [ NUMBER ] ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.List<java.util.Map<java.lang.String,java.lang.String>> . boolean ( java.util.Map<java.lang.String,java.lang.String> ) ; } else { void ( org.springframework.boot.cli.compiler.ConstantExpression ) ; } } } return java.util.List<java.util.Map<java.lang.String,java.lang.String>> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> < ConstantExpression > java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ( Expression org.springframework.boot.cli.compiler.Expression ) { if ( org.springframework.boot.cli.compiler.Expression instanceof ListExpression ) { return java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ( ( ListExpression ) org.springframework.boot.cli.compiler.Expression ) ; } if ( org.springframework.boot.cli.compiler.Expression instanceof ConstantExpression && ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) . getValue ( ) instanceof java.lang.String ) { return java.util.Arrays . java.util.List<T> ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) ; } void ( STRING + STRING , org.springframework.boot.cli.compiler.Expression ) ; return java.util.Collections . java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> < ConstantExpression > java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ( ListExpression org.springframework.boot.cli.compiler.ListExpression ) { java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> < ConstantExpression > java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> = new java.util.ArrayList<org.springframework.boot.cli.compiler.ConstantExpression> <> ( ) ; for ( Expression org.springframework.boot.cli.compiler.Expression : org.springframework.boot.cli.compiler.ListExpression . getExpressions ( ) ) { if ( org.springframework.boot.cli.compiler.Expression instanceof ConstantExpression && ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) . getValue ( ) instanceof java.lang.String ) { java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> . add ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) ; } else { void ( STRING + STRING , org.springframework.boot.cli.compiler.Expression ) ; } } return java.util.List<org.springframework.boot.cli.compiler.ConstantExpression> ; }  <METHOD_END>
<METHOD_START> private void void ( Expression org.springframework.boot.cli.compiler.Expression ) { Message org.springframework.boot.cli.compiler.Message = org.springframework.boot.cli.compiler.Message ( java.lang.String . java.lang.String ( STRING ) , org.springframework.boot.cli.compiler.Expression ) ; getSourceUnit ( ) . getErrorCollector ( ) . addErrorAndContinue ( org.springframework.boot.cli.compiler.Message ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.List<java.util.Map<java.lang.String,java.lang.String>> ) { java.net.URI [] java.net.URI[] = Grape . getInstance ( ) . resolve ( null , java.util.List<java.util.Map<java.lang.String,java.lang.String>> . java.util.Map[] ( new java.util.Map [ java.util.List<java.util.Map<java.lang.String,java.lang.String>> . int ( ) ] ) ) ; DefaultModelBuilder org.springframework.boot.cli.compiler.DefaultModelBuilder = new DefaultModelBuilderFactory ( ) . newInstance ( ) ; for ( java.net.URI java.net.URI : java.net.URI[] ) { try { DefaultModelBuildingRequest org.springframework.boot.cli.compiler.DefaultModelBuildingRequest = new DefaultModelBuildingRequest ( ) ; org.springframework.boot.cli.compiler.DefaultModelBuildingRequest . setModelResolver ( new org.springframework.boot.cli.compiler.DependencyManagementBomTransformation.GrapeModelResolver ( ) ) ; org.springframework.boot.cli.compiler.DefaultModelBuildingRequest . setModelSource ( new UrlModelSource ( java.net.URI . java.net.URL ( ) ) ) ; org.springframework.boot.cli.compiler.DefaultModelBuildingRequest . setSystemProperties ( java.lang.System . java.util.Properties ( ) ) ; Model org.springframework.boot.cli.compiler.Model = org.springframework.boot.cli.compiler.DefaultModelBuilder . build ( org.springframework.boot.cli.compiler.DefaultModelBuildingRequest ) . getEffectiveModel ( ) ; this . org.springframework.boot.cli.compiler.DependencyResolutionContext . addDependencyManagement ( new MavenModelDependencyManagement ( org.springframework.boot.cli.compiler.Model ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.net.URI + STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode ) { Message org.springframework.boot.cli.compiler.Message = org.springframework.boot.cli.compiler.Message ( STRING , org.springframework.boot.cli.compiler.AnnotationNode ) ; getSourceUnit ( ) . getErrorCollector ( ) . addErrorAndContinue ( org.springframework.boot.cli.compiler.Message ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , ASTNode org.springframework.boot.cli.compiler.ASTNode ) { getSourceUnit ( ) . getErrorCollector ( ) . addErrorAndContinue ( org.springframework.boot.cli.compiler.Message ( java.lang.String , org.springframework.boot.cli.compiler.ASTNode ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.Message org.springframework.boot.cli.compiler.Message ( java.lang.String java.lang.String , ASTNode org.springframework.boot.cli.compiler.ASTNode ) { return new SyntaxErrorMessage ( new SyntaxException ( java.lang.String , org.springframework.boot.cli.compiler.ASTNode . getLineNumber ( ) , org.springframework.boot.cli.compiler.ASTNode . getColumnNumber ( ) , org.springframework.boot.cli.compiler.ASTNode . getLastLineNumber ( ) , org.springframework.boot.cli.compiler.ASTNode . getLastColumnNumber ( ) ) , getSourceUnit ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.compiler.ModelSource org.springframework.boot.cli.compiler.ModelSource ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String )				throws org.springframework.boot.cli.compiler.UnresolvableModelException { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; try { return new UrlModelSource ( Grape . getInstance ( ) . resolve ( null , java.util.Map<java.lang.String,java.lang.String> ) [ NUMBER ] . toURL ( ) ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new UnresolvableModelException ( java.net.MalformedURLException . java.lang.String ( ) , java.lang.String , java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Repository org.springframework.boot.cli.compiler.Repository )				throws org.springframework.boot.cli.compiler.InvalidRepositoryException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.compiler.ModelResolver org.springframework.boot.cli.compiler.ModelResolver ( ) { return this ; }  <METHOD_END>
