<METHOD_START> @ java.lang.Override public org.springframework.aop.config.BeanDefinitionHolder org.springframework.aop.config.BeanDefinitionHolder ( org.w3c.dom.Node org.w3c.dom.Node , BeanDefinitionHolder org.springframework.aop.config.BeanDefinitionHolder , ParserContext org.springframework.aop.config.ParserContext ) { boolean boolean = true ; if ( org.w3c.dom.Node instanceof org.w3c.dom.Element ) { org.w3c.dom.Element org.w3c.dom.Element = ( org.w3c.dom.Element ) org.w3c.dom.Node ; if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { boolean = java.lang.Boolean . java.lang.Boolean ( org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ; } } BeanDefinitionHolder org.springframework.aop.config.BeanDefinitionHolder = ScopedProxyUtils . createScopedProxy ( org.springframework.aop.config.BeanDefinitionHolder , org.springframework.aop.config.ParserContext . getRegistry ( ) , boolean ) ; java.lang.String java.lang.String = ScopedProxyUtils . getTargetBeanName ( org.springframework.aop.config.BeanDefinitionHolder . getBeanName ( ) ) ; org.springframework.aop.config.ParserContext . getReaderContext ( ) . fireComponentRegistered ( new BeanComponentDefinition ( org.springframework.aop.config.BeanDefinitionHolder . getBeanDefinition ( ) , java.lang.String ) ) ; return org.springframework.aop.config.BeanDefinitionHolder ; }  <METHOD_END>
