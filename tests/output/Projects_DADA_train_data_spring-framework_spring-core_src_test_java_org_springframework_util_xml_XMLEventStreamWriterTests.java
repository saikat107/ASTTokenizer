<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.stream.XMLOutputFactory javax.xml.stream.XMLOutputFactory = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLOutputFactory ( ) ; javax.xml.stream.XMLEventWriter javax.xml.stream.XMLEventWriter = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLEventWriter ( java.io.StringWriter ) ; org.springframework.util.xml.XMLEventStreamWriter = new XMLEventStreamWriter ( javax.xml.stream.XMLEventWriter , javax.xml.stream.XMLEventFactory . javax.xml.stream.XMLEventFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.util.xml.XMLEventStreamWriter . writeStartDocument ( ) ; org.springframework.util.xml.XMLEventStreamWriter . writeProcessingInstruction ( STRING , STRING ) ; org.springframework.util.xml.XMLEventStreamWriter . writeStartElement ( STRING , STRING ) ; org.springframework.util.xml.XMLEventStreamWriter . writeDefaultNamespace ( STRING ) ; org.springframework.util.xml.XMLEventStreamWriter . writeStartElement ( STRING , STRING , STRING ) ; org.springframework.util.xml.XMLEventStreamWriter . writeNamespace ( STRING , STRING ) ; org.springframework.util.xml.XMLEventStreamWriter . writeComment ( STRING ) ; org.springframework.util.xml.XMLEventStreamWriter . writeCharacters ( STRING ) ; org.springframework.util.xml.XMLEventStreamWriter . writeEndElement ( ) ; org.springframework.util.xml.XMLEventStreamWriter . writeEndElement ( ) ; org.springframework.util.xml.XMLEventStreamWriter . writeEndDocument ( ) ; Predicate < org.w3c.dom.Node > org.springframework.util.xml.Predicate<org.w3c.dom.Node> = n -> n . getNodeType ( ) != Node . DOCUMENT_TYPE_NODE && n . getNodeType ( ) != Node . PROCESSING_INSTRUCTION_NODE ; assertThat ( java.io.StringWriter . java.lang.String ( ) , isSimilarTo ( java.lang.String ) . withNodeFilter ( org.springframework.util.xml.Predicate<org.w3c.dom.Node> ) ) ; }  <METHOD_END>
