<METHOD_START> @ java.lang.Override public java.lang.annotation.Annotation java.lang.annotation.Annotation ( java.lang.reflect.Method java.lang.reflect.Method ) { AspectJAnnotation < ? > org.springframework.aop.aspectj.annotation.AspectJAnnotation<?> = AbstractAspectJAdvisorFactory . findAspectJAnnotationOnMethod ( java.lang.reflect.Method ) ; return ( org.springframework.aop.aspectj.annotation.AspectJAnnotation<> != null ? org.springframework.aop.aspectj.annotation.AspectJAnnotation<> . getAnnotation ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { return java.lang.reflect.Method . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.aop.aspectj.annotation.BeanFactory ) { this . org.springframework.aop.aspectj.annotation.BeanFactory = org.springframework.aop.aspectj.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> ( MetadataAwareAspectInstanceFactory org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) . getAspectClass ( ) ; java.lang.String java.lang.String = org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) . getAspectName ( ) ; validate ( java.lang.Class<> ) ; MetadataAwareAspectInstanceFactory org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory = new LazySingletonAspectInstanceFactoryDecorator ( org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> = new java.util.LinkedList<org.springframework.aop.aspectj.annotation.Advisor> <> ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ( java.lang.Class<> ) ) { Advisor org.springframework.aop.aspectj.annotation.Advisor = org.springframework.aop.aspectj.annotation.Advisor ( java.lang.reflect.Method , org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . size ( ) , java.lang.String ) ; if ( org.springframework.aop.aspectj.annotation.Advisor != null ) { java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . add ( org.springframework.aop.aspectj.annotation.Advisor ) ; } } if ( ! java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . isEmpty ( ) && org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) . isLazilyInstantiated ( ) ) { Advisor org.springframework.aop.aspectj.annotation.Advisor = new org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory.SyntheticInstantiationAdvisor ( org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . add ( NUMBER , org.springframework.aop.aspectj.annotation.Advisor ) ; } for ( java.lang.reflect.Field java.lang.reflect.Field : java.lang.Class<> . java.lang.reflect.Field[] ( ) ) { Advisor org.springframework.aop.aspectj.annotation.Advisor = org.springframework.aop.aspectj.annotation.Advisor ( java.lang.reflect.Field ) ; if ( org.springframework.aop.aspectj.annotation.Advisor != null ) { java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . add ( org.springframework.aop.aspectj.annotation.Advisor ) ; } } return java.util.List<org.springframework.aop.aspectj.annotation.Advisor> ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { final java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method> <> ( ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , new ReflectionUtils . ReflectionUtils ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException { if ( AnnotationUtils . getAnnotation ( java.lang.reflect.Method , Pointcut .class ) == null ) { java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } } } ) ; java.util.Collections . void ( java.util.List<java.lang.reflect.Method> , java.util.Comparator<java.lang.reflect.Method> ) ; return java.util.List<java.lang.reflect.Method> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException { if ( AnnotationUtils . getAnnotation ( java.lang.reflect.Method , Pointcut .class ) == null ) { java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.aop.aspectj.annotation.Advisor org.springframework.aop.aspectj.annotation.Advisor ( java.lang.reflect.Field java.lang.reflect.Field ) { DeclareParents org.springframework.aop.aspectj.annotation.DeclareParents = java.lang.reflect.Field . T ( DeclareParents .class ) ; if ( org.springframework.aop.aspectj.annotation.DeclareParents == null ) { return null ; } if ( DeclareParents .class == org.springframework.aop.aspectj.annotation.DeclareParents . defaultImpl ( ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } return new DeclareParentsAdvisor ( java.lang.reflect.Field . java.lang.Class<?> ( ) , org.springframework.aop.aspectj.annotation.DeclareParents . value ( ) , org.springframework.aop.aspectj.annotation.DeclareParents . defaultImpl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.aspectj.annotation.Advisor org.springframework.aop.aspectj.annotation.Advisor ( java.lang.reflect.Method java.lang.reflect.Method , MetadataAwareAspectInstanceFactory org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory , int int , java.lang.String java.lang.String ) { validate ( org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) . getAspectClass ( ) ) ; AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut = org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ( java.lang.reflect.Method , org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) . getAspectClass ( ) ) ; if ( org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut == null ) { return null ; } return new InstantiationModelAwarePointcutAdvisorImpl ( org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , java.lang.reflect.Method , this , org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory , int , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { AspectJAnnotation < ? > org.springframework.aop.aspectj.annotation.AspectJAnnotation<?> = AbstractAspectJAdvisorFactory . findAspectJAnnotationOnMethod ( java.lang.reflect.Method ) ; if ( org.springframework.aop.aspectj.annotation.AspectJAnnotation<> == null ) { return null ; } AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut = new AspectJExpressionPointcut ( java.lang.Class<> , new java.lang.String [ NUMBER ] , new java.lang.Class<?> < ? > [ NUMBER ] ) ; org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut . setExpression ( org.springframework.aop.aspectj.annotation.AspectJAnnotation<> . getPointcutExpression ( ) ) ; org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut . setBeanFactory ( this . org.springframework.aop.aspectj.annotation.BeanFactory ) ; return org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.aspectj.annotation.Advice org.springframework.aop.aspectj.annotation.Advice ( java.lang.reflect.Method java.lang.reflect.Method , AspectJExpressionPointcut org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , MetadataAwareAspectInstanceFactory org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory , int int , java.lang.String java.lang.String ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) . getAspectClass ( ) ; validate ( java.lang.Class<> ) ; AspectJAnnotation < ? > org.springframework.aop.aspectj.annotation.AspectJAnnotation<?> = AbstractAspectJAdvisorFactory . findAspectJAnnotationOnMethod ( java.lang.reflect.Method ) ; if ( org.springframework.aop.aspectj.annotation.AspectJAnnotation<> == null ) { return null ; } if ( ! isAspect ( java.lang.Class<> ) ) { throw new AopConfigException ( STRING + STRING + java.lang.reflect.Method + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.reflect.Method ) ; } AbstractAspectJAdvice org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice ; switch ( org.springframework.aop.aspectj.annotation.AspectJAnnotation<> . getAnnotationType ( ) ) { case AtBefore : org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice = new AspectJMethodBeforeAdvice ( java.lang.reflect.Method , org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) ; break; case AtAfter : org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice = new AspectJAfterAdvice ( java.lang.reflect.Method , org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) ; break; case AtAfterReturning : org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice = new AspectJAfterReturningAdvice ( java.lang.reflect.Method , org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) ; AfterReturning org.springframework.aop.aspectj.annotation.AfterReturning = ( AfterReturning ) org.springframework.aop.aspectj.annotation.AspectJAnnotation<> . getAnnotation ( ) ; if ( StringUtils . hasText ( org.springframework.aop.aspectj.annotation.AfterReturning . returning ( ) ) ) { org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice . setReturningName ( org.springframework.aop.aspectj.annotation.AfterReturning . returning ( ) ) ; } break; case AtAfterThrowing : org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice = new AspectJAfterThrowingAdvice ( java.lang.reflect.Method , org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) ; AfterThrowing org.springframework.aop.aspectj.annotation.AfterThrowing = ( AfterThrowing ) org.springframework.aop.aspectj.annotation.AspectJAnnotation<> . getAnnotation ( ) ; if ( StringUtils . hasText ( org.springframework.aop.aspectj.annotation.AfterThrowing . throwing ( ) ) ) { org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice . setThrowingName ( org.springframework.aop.aspectj.annotation.AfterThrowing . throwing ( ) ) ; } break; case AtAround : org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice = new AspectJAroundAdvice ( java.lang.reflect.Method , org.springframework.aop.aspectj.annotation.AspectJExpressionPointcut , org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) ; break; case AtPointcut : if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING ) ; } return null ; default: throw new java.lang.UnsupportedOperationException ( STRING + java.lang.reflect.Method ) ; } org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice . setAspectName ( java.lang.String ) ; org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice . setDeclarationOrder ( int ) ; java.lang.String [] java.lang.String[] = this . parameterNameDiscoverer . getParameterNames ( java.lang.reflect.Method ) ; if ( java.lang.String[] != null ) { org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice . setArgumentNamesFromStringArray ( java.lang.String[] ) ; } org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice . calculateArgumentBindings ( ) ; return org.springframework.aop.aspectj.annotation.AbstractAspectJAdvice ; }  <METHOD_END>
<METHOD_START> public void ( final MetadataAwareAspectInstanceFactory org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) { super( org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectMetadata ( ) . getPerClausePointcut ( ) , new MethodBeforeAdvice ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) { org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectInstance ( ) ; } } ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) { org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory . getAspectInstance ( ) ; }  <METHOD_END>
