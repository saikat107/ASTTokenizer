<METHOD_START> @ AfterClass public static void void ( ) java.lang.Throwable { if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ BeforeClass public static void void ( ) { java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) + STRING + org.springframework.integration.file.FileReadingMessageSourcePersistentFilterIntegrationTests .class . java.lang.String ( ) ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.io.File . java.io.File ( STRING , null , java.io.File ) . boolean ( java.lang.System . long ( ) - NUMBER ) ; java.io.File . java.io.File ( STRING , null , java.io.File ) . boolean ( java.lang.System . long ( ) - NUMBER ) ; java.io.File . java.io.File ( STRING , null , java.io.File ) . boolean ( java.lang.System . long ( ) - NUMBER ) ; this . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . org.springframework.integration.file.AbstractApplicationContext = new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.file.FileReadingMessageSourcePersistentFilterIntegrationTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.file.FileReadingMessageSourcePersistentFilterIntegrationTests> ( ) ) ; this . org.springframework.integration.file.FileReadingMessageSource = org.springframework.integration.file.AbstractApplicationContext . getBean ( FileReadingMessageSource .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { java.io.File [] java.io.File[] = java.io.File . java.io.File[] ( ) ; for ( int int = NUMBER ; int < java.io.File[] . int ; int ++ ) { java.io.File[] [ int ] . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { java.io.File . boolean ( ) ; java.io.File java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) + STRING + org.springframework.integration.file.FileReadingMessageSourcePersistentFilterIntegrationTests .class . java.lang.String ( ) + STRING ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . boolean ( ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectFieldAccessor org.springframework.integration.file.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.FileReadingMessageSource ) ; assertEquals ( java.io.File , org.springframework.integration.file.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.io.File > org.springframework.integration.file.Message<java.io.File> = org.springframework.integration.file.FileReadingMessageSource . receive ( ) ; assertNotNull ( STRING , org.springframework.integration.file.Message<java.io.File> ) ; Message < java.io.File > org.springframework.integration.file.Message<java.io.File> = org.springframework.integration.file.FileReadingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.file.Message<java.io.File> ) ; Message < java.io.File > org.springframework.integration.file.Message<java.io.File> = org.springframework.integration.file.FileReadingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.file.Message<java.io.File> ) ; assertNotSame ( org.springframework.integration.file.Message<java.io.File> + STRING + org.springframework.integration.file.Message<java.io.File> , org.springframework.integration.file.Message<java.io.File> . getPayload ( ) , org.springframework.integration.file.Message<java.io.File> . getPayload ( ) ) ; assertNotSame ( org.springframework.integration.file.Message<java.io.File> + STRING + org.springframework.integration.file.Message<java.io.File> , org.springframework.integration.file.Message<java.io.File> . getPayload ( ) , org.springframework.integration.file.Message<java.io.File> . getPayload ( ) ) ; assertNotSame ( org.springframework.integration.file.Message<java.io.File> + STRING + org.springframework.integration.file.Message<java.io.File> , org.springframework.integration.file.Message<java.io.File> . getPayload ( ) , org.springframework.integration.file.Message<java.io.File> . getPayload ( ) ) ; this . org.springframework.integration.file.AbstractApplicationContext . destroy ( ) ; this . void ( ) ; Message < java.io.File > org.springframework.integration.file.Message<java.io.File> = org.springframework.integration.file.FileReadingMessageSource . receive ( ) ; assertNull ( org.springframework.integration.file.Message<java.io.File> ) ; this . org.springframework.integration.file.AbstractApplicationContext . destroy ( ) ; }  <METHOD_END>
