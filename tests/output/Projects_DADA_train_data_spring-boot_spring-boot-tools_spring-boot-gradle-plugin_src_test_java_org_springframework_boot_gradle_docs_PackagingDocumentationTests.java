<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.gradle.docs.GradleBuild . script ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.boot.gradle.docs.GradleBuild . script ( STRING ) . build ( STRING ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING + this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) . getName ( ) + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ) { assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.boot.gradle.docs.GradleBuild . script ( STRING ) . build ( STRING ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING + this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) . getName ( ) + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ) { assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.boot.gradle.docs.GradleBuild . script ( STRING ) . build ( STRING ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING + this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) . getName ( ) + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ) { assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING ) . boolean ( ) ; this . org.springframework.boot.gradle.docs.GradleBuild . script ( STRING ) . build ( STRING ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING + this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) . getName ( ) + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNotNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.boot.gradle.docs.GradleBuild . script ( STRING ) . build ( STRING ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING + this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) . getName ( ) + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ) { java.util.jar.JarEntry java.util.jar.JarEntry = java.util.jar.JarFile . java.util.jar.JarEntry ( STRING ) ; assertThat ( java.util.jar.JarEntry ) . isNotNull ( ) ; assertThat ( java.util.jar.JarEntry . java.lang.String ( ) ) . startsWith ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.boot.gradle.docs.GradleBuild . script ( STRING ) . build ( STRING ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING + this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) . getName ( ) + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.boot.gradle.docs.GradleBuild . script ( STRING ) . build ( STRING ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING + this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) . getName ( ) + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING ) ; java.io.File . java.io.File ( ) . boolean ( ) ; FileCopyUtils . copy ( STRING , new java.io.FileWriter ( java.io.File ) ) ; this . org.springframework.boot.gradle.docs.GradleBuild . script ( STRING ) . build ( STRING ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING + this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) . getName ( ) + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; assertThat ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.boot.gradle.docs.GradleBuild . script ( STRING ) . build ( STRING ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) , STRING + this . org.springframework.boot.gradle.docs.GradleBuild . getProjectDir ( ) . getName ( ) + STRING ) ; assertThat ( java.io.File ) . isFile ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ) { assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; } }  <METHOD_END>
