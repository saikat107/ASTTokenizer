<METHOD_START> private org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest ( java.lang.String java.lang.String ) { MockServletContext org.springframework.boot.actuate.endpoint.mvc.MockServletContext = new MockServletContext ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockServletContext . declareRoles ( java.lang.String ) ; return new MockHttpServletRequest ( org.springframework.boot.actuate.endpoint.mvc.MockServletContext ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint = mock ( HealthEndpoint .class ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . isEnabled ( ) ) . willReturn ( true ) ; this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint = new HealthMvcEndpoint ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment = new MockEnvironment ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . setEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . down ( ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof ResponseEntity ) . isTrue ( ) ; ResponseEntity < Health > org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<org.springframework.boot.actuate.endpoint.mvc.Health> = ( ResponseEntity < Health > ) java.lang.Object ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<org.springframework.boot.actuate.endpoint.mvc.Health> . getBody ( ) . getStatus ( ) == Status . DOWN ) . isTrue ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<org.springframework.boot.actuate.endpoint.mvc.Health> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . SERVICE_UNAVAILABLE ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . status ( STRING ) . build ( ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . setStatusMapping ( java.util.Collections . java.util.Map ( STRING , HttpStatus . INTERNAL_SERVER_ERROR ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof ResponseEntity ) . isTrue ( ) ; ResponseEntity < Health > org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<org.springframework.boot.actuate.endpoint.mvc.Health> = ( ResponseEntity < Health > ) java.lang.Object ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<org.springframework.boot.actuate.endpoint.mvc.Health> . getBody ( ) . getStatus ( ) . equals ( new Status ( STRING ) ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<org.springframework.boot.actuate.endpoint.mvc.Health> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . INTERNAL_SERVER_ERROR ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . outOfService ( ) . build ( ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . setStatusMapping ( java.util.Collections . java.util.Map ( STRING , HttpStatus . INTERNAL_SERVER_ERROR ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof ResponseEntity ) . isTrue ( ) ; ResponseEntity < Health > org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<org.springframework.boot.actuate.endpoint.mvc.Health> = ( ResponseEntity < Health > ) java.lang.Object ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<org.springframework.boot.actuate.endpoint.mvc.Health> . getBody ( ) . getStatus ( ) . equals ( Status . OUT_OF_SERVICE ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<org.springframework.boot.actuate.endpoint.mvc.Health> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . INTERNAL_SERVER_ERROR ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint = new HealthMvcEndpoint ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint , false ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getDetails ( ) . get ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment . getPropertySources ( ) . addLast ( org.springframework.boot.actuate.endpoint.mvc.PropertySource<> ) ; Authentication org.springframework.boot.actuate.endpoint.mvc.Authentication = mock ( Authentication .class ) ; java.util.Set<org.springframework.boot.actuate.endpoint.mvc.SimpleGrantedAuthority> < SimpleGrantedAuthority > java.util.Set<org.springframework.boot.actuate.endpoint.mvc.SimpleGrantedAuthority> = java.util.Collections . java.util.Set ( new SimpleGrantedAuthority ( STRING ) ) ; doReturn ( java.util.Set<org.springframework.boot.actuate.endpoint.mvc.SimpleGrantedAuthority> ) . when ( org.springframework.boot.actuate.endpoint.mvc.Authentication ) . getAuthorities ( ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , org.springframework.boot.actuate.endpoint.mvc.Authentication ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment . getPropertySources ( ) . addLast ( org.springframework.boot.actuate.endpoint.mvc.PropertySource<> ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.MockEnvironment . getPropertySources ( ) . addLast ( org.springframework.boot.actuate.endpoint.mvc.PropertySource<> ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getDetails ( ) . get ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint = new HealthMvcEndpoint ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint , true , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint = new HealthMvcEndpoint ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint , true , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getDetails ( ) . get ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . getTimeToLive ( ) ) . willReturn ( NUMBER ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; Health org.springframework.boot.actuate.endpoint.mvc.Health = ( Health ) java.lang.Object ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.Health . getStatus ( ) == Status . UP ) . isTrue ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.Health . getDetails ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . down ( ) . build ( ) ) ; java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; org.springframework.boot.actuate.endpoint.mvc.Health = ( Health ) java.lang.Object ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.Health . getStatus ( ) == Status . UP ) . isTrue ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.Health . getDetails ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . getTimeToLive ( ) ) . willReturn ( NUMBER ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . down ( ) . build ( ) ) ; java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; @ java.lang.SuppressWarnings ( STRING ) Health org.springframework.boot.actuate.endpoint.mvc.Health = ( ( ResponseEntity < Health > ) java.lang.Object ) . getBody ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.Health . getStatus ( ) == Status . DOWN ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . getTimeToLive ( ) ) . willReturn ( NUMBER ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; assertThat ( java.lang.Object instanceof Health ) . isTrue ( ) ; assertThat ( ( ( Health ) java.lang.Object ) . getStatus ( ) == Status . UP ) . isTrue ( ) ; java.lang.Thread . void ( NUMBER ) ; given ( this . org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint . invoke ( ) ) . willReturn ( new Health . Health ( ) . down ( ) . build ( ) ) ; java.lang.Object = this . org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint . invoke ( this . org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , null ) ; @ java.lang.SuppressWarnings ( STRING ) Health org.springframework.boot.actuate.endpoint.mvc.Health = ( ( ResponseEntity < Health > ) java.lang.Object ) . getBody ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.Health . getStatus ( ) == Status . DOWN ) . isTrue ( ) ; }  <METHOD_END>
