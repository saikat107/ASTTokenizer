<METHOD_START> @ Parameters ( name = STRING ) static public java.lang.Iterable<java.lang.Object[]> < java.lang.Object [] > java.lang.Iterable<java.lang.Object[]> ( ) { return java.util.Arrays . java.util.List<java.lang.Object[]> ( new java.lang.Object [] [] { { STRING } , { STRING } } ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { java.util.Date = new java.util.Date ( ) ; java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( java.lang.String , STRING ) ; org.springframework.web.context.request.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.context.request.ServletWebRequest = new ServletWebRequest ( org.springframework.web.context.request.MockHttpServletRequest , org.springframework.web.context.request.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = java.util.Date . long ( ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , long ) ; org.springframework.web.context.request.MockHttpServletResponse . setStatus ( NUMBER ) ; assertFalse ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( long ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertNull ( org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = java.util.Date . long ( ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , long ) ; org.springframework.web.context.request.MockHttpServletResponse . setStatus ( NUMBER ) ; assertFalse ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( long ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertFalse ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = java.util.Date . long ( ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , long ) ; org.springframework.web.context.request.MockHttpServletResponse . addHeader ( STRING , java.lang.String ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( long ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getHeaders ( STRING ) . size ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = java.util.Date . long ( ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , long ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( long ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.text.SimpleDateFormat . java.lang.String ( long ) , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = java.util.Date . long ( ) - ( NUMBER * NUMBER ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , long ) ; assertFalse ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.util.Date . long ( ) ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.text.SimpleDateFormat . java.lang.String ( java.util.Date . long ( ) ) , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertFalse ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertFalse ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertFalse ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.util.Date . long ( ) ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String , java.util.Date . long ( ) ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( java.text.SimpleDateFormat . java.lang.String ( java.util.Date . long ( ) ) , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; long long = java.util.Date . long ( ) ; long long = long - ( NUMBER * NUMBER ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , long ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String , long ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( java.text.SimpleDateFormat . java.lang.String ( long ) , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; long long = java.util.Date . long ( ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , long ) ; assertFalse ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String , long ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( java.text.SimpleDateFormat . java.lang.String ( long ) , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = java.text.SimpleDateFormat . java.util.Date ( java.lang.String ) . long ( ) ; org.springframework.web.context.request.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( long ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.text.SimpleDateFormat . java.lang.String ( long ) , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = java.text.SimpleDateFormat . java.util.Date ( java.lang.String ) . long ( ) ; org.springframework.web.context.request.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertFalse ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( long ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.text.SimpleDateFormat . java.lang.String ( long ) , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = java.util.Date . long ( ) ; long long = long - ( NUMBER * NUMBER ) ; org.springframework.web.context.request.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , long ) ; assertFalse ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( long ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( null , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = java.util.Date . long ( ) ; long long = long - ( NUMBER * NUMBER ) ; org.springframework.web.context.request.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.context.request.MockHttpServletRequest . addHeader ( STRING , long ) ; assertTrue ( org.springframework.web.context.request.ServletWebRequest . checkNotModified ( long ) ) ; assertEquals ( NUMBER , org.springframework.web.context.request.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( null , org.springframework.web.context.request.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
