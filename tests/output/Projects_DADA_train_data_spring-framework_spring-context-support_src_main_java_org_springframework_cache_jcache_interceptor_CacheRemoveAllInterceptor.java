<METHOD_START> protected void ( CacheErrorHandler org.springframework.cache.jcache.interceptor.CacheErrorHandler ) { super( org.springframework.cache.jcache.interceptor.CacheErrorHandler ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( CacheOperationInvocationContext < CacheRemoveAllOperation > org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation> , CacheOperationInvoker org.springframework.cache.jcache.interceptor.CacheOperationInvoker ) { CacheRemoveAllOperation org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation = org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation> . getOperation ( ) ; boolean boolean = org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation . isEarlyRemove ( ) ; if ( boolean ) { void ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation> ) ; } try { java.lang.Object java.lang.Object = org.springframework.cache.jcache.interceptor.CacheOperationInvoker . invoke ( ) ; if ( ! boolean ) { void ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation> ) ; } return java.lang.Object ; } catch ( CacheOperationInvoker . CacheOperationInvoker CacheOperationInvoker.ThrowableWrapper ) { java.lang.Throwable java.lang.Throwable = CacheOperationInvoker.ThrowableWrapper . getOriginal ( ) ; if ( ! boolean && org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation . getExceptionTypeFilter ( ) . match ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ) { void ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation> ) ; } throw CacheOperationInvoker.ThrowableWrapper ; } }  <METHOD_END>
<METHOD_START> protected void void ( CacheOperationInvocationContext < CacheRemoveAllOperation > org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation> ) { Cache org.springframework.cache.jcache.interceptor.Cache = resolveCache ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation> ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.cache.jcache.interceptor.Cache . getName ( ) + STRING + org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation> . getOperation ( ) ) ; } doClear ( org.springframework.cache.jcache.interceptor.Cache ) ; }  <METHOD_END>
