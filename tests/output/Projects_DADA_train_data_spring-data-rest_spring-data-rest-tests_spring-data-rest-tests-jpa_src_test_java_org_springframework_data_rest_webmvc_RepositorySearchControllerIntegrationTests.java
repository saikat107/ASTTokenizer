<METHOD_START> @ Before public void void ( ) { org.springframework.data.rest.webmvc.TestDataPopulator . populateRepositories ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation = getResourceInformation ( Person .class ) ; ResourceSupport org.springframework.data.rest.webmvc.ResourceSupport = org.springframework.data.rest.webmvc.RepositorySearchController . listSearches ( org.springframework.data.rest.webmvc.RootResourceInformation ) ; ResourceTester org.springframework.data.rest.webmvc.ResourceTester = ResourceTester . of ( org.springframework.data.rest.webmvc.ResourceSupport ) ; org.springframework.data.rest.webmvc.ResourceTester . assertNumberOfLinks ( NUMBER ) ; org.springframework.data.rest.webmvc.ResourceTester . assertHasLinkEndingWith ( STRING , STRING ) ; org.springframework.data.rest.webmvc.ResourceTester . assertHasLinkEndingWith ( STRING , STRING ) ; org.springframework.data.rest.webmvc.ResourceTester . assertHasLinkEndingWith ( STRING , STRING ) ; org.springframework.data.rest.webmvc.ResourceTester . assertHasLinkEndingWith ( STRING , STRING ) ; org.springframework.data.rest.webmvc.ResourceTester . assertHasLinkEndingWith ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ResourceNotFoundException .class ) public void void ( ) { org.springframework.data.rest.webmvc.RepositorySearchController . listSearches ( getResourceInformation ( CreditCard .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ResourceNotFoundException .class ) public void void ( ) { org.springframework.data.rest.webmvc.RepositorySearchController . listSearches ( getResourceInformation ( Author .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation = getResourceInformation ( Person .class ) ; MultiValueMap < java.lang.String , java.lang.Object > org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap < java.lang.String , java.lang.Object > ( NUMBER ) ; org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; ResponseEntity < ? > org.springframework.data.rest.webmvc.ResponseEntity<?> = org.springframework.data.rest.webmvc.RepositorySearchController . executeSearch ( org.springframework.data.rest.webmvc.RootResourceInformation , org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> , STRING , org.springframework.data.rest.webmvc.DefaultedPageable , Sort . unsorted ( ) , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler , new HttpHeaders ( ) ) ; ResourceTester org.springframework.data.rest.webmvc.ResourceTester = ResourceTester . of ( org.springframework.data.rest.webmvc.ResponseEntity<> . getBody ( ) ) ; PagedResources < java.lang.Object > org.springframework.data.rest.webmvc.PagedResources<java.lang.Object> = org.springframework.data.rest.webmvc.ResourceTester . assertIsPage ( ) ; assertThat ( org.springframework.data.rest.webmvc.PagedResources<java.lang.Object> . getContent ( ) ) . hasSize ( NUMBER ) ; ResourceMetadata org.springframework.data.rest.webmvc.ResourceMetadata = getMetadata ( Person .class ) ; org.springframework.data.rest.webmvc.ResourceTester . withContentResource ( new HasSelfLink ( BASE . slash ( org.springframework.data.rest.webmvc.ResourceMetadata . getPath ( ) ) . slash ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ResourceNotFoundException .class ) public void void ( ) { org.springframework.data.rest.webmvc.RepositorySearchController . headForSearches ( getResourceInformation ( Author .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ResourceNotFoundException .class ) public void void ( ) { org.springframework.data.rest.webmvc.RepositorySearchController . headForSearches ( getResourceInformation ( CreditCard .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.webmvc.RepositorySearchController . headForSearches ( getResourceInformation ( Person .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.webmvc.RepositorySearchController . headForSearch ( getResourceInformation ( Person .class ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ResourceNotFoundException .class ) public void void ( ) { org.springframework.data.rest.webmvc.RepositorySearchController . headForSearch ( getResourceInformation ( Person .class ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertAllowHeaders ( org.springframework.data.rest.webmvc.RepositorySearchController . optionsForSearches ( getResourceInformation ( Person .class ) ) , HttpMethod . GET ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ResourceNotFoundException .class ) public void void ( ) { org.springframework.data.rest.webmvc.RepositorySearchController . optionsForSearches ( getResourceInformation ( Address .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation = getResourceInformation ( Person .class ) ; HttpEntity < java.lang.Object > org.springframework.data.rest.webmvc.HttpEntity<java.lang.Object> = org.springframework.data.rest.webmvc.RepositorySearchController . optionsForSearch ( org.springframework.data.rest.webmvc.RootResourceInformation , STRING ) ; assertAllowHeaders ( org.springframework.data.rest.webmvc.HttpEntity<java.lang.Object> , HttpMethod . GET ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap < java.lang.String , java.lang.Object > ( NUMBER ) ; org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation = getResourceInformation ( Book .class ) ; ResponseEntity < ? > org.springframework.data.rest.webmvc.ResponseEntity<?> = org.springframework.data.rest.webmvc.RepositorySearchController . executeSearch ( org.springframework.data.rest.webmvc.RootResourceInformation , org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> , STRING , org.springframework.data.rest.webmvc.DefaultedPageable , Sort . unsorted ( ) , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler , new HttpHeaders ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.ResponseEntity<> . getBody ( ) ) . isInstanceOf ( Resources .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositorySearchesResource org.springframework.data.rest.webmvc.RepositorySearchesResource = org.springframework.data.rest.webmvc.RepositorySearchController . listSearches ( getResourceInformation ( Person .class ) ) ; assertThat ( org.springframework.data.rest.webmvc.RepositorySearchesResource . getDomainType ( ) ) . isAssignableFrom ( Person .class ) ; }  <METHOD_END>
