<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.integration.http.config.ConfigurableListableBeanFactory ) throws org.springframework.integration.http.config.BeansException { if ( org.springframework.integration.http.config.ConfigurableListableBeanFactory instanceof BeanDefinitionRegistry ) { this . void ( ( BeanDefinitionRegistry ) org.springframework.integration.http.config.ConfigurableListableBeanFactory ) ; } else { org.springframework.integration.http.config.Log . warn ( STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.http.config.BeanDefinitionRegistry ) { if ( HttpContextUtils . SERVLET_PRESENT && ! org.springframework.integration.http.config.BeanDefinitionRegistry . containsBeanDefinition ( HttpContextUtils . HANDLER_MAPPING_BEAN_NAME ) ) { BeanDefinitionBuilder org.springframework.integration.http.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( IntegrationRequestMappingHandlerMapping .class ) ; org.springframework.integration.http.config.BeanDefinitionBuilder . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.integration.http.config.BeanDefinitionBuilder . addPropertyValue ( IntegrationNamespaceUtils . ORDER , NUMBER ) ; org.springframework.integration.http.config.BeanDefinitionRegistry . registerBeanDefinition ( HttpContextUtils . HANDLER_MAPPING_BEAN_NAME , org.springframework.integration.http.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } }  <METHOD_END>
