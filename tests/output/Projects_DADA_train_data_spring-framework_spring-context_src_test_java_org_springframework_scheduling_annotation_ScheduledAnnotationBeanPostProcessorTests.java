<METHOD_START> @ After public void void ( ) { org.springframework.scheduling.annotation.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.FixedDelayTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.annotation.IntervalTask> = ( java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.IntervalTask> . size ( ) ) ; IntervalTask org.springframework.scheduling.annotation.IntervalTask = java.util.List<org.springframework.scheduling.annotation.IntervalTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.IntervalTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInitialDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.FixedRateTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.annotation.IntervalTask> = ( java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.IntervalTask> . size ( ) ) ; IntervalTask org.springframework.scheduling.annotation.IntervalTask = java.util.List<org.springframework.scheduling.annotation.IntervalTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.IntervalTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInitialDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.FixedRateWithInitialDelayTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.annotation.IntervalTask> = ( java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.IntervalTask> . size ( ) ) ; IntervalTask org.springframework.scheduling.annotation.IntervalTask = java.util.List<org.springframework.scheduling.annotation.IntervalTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.IntervalTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInitialDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean .class ) ; void ( org.springframework.scheduling.annotation.StaticApplicationContext , org.springframework.scheduling.annotation.BeanDefinition , org.springframework.scheduling.annotation.BeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.SeveralFixedRatesWithSchedulesContainerAnnotationTestBean .class ) ; void ( org.springframework.scheduling.annotation.StaticApplicationContext , org.springframework.scheduling.annotation.BeanDefinition , org.springframework.scheduling.annotation.BeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.FixedRatesSubBean .class ) ; void ( org.springframework.scheduling.annotation.StaticApplicationContext , org.springframework.scheduling.annotation.BeanDefinition , org.springframework.scheduling.annotation.BeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.FixedRatesDefaultBean .class ) ; void ( org.springframework.scheduling.annotation.StaticApplicationContext , org.springframework.scheduling.annotation.BeanDefinition , org.springframework.scheduling.annotation.BeanDefinition ) ; }  <METHOD_END>
<METHOD_START> private void void ( StaticApplicationContext org.springframework.scheduling.annotation.StaticApplicationContext , BeanDefinition org.springframework.scheduling.annotation.BeanDefinition , BeanDefinition org.springframework.scheduling.annotation.BeanDefinition ) { org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.annotation.IntervalTask> = ( java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.IntervalTask> . size ( ) ) ; IntervalTask org.springframework.scheduling.annotation.IntervalTask = java.util.List<org.springframework.scheduling.annotation.IntervalTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.IntervalTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInitialDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInterval ( ) ) ; IntervalTask org.springframework.scheduling.annotation.IntervalTask = java.util.List<org.springframework.scheduling.annotation.IntervalTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.IntervalTask . getRunnable ( ) ; java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInitialDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { Assume . group ( TestGroup . LONG_RUNNING ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.CronTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > java.util.List<org.springframework.scheduling.annotation.CronTask> = ( java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.CronTask> . size ( ) ) ; CronTask org.springframework.scheduling.annotation.CronTask = java.util.List<org.springframework.scheduling.annotation.CronTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.CronTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.scheduling.annotation.CronTask . getExpression ( ) ) ; java.lang.Thread . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { Assume . group ( TestGroup . LONG_RUNNING ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.CronWithTimezoneTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > java.util.List<org.springframework.scheduling.annotation.CronTask> = ( java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.CronTask> . size ( ) ) ; CronTask org.springframework.scheduling.annotation.CronTask = java.util.List<org.springframework.scheduling.annotation.CronTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.CronTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.scheduling.annotation.CronTask . getExpression ( ) ) ; Trigger org.springframework.scheduling.annotation.Trigger = org.springframework.scheduling.annotation.CronTask . getTrigger ( ) ; assertNotNull ( org.springframework.scheduling.annotation.Trigger ) ; assertTrue ( org.springframework.scheduling.annotation.Trigger instanceof CronTrigger ) ; CronTrigger org.springframework.scheduling.annotation.CronTrigger = ( CronTrigger ) org.springframework.scheduling.annotation.Trigger ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar . void ( ) ; java.util.Calendar . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; java.util.Date java.util.Date = java.util.Calendar . java.util.Date ( ) ; java.util.Date java.util.Date = java.util.Calendar . java.util.Date ( ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Date java.util.Date = java.util.Calendar . java.util.Date ( ) ; TriggerContext org.springframework.scheduling.annotation.TriggerContext = new SimpleTriggerContext ( java.util.Date , java.util.Date , java.util.Date ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Date java.util.Date = org.springframework.scheduling.annotation.CronTrigger . nextExecutionTime ( org.springframework.scheduling.annotation.TriggerContext ) ; assertEquals ( java.util.Calendar . java.util.Date ( ) , java.util.Date ) ; java.lang.Thread . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) java.lang.InterruptedException { Assume . group ( TestGroup . LONG_RUNNING ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.CronWithInvalidTimezoneTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Thread . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) java.lang.InterruptedException { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( MethodValidationPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.CronTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.MetaAnnotationFixedRateTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.annotation.IntervalTask> = ( java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.IntervalTask> . size ( ) ) ; IntervalTask org.springframework.scheduling.annotation.IntervalTask = java.util.List<org.springframework.scheduling.annotation.IntervalTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.IntervalTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.ComposedAnnotationFixedRateTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.annotation.IntervalTask> = ( java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.IntervalTask> . size ( ) ) ; IntervalTask org.springframework.scheduling.annotation.IntervalTask = java.util.List<org.springframework.scheduling.annotation.IntervalTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.IntervalTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInterval ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInitialDelay ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.MetaAnnotationCronTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > java.util.List<org.springframework.scheduling.annotation.CronTask> = ( java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.CronTask> . size ( ) ) ; CronTask org.springframework.scheduling.annotation.CronTask = java.util.List<org.springframework.scheduling.annotation.CronTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.CronTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.scheduling.annotation.CronTask . getExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( PropertyPlaceholderConfigurer .class ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.String ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . addPropertyValue ( STRING , java.util.Properties ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.PropertyPlaceholderWithCronTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > java.util.List<org.springframework.scheduling.annotation.CronTask> = ( java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.CronTask> . size ( ) ) ; CronTask org.springframework.scheduling.annotation.CronTask = java.util.List<org.springframework.scheduling.annotation.CronTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.CronTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( java.lang.String , org.springframework.scheduling.annotation.CronTask . getExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( PropertyPlaceholderConfigurer .class ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . addPropertyValue ( STRING , java.util.Properties ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.PropertyPlaceholderWithFixedDelayTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.annotation.IntervalTask> = ( java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.IntervalTask> . size ( ) ) ; IntervalTask org.springframework.scheduling.annotation.IntervalTask = java.util.List<org.springframework.scheduling.annotation.IntervalTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.IntervalTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInitialDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( PropertyPlaceholderConfigurer .class ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . addPropertyValue ( STRING , java.util.Properties ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.PropertyPlaceholderWithFixedRateTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.annotation.IntervalTask> = ( java.util.List<org.springframework.scheduling.annotation.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.IntervalTask> . size ( ) ) ; IntervalTask org.springframework.scheduling.annotation.IntervalTask = java.util.List<org.springframework.scheduling.annotation.IntervalTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.IntervalTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInitialDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.scheduling.annotation.IntervalTask . getInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.ExpressionWithCronTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; org.springframework.scheduling.annotation.StaticApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > java.util.List<org.springframework.scheduling.annotation.CronTask> = ( java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.CronTask> . size ( ) ) ; CronTask org.springframework.scheduling.annotation.CronTask = java.util.List<org.springframework.scheduling.annotation.CronTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.CronTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( java.lang.String , org.springframework.scheduling.annotation.CronTask . getExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( PropertyPlaceholderConfigurer .class ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.String ) ; org.springframework.scheduling.annotation.BeanDefinition . getPropertyValues ( ) . addPropertyValue ( STRING , java.util.Properties ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.PropertyPlaceholderMetaAnnotationTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > java.util.List<org.springframework.scheduling.annotation.CronTask> = ( java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.CronTask> . size ( ) ) ; CronTask org.springframework.scheduling.annotation.CronTask = java.util.List<org.springframework.scheduling.annotation.CronTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.CronTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( java.lang.String , org.springframework.scheduling.annotation.CronTask . getExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.NonVoidReturnTypeTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.StaticApplicationContext . getBean ( STRING ) ; ScheduledTaskRegistrar org.springframework.scheduling.annotation.ScheduledTaskRegistrar = ( ScheduledTaskRegistrar ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > java.util.List<org.springframework.scheduling.annotation.CronTask> = ( java.util.List<org.springframework.scheduling.annotation.CronTask> < CronTask > ) new DirectFieldAccessor ( org.springframework.scheduling.annotation.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.annotation.CronTask> . size ( ) ) ; CronTask org.springframework.scheduling.annotation.CronTask = java.util.List<org.springframework.scheduling.annotation.CronTask> . get ( NUMBER ) ; ScheduledMethodRunnable org.springframework.scheduling.annotation.ScheduledMethodRunnable = ( ScheduledMethodRunnable ) org.springframework.scheduling.annotation.CronTask . getRunnable ( ) ; java.lang.Object java.lang.Object = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.scheduling.annotation.ScheduledMethodRunnable . getMethod ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.scheduling.annotation.CronTask . getExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.EmptyAnnotationTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) java.lang.Throwable { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.InvalidCronTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) { BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( ScheduledAnnotationBeanPostProcessor .class ) ; BeanDefinition org.springframework.scheduling.annotation.BeanDefinition = new RootBeanDefinition ( org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.NonEmptyParamListTestBean .class ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.annotation.BeanDefinition ) ; org.springframework.scheduling.annotation.StaticApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedDelay = NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedRate = NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedRate = NUMBER , initialDelay = NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Schedules ( { @ Scheduled ( fixedRate = NUMBER ) , @ Scheduled ( fixedRate = NUMBER , initialDelay = NUMBER ) } ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedRate = NUMBER ) @ Scheduled ( fixedRate = NUMBER , initialDelay = NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedRate = NUMBER ) @ Scheduled ( fixedRate = NUMBER , initialDelay = NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedRate = NUMBER ) @ Scheduled ( fixedRate = NUMBER , initialDelay = NUMBER ) default void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( cron = STRING ) private void void ( ) java.io.IOException { throw new java.io.IOException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Scheduled ( cron = STRING , zone = STRING ) protected void void ( ) java.io.IOException { throw new java.io.IOException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Scheduled ( cron = STRING , zone = STRING ) public void void ( ) java.io.IOException { throw new java.io.IOException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Scheduled ( cron = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Scheduled public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( cron = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedRate = NUMBER ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.EveryFiveSeconds public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.WaitASec ( long = NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.Hourly public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( cron = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedDelayString = STRING , initialDelayString = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedRateString = STRING , initialDelayString = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Scheduled ( cron = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessorTests.BusinessHours public void void ( ) {		}  <METHOD_END>
