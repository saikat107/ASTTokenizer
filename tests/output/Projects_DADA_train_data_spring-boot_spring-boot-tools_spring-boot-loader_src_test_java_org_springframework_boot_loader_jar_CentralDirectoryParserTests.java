<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.io.File = this . org.springframework.boot.loader.jar.TemporaryFolder . newFile ( ) ; TestJarCreator . createTestJar ( this . java.io.File ) ; this . org.springframework.boot.loader.jar.RandomAccessData = new RandomAccessDataFile ( this . java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.loader.jar.CentralDirectoryParserTests.MockCentralDirectoryVisitor org.springframework.boot.loader.jar.CentralDirectoryParserTests.MockCentralDirectoryVisitor = new org.springframework.boot.loader.jar.CentralDirectoryParserTests.MockCentralDirectoryVisitor ( ) ; CentralDirectoryParser org.springframework.boot.loader.jar.CentralDirectoryParser = new CentralDirectoryParser ( ) ; org.springframework.boot.loader.jar.CentralDirectoryParser . addVisitor ( org.springframework.boot.loader.jar.CentralDirectoryParserTests.MockCentralDirectoryVisitor ) ; org.springframework.boot.loader.jar.CentralDirectoryParser . parse ( this . org.springframework.boot.loader.jar.RandomAccessData , false ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.boot.loader.jar.CentralDirectoryParserTests.MockCentralDirectoryVisitor . java.util.List<java.lang.String> ( ) ; assertThat ( java.util.List<java.lang.String> ) . startsWith ( STRING ) . endsWith ( STRING ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.loader.jar.CentralDirectoryParserTests.Collector org.springframework.boot.loader.jar.CentralDirectoryParserTests.Collector = new org.springframework.boot.loader.jar.CentralDirectoryParserTests.Collector ( ) ; CentralDirectoryParser org.springframework.boot.loader.jar.CentralDirectoryParser = new CentralDirectoryParser ( ) ; org.springframework.boot.loader.jar.CentralDirectoryParser . addVisitor ( org.springframework.boot.loader.jar.CentralDirectoryParserTests.Collector ) ; org.springframework.boot.loader.jar.CentralDirectoryParser . parse ( this . org.springframework.boot.loader.jar.RandomAccessData , false ) ; java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> < CentralDirectoryFileHeader > java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> = org.springframework.boot.loader.jar.CentralDirectoryParserTests.Collector . java.util.List<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> ( ) . iterator ( ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . next ( ) . getName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . next ( ) . getName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . next ( ) . getName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . next ( ) . getName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . next ( ) . getName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . next ( ) . getName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . next ( ) . getName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . next ( ) . getName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . next ( ) . getName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . next ( ) . getName ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . hasNext ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CentralDirectoryEndRecord org.springframework.boot.loader.jar.CentralDirectoryEndRecord , RandomAccessData org.springframework.boot.loader.jar.RandomAccessData ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CentralDirectoryFileHeader org.springframework.boot.loader.jar.CentralDirectoryFileHeader , int int ) { this . java.util.List<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> . add ( org.springframework.boot.loader.jar.CentralDirectoryFileHeader . clone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> < CentralDirectoryFileHeader > java.util.List<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> ( ) { return this . java.util.List<org.springframework.boot.loader.jar.CentralDirectoryFileHeader> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CentralDirectoryEndRecord org.springframework.boot.loader.jar.CentralDirectoryEndRecord , RandomAccessData org.springframework.boot.loader.jar.RandomAccessData ) { this . java.util.List<java.lang.String> . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CentralDirectoryFileHeader org.springframework.boot.loader.jar.CentralDirectoryFileHeader , int int ) { this . java.util.List<java.lang.String> . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.List<java.lang.String> . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
