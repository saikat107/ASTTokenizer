<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Number java.lang.Number , java.util.Locale java.util.Locale ) { return java.text.NumberFormat ( java.util.Locale ) . java.lang.String ( java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Number java.lang.Number ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { java.text.NumberFormat java.text.NumberFormat = java.text.NumberFormat ( java.util.Locale ) ; java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition ( NUMBER ) ; java.lang.Number java.lang.Number = java.text.NumberFormat . java.lang.Number ( java.lang.String , java.text.ParsePosition ) ; if ( java.text.ParsePosition . int ( ) != - NUMBER ) { throw new java.text.ParseException ( java.lang.String , java.text.ParsePosition . int ( ) ) ; } if ( ! this . boolean ) { if ( java.lang.String . int ( ) != java.text.ParsePosition . int ( ) ) { throw new java.text.ParseException ( java.lang.String , java.text.ParsePosition . int ( ) ) ; } } return java.lang.Number ; }  <METHOD_END>
<METHOD_START> protected abstract java.text.NumberFormat java.text.NumberFormat ( java.util.Locale java.util.Locale );  <METHOD_END>
