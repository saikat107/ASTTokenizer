<METHOD_START> @ Before public void void ( ) { StaticFields . reset ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; setField ( ( java.lang.Object ) null , STRING , new java.lang.Long ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; getField ( ( java.lang.Object ) null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; setField ( ( java.lang.Class<?> < ? > ) null , STRING , new java.lang.Long ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; getField ( ( java.lang.Class<?> < ? > ) null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; setField ( org.springframework.test.util.Person , null , new java.lang.Long ( NUMBER ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; setField ( org.springframework.test.util.Person , STRING , new java.lang.Long ( NUMBER ) , long .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; setField ( org.springframework.test.util.Person , STRING , new java.lang.Long ( NUMBER ) , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( this . org.springframework.test.util.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProxyFactory org.springframework.test.util.ProxyFactory = new ProxyFactory ( this . org.springframework.test.util.Person ) ; org.springframework.test.util.ProxyFactory . addInterface ( Person .class ) ; Person org.springframework.test.util.Person = ( Person ) org.springframework.test.util.ProxyFactory . getProxy ( ) ; assertTrue ( STRING , AopUtils . isJdkDynamicProxy ( org.springframework.test.util.Person ) ) ; void ( org.springframework.test.util.Person , this . org.springframework.test.util.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProxyFactory org.springframework.test.util.ProxyFactory = new ProxyFactory ( this . org.springframework.test.util.Person ) ; org.springframework.test.util.ProxyFactory . setProxyTargetClass ( true ) ; Person org.springframework.test.util.Person = ( Person ) org.springframework.test.util.ProxyFactory . getProxy ( ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( org.springframework.test.util.Person ) ) ; void ( org.springframework.test.util.Person , this . org.springframework.test.util.Person ) ; }  <METHOD_END>
<METHOD_START> private static void void ( Person org.springframework.test.util.Person ) { setField ( org.springframework.test.util.Person , STRING , new java.lang.Long ( NUMBER ) , long .class ) ; setField ( org.springframework.test.util.Person , STRING , STRING ) ; setField ( org.springframework.test.util.Person , STRING , new java.lang.Integer ( NUMBER ) ) ; setField ( org.springframework.test.util.Person , STRING , STRING , java.lang.String .class ) ; setField ( org.springframework.test.util.Person , STRING , java.lang.Boolean . java.lang.Boolean ) ; setField ( org.springframework.test.util.Person , STRING , java.lang.Float , java.lang.Number .class ) ; assertEquals ( new java.lang.Long ( NUMBER ) , getField ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( STRING , getField ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , getField ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( STRING , getField ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , getField ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( java.lang.Float , getField ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.test.util.Person . getId ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.util.Person . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.test.util.Person . getAge ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.util.Person . getEyeColor ( ) ) ; assertEquals ( STRING , true , org.springframework.test.util.Person . likesPets ( ) ) ; assertEquals ( STRING , java.lang.Float , org.springframework.test.util.Person . getFavoriteNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( Person org.springframework.test.util.Person , Person org.springframework.test.util.Person ) { void ( org.springframework.test.util.Person ) ; assertEquals ( STRING , NUMBER , org.springframework.test.util.Person . getId ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.util.Person . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.test.util.Person . getAge ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.util.Person . getEyeColor ( ) ) ; assertEquals ( STRING , true , org.springframework.test.util.Person . likesPets ( ) ) ; assertEquals ( STRING , java.lang.Float , org.springframework.test.util.Person . getFavoriteNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { setField ( org.springframework.test.util.Person , STRING , STRING ) ; setField ( org.springframework.test.util.Person , STRING , STRING , java.lang.String .class ) ; setField ( org.springframework.test.util.Person , STRING , java.lang.Float , java.lang.Number .class ) ; assertNotNull ( org.springframework.test.util.Person . getName ( ) ) ; assertNotNull ( org.springframework.test.util.Person . getEyeColor ( ) ) ; assertNotNull ( org.springframework.test.util.Person . getFavoriteNumber ( ) ) ; setField ( org.springframework.test.util.Person , STRING , null , java.lang.String .class ) ; setField ( org.springframework.test.util.Person , STRING , null , java.lang.String .class ) ; setField ( org.springframework.test.util.Person , STRING , null , java.lang.Number .class ) ; assertNull ( STRING , org.springframework.test.util.Person . getName ( ) ) ; assertNull ( STRING , org.springframework.test.util.Person . getEyeColor ( ) ) ; assertNull ( STRING , org.springframework.test.util.Person . getFavoriteNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { setField ( org.springframework.test.util.Person , STRING , null , long .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { setField ( org.springframework.test.util.Person , STRING , null , int .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { setField ( org.springframework.test.util.Person , STRING , null , boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { setField ( StaticFields .class , STRING , STRING ) ; setField ( StaticFields .class , STRING , STRING ) ; assertEquals ( STRING , STRING , StaticFields . publicField ) ; assertEquals ( STRING , STRING , StaticFields . getPrivateField ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { setField ( StaticFields .class , STRING , STRING , java.lang.String .class ) ; setField ( StaticFields .class , STRING , STRING , java.lang.String .class ) ; assertEquals ( STRING , STRING , StaticFields . publicField ) ; assertEquals ( STRING , STRING , StaticFields . getPrivateField ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticFields org.springframework.test.util.StaticFields = new StaticFields ( ) ; setField ( org.springframework.test.util.StaticFields , null , STRING , STRING , null ) ; setField ( org.springframework.test.util.StaticFields , null , STRING , STRING , null ) ; assertEquals ( STRING , STRING , StaticFields . publicField ) ; assertEquals ( STRING , STRING , StaticFields . getPrivateField ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , STRING , getField ( StaticFields .class , STRING ) ) ; assertEquals ( STRING , STRING , getField ( StaticFields .class , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticFields org.springframework.test.util.StaticFields = new StaticFields ( ) ; assertEquals ( STRING , STRING , getField ( org.springframework.test.util.StaticFields , STRING ) ) ; assertEquals ( STRING , STRING , getField ( org.springframework.test.util.StaticFields , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { invokeSetterMethod ( org.springframework.test.util.Person , STRING , new java.lang.Long ( NUMBER ) , long .class ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , STRING , java.lang.String .class ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , new java.lang.Integer ( NUMBER ) , int .class ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , STRING , java.lang.String .class ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , java.lang.Boolean . java.lang.Boolean , boolean .class ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , new java.lang.Integer ( NUMBER ) , java.lang.Number .class ) ; assertEquals ( STRING , NUMBER , org.springframework.test.util.Person . getId ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.util.Person . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.test.util.Person . getAge ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.util.Person . getEyeColor ( ) ) ; assertEquals ( STRING , false , org.springframework.test.util.Person . likesPets ( ) ) ; assertEquals ( STRING , new java.lang.Integer ( NUMBER ) , org.springframework.test.util.Person . getFavoriteNumber ( ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( STRING , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( STRING , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { invokeSetterMethod ( org.springframework.test.util.Person , STRING , new java.lang.Long ( NUMBER ) , long .class ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , STRING ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , new java.lang.Integer ( NUMBER ) ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , STRING , java.lang.String .class ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , java.lang.Boolean . java.lang.Boolean ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , java.lang.Float , java.lang.Number .class ) ; assertEquals ( STRING , NUMBER , org.springframework.test.util.Person . getId ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.util.Person . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.test.util.Person . getAge ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.util.Person . getEyeColor ( ) ) ; assertEquals ( STRING , true , org.springframework.test.util.Person . likesPets ( ) ) ; assertEquals ( STRING , java.lang.Float , org.springframework.test.util.Person . getFavoriteNumber ( ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( STRING , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( STRING , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; assertEquals ( java.lang.Float , invokeGetterMethod ( org.springframework.test.util.Person , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { invokeSetterMethod ( org.springframework.test.util.Person , STRING , null , java.lang.String .class ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , null , java.lang.String .class ) ; invokeSetterMethod ( org.springframework.test.util.Person , STRING , null , java.lang.Number .class ) ; assertNull ( STRING , org.springframework.test.util.Person . getName ( ) ) ; assertNull ( STRING , org.springframework.test.util.Person . getEyeColor ( ) ) ; assertNull ( STRING , org.springframework.test.util.Person . getFavoriteNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { invokeSetterMethod ( org.springframework.test.util.Person , STRING , null , long .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { invokeSetterMethod ( org.springframework.test.util.Person , STRING , null , int .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { invokeSetterMethod ( org.springframework.test.util.Person , STRING , null , boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = invokeMethod ( org.springframework.test.util.Component , STRING , NUMBER , NUMBER ) ; assertEquals ( STRING , NUMBER , java.lang.Integer . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { java.lang.Integer java.lang.Integer = invokeMethod ( org.springframework.test.util.Component , STRING , NUMBER , NUMBER , NUMBER , NUMBER ) ; assertEquals ( STRING , NUMBER , java.lang.Integer . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = invokeMethod ( org.springframework.test.util.Component , STRING , new int [] { NUMBER , NUMBER , NUMBER , NUMBER } ) ; assertEquals ( STRING , NUMBER , java.lang.Integer . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( STRING , org.springframework.test.util.Component . getNumber ( ) ) ; assertNull ( STRING , org.springframework.test.util.Component . getText ( ) ) ; invokeMethod ( org.springframework.test.util.Component , STRING , new java.lang.Integer ( NUMBER ) , STRING ) ; assertEquals ( STRING , new java.lang.Integer ( NUMBER ) , org.springframework.test.util.Component . getNumber ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.util.Component . getText ( ) ) ; invokeMethod ( org.springframework.test.util.Component , STRING ) ; invokeMethod ( org.springframework.test.util.Component , STRING ) ; assertNull ( STRING , org.springframework.test.util.Component . getNumber ( ) ) ; assertNull ( STRING , org.springframework.test.util.Component . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( equalTo ( STRING ) ) ; invokeMethod ( org.springframework.test.util.Component , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; invokeMethod ( org.springframework.test.util.Component , STRING , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; invokeMethod ( org.springframework.test.util.Component , STRING , new java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; invokeMethod ( org.springframework.test.util.Component , STRING , new java.lang.Integer ( NUMBER ) , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = getField ( org.springframework.test.util.LegacyEntity , STRING ) ; assertNotNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; setField ( org.springframework.test.util.LegacyEntity , STRING , java.lang.String , java.lang.Object .class ) ; assertTrue ( org.springframework.test.util.LegacyEntity . toString ( ) . contains ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { invokeMethod ( org.springframework.test.util.LegacyEntity , STRING , new java.lang.Integer ( NUMBER ) , STRING ) ; assertEquals ( STRING , new java.lang.Integer ( NUMBER ) , org.springframework.test.util.LegacyEntity . getNumber ( ) ) ; assertEquals ( STRING , STRING , org.springframework.test.util.LegacyEntity . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = invokeGetterMethod ( org.springframework.test.util.LegacyEntity , STRING ) ; assertNotNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; invokeSetterMethod ( org.springframework.test.util.LegacyEntity , STRING , java.lang.String ) ; assertTrue ( org.springframework.test.util.LegacyEntity . toString ( ) . contains ( java.lang.String ) ) ; }  <METHOD_END>
