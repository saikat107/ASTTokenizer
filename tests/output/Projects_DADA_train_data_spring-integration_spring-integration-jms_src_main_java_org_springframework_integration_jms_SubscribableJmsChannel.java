<METHOD_START> public void ( AbstractMessageListenerContainer org.springframework.integration.jms.AbstractMessageListenerContainer , JmsTemplate org.springframework.integration.jms.JmsTemplate ) { super( org.springframework.integration.jms.JmsTemplate ); Assert . notNull ( org.springframework.integration.jms.AbstractMessageListenerContainer , STRING ) ; this . org.springframework.integration.jms.AbstractMessageListenerContainer = org.springframework.integration.jms.AbstractMessageListenerContainer ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageHandler org.springframework.integration.jms.MessageHandler ) { Assert . state ( this . org.springframework.integration.jms.AbstractDispatcher != null , STRING ) ; return this . org.springframework.integration.jms.AbstractDispatcher . addHandler ( org.springframework.integration.jms.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageHandler org.springframework.integration.jms.MessageHandler ) { Assert . state ( this . org.springframework.integration.jms.AbstractDispatcher != null , STRING ) ; return this . org.springframework.integration.jms.AbstractDispatcher . removeHandler ( org.springframework.integration.jms.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . boolean ) { return; } super. onInit ( ) ; boolean boolean = this . org.springframework.integration.jms.AbstractMessageListenerContainer . isPubSubDomain ( ) ; this . void ( boolean ) ; MessageListener org.springframework.integration.jms.MessageListener = new org.springframework.integration.jms.SubscribableJmsChannel.DispatchingMessageListener ( this . getJmsTemplate ( ) , this . org.springframework.integration.jms.AbstractDispatcher , this , boolean , this . getMessageBuilderFactory ( ) ) ; this . org.springframework.integration.jms.AbstractMessageListenerContainer . setMessageListener ( org.springframework.integration.jms.MessageListener ) ; if ( ! this . org.springframework.integration.jms.AbstractMessageListenerContainer . isActive ( ) ) { this . org.springframework.integration.jms.AbstractMessageListenerContainer . afterPropertiesSet ( ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { if ( boolean ) { BroadcastingDispatcher org.springframework.integration.jms.BroadcastingDispatcher = new BroadcastingDispatcher ( true ) ; org.springframework.integration.jms.BroadcastingDispatcher . setBeanFactory ( this . getBeanFactory ( ) ) ; this . org.springframework.integration.jms.AbstractDispatcher = org.springframework.integration.jms.BroadcastingDispatcher ; } else { UnicastingDispatcher org.springframework.integration.jms.UnicastingDispatcher = new UnicastingDispatcher ( ) ; org.springframework.integration.jms.UnicastingDispatcher . setLoadBalancingStrategy ( new RoundRobinLoadBalancingStrategy ( ) ) ; this . org.springframework.integration.jms.AbstractDispatcher = org.springframework.integration.jms.UnicastingDispatcher ; } if ( this . java.lang.Integer == null ) { this . java.lang.Integer = this . getIntegrationProperty ( boolean ? IntegrationProperties . CHANNELS_MAX_BROADCAST_SUBSCRIBERS : IntegrationProperties . CHANNELS_MAX_UNICAST_SUBSCRIBERS , java.lang.Integer .class ) ; } this . org.springframework.integration.jms.AbstractDispatcher . setMaxSubscribers ( this . java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.integration.jms.AbstractMessageListenerContainer != null ) ? this . org.springframework.integration.jms.AbstractMessageListenerContainer . isAutoStartup ( ) : false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . org.springframework.integration.jms.AbstractMessageListenerContainer != null ) ? this . org.springframework.integration.jms.AbstractMessageListenerContainer . getPhase ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.integration.jms.AbstractMessageListenerContainer != null ) ? this . org.springframework.integration.jms.AbstractMessageListenerContainer . isRunning ( ) : false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.jms.AbstractMessageListenerContainer != null ) { this . org.springframework.integration.jms.AbstractMessageListenerContainer . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.jms.AbstractMessageListenerContainer != null ) { this . org.springframework.integration.jms.AbstractMessageListenerContainer . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { if ( this . org.springframework.integration.jms.AbstractMessageListenerContainer != null ) { this . org.springframework.integration.jms.AbstractMessageListenerContainer . stop ( java.lang.Runnable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . org.springframework.integration.jms.AbstractMessageListenerContainer != null ) { this . org.springframework.integration.jms.AbstractMessageListenerContainer . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> void ( JmsTemplate org.springframework.integration.jms.JmsTemplate , MessageDispatcher org.springframework.integration.jms.MessageDispatcher , org.springframework.integration.jms.SubscribableJmsChannel org.springframework.integration.jms.SubscribableJmsChannel , boolean boolean , MessageBuilderFactory org.springframework.integration.jms.MessageBuilderFactory ) { this . org.springframework.integration.jms.JmsTemplate = org.springframework.integration.jms.JmsTemplate ; this . org.springframework.integration.jms.MessageDispatcher = org.springframework.integration.jms.MessageDispatcher ; this . org.springframework.integration.jms.SubscribableJmsChannel = org.springframework.integration.jms.SubscribableJmsChannel ; this . boolean = boolean ; this . org.springframework.integration.jms.MessageBuilderFactory = org.springframework.integration.jms.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax . javax.jms . javax.jms javax.jms.Message ) { Message < ? > org.springframework.integration.jms.Message<?> = null ; try { java.lang.Object java.lang.Object = this . org.springframework.integration.jms.JmsTemplate . getMessageConverter ( ) . fromMessage ( javax.jms.Message ) ; if ( java.lang.Object != null ) { org.springframework.integration.jms.Message<?> = ( java.lang.Object instanceof Message < ? > ) ? ( Message < ? > ) java.lang.Object : this . org.springframework.integration.jms.MessageBuilderFactory . withPayload ( java.lang.Object ) . build ( ) ; this . org.springframework.integration.jms.MessageDispatcher . dispatch ( org.springframework.integration.jms.Message<> ) ; } else if ( this . org.springframework.integration.jms.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.jms.Log . warn ( STRING ) ; } } catch ( MessageDispatchingException org.springframework.integration.jms.MessageDispatchingException ) { java.lang.String java.lang.String = org.springframework.integration.jms.MessageDispatchingException . getMessage ( ) + STRING + this . org.springframework.integration.jms.SubscribableJmsChannel . getFullChannelName ( ) + STRING ; if ( this . boolean ) { if ( this . org.springframework.integration.jms.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.jms.Log . warn ( java.lang.String , org.springframework.integration.jms.MessageDispatchingException ) ; } } else { throw new MessageDeliveryException ( org.springframework.integration.jms.Message<> , java.lang.String , org.springframework.integration.jms.MessageDispatchingException ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
