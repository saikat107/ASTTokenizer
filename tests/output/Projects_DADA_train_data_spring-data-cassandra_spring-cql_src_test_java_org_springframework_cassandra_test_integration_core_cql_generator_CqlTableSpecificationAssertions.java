<METHOD_START> public static void void ( TableDescriptor org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor , java.lang.String java.lang.String , Session org.springframework.cassandra.test.integration.core.cql.generator.Session ) { TableMetadata org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata = org.springframework.cassandra.test.integration.core.cql.generator.Session . getCluster ( ) . getMetadata ( ) . getKeyspace ( java.lang.String . java.lang.String ( ) ) . getTable ( org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor . getName ( ) . getUnquoted ( ) ) ; assertThat ( org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor . getName ( ) . getUnquoted ( ) ) . isEqualTo ( org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata . getName ( ) ) ; void ( org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor , org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata ) ; void ( org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor , org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata ) ; void ( org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor . getColumns ( ) , org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata . getColumns ( ) ) ; void ( org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor . getOptions ( ) , org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata . getOptions ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( DropTableSpecification org.springframework.cassandra.test.integration.core.cql.generator.DropTableSpecification , java.lang.String java.lang.String , Session org.springframework.cassandra.test.integration.core.cql.generator.Session ) { TableMetadata org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata = org.springframework.cassandra.test.integration.core.cql.generator.Session . getCluster ( ) . getMetadata ( ) . getKeyspace ( java.lang.String . java.lang.String ( ) ) . getTable ( org.springframework.cassandra.test.integration.core.cql.generator.DropTableSpecification . getName ( ) . toCql ( ) ) ; assertThat ( org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( TableDescriptor org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor , TableMetadata org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata ) { void ( org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor . getPartitionKeyColumns ( ) , org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata . getPartitionKey ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( TableDescriptor org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor , TableMetadata org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata ) { void ( org.springframework.cassandra.test.integration.core.cql.generator.TableDescriptor . getPrimaryKeyColumns ( ) , org.springframework.cassandra.test.integration.core.cql.generator.TableMetadata . getPrimaryKey ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , TableOptionsMetadata org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata ) { for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { org.springframework.cassandra.test.integration.core.cql.generator.Logger . info ( java.lang.String + STRING + java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; TableOption org.springframework.cassandra.test.integration.core.cql.generator.TableOption = org.springframework.cassandra.test.integration.core.cql.generator.TableOption ( java.lang.String . java.lang.String ( ) ) ; if ( org.springframework.cassandra.test.integration.core.cql.generator.TableOption == null && java.lang.String . boolean ( TableOption . COMPACT_STORAGE . getName ( ) ) ) { continue; } void ( org.springframework.cassandra.test.integration.core.cql.generator.TableOption , java.lang.String , java.lang.Object , java.lang.Object ( org.springframework.cassandra.test.integration.core.cql.generator.TableOption , org.springframework.cassandra.test.integration.core.cql.generator.TableOption . getType ( ) , org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public static void void ( TableOption org.springframework.cassandra.test.integration.core.cql.generator.TableOption , java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( org.springframework.cassandra.test.integration.core.cql.generator.TableOption == null ) { java.lang.String . boolean ( java.lang.Object . java.lang.String ( ) ) ; } switch ( org.springframework.cassandra.test.integration.core.cql.generator.TableOption ) { case BLOOM_FILTER_FP_CHANCE : case READ_REPAIR_CHANCE : case DCLOCAL_READ_REPAIR_CHANCE : assertThat ( ( java.lang.Double ) java.lang.Object ) . isCloseTo ( ( java.lang.Double ) java.lang.Object , offset ( double ) ) ; return; case CACHING : void ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object , ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) java.lang.Object ) ; return; case COMPACTION : void ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object , ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) java.lang.Object ) ; return; case COMPRESSION : void ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object , ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) java.lang.Object ) ; return; } org.springframework.cassandra.test.integration.core.cql.generator.Logger . info ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.cassandra.test.integration.core.cql.generator.TableOption . quotesValue ( ) && ! ( java.lang.Object instanceof java.lang.CharSequence ) ? CqlStringUtils . singleQuote ( java.lang.Object ) : java.lang.Object ) . isEqualTo ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { }  <METHOD_END>
<METHOD_START> public static void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { }  <METHOD_END>
<METHOD_START> public static void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { }  <METHOD_END>
<METHOD_START> public static org.springframework.cassandra.test.integration.core.cql.generator.TableOption org.springframework.cassandra.test.integration.core.cql.generator.TableOption ( java.lang.String java.lang.String ) { try { return TableOption . valueOf ( java.lang.String ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( TableOption org.springframework.cassandra.test.integration.core.cql.generator.TableOption , java.lang.Class<?> < ? > java.lang.Class<?> , TableOptionsMetadata org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata ) { switch ( org.springframework.cassandra.test.integration.core.cql.generator.TableOption ) { case BLOOM_FILTER_FP_CHANCE : return ( T ) ( java.lang.Double ) org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata . getBloomFilterFalsePositiveChance ( ) ; case CACHING : return ( T ) org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata . getCaching ( ) ; case COMMENT : return ( T ) CqlStringUtils . singleQuote ( org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata . getComment ( ) ) ; case COMPACTION : return ( T ) org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata . getCompaction ( ) ; case COMPACT_STORAGE : throw new java.lang.Error ( ) ; case COMPRESSION : return ( T ) org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata . getCompression ( ) ; case DCLOCAL_READ_REPAIR_CHANCE : return ( T ) ( java.lang.Double ) org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata . getLocalReadRepairChance ( ) ; case GC_GRACE_SECONDS : return ( T ) new java.lang.Long ( org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata . getGcGraceInSeconds ( ) ) ; case READ_REPAIR_CHANCE : return ( T ) ( java.lang.Double ) org.springframework.cassandra.test.integration.core.cql.generator.TableOptionsMetadata . getReadRepairChance ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> public static void void ( java.util.List<org.springframework.cassandra.test.integration.core.cql.generator.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.cassandra.test.integration.core.cql.generator.ColumnSpecification> , java.util.List<org.springframework.cassandra.test.integration.core.cql.generator.ColumnMetadata> < ColumnMetadata > java.util.List<org.springframework.cassandra.test.integration.core.cql.generator.ColumnMetadata> ) { for ( int int = NUMBER ; int < java.util.List<org.springframework.cassandra.test.integration.core.cql.generator.ColumnSpecification> . size ( ) ; int ++ ) { ColumnSpecification org.springframework.cassandra.test.integration.core.cql.generator.ColumnSpecification = java.util.List<org.springframework.cassandra.test.integration.core.cql.generator.ColumnSpecification> . get ( int ) ; ColumnMetadata org.springframework.cassandra.test.integration.core.cql.generator.ColumnMetadata = java.util.List<org.springframework.cassandra.test.integration.core.cql.generator.ColumnMetadata> . get ( int ) ; void ( org.springframework.cassandra.test.integration.core.cql.generator.ColumnSpecification , org.springframework.cassandra.test.integration.core.cql.generator.ColumnMetadata ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( ColumnSpecification org.springframework.cassandra.test.integration.core.cql.generator.ColumnSpecification , ColumnMetadata org.springframework.cassandra.test.integration.core.cql.generator.ColumnMetadata ) { assertThat ( org.springframework.cassandra.test.integration.core.cql.generator.ColumnSpecification . getName ( ) . toCql ( ) ) . isEqualTo ( org.springframework.cassandra.test.integration.core.cql.generator.ColumnMetadata . getName ( ) ) ; assertThat ( org.springframework.cassandra.test.integration.core.cql.generator.ColumnSpecification . getType ( ) ) . isEqualTo ( org.springframework.cassandra.test.integration.core.cql.generator.ColumnMetadata . getType ( ) ) ; }  <METHOD_END>
