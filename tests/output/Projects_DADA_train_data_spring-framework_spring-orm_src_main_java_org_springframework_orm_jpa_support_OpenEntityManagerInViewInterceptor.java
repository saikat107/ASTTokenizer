<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.orm.jpa.support.WebRequest ) throws org.springframework.orm.jpa.support.DataAccessException { java.lang.String java.lang.String = java.lang.String ( ) ; WebAsyncManager org.springframework.orm.jpa.support.WebAsyncManager = WebAsyncUtils . getAsyncManager ( org.springframework.orm.jpa.support.WebRequest ) ; if ( org.springframework.orm.jpa.support.WebAsyncManager . hasConcurrentResult ( ) ) { if ( boolean ( org.springframework.orm.jpa.support.WebAsyncManager , java.lang.String ) ) { return; } } if ( TransactionSynchronizationManager . hasResource ( getEntityManagerFactory ( ) ) ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.orm.jpa.support.WebRequest . getAttribute ( java.lang.String , WebRequest . SCOPE_REQUEST ) ; int int = ( java.lang.Integer != null ? java.lang.Integer + NUMBER : NUMBER ) ; org.springframework.orm.jpa.support.WebRequest . setAttribute ( java.lang.String ( ) , int , WebRequest . SCOPE_REQUEST ) ; } else { logger . debug ( STRING ) ; try { EntityManager org.springframework.orm.jpa.support.EntityManager = createEntityManager ( ) ; EntityManagerHolder org.springframework.orm.jpa.support.EntityManagerHolder = new EntityManagerHolder ( org.springframework.orm.jpa.support.EntityManager ) ; TransactionSynchronizationManager . bindResource ( getEntityManagerFactory ( ) , org.springframework.orm.jpa.support.EntityManagerHolder ) ; AsyncRequestInterceptor org.springframework.orm.jpa.support.AsyncRequestInterceptor = new AsyncRequestInterceptor ( getEntityManagerFactory ( ) , org.springframework.orm.jpa.support.EntityManagerHolder ) ; org.springframework.orm.jpa.support.WebAsyncManager . registerCallableInterceptor ( java.lang.String , org.springframework.orm.jpa.support.AsyncRequestInterceptor ) ; org.springframework.orm.jpa.support.WebAsyncManager . registerDeferredResultInterceptor ( java.lang.String , org.springframework.orm.jpa.support.AsyncRequestInterceptor ) ; } catch ( PersistenceException org.springframework.orm.jpa.support.PersistenceException ) { throw new DataAccessResourceFailureException ( STRING , org.springframework.orm.jpa.support.PersistenceException ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.orm.jpa.support.WebRequest , ModelMap org.springframework.orm.jpa.support.ModelMap ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.orm.jpa.support.WebRequest , java.lang.Exception java.lang.Exception ) throws org.springframework.orm.jpa.support.DataAccessException { if ( ! boolean ( org.springframework.orm.jpa.support.WebRequest ) ) { EntityManagerHolder org.springframework.orm.jpa.support.EntityManagerHolder = ( EntityManagerHolder ) TransactionSynchronizationManager . unbindResource ( getEntityManagerFactory ( ) ) ; logger . debug ( STRING ) ; EntityManagerFactoryUtils . closeEntityManager ( org.springframework.orm.jpa.support.EntityManagerHolder . getEntityManager ( ) ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( WebRequest org.springframework.orm.jpa.support.WebRequest ) { java.lang.String java.lang.String = java.lang.String ( ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.orm.jpa.support.WebRequest . getAttribute ( java.lang.String , WebRequest . SCOPE_REQUEST ) ; if ( java.lang.Integer == null ) { return false ; } if ( java.lang.Integer > NUMBER ) { org.springframework.orm.jpa.support.WebRequest . setAttribute ( java.lang.String , java.lang.Integer - NUMBER , WebRequest . SCOPE_REQUEST ) ; } else { org.springframework.orm.jpa.support.WebRequest . removeAttribute ( java.lang.String , WebRequest . SCOPE_REQUEST ) ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.orm.jpa.support.WebRequest ) { if ( ! boolean ( org.springframework.orm.jpa.support.WebRequest ) ) { TransactionSynchronizationManager . unbindResource ( getEntityManagerFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return getEntityManagerFactory ( ) . toString ( ) + java.lang.String ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( WebAsyncManager org.springframework.orm.jpa.support.WebAsyncManager , java.lang.String java.lang.String ) { if ( org.springframework.orm.jpa.support.WebAsyncManager . getCallableInterceptor ( java.lang.String ) == null ) { return false ; } ( ( AsyncRequestInterceptor ) org.springframework.orm.jpa.support.WebAsyncManager . getCallableInterceptor ( java.lang.String ) ) . bindSession ( ) ; return true ; }  <METHOD_END>
