<METHOD_START> @ java.lang.Override public void void ( ContainerExtensionContext org.springframework.test.context.junit.jupiter.ContainerExtensionContext ) throws java.lang.Exception { org.springframework.test.context.junit.jupiter.TestContextManager ( org.springframework.test.context.junit.jupiter.ContainerExtensionContext ) . beforeTestClass ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContainerExtensionContext org.springframework.test.context.junit.jupiter.ContainerExtensionContext ) throws java.lang.Exception { try { org.springframework.test.context.junit.jupiter.TestContextManager ( org.springframework.test.context.junit.jupiter.ContainerExtensionContext ) . afterTestClass ( ) ; } finally { org.springframework.test.context.junit.jupiter.ContainerExtensionContext . getStore ( org.springframework.test.context.junit.jupiter.Namespace ) . remove ( org.springframework.test.context.junit.jupiter.ContainerExtensionContext . getTestClass ( ) . get ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , ExtensionContext org.springframework.test.context.junit.jupiter.ExtensionContext ) throws java.lang.Exception { org.springframework.test.context.junit.jupiter.TestContextManager ( org.springframework.test.context.junit.jupiter.ExtensionContext ) . prepareTestInstance ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestExtensionContext org.springframework.test.context.junit.jupiter.TestExtensionContext ) throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestInstance ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestMethod ( ) . get ( ) ; org.springframework.test.context.junit.jupiter.TestContextManager ( org.springframework.test.context.junit.jupiter.TestExtensionContext ) . beforeTestMethod ( java.lang.Object , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestExtensionContext org.springframework.test.context.junit.jupiter.TestExtensionContext ) throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestInstance ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestMethod ( ) . get ( ) ; org.springframework.test.context.junit.jupiter.TestContextManager ( org.springframework.test.context.junit.jupiter.TestExtensionContext ) . beforeTestExecution ( java.lang.Object , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestExtensionContext org.springframework.test.context.junit.jupiter.TestExtensionContext ) throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestInstance ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestMethod ( ) . get ( ) ; java.lang.Throwable java.lang.Throwable = org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestException ( ) . orElse ( null ) ; org.springframework.test.context.junit.jupiter.TestContextManager ( org.springframework.test.context.junit.jupiter.TestExtensionContext ) . afterTestExecution ( java.lang.Object , java.lang.reflect.Method , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestExtensionContext org.springframework.test.context.junit.jupiter.TestExtensionContext ) throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestInstance ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestMethod ( ) . get ( ) ; java.lang.Throwable java.lang.Throwable = org.springframework.test.context.junit.jupiter.TestExtensionContext . getTestException ( ) . orElse ( null ) ; org.springframework.test.context.junit.jupiter.TestContextManager ( org.springframework.test.context.junit.jupiter.TestExtensionContext ) . afterTestMethod ( java.lang.Object , java.lang.reflect.Method , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ParameterContext org.springframework.test.context.junit.jupiter.ParameterContext , ExtensionContext org.springframework.test.context.junit.jupiter.ExtensionContext ) { java.lang.reflect.Parameter java.lang.reflect.Parameter = org.springframework.test.context.junit.jupiter.ParameterContext . getParameter ( ) ; java.lang.reflect.Executable java.lang.reflect.Executable = java.lang.reflect.Parameter . java.lang.reflect.Executable ( ) ; return ( java.lang.reflect.Executable instanceof java.lang.reflect.Constructor && AnnotatedElementUtils . hasAnnotation ( java.lang.reflect.Executable , Autowired .class ) ) || ParameterAutowireUtils . isAutowirable ( java.lang.reflect.Parameter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ParameterContext org.springframework.test.context.junit.jupiter.ParameterContext , ExtensionContext org.springframework.test.context.junit.jupiter.ExtensionContext ) { java.lang.reflect.Parameter java.lang.reflect.Parameter = org.springframework.test.context.junit.jupiter.ParameterContext . getParameter ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.junit.jupiter.ExtensionContext . getTestClass ( ) . get ( ) ; ApplicationContext org.springframework.test.context.junit.jupiter.ApplicationContext = org.springframework.test.context.junit.jupiter.ApplicationContext ( org.springframework.test.context.junit.jupiter.ExtensionContext ) ; return ParameterAutowireUtils . resolveDependency ( java.lang.reflect.Parameter , java.lang.Class<> , org.springframework.test.context.junit.jupiter.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.test.context.junit.jupiter.ApplicationContext org.springframework.test.context.junit.jupiter.ApplicationContext ( ExtensionContext org.springframework.test.context.junit.jupiter.ExtensionContext ) { return org.springframework.test.context.junit.jupiter.TestContextManager ( org.springframework.test.context.junit.jupiter.ExtensionContext ) . getTestContext ( ) . getApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.test.context.junit.jupiter.TestContextManager org.springframework.test.context.junit.jupiter.TestContextManager ( ExtensionContext org.springframework.test.context.junit.jupiter.ExtensionContext ) { Assert . notNull ( org.springframework.test.context.junit.jupiter.ExtensionContext , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.junit.jupiter.ExtensionContext . getTestClass ( ) . get ( ) ; Store org.springframework.test.context.junit.jupiter.Store = org.springframework.test.context.junit.jupiter.ExtensionContext . getStore ( org.springframework.test.context.junit.jupiter.Namespace ) ; return org.springframework.test.context.junit.jupiter.Store . getOrComputeIfAbsent ( java.lang.Class<> , TestContextManager ::new , TestContextManager .class ) ; }  <METHOD_END>
