<METHOD_START> @ Before @ After public void void ( ) { GlobalAdvisorAdapterRegistry . reset ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.framework.adapter.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationTests> ( ) ) ; ITestBean org.springframework.aop.framework.adapter.ITestBean = ( ITestBean ) org.springframework.aop.framework.adapter.ClassPathXmlApplicationContext . getBean ( STRING ) ; try { org.springframework.aop.framework.adapter.ITestBean . getName ( ) ; fail ( STRING ) ; } catch ( UnknownAdviceTypeException org.springframework.aop.framework.adapter.UnknownAdviceTypeException ) { assertEquals ( NUMBER , org.springframework.aop.framework.adapter.SimpleBeforeAdviceImpl ( org.springframework.aop.framework.adapter.ITestBean ) . getInvocationCounter ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.framework.adapter.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationTests> ( ) ) ; ITestBean org.springframework.aop.framework.adapter.ITestBean = ( ITestBean ) org.springframework.aop.framework.adapter.ClassPathXmlApplicationContext . getBean ( STRING ) ; try { org.springframework.aop.framework.adapter.ITestBean . getName ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.adapter.SimpleBeforeAdviceImpl ( org.springframework.aop.framework.adapter.ITestBean ) . getInvocationCounter ( ) ) ; } catch ( UnknownAdviceTypeException org.springframework.aop.framework.adapter.UnknownAdviceTypeException ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.aop.framework.adapter.SimpleBeforeAdviceImpl org.springframework.aop.framework.adapter.SimpleBeforeAdviceImpl ( ITestBean org.springframework.aop.framework.adapter.ITestBean ) { Advised org.springframework.aop.framework.adapter.Advised = ( Advised ) org.springframework.aop.framework.adapter.ITestBean ; Advisor org.springframework.aop.framework.adapter.Advisor = org.springframework.aop.framework.adapter.Advised . getAdvisors ( ) [ NUMBER ] ; return ( org.springframework.aop.framework.adapter.SimpleBeforeAdviceImpl ) org.springframework.aop.framework.adapter.Advisor . getAdvice ( ) ; }  <METHOD_END>
<METHOD_START> void void ( ) java.lang.Throwable ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Advice org.springframework.aop.framework.adapter.Advice ) { return ( org.springframework.aop.framework.adapter.Advice instanceof org.springframework.aop.framework.adapter.SimpleBeforeAdvice ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.adapter.MethodInterceptor org.springframework.aop.framework.adapter.MethodInterceptor ( Advisor org.springframework.aop.framework.adapter.Advisor ) { org.springframework.aop.framework.adapter.SimpleBeforeAdvice org.springframework.aop.framework.adapter.SimpleBeforeAdvice = ( org.springframework.aop.framework.adapter.SimpleBeforeAdvice ) org.springframework.aop.framework.adapter.Advisor . getAdvice ( ) ; return new org.springframework.aop.framework.adapter.SimpleBeforeAdviceInterceptor ( org.springframework.aop.framework.adapter.SimpleBeforeAdvice ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { ++ int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.aop.framework.adapter.SimpleBeforeAdvice org.springframework.aop.framework.adapter.SimpleBeforeAdvice ) { this . org.springframework.aop.framework.adapter.SimpleBeforeAdvice = org.springframework.aop.framework.adapter.SimpleBeforeAdvice ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.adapter.MethodInvocation ) throws java.lang.Throwable { org.springframework.aop.framework.adapter.SimpleBeforeAdvice . void ( ) ; return org.springframework.aop.framework.adapter.MethodInvocation . proceed ( ) ; }  <METHOD_END>
