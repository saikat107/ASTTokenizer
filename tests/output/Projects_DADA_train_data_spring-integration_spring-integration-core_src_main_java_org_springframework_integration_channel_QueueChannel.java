<METHOD_START> public void ( java.util.Queue<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.Queue<org.springframework.integration.channel.Message<?>> ) { Assert . notNull ( java.util.Queue<org.springframework.integration.channel.Message<?>> , STRING ) ; this . java.util.Queue<org.springframework.integration.channel.Message<?>> = java.util.Queue<org.springframework.integration.channel.Message<?>> ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { Assert . isTrue ( int > NUMBER , STRING + STRING ) ; this . java.util.Queue<org.springframework.integration.channel.Message<?>> = new java.util.concurrent.LinkedBlockingQueue<org.springframework.integration.channel.Message<?>> < Message < ? > > ( int ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this( new java.util.concurrent.LinkedBlockingQueue<org.springframework.integration.channel.Message<?>> < Message < ? > > ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.channel.Message<?> , long long ) { Assert . notNull ( org.springframework.integration.channel.Message<> , STRING ) ; try { if ( this . java.util.Queue<org.springframework.integration.channel.Message<?>> instanceof java.util.concurrent.BlockingQueue ) { java.util.concurrent.BlockingQueue<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.concurrent.BlockingQueue<org.springframework.integration.channel.Message<?>> = ( java.util.concurrent.BlockingQueue<org.springframework.integration.channel.Message<?>> < Message < ? > > ) this . java.util.Queue<org.springframework.integration.channel.Message<?>> ; if ( long > NUMBER ) { return java.util.concurrent.BlockingQueue<org.springframework.integration.channel.Message<?>> . offer ( org.springframework.integration.channel.Message<> , long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } if ( long == NUMBER ) { return java.util.concurrent.BlockingQueue<org.springframework.integration.channel.Message<?>> . offer ( org.springframework.integration.channel.Message<> ) ; } java.util.concurrent.BlockingQueue<org.springframework.integration.channel.Message<?>> . put ( org.springframework.integration.channel.Message<> ) ; return true ; } else { try { return this . java.util.Queue<org.springframework.integration.channel.Message<?>> . offer ( org.springframework.integration.channel.Message<> ) ; } finally { this . java.util.concurrent.Semaphore . void ( ) ; } } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> ( long long ) { try { if ( long > NUMBER ) { if ( this . java.util.Queue<org.springframework.integration.channel.Message<?>> instanceof java.util.concurrent.BlockingQueue ) { return ( ( java.util.concurrent.BlockingQueue<org.springframework.integration.channel.Message<?>> < Message < ? > > ) this . java.util.Queue<org.springframework.integration.channel.Message<?>> ) . org.springframework.integration.channel.Message<?> ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } else { long long = java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( long ) ; long long = java.lang.System . long ( ) + long ; while ( this . java.util.Queue<org.springframework.integration.channel.Message<?>> . size ( ) == NUMBER && long > NUMBER ) { this . java.util.concurrent.Semaphore . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; long = long - java.lang.System . long ( ) ; } return this . java.util.Queue<org.springframework.integration.channel.Message<?>> . poll ( ) ; } } if ( long == NUMBER ) { return this . java.util.Queue<org.springframework.integration.channel.Message<?>> . poll ( ) ; } if ( this . java.util.Queue<org.springframework.integration.channel.Message<?>> instanceof java.util.concurrent.BlockingQueue ) { return ( ( java.util.concurrent.BlockingQueue<org.springframework.integration.channel.Message<?>> < Message < ? > > ) this . java.util.Queue<org.springframework.integration.channel.Message<?>> ) . org.springframework.integration.channel.Message<?> ( ) ; } else { while ( this . java.util.Queue<org.springframework.integration.channel.Message<?>> . size ( ) == NUMBER ) { this . java.util.concurrent.Semaphore . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } return this . java.util.Queue<org.springframework.integration.channel.Message<?>> . poll ( ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> ( ) { java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = new java.util.ArrayList<org.springframework.integration.channel.Message<?>> < Message < ? > > ( ) ; if ( this . java.util.Queue<org.springframework.integration.channel.Message<?>> instanceof java.util.concurrent.BlockingQueue ) { ( ( java.util.concurrent.BlockingQueue<org.springframework.integration.channel.Message<?>> < Message < ? > > ) this . java.util.Queue<org.springframework.integration.channel.Message<?>> ) . int ( java.util.List<org.springframework.integration.channel.Message<?>> ) ; } else { Message < ? > org.springframework.integration.channel.Message<?> = null ; while ( ( org.springframework.integration.channel.Message<?> = this . java.util.Queue<org.springframework.integration.channel.Message<?>> . poll ( ) ) != null ) { java.util.List<org.springframework.integration.channel.Message<?>> . add ( org.springframework.integration.channel.Message<> ) ; } } return java.util.List<org.springframework.integration.channel.Message<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> ( MessageSelector org.springframework.integration.channel.MessageSelector ) { if ( org.springframework.integration.channel.MessageSelector == null ) { return this . java.util.List<org.springframework.integration.channel.Message<?>> ( ) ; } java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = new java.util.ArrayList<org.springframework.integration.channel.Message<?>> < Message < ? > > ( ) ; java.lang.Object [] java.lang.Object[] = this . java.util.Queue<org.springframework.integration.channel.Message<?>> . toArray ( ) ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { Message < ? > org.springframework.integration.channel.Message<?> = ( Message < ? > ) java.lang.Object ; if ( ! org.springframework.integration.channel.MessageSelector . accept ( org.springframework.integration.channel.Message<> ) && this . java.util.Queue<org.springframework.integration.channel.Message<?>> . remove ( org.springframework.integration.channel.Message<> ) ) { java.util.List<org.springframework.integration.channel.Message<?>> . add ( org.springframework.integration.channel.Message<> ) ; } } return java.util.List<org.springframework.integration.channel.Message<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Queue<org.springframework.integration.channel.Message<?>> . size ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { if ( this . java.util.Queue<org.springframework.integration.channel.Message<?>> instanceof java.util.concurrent.BlockingQueue ) { return ( ( java.util.concurrent.BlockingQueue<org.springframework.integration.channel.Message<?>> < Message < ? > > ) this . java.util.Queue<org.springframework.integration.channel.Message<?>> ) . int ( ) ; } else { return java.lang.Integer . int ; } }  <METHOD_END>
