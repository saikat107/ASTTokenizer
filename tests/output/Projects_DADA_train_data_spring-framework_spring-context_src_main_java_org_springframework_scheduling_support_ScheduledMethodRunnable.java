<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { this . java.lang.Object = java.lang.Object ; this . java.lang.reflect.Method = java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws java.lang.NoSuchMethodException { this . java.lang.Object = java.lang.Object ; this . java.lang.reflect.Method = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( ) { return this . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { ReflectionUtils . makeAccessible ( this . java.lang.reflect.Method ) ; this . java.lang.reflect.Method . java.lang.Object ( this . java.lang.Object ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { ReflectionUtils . rethrowRuntimeException ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new java.lang.reflect.UndeclaredThrowableException ( java.lang.IllegalAccessException ) ; } }  <METHOD_END>
