<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.payload.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.tunnel.payload.ExpectedException . expectMessage ( STRING ) ; new HttpTunnelPayloadForwarder ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel = java.nio.channels.Channels . java.nio.channels.WritableByteChannel ( java.io.ByteArrayOutputStream ) ; HttpTunnelPayloadForwarder org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayloadForwarder = new HttpTunnelPayloadForwarder ( java.nio.channels.WritableByteChannel ) ; org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayloadForwarder . forward ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ( NUMBER , STRING ) ) ; org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayloadForwarder . forward ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ( NUMBER , STRING ) ) ; org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayloadForwarder . forward ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ( NUMBER , STRING ) ) ; assertThat ( java.io.ByteArrayOutputStream . byte[] ( ) ) . isEqualTo ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel = java.nio.channels.Channels . java.nio.channels.WritableByteChannel ( java.io.ByteArrayOutputStream ) ; HttpTunnelPayloadForwarder org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayloadForwarder = new HttpTunnelPayloadForwarder ( java.nio.channels.WritableByteChannel ) ; org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayloadForwarder . forward ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ( NUMBER , STRING ) ) ; org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayloadForwarder . forward ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ( NUMBER , STRING ) ) ; org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayloadForwarder . forward ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ( NUMBER , STRING ) ) ; assertThat ( java.io.ByteArrayOutputStream . byte[] ( ) ) . isEqualTo ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel = java.nio.channels.Channels . java.nio.channels.WritableByteChannel ( new java.io.ByteArrayOutputStream ( ) ) ; HttpTunnelPayloadForwarder org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayloadForwarder = new HttpTunnelPayloadForwarder ( java.nio.channels.WritableByteChannel ) ; this . org.springframework.boot.devtools.tunnel.payload.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.devtools.tunnel.payload.ExpectedException . expectMessage ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayloadForwarder . forward ( org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ( int , STRING + int ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ( long long , java.lang.String java.lang.String ) { return new HttpTunnelPayload ( long , java.nio.ByteBuffer . java.nio.ByteBuffer ( java.lang.String . byte[] ( ) ) ) ; }  <METHOD_END>
