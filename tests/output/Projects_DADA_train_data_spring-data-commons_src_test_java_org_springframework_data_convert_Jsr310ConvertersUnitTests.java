<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.convert.ConversionService . convert ( java.util.Date , java.time.LocalDateTime .class ) . toString ( ) ) . isEqualTo ( java.lang.String ( java.util.Date , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.LocalDateTime java.time.LocalDateTime = java.time.LocalDateTime . java.time.LocalDateTime ( ) ; assertThat ( java.lang.String ( org.springframework.data.convert.ConversionService . convert ( java.time.LocalDateTime , java.util.Date .class ) , STRING ) ) . isEqualTo ( java.time.LocalDateTime . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.convert.ConversionService . convert ( java.util.Date , java.time.LocalDate .class ) . toString ( ) ) . isEqualTo ( java.lang.String ( java.util.Date , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.LocalDate java.time.LocalDate = java.time.LocalDate . java.time.LocalDate ( ) ; assertThat ( java.lang.String ( org.springframework.data.convert.ConversionService . convert ( java.time.LocalDate , java.util.Date .class ) , STRING ) ) . isEqualTo ( java.time.LocalDate . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.convert.ConversionService . convert ( java.util.Date , java.time.LocalTime .class ) . toString ( ) ) . isEqualTo ( java.lang.String ( java.util.Date , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.LocalTime java.time.LocalTime = java.time.LocalTime . java.time.LocalTime ( ) ; assertThat ( java.lang.String ( org.springframework.data.convert.ConversionService . convert ( java.time.LocalTime , java.util.Date .class ) , STRING ) ) . isEqualTo ( java.time.LocalTime . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Date java.util.Date = new java.util.Date ( ) ; assertThat ( org.springframework.data.convert.ConversionService . convert ( java.util.Date , java.time.Instant .class ) ) . isEqualTo ( java.util.Date . java.time.Instant ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Date java.util.Date = new java.util.Date ( ) ; assertThat ( org.springframework.data.convert.ConversionService . convert ( java.util.Date . java.time.Instant ( ) , java.util.Date .class ) ) . isEqualTo ( java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.time.ZoneId> < java.lang.String , java.time.ZoneId > java.util.Map<java.lang.String,java.time.ZoneId> = new java.util.HashMap<java.lang.String,java.time.ZoneId> <> ( ) ; java.util.Map<java.lang.String,java.time.ZoneId> . java.time.ZoneId ( STRING , java.time.ZoneId . java.time.ZoneId ( STRING ) ) ; java.util.Map<java.lang.String,java.time.ZoneId> . java.time.ZoneId ( STRING , java.time.ZoneId . java.time.ZoneId ( STRING ) ) ; for ( java.util.Map.Entry<java.lang.String,java.time.ZoneId> < java.lang.String , java.time.ZoneId > java.util.Map.Entry<java.lang.String,java.time.ZoneId> : java.util.Map<java.lang.String,java.time.ZoneId> . java.util.Set<java.util.Map.Entry<java.lang.String,java.time.ZoneId>> ( ) ) { assertThat ( org.springframework.data.convert.ConversionService . convert ( java.util.Map.Entry<java.lang.String,java.time.ZoneId> . java.time.ZoneId ( ) , java.lang.String .class ) ) . isEqualTo ( java.util.Map.Entry<java.lang.String,java.time.ZoneId> . java.lang.String ( ) ) ; assertThat ( org.springframework.data.convert.ConversionService . convert ( java.util.Map.Entry<java.lang.String,java.time.ZoneId> . java.lang.String ( ) , java.time.ZoneId .class ) ) . isEqualTo ( java.util.Map.Entry<java.lang.String,java.time.ZoneId> . java.time.ZoneId ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.util.Date java.util.Date , java.lang.String java.lang.String ) { return new java.text.SimpleDateFormat ( java.lang.String ) . java.lang.String ( java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ Parameters public static java.util.Collection<java.lang.Object[]> < java.lang.Object [] > java.util.Collection<java.lang.Object[]> ( ) { return java.util.Arrays . java.util.List<java.lang.Object[]> ( new java.lang.Object [] [] { { STRING , java.time.Duration . java.time.Duration ( NUMBER ) } , { STRING , java.time.Duration . java.time.Duration ( NUMBER ) } , { STRING , java.time.Duration . java.time.Duration ( NUMBER ) } , { STRING , java.time.Duration . java.time.Duration ( NUMBER ) } , { STRING , java.time.Duration . java.time.Duration ( NUMBER ) } , { STRING , java.time.Duration . java.time.Duration ( NUMBER ) } } ) ; }  <METHOD_END>
<METHOD_START> @ Parameters public static java.util.Collection<java.lang.Object[]> < java.lang.Object [] > java.util.Collection<java.lang.Object[]> ( ) { return java.util.Arrays . java.util.List<java.lang.Object[]> ( new java.lang.Object [] [] { { STRING , java.time.Period . java.time.Period ( NUMBER ) } , { STRING , java.time.Period . java.time.Period ( NUMBER ) } , { STRING , java.time.Period . java.time.Period ( NUMBER ) } , { STRING , java.time.Period . java.time.Period ( NUMBER ) } , } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResolvableType org.springframework.data.convert.ResolvableType = ResolvableType . forClass ( org.springframework.data.convert.Jsr310ConvertersUnitTests.ConversionTest .class , this . java.lang.Class<? extends org.springframework.data.convert.Jsr310ConvertersUnitTests.ConversionTest> ( ) ) ; assertThat ( org.springframework.data.convert.ConversionService . convert ( T , java.lang.String .class ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.convert.ConversionService . convert ( java.lang.String , org.springframework.data.convert.ResolvableType . getGeneric ( NUMBER ) . getRawClass ( ) ) ) . isEqualTo ( T ) ; }  <METHOD_END>
