<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . consistencyLevel ( ConsistencyLevel . EACH_QUORUM ) . retryPolicy ( FallthroughRetryPolicy . INSTANCE ) . build ( ) ; QueryOptionsUtil . addPreparedStatementOptions ( org.springframework.cassandra.core.PreparedStatement , org.springframework.cassandra.core.QueryOptions ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . setConsistencyLevel ( ConsistencyLevel . EACH_QUORUM ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . setRetryPolicy ( FallthroughRetryPolicy . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . retryPolicy ( RetryPolicy . FALLTHROUGH ) . build ( ) ; org.springframework.cassandra.core.QueryOptions . setConsistencyLevel ( org . springframework . cassandra . core . ConsistencyLevel . LOCAL_QUOROM ) ; QueryOptionsUtil . addPreparedStatementOptions ( org.springframework.cassandra.core.PreparedStatement , org.springframework.cassandra.core.QueryOptions ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . setRetryPolicy ( FallthroughRetryPolicy . INSTANCE ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . setConsistencyLevel ( ConsistencyLevel . LOCAL_QUORUM ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . consistencyLevel ( ConsistencyLevel . EACH_QUORUM ) . retryPolicy ( FallthroughRetryPolicy . INSTANCE ) . build ( ) ; QueryOptionsUtil . addQueryOptions ( org.springframework.cassandra.core.Statement , org.springframework.cassandra.core.QueryOptions ) ; verify ( org.springframework.cassandra.core.Statement ) . setConsistencyLevel ( ConsistencyLevel . EACH_QUORUM ) ; verify ( org.springframework.cassandra.core.Statement ) . setRetryPolicy ( FallthroughRetryPolicy . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . retryPolicy ( RetryPolicy . FALLTHROUGH ) . build ( ) ; org.springframework.cassandra.core.QueryOptions . setConsistencyLevel ( org . springframework . cassandra . core . ConsistencyLevel . LOCAL_QUOROM ) ; QueryOptionsUtil . addQueryOptions ( org.springframework.cassandra.core.Statement , org.springframework.cassandra.core.QueryOptions ) ; verify ( org.springframework.cassandra.core.Statement ) . setRetryPolicy ( FallthroughRetryPolicy . INSTANCE ) ; verify ( org.springframework.cassandra.core.Statement ) . setConsistencyLevel ( ConsistencyLevel . LOCAL_QUORUM ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . build ( ) ; QueryOptionsUtil . addQueryOptions ( org.springframework.cassandra.core.Statement , org.springframework.cassandra.core.QueryOptions ) ; verifyZeroInteractions ( org.springframework.cassandra.core.Statement ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . fetchSize ( NUMBER ) . readTimeout ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . withTracing ( ) . build ( ) ; QueryOptionsUtil . addQueryOptions ( org.springframework.cassandra.core.Statement , org.springframework.cassandra.core.QueryOptions ) ; verify ( org.springframework.cassandra.core.Statement ) . setReadTimeoutMillis ( NUMBER * NUMBER ) ; verify ( org.springframework.cassandra.core.Statement ) . setFetchSize ( NUMBER ) ; verify ( org.springframework.cassandra.core.Statement ) . enableTracing ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WriteOptions org.springframework.cassandra.core.WriteOptions = WriteOptions . builder ( ) . consistencyLevel ( ConsistencyLevel . EACH_QUORUM ) . retryPolicy ( FallthroughRetryPolicy . INSTANCE ) . readTimeout ( NUMBER ) . ttl ( NUMBER ) . build ( ) ; QueryOptionsUtil . addWriteOptions ( org.springframework.cassandra.core.Insert , org.springframework.cassandra.core.WriteOptions ) ; verify ( org.springframework.cassandra.core.Insert ) . setConsistencyLevel ( ConsistencyLevel . EACH_QUORUM ) ; verify ( org.springframework.cassandra.core.Insert ) . setRetryPolicy ( FallthroughRetryPolicy . INSTANCE ) ; verify ( org.springframework.cassandra.core.Insert ) . setReadTimeoutMillis ( NUMBER ) ; verify ( org.springframework.cassandra.core.Insert ) . using ( Mockito . any ( Using .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WriteOptions org.springframework.cassandra.core.WriteOptions = WriteOptions . builder ( ) . consistencyLevel ( ConsistencyLevel . EACH_QUORUM ) . retryPolicy ( FallthroughRetryPolicy . INSTANCE ) . ttl ( NUMBER ) . tracing ( false ) . build ( ) ; QueryOptionsUtil . addWriteOptions ( org.springframework.cassandra.core.Update , org.springframework.cassandra.core.WriteOptions ) ; verify ( org.springframework.cassandra.core.Update ) . setConsistencyLevel ( ConsistencyLevel . EACH_QUORUM ) ; verify ( org.springframework.cassandra.core.Update ) . setRetryPolicy ( FallthroughRetryPolicy . INSTANCE ) ; verify ( org.springframework.cassandra.core.Update ) . using ( Mockito . any ( Using .class ) ) ; verify ( org.springframework.cassandra.core.Update ) . disableTracing ( ) ; }  <METHOD_END>
