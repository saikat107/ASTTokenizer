<METHOD_START> protected void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.Class<? extends org.springframework.core.ParameterizedTypeReference> ( ) ) ; java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<> . java.lang.reflect.Type ( ) ; Assert . isInstanceOf ( java.lang.reflect.ParameterizedType .class , java.lang.reflect.Type , STRING ) ; java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ; Assert . isTrue ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) . int == NUMBER , STRING ) ; this . java.lang.reflect.Type = java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Type java.lang.reflect.Type ( ) { return this . java.lang.reflect.Type ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.core.ParameterizedTypeReference && this . java.lang.reflect.Type . boolean ( ( ( org.springframework.core.ParameterizedTypeReference<?> < ? > ) java.lang.Object ) . java.lang.reflect.Type ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.reflect.Type . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.reflect.Type + STRING ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; if ( java.lang.Object .class == java.lang.Class<> ) { throw new java.lang.IllegalStateException ( STRING ) ; } else if ( org.springframework.core.ParameterizedTypeReference .class == java.lang.Class<> ) { return java.lang.Class<> ; } else { return java.lang.Class<?> ( java.lang.Class<> ) ; } }  <METHOD_END>
