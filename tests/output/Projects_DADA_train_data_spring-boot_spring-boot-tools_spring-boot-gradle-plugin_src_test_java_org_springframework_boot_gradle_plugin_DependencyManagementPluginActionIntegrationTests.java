<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.gradle.plugin.GradleBuild . build ( STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.gradle.plugin.GradleBuild . build ( STRING , STRING ) . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.plugin.GradleBuild . getProjectDir ( ) , STRING ) ; java.io.File . boolean ( ) ; FileSystemUtils . copyRecursively ( new java.io.File ( STRING ) , java.io.File ) ; BuildResult org.springframework.boot.gradle.plugin.BuildResult = this . org.springframework.boot.gradle.plugin.GradleBuild . buildAndFail ( STRING ) ; assertThat ( org.springframework.boot.gradle.plugin.BuildResult . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . FAILED ) ; java.lang.String java.lang.String = org.springframework.boot.gradle.plugin.BuildResult . getOutput ( ) ; assertThat ( java.lang.String ) . contains ( STRING + STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING + STRING + this . org.springframework.boot.gradle.plugin.GradleBuild . getProjectDir ( ) . getName ( ) + STRING ) ; }  <METHOD_END>
