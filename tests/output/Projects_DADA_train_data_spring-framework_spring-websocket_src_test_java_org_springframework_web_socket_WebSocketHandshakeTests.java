<METHOD_START> @ Parameters ( name = STRING ) public static java.lang.Iterable<java.lang.Object[]> < java.lang.Object [] > java.lang.Iterable<java.lang.Object[]> ( ) { return java.util.Arrays . java.util.List<java.lang.Object[]> ( new java.lang.Object [] [] { { new JettyWebSocketTestServer ( ) , new JettyWebSocketClient ( ) } , { new TomcatWebSocketTestServer ( ) , new StandardWebSocketClient ( ) } , { new UndertowTestServer ( ) , new JettyWebSocketClient ( ) } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { org.springframework.web.socket.WebSocketHandshakeTests.TestConfig .class } ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebSocketHttpHeaders org.springframework.web.socket.WebSocketHttpHeaders = new WebSocketHttpHeaders ( ) ; org.springframework.web.socket.WebSocketHttpHeaders . setSecWebSocketProtocol ( STRING ) ; java.net.URI java.net.URI = new java.net.URI ( getWsBaseUrl ( ) + STRING ) ; WebSocketSession org.springframework.web.socket.WebSocketSession = this . webSocketClient . doHandshake ( new TextWebSocketHandler ( ) , org.springframework.web.socket.WebSocketHttpHeaders , java.net.URI ) . get ( ) ; assertEquals ( STRING , org.springframework.web.socket.WebSocketSession . getAcceptedProtocol ( ) ) ; org.springframework.web.socket.WebSocketSession . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = getWsBaseUrl ( ) + STRING ; WebSocketSession org.springframework.web.socket.WebSocketSession = this . webSocketClient . doHandshake ( new AbstractWebSocketHandler ( ) {} , java.lang.String ) . get ( ) ; org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler = this . wac . getBean ( org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler .class ) ; org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler . void ( NUMBER ) ; org.springframework.web.socket.WebSocketSession . sendMessage ( new PongMessage ( ) ) ; org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler . void ( ) ; assertNull ( org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler . java.lang.Throwable ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler . java.util.List<org.springframework.web.socket.WebSocketMessage> ( ) . size ( ) ) ; assertEquals ( PongMessage .class , org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler . java.util.List<org.springframework.web.socket.WebSocketMessage> ( ) . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketHandlerRegistry org.springframework.web.socket.WebSocketHandlerRegistry ) { this . org.springframework.web.socket.DefaultHandshakeHandler . setSupportedProtocols ( STRING , STRING , STRING ) ; org.springframework.web.socket.WebSocketHandlerRegistry . addHandler ( org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler ( ) , STRING ) . setHandshakeHandler ( this . org.springframework.web.socket.DefaultHandshakeHandler ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler ( ) { return new org.springframework.web.socket.WebSocketHandshakeTests.TestWebSocketHandler ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.socket.WebSocketMessage> < WebSocketMessage > java.util.List<org.springframework.web.socket.WebSocketMessage> ( ) { return this . java.util.List<org.springframework.web.socket.WebSocketMessage> ; }  <METHOD_END>
<METHOD_START> public java.lang.Throwable java.lang.Throwable ( ) { return this . java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.WebSocketSession , WebSocketMessage < ? > org.springframework.web.socket.WebSocketMessage<?> ) throws java.lang.Exception { this . java.util.List<org.springframework.web.socket.WebSocketMessage> . add ( org.springframework.web.socket.WebSocketMessage<> ) ; if ( this . java.util.List<org.springframework.web.socket.WebSocketMessage> . size ( ) >= this . int ) { this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.WebSocketSession , java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { this . java.lang.Throwable = java.lang.Throwable ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.InterruptedException { this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
