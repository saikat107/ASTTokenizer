<METHOD_START> public void ( MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc , WebClient org.springframework.test.web.servlet.htmlunit.WebClient ) { this( org.springframework.test.web.servlet.htmlunit.MockMvc , org.springframework.test.web.servlet.htmlunit.WebClient , STRING ); }  <METHOD_END>
<METHOD_START> public void ( MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc , WebClient org.springframework.test.web.servlet.htmlunit.WebClient , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.test.web.servlet.htmlunit.MockMvc , STRING ) ; Assert . notNull ( org.springframework.test.web.servlet.htmlunit.WebClient , STRING ) ; void ( java.lang.String ) ; this . org.springframework.test.web.servlet.htmlunit.WebClient = org.springframework.test.web.servlet.htmlunit.WebClient ; this . org.springframework.test.web.servlet.htmlunit.MockMvc = org.springframework.test.web.servlet.htmlunit.MockMvc ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> static void void ( java.lang.String java.lang.String ) { if ( java.lang.String == null || STRING . boolean ( java.lang.String ) ) { return; } Assert . isTrue ( java.lang.String . boolean ( STRING ) , ( ) STRING + contextPath + STRING ) ; Assert . isTrue ( ! java.lang.String . boolean ( STRING ) , ( ) STRING + contextPath + STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( WebClient org.springframework.test.web.servlet.htmlunit.WebClient ) { Assert . notNull ( org.springframework.test.web.servlet.htmlunit.WebClient , STRING ) ; this . org.springframework.test.web.servlet.htmlunit.WebClient = org.springframework.test.web.servlet.htmlunit.WebClient ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.htmlunit.WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse ( WebRequest org.springframework.test.web.servlet.htmlunit.WebRequest ) throws java.io.IOException { long long = java.lang.System . long ( ) ; HtmlUnitRequestBuilder org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder = new HtmlUnitRequestBuilder ( this . java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> , this . org.springframework.test.web.servlet.htmlunit.WebClient , org.springframework.test.web.servlet.htmlunit.WebRequest ) ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setContextPath ( this . java.lang.String ) ; MockHttpServletResponse org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse = org.springframework.test.web.servlet.htmlunit.WebResponse ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder ) ; java.lang.String java.lang.String = org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . getForwardedUrl ( ) ; while ( java.lang.String != null ) { org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setForwardPostProcessor ( new ForwardRequestPostProcessor ( java.lang.String ) ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse = org.springframework.test.web.servlet.htmlunit.WebResponse ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder ) ; java.lang.String = org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . getForwardedUrl ( ) ; } void ( org.springframework.test.web.servlet.htmlunit.WebRequest , org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . getCookies ( ) ) ; return new MockWebResponseBuilder ( long , org.springframework.test.web.servlet.htmlunit.WebRequest , org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse ( RequestBuilder org.springframework.test.web.servlet.htmlunit.RequestBuilder ) throws java.io.IOException { ResultActions org.springframework.test.web.servlet.htmlunit.ResultActions ; try { org.springframework.test.web.servlet.htmlunit.ResultActions = this . org.springframework.test.web.servlet.htmlunit.MockMvc . perform ( org.springframework.test.web.servlet.htmlunit.RequestBuilder ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.io.IOException ( java.lang.Exception ) ; } return org.springframework.test.web.servlet.htmlunit.ResultActions . andReturn ( ) . getResponse ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( WebRequest org.springframework.test.web.servlet.htmlunit.WebRequest , javax . javax.servlet . javax.servlet . javax.servlet [] javax.servlet.http.Cookie[] ) { if ( javax.servlet.http.Cookie[] == null ) { return; } java.util.Date java.util.Date = new java.util.Date ( ) ; CookieManager org.springframework.test.web.servlet.htmlunit.CookieManager = this . org.springframework.test.web.servlet.htmlunit.WebClient . getCookieManager ( ) ; for ( javax . javax.servlet . javax.servlet . javax.servlet javax.servlet.http.Cookie : javax.servlet.http.Cookie[] ) { if ( javax.servlet.http.Cookie . getDomain ( ) == null ) { javax.servlet.http.Cookie . setDomain ( org.springframework.test.web.servlet.htmlunit.WebRequest . getUrl ( ) . getHost ( ) ) ; } Cookie org.springframework.test.web.servlet.htmlunit.Cookie = MockWebResponseBuilder . createCookie ( javax.servlet.http.Cookie ) ; java.util.Date java.util.Date = org.springframework.test.web.servlet.htmlunit.Cookie . getExpires ( ) ; if ( java.util.Date == null || java.util.Date . boolean ( java.util.Date ) ) { org.springframework.test.web.servlet.htmlunit.CookieManager . addCookie ( org.springframework.test.web.servlet.htmlunit.Cookie ) ; } else { org.springframework.test.web.servlet.htmlunit.CookieManager . removeCookie ( org.springframework.test.web.servlet.htmlunit.Cookie ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {	}  <METHOD_END>
