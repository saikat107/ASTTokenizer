<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.statemachine.config.common.annotation.AnnotationMetadata , BeanDefinitionRegistry org.springframework.statemachine.config.common.annotation.BeanDefinitionRegistry ) { java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> = java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) ; java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = null ; java.lang.String [] java.lang.String[] = null ; ScopedProxyMode org.springframework.statemachine.config.common.annotation.ScopedProxyMode = null ; if ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> != null ) { for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ) { AnnotationAttributes org.springframework.statemachine.config.common.annotation.AnnotationAttributes = AnnotationAttributes . fromMap ( org.springframework.statemachine.config.common.annotation.AnnotationMetadata . getAnnotationAttributes ( java.lang.Class<> . java.lang.String ( ) , false ) ) ; if ( org.springframework.statemachine.config.common.annotation.AnnotationAttributes != null && org.springframework.statemachine.config.common.annotation.AnnotationAttributes . containsKey ( STRING ) ) { java.lang.String[] = org.springframework.statemachine.config.common.annotation.AnnotationAttributes . getStringArray ( STRING ) ; java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; break; } } } AnnotationAttributes org.springframework.statemachine.config.common.annotation.AnnotationAttributes = AnnotationAttributes . fromMap ( org.springframework.statemachine.config.common.annotation.AnnotationMetadata . getAnnotationAttributes ( Scope .class . java.lang.String ( ) , false ) ) ; if ( org.springframework.statemachine.config.common.annotation.AnnotationAttributes != null ) { org.springframework.statemachine.config.common.annotation.ScopedProxyMode = org.springframework.statemachine.config.common.annotation.AnnotationAttributes . getEnum ( STRING ) ; } BeanDefinition org.springframework.statemachine.config.common.annotation.BeanDefinition ; try { org.springframework.statemachine.config.common.annotation.BeanDefinition = org.springframework.statemachine.config.common.annotation.BeanDefinition ( org.springframework.statemachine.config.common.annotation.AnnotationMetadata , java.lang.Class<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( STRING , java.lang.Exception ) ; } if ( org.springframework.statemachine.config.common.annotation.BeanDefinition == null ) { return; } if ( ObjectUtils . isEmpty ( java.lang.String[] ) ) { java.lang.String[] = new java.lang.String [] { org.springframework.statemachine.config.common.annotation.BeanNameGenerator . generateBeanName ( org.springframework.statemachine.config.common.annotation.BeanDefinition , org.springframework.statemachine.config.common.annotation.BeanDefinitionRegistry ) } ; } org.springframework.statemachine.config.common.annotation.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String[] [ NUMBER ] , org.springframework.statemachine.config.common.annotation.BeanDefinition ) ; if ( java.lang.String[] . int > NUMBER ) { for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { org.springframework.statemachine.config.common.annotation.BeanDefinitionRegistry . registerAlias ( java.lang.String[] [ NUMBER ] , java.lang.String[] [ int ] ) ; } } if ( org.springframework.statemachine.config.common.annotation.ScopedProxyMode != null && org.springframework.statemachine.config.common.annotation.ScopedProxyMode != ScopedProxyMode . DEFAULT && org.springframework.statemachine.config.common.annotation.ScopedProxyMode != ScopedProxyMode . NO ) { BeanDefinitionHolder org.springframework.statemachine.config.common.annotation.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.statemachine.config.common.annotation.BeanDefinition , java.lang.String[] [ NUMBER ] ) ; BeanDefinitionHolder org.springframework.statemachine.config.common.annotation.BeanDefinitionHolder = null ; if ( org.springframework.statemachine.config.common.annotation.ScopedProxyMode == ScopedProxyMode . TARGET_CLASS ) { org.springframework.statemachine.config.common.annotation.BeanDefinitionHolder = ScopedProxyUtils . createScopedProxy ( org.springframework.statemachine.config.common.annotation.BeanDefinitionHolder , org.springframework.statemachine.config.common.annotation.BeanDefinitionRegistry , true ) ; } else if ( org.springframework.statemachine.config.common.annotation.ScopedProxyMode == ScopedProxyMode . INTERFACES ) { org.springframework.statemachine.config.common.annotation.BeanDefinitionHolder = ScopedProxyUtils . createScopedProxy ( org.springframework.statemachine.config.common.annotation.BeanDefinitionHolder , org.springframework.statemachine.config.common.annotation.BeanDefinitionRegistry , false ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.statemachine.config.common.annotation.ScopedProxyMode ) ; } BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.statemachine.config.common.annotation.BeanDefinitionHolder , org.springframework.statemachine.config.common.annotation.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.statemachine.config.common.annotation.BeanFactory ) throws org.springframework.statemachine.config.common.annotation.BeansException { Assert . isInstanceOf ( ListableBeanFactory .class , org.springframework.statemachine.config.common.annotation.BeanFactory , STRING + org.springframework.statemachine.config.common.annotation.BeanFactory ) ; this . org.springframework.statemachine.config.common.annotation.BeanFactory = org.springframework.statemachine.config.common.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.statemachine.config.common.annotation.Environment ) { this . org.springframework.statemachine.config.common.annotation.Environment = org.springframework.statemachine.config.common.annotation.Environment ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.statemachine.config.common.annotation.BeanDefinition org.springframework.statemachine.config.common.annotation.BeanDefinition ( AnnotationMetadata org.springframework.statemachine.config.common.annotation.AnnotationMetadata , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> protected abstract java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ( )  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.config.common.annotation.BeanFactory org.springframework.statemachine.config.common.annotation.BeanFactory ( ) { return org.springframework.statemachine.config.common.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.config.common.annotation.Environment org.springframework.statemachine.config.common.annotation.Environment ( ) { return org.springframework.statemachine.config.common.annotation.Environment ; }  <METHOD_END>
<METHOD_START> public void ( B B , java.lang.Class<T> < T > java.lang.Class<T> ) { this . B = B ; this . java.lang.Class<T> = java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) java.lang.Exception { return T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ Autowired ( required = false ) public void void ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ) { this . java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.statemachine.config.common.annotation.BeanFactory ) throws org.springframework.statemachine.config.common.annotation.BeansException { this . org.springframework.statemachine.config.common.annotation.BeanFactory = org.springframework.statemachine.config.common.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception {		}  <METHOD_END>
<METHOD_START> public B B ( ) { return B ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ( ) { return java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ; }  <METHOD_END>
<METHOD_START> protected void void ( T T ) { this . T = T ; }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.config.common.annotation.BeanFactory org.springframework.statemachine.config.common.annotation.BeanFactory ( ) { return org.springframework.statemachine.config.common.annotation.BeanFactory ; }  <METHOD_END>
