<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> < BeanPostProcessor > java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> , java.security.AccessControlContext java.security.AccessControlContext ) { Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; this . java.lang.String = java.lang.String ; this . boolean = ( this . java.lang.Object instanceof DisposableBean && ! org.springframework.beans.factory.support.RootBeanDefinition . isExternallyManagedDestroyMethod ( STRING ) ) ; this . boolean = org.springframework.beans.factory.support.RootBeanDefinition . isNonPublicAccessAllowed ( ) ; this . java.security.AccessControlContext = java.security.AccessControlContext ; java.lang.String java.lang.String = java.lang.String ( java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ) ; if ( java.lang.String != null && ! ( this . boolean && STRING . boolean ( java.lang.String ) ) && ! org.springframework.beans.factory.support.RootBeanDefinition . isExternallyManagedDestroyMethod ( java.lang.String ) ) { this . java.lang.String = java.lang.String ; this . java.lang.reflect.Method = java.lang.reflect.Method ( ) ; if ( this . java.lang.reflect.Method == null ) { if ( org.springframework.beans.factory.support.RootBeanDefinition . isEnforceDestroyMethod ( ) ) { throw new BeanDefinitionValidationException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } } else { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = this . java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; if ( java.lang.Class<?>[] . int > NUMBER ) { throw new BeanDefinitionValidationException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } else if ( java.lang.Class<?>[] . int == NUMBER && boolean .class != java.lang.Class<?>[] [ NUMBER ] ) { throw new BeanDefinitionValidationException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } } } this . java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> = java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> ( java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> < BeanPostProcessor > java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> , java.security.AccessControlContext java.security.AccessControlContext ) { Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; this . java.lang.String = null ; this . boolean = ( this . java.lang.Object instanceof DisposableBean ) ; this . boolean = true ; this . java.security.AccessControlContext = java.security.AccessControlContext ; this . java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> = java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> ( java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , boolean boolean , boolean boolean , java.lang.String java.lang.String , java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> < DestructionAwareBeanPostProcessor > java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> ) { this . java.lang.Object = java.lang.Object ; this . java.lang.String = java.lang.String ; this . boolean = boolean ; this . boolean = boolean ; this . java.security.AccessControlContext = null ; this . java.lang.String = java.lang.String ; this . java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> = java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getDestroyMethodName ( ) ; if ( AbstractBeanDefinition . INFER_METHOD . equals ( java.lang.String ) || ( java.lang.String == null && java.lang.Object instanceof java.lang.AutoCloseable ) ) { if ( ! ( java.lang.Object instanceof DisposableBean ) ) { try { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( java.lang.String ) . java.lang.String ( ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { try { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( java.lang.String ) . java.lang.String ( ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } } } return null ; } return ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String : null ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> < DestructionAwareBeanPostProcessor > java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> ( java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> < BeanPostProcessor > java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> , java.lang.Object java.lang.Object ) { java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> < DestructionAwareBeanPostProcessor > java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> = null ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ) ) { java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> = new java.util.ArrayList <> ( java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> . size ( ) ) ; for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ) { if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof DestructionAwareBeanPostProcessor ) { DestructionAwareBeanPostProcessor org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor = ( DestructionAwareBeanPostProcessor ) org.springframework.beans.factory.support.BeanPostProcessor ; if ( org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor . requiresDestruction ( java.lang.Object ) ) { java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> . add ( org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor ) ; } } } } return java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> ) ) { for ( DestructionAwareBeanPostProcessor org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor : this . java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> ) { org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor . postProcessBeforeDestruction ( this . java.lang.Object , this . java.lang.String ) ; } } if ( this . boolean ) { if ( org.springframework.beans.factory.support.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.support.Log . debug ( STRING + this . java.lang.String + STRING ) ; } try { if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedExceptionAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { ( ( DisposableBean ) java.lang.Object ) . destroy ( ) ; return null ; } } , java.security.AccessControlContext ) ; } else { ( ( DisposableBean ) java.lang.Object ) . destroy ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.String java.lang.String = STRING + this . java.lang.String + STRING ; if ( org.springframework.beans.factory.support.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.support.Log . warn ( java.lang.String , java.lang.Throwable ) ; } else { org.springframework.beans.factory.support.Log . warn ( java.lang.String + STRING + java.lang.Throwable ) ; } } } if ( this . java.lang.reflect.Method != null ) { void ( this . java.lang.reflect.Method ) ; } else if ( this . java.lang.String != null ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( ) ; if ( java.lang.reflect.Method != null ) { void ( java.lang.reflect.Method ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { ( ( DisposableBean ) java.lang.Object ) . destroy ( ) ; return null ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( ) { try { if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { return java.security.AccessController . java.lang.reflect.Method ( new java.security.PrivilegedAction<java.lang.reflect.Method> < java.lang.reflect.Method > ( ) { @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( ) ; } } ) ; } else { return java.lang.reflect.Method ( ) ; } } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new BeanDefinitionValidationException ( STRING + this . java.lang.String + STRING + java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( ) { return ( this . boolean ? BeanUtils . findMethodWithMinimalParameters ( this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , this . java.lang.String ) : BeanUtils . findMethodWithMinimalParameters ( this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method[] ( ) , this . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; final java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.lang.Class<?>[] . int ] ; if ( java.lang.Class<?>[] . int == NUMBER ) { java.lang.Object[] [ NUMBER ] = java.lang.Boolean . java.lang.Boolean ; } if ( org.springframework.beans.factory.support.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.support.Log . debug ( STRING + this . java.lang.String + STRING + this . java.lang.String + STRING ) ; } try { if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return null ; } } ) ; try { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedExceptionAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ) ; return null ; } } , java.security.AccessControlContext ) ; } catch ( java.security.PrivilegedActionException java.security.PrivilegedActionException ) { throw ( java.lang.reflect.InvocationTargetException ) java.security.PrivilegedActionException . java.lang.Exception ( ) ; } } else { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ) ; } } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.String java.lang.String = STRING + this . java.lang.String + STRING + this . java.lang.String + STRING ; if ( org.springframework.beans.factory.support.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.support.Log . warn ( java.lang.String , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } else { org.springframework.beans.factory.support.Log . warn ( java.lang.String + STRING + java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.beans.factory.support.Log . error ( STRING + this . java.lang.String + STRING + this . java.lang.String + STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ) ; return null ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) { java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> < DestructionAwareBeanPostProcessor > java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> = null ; if ( this . java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> != null ) { java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> = new java.util.ArrayList <> ( ) ; for ( DestructionAwareBeanPostProcessor org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor : this . java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> ) { if ( org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor instanceof java.io.Serializable ) { java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> . add ( org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor ) ; } } } return new org.springframework.beans.factory.support.DisposableBeanAdapter ( this . java.lang.Object , this . java.lang.String , this . boolean , this . boolean , this . java.lang.String , java.util.List<org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor> ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Object java.lang.Object , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { if ( java.lang.Object instanceof DisposableBean || java.lang.Object instanceof java.lang.AutoCloseable ) { return true ; } java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getDestroyMethodName ( ) ; if ( AbstractBeanDefinition . INFER_METHOD . equals ( java.lang.String ) ) { return ( ClassUtils . hasMethod ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String ) || ClassUtils . hasMethod ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String ) ) ; } return StringUtils . hasLength ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Object java.lang.Object , java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> < BeanPostProcessor > java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ) { if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ) ) { for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ) { if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof DestructionAwareBeanPostProcessor ) { DestructionAwareBeanPostProcessor org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor = ( DestructionAwareBeanPostProcessor ) org.springframework.beans.factory.support.BeanPostProcessor ; try { if ( org.springframework.beans.factory.support.DestructionAwareBeanPostProcessor . requiresDestruction ( java.lang.Object ) ) { return true ; } } catch ( java.lang.AbstractMethodError java.lang.AbstractMethodError ) { return true ; } } } } return false ; }  <METHOD_END>
