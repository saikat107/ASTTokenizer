<METHOD_START> private static org.springframework.http.MultiValueMap<java.lang.String,org.springframework.http.MediaType> < java.lang.String , MediaType > org.springframework.http.MultiValueMap<java.lang.String,org.springframework.http.MediaType> ( ) { java.io.InputStream java.io.InputStream = null ; try { java.io.InputStream = org.springframework.http.MediaTypeFactory .class . java.io.InputStream ( java.lang.String ) ; java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader ( new java.io.InputStreamReader ( java.io.InputStream , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; MultiValueMap < java.lang.String , MediaType > org.springframework.http.MultiValueMap<java.lang.String,org.springframework.http.MediaType> = new LinkedMultiValueMap <> ( ) ; java.lang.String java.lang.String ; while ( ( java.lang.String = java.io.BufferedReader . java.lang.String ( ) ) != null ) { if ( java.lang.String . boolean ( ) || java.lang.String . char ( NUMBER ) == '#' ) { continue; } java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; MediaType org.springframework.http.MediaType = MediaType . parseMediaType ( java.lang.String[] [ NUMBER ] ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String java.lang.String = java.lang.String[] [ int ] . java.lang.String ( java.util.Locale . java.util.Locale ) ; org.springframework.http.MultiValueMap<java.lang.String,org.springframework.http.MediaType> . add ( java.lang.String , org.springframework.http.MediaType ) ; } } return org.springframework.http.MultiValueMap<java.lang.String,org.springframework.http.MediaType> ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING , java.io.IOException ) ; } finally { if ( java.io.InputStream != null ) { try { java.io.InputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) {				} } } }  <METHOD_END>
<METHOD_START> public static java.util.Optional<org.springframework.http.MediaType> < MediaType > java.util.Optional<org.springframework.http.MediaType> ( Resource org.springframework.http.Resource ) { return java.util.Optional . java.util.Optional ( org.springframework.http.Resource ) . map ( Resource :: getFilename ) . flatMap ( org.springframework.http.MediaTypeFactory :: getMediaType ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Optional<org.springframework.http.MediaType> < MediaType > java.util.Optional<org.springframework.http.MediaType> ( java.lang.String java.lang.String ) { return java.util.List<org.springframework.http.MediaType> ( java.lang.String ) . stream ( ) . findFirst ( ) ; }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.http.MediaType> < MediaType > java.util.List<org.springframework.http.MediaType> ( java.lang.String java.lang.String ) { return java.util.Optional . java.util.Optional ( StringUtils . getFilenameExtension ( java.lang.String ) ) . map ( s -> s . toLowerCase ( Locale . ENGLISH ) ) . map ( org.springframework.http.MultiValueMap<java.lang.String,org.springframework.http.MediaType> :: get ) . orElse ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
