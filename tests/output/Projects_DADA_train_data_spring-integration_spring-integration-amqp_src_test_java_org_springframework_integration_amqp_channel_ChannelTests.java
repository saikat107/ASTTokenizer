<METHOD_START> @ After public void void ( ) { org.springframework.integration.amqp.channel.BrokerRunning . deleteExchanges ( STRING , STRING , STRING ) ; org.springframework.integration.amqp.channel.BrokerRunning . removeTestQueues ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { final java.util.concurrent.CyclicBarrier java.util.concurrent.CyclicBarrier = new java.util.concurrent.CyclicBarrier ( NUMBER ) ; org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel . subscribe ( message -> { try { latch . await ( NUMBER , TimeUnit . SECONDS ) ; } catch ( Exception e ) {			} } ) ; this . org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.CyclicBarrier . int ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.util.concurrent.CyclicBarrier . void ( ) ; BlockingQueueConsumer org.springframework.integration.amqp.channel.BlockingQueueConsumer = ( BlockingQueueConsumer ) TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel , STRING , java.util.Set .class ) . iterator ( ) . next ( ) ; org.springframework.integration.amqp.channel.CachingConnectionFactory . destroy ( ) ; void ( this . org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel , org.springframework.integration.amqp.channel.BlockingQueueConsumer ) ; this . org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.CyclicBarrier . int ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; this . org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel . destroy ( ) ; this . org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel . destroy ( ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.amqp.channel.CachingConnectionFactory , STRING , java.util.Collection .class ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( PublishSubscribeAmqpChannel org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel , BlockingQueueConsumer org.springframework.integration.amqp.channel.BlockingQueueConsumer )			throws java.lang.Exception { BlockingQueueConsumer org.springframework.integration.amqp.channel.BlockingQueueConsumer = ( BlockingQueueConsumer ) TestUtils . getPropertyValue ( org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel , STRING , java.util.Set .class ) . iterator ( ) . next ( ) ; int int = NUMBER ; boolean boolean = org.springframework.integration.amqp.channel.BlockingQueueConsumer != org.springframework.integration.amqp.channel.BlockingQueueConsumer && TestUtils . getPropertyValue ( org.springframework.integration.amqp.channel.BlockingQueueConsumer , STRING , java.util.Map .class ) . size ( ) > NUMBER ; while ( int ++ < NUMBER && ! boolean ) { java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.amqp.channel.BlockingQueueConsumer = ( BlockingQueueConsumer ) TestUtils . getPropertyValue ( org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel , STRING , java.util.Set .class ) . iterator ( ) . next ( ) ; boolean = org.springframework.integration.amqp.channel.BlockingQueueConsumer != org.springframework.integration.amqp.channel.BlockingQueueConsumer && TestUtils . getPropertyValue ( org.springframework.integration.amqp.channel.BlockingQueueConsumer , STRING , java.util.Map .class ) . size ( ) > NUMBER ; } assertTrue ( STRING , int < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RabbitAdmin org.springframework.integration.amqp.channel.RabbitAdmin = new RabbitAdmin ( this . org.springframework.integration.amqp.channel.CachingConnectionFactory ) ; org.springframework.integration.amqp.channel.RabbitAdmin . deleteQueue ( STRING ) ; SimpleMessageListenerContainer org.springframework.integration.amqp.channel.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( this . org.springframework.integration.amqp.channel.CachingConnectionFactory ) ; AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate = mock ( AmqpTemplate .class ) ; PointToPointSubscribableAmqpChannel org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel = new PointToPointSubscribableAmqpChannel ( STRING , org.springframework.integration.amqp.channel.SimpleMessageListenerContainer , org.springframework.integration.amqp.channel.AmqpTemplate ) ; org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel . afterPropertiesSet ( ) ; assertNotNull ( org.springframework.integration.amqp.channel.RabbitAdmin . getQueueProperties ( STRING ) ) ; org.springframework.integration.amqp.channel.RabbitAdmin . deleteQueue ( STRING ) ; org.springframework.integration.amqp.channel.RabbitAdmin . deleteQueue ( STRING ) ; org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel . setQueueName ( STRING ) ; org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel . afterPropertiesSet ( ) ; assertNotNull ( org.springframework.integration.amqp.channel.RabbitAdmin . getQueueProperties ( STRING ) ) ; org.springframework.integration.amqp.channel.RabbitAdmin . deleteQueue ( STRING ) ; org.springframework.integration.amqp.channel.RabbitAdmin . declareQueue ( new Queue ( STRING , false ) ) ; org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel . afterPropertiesSet ( ) ; assertNotNull ( org.springframework.integration.amqp.channel.RabbitAdmin . getQueueProperties ( STRING ) ) ; org.springframework.integration.amqp.channel.RabbitAdmin . deleteQueue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AmqpChannelFactoryBean org.springframework.integration.amqp.channel.AmqpChannelFactoryBean = new AmqpChannelFactoryBean ( ) ; org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . setConnectionFactory ( this . org.springframework.integration.amqp.channel.CachingConnectionFactory ) ; org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . afterPropertiesSet ( ) ; AbstractAmqpChannel org.springframework.integration.amqp.channel.AbstractAmqpChannel = org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . getObject ( ) ; assertThat ( org.springframework.integration.amqp.channel.AbstractAmqpChannel , instanceOf ( PointToPointSubscribableAmqpChannel .class ) ) ; org.springframework.integration.amqp.channel.AmqpChannelFactoryBean = new AmqpChannelFactoryBean ( ) ; org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . setConnectionFactory ( this . org.springframework.integration.amqp.channel.CachingConnectionFactory ) ; org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . setBeanName ( STRING ) ; org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . setPubSub ( true ) ; org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . afterPropertiesSet ( ) ; org.springframework.integration.amqp.channel.AbstractAmqpChannel = org.springframework.integration.amqp.channel.AmqpChannelFactoryBean . getObject ( ) ; assertThat ( org.springframework.integration.amqp.channel.AbstractAmqpChannel , instanceOf ( PublishSubscribeAmqpChannel .class ) ) ; RabbitAdmin org.springframework.integration.amqp.channel.RabbitAdmin = new RabbitAdmin ( this . org.springframework.integration.amqp.channel.CachingConnectionFactory ) ; org.springframework.integration.amqp.channel.RabbitAdmin . deleteQueue ( STRING ) ; org.springframework.integration.amqp.channel.RabbitAdmin . deleteExchange ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.amqp.channel.ChannelTests.Foo org.springframework.integration.amqp.channel.ChannelTests.Foo = new org.springframework.integration.amqp.channel.ChannelTests.Foo ( STRING ) ; Message < ? > org.springframework.integration.amqp.channel.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.amqp.channel.ChannelTests.Foo ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.amqp.channel.PollableAmqpChannel . send ( org.springframework.integration.amqp.channel.Message<> ) ; Message < ? > org.springframework.integration.amqp.channel.Message<?> = this . org.springframework.integration.amqp.channel.PollableAmqpChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.channel.Message<> ) ; assertThat ( org.springframework.integration.amqp.channel.Message<> . getPayload ( ) , equalTo ( org.springframework.integration.amqp.channel.ChannelTests.Foo ) ) ; assertThat ( org.springframework.integration.amqp.channel.Message<> . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; this . org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel . send ( org.springframework.integration.amqp.channel.Message<> ) ; org.springframework.integration.amqp.channel.Message<?> = this . org.springframework.integration.amqp.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.channel.Message<> ) ; assertThat ( org.springframework.integration.amqp.channel.Message<> . getPayload ( ) , equalTo ( org.springframework.integration.amqp.channel.ChannelTests.Foo ) ) ; assertThat ( org.springframework.integration.amqp.channel.Message<> . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; this . org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel . send ( org.springframework.integration.amqp.channel.Message<> ) ; org.springframework.integration.amqp.channel.Message<?> = this . org.springframework.integration.amqp.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.channel.Message<> ) ; assertThat ( org.springframework.integration.amqp.channel.Message<> . getPayload ( ) , equalTo ( org.springframework.integration.amqp.channel.ChannelTests.Foo ) ) ; assertThat ( org.springframework.integration.amqp.channel.Message<> . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertSame ( this . org.springframework.integration.amqp.channel.AmqpHeaderMapper , TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.channel.PollableAmqpChannel , STRING ) ) ; assertSame ( this . org.springframework.integration.amqp.channel.AmqpHeaderMapper , TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.channel.PollableAmqpChannel , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RabbitTemplate org.springframework.integration.amqp.channel.RabbitTemplate = new RabbitTemplate ( this . org.springframework.integration.amqp.channel.CachingConnectionFactory ) ; MessageConverter org.springframework.integration.amqp.channel.MessageConverter = mock ( MessageConverter .class ) ; org.springframework.integration.amqp.channel.RabbitTemplate . setMessageConverter ( org.springframework.integration.amqp.channel.MessageConverter ) ; PointToPointSubscribableAmqpChannel org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel = new PointToPointSubscribableAmqpChannel ( STRING , new SimpleMessageListenerContainer ( this . org.springframework.integration.amqp.channel.CachingConnectionFactory ) , org.springframework.integration.amqp.channel.RabbitTemplate ) ; org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel . afterPropertiesSet ( ) ; MessageListener org.springframework.integration.amqp.channel.MessageListener = TestUtils . getPropertyValue ( org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel , STRING , MessageListener .class ) ; willThrow ( new MessageConversionException ( STRING , new java.lang.IllegalStateException ( STRING ) ) ) . given ( org.springframework.integration.amqp.channel.MessageConverter ) . fromMessage ( any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) ) ; this . org.springframework.integration.amqp.channel.ExpectedException . expect ( MessageConversionException .class ) ; this . org.springframework.integration.amqp.channel.ExpectedException . expectCause ( instanceOf ( java.lang.IllegalStateException .class ) ) ; org.springframework.integration.amqp.channel.MessageListener . onMessage ( mock ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ( ( this . java.lang.String == null ) ? NUMBER : this . java.lang.String . int ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( java.lang.Class<? extends org.springframework.integration.amqp.channel.ChannelTests.Foo> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.integration.amqp.channel.ChannelTests.Foo org.springframework.integration.amqp.channel.ChannelTests.Foo = ( org.springframework.integration.amqp.channel.ChannelTests.Foo ) java.lang.Object ; if ( this . java.lang.String == null ) { if ( org.springframework.integration.amqp.channel.ChannelTests.Foo . java.lang.String != null ) { return false ; } } else if ( ! this . java.lang.String . boolean ( org.springframework.integration.amqp.channel.ChannelTests.Foo . java.lang.String ) ) { return false ; } return true ; }  <METHOD_END>
