<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.domain.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.autoconfigure.domain.ExpectedException . expectMessage ( STRING ) ; new EntityScanner ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.domain.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.domain.EntityScannerTests.ScanConfig .class ) ; EntityScanner org.springframework.boot.autoconfigure.domain.EntityScanner = new EntityScanner ( org.springframework.boot.autoconfigure.domain.AnnotationConfigApplicationContext ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = org.springframework.boot.autoconfigure.domain.EntityScanner . scan ( Entity .class ) ; assertThat ( java.util.Set<java.lang.Class<?>> ) . containsOnly ( EntityA .class , EntityB .class , EntityC .class ) ; org.springframework.boot.autoconfigure.domain.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.domain.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.domain.EntityScannerTests.ScanAConfig .class , org.springframework.boot.autoconfigure.domain.EntityScannerTests.ScanBConfig .class ) ; EntityScanner org.springframework.boot.autoconfigure.domain.EntityScanner = new EntityScanner ( org.springframework.boot.autoconfigure.domain.AnnotationConfigApplicationContext ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = org.springframework.boot.autoconfigure.domain.EntityScanner . scan ( Entity .class ) ; assertThat ( java.util.Set<java.lang.Class<?>> ) . containsOnly ( EntityA .class , EntityB .class ) ; org.springframework.boot.autoconfigure.domain.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.domain.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.domain.EntityScannerTests.ScanConfig .class ) ; EntityScanner org.springframework.boot.autoconfigure.domain.EntityScanner = new EntityScanner ( org.springframework.boot.autoconfigure.domain.AnnotationConfigApplicationContext ) ; assertThat ( org.springframework.boot.autoconfigure.domain.EntityScanner . scan ( Entity .class ) ) . containsOnly ( EntityA .class , EntityB .class , EntityC .class ) ; assertThat ( org.springframework.boot.autoconfigure.domain.EntityScanner . scan ( Embeddable .class ) ) . containsOnly ( EmbeddableA .class , EmbeddableB .class , EmbeddableC .class ) ; assertThat ( org.springframework.boot.autoconfigure.domain.EntityScanner . scan ( Entity .class , Embeddable .class ) ) . containsOnly ( EntityA .class , EntityB .class , EntityC .class , EmbeddableA .class , EmbeddableB .class , EmbeddableC .class ) ; org.springframework.boot.autoconfigure.domain.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
