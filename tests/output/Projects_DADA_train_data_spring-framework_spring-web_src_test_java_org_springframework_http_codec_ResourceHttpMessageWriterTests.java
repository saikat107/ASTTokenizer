<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.http.codec.ResourceHttpMessageWriter . getWritableMediaTypes ( ) , containsInAnyOrder ( MimeTypeUtils . APPLICATION_OCTET_STREAM , MimeTypeUtils . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( get ( STRING ) . build ( ) ) ; assertThat ( this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentType ( ) , is ( TEXT_PLAIN ) ) ; assertThat ( this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentLength ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getFirst ( HttpHeaders . ACCEPT_RANGES ) , is ( STRING ) ) ; java.lang.String java.lang.String = STRING ; StepVerifier . create ( this . org.springframework.http.codec.MockServerHttpResponse . getBodyAsString ( ) ) . expectNext ( java.lang.String ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( get ( STRING ) . range ( org.springframework.http.codec.HttpRange ( NUMBER , NUMBER ) ) . build ( ) ) ; assertThat ( this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentType ( ) , is ( TEXT_PLAIN ) ) ; assertThat ( this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getFirst ( HttpHeaders . CONTENT_RANGE ) , is ( STRING ) ) ; assertThat ( this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentLength ( ) , is ( NUMBER ) ) ; StepVerifier . create ( this . org.springframework.http.codec.MockServerHttpResponse . getBodyAsString ( ) ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( get ( STRING ) . range ( org.springframework.http.codec.HttpRange ( NUMBER , NUMBER ) , org.springframework.http.codec.HttpRange ( NUMBER , NUMBER ) , org.springframework.http.codec.HttpRange ( NUMBER , NUMBER ) , org.springframework.http.codec.HttpRange ( NUMBER , NUMBER ) ) . build ( ) ) ; HttpHeaders org.springframework.http.codec.HttpHeaders = this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) ; java.lang.String java.lang.String = org.springframework.http.codec.HttpHeaders . getContentType ( ) . toString ( ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; assertThat ( java.lang.String , startsWith ( STRING ) ) ; StepVerifier . create ( this . org.springframework.http.codec.MockServerHttpResponse . getBodyAsString ( ) ) . consumeNextWith ( content -> { String [] actualRanges = StringUtils . tokenizeToStringArray ( content , STRING , false , true ) ; String [] expected = new String [] { STRING + boundary , STRING , STRING , STRING , STRING + boundary , STRING , STRING , STRING , STRING + boundary , STRING , STRING , STRING , STRING + boundary , STRING , STRING , STRING , STRING + boundary + STRING } ; assertArrayEquals ( expected , actualRanges ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( get ( STRING ) . header ( HttpHeaders . RANGE , STRING ) . build ( ) ) ; assertThat ( this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getFirst ( HttpHeaders . ACCEPT_RANGES ) , is ( STRING ) ) ; assertThat ( this . org.springframework.http.codec.MockServerHttpResponse . getStatusCode ( ) , is ( HttpStatus . REQUESTED_RANGE_NOT_SATISFIABLE ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockServerHttpRequest org.springframework.http.codec.MockServerHttpRequest ) { Mono < java.lang.Void > org.springframework.http.codec.Mono<java.lang.Void> = this . org.springframework.http.codec.ResourceHttpMessageWriter . write ( this . org.springframework.http.codec.Mono<org.springframework.http.codec.Resource> , null , null , TEXT_PLAIN , org.springframework.http.codec.MockServerHttpRequest , this . org.springframework.http.codec.MockServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; StepVerifier . create ( org.springframework.http.codec.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.http.codec.HttpRange org.springframework.http.codec.HttpRange ( int int , int int ) { return HttpRange . createByteRange ( int , int ) ; }  <METHOD_END>
