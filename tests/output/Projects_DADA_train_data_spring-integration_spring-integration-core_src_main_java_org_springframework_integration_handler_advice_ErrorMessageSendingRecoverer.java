<METHOD_START> public void ( MessageChannel org.springframework.integration.handler.advice.MessageChannel ) { Assert . notNull ( org.springframework.integration.handler.advice.MessageChannel , STRING ) ; this . org.springframework.integration.handler.advice.MessagingTemplate . setDefaultDestination ( org.springframework.integration.handler.advice.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.integration.handler.advice.MessagingTemplate . setSendTimeout ( long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.handler.advice.BeanFactory ) throws org.springframework.integration.handler.advice.BeansException { this . org.springframework.integration.handler.advice.MessagingTemplate . setBeanFactory ( org.springframework.integration.handler.advice.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( RetryContext org.springframework.integration.handler.advice.RetryContext ) throws java.lang.Exception { java.lang.Throwable java.lang.Throwable = org.springframework.integration.handler.advice.RetryContext . getLastThrowable ( ) ; if ( java.lang.Throwable == null ) { java.lang.Throwable = new org.springframework.integration.handler.advice.ErrorMessageSendingRecoverer.RetryExceptionNotAvailableException ( ( Message < ? > ) org.springframework.integration.handler.advice.RetryContext . getAttribute ( STRING ) , STRING + STRING + STRING + org.springframework.integration.handler.advice.RetryContext . toString ( ) ) ; } else if ( ! ( java.lang.Throwable instanceof MessagingException ) ) { java.lang.Throwable = new MessagingException ( ( Message < ? > ) org.springframework.integration.handler.advice.RetryContext . getAttribute ( STRING ) , java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable ) ; } if ( org.springframework.integration.handler.advice.Log . isDebugEnabled ( ) ) { java.lang.String java.lang.String = STRING + ( ( MessagingException ) java.lang.Throwable ) . getFailedMessage ( ) ; org.springframework.integration.handler.advice.Log . debug ( STRING + java.lang.String , java.lang.Throwable ) ; } this . org.springframework.integration.handler.advice.MessagingTemplate . send ( new ErrorMessage ( java.lang.Throwable ) ) ; return null ; }  <METHOD_END>
<METHOD_START> public void ( Message < ? > org.springframework.integration.handler.advice.Message<?> , java.lang.String java.lang.String ) { super( org.springframework.integration.handler.advice.Message<> , java.lang.String ); }  <METHOD_END>
