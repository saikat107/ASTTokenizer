<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; FileCopyUtils . copy ( java.lang.String . byte[] ( STRING ) , new java.io.FileOutputStream ( java.io.File , false ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.file.splitter.MessageChannel . send ( new GenericMessage < java.io.File > ( java.io.File ) ) ; Message < ? > org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.file.splitter.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.file.splitter.Message<> . getPayload ( ) ) ; assertEquals ( java.io.File , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( FileHeaders . ORIGINAL_FILE ) ) ; assertEquals ( java.io.File . java.lang.String ( ) , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( FileHeaders . FILENAME ) ) ; assertNull ( this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.file.splitter.MessageChannel . send ( new GenericMessage < java.lang.String > ( java.io.File . java.lang.String ( ) ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( java.io.File , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( FileHeaders . ORIGINAL_FILE ) ) ; assertEquals ( java.io.File . java.lang.String ( ) , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( FileHeaders . FILENAME ) ) ; assertNull ( this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.file.splitter.MessageChannel . send ( new GenericMessage < java.io.Reader > ( new java.io.FileReader ( java.io.File ) ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertNull ( this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.file.splitter.MessageChannel . send ( new GenericMessage < java.io.File > ( java.io.File ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertNull ( this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.file.splitter.MessageChannel . send ( new GenericMessage < java.io.InputStream > ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( STRING ) ) ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertNull ( this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ) ; try { this . org.springframework.integration.file.splitter.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( java.io.FileNotFoundException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } this . org.springframework.integration.file.splitter.MessageChannel . send ( new GenericMessage < java.util.Date > ( new java.util.Date ( ) ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; assertThat ( org.springframework.integration.file.splitter.Message<> . getPayload ( ) , instanceOf ( java.util.Date .class ) ) ; assertNull ( this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.file.splitter.MessageChannel . send ( new GenericMessage < java.io.File > ( java.io.File ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertNull ( this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.file.splitter.MessageChannel . send ( new GenericMessage < java.io.InputStream > ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( STRING ) ) ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; org.springframework.integration.file.splitter.Message<?> = this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertNull ( this . org.springframework.integration.file.splitter.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.file.splitter.QueueChannel = new QueueChannel ( ) ; FileSplitter org.springframework.integration.file.splitter.FileSplitter = new FileSplitter ( true , true ) ; org.springframework.integration.file.splitter.FileSplitter . setOutputChannel ( org.springframework.integration.file.splitter.QueueChannel ) ; org.springframework.integration.file.splitter.FileSplitter . handleMessage ( new GenericMessage < java.io.File > ( java.io.File ) ) ; Message < ? > org.springframework.integration.file.splitter.Message<?> = org.springframework.integration.file.splitter.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertNull ( org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; assertEquals ( STRING , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( FileHeaders . MARKER ) ) ; assertThat ( org.springframework.integration.file.splitter.Message<> . getPayload ( ) , instanceOf ( FileSplitter . FileSplitter .class ) ) ; FileMarker org.springframework.integration.file.splitter.FileMarker = ( FileSplitter . FileSplitter ) org.springframework.integration.file.splitter.Message<> . getPayload ( ) ; assertEquals ( FileSplitter . FileMarker . Mark . START , org.springframework.integration.file.splitter.FileMarker . getMark ( ) ) ; assertEquals ( java.io.File . java.lang.String ( ) , org.springframework.integration.file.splitter.FileMarker . getFilePath ( ) ) ; assertNotNull ( org.springframework.integration.file.splitter.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.file.splitter.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.file.splitter.Message<?> = org.springframework.integration.file.splitter.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( FileHeaders . MARKER ) ) ; assertThat ( org.springframework.integration.file.splitter.Message<> . getPayload ( ) , instanceOf ( FileSplitter . FileSplitter .class ) ) ; org.springframework.integration.file.splitter.FileMarker = ( FileSplitter . FileSplitter ) org.springframework.integration.file.splitter.Message<> . getPayload ( ) ; assertEquals ( FileSplitter . FileMarker . Mark . END , org.springframework.integration.file.splitter.FileMarker . getMark ( ) ) ; assertEquals ( java.io.File . java.lang.String ( ) , org.springframework.integration.file.splitter.FileMarker . getFilePath ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.FileMarker . getLineCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { QueueChannel org.springframework.integration.file.splitter.QueueChannel = new QueueChannel ( ) ; FileSplitter org.springframework.integration.file.splitter.FileSplitter = new FileSplitter ( true , true ) ; org.springframework.integration.file.splitter.FileSplitter . setOutputChannel ( org.springframework.integration.file.splitter.QueueChannel ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; org.springframework.integration.file.splitter.FileSplitter . handleMessage ( new GenericMessage < java.io.File > ( java.io.File ) ) ; Message < ? > org.springframework.integration.file.splitter.Message<?> = org.springframework.integration.file.splitter.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertNull ( org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; assertEquals ( STRING , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( FileHeaders . MARKER ) ) ; assertThat ( org.springframework.integration.file.splitter.Message<> . getPayload ( ) , instanceOf ( FileSplitter . FileSplitter .class ) ) ; FileMarker org.springframework.integration.file.splitter.FileMarker = ( FileSplitter . FileSplitter ) org.springframework.integration.file.splitter.Message<> . getPayload ( ) ; assertEquals ( FileMarker . Mark . START , org.springframework.integration.file.splitter.FileMarker . getMark ( ) ) ; assertEquals ( java.io.File . java.lang.String ( ) , org.springframework.integration.file.splitter.FileMarker . getFilePath ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.FileMarker . getLineCount ( ) ) ; org.springframework.integration.file.splitter.Message<?> = org.springframework.integration.file.splitter.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( FileHeaders . MARKER ) ) ; assertThat ( org.springframework.integration.file.splitter.Message<> . getPayload ( ) , instanceOf ( FileSplitter . FileSplitter .class ) ) ; org.springframework.integration.file.splitter.FileMarker = ( FileSplitter . FileSplitter ) org.springframework.integration.file.splitter.Message<> . getPayload ( ) ; assertEquals ( FileMarker . Mark . END , org.springframework.integration.file.splitter.FileMarker . getMark ( ) ) ; assertEquals ( java.io.File . java.lang.String ( ) , org.springframework.integration.file.splitter.FileMarker . getFilePath ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.FileMarker . getLineCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonObjectMapper < ? , ? > org.springframework.integration.file.splitter.JsonObjectMapper<?,?> = JsonObjectMapperProvider . newInstance ( ) ; QueueChannel org.springframework.integration.file.splitter.QueueChannel = new QueueChannel ( ) ; FileSplitter org.springframework.integration.file.splitter.FileSplitter = new FileSplitter ( true , true , true ) ; org.springframework.integration.file.splitter.FileSplitter . setOutputChannel ( org.springframework.integration.file.splitter.QueueChannel ) ; org.springframework.integration.file.splitter.FileSplitter . handleMessage ( new GenericMessage < java.io.File > ( java.io.File ) ) ; Message < ? > org.springframework.integration.file.splitter.Message<?> = org.springframework.integration.file.splitter.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertNull ( org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; assertEquals ( STRING , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( FileHeaders . MARKER ) ) ; assertThat ( org.springframework.integration.file.splitter.Message<> . getPayload ( ) , instanceOf ( java.lang.String .class ) ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.file.splitter.Message<> . getPayload ( ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; FileMarker org.springframework.integration.file.splitter.FileMarker = org.springframework.integration.file.splitter.JsonObjectMapper<,> . fromJson ( java.lang.String , FileSplitter . FileSplitter .class ) ; assertEquals ( FileSplitter . FileMarker . Mark . START , org.springframework.integration.file.splitter.FileMarker . getMark ( ) ) ; assertEquals ( java.io.File . java.lang.String ( ) , org.springframework.integration.file.splitter.FileMarker . getFilePath ( ) ) ; assertNotNull ( org.springframework.integration.file.splitter.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.file.splitter.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.file.splitter.Message<?> = org.springframework.integration.file.splitter.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.file.splitter.Message<> . getHeaders ( ) . get ( FileHeaders . MARKER ) ) ; assertThat ( org.springframework.integration.file.splitter.Message<> . getPayload ( ) , instanceOf ( java.lang.String .class ) ) ; org.springframework.integration.file.splitter.FileMarker = org.springframework.integration.file.splitter.JsonObjectMapper<,> . fromJson ( ( java.lang.String ) org.springframework.integration.file.splitter.Message<> . getPayload ( ) , FileSplitter . FileSplitter .class ) ; assertEquals ( FileSplitter . FileMarker . Mark . END , org.springframework.integration.file.splitter.FileMarker . getMark ( ) ) ; assertEquals ( java.io.File . java.lang.String ( ) , org.springframework.integration.file.splitter.FileMarker . getFilePath ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.splitter.FileMarker . getLineCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.splitter.PollableChannel org.springframework.integration.file.splitter.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Splitter ( inputChannel = STRING ) public org.springframework.integration.file.splitter.MessageHandler org.springframework.integration.file.splitter.MessageHandler ( ) { FileSplitter org.springframework.integration.file.splitter.FileSplitter = new FileSplitter ( true ) ; org.springframework.integration.file.splitter.FileSplitter . setOutputChannel ( org.springframework.integration.file.splitter.PollableChannel ( ) ) ; return org.springframework.integration.file.splitter.FileSplitter ; }  <METHOD_END>
<METHOD_START> @ Bean @ Splitter ( inputChannel = STRING ) public org.springframework.integration.file.splitter.MessageHandler org.springframework.integration.file.splitter.MessageHandler ( ) { FileSplitter org.springframework.integration.file.splitter.FileSplitter = new FileSplitter ( ) ; org.springframework.integration.file.splitter.FileSplitter . setCharset ( java.nio.charset.Charset . java.nio.charset.Charset ( ) ) ; org.springframework.integration.file.splitter.FileSplitter . setOutputChannel ( org.springframework.integration.file.splitter.PollableChannel ( ) ) ; return org.springframework.integration.file.splitter.FileSplitter ; }  <METHOD_END>
