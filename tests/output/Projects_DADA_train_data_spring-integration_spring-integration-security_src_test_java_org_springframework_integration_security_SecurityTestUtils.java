<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.security.SecurityContext org.springframework.integration.security.SecurityContext ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { SecurityContextImpl org.springframework.integration.security.SecurityContextImpl = new SecurityContextImpl ( ) ; UsernamePasswordAuthenticationToken org.springframework.integration.security.UsernamePasswordAuthenticationToken ; if ( java.lang.String[] != null && java.lang.String[] . int > NUMBER ) { GrantedAuthority [] org.springframework.integration.security.GrantedAuthority[] = new GrantedAuthority [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { org.springframework.integration.security.GrantedAuthority[] [ int ] = new SimpleGrantedAuthority ( java.lang.String[] [ int ] ) ; } org.springframework.integration.security.UsernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken ( java.lang.String , java.lang.String , java.util.Arrays . java.util.List ( org.springframework.integration.security.GrantedAuthority[] ) ) ; } else { org.springframework.integration.security.UsernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken ( java.lang.String , java.lang.String ) ; } org.springframework.integration.security.SecurityContextImpl . setAuthentication ( org.springframework.integration.security.UsernamePasswordAuthenticationToken ) ; return org.springframework.integration.security.SecurityContextImpl ; }  <METHOD_END>
