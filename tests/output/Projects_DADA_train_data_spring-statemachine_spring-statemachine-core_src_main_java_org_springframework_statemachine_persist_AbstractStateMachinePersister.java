<METHOD_START> public void ( StateMachinePersist < S , E , T > org.springframework.statemachine.persist.StateMachinePersist<S,E,T> ) { Assert . notNull ( org.springframework.statemachine.persist.StateMachinePersist<S,E,T> , STRING ) ; this . org.springframework.statemachine.persist.StateMachinePersist<S,E,T> = org.springframework.statemachine.persist.StateMachinePersist<S,E,T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( StateMachine < S , E > org.springframework.statemachine.persist.StateMachine<S,E> , T T ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachinePersist<S,E,T> . write ( org.springframework.statemachine.persist.StateMachineContext<S,E> ( org.springframework.statemachine.persist.StateMachine<S,E> ) , T ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.statemachine.persist.StateMachine<S,E> < S , E > org.springframework.statemachine.persist.StateMachine<S,E> ( StateMachine < S , E > org.springframework.statemachine.persist.StateMachine<S,E> , T T ) throws java.lang.Exception { final StateMachineContext < S , E > org.springframework.statemachine.persist.StateMachineContext<S,E> = org.springframework.statemachine.persist.StateMachinePersist<S,E,T> . read ( T ) ; org.springframework.statemachine.persist.StateMachine<S,E> . stop ( ) ; org.springframework.statemachine.persist.StateMachine<S,E> . getStateMachineAccessor ( ) . doWithAllRegions ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.persist.StateMachineAccess<S,E> ) { org.springframework.statemachine.persist.StateMachineAccess<S,E> . resetStateMachine ( org.springframework.statemachine.persist.StateMachineContext<S,E> ) ; } } ) ; org.springframework.statemachine.persist.StateMachine<S,E> . start ( ) ; return org.springframework.statemachine.persist.StateMachine<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.persist.StateMachineAccess<S,E> ) { org.springframework.statemachine.persist.StateMachineAccess<S,E> . resetStateMachine ( org.springframework.statemachine.persist.StateMachineContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.persist.StateMachineContext<S,E> < S , E > org.springframework.statemachine.persist.StateMachineContext<S,E> ( StateMachine < S , E > org.springframework.statemachine.persist.StateMachine<S,E> ) { ExtendedState org.springframework.statemachine.persist.ExtendedState = new DefaultExtendedState ( ) ; org.springframework.statemachine.persist.ExtendedState . getVariables ( ) . putAll ( org.springframework.statemachine.persist.StateMachine<S,E> . getExtendedState ( ) . getVariables ( ) ) ; java.util.ArrayList<org.springframework.statemachine.persist.StateMachineContext<S,E>> < StateMachineContext < S , E > > java.util.ArrayList<org.springframework.statemachine.persist.StateMachineContext<S,E>> = new java.util.ArrayList<org.springframework.statemachine.persist.StateMachineContext<S,E>> < StateMachineContext < S , E > > ( ) ; S S = null ; State < S , E > org.springframework.statemachine.persist.State<S,E> = org.springframework.statemachine.persist.StateMachine<S,E> . getState ( ) ; if ( org.springframework.statemachine.persist.State<S,E> . isSubmachineState ( ) ) { java.util.Collection<S> < S > java.util.Collection<S> = org.springframework.statemachine.persist.State<S,E> . getIds ( ) ; @ java.lang.SuppressWarnings ( STRING ) S [] S[] = ( S [] ) java.util.Collection<S> . java.lang.Object[] ( ) ; S = S[] [ S[] . int - NUMBER ] ; } else if ( org.springframework.statemachine.persist.State<S,E> . isOrthogonal ( ) ) { java.util.Collection<org.springframework.statemachine.persist.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.persist.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.persist.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.persist.Region<S,E> : java.util.Collection<org.springframework.statemachine.persist.Region<S,E>> ) { S S = org.springframework.statemachine.persist.Region<S,E> . getState ( ) . getId ( ) ; java.util.ArrayList<org.springframework.statemachine.persist.StateMachineContext<S,E>> . add ( new DefaultStateMachineContext < S , E > ( S , null , null , null ) ) ; } S = org.springframework.statemachine.persist.State<S,E> . getId ( ) ; } else { S = org.springframework.statemachine.persist.State<S,E> . getId ( ) ; } java.util.Map<S,S> < S , S > java.util.Map<S,S> = new java.util.HashMap<S,S> < S , S > ( ) ; PseudoState < S , E > org.springframework.statemachine.persist.PseudoState<S,E> = ( ( AbstractStateMachine < S , E > ) org.springframework.statemachine.persist.StateMachine<S,E> ) . getHistoryState ( ) ; if ( org.springframework.statemachine.persist.PseudoState<S,E> != null ) { java.util.Map<S,S> . S ( null , ( ( HistoryPseudoState < S , E > ) org.springframework.statemachine.persist.PseudoState<S,E> ) . getState ( ) . getId ( ) ) ; } java.util.Collection<org.springframework.statemachine.persist.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.persist.State<S,E>> = org.springframework.statemachine.persist.StateMachine<S,E> . getStates ( ) ; for ( State < S , E > org.springframework.statemachine.persist.State<S,E> : java.util.Collection<org.springframework.statemachine.persist.State<S,E>> ) { if ( org.springframework.statemachine.persist.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.persist.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.persist.State<S,E> ) . getSubmachine ( ) ; PseudoState < S , E > org.springframework.statemachine.persist.PseudoState<S,E> = ( ( AbstractStateMachine < S , E > ) org.springframework.statemachine.persist.StateMachine<S,E> ) . getHistoryState ( ) ; if ( org.springframework.statemachine.persist.PseudoState<S,E> != null ) { State < S , E > org.springframework.statemachine.persist.State<S,E> = ( ( HistoryPseudoState < S , E > ) org.springframework.statemachine.persist.PseudoState<S,E> ) . getState ( ) ; if ( org.springframework.statemachine.persist.State<S,E> != null ) { java.util.Map<S,S> . S ( org.springframework.statemachine.persist.State<S,E> . getId ( ) , org.springframework.statemachine.persist.State<S,E> . getId ( ) ) ; } } } } return new DefaultStateMachineContext < S , E > ( java.util.ArrayList<org.springframework.statemachine.persist.StateMachineContext<S,E>> , S , null , null , org.springframework.statemachine.persist.ExtendedState , java.util.Map<S,S> , org.springframework.statemachine.persist.StateMachine<S,E> . getId ( ) ) ; }  <METHOD_END>
