<METHOD_START> @ Before public void void ( ) java.lang.Exception { ConfigurableWebBindingInitializer org.springframework.web.servlet.mvc.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.servlet.mvc.method.annotation.ConfigurableWebBindingInitializer . setValidator ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.StubValidator ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletWebArgumentResolverAdapter ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.ColorArgumentResolver ( ) ) ) ; GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . refresh ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter = new RequestMappingHandlerAdapter ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setWebBindingInitializer ( org.springframework.web.servlet.mvc.method.annotation.ConfigurableWebBindingInitializer ) ; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setCustomArgumentResolvers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) ; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) ; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . setBeanFactory ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; RequestContextHolder . setRequestAttributes ( new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [] { int .class , java.lang.String .class , java.lang.String .class , java.lang.String .class , java.util.Map .class , java.util.Date .class , java.util.Map .class , java.lang.String .class , java.lang.String .class , TestBean .class , Errors .class , TestBean .class , java.awt.Color .class , HttpServletRequest .class , HttpServletResponse .class , TestBean .class , TestBean .class , org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.User .class , org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.OtherUser .class , Model .class , UriComponentsBuilder .class } ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.util.Date java.util.Date = new java.util.GregorianCalendar ( NUMBER , java.util.Calendar . int , NUMBER ) . java.util.Date ( ) ; TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = new TestBean ( ) ; TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = new TestBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setCookies ( new Cookie ( STRING , STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setUserPrincipal ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.User ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setServletPath ( STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) . setAttribute ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( STRING , java.lang.Class<?>[] ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap = org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModelMap ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getViewName ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; assertEquals ( java.util.Date , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ; assertEquals ( java.lang.String , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = ( TestBean ) org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.TestBean . getAge ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.TestBean , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) . getAttribute ( STRING ) ) ; BindingResult org.springframework.web.servlet.mvc.method.annotation.BindingResult = ( BindingResult ) org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( BindingResult . MODEL_KEY_PREFIX + STRING ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.TestBean , org.springframework.web.servlet.mvc.method.annotation.BindingResult . getTarget ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.BindingResult . getErrorCount ( ) ) ; java.lang.String java.lang.String = STRING ; TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = ( TestBean ) org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.TestBean . getAge ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.TestBean , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) . getAttribute ( java.lang.String ) ) ; org.springframework.web.servlet.mvc.method.annotation.BindingResult = ( BindingResult ) org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( BindingResult . MODEL_KEY_PREFIX + java.lang.String ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.TestBean , org.springframework.web.servlet.mvc.method.annotation.BindingResult . getTarget ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) instanceof java.awt.Color ) ; assertEquals ( org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.User .class , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) . getClass ( ) ) ; assertEquals ( org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.OtherUser .class , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) . getClass ( ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.TestBean , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.TestBean , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; assertEquals ( new java.net.URI ( STRING ) , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [] { byte [] .class } ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( STRING , java.lang.Class<?>[] ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) , STRING ) ) ; assertEquals ( HttpStatus . ACCEPTED . value ( ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [] { TestBean .class , Errors .class } ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( STRING , java.lang.Class<?>[] ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) , STRING ) ) ; assertEquals ( HttpStatus . ACCEPTED . value ( ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [] { HttpEntity .class } ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( STRING , java.lang.Class<?>[] ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertEquals ( HttpStatus . ACCEPTED . value ( ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) , STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [] { HttpEntity .class } ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( STRING , java.lang.Class<?>[] ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertEquals ( HttpStatus . OK . value ( ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) , STRING ) ) ; assertThat ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeaderValues ( STRING ) , Matchers . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING , STRING , STRING . byte[] ( STRING ) ) ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( STRING , java.lang.String .class , Model .class ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModelMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING , STRING , STRING . byte[] ( STRING ) ) ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( STRING , java.lang.String .class , Errors .class , Model .class ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModelMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( STRING , SessionStatus .class ) ; org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) . getAttributeNames ( ) . hasMoreElements ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; return new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder ( STRING ) public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.lang.String java.lang.String ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , new CustomDateEditor ( java.text.SimpleDateFormat , false ) ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public void void ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = new TestBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.TestBean . setName ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean ) ; org.springframework.web.servlet.mvc.method.annotation.TestBean = new TestBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.TestBean . setName ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( org.springframework.web.servlet.mvc.method.annotation.TestBean ) ; org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( new org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.OtherUser ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ CookieValue ( STRING ) int int , @ PathVariable ( STRING ) java.lang.String java.lang.String , @ RequestHeader ( STRING ) java.lang.String java.lang.String , @ RequestHeader ( defaultValue = STRING ) java.lang.String java.lang.String , @ RequestHeader java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , @ RequestParam ( STRING ) java.util.Date java.util.Date , @ RequestParam java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String , @ Value ( STRING ) java.lang.String java.lang.String , @ ModelAttribute ( STRING ) @ Valid TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , Errors org.springframework.web.servlet.mvc.method.annotation.Errors , TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , java.awt.Color java.awt.Color , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , @ SessionAttribute TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , @ RequestAttribute TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.User org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.User , @ ModelAttribute org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.OtherUser org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.OtherUser , Model org.springframework.web.servlet.mvc.method.annotation.Model , UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder ) throws java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , int ) . addAttribute ( STRING , java.lang.String ) . addAttribute ( STRING , java.lang.String ) . addAttribute ( STRING , java.lang.String ) . addAttribute ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . addAttribute ( STRING , java.util.Date ) . addAttribute ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . addAttribute ( STRING , java.lang.String ) . addAttribute ( STRING , java.lang.String ) . addAttribute ( STRING , java.awt.Color ) . addAttribute ( org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.User ) . addAttribute ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean ) . addAttribute ( STRING , org.springframework.web.servlet.mvc.method.annotation.TestBean ) . addAttribute ( STRING , org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder . path ( STRING ) . build ( ) . toUri ( ) ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ ResponseStatus ( HttpStatus . ACCEPTED ) @ ResponseBody public java.lang.String java.lang.String ( @ RequestBody byte [] byte[] ) throws java.lang.Exception { java.lang.String java.lang.String = new java.lang.String ( byte[] , STRING ) ; return STRING + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ ResponseStatus ( code = HttpStatus . ACCEPTED ) @ ResponseBody public java.lang.String java.lang.String ( @ Valid TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , Errors org.springframework.web.servlet.mvc.method.annotation.Errors ) throws java.lang.Exception { return STRING + org.springframework.web.servlet.mvc.method.annotation.Errors . getErrorCount ( ) + STRING ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ( HttpEntity < byte [] > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<byte[]> ) throws java.lang.Exception { java.lang.String java.lang.String = STRING + new java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<byte[]> . getBody ( ) , STRING ) + STRING ; return ResponseEntity . accepted ( ) . header ( STRING , STRING ) . body ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ( HttpEntity < byte [] > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<byte[]> ) throws java.lang.Exception { java.lang.String java.lang.String = STRING + new java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<byte[]> . getBody ( ) , STRING ) + STRING ; return ResponseEntity . ok ( ) . cacheControl ( CacheControl . maxAge ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . body ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ RequestPart java.lang.String java.lang.String , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ RequestPart @ Valid java.lang.String java.lang.String , Errors org.springframework.web.servlet.mvc.method.annotation.Errors , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , org.springframework.web.servlet.mvc.method.annotation.Errors . getErrorCount ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( SessionStatus org.springframework.web.servlet.mvc.method.annotation.SessionStatus ) { org.springframework.web.servlet.mvc.method.annotation.SessionStatus . setComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.web.servlet.mvc.method.annotation.Errors ) { org.springframework.web.servlet.mvc.method.annotation.Errors . reject ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) throws java.lang.Exception { return new java.awt.Color ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
