<METHOD_START> public void ( ) { org.springframework.data.gemfire.repository.cdi.Logger . info ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) < X > void void ( @ Observes ProcessBean < X > org.springframework.data.gemfire.repository.cdi.ProcessBean<X> ) { Bean < X > org.springframework.data.gemfire.repository.cdi.Bean<X> = org.springframework.data.gemfire.repository.cdi.ProcessBean<X> . getBean ( ) ; for ( java.lang.reflect.Type java.lang.reflect.Type : org.springframework.data.gemfire.repository.cdi.Bean<X> . getTypes ( ) ) { java.lang.reflect.Type java.lang.reflect.Type = ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ? ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type ( ) : java.lang.reflect.Type ) ; if ( java.lang.reflect.Type instanceof java.lang.Class<?> < ? > ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ; if ( Region .class . boolean ( java.lang.Class<> ) ) { org.springframework.data.gemfire.repository.cdi.Logger . debug ( STRING , org.springframework.data.gemfire.repository.cdi.Bean<X> . getName ( ) ) ; java.util.Set<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> . add ( ( Bean < Region > ) org.springframework.data.gemfire.repository.cdi.Bean<X> ) ; } else if ( GemfireMappingContext .class . boolean ( java.lang.Class<> ) ) { org.springframework.data.gemfire.repository.cdi.Logger . debug ( STRING , GemfireMappingContext .class . java.lang.String ( ) , org.springframework.data.gemfire.repository.cdi.Bean<X> . getTypes ( ) , org.springframework.data.gemfire.repository.cdi.Bean<X> . getQualifiers ( ) ) ; java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext>> . put ( org.springframework.data.gemfire.repository.cdi.Bean<X> . getQualifiers ( ) , ( Bean < GemfireMappingContext > ) org.springframework.data.gemfire.repository.cdi.Bean<X> ) ; } } } }  <METHOD_END>
<METHOD_START> void void ( @ Observes AfterBeanDiscovery org.springframework.data.gemfire.repository.cdi.AfterBeanDiscovery , BeanManager org.springframework.data.gemfire.repository.cdi.BeanManager ) { for ( java.util.Map . java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> < java.lang.Class<?> < ? > , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> : getRepositoryTypes ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> . java.lang.Class<?> ( ) ; java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> . java.util.Set<java.lang.annotation.Annotation> ( ) ; CdiRepositoryBean < ? > org.springframework.data.gemfire.repository.cdi.CdiRepositoryBean<?> = org.springframework.data.gemfire.repository.cdi.CdiRepositoryBean ( org.springframework.data.gemfire.repository.cdi.BeanManager , java.lang.Class<> , java.util.Set<java.lang.annotation.Annotation> ) ; org.springframework.data.gemfire.repository.cdi.Logger . info ( STRING , java.lang.Class<> . java.lang.String ( ) , java.util.Set<java.lang.annotation.Annotation> ) ; registerBean ( org.springframework.data.gemfire.repository.cdi.CdiRepositoryBean<> ) ; org.springframework.data.gemfire.repository.cdi.AfterBeanDiscovery . addBean ( org.springframework.data.gemfire.repository.cdi.CdiRepositoryBean<> ) ; } }  <METHOD_END>
<METHOD_START> < T > org.springframework.data.gemfire.repository.cdi.CdiRepositoryBean<T> < T > org.springframework.data.gemfire.repository.cdi.CdiRepositoryBean<T> ( BeanManager org.springframework.data.gemfire.repository.cdi.BeanManager , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ) { Bean < GemfireMappingContext > org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> = java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext>> . get ( java.util.Set<java.lang.annotation.Annotation> ) ; return new GemfireRepositoryBean < T > ( org.springframework.data.gemfire.repository.cdi.BeanManager , java.lang.Class<T> , java.util.Set<java.lang.annotation.Annotation> , getCustomImplementationDetector ( ) , org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> , java.util.Set<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) ; }  <METHOD_END>
