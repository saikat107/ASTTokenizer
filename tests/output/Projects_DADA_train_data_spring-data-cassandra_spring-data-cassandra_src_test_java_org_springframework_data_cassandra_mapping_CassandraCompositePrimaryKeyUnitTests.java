<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) return true ; if ( java.lang.Object == null ) return false ; if ( java.lang.Class<? extends org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Key> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) return false ; org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Key org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Key = ( org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Key ) java.lang.Object ; if ( java.lang.String == null ) { if ( org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Key . java.lang.String != null ) return false ; } else if ( ! java.lang.String . boolean ( org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Key . java.lang.String ) ) return false ; if ( java.lang.String == null ) { if ( org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Key . java.lang.String != null ) return false ; } else if ( ! java.lang.String . boolean ( org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Key . java.lang.String ) ) return false ; return true ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.mapping.CassandraMappingContext = new BasicCassandraMappingContext ( ) ; org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.CassandraMappingContext . getRequiredPersistentEntity ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Thing .class ) ) ; org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.CassandraMappingContext . getRequiredPersistentEntity ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Key .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.cassandra.mapping.CassandraCompositePrimaryKeyUnitTests.Thing .class , STRING ) ; CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = new BasicCassandraPersistentProperty ( Property . of ( java.lang.reflect.Field ) , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , org.springframework.data.cassandra.mapping.CassandraSimpleTypeHolder ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isIdProperty ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . isTrue ( ) ; java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> < CqlIdentifier > java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> = java.util.Arrays . java.util.List ( cqlId ( STRING ) , cqlId ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . equals ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnNames ( ) ) ) . isTrue ( ) ; java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> < CqlIdentifier > java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> = new java.util.ArrayList<org.springframework.data.cassandra.mapping.CqlIdentifier> <> ( ) ; java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> = org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getCompositePrimaryKeyProperties ( ) ; for ( CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty : java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ) { java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . addAll ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnNames ( ) ) ; } assertThat ( java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> . equals ( java.util.List<org.springframework.data.cassandra.mapping.CqlIdentifier> ) ) . isTrue ( ) ; CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CassandraMappingContext . getCreateTableSpecificationFor ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; java.util.List<org.springframework.data.cassandra.mapping.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.data.cassandra.mapping.ColumnSpecification> = org.springframework.data.cassandra.mapping.CreateTableSpecification . getPartitionKeyColumns ( ) ; assertThat ( java.util.List<org.springframework.data.cassandra.mapping.ColumnSpecification> ) . hasSize ( NUMBER ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = java.util.List<org.springframework.data.cassandra.mapping.ColumnSpecification> . get ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getKeyType ( ) ) . isEqualTo ( PrimaryKeyType . PARTITIONED ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getType ( ) ) . isEqualTo ( DataType . text ( ) ) ; java.util.List<org.springframework.data.cassandra.mapping.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.data.cassandra.mapping.ColumnSpecification> = org.springframework.data.cassandra.mapping.CreateTableSpecification . getClusteredKeyColumns ( ) ; assertThat ( java.util.List<org.springframework.data.cassandra.mapping.ColumnSpecification> ) . hasSize ( NUMBER ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = java.util.List<org.springframework.data.cassandra.mapping.ColumnSpecification> . get ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getKeyType ( ) ) . isEqualTo ( PrimaryKeyType . CLUSTERED ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getType ( ) ) . isEqualTo ( DataType . text ( ) ) ; }  <METHOD_END>
