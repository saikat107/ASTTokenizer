<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; ResourceMapping org.springframework.data.rest.core.mapping.ResourceMapping = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.rest.core.mapping.ResourceMapping . getPath ( ) ) . isEqualTo ( new Path ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; ResourceMapping org.springframework.data.rest.core.mapping.ResourceMapping = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.rest.core.mapping.ResourceMapping . getPath ( ) ) . isEqualTo ( new Path ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodResourceMapping org.springframework.data.rest.core.mapping.MethodResourceMapping = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.rest.core.mapping.MethodResourceMapping . getParametersMetadata ( ) . getParameterNames ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodResourceMapping org.springframework.data.rest.core.mapping.MethodResourceMapping = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.rest.core.mapping.MethodResourceMapping . getParametersMetadata ( ) . getParameterNames ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.rest.core.mapping.MethodResourceMapping . getParametersMetadata ( ) . getParameterNames ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; MethodResourceMapping org.springframework.data.rest.core.mapping.MethodResourceMapping = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.rest.core.mapping.MethodResourceMapping . isPagingResource ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; MethodResourceMapping org.springframework.data.rest.core.mapping.MethodResourceMapping = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.rest.core.mapping.MethodResourceMapping . getRel ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Sort .class ) ; RepositoryMethodResourceMapping org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping . isSortableResource ( ) ) . isTrue ( ) ; java.lang.reflect.Method = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping . isSortableResource ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodResourceMapping org.springframework.data.rest.core.mapping.MethodResourceMapping = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.rest.core.mapping.MethodResourceMapping . getReturnedDomainType ( ) ) . isEqualTo ( ( java.lang.Class ) org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; RepositoryMethodResourceMapping org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping = org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping . getParametersMetadata ( ) . getParameterNames ( ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping org.springframework.data.rest.core.mapping.RepositoryMethodResourceMapping ( java.lang.reflect.Method java.lang.reflect.Method ) { return new RepositoryMethodResourceMapping ( java.lang.reflect.Method , org.springframework.data.rest.core.mapping.RepositoryCollectionResourceMapping , org.springframework.data.rest.core.mapping.RepositoryMetadata ) ; }  <METHOD_END>
<METHOD_START> java.lang.Iterable<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> < org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person > java.lang.Iterable<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ RestResource ( path = STRING ) java.lang.Iterable<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> < org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person > java.lang.Iterable<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> ( @ Param ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ RestResource ( path = STRING ) java.lang.Iterable<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> < org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person > java.lang.Iterable<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ RestResource ( path = STRING ) org.springframework.data.rest.core.mapping.Page<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> < org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person > org.springframework.data.rest.core.mapping.Page<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> ( java.lang.String java.lang.String , Pageable org.springframework.data.rest.core.mapping.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.rest.core.mapping.Page<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> < org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person > org.springframework.data.rest.core.mapping.Page<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> ( java.lang.String java.lang.String , Sort org.springframework.data.rest.core.mapping.Sort );  <METHOD_END>
<METHOD_START> int int ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.rest.core.mapping.Page<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> < org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person > org.springframework.data.rest.core.mapping.Page<org.springframework.data.rest.core.mapping.RepositoryMethodResourceMappingUnitTests.Person> ( @ Param ( STRING ) java.lang.String java.lang.String , @ Param ( STRING ) Pageable org.springframework.data.rest.core.mapping.Pageable );  <METHOD_END>
