<METHOD_START> public void ( Tomcat org.springframework.boot.web.embedded.tomcat.Tomcat ) { this( org.springframework.boot.web.embedded.tomcat.Tomcat , true ); }  <METHOD_END>
<METHOD_START> public void ( Tomcat org.springframework.boot.web.embedded.tomcat.Tomcat , boolean boolean ) { Assert . notNull ( org.springframework.boot.web.embedded.tomcat.Tomcat , STRING ) ; this . org.springframework.boot.web.embedded.tomcat.Tomcat = org.springframework.boot.web.embedded.tomcat.Tomcat ; this . boolean = boolean ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.boot.web.embedded.tomcat.WebServerException { org.springframework.boot.web.embedded.tomcat.TomcatWebServer . org.springframework.boot.web.embedded.tomcat.Log . info ( STRING + java.lang.String ( false ) ) ; synchronized ( this . java.lang.Object ) { try { void ( ) ; void ( ) ; this . org.springframework.boot.web.embedded.tomcat.Tomcat . start ( ) ; Context org.springframework.boot.web.embedded.tomcat.Context = org.springframework.boot.web.embedded.tomcat.Context ( ) ; try { ContextBindings . bindClassLoader ( org.springframework.boot.web.embedded.tomcat.Context , org.springframework.boot.web.embedded.tomcat.Context . getNamingToken ( ) , java.lang.Class<? extends org.springframework.boot.web.embedded.tomcat.TomcatWebServer> ( ) . java.lang.ClassLoader ( ) ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { } void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new WebServerException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.tomcat.Context org.springframework.boot.web.embedded.tomcat.Context ( ) { for ( Container org.springframework.boot.web.embedded.tomcat.Container : this . org.springframework.boot.web.embedded.tomcat.Tomcat . getHost ( ) . findChildren ( ) ) { if ( org.springframework.boot.web.embedded.tomcat.Container instanceof Context ) { return ( Context ) org.springframework.boot.web.embedded.tomcat.Container ; } } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { int int = java.util.concurrent.atomic.AtomicInteger . int ( ) ; if ( int > NUMBER ) { Engine org.springframework.boot.web.embedded.tomcat.Engine = this . org.springframework.boot.web.embedded.tomcat.Tomcat . getEngine ( ) ; org.springframework.boot.web.embedded.tomcat.Engine . setName ( org.springframework.boot.web.embedded.tomcat.Engine . getName ( ) + STRING + int ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( Service org.springframework.boot.web.embedded.tomcat.Service : this . org.springframework.boot.web.embedded.tomcat.Tomcat . getServer ( ) . findServices ( ) ) { Connector [] org.springframework.boot.web.embedded.tomcat.Connector[] = org.springframework.boot.web.embedded.tomcat.Service . findConnectors ( ) . clone ( ) ; this . java.util.Map<org.springframework.boot.web.embedded.tomcat.Service,org.springframework.boot.web.embedded.tomcat.Connector[]> . put ( org.springframework.boot.web.embedded.tomcat.Service , org.springframework.boot.web.embedded.tomcat.Connector[] ) ; for ( Connector org.springframework.boot.web.embedded.tomcat.Connector : org.springframework.boot.web.embedded.tomcat.Connector[] ) { org.springframework.boot.web.embedded.tomcat.Service . removeConnector ( org.springframework.boot.web.embedded.tomcat.Connector ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.Thread java.lang.Thread = new java.lang.Thread ( STRING + ( java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) { @ java.lang.Override public void void ( ) { org.springframework.boot.web.embedded.tomcat.TomcatWebServer .this . org.springframework.boot.web.embedded.tomcat.Tomcat . getServer ( ) . await ( ) ; } } ; java.lang.Thread . void ( java.lang.Class<? extends org.springframework.boot.web.embedded.tomcat.TomcatWebServer> ( ) . java.lang.ClassLoader ( ) ) ; java.lang.Thread . void ( false ) ; java.lang.Thread . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.boot.web.embedded.tomcat.TomcatWebServer .this . org.springframework.boot.web.embedded.tomcat.Tomcat . getServer ( ) . await ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.embedded.tomcat.WebServerException { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { return; } try { void ( ) ; Connector org.springframework.boot.web.embedded.tomcat.Connector = this . org.springframework.boot.web.embedded.tomcat.Tomcat . getConnector ( ) ; if ( org.springframework.boot.web.embedded.tomcat.Connector != null && this . boolean ) { void ( org.springframework.boot.web.embedded.tomcat.Connector ) ; } void ( ) ; this . boolean = true ; org.springframework.boot.web.embedded.tomcat.TomcatWebServer . org.springframework.boot.web.embedded.tomcat.Log . info ( STRING + java.lang.String ( true ) ) ; } catch ( ConnectorStartFailedException org.springframework.boot.web.embedded.tomcat.ConnectorStartFailedException ) { void ( ) ; throw org.springframework.boot.web.embedded.tomcat.ConnectorStartFailedException ; } catch ( java.lang.Exception java.lang.Exception ) { throw new WebServerException ( STRING , java.lang.Exception ) ; } finally { Context org.springframework.boot.web.embedded.tomcat.Context = org.springframework.boot.web.embedded.tomcat.Context ( ) ; ContextBindings . unbindClassLoader ( org.springframework.boot.web.embedded.tomcat.Context , org.springframework.boot.web.embedded.tomcat.Context . getNamingToken ( ) , java.lang.Class<? extends org.springframework.boot.web.embedded.tomcat.TomcatWebServer> ( ) . java.lang.ClassLoader ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( Connector org.springframework.boot.web.embedded.tomcat.Connector : this . org.springframework.boot.web.embedded.tomcat.Tomcat . getService ( ) . findConnectors ( ) ) { if ( LifecycleState . FAILED . equals ( org.springframework.boot.web.embedded.tomcat.Connector . getState ( ) ) ) { throw new ConnectorStartFailedException ( org.springframework.boot.web.embedded.tomcat.Connector . getPort ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { try { void ( ) ; } catch ( LifecycleException org.springframework.boot.web.embedded.tomcat.LifecycleException ) { } }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.boot.web.embedded.tomcat.LifecycleException { if ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) instanceof TomcatEmbeddedWebappClassLoader ) { java.lang.Thread . java.lang.Thread ( ) . void ( java.lang.Class<? extends org.springframework.boot.web.embedded.tomcat.TomcatWebServer> ( ) . java.lang.ClassLoader ( ) ) ; } this . org.springframework.boot.web.embedded.tomcat.Tomcat . stop ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { Service [] org.springframework.boot.web.embedded.tomcat.Service[] = this . org.springframework.boot.web.embedded.tomcat.Tomcat . getServer ( ) . findServices ( ) ; for ( Service org.springframework.boot.web.embedded.tomcat.Service : org.springframework.boot.web.embedded.tomcat.Service[] ) { Connector [] org.springframework.boot.web.embedded.tomcat.Connector[] = this . java.util.Map<org.springframework.boot.web.embedded.tomcat.Service,org.springframework.boot.web.embedded.tomcat.Connector[]> . get ( org.springframework.boot.web.embedded.tomcat.Service ) ; if ( org.springframework.boot.web.embedded.tomcat.Connector[] != null ) { for ( Connector org.springframework.boot.web.embedded.tomcat.Connector : org.springframework.boot.web.embedded.tomcat.Connector[] ) { org.springframework.boot.web.embedded.tomcat.Service . addConnector ( org.springframework.boot.web.embedded.tomcat.Connector ) ; if ( ! this . boolean ) { void ( org.springframework.boot.web.embedded.tomcat.Connector ) ; } } this . java.util.Map<org.springframework.boot.web.embedded.tomcat.Service,org.springframework.boot.web.embedded.tomcat.Connector[]> . remove ( org.springframework.boot.web.embedded.tomcat.Service ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( Connector org.springframework.boot.web.embedded.tomcat.Connector ) { try { org.springframework.boot.web.embedded.tomcat.Connector . getProtocolHandler ( ) . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.web.embedded.tomcat.TomcatWebServer . org.springframework.boot.web.embedded.tomcat.Log . error ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Connector org.springframework.boot.web.embedded.tomcat.Connector ) { try { for ( Container org.springframework.boot.web.embedded.tomcat.Container : this . org.springframework.boot.web.embedded.tomcat.Tomcat . getHost ( ) . findChildren ( ) ) { if ( org.springframework.boot.web.embedded.tomcat.Container instanceof TomcatEmbeddedContext ) { ( ( TomcatEmbeddedContext ) org.springframework.boot.web.embedded.tomcat.Container ) . deferredLoadOnStartup ( ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.web.embedded.tomcat.TomcatWebServer . org.springframework.boot.web.embedded.tomcat.Log . error ( STRING , java.lang.Exception ) ; throw new WebServerException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> java.util.Map<org.springframework.boot.web.embedded.tomcat.Service,org.springframework.boot.web.embedded.tomcat.Connector[]> < Service , Connector [] > java.util.Map<org.springframework.boot.web.embedded.tomcat.Service,org.springframework.boot.web.embedded.tomcat.Connector[]> ( ) { return this . java.util.Map<org.springframework.boot.web.embedded.tomcat.Service,org.springframework.boot.web.embedded.tomcat.Connector[]> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.embedded.tomcat.WebServerException { synchronized ( this . java.lang.Object ) { boolean boolean = this . boolean ; try { this . boolean = false ; try { void ( ) ; this . org.springframework.boot.web.embedded.tomcat.Tomcat . destroy ( ) ; } catch ( LifecycleException org.springframework.boot.web.embedded.tomcat.LifecycleException ) { } } catch ( java.lang.Exception java.lang.Exception ) { throw new WebServerException ( STRING , java.lang.Exception ) ; } finally { if ( boolean ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( boolean boolean ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( Connector org.springframework.boot.web.embedded.tomcat.Connector : this . org.springframework.boot.web.embedded.tomcat.Tomcat . getService ( ) . findConnectors ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.StringBuilder . int ( ) == NUMBER ? STRING : STRING ) ; int int = ( boolean ? org.springframework.boot.web.embedded.tomcat.Connector . getLocalPort ( ) : org.springframework.boot.web.embedded.tomcat.Connector . getPort ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( int + STRING + org.springframework.boot.web.embedded.tomcat.Connector . getScheme ( ) + STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Connector org.springframework.boot.web.embedded.tomcat.Connector = this . org.springframework.boot.web.embedded.tomcat.Tomcat . getConnector ( ) ; if ( org.springframework.boot.web.embedded.tomcat.Connector != null ) { return org.springframework.boot.web.embedded.tomcat.Connector . getLocalPort ( ) ; } return NUMBER ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.embedded.tomcat.Tomcat org.springframework.boot.web.embedded.tomcat.Tomcat ( ) { return this . org.springframework.boot.web.embedded.tomcat.Tomcat ; }  <METHOD_END>
