<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.sftp.dsl.QueueChannel = new QueueChannel ( ) ; IntegrationFlow org.springframework.integration.sftp.dsl.IntegrationFlow = IntegrationFlows . from ( Sftp . inboundAdapter ( sessionFactory ( ) ) . preserveTimestamp ( true ) . remoteDirectory ( STRING ) . regexFilter ( STRING ) . localFilenameExpression ( STRING ) . localDirectory ( getTargetLocalDirectory ( ) ) , e -> e . id ( STRING ) . poller ( Pollers . fixedDelay ( NUMBER ) ) ) . channel ( org.springframework.integration.sftp.dsl.QueueChannel ) . get ( ) ; IntegrationFlowRegistration org.springframework.integration.sftp.dsl.IntegrationFlowRegistration = this . org.springframework.integration.sftp.dsl.IntegrationFlowContext . registration ( org.springframework.integration.sftp.dsl.IntegrationFlow ) . register ( ) ; Message < ? > org.springframework.integration.sftp.dsl.Message<?> = org.springframework.integration.sftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.sftp.dsl.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.sftp.dsl.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.io.File .class ) ) ; java.io.File java.io.File = ( java.io.File ) java.lang.Object ; assertThat ( java.io.File . java.lang.String ( ) , isOneOf ( STRING , STRING ) ) ; assertThat ( java.io.File . java.lang.String ( ) , containsString ( STRING ) ) ; org.springframework.integration.sftp.dsl.Message<?> = org.springframework.integration.sftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.sftp.dsl.Message<> ) ; java.io.File = ( java.io.File ) org.springframework.integration.sftp.dsl.Message<> . getPayload ( ) ; assertThat ( java.io.File . java.lang.String ( ) , isOneOf ( STRING , STRING ) ) ; assertThat ( java.io.File . java.lang.String ( ) , containsString ( STRING ) ) ; org.springframework.integration.sftp.dsl.IntegrationFlowRegistration . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.sftp.dsl.QueueChannel = new QueueChannel ( ) ; StandardIntegrationFlow org.springframework.integration.sftp.dsl.StandardIntegrationFlow = IntegrationFlows . from ( Sftp . inboundStreamingAdapter ( new SftpRemoteFileTemplate ( sessionFactory ( ) ) ) . remoteDirectory ( STRING ) . regexFilter ( STRING ) , e -> e . id ( STRING ) . poller ( Pollers . fixedDelay ( NUMBER ) ) ) . channel ( org.springframework.integration.sftp.dsl.QueueChannel ) . get ( ) ; IntegrationFlowRegistration org.springframework.integration.sftp.dsl.IntegrationFlowRegistration = this . org.springframework.integration.sftp.dsl.IntegrationFlowContext . registration ( org.springframework.integration.sftp.dsl.StandardIntegrationFlow ) . register ( ) ; Message < ? > org.springframework.integration.sftp.dsl.Message<?> = org.springframework.integration.sftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.sftp.dsl.Message<> ) ; assertThat ( org.springframework.integration.sftp.dsl.Message<> . getPayload ( ) , instanceOf ( java.io.InputStream .class ) ) ; assertThat ( org.springframework.integration.sftp.dsl.Message<> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) , isOneOf ( STRING , STRING ) ) ; ( ( java.io.InputStream ) org.springframework.integration.sftp.dsl.Message<> . getPayload ( ) ) . void ( ) ; new IntegrationMessageHeaderAccessor ( org.springframework.integration.sftp.dsl.Message<> ) . getCloseableResource ( ) . close ( ) ; org.springframework.integration.sftp.dsl.Message<?> = org.springframework.integration.sftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.sftp.dsl.Message<> ) ; assertThat ( org.springframework.integration.sftp.dsl.Message<> . getPayload ( ) , instanceOf ( java.io.InputStream .class ) ) ; assertThat ( org.springframework.integration.sftp.dsl.Message<> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) , isOneOf ( STRING , STRING ) ) ; ( ( java.io.InputStream ) org.springframework.integration.sftp.dsl.Message<> . getPayload ( ) ) . void ( ) ; new IntegrationMessageHeaderAccessor ( org.springframework.integration.sftp.dsl.Message<> ) . getCloseableResource ( ) . close ( ) ; org.springframework.integration.sftp.dsl.IntegrationFlowRegistration . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IntegrationFlow org.springframework.integration.sftp.dsl.IntegrationFlow = f -> f . handle ( Sftp . outboundAdapter ( sessionFactory ( ) , FileExistsMode . FAIL ) . useTemporaryFileName ( false ) . fileNameExpression ( STRING + FileHeaders . FILENAME + STRING ) . remoteDirectory ( STRING ) ) ; IntegrationFlowRegistration org.springframework.integration.sftp.dsl.IntegrationFlowRegistration = this . org.springframework.integration.sftp.dsl.IntegrationFlowContext . registration ( org.springframework.integration.sftp.dsl.IntegrationFlow ) . register ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.sftp.dsl.IntegrationFlowRegistration . getInputChannel ( ) . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , java.lang.String ) . build ( ) ) ; RemoteFileTemplate < ChannelSftp . ChannelSftp > org.springframework.integration.sftp.dsl.RemoteFileTemplate<ChannelSftp.LsEntry> = new RemoteFileTemplate <> ( sessionFactory ( ) ) ; ChannelSftp . ChannelSftp [] ChannelSftp.LsEntry[] = org.springframework.integration.sftp.dsl.RemoteFileTemplate<ChannelSftp.LsEntry> . execute ( session -> session . list ( getTargetRemoteDirectory ( ) . getName ( ) + STRING + fileName ) ) ; assertEquals ( NUMBER , files . length ) ; assertEquals ( NUMBER , ChannelSftp.LsEntry[] [ NUMBER ] . getAttrs ( ) . getSize ( ) ) ; org.springframework.integration.sftp.dsl.IntegrationFlowRegistration . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { QueueChannel org.springframework.integration.sftp.dsl.QueueChannel = new QueueChannel ( ) ; IntegrationFlow org.springframework.integration.sftp.dsl.IntegrationFlow = f -> f . handle ( Sftp . outboundGateway ( sessionFactory ( ) , AbstractRemoteFileOutboundGateway . Command . MGET , STRING ) . options ( AbstractRemoteFileOutboundGateway . Option . RECURSIVE ) . regexFileNameFilter ( STRING ) . localDirectoryExpression ( STRING + getTargetLocalDirectoryName ( ) + STRING ) . localFilenameExpression ( STRING ) ) . channel ( out ) ; java.lang.String java.lang.String = STRING ; IntegrationFlowRegistration org.springframework.integration.sftp.dsl.IntegrationFlowRegistration = this . org.springframework.integration.sftp.dsl.IntegrationFlowContext . registration ( org.springframework.integration.sftp.dsl.IntegrationFlow ) . register ( ) ; org.springframework.integration.sftp.dsl.IntegrationFlowRegistration . getInputChannel ( ) . send ( new GenericMessage <> ( java.lang.String + STRING ) ) ; Message < ? > org.springframework.integration.sftp.dsl.Message<?> = org.springframework.integration.sftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.sftp.dsl.Message<> ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = ( java.util.List<java.io.File> < java.io.File > ) org.springframework.integration.sftp.dsl.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { assertThat ( java.io.File . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , Matchers . containsString ( java.lang.String ) ) ; } assertThat ( java.util.List<java.io.File> . java.io.File ( NUMBER ) . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , Matchers . containsString ( java.lang.String + STRING ) ) ; org.springframework.integration.sftp.dsl.IntegrationFlowRegistration . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.sftp.dsl.QueueChannel = new QueueChannel ( ) ; IntegrationFlow org.springframework.integration.sftp.dsl.IntegrationFlow = f -> f .< String > handle ( ( p , h ) -> new SftpRemoteFileTemplate ( sessionFactory ( ) ) . execute ( s -> s . list ( p ) ) ) . channel ( out ) ; IntegrationFlowRegistration org.springframework.integration.sftp.dsl.IntegrationFlowRegistration = this . org.springframework.integration.sftp.dsl.IntegrationFlowContext . registration ( org.springframework.integration.sftp.dsl.IntegrationFlow ) . register ( ) ; org.springframework.integration.sftp.dsl.IntegrationFlowRegistration . getInputChannel ( ) . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.sftp.dsl.Message<?> = org.springframework.integration.sftp.dsl.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.sftp.dsl.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.sftp.dsl.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( ChannelSftp . ChannelSftp [] .class ) ) ; assertTrue ( ( ( ChannelSftp . ChannelSftp [] ) java.lang.Object ) . length > NUMBER ) ; org.springframework.integration.sftp.dsl.IntegrationFlowRegistration . destroy ( ) ; }  <METHOD_END>
