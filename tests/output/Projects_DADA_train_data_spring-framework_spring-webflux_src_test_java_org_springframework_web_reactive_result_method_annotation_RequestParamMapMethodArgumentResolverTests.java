<METHOD_START> @ Test public void void ( ) { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . name ( STRING ) ) . arg ( java.util.Map .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( MultiValueMap .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . name ( STRING ) ) . arg ( java.util.Map .class ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.util.Map .class ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; try { org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) ) . arg ( Mono .class , java.util.Map .class ) ; this . org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.IllegalStateException . java.lang.String ( ) , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . name ( STRING ) ) . arg ( java.util.Map .class ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , MockServerHttpRequest . get ( STRING ) . toExchange ( ) ) ; assertTrue ( java.lang.Object instanceof java.util.Map ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestParam ( ) . name ( STRING ) ) . arg ( java.util.Map .class ) ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = post ( STRING ) . contentType ( APPLICATION_FORM_URLENCODED ) . body ( STRING ) . toExchange ( ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertTrue ( java.lang.Object instanceof java.util.Map ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( MultiValueMap .class ) ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; assertTrue ( java.lang.Object instanceof MultiValueMap ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { return this . org.springframework.web.reactive.result.method.annotation.RequestParamMapMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , null , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ RequestParam java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , @ RequestParam MultiValueMap < ? , ? > org.springframework.web.reactive.result.method.annotation.MultiValueMap<?,?> , @ RequestParam ( STRING ) java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , @ RequestParam Mono < java.util.Map<?,?> < ? , ? > > org.springframework.web.reactive.result.method.annotation.Mono<java.util.Map<?,?>> ) {	}  <METHOD_END>
