<METHOD_START> void ( ) { this( new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ); }  <METHOD_END>
<METHOD_START> public void ( final java.util.List<?> < ? > java.util.List<?> ) { Assert . notNull ( java.util.List<> , STRING ) ; java.util.Set<GenericConverter.ConvertiblePair> = new java.util.LinkedHashSet<GenericConverter.ConvertiblePair> < GenericConverter . GenericConverter > ( ) ; java.util.Set<GenericConverter.ConvertiblePair> = new java.util.LinkedHashSet<GenericConverter.ConvertiblePair> < GenericConverter . GenericConverter > ( ) ; java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( ) ; java.util.concurrent.ConcurrentMap<GenericConverter.ConvertiblePair,org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue> = new java.util.concurrent.ConcurrentHashMap<GenericConverter.ConvertiblePair,org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue> < GenericConverter . GenericConverter , org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue > ( ) ; this . java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; this . java.util.List<java.lang.Object> . boolean ( java.util.List<> ) ; this . java.util.List<java.lang.Object> . boolean ( DateConverters . getConvertersToRegister ( ) ) ; for ( java.lang.Object java.lang.Object : this . java.util.List<java.lang.Object> ) { void ( java.lang.Object ) ; } org.springframework.data.couchbase.core.convert.SimpleTypeHolder = new SimpleTypeHolder ( java.util.Set<java.lang.Class<?>> , true ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.couchbase.core.convert.SimpleTypeHolder . isSimpleType ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.couchbase.core.convert.SimpleTypeHolder org.springframework.data.couchbase.core.convert.SimpleTypeHolder ( ) { return org.springframework.data.couchbase.core.convert.SimpleTypeHolder ; }  <METHOD_END>
<METHOD_START> public void void ( final GenericConversionService org.springframework.data.couchbase.core.convert.GenericConversionService ) { for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { boolean boolean = false ; if ( java.lang.Object instanceof Converter ) { org.springframework.data.couchbase.core.convert.GenericConversionService . addConverter ( ( Converter < ? , ? > ) java.lang.Object ) ; boolean = true ; } if ( java.lang.Object instanceof ConverterFactory ) { org.springframework.data.couchbase.core.convert.GenericConversionService . addConverterFactory ( ( ConverterFactory < ? , ? > ) java.lang.Object ) ; boolean = true ; } if ( java.lang.Object instanceof GenericConverter ) { org.springframework.data.couchbase.core.convert.GenericConversionService . addConverter ( ( GenericConverter ) java.lang.Object ) ; boolean = true ; } if ( ! boolean ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; boolean boolean = java.lang.Class<> . boolean ( WritingConverter .class ) ; boolean boolean = java.lang.Class<> . boolean ( ReadingConverter .class ) ; if ( java.lang.Object instanceof GenericConverter ) { GenericConverter org.springframework.data.couchbase.core.convert.GenericConverter = ( GenericConverter ) java.lang.Object ; for ( GenericConverter . GenericConverter GenericConverter.ConvertiblePair : org.springframework.data.couchbase.core.convert.GenericConverter . getConvertibleTypes ( ) ) { void ( new ConverterRegistration ( GenericConverter.ConvertiblePair , boolean , boolean ) ) ; } } else if ( java.lang.Object instanceof Converter ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = GenericTypeResolver . resolveTypeArguments ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , Converter .class ) ; void ( new ConverterRegistration ( java.lang.Class<?>[] [ NUMBER ] , java.lang.Class<?>[] [ NUMBER ] , boolean , boolean ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( final ConverterRegistration org.springframework.data.couchbase.core.convert.ConverterRegistration ) { GenericConverter . GenericConverter GenericConverter.ConvertiblePair = org.springframework.data.couchbase.core.convert.ConverterRegistration . getConvertiblePair ( ) ; if ( org.springframework.data.couchbase.core.convert.ConverterRegistration . isReading ( ) ) { java.util.Set<GenericConverter.ConvertiblePair> . add ( GenericConverter.ConvertiblePair ) ; if ( org.springframework.data.couchbase.core.convert.Logger . isWarnEnabled ( ) && ! org.springframework.data.couchbase.core.convert.ConverterRegistration . isSimpleSourceType ( ) ) { org.springframework.data.couchbase.core.convert.Logger . warn ( java.lang.String . java.lang.String ( java.lang.String , GenericConverter.ConvertiblePair . getSourceType ( ) , GenericConverter.ConvertiblePair . getTargetType ( ) ) ) ; } } if ( org.springframework.data.couchbase.core.convert.ConverterRegistration . isWriting ( ) ) { java.util.Set<GenericConverter.ConvertiblePair> . add ( GenericConverter.ConvertiblePair ) ; java.util.Set<java.lang.Class<?>> . boolean ( GenericConverter.ConvertiblePair . getSourceType ( ) ) ; if ( org.springframework.data.couchbase.core.convert.Logger . isWarnEnabled ( ) && ! org.springframework.data.couchbase.core.convert.ConverterRegistration . isSimpleTargetType ( ) ) { org.springframework.data.couchbase.core.convert.Logger . warn ( java.lang.String . java.lang.String ( java.lang.String , GenericConverter.ConvertiblePair . getSourceType ( ) , GenericConverter.ConvertiblePair . getTargetType ( ) ) ) ; } } }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<?> ( java.lang.Class<> , null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.lang.Class<?> ( java.lang.Class<> , java.lang.Class<> , java.util.Set<GenericConverter.ConvertiblePair> ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return boolean ( java.lang.Class<> , null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.lang.Class<?> ( java.lang.Class<> , java.lang.Class<> ) != null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; return java.lang.Class<?> ( java.lang.Class<> , java.lang.Class<> ) != null ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( java.lang.Class<> == null ) { return null ; } GenericConverter . GenericConverter GenericConverter.ConvertiblePair = new GenericConverter . GenericConverter ( java.lang.Class<> , java.lang.Class<> ) ; org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue = java.util.concurrent.ConcurrentMap<GenericConverter.ConvertiblePair,org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue> . get ( GenericConverter.ConvertiblePair ) ; if ( org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue != null ) { return org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue . java.lang.Class<?> ( ) ; } org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue = org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue . org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue ( java.lang.Class<?> ( java.lang.Class<> , java.lang.Class<> , java.util.Set<GenericConverter.ConvertiblePair> ) ) ; org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue = java.util.concurrent.ConcurrentMap<GenericConverter.ConvertiblePair,org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue> . putIfAbsent ( GenericConverter.ConvertiblePair , org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue ) ; return org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue != null ? org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue . java.lang.Class<?> ( ) : org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue . java.lang.Class<?> ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Iterable<GenericConverter.ConvertiblePair> < GenericConverter . GenericConverter > java.lang.Iterable<GenericConverter.ConvertiblePair> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Iterable<GenericConverter.ConvertiblePair> , STRING ) ; for ( GenericConverter . GenericConverter GenericConverter.ConvertiblePair : java.lang.Iterable<GenericConverter.ConvertiblePair> ) { if ( GenericConverter.ConvertiblePair . getSourceType ( ) . isAssignableFrom ( java.lang.Class<> ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = GenericConverter.ConvertiblePair . getTargetType ( ) ; if ( java.lang.Class<> == null || java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return java.lang.Class<> ; } } } return null ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> == null ? org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue : new org.springframework.data.couchbase.core.convert.CustomConversions.CacheValue ( java.lang.Class<> ) ; }  <METHOD_END>
