<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { AllPossibleTypes .class . java.lang.Package ( ) . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.isolated.SchemaAction org.springframework.data.cassandra.repository.isolated.SchemaAction ( ) { return SchemaAction . RECREATE_DROP_UNUSED ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.AllPossibleTypesRepository . deleteAll ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.isolated.Session . execute ( STRING ) ; AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setId ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setLocalDate ( java.time.LocalDate . java.time.LocalDate ( ) ) ; org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> = org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.AllPossibleTypesRepository . java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getLocalDate ( ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ) . contains ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.cassandra.repository.isolated.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.DateToLocalDateConverter> ( new org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.DateToLocalDateConverter ( ) ) ) ; org.springframework.data.cassandra.repository.isolated.BasicCassandraMappingContext . setCustomConversions ( org.springframework.data.cassandra.repository.isolated.CustomConversions ) ; org.springframework.data.cassandra.repository.isolated.MappingCassandraConverter . setCustomConversions ( org.springframework.data.cassandra.repository.isolated.CustomConversions ) ; org.springframework.data.cassandra.repository.isolated.MappingCassandraConverter . afterPropertiesSet ( ) ; org.springframework.data.cassandra.repository.isolated.Session . execute ( STRING ) ; AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( ) ; java.time.LocalDate java.time.LocalDate = java.time.LocalDate . java.time.LocalDate ( ) ; java.time.Instant java.time.Instant = java.time.LocalDate . java.time.LocalDateTime ( ) . java.time.Instant ( java.time.ZoneOffset . java.time.ZoneOffset ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setId ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setDate ( com . com.datastax . com.datastax . com.datastax . LocalDate . fromYearMonthDay ( java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) ) ) ; org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> = org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.AllPossibleTypesRepository . java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( java.util.Date . java.util.Date ( java.time.Instant ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ) . contains ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = CassandraInvalidQueryException .class ) public void void ( ) { org.springframework.data.cassandra.repository.isolated.Session . execute ( STRING ) ; org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.AllPossibleTypesRepository . java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( java.util.Date . java.util.Date ( java.time.Instant . java.time.Instant ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.ZoneId java.time.ZoneId = java.time.ZoneId . java.time.ZoneId ( STRING ) ; org.springframework.data.cassandra.repository.isolated.Session . execute ( STRING ) ; AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setId ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setZoneId ( java.time.ZoneId ) ; org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> = org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.AllPossibleTypesRepository . java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( java.time.ZoneId ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ) . contains ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.ZoneId java.time.ZoneId = java.time.ZoneId . java.time.ZoneId ( STRING ) ; org.springframework.data.cassandra.repository.isolated.Session . execute ( STRING ) ; AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setId ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setZoneId ( java.time.ZoneId ) ; org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> = org.springframework.data.cassandra.repository.isolated.RepositoryQueryMethodParameterTypesIntegrationTests.AllPossibleTypesRepository . java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( java.util.Optional . java.util.Optional<java.time.ZoneId> ( java.time.ZoneId ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ) . contains ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; }  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( java . time . java.time.LocalDate java.time.LocalDate );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( java.time.ZoneId java.time.ZoneId );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( @ CassandraType ( type = Name . DATE ) java.util.Date java.util.Date );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( java.util.Date java.util.Date );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( java.util.Optional<java.time.ZoneId> < java.time.ZoneId > java.util.Optional<java.time.ZoneId> );  <METHOD_END>
<METHOD_START> @ java.lang.Override public com . com.datastax . com.datastax . com.datastax . com.datastax.driver.core.LocalDate com.datastax.driver.core.LocalDate ( java.util.Date java.util.Date ) { java.time.LocalDate java.time.LocalDate = java.time.LocalDateTime . java.time.LocalDateTime ( java.util.Date . java.time.Instant ( ) , java.time.ZoneOffset . java.time.ZoneOffset . java.time.ZoneId ( ) ) . java.time.LocalDate ( ) ; return com . com.datastax . com.datastax . com.datastax . LocalDate . fromYearMonthDay ( java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) , java.time.LocalDate . int ( ) ) ; }  <METHOD_END>
