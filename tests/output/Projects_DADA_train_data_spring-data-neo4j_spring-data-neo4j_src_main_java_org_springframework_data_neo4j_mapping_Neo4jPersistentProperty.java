<METHOD_START> public void ( ClassInfo org.springframework.data.neo4j.mapping.ClassInfo , Property org.springframework.data.neo4j.mapping.Property , PersistentEntity < ? , org.springframework.data.neo4j.mapping.Neo4jPersistentProperty > org.springframework.data.neo4j.mapping.PersistentEntity<?,org.springframework.data.neo4j.mapping.Neo4jPersistentProperty> , SimpleTypeHolder org.springframework.data.neo4j.mapping.SimpleTypeHolder ) { super( org.springframework.data.neo4j.mapping.Property , org.springframework.data.neo4j.mapping.PersistentEntity<,org.springframework.data.neo4j.mapping.Neo4jPersistentProperty> , org.springframework.data.neo4j.mapping.SimpleTypeHolder ); if ( org.springframework.data.neo4j.mapping.ClassInfo == null ) { org.springframework.data.neo4j.mapping.Logger . warn ( STRING , org.springframework.data.neo4j.mapping.Property ) ; } if ( ( org.springframework.data.neo4j.mapping.ClassInfo != null && org.springframework.data.neo4j.mapping.ClassInfo . getUnderlyingClass ( ) != null && org.springframework.data.neo4j.mapping.SimpleTypeHolder . isSimpleType ( org.springframework.data.neo4j.mapping.ClassInfo . getUnderlyingClass ( ) ) ) || org.springframework.data.neo4j.mapping.PersistentEntity<,org.springframework.data.neo4j.mapping.Neo4jPersistentProperty> . getType ( ) . isEnum ( ) ) { this . boolean = false ; } else { this . boolean = boolean ( org.springframework.data.neo4j.mapping.ClassInfo , org.springframework.data.neo4j.mapping.Property ) ; } }  <METHOD_END>
<METHOD_START> private static boolean boolean ( ClassInfo org.springframework.data.neo4j.mapping.ClassInfo , Property org.springframework.data.neo4j.mapping.Property ) { if ( org.springframework.data.neo4j.mapping.ClassInfo == null || org.springframework.data.neo4j.mapping.ClassInfo . isInterface ( ) || org.springframework.data.neo4j.mapping.ClassInfo . annotationsInfo ( ) . get ( QueryResult .class . java.lang.String ( ) ) != null || org.springframework.data.neo4j.mapping.ClassInfo . isEnum ( ) ) { return false ; } else { try { return org.springframework.data.neo4j.mapping.Property . getField ( ) . filter ( field -> owningClassInfo . getField ( owningClassInfo . identityField ( ) ) . equals ( field ) ) . isPresent ( ) ; } catch ( MappingException org.springframework.data.neo4j.mapping.MappingException ) { org.springframework.data.neo4j.mapping.Logger . warn ( STRING , org.springframework.data.neo4j.mapping.ClassInfo . name ( ) , org.springframework.data.neo4j.mapping.Property ) ; return false ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { org.springframework.data.neo4j.mapping.Logger . debug ( STRING , this . boolean ) ; return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { org.springframework.data.neo4j.mapping.Logger . debug ( STRING ) ; return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { org.springframework.data.neo4j.mapping.Logger . debug ( STRING ) ; return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! isTransient ( ) && ( isAnnotationPresent ( Relationship .class ) || isAnnotationPresent ( StartNode .class ) || isAnnotationPresent ( EndNode .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.neo4j.mapping.Association<org.springframework.data.neo4j.mapping.Neo4jPersistentProperty> < org.springframework.data.neo4j.mapping.Neo4jPersistentProperty > org.springframework.data.neo4j.mapping.Association<org.springframework.data.neo4j.mapping.Neo4jPersistentProperty> ( ) { return new Association < org.springframework.data.neo4j.mapping.Neo4jPersistentProperty > ( this , null ) ; }  <METHOD_END>
