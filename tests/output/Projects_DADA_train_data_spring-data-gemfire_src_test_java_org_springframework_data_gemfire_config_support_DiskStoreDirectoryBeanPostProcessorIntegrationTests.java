<METHOD_START> @ BeforeClass public static void void ( ) { assertThat ( new java.io.File ( STRING ) . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { assertThat ( FileSystemUtils . deleteRecursively ( new java.io.File ( STRING ) ) ) . isTrue ( ) ; assertThat ( FileSystemUtils . deleteRecursively ( new java.io.File ( STRING ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new java.io.File ( STRING ) . boolean ( ) ) . isTrue ( ) ; assertThat ( new java.io.File ( STRING ) . boolean ( ) ) . isTrue ( ) ; assertThat ( new java.io.File ( STRING ) . boolean ( ) ) . isTrue ( ) ; assertThat ( new java.io.File ( STRING ) . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> DiskStoreFactoryBean . DiskStoreFactoryBean.DiskDir DiskStoreFactoryBean.DiskDir ( java.lang.String java.lang.String ) { return new DiskStoreFactoryBean . DiskStoreFactoryBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.config.support.DiskStoreFactoryBean org.springframework.data.gemfire.config.support.DiskStoreFactoryBean ( GemFireCache org.springframework.data.gemfire.config.support.GemFireCache ) { DiskStoreFactoryBean org.springframework.data.gemfire.config.support.DiskStoreFactoryBean = new DiskStoreFactoryBean ( ) ; org.springframework.data.gemfire.config.support.DiskStoreFactoryBean . setCache ( org.springframework.data.gemfire.config.support.GemFireCache ) ; org.springframework.data.gemfire.config.support.DiskStoreFactoryBean . setDiskDirs ( java.util.Collections . java.util.List ( DiskStoreFactoryBean.DiskDir ( STRING ) ) ) ; return org.springframework.data.gemfire.config.support.DiskStoreFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.config.support.DiskStoreFactoryBean org.springframework.data.gemfire.config.support.DiskStoreFactoryBean ( GemFireCache org.springframework.data.gemfire.config.support.GemFireCache ) { DiskStoreFactoryBean org.springframework.data.gemfire.config.support.DiskStoreFactoryBean = new DiskStoreFactoryBean ( ) ; org.springframework.data.gemfire.config.support.DiskStoreFactoryBean . setCache ( org.springframework.data.gemfire.config.support.GemFireCache ) ; org.springframework.data.gemfire.config.support.DiskStoreFactoryBean . setDiskDirs ( java.util.Arrays . java.util.List ( DiskStoreFactoryBean.DiskDir ( STRING ) , DiskStoreFactoryBean.DiskDir ( STRING ) ) ) ; return org.springframework.data.gemfire.config.support.DiskStoreFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.config.support.DiskStoreFactoryBean org.springframework.data.gemfire.config.support.DiskStoreFactoryBean ( GemFireCache org.springframework.data.gemfire.config.support.GemFireCache ) { DiskStoreFactoryBean org.springframework.data.gemfire.config.support.DiskStoreFactoryBean = new DiskStoreFactoryBean ( ) ; org.springframework.data.gemfire.config.support.DiskStoreFactoryBean . setCache ( org.springframework.data.gemfire.config.support.GemFireCache ) ; org.springframework.data.gemfire.config.support.DiskStoreFactoryBean . setDiskDirs ( java.util.Collections . java.util.List ( DiskStoreFactoryBean.DiskDir ( STRING ) ) ) ; return org.springframework.data.gemfire.config.support.DiskStoreFactoryBean ; }  <METHOD_END>
