<METHOD_START> public void ( PageableHandlerMethodArgumentResolver org.springframework.data.rest.webmvc.support.PageableHandlerMethodArgumentResolver ) { Assert . notNull ( org.springframework.data.rest.webmvc.support.PageableHandlerMethodArgumentResolver , STRING ) ; this . org.springframework.data.rest.webmvc.support.PageableHandlerMethodArgumentResolver = org.springframework.data.rest.webmvc.support.PageableHandlerMethodArgumentResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.data.rest.webmvc.support.MethodParameter , ModelAndViewContainer org.springframework.data.rest.webmvc.support.ModelAndViewContainer , NativeWebRequest org.springframework.data.rest.webmvc.support.NativeWebRequest , WebDataBinderFactory org.springframework.data.rest.webmvc.support.WebDataBinderFactory ) throws java.lang.Exception { Pageable org.springframework.data.rest.webmvc.support.Pageable = org.springframework.data.rest.webmvc.support.PageableHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.rest.webmvc.support.MethodParameter , org.springframework.data.rest.webmvc.support.ModelAndViewContainer , org.springframework.data.rest.webmvc.support.NativeWebRequest , org.springframework.data.rest.webmvc.support.WebDataBinderFactory ) ; return new DefaultedPageable ( org.springframework.data.rest.webmvc.support.Pageable , org.springframework.data.rest.webmvc.support.PageableHandlerMethodArgumentResolver . isFallbackPageable ( org.springframework.data.rest.webmvc.support.Pageable ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.data.rest.webmvc.support.MethodParameter ) { return DefaultedPageable .class . boolean ( org.springframework.data.rest.webmvc.support.MethodParameter . getParameterType ( ) ) ; }  <METHOD_END>
