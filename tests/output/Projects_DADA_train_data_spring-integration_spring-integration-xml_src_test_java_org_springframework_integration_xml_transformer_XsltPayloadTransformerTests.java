<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.integration.xml.transformer.XsltPayloadTransformer = new XsltPayloadTransformer ( org.springframework.integration.xml.transformer.Resource ( ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( XmlTestUtil . getDocumentForString ( java.lang.String ) ) ) ; assertTrue ( STRING , org.w3c.dom.Document .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; org.w3c.dom.Document org.w3c.dom.Document = ( org.w3c.dom.Document ) java.lang.Object ; assertXMLEqual ( java.lang.String , XmlTestUtil . docToString ( org.w3c.dom.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( new StringSource ( java.lang.String ) ) ) ; assertEquals ( STRING , javax.xml.transform.dom.DOMResult .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; javax.xml.transform.dom.DOMResult javax.xml.transform.dom.DOMResult = ( javax.xml.transform.dom.DOMResult ) java.lang.Object ; assertXMLEqual ( STRING , XmlTestUtil . getDocumentForString ( java.lang.String ) , ( org.w3c.dom.Document ) javax.xml.transform.dom.DOMResult . org.w3c.dom.Node ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( java.lang.String ) ) ; assertEquals ( STRING , java.lang.String .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; assertXMLEqual ( STRING , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.xml.transformer.XsltPayloadTransformer . setAlwaysUseResultFactory ( true ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( java.lang.String ) ) ; assertEquals ( STRING , javax.xml.transform.dom.DOMResult .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; javax.xml.transform.dom.DOMResult javax.xml.transform.dom.DOMResult = ( javax.xml.transform.dom.DOMResult ) java.lang.Object ; assertXMLEqual ( STRING , XmlTestUtil . getDocumentForString ( java.lang.String ) , ( org.w3c.dom.Document ) javax.xml.transform.dom.DOMResult . org.w3c.dom.Node ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer = new XsltPayloadTransformer ( org.springframework.integration.xml.transformer.Resource ( ) , new org.springframework.integration.xml.transformer.XsltPayloadTransformerTests.StubResultTransformer ( java.lang.Integer ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( new StringSource ( java.lang.String ) ) ) ; assertEquals ( STRING , java.lang.Integer , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer = new XsltPayloadTransformer ( org.springframework.integration.xml.transformer.Resource ( ) , new org.springframework.integration.xml.transformer.XsltPayloadTransformerTests.StubResultTransformer ( java.lang.Integer ) , STRING ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( new StringSource ( java.lang.String ) ) ) ; assertEquals ( STRING , java.lang.Integer , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = javax.xml.transform.TransformerFactoryConfigurationError .class ) public void void ( ) java.lang.Exception { org.springframework.integration.xml.transformer.XsltPayloadTransformer = new XsltPayloadTransformer ( org.springframework.integration.xml.transformer.Resource ( ) , STRING ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . afterPropertiesSet ( ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( new StringSource ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = javax.xml.transform.TransformerException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( new java.lang.Long ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.integration.xml.transformer.Resource = new ClassPathResource ( STRING , this . java.lang.Class<? extends org.springframework.integration.xml.transformer.XsltPayloadTransformerTests> ( ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer = new XsltPayloadTransformer ( org.springframework.integration.xml.transformer.Resource ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . afterPropertiesSet ( ) ; assertEquals ( org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( java.lang.String ) ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.integration.xml.transformer.Resource = new ClassPathResource ( STRING , this . java.lang.Class<? extends org.springframework.integration.xml.transformer.XsltPayloadTransformerTests> ( ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer = new XsltPayloadTransformer ( org.springframework.integration.xml.transformer.Resource ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setResultFactory ( new StringResultFactory ( ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setAlwaysUseResultFactory ( true ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( XmlTestUtil . getDocumentForString ( java.lang.String ) ) ) ; assertEquals ( STRING , StringResult .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.integration.xml.transformer.Resource = new ClassPathResource ( STRING , this . java.lang.Class<? extends org.springframework.integration.xml.transformer.XsltPayloadTransformerTests> ( ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer = new XsltPayloadTransformer ( org.springframework.integration.xml.transformer.Resource ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setResultFactory ( new StringResultFactory ( ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setAlwaysUseResultFactory ( true ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( XmlTestUtil . getDocumentForString ( java.lang.String ) ) ) ; assertEquals ( STRING , StringResult .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.xml.transformer.XsltPayloadTransformer = new XsltPayloadTransformer ( org.springframework.integration.xml.transformer.Resource ( ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setResultFactory ( new StringResultFactory ( ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setAlwaysUseResultFactory ( true ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.xml.transformer.XsltPayloadTransformer . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.transformer.XsltPayloadTransformer . doTransform ( org.springframework.integration.xml.transformer.Message<?> ( XmlTestUtil . getDocumentForString ( java.lang.String ) ) ) ; assertEquals ( STRING , StringResult .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.xml.transformer.Message<?> < ? > org.springframework.integration.xml.transformer.Message<?> ( java.lang.Object java.lang.Object ) { return MessageBuilder . withPayload ( java.lang.Object ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.xml.transformer.Resource org.springframework.integration.xml.transformer.Resource ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING ; return new ByteArrayResource ( java.lang.String . byte[] ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.xml.transformer.Resource org.springframework.integration.xml.transformer.Resource ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING ; return new ByteArrayResource ( java.lang.String . byte[] ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( javax.xml.transform.Result javax.xml.transform.Result ) { return java.lang.Object ; }  <METHOD_END>
