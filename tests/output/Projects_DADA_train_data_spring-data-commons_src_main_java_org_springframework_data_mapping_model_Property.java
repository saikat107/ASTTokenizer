<METHOD_START> private void ( java.util.Optional<java.lang.reflect.Field> < java.lang.reflect.Field > java.util.Optional<java.lang.reflect.Field> , java.util.Optional<java.beans.PropertyDescriptor> < java.beans.PropertyDescriptor > java.util.Optional<java.beans.PropertyDescriptor> ) { this . java.util.Optional<java.lang.reflect.Field> = java.util.Optional<java.lang.reflect.Field> ; this . java.util.Optional<java.beans.PropertyDescriptor> = java.util.Optional<java.beans.PropertyDescriptor> ; this . org.springframework.data.mapping.model.Lazy<java.lang.Integer> = Lazy . of ( this :: int ) ; this . org.springframework.data.mapping.model.Lazy<java.lang.Class<?>> = Lazy . of ( ( ) field .< Class < ? > > map ( Field :: getType ) . orElseGet ( ( ) descriptor . map ( PropertyDescriptor :: getPropertyType ) . orElseThrow ( IllegalStateException ::new ) ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mapping.model.Property org.springframework.data.mapping.model.Property ( java.lang.reflect.Field java.lang.reflect.Field ) { Assert . notNull ( java.lang.reflect.Field , STRING ) ; return new org.springframework.data.mapping.model.Property ( java.util.Optional . java.util.Optional<java.lang.reflect.Field> ( java.lang.reflect.Field ) , java.util.Optional . java.util.Optional<java.beans.PropertyDescriptor> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mapping.model.Property org.springframework.data.mapping.model.Property ( java.lang.reflect.Field java.lang.reflect.Field , java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { Assert . notNull ( java.lang.reflect.Field , STRING ) ; Assert . notNull ( java.beans.PropertyDescriptor , STRING ) ; return new org.springframework.data.mapping.model.Property ( java.util.Optional . java.util.Optional<java.lang.reflect.Field> ( java.lang.reflect.Field ) , java.util.Optional . java.util.Optional<java.beans.PropertyDescriptor> ( java.beans.PropertyDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mapping.model.Property org.springframework.data.mapping.model.Property ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { Assert . notNull ( java.beans.PropertyDescriptor , STRING ) ; return new org.springframework.data.mapping.model.Property ( java.util.Optional . java.util.Optional<java.lang.reflect.Field> ( ) , java.util.Optional . java.util.Optional<java.beans.PropertyDescriptor> ( java.beans.PropertyDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Optional<java.lang.reflect.Field> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( ) { return java.util.Optional<java.beans.PropertyDescriptor> . java.util.Optional<java.lang.reflect.Method> ( java.beans.PropertyDescriptor :: java.lang.reflect.Method ) . java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method -> java.lang.Class<?> ( ) . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( ) { return java.util.Optional<java.beans.PropertyDescriptor> . java.util.Optional<java.lang.reflect.Method> ( java.beans.PropertyDescriptor :: java.lang.reflect.Method ) . java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method -> java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] . boolean ( java.lang.Class<?> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Optional<java.lang.reflect.Method> ( ) . boolean ( ) || java.util.Optional<java.lang.reflect.Method> ( ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.util.Optional<java.lang.reflect.Field> . java.util.Optional<java.lang.String> ( java.lang.reflect.Field :: java.lang.String ) . java.lang.String ( ( ) java.util.Optional<java.beans.PropertyDescriptor> . java.util.Optional<java.lang.String> ( java.beans.FeatureDescriptor :: java.lang.String ) . java.lang.String ( java.lang.IllegalStateException ::new ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.mapping.model.Lazy<java.lang.Class<?>> . get ( ) ; }  <METHOD_END>
<METHOD_START> private int int ( ) { return this . java.util.Optional<java.lang.reflect.Field> . java.util.Optional<java.lang.Integer> ( java.lang.reflect.Field :: int ) . java.lang.Integer ( ( ) this . java.util.Optional<java.beans.PropertyDescriptor> . java.util.Optional<java.lang.Integer> ( java.beans.PropertyDescriptor :: int ) . java.lang.Integer ( java.lang.IllegalStateException ::new ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.data.mapping.model.Lazy<java.lang.Integer> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.mapping.model.Property ) ) { return false ; } org.springframework.data.mapping.model.Property org.springframework.data.mapping.model.Property = ( org.springframework.data.mapping.model.Property ) java.lang.Object ; return this . java.util.Optional<java.lang.reflect.Field> . boolean ( ) ? this . java.util.Optional<java.lang.reflect.Field> . boolean ( org.springframework.data.mapping.model.Property . java.util.Optional<java.lang.reflect.Field> ) : this . java.util.Optional<java.beans.PropertyDescriptor> . boolean ( org.springframework.data.mapping.model.Property . java.util.Optional<java.beans.PropertyDescriptor> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.util.Optional<java.lang.reflect.Field> . java.util.Optional<java.lang.String> ( java.lang.Object :: java.lang.String ) . java.lang.String ( ( ) java.util.Optional<java.beans.PropertyDescriptor> . java.util.Optional<java.lang.String> ( java.lang.Object :: java.lang.String ) . java.lang.String ( java.lang.IllegalStateException ::new ) ) ; }  <METHOD_END>
