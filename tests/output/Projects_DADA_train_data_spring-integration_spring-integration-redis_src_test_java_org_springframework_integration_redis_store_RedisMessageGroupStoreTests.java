<METHOD_START> @ Before @ After public void void ( ) { StringRedisTemplate org.springframework.integration.redis.store.StringRedisTemplate = createStringRedisTemplate ( getConnectionFactoryForTest ( ) ) ; org.springframework.integration.redis.store.StringRedisTemplate . delete ( org.springframework.integration.redis.store.StringRedisTemplate . keys ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.store.MessageGroup ) ; assertTrue ( org.springframework.integration.redis.store.MessageGroup instanceof SimpleMessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . addMessageToGroup ( NUMBER , org.springframework.integration.redis.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; long long = org.springframework.integration.redis.store.MessageGroup . getTimestamp ( ) ; long long = org.springframework.integration.redis.store.MessageGroup . getLastModified ( ) ; assertEquals ( long , long ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . addMessageToGroup ( NUMBER , org.springframework.integration.redis.store.Message<> ) ; long = org.springframework.integration.redis.store.MessageGroup . getTimestamp ( ) ; long = org.springframework.integration.redis.store.MessageGroup . getLastModified ( ) ; assertTrue ( long > long ) ; org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . addMessageToGroup ( NUMBER , org.springframework.integration.redis.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . addMessageToGroup ( org.springframework.integration.redis.store.MessageGroup . getGroupId ( ) , org.springframework.integration.redis.store.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; org.springframework.integration.redis.store.RedisMessageStore . removeMessageGroup ( NUMBER ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; assertNotSame ( org.springframework.integration.redis.store.MessageGroup , org.springframework.integration.redis.store.MessageGroup ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . getMessages ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . getMessages ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . addMessageToGroup ( org.springframework.integration.redis.store.MessageGroup . getGroupId ( ) , org.springframework.integration.redis.store.Message<> ) ; org.springframework.integration.redis.store.RedisMessageStore . completeGroup ( org.springframework.integration.redis.store.MessageGroup . getGroupId ( ) ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; assertTrue ( org.springframework.integration.redis.store.MessageGroup . isComplete ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . addMessageToGroup ( org.springframework.integration.redis.store.MessageGroup . getGroupId ( ) , org.springframework.integration.redis.store.Message<> ) ; org.springframework.integration.redis.store.RedisMessageStore . setLastReleasedSequenceNumberForGroup ( org.springframework.integration.redis.store.MessageGroup . getGroupId ( ) , NUMBER ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . getLastReleasedMessageSequenceNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessagesToGroup ( org.springframework.integration.redis.store.MessageGroup . getGroupId ( ) , new GenericMessage < java.lang.String > ( STRING ) , org.springframework.integration.redis.store.Message<> ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . addMessageToGroup ( org.springframework.integration.redis.store.MessageGroup . getGroupId ( ) , new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; org.springframework.integration.redis.store.RedisMessageStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.redis.store.Message<> ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; DirectChannel org.springframework.integration.redis.store.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.redis.store.DirectChannel . setBeanName ( STRING ) ; DirectChannel org.springframework.integration.redis.store.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.redis.store.DirectChannel . setBeanName ( STRING ) ; org.springframework.integration.redis.store.Message<?> = MessageHistory . write ( org.springframework.integration.redis.store.Message<> , org.springframework.integration.redis.store.DirectChannel ) ; org.springframework.integration.redis.store.Message<?> = MessageHistory . write ( org.springframework.integration.redis.store.Message<> , org.springframework.integration.redis.store.DirectChannel ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessagesToGroup ( NUMBER , org.springframework.integration.redis.store.Message<> ) ; org.springframework.integration.redis.store.Message<?> = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) . getMessages ( ) . iterator ( ) . next ( ) ; MessageHistory org.springframework.integration.redis.store.MessageHistory = MessageHistory . read ( org.springframework.integration.redis.store.Message<> ) ; assertNotNull ( org.springframework.integration.redis.store.MessageHistory ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageHistory . size ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.redis.store.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessagesToGroup ( org.springframework.integration.redis.store.MessageGroup . getGroupId ( ) , new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.redis.store.RedisMessageStore . removeMessagesFromGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; org.springframework.integration.redis.store.RedisMessageStore . removeMessagesFromGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessagesToGroup ( NUMBER , org.springframework.integration.redis.store.Message<> ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . addMessageToGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . getMessages ( ) . size ( ) ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; org.springframework.integration.redis.store.RedisMessageStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.redis.store.Message<> ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . getMessages ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessagesToGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessagesToGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessagesToGroup ( NUMBER , new GenericMessage < java.lang.String > ( STRING ) , new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.Iterator<org.springframework.integration.redis.store.MessageGroup> < MessageGroup > java.util.Iterator<org.springframework.integration.redis.store.MessageGroup> = org.springframework.integration.redis.store.RedisMessageStore . iterator ( ) ; int int = NUMBER ; while ( java.util.Iterator<org.springframework.integration.redis.store.MessageGroup> . hasNext ( ) ) { MessageGroup org.springframework.integration.redis.store.MessageGroup = java.util.Iterator<org.springframework.integration.redis.store.MessageGroup> . next ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.redis.store.MessageGroup . getGroupId ( ) ; if ( java.lang.String . boolean ( STRING ) ) { assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . getMessages ( ) . size ( ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . getMessages ( ) . size ( ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . getMessages ( ) . size ( ) ) ; } int ++ ; } assertEquals ( NUMBER , int ) ; org.springframework.integration.redis.store.RedisMessageStore . removeMessageGroup ( NUMBER ) ; java.util.Iterator<org.springframework.integration.redis.store.MessageGroup> = org.springframework.integration.redis.store.RedisMessageStore . iterator ( ) ; int = NUMBER ; while ( java.util.Iterator<org.springframework.integration.redis.store.MessageGroup> . hasNext ( ) ) { java.util.Iterator<org.springframework.integration.redis.store.MessageGroup> . next ( ) ; int ++ ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable @ Ignore public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; final RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; final RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; final Message < ? > org.springframework.integration.redis.store.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = null ; final java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; java.util.concurrent.ExecutorService . void ( ( ) { MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . addMessageToGroup ( NUMBER , org.springframework.integration.redis.store.Message<> ) ; if ( org.springframework.integration.redis.store.MessageGroup . getMessages ( ) . size ( ) != NUMBER ) { java.util.List<java.lang.Object> . boolean ( STRING ) ; throw new AssertionFailedError ( STRING ) ; } } ) ; java.util.concurrent.ExecutorService . void ( ( ) { org.springframework.integration.redis.store.RedisMessageStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.redis.store.Message<> ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( NUMBER ) ; if ( org.springframework.integration.redis.store.MessageGroup . getMessages ( ) . size ( ) != NUMBER ) { java.util.List<java.lang.Object> . boolean ( STRING ) ; throw new AssertionFailedError ( STRING ) ; } } ) ; java.util.concurrent.ExecutorService . void ( ) ; java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; org.springframework.integration.redis.store.RedisMessageStore . removeMessagesFromGroup ( NUMBER , org.springframework.integration.redis.store.Message<> ) ; } assertTrue ( java.util.List<java.lang.Object> . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.redis.store.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.redis.store.RedisMessageGroupStoreTests> ( ) ) ; MessageChannel org.springframework.integration.redis.store.MessageChannel = org.springframework.integration.redis.store.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; QueueChannel org.springframework.integration.redis.store.QueueChannel = org.springframework.integration.redis.store.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( NUMBER ) . build ( ) ; org.springframework.integration.redis.store.MessageChannel . send ( org.springframework.integration.redis.store.Message<> ) ; assertNull ( org.springframework.integration.redis.store.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.redis.store.MessageChannel . send ( org.springframework.integration.redis.store.Message<> ) ; assertNull ( org.springframework.integration.redis.store.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.redis.store.ClassPathXmlApplicationContext . close ( ) ; org.springframework.integration.redis.store.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.redis.store.RedisMessageGroupStoreTests> ( ) ) ; org.springframework.integration.redis.store.MessageChannel = org.springframework.integration.redis.store.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.redis.store.QueueChannel = org.springframework.integration.redis.store.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( NUMBER ) . build ( ) ; org.springframework.integration.redis.store.MessageChannel . send ( org.springframework.integration.redis.store.Message<> ) ; assertNotNull ( org.springframework.integration.redis.store.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.redis.store.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; RedisMessageStore org.springframework.integration.redis.store.RedisMessageStore = new RedisMessageStore ( org.springframework.integration.redis.store.RedisConnectionFactory ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.redis.store.RedisMessageStore . removeMessageGroup ( STRING ) ; java.util.List<org.springframework.integration.redis.store.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.redis.store.Message<?>> = new java.util.ArrayList<org.springframework.integration.redis.store.Message<?>> < Message < ? > > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < java.lang.String > org.springframework.integration.redis.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.redis.store.RedisMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.redis.store.Message<java.lang.String> ) ; java.util.List<org.springframework.integration.redis.store.Message<?>> . add ( org.springframework.integration.redis.store.Message<java.lang.String> ) ; } MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; org.springframework.integration.redis.store.RedisMessageStore . removeMessagesFromGroup ( java.lang.String , java.util.List<org.springframework.integration.redis.store.Message<?>> ) ; org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.RedisMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroup . size ( ) ) ; org.springframework.integration.redis.store.RedisMessageStore . removeMessageGroup ( STRING ) ; }  <METHOD_END>
