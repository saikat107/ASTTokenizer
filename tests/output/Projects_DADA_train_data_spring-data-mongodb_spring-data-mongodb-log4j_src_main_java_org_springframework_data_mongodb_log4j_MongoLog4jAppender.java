<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { super( boolean ); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . org.springframework.data.mongodb.log4j.PatternLayout = new PatternLayout ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return org.springframework.data.mongodb.log4j.WriteConcern . toString ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.data.mongodb.log4j.WriteConcern = WriteConcern . valueOf ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return org.springframework.data.mongodb.log4j.WriteConcern . toString ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.data.mongodb.log4j.WriteConcern = WriteConcern . valueOf ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) java.net.UnknownHostException { this . org.springframework.data.mongodb.log4j.Mongo = org.springframework.data.mongodb.log4j.MongoClient ( ) ; this . org.springframework.data.mongodb.log4j.DB = org.springframework.data.mongodb.log4j.Mongo . getDB ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.log4j.MongoClient org.springframework.data.mongodb.log4j.MongoClient ( ) java.net.UnknownHostException { ServerAddress org.springframework.data.mongodb.log4j.ServerAddress = new ServerAddress ( java.lang.String , int ) ; if ( null == java.lang.String || null == java.lang.String ) { return new MongoClient ( org.springframework.data.mongodb.log4j.ServerAddress ) ; } java.lang.String java.lang.String = java.lang.String == null ? this . java.lang.String : java.lang.String ; MongoCredential org.springframework.data.mongodb.log4j.MongoCredential = MongoCredential . createCredential ( java.lang.String , java.lang.String , java.lang.String . char[] ( ) ) ; java.util.List<org.springframework.data.mongodb.log4j.MongoCredential> < MongoCredential > java.util.List<org.springframework.data.mongodb.log4j.MongoCredential> = java.util.Collections . java.util.List ( org.springframework.data.mongodb.log4j.MongoCredential ) ; return new MongoClient ( org.springframework.data.mongodb.log4j.ServerAddress , java.util.List<org.springframework.data.mongodb.log4j.MongoCredential> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING } ) protected void void ( final LoggingEvent org.springframework.data.mongodb.log4j.LoggingEvent ) { if ( null == org.springframework.data.mongodb.log4j.DB ) { try { void ( ) ; } catch ( java.net.UnknownHostException java.net.UnknownHostException ) { throw new java.lang.RuntimeException ( java.net.UnknownHostException . java.lang.String ( ) , java.net.UnknownHostException ) ; } } BasicDBObject org.springframework.data.mongodb.log4j.BasicDBObject = new BasicDBObject ( ) ; if ( null != java.lang.String ) { org.springframework.data.mongodb.log4j.BasicDBObject . put ( java.lang.String , java.lang.String ) ; MDC . put ( java.lang.String , java.lang.String ) ; } org.springframework.data.mongodb.log4j.BasicDBObject . put ( java.lang.String , org.springframework.data.mongodb.log4j.LoggingEvent . getLogger ( ) . getName ( ) ) ; org.springframework.data.mongodb.log4j.BasicDBObject . put ( java.lang.String , org.springframework.data.mongodb.log4j.LoggingEvent . getLevel ( ) . toString ( ) ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( org.springframework.data.mongodb.log4j.LoggingEvent . getTimeStamp ( ) ) ; org.springframework.data.mongodb.log4j.BasicDBObject . put ( java.lang.String , java.util.Calendar . java.util.Date ( ) ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.data.mongodb.log4j.LoggingEvent . getProperties ( ) ; if ( null != java.util.Map<java.lang.Object,java.lang.Object> && ! java.util.Map<java.lang.Object,java.lang.Object> . boolean ( ) ) { BasicDBObject org.springframework.data.mongodb.log4j.BasicDBObject = new BasicDBObject ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { org.springframework.data.mongodb.log4j.BasicDBObject . put ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) . java.lang.String ( ) , java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) . java.lang.String ( ) ) ; } org.springframework.data.mongodb.log4j.BasicDBObject . put ( java.lang.String , org.springframework.data.mongodb.log4j.BasicDBObject ) ; } java.lang.String [] java.lang.String[] = org.springframework.data.mongodb.log4j.LoggingEvent . getThrowableStrRep ( ) ; if ( null != java.lang.String[] && java.lang.String[] . int > NUMBER ) { BasicDBList org.springframework.data.mongodb.log4j.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.log4j.BasicDBList . addAll ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; org.springframework.data.mongodb.log4j.BasicDBObject . put ( java.lang.String , org.springframework.data.mongodb.log4j.BasicDBList ) ; } org.springframework.data.mongodb.log4j.BasicDBObject . put ( java.lang.String , org.springframework.data.mongodb.log4j.LoggingEvent . getRenderedMessage ( ) ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; MDC . put ( java.lang.String , java.util.Calendar . int ( java.util.Calendar . int ) ) ; MDC . put ( java.lang.String , java.lang.String . java.lang.String ( STRING , java.util.Calendar . int ( java.util.Calendar . int ) + NUMBER ) ) ; MDC . put ( java.lang.String , java.lang.String . java.lang.String ( STRING , java.util.Calendar . int ( java.util.Calendar . int ) ) ) ; MDC . put ( java.lang.String , java.lang.String . java.lang.String ( STRING , java.util.Calendar . int ( java.util.Calendar . int ) ) ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.log4j.PatternLayout . format ( org.springframework.data.mongodb.log4j.LoggingEvent ) ; MDC . remove ( java.lang.String ) ; MDC . remove ( java.lang.String ) ; MDC . remove ( java.lang.String ) ; MDC . remove ( java.lang.String ) ; if ( null != java.lang.String ) { MDC . remove ( java.lang.String ) ; } WriteConcern org.springframework.data.mongodb.log4j.WriteConcern ; if ( org.springframework.data.mongodb.log4j.LoggingEvent . getLevel ( ) . isGreaterOrEqual ( Level . WARN ) ) { org.springframework.data.mongodb.log4j.WriteConcern = org.springframework.data.mongodb.log4j.WriteConcern ; } else { org.springframework.data.mongodb.log4j.WriteConcern = org.springframework.data.mongodb.log4j.WriteConcern ; } org.springframework.data.mongodb.log4j.DB . getCollection ( java.lang.String ) . insert ( org.springframework.data.mongodb.log4j.BasicDBObject , org.springframework.data.mongodb.log4j.WriteConcern ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( org.springframework.data.mongodb.log4j.Mongo != null ) { org.springframework.data.mongodb.log4j.Mongo . close ( ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return true ; }  <METHOD_END>
