<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsConditionTests.TestConfig .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsConditionTests.TestConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsConditionTests.TestConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsConditionTests.TestConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsConditionTests.TestConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; this . org.springframework.boot.autoconfigure.couchbase.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
