<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersParameterAccessorUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class ) ; MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = new MongoQueryMethod ( java.lang.reflect.Method , org.springframework.data.mongodb.repository.query.RepositoryMetadata , org.springframework.data.mongodb.repository.query.ProjectionFactory , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , new java.lang.Object [] { new Point ( NUMBER , NUMBER ) } ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getDistanceRange ( ) . getUpperBound ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersParameterAccessorUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Distance .class ) ; MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = new MongoQueryMethod ( java.lang.reflect.Method , org.springframework.data.mongodb.repository.query.RepositoryMetadata , org.springframework.data.mongodb.repository.query.ProjectionFactory , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , new java.lang.Object [] { new Point ( NUMBER , NUMBER ) , org.springframework.data.mongodb.repository.query.Distance } ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getDistanceRange ( ) . getUpperBound ( ) , is ( org.springframework.data.mongodb.repository.query.Distance ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersParameterAccessorUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Distance .class ) ; MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = new MongoQueryMethod ( java.lang.reflect.Method , org.springframework.data.mongodb.repository.query.RepositoryMetadata , org.springframework.data.mongodb.repository.query.ProjectionFactory , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , new java.lang.Object [] { new Point ( NUMBER , NUMBER ) , org.springframework.data.mongodb.repository.query.Distance } ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getFullText ( ) , IsNull . nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersParameterAccessorUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , TextCriteria .class ) ; MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = new MongoQueryMethod ( java.lang.reflect.Method , org.springframework.data.mongodb.repository.query.RepositoryMetadata , org.springframework.data.mongodb.repository.query.ProjectionFactory , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , new java.lang.Object [] { STRING , TextCriteria . forDefaultLanguage ( ) . matching ( STRING ) } ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getFullText ( ) . getCriteriaObject ( ) . toJson ( ) , equalTo ( Document . parse ( STRING ) . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoParametersParameterAccessorUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Range .class ) ; MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = new MongoQueryMethod ( java.lang.reflect.Method , org.springframework.data.mongodb.repository.query.RepositoryMetadata , org.springframework.data.mongodb.repository.query.ProjectionFactory , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; Distance org.springframework.data.mongodb.repository.query.Distance = new Distance ( NUMBER , Metrics . KILOMETERS ) ; Distance org.springframework.data.mongodb.repository.query.Distance = new Distance ( NUMBER , Metrics . KILOMETERS ) ; MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , new java.lang.Object [] { new Point ( NUMBER , NUMBER ) , Distance . between ( org.springframework.data.mongodb.repository.query.Distance , org.springframework.data.mongodb.repository.query.Distance ) } ) ; Range < Distance > org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> = org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getDistanceRange ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> . getLowerBound ( ) , is ( org.springframework.data.mongodb.repository.query.Distance ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> . getUpperBound ( ) , is ( org.springframework.data.mongodb.repository.query.Distance ) ) ; }  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( Point org.springframework.data.mongodb.repository.query.Point );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( Point org.springframework.data.mongodb.repository.query.Point , Distance org.springframework.data.mongodb.repository.query.Distance );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( Point org.springframework.data.mongodb.repository.query.Point , Range < Distance > org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String , TextCriteria org.springframework.data.mongodb.repository.query.TextCriteria );  <METHOD_END>
