<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . register ( LdapAutoConfiguration .class , LdapDataAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class , EndpointAutoConfiguration .class , HealthIndicatorAutoConfiguration .class ) ; this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . refresh ( ) ; LdapTemplate org.springframework.boot.actuate.health.LdapTemplate = this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . getBean ( LdapTemplate .class ) ; assertThat ( org.springframework.boot.actuate.health.LdapTemplate ) . isNotNull ( ) ; LdapHealthIndicator org.springframework.boot.actuate.health.LdapHealthIndicator = this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . getBean ( LdapHealthIndicator .class ) ; assertThat ( org.springframework.boot.actuate.health.LdapHealthIndicator ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { LdapTemplate org.springframework.boot.actuate.health.LdapTemplate = mock ( LdapTemplate .class ) ; given ( org.springframework.boot.actuate.health.LdapTemplate . executeReadOnly ( ( ContextExecutor < java.lang.String > ) any ( ) ) ) . willReturn ( STRING ) ; LdapHealthIndicator org.springframework.boot.actuate.health.LdapHealthIndicator = new LdapHealthIndicator ( org.springframework.boot.actuate.health.LdapTemplate ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.LdapHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.boot.actuate.health.LdapTemplate ) . executeReadOnly ( ( ContextExecutor < java.lang.String > ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { LdapTemplate org.springframework.boot.actuate.health.LdapTemplate = mock ( LdapTemplate .class ) ; given ( org.springframework.boot.actuate.health.LdapTemplate . executeReadOnly ( ( ContextExecutor < java.lang.String > ) any ( ) ) ) . willThrow ( new CommunicationException ( new javax . naming . javax.naming.CommunicationException ( STRING ) ) ) ; LdapHealthIndicator org.springframework.boot.actuate.health.LdapHealthIndicator = new LdapHealthIndicator ( org.springframework.boot.actuate.health.LdapTemplate ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.LdapHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( ( java.lang.String ) org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . contains ( STRING ) ; verify ( org.springframework.boot.actuate.health.LdapTemplate ) . executeReadOnly ( ( ContextExecutor < java.lang.String > ) any ( ) ) ; }  <METHOD_END>
