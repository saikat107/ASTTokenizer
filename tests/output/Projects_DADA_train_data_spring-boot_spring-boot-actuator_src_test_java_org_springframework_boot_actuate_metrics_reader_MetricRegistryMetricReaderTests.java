<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.reader.MetricRegistry . register ( STRING , new Gauge < java.util.Set<java.lang.String> < java.lang.String > > ( ) { @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return new java.util.HashSet<java.lang.String> <> ( ) ; } } ) ; assertThat ( this . org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader . findOne ( STRING ) ) . isNull ( ) ; this . org.springframework.boot.actuate.metrics.reader.MetricRegistry . remove ( STRING ) ; assertThat ( this . org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader . findOne ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return new java.util.HashSet<java.lang.String> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { this . org.springframework.boot.actuate.metrics.reader.MetricRegistry . register ( STRING , new Gauge < java.lang.Number > ( ) { @ java.lang.Override public java.lang.Number java.lang.Number ( ) { return java.lang.Integer . java.lang.Integer ( NUMBER ) ; } } ) ; Metric < java.lang.Integer > org.springframework.boot.actuate.metrics.reader.Metric<java.lang.Integer> = ( Metric < java.lang.Integer > ) this . org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader . findOne ( STRING ) ; assertThat ( org.springframework.boot.actuate.metrics.reader.Metric<java.lang.Integer> . getValue ( ) ) . isEqualTo ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.reader.MetricRegistry . remove ( STRING ) ; assertThat ( this . org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader . findOne ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Number java.lang.Number ( ) { return java.lang.Integer . java.lang.Integer ( NUMBER ) ; }  <METHOD_END>
