<METHOD_START> public void ( JpaEntityInformation < T , ID > org.springframework.data.jpa.repository.support.JpaEntityInformation<T,ID> , EntityManager org.springframework.data.jpa.repository.support.EntityManager ) { this( org.springframework.data.jpa.repository.support.JpaEntityInformation<T,ID> , org.springframework.data.jpa.repository.support.EntityManager , org.springframework.data.jpa.repository.support.EntityPathResolver ); }  <METHOD_END>
<METHOD_START> public void ( JpaEntityInformation < T , ID > org.springframework.data.jpa.repository.support.JpaEntityInformation<T,ID> , EntityManager org.springframework.data.jpa.repository.support.EntityManager , EntityPathResolver org.springframework.data.jpa.repository.support.EntityPathResolver ) { super( org.springframework.data.jpa.repository.support.JpaEntityInformation<T,ID> , org.springframework.data.jpa.repository.support.EntityManager ); this . org.springframework.data.jpa.repository.support.EntityPath<T> = org.springframework.data.jpa.repository.support.EntityPathResolver . createPath ( org.springframework.data.jpa.repository.support.JpaEntityInformation<T,ID> . getJavaType ( ) ) ; this . org.springframework.data.jpa.repository.support.PathBuilder<T> = new PathBuilder < T > ( org.springframework.data.jpa.repository.support.EntityPath<T> . getType ( ) , org.springframework.data.jpa.repository.support.EntityPath<T> . getMetadata ( ) ) ; this . org.springframework.data.jpa.repository.support.Querydsl = new Querydsl ( org.springframework.data.jpa.repository.support.EntityManager , org.springframework.data.jpa.repository.support.PathBuilder<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Predicate org.springframework.data.jpa.repository.support.Predicate ) { return org.springframework.data.jpa.repository.support.JPQLQuery<?> ( org.springframework.data.jpa.repository.support.Predicate ) . select ( org.springframework.data.jpa.repository.support.EntityPath<T> ) . fetchOne ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( Predicate org.springframework.data.jpa.repository.support.Predicate ) { return org.springframework.data.jpa.repository.support.JPQLQuery<?> ( org.springframework.data.jpa.repository.support.Predicate ) . select ( org.springframework.data.jpa.repository.support.EntityPath<T> ) . fetch ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( Predicate org.springframework.data.jpa.repository.support.Predicate , org.springframework.data.jpa.repository.support.OrderSpecifier<?> < ? > ... org.springframework.data.jpa.repository.support.OrderSpecifier<?>[] ) { return java.util.List<T> ( org.springframework.data.jpa.repository.support.JPQLQuery<?> ( org.springframework.data.jpa.repository.support.Predicate ) . select ( org.springframework.data.jpa.repository.support.EntityPath<T> ) , org.springframework.data.jpa.repository.support.OrderSpecifier<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( Predicate org.springframework.data.jpa.repository.support.Predicate , Sort org.springframework.data.jpa.repository.support.Sort ) { Assert . notNull ( org.springframework.data.jpa.repository.support.Sort , STRING ) ; return java.util.List<T> ( org.springframework.data.jpa.repository.support.JPQLQuery<?> ( org.springframework.data.jpa.repository.support.Predicate ) . select ( org.springframework.data.jpa.repository.support.EntityPath<T> ) , org.springframework.data.jpa.repository.support.Sort ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( org.springframework.data.jpa.repository.support.OrderSpecifier<?> < ? > ... org.springframework.data.jpa.repository.support.OrderSpecifier<?>[] ) { Assert . notNull ( org.springframework.data.jpa.repository.support.OrderSpecifier<?>[] , STRING ) ; return java.util.List<T> ( org.springframework.data.jpa.repository.support.JPQLQuery<?> ( new Predicate [ NUMBER ] ) . select ( org.springframework.data.jpa.repository.support.EntityPath<T> ) , org.springframework.data.jpa.repository.support.OrderSpecifier<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.repository.support.Page<T> < T > org.springframework.data.jpa.repository.support.Page<T> ( Predicate org.springframework.data.jpa.repository.support.Predicate , Pageable org.springframework.data.jpa.repository.support.Pageable ) { Assert . notNull ( org.springframework.data.jpa.repository.support.Pageable , STRING ) ; final JPQLQuery < ? > org.springframework.data.jpa.repository.support.JPQLQuery<?> = org.springframework.data.jpa.repository.support.JPQLQuery<?> ( org.springframework.data.jpa.repository.support.Predicate ) ; JPQLQuery < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> = org.springframework.data.jpa.repository.support.Querydsl . applyPagination ( org.springframework.data.jpa.repository.support.Pageable , org.springframework.data.jpa.repository.support.JPQLQuery<?> ( org.springframework.data.jpa.repository.support.Predicate ) . select ( org.springframework.data.jpa.repository.support.EntityPath<T> ) ) ; return PageableExecutionUtils . getPage ( org.springframework.data.jpa.repository.support.JPQLQuery<T> . fetch ( ) , org.springframework.data.jpa.repository.support.Pageable , ( ) countQuery . fetchCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( Predicate org.springframework.data.jpa.repository.support.Predicate ) { return org.springframework.data.jpa.repository.support.JPQLQuery<?> ( org.springframework.data.jpa.repository.support.Predicate ) . fetchCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.jpa.repository.support.Predicate ) { return org.springframework.data.jpa.repository.support.JPQLQuery<?> ( org.springframework.data.jpa.repository.support.Predicate ) . fetchCount ( ) > NUMBER ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.jpa.repository.support.JPQLQuery<?> < ? > org.springframework.data.jpa.repository.support.JPQLQuery<?> ( Predicate ... org.springframework.data.jpa.repository.support.Predicate[] ) { AbstractJPAQuery < ? , ? > org.springframework.data.jpa.repository.support.AbstractJPAQuery<?,?> = org.springframework.data.jpa.repository.support.Querydsl . createQuery ( org.springframework.data.jpa.repository.support.EntityPath<T> ) . where ( org.springframework.data.jpa.repository.support.Predicate[] ) ; CrudMethodMetadata org.springframework.data.jpa.repository.support.CrudMethodMetadata = getRepositoryMethodMetadata ( ) ; if ( org.springframework.data.jpa.repository.support.CrudMethodMetadata == null ) { return org.springframework.data.jpa.repository.support.AbstractJPAQuery<,> ; } LockModeType org.springframework.data.jpa.repository.support.LockModeType = org.springframework.data.jpa.repository.support.CrudMethodMetadata . getLockModeType ( ) ; org.springframework.data.jpa.repository.support.AbstractJPAQuery<?,?> = org.springframework.data.jpa.repository.support.LockModeType == null ? org.springframework.data.jpa.repository.support.AbstractJPAQuery<,> : org.springframework.data.jpa.repository.support.AbstractJPAQuery<,> . setLockMode ( org.springframework.data.jpa.repository.support.LockModeType ) ; for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : getQueryHints ( ) . entrySet ( ) ) { org.springframework.data.jpa.repository.support.AbstractJPAQuery<,> . setHint ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } return org.springframework.data.jpa.repository.support.AbstractJPAQuery<,> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.jpa.repository.support.JPQLQuery<?> < ? > org.springframework.data.jpa.repository.support.JPQLQuery<?> ( Predicate org.springframework.data.jpa.repository.support.Predicate ) { return org.springframework.data.jpa.repository.support.Querydsl . createQuery ( org.springframework.data.jpa.repository.support.EntityPath<T> ) . where ( org.springframework.data.jpa.repository.support.Predicate ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<T> < T > java.util.List<T> ( JPQLQuery < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> , org.springframework.data.jpa.repository.support.OrderSpecifier<?> < ? > ... org.springframework.data.jpa.repository.support.OrderSpecifier<?>[] ) { return java.util.List<T> ( org.springframework.data.jpa.repository.support.JPQLQuery<T> , new QSort ( org.springframework.data.jpa.repository.support.OrderSpecifier<?>[] ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<T> < T > java.util.List<T> ( JPQLQuery < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> , Sort org.springframework.data.jpa.repository.support.Sort ) { return org.springframework.data.jpa.repository.support.Querydsl . applySorting ( org.springframework.data.jpa.repository.support.Sort , org.springframework.data.jpa.repository.support.JPQLQuery<T> ) . fetch ( ) ; }  <METHOD_END>
