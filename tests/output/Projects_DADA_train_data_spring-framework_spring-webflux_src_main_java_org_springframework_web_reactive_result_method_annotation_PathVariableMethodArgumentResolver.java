<METHOD_START> public void ( ConfigurableBeanFactory org.springframework.web.reactive.result.method.annotation.ConfigurableBeanFactory , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.ConfigurableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return checkAnnotatedParamNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , PathVariable .class , this :: boolean ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( PathVariable org.springframework.web.reactive.result.method.annotation.PathVariable , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ! java.util.Map .class . boolean ( java.lang.Class<> ) || StringUtils . hasText ( org.springframework.web.reactive.result.method.annotation.PathVariable . name ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.NamedValueInfo org.springframework.web.reactive.result.method.annotation.NamedValueInfo ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { PathVariable org.springframework.web.reactive.result.method.annotation.PathVariable = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterAnnotation ( PathVariable .class ) ; return new org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver.PathVariableNamedValueInfo ( org.springframework.web.reactive.result.method.annotation.PathVariable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.lang.String java.lang.String = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; return org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getAttribute ( java.lang.String ) . map ( value -> ( ( Map < String , String > ) value ) . get ( name ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { throw new ServerErrorException ( java.lang.String , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , Model org.springframework.web.reactive.result.method.annotation.Model , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { }  <METHOD_END>
<METHOD_START> public void ( PathVariable org.springframework.web.reactive.result.method.annotation.PathVariable ) { super( org.springframework.web.reactive.result.method.annotation.PathVariable . name ( ) , org.springframework.web.reactive.result.method.annotation.PathVariable . required ( ) , ValueConstants . DEFAULT_NONE ); }  <METHOD_END>
