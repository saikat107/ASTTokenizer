<METHOD_START> protected void ( H H ) { super( H ); this . endpointFactoryBean . setAdviceChain ( this . java.util.List<org.springframework.integration.dsl.Advice> ) ; if ( H instanceof AbstractReplyProducingMessageHandler ) { ( ( AbstractReplyProducingMessageHandler ) H ) . setAdviceChain ( this . java.util.List<org.springframework.integration.dsl.Advice> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( int int ) { this . endpointFactoryBean . setPhase ( int ) ; return _this ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( boolean boolean ) { this . endpointFactoryBean . setAutoStartup ( boolean ) ; return _this ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( PollerMetadata org.springframework.integration.dsl.PollerMetadata ) { this . endpointFactoryBean . setPollerMetadata ( org.springframework.integration.dsl.PollerMetadata ) ; return _this ( ) ; }  <METHOD_END>
<METHOD_START> public S S ( Advice ... org.springframework.integration.dsl.Advice[] ) { this . java.util.List<org.springframework.integration.dsl.Advice> . addAll ( java.util.Arrays . java.util.List ( org.springframework.integration.dsl.Advice[] ) ) ; return _this ( ) ; }  <METHOD_END>
<METHOD_START> public S S ( PlatformTransactionManager org.springframework.integration.dsl.PlatformTransactionManager ) { return S ( org.springframework.integration.dsl.PlatformTransactionManager , false ) ; }  <METHOD_END>
<METHOD_START> public S S ( PlatformTransactionManager org.springframework.integration.dsl.PlatformTransactionManager , boolean boolean ) { return S ( new TransactionInterceptorBuilder ( boolean ) . transactionManager ( org.springframework.integration.dsl.PlatformTransactionManager ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> public S S ( TransactionInterceptor org.springframework.integration.dsl.TransactionInterceptor ) { return S ( org.springframework.integration.dsl.TransactionInterceptor ) ; }  <METHOD_END>
<METHOD_START> public S S ( ) { return S ( false ) ; }  <METHOD_END>
<METHOD_START> public S S ( boolean boolean ) { TransactionInterceptor org.springframework.integration.dsl.TransactionInterceptor = new TransactionInterceptorBuilder ( boolean ) . build ( ) ; this . componentsToRegister . add ( org.springframework.integration.dsl.TransactionInterceptor ) ; return S ( org.springframework.integration.dsl.TransactionInterceptor ) ; }  <METHOD_END>
<METHOD_START> public S S ( boolean boolean ) { assertHandler ( ) ; if ( this . handler instanceof AbstractReplyProducingMessageHandler ) { ( ( AbstractReplyProducingMessageHandler ) this . handler ) . setRequiresReply ( boolean ) ; } else { logger . warn ( STRING ) ; } return _this ( ) ; }  <METHOD_END>
<METHOD_START> public S S ( long long ) { assertHandler ( ) ; if ( this . handler instanceof AbstractMessageProducingHandler ) { ( ( AbstractMessageProducingHandler ) this . handler ) . setSendTimeout ( long ) ; } else if ( this . handler instanceof AbstractMessageRouter ) { ( ( AbstractMessageRouter ) this . handler ) . setSendTimeout ( long ) ; } else { logger . warn ( STRING ) ; } return _this ( ) ; }  <METHOD_END>
<METHOD_START> public S S ( int int ) { assertHandler ( ) ; if ( this . handler instanceof AbstractMessageHandler ) { ( ( AbstractMessageHandler ) this . handler ) . setOrder ( int ) ; } else { logger . warn ( STRING ) ; } return _this ( ) ; }  <METHOD_END>
<METHOD_START> public S S ( boolean boolean ) { assertHandler ( ) ; if ( this . handler instanceof AbstractMessageProducingHandler ) { ( ( AbstractMessageProducingHandler ) this . handler ) . setAsync ( boolean ) ; } else { logger . warn ( STRING ) ; } return _this ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.dsl.Tuple2<org.springframework.integration.dsl.ConsumerEndpointFactoryBean,H> < ConsumerEndpointFactoryBean , H > org.springframework.integration.dsl.Tuple2<org.springframework.integration.dsl.ConsumerEndpointFactoryBean,H> ( ) { this . endpointFactoryBean . setHandler ( this . handler ) ; return super. doGet ( ) ; }  <METHOD_END>
