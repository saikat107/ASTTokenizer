<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.kafka.KafkaAutoConfigurationIntegrationTests.KafkaConfig .class , STRING + org.springframework.boot.autoconfigure.kafka.KafkaEmbedded . getBrokersAsString ( ) , STRING , STRING ) ; @ java.lang.SuppressWarnings ( STRING ) KafkaTemplate < java.lang.String , java.lang.String > org.springframework.boot.autoconfigure.kafka.KafkaTemplate<java.lang.String,java.lang.String> = this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . getBean ( KafkaTemplate .class ) ; org.springframework.boot.autoconfigure.kafka.KafkaTemplate<java.lang.String,java.lang.String> . send ( java.lang.String , STRING , STRING ) ; org.springframework.boot.autoconfigure.kafka.KafkaAutoConfigurationIntegrationTests.Listener org.springframework.boot.autoconfigure.kafka.KafkaAutoConfigurationIntegrationTests.Listener = this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.kafka.KafkaAutoConfigurationIntegrationTests.Listener .class ) ; assertThat ( org.springframework.boot.autoconfigure.kafka.KafkaAutoConfigurationIntegrationTests.Listener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.kafka.KafkaAutoConfigurationIntegrationTests.Listener . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.kafka.KafkaAutoConfigurationIntegrationTests.Listener . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext ( new java.lang.Class<?> < ? > [] { java.lang.Class<> } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . register ( KafkaAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.boot.autoconfigure.kafka.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.kafka.KafkaAutoConfigurationIntegrationTests.Listener org.springframework.boot.autoconfigure.kafka.KafkaAutoConfigurationIntegrationTests.Listener ( ) { return new org.springframework.boot.autoconfigure.kafka.KafkaAutoConfigurationIntegrationTests.Listener ( ) ; }  <METHOD_END>
<METHOD_START> @ KafkaListener ( topics = java.lang.String ) public void void ( java.lang.String java.lang.String , @ Header ( KafkaHeaders . RECEIVED_MESSAGE_KEY ) java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
