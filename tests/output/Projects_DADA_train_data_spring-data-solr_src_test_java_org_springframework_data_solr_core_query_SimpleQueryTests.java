<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SimpleQuery ( ) . addCriteria ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SimpleQuery ( ) . addCriteria ( new Criteria ( new SimpleField ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.query.Criteria = new Criteria ( STRING ) ; Criteria org.springframework.data.solr.core.query.Criteria = new Criteria ( STRING ) ; Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( ) . addCriteria ( org.springframework.data.solr.core.query.Criteria ) . addCriteria ( org.springframework.data.solr.core.query.Criteria ) ; Assert . assertThat ( org.springframework.data.solr.core.query.Query . getCriteria ( ) . getSiblings ( ) , IsIterableContainingInOrder . contains ( org.springframework.data.solr.core.query.Criteria , org.springframework.data.solr.core.query.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SimpleQuery ( ) . addProjectionOnField ( ( Field ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SimpleQuery ( ) . addProjectionOnField ( new SimpleField ( StringUtils . EMPTY ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( ) . addProjectionOnField ( new SimpleField ( STRING ) ) . addProjectionOnField ( new SimpleField ( STRING ) ) ; Assert . assertEquals ( NUMBER , ( ( java.util.List ) org.springframework.data.solr.core.query.Query . getProjectionOnFields ( ) ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.query.SimpleQuery = new SimpleQuery ( ) ; Assert . assertThat ( org.springframework.data.solr.core.query.SimpleQuery . getPageRequest ( ) . isUnpaged ( ) , is ( true ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.SimpleQuery . getOffset ( ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.SimpleQuery . getRows ( ) ) ; Pageable org.springframework.data.solr.core.query.Pageable = new PageRequest ( NUMBER , NUMBER ) ; org.springframework.data.solr.core.query.SimpleQuery . setPageRequest ( org.springframework.data.solr.core.query.Pageable ) ; Assert . assertThat ( org.springframework.data.solr.core.query.SimpleQuery . getPageRequest ( ) , IsEqual . equalTo ( org.springframework.data.solr.core.query.Pageable ) ) ; Assert . assertThat ( org.springframework.data.solr.core.query.SimpleQuery . getSort ( ) , IsEqual . equalTo ( Sort . unsorted ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.query.SimpleQuery = new SimpleQuery ( ) ; Pageable org.springframework.data.solr.core.query.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING , STRING ) ; org.springframework.data.solr.core.query.SimpleQuery . setPageRequest ( org.springframework.data.solr.core.query.Pageable ) ; Assert . assertThat ( org.springframework.data.solr.core.query.SimpleQuery . getPageRequest ( ) , IsEqual . equalTo ( org.springframework.data.solr.core.query.Pageable ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.query.SimpleQuery . getSort ( ) ) ; int int = NUMBER ; for ( Order org.springframework.data.solr.core.query.Order : org.springframework.data.solr.core.query.SimpleQuery . getSort ( ) ) { Assert . assertEquals ( Sort . Direction . DESC , org.springframework.data.solr.core.query.Order . getDirection ( ) ) ; Assert . assertEquals ( STRING + ( ++ int ) , org.springframework.data.solr.core.query.Order . getProperty ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.query.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) , new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING , STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.query.SimpleQuery . getPageRequest ( ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.query.SimpleQuery . getSort ( ) ) ; int int = NUMBER ; for ( Order org.springframework.data.solr.core.query.Order : org.springframework.data.solr.core.query.SimpleQuery . getSort ( ) ) { Assert . assertEquals ( Sort . Direction . DESC , org.springframework.data.solr.core.query.Order . getDirection ( ) ) ; Assert . assertEquals ( STRING + ( ++ int ) , org.springframework.data.solr.core.query.Order . getProperty ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SimpleQuery ( ) . setPageRequest ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.query.FacetOptions = new FacetOptions ( STRING , STRING ) ; FacetQuery org.springframework.data.solr.core.query.FacetQuery = new SimpleFacetQuery ( ) . setFacetOptions ( org.springframework.data.solr.core.query.FacetOptions ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.FacetOptions , org.springframework.data.solr.core.query.FacetQuery . getFacetOptions ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.query.FacetQuery = new SimpleFacetQuery ( ) . setFacetOptions ( null ) ; Assert . assertNull ( org.springframework.data.solr.core.query.FacetQuery . getFacetOptions ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SimpleFacetQuery ( ) . setFacetOptions ( new FacetOptions ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SimpleQuery ( ) . addGroupByField ( ( Field ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SimpleQuery ( ) . addGroupByField ( new SimpleField ( StringUtils . EMPTY ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( ) . addGroupByField ( new SimpleField ( STRING ) ) . addGroupByField ( new SimpleField ( STRING ) ) ; Assert . assertEquals ( NUMBER , ( ( java.util.List ) org.springframework.data.solr.core.query.Query . getGroupByFields ( ) ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( ) ; Assert . assertNotSame ( org.springframework.data.solr.core.query.Query , SimpleQuery . fromQuery ( org.springframework.data.solr.core.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertNull ( SimpleQuery . fromQuery ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; Query org.springframework.data.solr.core.query.Query = SimpleQuery . fromQuery ( org.springframework.data.solr.core.query.Query ) ; Assert . assertNotSame ( org.springframework.data.solr.core.query.Query , org.springframework.data.solr.core.query.Query ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.query.Query . getCriteria ( ) . getField ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . addFilterQuery ( new SimpleQuery ( new Criteria ( STRING ) . startsWith ( STRING ) ) ) ; Query org.springframework.data.solr.core.query.Query = SimpleQuery . fromQuery ( org.springframework.data.solr.core.query.Query ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Query . getFilterQueries ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . addProjectionOnField ( new SimpleField ( STRING ) ) ; Query org.springframework.data.solr.core.query.Query = SimpleQuery . fromQuery ( org.springframework.data.solr.core.query.Query ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Query . getProjectionOnFields ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . addGroupByField ( new SimpleField ( STRING ) ) ; Query org.springframework.data.solr.core.query.Query = SimpleQuery . fromQuery ( org.springframework.data.solr.core.query.Query ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.Query . getGroupByFields ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . addSort ( new Sort ( Sort . Direction . DESC , STRING ) ) ; Query org.springframework.data.solr.core.query.Query = SimpleQuery . fromQuery ( org.springframework.data.solr.core.query.Query ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.Query . getSort ( ) , org.springframework.data.solr.core.query.Query . getSort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . setDefType ( STRING ) ; Query org.springframework.data.solr.core.query.Query = SimpleQuery . fromQuery ( org.springframework.data.solr.core.query.Query ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.Query . getDefType ( ) , org.springframework.data.solr.core.query.Query . getDefType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . setDefaultOperator ( Operator . OR ) ; Query org.springframework.data.solr.core.query.Query = SimpleQuery . fromQuery ( org.springframework.data.solr.core.query.Query ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.Query . getDefaultOperator ( ) , org.springframework.data.solr.core.query.Query . getDefaultOperator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . setTimeAllowed ( NUMBER ) ; Query org.springframework.data.solr.core.query.Query = SimpleQuery . fromQuery ( org.springframework.data.solr.core.query.Query ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.Query . getTimeAllowed ( ) , org.springframework.data.solr.core.query.Query . getTimeAllowed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . setRequestHandler ( STRING ) ; Query org.springframework.data.solr.core.query.Query = SimpleQuery . fromQuery ( org.springframework.data.solr.core.query.Query ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.Query . getRequestHandler ( ) , org.springframework.data.solr.core.query.Query . getRequestHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.solr.core.query.Sort = new Sort ( STRING , STRING ) ; Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . addSort ( org.springframework.data.solr.core.query.Sort ) ; Assert . assertNotNull ( org.springframework.data.solr.core.query.Query . getSort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . addSort ( null ) ; Assert . assertNull ( org.springframework.data.solr.core.query.Query . getSort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.solr.core.query.Sort = new Sort ( STRING , STRING ) ; Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . addSort ( org.springframework.data.solr.core.query.Sort ) ; org.springframework.data.solr.core.query.Query . addSort ( null ) ; Assert . assertNotNull ( org.springframework.data.solr.core.query.Query . getSort ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.Sort , org.springframework.data.solr.core.query.Query . getSort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.solr.core.query.Sort = new Sort ( STRING , STRING ) ; Sort org.springframework.data.solr.core.query.Sort = new Sort ( STRING ) ; Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; org.springframework.data.solr.core.query.Query . addSort ( org.springframework.data.solr.core.query.Sort ) ; org.springframework.data.solr.core.query.Query . addSort ( org.springframework.data.solr.core.query.Sort ) ; Assert . assertNotNull ( org.springframework.data.solr.core.query.Query . getSort ( ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.query.Query . getSort ( ) . getOrderFor ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.query.Query . getSort ( ) . getOrderFor ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.query.Query . getSort ( ) . getOrderFor ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.query.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.Query . getTimeAllowed ( ) ) ; org.springframework.data.solr.core.query.Query . setTimeAllowed ( NUMBER ) ; Assert . assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.data.solr.core.query.Query . getTimeAllowed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.query.SimpleQuery = new SimpleQuery ( STRING ) . setPageRequest ( new PageRequest ( NUMBER , NUMBER ) ) ; org.springframework.data.solr.core.query.SimpleQuery . setOffset ( NUMBER ) ; org.springframework.data.solr.core.query.SimpleQuery . setRows ( NUMBER ) ; Assert . assertThat ( org.springframework.data.solr.core.query.SimpleQuery . getOffset ( ) , Is . is ( NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.core.query.SimpleQuery . getRows ( ) , Is . is ( NUMBER ) ) ; }  <METHOD_END>
