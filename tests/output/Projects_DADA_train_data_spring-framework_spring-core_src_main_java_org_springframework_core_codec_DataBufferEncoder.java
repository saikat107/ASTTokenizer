<METHOD_START> public void ( ) { super( MimeTypeUtils . ALL ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.core.codec.ResolvableType , MimeType org.springframework.core.codec.MimeType ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.codec.ResolvableType . getRawClass ( ) ; return ( super. canEncode ( org.springframework.core.codec.ResolvableType , org.springframework.core.codec.MimeType ) && DataBuffer .class . boolean ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> < DataBuffer > org.springframework.core.codec.Flux<org.springframework.core.codec.DataBuffer> ( Publisher < ? extends DataBuffer > org.springframework.core.codec.Publisher<? extends org.springframework.core.codec.DataBuffer> , DataBufferFactory org.springframework.core.codec.DataBufferFactory , ResolvableType org.springframework.core.codec.ResolvableType , MimeType org.springframework.core.codec.MimeType , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return Flux . from ( org.springframework.core.codec.Publisher<> ) ; }  <METHOD_END>
