<METHOD_START> @ Before public void void ( ) { java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> = new java.util.ArrayList<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> <> ( ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> . add ( new DecoderHttpMessageReader <> ( StringDecoder . allMimeTypes ( true ) ) ) ; this . org.springframework.web.reactive.result.method.annotation.RequestBodyArgumentResolver = new RequestBodyArgumentResolver ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> , new ReactiveAdapterRegistry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) ) . arg ( Mono .class , java.lang.String .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.RequestBodyArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annotNotPresent ( RequestBody .class ) . arg ( java.lang.String .class ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.RequestBodyArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) ) . arg ( java.lang.String .class ) ; java.lang.String java.lang.String = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter , java.lang.String ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ServerWebInputException .class ) public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) ) . arg ( java.lang.String .class ) ; java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) . notRequired ( ) ) . arg ( java.lang.String .class ) ; java.lang.String java.lang.String = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; assertNull ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) ) . arg ( Mono .class , java.lang.String .class ) ; StepVerifier . create ( ( Mono < java.lang.Void > ) java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) . expectNextCount ( NUMBER ) . expectError ( ServerWebInputException .class ) . verify ( ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) . notRequired ( ) ) . arg ( Mono .class , java.lang.String .class ) ; StepVerifier . create ( ( Mono < java.lang.Void > ) java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) . expectNextCount ( NUMBER ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) ) . arg ( Flux .class , java.lang.String .class ) ; StepVerifier . create ( ( Flux < java.lang.Void > ) java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) . expectNextCount ( NUMBER ) . expectError ( ServerWebInputException .class ) . verify ( ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) . notRequired ( ) ) . arg ( Flux .class , java.lang.String .class ) ; StepVerifier . create ( ( Flux < java.lang.Void > ) java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) . expectNextCount ( NUMBER ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) ) . arg ( Single .class , java.lang.String .class ) ; Single < java.lang.String > org.springframework.web.reactive.result.method.annotation.Single<java.lang.String> = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; StepVerifier . create ( RxReactiveStreams . toPublisher ( org.springframework.web.reactive.result.method.annotation.Single<java.lang.String> ) ) . expectNextCount ( NUMBER ) . expectError ( ServerWebInputException .class ) . verify ( ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) . notRequired ( ) ) . arg ( Single .class , java.lang.String .class ) ; org.springframework.web.reactive.result.method.annotation.Single<java.lang.String> = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; StepVerifier . create ( RxReactiveStreams . toPublisher ( org.springframework.web.reactive.result.method.annotation.Single<java.lang.String> ) ) . expectNextCount ( NUMBER ) . expectError ( ServerWebInputException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) ) . arg ( Maybe .class , java.lang.String .class ) ; Maybe < java.lang.String > org.springframework.web.reactive.result.method.annotation.Maybe<java.lang.String> = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.Maybe<java.lang.String> . toFlowable ( ) ) . expectNextCount ( NUMBER ) . expectError ( ServerWebInputException .class ) . verify ( ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) . notRequired ( ) ) . arg ( Maybe .class , java.lang.String .class ) ; org.springframework.web.reactive.result.method.annotation.Maybe<java.lang.String> = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.Maybe<java.lang.String> . toFlowable ( ) ) . expectNextCount ( NUMBER ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) ) . arg ( Observable .class , java.lang.String .class ) ; Observable < java.lang.String > org.springframework.web.reactive.result.method.annotation.Observable<java.lang.String> = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; StepVerifier . create ( RxReactiveStreams . toPublisher ( org.springframework.web.reactive.result.method.annotation.Observable<java.lang.String> ) ) . expectNextCount ( NUMBER ) . expectError ( ServerWebInputException .class ) . verify ( ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) . notRequired ( ) ) . arg ( Observable .class , java.lang.String .class ) ; org.springframework.web.reactive.result.method.annotation.Observable<java.lang.String> = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; StepVerifier . create ( RxReactiveStreams . toPublisher ( org.springframework.web.reactive.result.method.annotation.Observable<java.lang.String> ) ) . expectNextCount ( NUMBER ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) ) . arg ( java.util.concurrent.CompletableFuture .class , java.lang.String .class ) ; java.util.concurrent.CompletableFuture<java.lang.String> < java.lang.String > java.util.concurrent.CompletableFuture<java.lang.String> = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; java.util.concurrent.CompletableFuture<java.lang.String> . java.util.concurrent.CompletableFuture<java.lang.String> ( ( java.lang.String , java.lang.Throwable ) -> { assertNull ( java.lang.String ) ; assertNotNull ( java.lang.Throwable ) ; } ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . annot ( requestBody ( ) . notRequired ( ) ) . arg ( java.util.concurrent.CompletableFuture .class , java.lang.String .class ) ; java.util.concurrent.CompletableFuture<java.lang.String> = java.lang.Object ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; java.util.concurrent.CompletableFuture<java.lang.String> . java.util.concurrent.CompletableFuture<java.lang.String> ( ( java.lang.String , java.lang.Throwable ) -> { assertNotNull ( java.lang.String ) ; assertNull ( java.lang.Throwable ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , java.lang.String java.lang.String ) { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . post ( STRING ) . body ( java.lang.String ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestBodyArgumentResolver . readBody ( org.springframework.web.reactive.result.method.annotation.MethodParameter , true , new BindingContext ( ) , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( STRING + java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterType ( ) . isAssignableFrom ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . post ( STRING ) . build ( ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.RequestBodyArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , new BindingContext ( ) , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; if ( java.lang.Object != null ) { assertTrue ( STRING + java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterType ( ) . isAssignableFrom ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void handle ( @ RequestBody java.lang.String java.lang.String , @ RequestBody Mono < java.lang.String > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> , @ RequestBody Flux < java.lang.String > org.springframework.web.reactive.result.method.annotation.Flux<java.lang.String> , @ RequestBody Single < java.lang.String > org.springframework.web.reactive.result.method.annotation.Single<java.lang.String> , @ RequestBody io . io . io < java.lang.String > rxJava2Single , @ RequestBody Maybe < java.lang.String > org.springframework.web.reactive.result.method.annotation.Maybe<java.lang.String> , @ RequestBody Observable < java.lang.String > org.springframework.web.reactive.result.method.annotation.Observable<java.lang.String> , @ RequestBody io . io . io < java.lang.String > rxjava2Obs , @ RequestBody java.util.concurrent.CompletableFuture<java.lang.String> < java.lang.String > java.util.concurrent.CompletableFuture<java.lang.String> , @ RequestBody ( required = false ) java.lang.String java.lang.String , @ RequestBody ( required = false ) Mono < java.lang.String > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> , @ RequestBody ( required = false ) Flux < java.lang.String > org.springframework.web.reactive.result.method.annotation.Flux<java.lang.String> , @ RequestBody ( required = false ) Single < java.lang.String > org.springframework.web.reactive.result.method.annotation.Single<java.lang.String> , @ RequestBody ( required = false ) io . io . io < java.lang.String > rxJava2SingleNotRequired , @ RequestBody ( required = false ) Maybe < java.lang.String > org.springframework.web.reactive.result.method.annotation.Maybe<java.lang.String> , @ RequestBody ( required = false ) Observable < java.lang.String > org.springframework.web.reactive.result.method.annotation.Observable<java.lang.String> , @ RequestBody ( required = false ) io . io . io < java.lang.String > rxjava2ObsNotRequired , @ RequestBody ( required = false ) java.util.concurrent.CompletableFuture<java.lang.String> < java.lang.String > java.util.concurrent.CompletableFuture<java.lang.String> , java.lang.String java.lang.String ) {}  <METHOD_END>
