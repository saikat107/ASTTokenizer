<METHOD_START> @ Test public void void ( ) { BeanUtils . instantiateClass ( java.util.ArrayList .class ) ; try { BeanUtils . instantiateClass ( java.util.List .class ) ; fail ( STRING ) ; } catch ( FatalBeanException org.springframework.beans.FatalBeanException ) { } try { BeanUtils . instantiateClass ( CustomDateEditor .class ) ; fail ( STRING ) ; } catch ( FatalBeanException org.springframework.beans.FatalBeanException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = java.beans.Introspector . java.beans.BeanInfo ( TestBean .class ) . java.beans.PropertyDescriptor[] ( ) ; java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = BeanUtils . getPropertyDescriptors ( TestBean .class ) ; assertNotNull ( STRING , java.beans.PropertyDescriptor[] ) ; assertEquals ( STRING , java.beans.PropertyDescriptor[] . int , java.beans.PropertyDescriptor[] . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = BeanUtils . getPropertyDescriptors ( org.springframework.beans.BeanUtilsTests.ContainerBean .class ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.PropertyDescriptor[] ) { if ( STRING . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ) { assertTrue ( STRING , java.beans.PropertyDescriptor . java.lang.Class<?> ( ) . boolean ( ) ) ; assertEquals ( java.beans.PropertyDescriptor . java.lang.Class<?> ( ) . java.lang.Class<?> ( ) , org.springframework.beans.BeanUtilsTests.ContainedBean .class ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( ResourceEditor .class , BeanUtils . findEditorByConvention ( Resource .class ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; org.springframework.beans.TestBean . setName ( STRING ) ; org.springframework.beans.TestBean . setAge ( NUMBER ) ; org.springframework.beans.TestBean . setTouchy ( STRING ) ; TestBean org.springframework.beans.TestBean = new TestBean ( ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) == null ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getTouchy ( ) == null ) ; BeanUtils . copyProperties ( org.springframework.beans.TestBean , org.springframework.beans.TestBean ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) . equals ( org.springframework.beans.TestBean . getName ( ) ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == org.springframework.beans.TestBean . getAge ( ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getTouchy ( ) . equals ( org.springframework.beans.TestBean . getTouchy ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DerivedTestBean org.springframework.beans.DerivedTestBean = new DerivedTestBean ( ) ; org.springframework.beans.DerivedTestBean . setName ( STRING ) ; org.springframework.beans.DerivedTestBean . setAge ( NUMBER ) ; org.springframework.beans.DerivedTestBean . setTouchy ( STRING ) ; TestBean org.springframework.beans.TestBean = new TestBean ( ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) == null ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getTouchy ( ) == null ) ; BeanUtils . copyProperties ( org.springframework.beans.DerivedTestBean , org.springframework.beans.TestBean ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) . equals ( org.springframework.beans.DerivedTestBean . getName ( ) ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == org.springframework.beans.DerivedTestBean . getAge ( ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getTouchy ( ) . equals ( org.springframework.beans.DerivedTestBean . getTouchy ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; org.springframework.beans.TestBean . setName ( STRING ) ; org.springframework.beans.TestBean . setAge ( NUMBER ) ; org.springframework.beans.TestBean . setTouchy ( STRING ) ; DerivedTestBean org.springframework.beans.DerivedTestBean = new DerivedTestBean ( ) ; assertTrue ( STRING , org.springframework.beans.DerivedTestBean . getName ( ) == null ) ; assertTrue ( STRING , org.springframework.beans.DerivedTestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.DerivedTestBean . getTouchy ( ) == null ) ; BeanUtils . copyProperties ( org.springframework.beans.TestBean , org.springframework.beans.DerivedTestBean ) ; assertTrue ( STRING , org.springframework.beans.DerivedTestBean . getName ( ) . equals ( org.springframework.beans.TestBean . getName ( ) ) ) ; assertTrue ( STRING , org.springframework.beans.DerivedTestBean . getAge ( ) == org.springframework.beans.TestBean . getAge ( ) ) ; assertTrue ( STRING , org.springframework.beans.DerivedTestBean . getTouchy ( ) . equals ( org.springframework.beans.TestBean . getTouchy ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) == null ) ; org.springframework.beans.TestBean . setAge ( NUMBER ) ; org.springframework.beans.TestBean . setTouchy ( STRING ) ; TestBean org.springframework.beans.TestBean = new TestBean ( ) ; org.springframework.beans.TestBean . setName ( STRING ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getTouchy ( ) == null ) ; BeanUtils . copyProperties ( org.springframework.beans.TestBean , org.springframework.beans.TestBean , ITestBean .class ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) == null ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getTouchy ( ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) == null ) ; org.springframework.beans.TestBean . setAge ( NUMBER ) ; org.springframework.beans.TestBean . setTouchy ( STRING ) ; TestBean org.springframework.beans.TestBean = new TestBean ( ) ; org.springframework.beans.TestBean . setName ( STRING ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getTouchy ( ) == null ) ; BeanUtils . copyProperties ( org.springframework.beans.TestBean , org.springframework.beans.TestBean , STRING , STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) == null ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getTouchy ( ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanUtilsTests.NameAndSpecialProperty org.springframework.beans.BeanUtilsTests.NameAndSpecialProperty = new org.springframework.beans.BeanUtilsTests.NameAndSpecialProperty ( ) ; org.springframework.beans.BeanUtilsTests.NameAndSpecialProperty . void ( STRING ) ; TestBean org.springframework.beans.TestBean = new TestBean ( ) ; BeanUtils . copyProperties ( org.springframework.beans.BeanUtilsTests.NameAndSpecialProperty , org.springframework.beans.TestBean , STRING ) ; assertEquals ( org.springframework.beans.TestBean . getName ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.BeanUtilsTests.InvalidProperty org.springframework.beans.BeanUtilsTests.InvalidProperty = new org.springframework.beans.BeanUtilsTests.InvalidProperty ( ) ; org.springframework.beans.BeanUtilsTests.InvalidProperty . void ( STRING ) ; org.springframework.beans.BeanUtilsTests.InvalidProperty . void ( true ) ; org.springframework.beans.BeanUtilsTests.InvalidProperty . void ( true ) ; org.springframework.beans.BeanUtilsTests.InvalidProperty org.springframework.beans.BeanUtilsTests.InvalidProperty = new org.springframework.beans.BeanUtilsTests.InvalidProperty ( ) ; BeanUtils . copyProperties ( org.springframework.beans.BeanUtilsTests.InvalidProperty , org.springframework.beans.BeanUtilsTests.InvalidProperty ) ; assertEquals ( org.springframework.beans.BeanUtilsTests.InvalidProperty . java.lang.String ( ) , STRING ) ; assertTrue ( org.springframework.beans.BeanUtilsTests.InvalidProperty . java.lang.Boolean ( ) ) ; assertTrue ( org.springframework.beans.BeanUtilsTests.InvalidProperty . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class . java.lang.reflect.Method ( STRING ) ; void ( java.lang.reflect.Method , STRING ) ; void ( java.lang.reflect.Method , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { BeanUtils . resolveSignature ( STRING , org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } try { BeanUtils . resolveSignature ( STRING , org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class , int .class } ) ; void ( java.lang.reflect.Method , STRING ) ; assertNull ( BeanUtils . resolveSignature ( STRING , org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class , int .class } ) ; void ( java.lang.reflect.Method , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class . java.lang.reflect.Method ( STRING ) ; void ( java.lang.reflect.Method , STRING ) ; java.lang.reflect.Method = org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , STRING ) ; java.lang.reflect.Method = org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class , BeanFactory .class } ) ; void ( java.lang.reflect.Method , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String [] .class } ) ; void ( java.lang.reflect.Method , STRING ) ; java.lang.reflect.Method = org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String [] [] .class } ) ; void ( java.lang.reflect.Method , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = BeanUtils . getPropertyDescriptors ( org.springframework.beans.BeanUtilsTests.Bean .class ) ; java.beans.PropertyDescriptor java.beans.PropertyDescriptor = BeanUtils . getPropertyDescriptor ( org.springframework.beans.BeanUtilsTests.Bean .class , STRING ) ; assertEquals ( java.lang.String .class , java.beans.PropertyDescriptor . java.lang.Class<?> ( ) ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.PropertyDescriptor[] ) { if ( java.beans.PropertyDescriptor . java.lang.String ( ) . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ) { assertEquals ( java.beans.PropertyDescriptor . java.lang.String ( ) + STRING , java.beans.PropertyDescriptor . java.lang.Class<?> ( ) , java.beans.PropertyDescriptor . java.lang.Class<?> ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { assertEquals ( java.lang.reflect.Method , BeanUtils . resolveSignature ( java.lang.String , org.springframework.beans.BeanUtilsTests.MethodSignatureBean .class ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.String = java.lang.Integer . java.lang.String ( int ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.BeanUtilsTests.ContainedBean [] org.springframework.beans.BeanUtilsTests.ContainedBean[] ( ) { return org.springframework.beans.BeanUtilsTests.ContainedBean[] ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.BeanUtilsTests.ContainedBean [] org.springframework.beans.BeanUtilsTests.ContainedBean[] ) { this . org.springframework.beans.BeanUtilsTests.ContainedBean[] = org.springframework.beans.BeanUtilsTests.ContainedBean[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , int int ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , BeanFactory org.springframework.beans.BeanFactory ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] [] java.lang.String[][] ) {		}  <METHOD_END>
<METHOD_START> K K ( )  <METHOD_END>
<METHOD_START> void void ( V V );  <METHOD_END>
<METHOD_START> V V ( )  <METHOD_END>
<METHOD_START> void void ( V V );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; }  <METHOD_END>
