<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.router.config.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , true ) . build ( ) ; Message < ? > org.springframework.integration.router.config.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , false ) . build ( ) ; org.springframework.integration.router.config.MessageChannel . send ( org.springframework.integration.router.config.Message<> ) ; org.springframework.integration.router.config.MessageChannel . send ( org.springframework.integration.router.config.Message<> ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( ) ; assertNotNull ( org.springframework.integration.router.config.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = org.springframework.integration.router.config.PollableChannel . receive ( ) ; assertNotNull ( org.springframework.integration.router.config.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
