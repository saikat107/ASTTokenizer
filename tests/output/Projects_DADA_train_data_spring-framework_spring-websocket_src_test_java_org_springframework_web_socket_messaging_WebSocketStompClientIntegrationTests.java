<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.socket.messaging.Log . debug ( STRING + this . org.springframework.web.socket.messaging.TestName . getMethodName ( ) + STRING ) ; this . org.springframework.web.socket.messaging.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.web.socket.messaging.AnnotationConfigWebApplicationContext . register ( org.springframework.web.socket.messaging.WebSocketStompClientIntegrationTests.TestConfig .class ) ; this . org.springframework.web.socket.messaging.AnnotationConfigWebApplicationContext . refresh ( ) ; this . org.springframework.web.socket.messaging.WebSocketTestServer = new TomcatWebSocketTestServer ( ) ; this . org.springframework.web.socket.messaging.WebSocketTestServer . setup ( ) ; this . org.springframework.web.socket.messaging.WebSocketTestServer . deployConfig ( this . org.springframework.web.socket.messaging.AnnotationConfigWebApplicationContext ) ; this . org.springframework.web.socket.messaging.WebSocketTestServer . start ( ) ; WebSocketClient org.springframework.web.socket.messaging.WebSocketClient = new StandardWebSocketClient ( ) ; this . org.springframework.web.socket.messaging.WebSocketStompClient = new WebSocketStompClient ( org.springframework.web.socket.messaging.WebSocketClient ) ; this . org.springframework.web.socket.messaging.WebSocketStompClient . setMessageConverter ( new StringMessageConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { try { this . org.springframework.web.socket.messaging.WebSocketTestServer . undeployConfig ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.messaging.Log . error ( STRING , java.lang.Throwable ) ; } try { this . org.springframework.web.socket.messaging.WebSocketTestServer . stop ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.messaging.Log . error ( STRING , java.lang.Throwable ) ; } try { this . org.springframework.web.socket.messaging.AnnotationConfigWebApplicationContext . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.messaging.Log . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + this . org.springframework.web.socket.messaging.WebSocketTestServer . getPort ( ) + STRING ; org.springframework.web.socket.messaging.WebSocketStompClientIntegrationTests.TestHandler org.springframework.web.socket.messaging.WebSocketStompClientIntegrationTests.TestHandler = new org.springframework.web.socket.messaging.WebSocketStompClientIntegrationTests.TestHandler ( STRING , STRING ) ; this . org.springframework.web.socket.messaging.WebSocketStompClient . connect ( java.lang.String , org.springframework.web.socket.messaging.WebSocketStompClientIntegrationTests.TestHandler ) ; assertTrue ( org.springframework.web.socket.messaging.WebSocketStompClientIntegrationTests.TestHandler . boolean ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.web.socket.messaging.WebSocketStompClientIntegrationTests.TestHandler . java.util.List<java.lang.String> ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( StompEndpointRegistry org.springframework.web.socket.messaging.StompEndpointRegistry ) { RequestUpgradeStrategy org.springframework.web.socket.messaging.RequestUpgradeStrategy = new TomcatRequestUpgradeStrategy ( ) ; org.springframework.web.socket.messaging.StompEndpointRegistry . addEndpoint ( STRING ) . setHandshakeHandler ( new DefaultHandshakeHandler ( org.springframework.web.socket.messaging.RequestUpgradeStrategy ) ) . setAllowedOrigins ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageBrokerRegistry org.springframework.web.socket.messaging.MessageBrokerRegistry ) { org.springframework.web.socket.messaging.MessageBrokerRegistry . setApplicationDestinationPrefixes ( STRING ) ; org.springframework.web.socket.messaging.MessageBrokerRegistry . enableSimpleBroker ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.lang.String = java.lang.String ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.web.socket.messaging.StompSession , StompHeaders org.springframework.web.socket.messaging.StompHeaders ) { org.springframework.web.socket.messaging.StompSession . subscribe ( this . java.lang.String , new StompFrameHandler ( ) { @ java.lang.Override public java.lang.reflect.Type java.lang.reflect.Type ( StompHeaders org.springframework.web.socket.messaging.StompHeaders ) { return java.lang.String .class ; } @ java.lang.Override public void void ( StompHeaders org.springframework.web.socket.messaging.StompHeaders , java.lang.Object java.lang.Object ) { java.util.List<java.lang.String> . boolean ( ( java.lang.String ) java.lang.Object ) ; } } ) ; try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { org.springframework.web.socket.messaging.Log . error ( java.lang.InterruptedException ) ; } org.springframework.web.socket.messaging.StompSession . send ( this . java.lang.String , this . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Type java.lang.reflect.Type ( StompHeaders org.springframework.web.socket.messaging.StompHeaders ) { return java.lang.String .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompHeaders org.springframework.web.socket.messaging.StompHeaders , java.lang.Object java.lang.Object ) { java.util.List<java.lang.String> . boolean ( ( java.lang.String ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( int int , long long ) throws java.lang.InterruptedException { if ( org.springframework.web.socket.messaging.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.messaging.Log . debug ( STRING + int ) ; } long long = java.lang.System . long ( ) ; while ( this . java.util.List<java.lang.String> . int ( ) < int ) { java.lang.Thread . void ( NUMBER ) ; if ( ( java.lang.System . long ( ) - long ) > long ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.web.socket.messaging.StompSession , StompCommand org.springframework.web.socket.messaging.StompCommand , StompHeaders org.springframework.web.socket.messaging.StompHeaders , byte [] byte[] , java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.messaging.Log . error ( org.springframework.web.socket.messaging.StompCommand + STRING + org.springframework.web.socket.messaging.StompHeaders , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompHeaders org.springframework.web.socket.messaging.StompHeaders , java.lang.Object java.lang.Object ) { org.springframework.web.socket.messaging.Log . error ( STRING + org.springframework.web.socket.messaging.StompHeaders + STRING + java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.web.socket.messaging.StompSession , java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.messaging.Log . error ( java.lang.Throwable ) ; }  <METHOD_END>
