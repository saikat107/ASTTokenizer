<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer = new FreeMarkerConfigurer ( ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer . setTemplateLoaderPaths ( STRING , STRING + java.lang.System . java.lang.String ( STRING ) ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer . afterPropertiesSet ( ) ; org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer ) ; org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new AcceptHeaderLocaleResolver ( ) ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest . setAttribute ( DispatcherServlet . THEME_RESOLVER_ATTRIBUTE , new FixedThemeResolver ( ) ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FreeMarkerView org.springframework.web.servlet.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected void void ( Template org.springframework.web.servlet.view.freemarker.Template , SimpleHash org.springframework.web.servlet.view.freemarker.SimpleHash , HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse )					throws org.springframework.web.servlet.view.freemarker.TemplateException { java.util.Map java.util.Map = org.springframework.web.servlet.view.freemarker.SimpleHash . toMap ( ) ; assertTrue ( java.util.Map . java.lang.Object ( FreeMarkerView . SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE ) instanceof RequestContext ) ; RequestContext org.springframework.web.servlet.view.freemarker.RequestContext = ( RequestContext ) java.util.Map . java.lang.Object ( FreeMarkerView . SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE ) ; BindStatus org.springframework.web.servlet.view.freemarker.BindStatus = org.springframework.web.servlet.view.freemarker.RequestContext . getBindStatus ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.view.freemarker.BindStatus . getExpression ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.view.freemarker.BindStatus . getValue ( ) ) ; } } ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setUrl ( java.lang.String ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setApplicationContext ( org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setExposeSpringMacroHelpers ( true ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new TestBean ( STRING , NUMBER ) ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.freemarker.MockHttpServletRequest , org.springframework.web.servlet.view.freemarker.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected void void ( Template org.springframework.web.servlet.view.freemarker.Template , SimpleHash org.springframework.web.servlet.view.freemarker.SimpleHash , HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse )					throws org.springframework.web.servlet.view.freemarker.TemplateException { java.util.Map java.util.Map = org.springframework.web.servlet.view.freemarker.SimpleHash . toMap ( ) ; assertTrue ( java.util.Map . java.lang.Object ( FreeMarkerView . SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE ) instanceof RequestContext ) ; RequestContext org.springframework.web.servlet.view.freemarker.RequestContext = ( RequestContext ) java.util.Map . java.lang.Object ( FreeMarkerView . SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE ) ; BindStatus org.springframework.web.servlet.view.freemarker.BindStatus = org.springframework.web.servlet.view.freemarker.RequestContext . getBindStatus ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.view.freemarker.BindStatus . getExpression ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.view.freemarker.BindStatus . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.String java.lang.String = STRING ; FreeMarkerView org.springframework.web.servlet.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) { @ java.lang.Override protected void void ( Template org.springframework.web.servlet.view.freemarker.Template , SimpleHash org.springframework.web.servlet.view.freemarker.SimpleHash , HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse ) { fail ( ) ; } } ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setUrl ( java.lang.String ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setApplicationContext ( org.springframework.web.servlet.view.freemarker.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setExposeSpringMacroHelpers ( true ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( FreeMarkerView . SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE , java.lang.String ) ; try { org.springframework.web.servlet.view.freemarker.FreeMarkerView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.freemarker.MockHttpServletRequest , org.springframework.web.servlet.view.freemarker.MockHttpServletResponse ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception instanceof ServletException ) ; assertTrue ( java.lang.Exception . java.lang.String ( ) . boolean ( FreeMarkerView . SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Template org.springframework.web.servlet.view.freemarker.Template , SimpleHash org.springframework.web.servlet.view.freemarker.SimpleHash , HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse ) { fail ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; assertNotNull ( java.lang.String ) ; FileSystemResource org.springframework.web.servlet.view.freemarker.FileSystemResource = new FileSystemResource ( java.lang.System . java.lang.String ( STRING ) + STRING ) ; FileCopyUtils . copy ( STRING + java.lang.String , new java.io.FileWriter ( org.springframework.web.servlet.view.freemarker.FileSystemResource . getPath ( ) ) ) ; DummyMacroRequestContext org.springframework.web.servlet.view.freemarker.DummyMacroRequestContext = new DummyMacroRequestContext ( org.springframework.web.servlet.view.freemarker.MockHttpServletRequest ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.servlet.view.freemarker.DummyMacroRequestContext . setMessageMap ( java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.servlet.view.freemarker.DummyMacroRequestContext . setThemeMessageMap ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.web.servlet.view.freemarker.DummyMacroRequestContext . setContextPath ( STRING ) ; TestBean org.springframework.web.servlet.view.freemarker.TestBean = new TestBean ( STRING , NUMBER ) ; TestBean org.springframework.web.servlet.view.freemarker.TestBean = new TestBean ( STRING ) ; org.springframework.web.servlet.view.freemarker.TestBean . setJedi ( true ) ; org.springframework.web.servlet.view.freemarker.TestBean . setSpouse ( org.springframework.web.servlet.view.freemarker.TestBean ) ; org.springframework.web.servlet.view.freemarker.TestBean . setJedi ( true ) ; org.springframework.web.servlet.view.freemarker.TestBean . setStringArray ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.web.servlet.view.freemarker.MockHttpServletRequest . setAttribute ( STRING , org.springframework.web.servlet.view.freemarker.TestBean ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; Configuration org.springframework.web.servlet.view.freemarker.Configuration = org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer . getConfiguration ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.servlet.view.freemarker.TestBean ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.servlet.view.freemarker.DummyMacroRequestContext ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Object [] { STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.util.Collection<java.lang.String> ( ) ) ; FreeMarkerView org.springframework.web.servlet.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setBeanName ( STRING ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setUrl ( STRING ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setExposeSpringMacroHelpers ( false ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setConfiguration ( org.springframework.web.servlet.view.freemarker.Configuration ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.freemarker.FreeMarkerView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.freemarker.MockHttpServletRequest , org.springframework.web.servlet.view.freemarker.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.web.servlet.view.freemarker.MockHttpServletResponse . getContentAsString ( ) ; java.lang.String = java.lang.String . java.lang.String ( STRING , STRING ) ; return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.Exception { ClassPathResource org.springframework.web.servlet.view.freemarker.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests> ( ) ) ; assertTrue ( org.springframework.web.servlet.view.freemarker.ClassPathResource . exists ( ) ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( org.springframework.web.servlet.view.freemarker.ClassPathResource . getInputStream ( ) ) ) ; java.lang.String = java.lang.String . java.lang.String ( STRING , STRING ) ; java.lang.String [] java.lang.String[] = StringUtils . delimitedListToStringArray ( java.lang.String , STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) ) . java.lang.String ( ) ; } } return null ; }  <METHOD_END>
