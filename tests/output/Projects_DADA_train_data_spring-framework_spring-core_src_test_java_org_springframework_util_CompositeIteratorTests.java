<METHOD_START> @ Test public void void ( ) { CompositeIterator < java.lang.String > org.springframework.util.CompositeIterator<java.lang.String> = new CompositeIterator <> ( ) ; assertFalse ( org.springframework.util.CompositeIterator<java.lang.String> . hasNext ( ) ) ; try { org.springframework.util.CompositeIterator<java.lang.String> . next ( ) ; fail ( ) ; } catch ( java.util.NoSuchElementException java.util.NoSuchElementException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CompositeIterator < java.lang.String > org.springframework.util.CompositeIterator<java.lang.String> = new CompositeIterator <> ( ) ; org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) . java.util.Iterator<java.lang.String> ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertTrue ( org.springframework.util.CompositeIterator<java.lang.String> . hasNext ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( int ) , org.springframework.util.CompositeIterator<java.lang.String> . next ( ) ) ; } assertFalse ( org.springframework.util.CompositeIterator<java.lang.String> . hasNext ( ) ) ; try { org.springframework.util.CompositeIterator<java.lang.String> . next ( ) ; fail ( ) ; } catch ( java.util.NoSuchElementException java.util.NoSuchElementException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CompositeIterator < java.lang.String > org.springframework.util.CompositeIterator<java.lang.String> = new CompositeIterator <> ( ) ; org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) . java.util.Iterator<java.lang.String> ( ) ) ; org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) . java.util.Iterator<java.lang.String> ( ) ) ; org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) . java.util.Iterator<java.lang.String> ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertTrue ( org.springframework.util.CompositeIterator<java.lang.String> . hasNext ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( int ) , org.springframework.util.CompositeIterator<java.lang.String> . next ( ) ) ; } assertFalse ( org.springframework.util.CompositeIterator<java.lang.String> . hasNext ( ) ) ; try { org.springframework.util.CompositeIterator<java.lang.String> . next ( ) ; fail ( ) ; } catch ( java.util.NoSuchElementException java.util.NoSuchElementException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; CompositeIterator < java.lang.String > org.springframework.util.CompositeIterator<java.lang.String> = new CompositeIterator <> ( ) ; org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ) ; org.springframework.util.CompositeIterator<java.lang.String> . hasNext ( ) ; try { org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } org.springframework.util.CompositeIterator<java.lang.String> = new CompositeIterator <> ( ) ; org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ) ; org.springframework.util.CompositeIterator<java.lang.String> . next ( ) ; try { org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ; CompositeIterator < java.lang.String > org.springframework.util.CompositeIterator<java.lang.String> = new CompositeIterator <> ( ) ; org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.Iterator<java.lang.String> ) ; org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ) ; try { org.springframework.util.CompositeIterator<java.lang.String> . add ( java.util.Iterator<java.lang.String> ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
