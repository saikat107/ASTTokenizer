<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; Message < java.lang.String [] > org.springframework.integration.splitter.Message<java.lang.String[]> = MessageBuilder . withPayload ( java.lang.String[] ) . build ( ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; DefaultMessageSplitter org.springframework.integration.splitter.DefaultMessageSplitter = new DefaultMessageSplitter ( ) ; org.springframework.integration.splitter.DefaultMessageSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.DefaultMessageSplitter . handleMessage ( org.springframework.integration.splitter.Message<java.lang.String[]> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.splitter.Message<?>> . size ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING , STRING } ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.splitter.Message<java.util.List<java.lang.String>> = MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . build ( ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; DefaultMessageSplitter org.springframework.integration.splitter.DefaultMessageSplitter = new DefaultMessageSplitter ( ) ; org.springframework.integration.splitter.DefaultMessageSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.DefaultMessageSplitter . handleMessage ( org.springframework.integration.splitter.Message<java.util.List<java.lang.String>> ) ; java.util.List<org.springframework.integration.splitter.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.splitter.Message<?>> = org.springframework.integration.splitter.QueueChannel . clear ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.splitter.Message<?>> . size ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = java.util.List<org.springframework.integration.splitter.Message<?>> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.splitter.Message<> ) ; assertEquals ( STRING , org.springframework.integration.splitter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.splitter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; DirectChannel org.springframework.integration.splitter.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( NUMBER ) ; DefaultMessageSplitter org.springframework.integration.splitter.DefaultMessageSplitter = new DefaultMessageSplitter ( ) ; org.springframework.integration.splitter.DefaultMessageSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; EventDrivenConsumer org.springframework.integration.splitter.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.splitter.DirectChannel , org.springframework.integration.splitter.DefaultMessageSplitter ) ; org.springframework.integration.splitter.EventDrivenConsumer . start ( ) ; assertTrue ( org.springframework.integration.splitter.DirectChannel . send ( org.springframework.integration.splitter.Message<java.lang.String> ) ) ; Message < ? > org.springframework.integration.splitter.Message<?> = org.springframework.integration.splitter.QueueChannel . receive ( NUMBER ) ; assertEquals ( org.springframework.integration.splitter.Message<java.lang.String> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.splitter.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.splitter.Message<java.util.List<java.lang.String>> = MessageBuilder . withPayload ( java.util.Collections .< java.lang.String > java.util.List<java.lang.String> ( ) ) . build ( ) ; QueueChannel org.springframework.integration.splitter.QueueChannel = new QueueChannel ( ) ; DefaultMessageSplitter org.springframework.integration.splitter.DefaultMessageSplitter = new DefaultMessageSplitter ( ) ; org.springframework.integration.splitter.DefaultMessageSplitter . setOutputChannel ( org.springframework.integration.splitter.QueueChannel ) ; org.springframework.integration.splitter.DefaultMessageSplitter . handleMessage ( org.springframework.integration.splitter.Message<java.util.List<java.lang.String>> ) ; Message < ? > org.springframework.integration.splitter.Message<?> = org.springframework.integration.splitter.QueueChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.splitter.Message<> , is ( nullValue ( ) ) ) ; }  <METHOD_END>
