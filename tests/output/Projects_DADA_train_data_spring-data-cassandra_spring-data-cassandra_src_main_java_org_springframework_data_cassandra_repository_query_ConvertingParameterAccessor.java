<METHOD_START> void ( CassandraConverter org.springframework.data.cassandra.repository.query.CassandraConverter , CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) { this . org.springframework.data.cassandra.repository.query.CassandraConverter = org.springframework.data.cassandra.repository.query.CassandraConverter ; this . org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.query.Pageable org.springframework.data.cassandra.repository.query.Pageable ( ) { return org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getPageable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.query.Sort org.springframework.data.cassandra.repository.query.Sort ( ) { return org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getSort ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ( ) { return org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getDynamicProjection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( int int ) { return java.lang.Object ( int , java.util.Optional . java.util.Optional ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getBindableValue ( int ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.query.CassandraType org.springframework.data.cassandra.repository.query.CassandraType ( int int ) { return org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . findCassandraType ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.query.DataType org.springframework.data.cassandra.repository.query.DataType ( int int ) { DataType org.springframework.data.cassandra.repository.query.DataType = org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getDataType ( int ) ; return ( org.springframework.data.cassandra.repository.query.DataType != null ? org.springframework.data.cassandra.repository.query.DataType : org.springframework.data.cassandra.repository.query.CassandraConverter . getMappingContext ( ) . getDataType ( java.lang.Class<?> ( int ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( int int ) { return org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getParameterType ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . hasBindableNullValue ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ( ) { return new org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor.ConvertingIterator ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . iterator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( ) { return org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getValues ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( int int , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { return java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> org.springframework.data.cassandra.repository.query.CassandraConverter . convertToCassandraColumn ( java.util.Optional<java.lang.Object> , org.springframework.data.cassandra.repository.query.TypeInformation<?> ( int , java.lang.Object , java.util.Optional . java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> ( ) ) ) ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( int int , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> , CassandraPersistentProperty org.springframework.data.cassandra.repository.query.CassandraPersistentProperty ) { return java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> org.springframework.data.cassandra.repository.query.CassandraConverter . convertToCassandraColumn ( java.util.Optional<java.lang.Object> , org.springframework.data.cassandra.repository.query.TypeInformation<?> ( int , java.lang.Object , java.util.Optional . java.util.Optional ( org.springframework.data.cassandra.repository.query.CassandraPersistentProperty ) ) ) ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.TypeInformation<?> < ? > org.springframework.data.cassandra.repository.query.TypeInformation<?> ( int int , java.lang.Object java.lang.Object , java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> ) { if ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . findCassandraType ( int ) != null ) { TypeCodec < ? > org.springframework.data.cassandra.repository.query.TypeCodec<?> = CodecRegistry . DEFAULT_INSTANCE . codecFor ( org.springframework.data.cassandra.repository.query.DataType ( int , java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> ) ) ; if ( org.springframework.data.cassandra.repository.query.TypeCodec<> . getJavaType ( ) . getType ( ) instanceof java.lang.Class<?> < ? > ) { return ClassTypeInformation . from ( ( java.lang.Class<?> < ? > ) org.springframework.data.cassandra.repository.query.TypeCodec<> . getJavaType ( ) . getType ( ) ) ; } return ClassTypeInformation . from ( org.springframework.data.cassandra.repository.query.TypeCodec<> . getJavaType ( ) . getRawType ( ) ) ; } return java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> . map ( PersistentProperty :: getTypeInformation ) . orElseGet ( ( ) ( TypeInformation ) ClassTypeInformation . from ( bindableValue . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.DataType org.springframework.data.cassandra.repository.query.DataType ( int int , java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> ) { CassandraType org.springframework.data.cassandra.repository.query.CassandraType = org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . findCassandraType ( int ) ; if ( org.springframework.data.cassandra.repository.query.CassandraType != null ) { return CassandraSimpleTypeHolder . getDataTypeFor ( org.springframework.data.cassandra.repository.query.CassandraType . type ( ) ) ; } CassandraMappingContext org.springframework.data.cassandra.repository.query.CassandraMappingContext = org.springframework.data.cassandra.repository.query.CassandraConverter . getMappingContext ( ) ; TypeInformation < ? > org.springframework.data.cassandra.repository.query.TypeInformation<?> = ClassTypeInformation . from ( java.lang.Class<?> ( int ) ) ; return java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> . map ( property -> getDataType ( mappingContext , typeInformation , property ) ) . orElseGet ( ( ) mappingContext . getDataType ( typeInformation . getType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.DataType org.springframework.data.cassandra.repository.query.DataType ( CassandraMappingContext org.springframework.data.cassandra.repository.query.CassandraMappingContext , TypeInformation < ? > org.springframework.data.cassandra.repository.query.TypeInformation<?> , CassandraPersistentProperty org.springframework.data.cassandra.repository.query.CassandraPersistentProperty ) { DataType org.springframework.data.cassandra.repository.query.DataType = org.springframework.data.cassandra.repository.query.CassandraMappingContext . getDataType ( org.springframework.data.cassandra.repository.query.CassandraPersistentProperty ) ; if ( org.springframework.data.cassandra.repository.query.CassandraPersistentProperty . isCollectionLike ( ) && ! org.springframework.data.cassandra.repository.query.TypeInformation<> . isCollectionLike ( ) ) { if ( org.springframework.data.cassandra.repository.query.DataType instanceof CollectionType ) { CollectionType org.springframework.data.cassandra.repository.query.CollectionType = ( CollectionType ) org.springframework.data.cassandra.repository.query.DataType ; if ( org.springframework.data.cassandra.repository.query.CollectionType . getTypeArguments ( ) . size ( ) == NUMBER ) { return org.springframework.data.cassandra.repository.query.CollectionType . getTypeArguments ( ) . get ( NUMBER ) ; } } } if ( ! org.springframework.data.cassandra.repository.query.CassandraPersistentProperty . isCollectionLike ( ) && org.springframework.data.cassandra.repository.query.TypeInformation<> . isCollectionLike ( ) ) { if ( org.springframework.data.cassandra.repository.query.TypeInformation<> . isAssignableFrom ( org.springframework.data.cassandra.repository.query.TypeInformation<java.util.Set> ) ) { return DataType . set ( org.springframework.data.cassandra.repository.query.DataType ) ; } return DataType . list ( org.springframework.data.cassandra.repository.query.DataType ) ; } if ( org.springframework.data.cassandra.repository.query.CassandraPersistentProperty . isMap ( ) ) { if ( org.springframework.data.cassandra.repository.query.DataType instanceof CollectionType ) { CollectionType org.springframework.data.cassandra.repository.query.CollectionType = ( CollectionType ) org.springframework.data.cassandra.repository.query.DataType ; if ( org.springframework.data.cassandra.repository.query.CollectionType . getTypeArguments ( ) . size ( ) == NUMBER ) { return org.springframework.data.cassandra.repository.query.CollectionType . getTypeArguments ( ) . get ( NUMBER ) ; } } } return org.springframework.data.cassandra.repository.query.CassandraMappingContext . getDataType ( org.springframework.data.cassandra.repository.query.CassandraPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { this . java.util.Iterator<java.lang.Object> = java.util.Iterator<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Iterator<java.lang.Object> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.lang.Object ( int ++ , java.util.Optional . java.util.Optional<java.lang.Object> ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.Iterator<java.lang.Object> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( CassandraPersistentProperty org.springframework.data.cassandra.repository.query.CassandraPersistentProperty ) { return java.lang.Object ( int ++ , java.util.Optional . java.util.Optional<java.lang.Object> ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) , org.springframework.data.cassandra.repository.query.CassandraPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( CassandraPersistentProperty org.springframework.data.cassandra.repository.query.CassandraPersistentProperty );  <METHOD_END>
