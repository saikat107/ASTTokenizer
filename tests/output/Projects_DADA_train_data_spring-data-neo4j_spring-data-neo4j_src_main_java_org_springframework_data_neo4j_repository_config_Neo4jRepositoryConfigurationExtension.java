<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return Neo4jRepositoryFactoryBean .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) { return java.util.Arrays . java.util.List<java.lang.Class<? extends java.lang.Object>> ( NodeEntity .class , RelationshipEntity .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collections .< java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( Neo4jRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.neo4j.repository.config.BeanDefinitionBuilder , RepositoryConfigurationSource org.springframework.data.neo4j.repository.config.RepositoryConfigurationSource ) { java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = org.springframework.data.neo4j.repository.config.RepositoryConfigurationSource . getAttribute ( STRING ) ; org.springframework.data.neo4j.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Optional<java.lang.String> . java.lang.String ( java.lang.String ) ) ; org.springframework.data.neo4j.repository.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.neo4j.repository.config.BeanDefinitionBuilder , AnnotationRepositoryConfigurationSource org.springframework.data.neo4j.repository.config.AnnotationRepositoryConfigurationSource ) { AnnotationAttributes org.springframework.data.neo4j.repository.config.AnnotationAttributes = org.springframework.data.neo4j.repository.config.AnnotationRepositoryConfigurationSource . getAttributes ( ) ; org.springframework.data.neo4j.repository.config.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , org.springframework.data.neo4j.repository.config.AnnotationAttributes . getBoolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.neo4j.repository.config.BeanDefinitionBuilder , XmlRepositoryConfigurationSource org.springframework.data.neo4j.repository.config.XmlRepositoryConfigurationSource ) { java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = org.springframework.data.neo4j.repository.config.XmlRepositoryConfigurationSource . getAttribute ( java.lang.String ) ; if ( java.util.Optional<java.lang.String> . java.util.Optional<java.lang.String> ( StringUtils :: hasText ) . isPresent ( ) ) { java.util.Optional<java.lang.String> . void ( java.lang.String -> org.springframework.data.neo4j.repository.config.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionRegistry org.springframework.data.neo4j.repository.config.BeanDefinitionRegistry , RepositoryConfigurationSource org.springframework.data.neo4j.repository.config.RepositoryConfigurationSource ) { super. registerBeansForRoot ( org.springframework.data.neo4j.repository.config.BeanDefinitionRegistry , org.springframework.data.neo4j.repository.config.RepositoryConfigurationSource ) ; java.lang.Object java.lang.Object = org.springframework.data.neo4j.repository.config.RepositoryConfigurationSource . getSource ( ) ; registerIfNotAlreadyRegistered ( new RootBeanDefinition ( SessionBeanDefinitionRegistrarPostProcessor .class ) , org.springframework.data.neo4j.repository.config.BeanDefinitionRegistry , java.lang.String , java.lang.Object ) ; registerIfNotAlreadyRegistered ( new RootBeanDefinition ( Neo4jMappingContextFactoryBean .class ) , org.springframework.data.neo4j.repository.config.BeanDefinitionRegistry , java.lang.String , java.lang.Object ) ; }  <METHOD_END>
