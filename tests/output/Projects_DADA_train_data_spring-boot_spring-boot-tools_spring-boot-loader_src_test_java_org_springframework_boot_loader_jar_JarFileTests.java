<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.io.File = this . org.springframework.boot.loader.jar.TemporaryFolder . newFile ( ) ; TestJarCreator . createTestJar ( this . java.io.File ) ; this . org.springframework.boot.loader.jar.JarFile = new JarFile ( this . java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java . util . jar . java.util.jar.JarFile java.util.jar.JarFile = new java . util . jar . java.util.jar.JarFile ( this . java.io.File ) ; java.util.Enumeration<java.util.jar.JarEntry> < java . util . jar . java.util.jar.JarEntry > java.util.Enumeration<java.util.jar.JarEntry> = java.util.jar.JarFile . java.util.Enumeration<java.util.jar.JarEntry> ( ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . boolean ( ) ) . isFalse ( ) ; java.net.URL java.net.URL = new java.net.URL ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; java.net.URLClassLoader java.net.URLClassLoader = new java.net.URLClassLoader ( new java.net.URL [] { java.net.URL } ) ; assertThat ( java.net.URLClassLoader . java.net.URL ( STRING ) ) . isNotNull ( ) ; assertThat ( java.net.URLClassLoader . java.net.URL ( STRING ) ) . isNotNull ( ) ; java.util.jar.JarFile . void ( ) ; java.net.URLClassLoader . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JarFile org.springframework.boot.loader.jar.JarFile = new JarFile ( this . java.io.File ) ; assertThat ( org.springframework.boot.loader.jar.JarFile . getName ( ) ) . isNotNull ( ) ; org.springframework.boot.loader.jar.JarFile . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.loader.jar.JarFile . getManifest ( ) . getMainAttributes ( ) . getValue ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.zip.ZipEntry java.util.zip.ZipEntry = this . org.springframework.boot.loader.jar.JarFile . getJarEntry ( STRING ) ; java.util.jar.Manifest java.util.jar.Manifest = new java.util.jar.Manifest ( this . org.springframework.boot.loader.jar.JarFile . getInputStream ( java.util.zip.ZipEntry ) ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Enumeration<java.util.jar.JarEntry> < java . util . jar . java.util.jar.JarEntry > java.util.Enumeration<java.util.jar.JarEntry> = this . org.springframework.boot.loader.jar.JarFile . entries ( ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URLClassLoader java.net.URLClassLoader = new java.net.URLClassLoader ( new java.net.URL [] { this . org.springframework.boot.loader.jar.JarFile . getUrl ( ) } ) ; assertThat ( java.net.URLClassLoader . java.net.URL ( STRING ) ) . isNotNull ( ) ; java.net.URLClassLoader . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java . util . jar . java.util.jar.JarEntry java.util.jar.JarEntry = this . org.springframework.boot.loader.jar.JarFile . getJarEntry ( STRING ) ; assertThat ( java.util.jar.JarEntry ) . isNotNull ( ) ; assertThat ( java.util.jar.JarEntry . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.InputStream java.io.InputStream = this . org.springframework.boot.loader.jar.JarFile . getInputStream ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.loader.jar.JarFile . getName ( ) ) . isEqualTo ( this . java.io.File . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.loader.jar.JarFile . size ( ) ) . isEqualTo ( ( int ) this . java.io.File . long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java . util . jar . java.util.jar.JarFile java.util.jar.JarFile = new java . util . jar . java.util.jar.JarFile ( this . java.io.File ) ; assertThat ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) . getTime ( ) ) . isEqualTo ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) . long ( ) ) ; java.util.jar.JarFile . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RandomAccessDataFile org.springframework.boot.loader.jar.RandomAccessDataFile = spy ( new RandomAccessDataFile ( this . java.io.File , NUMBER ) ) ; JarFile org.springframework.boot.loader.jar.JarFile = new JarFile ( org.springframework.boot.loader.jar.RandomAccessDataFile ) ; org.springframework.boot.loader.jar.JarFile . close ( ) ; verify ( org.springframework.boot.loader.jar.RandomAccessDataFile ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = this . org.springframework.boot.loader.jar.JarFile . getUrl ( ) ; assertThat ( java.net.URL . java.lang.String ( ) ) . isEqualTo ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; JarURLConnection org.springframework.boot.loader.jar.JarURLConnection = ( JarURLConnection ) java.net.URL . java.net.URLConnection ( ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getJarFile ( ) ) . isSameAs ( this . org.springframework.boot.loader.jar.JarFile ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getJarEntry ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getContentLength ( ) ) . isGreaterThan ( NUMBER ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getContent ( ) ) . isSameAs ( this . org.springframework.boot.loader.jar.JarFile ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getContentType ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getJarFileURL ( ) . toURI ( ) ) . isEqualTo ( this . java.io.File . java.net.URI ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( this . org.springframework.boot.loader.jar.JarFile . getUrl ( ) , STRING ) ; assertThat ( java.net.URL . java.lang.String ( ) ) . isEqualTo ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; JarURLConnection org.springframework.boot.loader.jar.JarURLConnection = ( JarURLConnection ) java.net.URL . java.net.URLConnection ( ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getJarFile ( ) ) . isSameAs ( this . org.springframework.boot.loader.jar.JarFile ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getJarEntry ( ) ) . isSameAs ( this . org.springframework.boot.loader.jar.JarFile . getJarEntry ( STRING ) ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getContentLength ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getContent ( ) ) . isInstanceOf ( java.io.InputStream .class ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getContentType ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getPermission ( ) ) . isInstanceOf ( java.io.FilePermission .class ) ; java.io.FilePermission java.io.FilePermission = ( java.io.FilePermission ) org.springframework.boot.loader.jar.JarURLConnection . getPermission ( ) ; assertThat ( java.io.FilePermission . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.io.FilePermission . java.lang.String ( ) ) . isEqualTo ( this . java.io.File . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( this . org.springframework.boot.loader.jar.JarFile . getUrl ( ) , STRING ) ; assertThat ( java.net.URL . java.lang.String ( ) ) . isEqualTo ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; this . org.springframework.boot.loader.jar.ExpectedException . expect ( java.io.FileNotFoundException .class ) ; ( ( JarURLConnection ) java.net.URL . java.net.URLConnection ( ) ) . getJarEntry ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = this . org.springframework.boot.loader.jar.JarFile . getUrl ( ) ; java.net.URL . java.net.URLConnection ( ) ; this . org.springframework.boot.loader.jar.ExpectedException . expect ( java.io.IOException .class ) ; java.net.URL . java.io.InputStream ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( this . org.springframework.boot.loader.jar.JarFile . getUrl ( ) , STRING ) ; java.net.URL . java.net.URLConnection ( ) ; java.io.InputStream java.io.InputStream = java.net.URL . java.io.InputStream ( ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JarFile org.springframework.boot.loader.jar.JarFile = this . org.springframework.boot.loader.jar.JarFile . getNestedJarFile ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; java.util.Enumeration<java.util.jar.JarEntry> < java . util . jar . java.util.jar.JarEntry > java.util.Enumeration<java.util.jar.JarEntry> = org.springframework.boot.loader.jar.JarFile . entries ( ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . boolean ( ) ) . isFalse ( ) ; java.io.InputStream java.io.InputStream = org.springframework.boot.loader.jar.JarFile . getInputStream ( org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( - NUMBER ) ; java.net.URL java.net.URL = org.springframework.boot.loader.jar.JarFile . getUrl ( ) ; assertThat ( java.net.URL . java.lang.String ( ) ) . isEqualTo ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; JarURLConnection org.springframework.boot.loader.jar.JarURLConnection = ( JarURLConnection ) java.net.URL . java.net.URLConnection ( ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getJarFile ( ) ) . isSameAs ( org.springframework.boot.loader.jar.JarFile ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getJarFileURL ( ) . toString ( ) ) . isEqualTo ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getInputStream ( ) ) . isNotNull ( ) ; java.util.jar.JarInputStream java.util.jar.JarInputStream = new java.util.jar.JarInputStream ( org.springframework.boot.loader.jar.JarURLConnection . getInputStream ( ) ) ; assertThat ( java.util.jar.JarInputStream . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.jar.JarInputStream . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.jar.JarInputStream . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; java.util.jar.JarInputStream . void ( ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getPermission ( ) ) . isInstanceOf ( java.io.FilePermission .class ) ; java.io.FilePermission java.io.FilePermission = ( java.io.FilePermission ) org.springframework.boot.loader.jar.JarURLConnection . getPermission ( ) ; assertThat ( java.io.FilePermission . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.io.FilePermission . java.lang.String ( ) ) . isEqualTo ( this . java.io.File . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JarFile org.springframework.boot.loader.jar.JarFile = this . org.springframework.boot.loader.jar.JarFile . getNestedJarFile ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; java.util.Enumeration<java.util.jar.JarEntry> < java . util . jar . java.util.jar.JarEntry > java.util.Enumeration<java.util.jar.JarEntry> = org.springframework.boot.loader.jar.JarFile . entries ( ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Enumeration<java.util.jar.JarEntry> . boolean ( ) ) . isFalse ( ) ; java.io.InputStream java.io.InputStream = org.springframework.boot.loader.jar.JarFile . getInputStream ( org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( - NUMBER ) ; java.net.URL java.net.URL = org.springframework.boot.loader.jar.JarFile . getUrl ( ) ; assertThat ( java.net.URL . java.lang.String ( ) ) . isEqualTo ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; assertThat ( ( ( JarURLConnection ) java.net.URL . java.net.URLConnection ( ) ) . getJarFile ( ) ) . isSameAs ( org.springframework.boot.loader.jar.JarFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JarFile org.springframework.boot.loader.jar.JarFile = this . org.springframework.boot.loader.jar.JarFile . getNestedJarFile ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; java.net.URL java.net.URL = org.springframework.boot.loader.jar.JarFile . getJarEntry ( STRING ) . getUrl ( ) ; assertThat ( java.net.URL . java.lang.String ( ) ) . isEqualTo ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; java.io.InputStream java.io.InputStream = java.net.URL . java.io.InputStream ( ) ; assertThat ( java.io.InputStream ) . isNotNull ( ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JarFile . registerUrlProtocolHandler ( ) ; java.lang.String java.lang.String = STRING + this . java.io.File . java.net.URI ( ) + STRING ; java.net.URL java.net.URL = new java.net.URL ( java.lang.String ) ; assertThat ( java.net.URL . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; java.io.InputStream java.io.InputStream = java.net.URL . java.io.InputStream ( ) ; assertThat ( java.io.InputStream ) . isNotNull ( ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( NUMBER ) ; JarURLConnection org.springframework.boot.loader.jar.JarURLConnection = ( JarURLConnection ) java.net.URL . java.net.URLConnection ( ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getURL ( ) . toString ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getJarFileURL ( ) . toString ( ) ) . isEqualTo ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getEntryName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING + this . java.io.File . java.nio.file.Path ( ) . java.net.URI ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { JarFile . registerUrlProtocolHandler ( ) ; java.net.URL java.net.URL = new java.net.URL ( java.lang.String ) ; assertThat ( java.net.URL . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; java.io.InputStream java.io.InputStream = java.net.URL . java.io.InputStream ( ) ; assertThat ( java.io.InputStream ) . isNotNull ( ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( NUMBER ) ; JarURLConnection org.springframework.boot.loader.jar.JarURLConnection = ( JarURLConnection ) java.net.URL . java.net.URLConnection ( ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getURL ( ) . toString ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getJarFileURL ( ) . toURI ( ) ) . isEqualTo ( this . java.io.File . java.net.URI ( ) ) ; assertThat ( org.springframework.boot.loader.jar.JarURLConnection . getEntryName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.InputStream java.io.InputStream = this . org.springframework.boot.loader.jar.JarFile . getInputStream ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; assertThat ( java.io.InputStream ) . isNotNull ( ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.InputStream java.io.InputStream = this . org.springframework.boot.loader.jar.JarFile . getInputStream ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; assertThat ( java.io.InputStream ) . isNotNull ( ) ; assertThat ( java.io.InputStream . int ( ) ) . isEqualTo ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.loader.jar.JarFile . toString ( ) ) . isEqualTo ( this . java.io.File . java.lang.String ( ) ) ; assertThat ( this . org.springframework.boot.loader.jar.JarFile . getNestedJarFile ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) . toString ( ) ) . isEqualTo ( this . java.io.File . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( java.lang.System . java.lang.String ( STRING ) ) ; java.lang.String java.lang.String = null ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String ; } } assertThat ( java.lang.String ) . isNotNull ( ) ; java . util . jar . java.util.jar.JarFile java.util.jar.JarFile = new JarFile ( new java.io.File ( java.lang.String ) ) ; java.util.jar.JarFile . java.util.jar.Manifest ( ) ; java.util.Enumeration<java.util.jar.JarEntry> < java.util.jar.JarEntry > java.util.Enumeration<java.util.jar.JarEntry> = java.util.jar.JarFile . java.util.Enumeration<java.util.jar.JarEntry> ( ) ; while ( java.util.Enumeration<java.util.jar.JarEntry> . boolean ( ) ) { java.util.jar.JarEntry java.util.jar.JarEntry = java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) ; java.io.InputStream java.io.InputStream = java.util.jar.JarFile . java.io.InputStream ( java.util.jar.JarEntry ) ; java.io.InputStream . long ( java.lang.Long . long ) ; java.io.InputStream . void ( ) ; if ( ! java.util.jar.JarEntry . java.lang.String ( ) . boolean ( STRING ) && ! java.util.jar.JarEntry . boolean ( ) && ! java.util.jar.JarEntry . java.lang.String ( ) . boolean ( STRING ) ) { assertThat ( java.util.jar.JarEntry . java.security.cert.Certificate[] ( ) ) . isNotNull ( ) ; } } java.util.jar.JarFile . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.loader.jar.TemporaryFolder . newFile ( ) ; java.io.InputStream java.io.InputStream = new java.io.FileInputStream ( this . java.io.File ) ; java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( java.io.File ) ; StreamUtils . copy ( STRING , java.nio.charset.Charset . java.nio.charset.Charset ( ) , java.io.FileOutputStream ) ; FileCopyUtils . copy ( java.io.InputStream , java.io.FileOutputStream ) ; this . java.io.File = java.io.File ; this . org.springframework.boot.loader.jar.JarFile = new JarFile ( java.io.File ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JarFile org.springframework.boot.loader.jar.JarFile = this . org.springframework.boot.loader.jar.JarFile . getNestedJarFile ( this . org.springframework.boot.loader.jar.JarFile . getEntry ( STRING ) ) ; java.net.URL java.net.URL = org.springframework.boot.loader.jar.JarFile . getUrl ( ) ; java.net.URL java.net.URL = new java.net.URL ( java.net.URL , org.springframework.boot.loader.jar.JarFile . getUrl ( ) + STRING ) ; this . org.springframework.boot.loader.jar.ExpectedException . expect ( java.io.FileNotFoundException .class ) ; java.net.URL . java.net.URLConnection ( ) . java.io.InputStream ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; try { java.lang.System . java.lang.String ( java.lang.String ) ; JarFile . registerUrlProtocolHandler ( ) ; java.lang.String java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( java.lang.String ) ; } finally { if ( java.lang.String == null ) { java.lang.System . java.lang.String ( java.lang.String ) ; } else { java.lang.System . java.lang.String ( java.lang.String , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; try { java.lang.System . java.lang.String ( java.lang.String , STRING ) ; JarFile . registerUrlProtocolHandler ( ) ; java.lang.String java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING + java.lang.String ) ; } finally { if ( java.lang.String == null ) { java.lang.System . java.lang.String ( java.lang.String ) ; } else { java.lang.System . java.lang.String ( java.lang.String , java.lang.String ) ; } } }  <METHOD_END>
