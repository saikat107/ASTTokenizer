<METHOD_START> @ Test public void void ( ) { java.io.File [] java.io.File[] = new java.io.File [] { new java.io.File ( STRING ) } ; java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ; RegexPatternFileListFilter org.springframework.integration.file.RegexPatternFileListFilter = new RegexPatternFileListFilter ( java.util.regex.Pattern ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.RegexPatternFileListFilter . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.io.File [] java.io.File[] = new java.io.File [] { new java.io.File ( STRING ) } ; java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ; RegexPatternFileListFilter org.springframework.integration.file.RegexPatternFileListFilter = new RegexPatternFileListFilter ( java.util.regex.Pattern ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.RegexPatternFileListFilter . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.io.File [] java.io.File[] = new java.io.File [] { new java.io.File ( STRING ) , new java.io.File ( STRING ) , new java.io.File ( STRING ) , new java.io.File ( STRING ) } ; java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ; RegexPatternFileListFilter org.springframework.integration.file.RegexPatternFileListFilter = new RegexPatternFileListFilter ( java.util.regex.Pattern ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.RegexPatternFileListFilter . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; assertTrue ( java.util.List<java.io.File> . boolean ( new java.io.File ( STRING ) ) ) ; assertTrue ( java.util.List<java.io.File> . boolean ( new java.io.File ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.file.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.file.PatternMatchingFileListFilterTests> ( ) ) ; FileListFilter < java.io.File > org.springframework.integration.file.FileListFilter<java.io.File> = ( FileListFilter < java.io.File > ) org.springframework.integration.file.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.io.File [] java.io.File[] = new java.io.File [] { new java.io.File ( STRING ) } ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.FileListFilter<java.io.File> . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; org.springframework.integration.file.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) java.lang.Throwable { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.file.PatternMatchingFileListFilterTests> ( ) ) . close ( ) ; }  <METHOD_END>
