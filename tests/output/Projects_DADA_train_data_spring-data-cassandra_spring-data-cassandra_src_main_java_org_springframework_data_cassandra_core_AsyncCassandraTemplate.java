<METHOD_START> public void ( Session org.springframework.data.cassandra.core.Session ) { this( org.springframework.data.cassandra.core.Session , org.springframework.data.cassandra.core.MappingCassandraConverter ( ) ); }  <METHOD_END>
<METHOD_START> public void ( Session org.springframework.data.cassandra.core.Session , CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ) { this( new DefaultSessionFactory ( org.springframework.data.cassandra.core.Session ) , org.springframework.data.cassandra.core.CassandraConverter ); }  <METHOD_END>
<METHOD_START> public void ( SessionFactory org.springframework.data.cassandra.core.SessionFactory , CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ) { this( new AsyncCqlTemplate ( org.springframework.data.cassandra.core.SessionFactory ) , org.springframework.data.cassandra.core.CassandraConverter ); }  <METHOD_END>
<METHOD_START> public void ( AsyncCqlTemplate org.springframework.data.cassandra.core.AsyncCqlTemplate , CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ) { Assert . notNull ( org.springframework.data.cassandra.core.AsyncCqlTemplate , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.core.CassandraConverter , STRING ) ; this . org.springframework.data.cassandra.core.CassandraConverter = org.springframework.data.cassandra.core.CassandraConverter ; this . org.springframework.data.cassandra.core.CassandraMappingContext = org.springframework.data.cassandra.core.CassandraConverter . getMappingContext ( ) ; this . org.springframework.data.cassandra.core.AsyncCqlOperations = org.springframework.data.cassandra.core.AsyncCqlTemplate ; this . org.springframework.data.cassandra.core.CQLExceptionTranslator = org.springframework.data.cassandra.core.AsyncCqlTemplate . getExceptionTranslator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.AsyncCqlOperations org.springframework.data.cassandra.core.AsyncCqlOperations ( ) { return org.springframework.data.cassandra.core.AsyncCqlOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ( ) { return org.springframework.data.cassandra.core.CassandraConverter ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.cassandra.core.MappingCassandraConverter org.springframework.data.cassandra.core.MappingCassandraConverter ( ) { MappingCassandraConverter org.springframework.data.cassandra.core.MappingCassandraConverter = new MappingCassandraConverter ( ) ; org.springframework.data.cassandra.core.MappingCassandraConverter . afterPropertiesSet ( ) ; return org.springframework.data.cassandra.core.MappingCassandraConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.data.cassandra.core.ListenableFuture<java.util.List<T>> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . hasText ( java.lang.String , STRING ) ; return org.springframework.data.cassandra.core.ListenableFuture ( new SimpleStatement ( java.lang.String ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Void> ( java.lang.String java.lang.String , java.util.function.Consumer<T> < T > java.util.function.Consumer<T> , java.lang.Class<T> < T > java.lang.Class<T> )			throws org.springframework.data.cassandra.core.DataAccessException { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( java.util.function.Consumer<T> , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return org.springframework.data.cassandra.core.ListenableFuture ( new SimpleStatement ( java.lang.String ) , java.util.function.Consumer<T> , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<T> < T > org.springframework.data.cassandra.core.ListenableFuture<T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return org.springframework.data.cassandra.core.ListenableFuture ( new SimpleStatement ( java.lang.String ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<java.util.List<T>> < java.util.List<T> < T > > org.springframework.data.cassandra.core.ListenableFuture<java.util.List<T>> ( Statement org.springframework.data.cassandra.core.Statement , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( org.springframework.data.cassandra.core.Statement , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return org.springframework.data.cassandra.core.AsyncCqlOperations . query ( org.springframework.data.cassandra.core.Statement , ( row , rowNum ) -> converter . read ( entityClass , row ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Void> ( Statement org.springframework.data.cassandra.core.Statement , java.util.function.Consumer<T> < T > java.util.function.Consumer<T> , java.lang.Class<T> < T > java.lang.Class<T> )			throws org.springframework.data.cassandra.core.DataAccessException { Assert . notNull ( org.springframework.data.cassandra.core.Statement , STRING ) ; Assert . notNull ( java.util.function.Consumer<T> , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return org.springframework.data.cassandra.core.AsyncCqlOperations . query ( org.springframework.data.cassandra.core.Statement , ( row ) -> { entityConsumer . accept ( converter . read ( entityClass , row ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<T> < T > org.springframework.data.cassandra.core.ListenableFuture<T> ( Statement org.springframework.data.cassandra.core.Statement , java.lang.Class<T> < T > java.lang.Class<T> ) { return new org.springframework.data.cassandra.core.AsyncCassandraTemplate.MappingListenableFutureAdapter <> ( org.springframework.data.cassandra.core.ListenableFuture ( org.springframework.data.cassandra.core.Statement , java.lang.Class<T> ) , list -> list . stream ( ) . findFirst ( ) . orElse ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.ListenableFuture<java.lang.Long> < java.lang.Long > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Long> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Select org.springframework.data.cassandra.core.Select = QueryBuilder . select ( ) . countAll ( ) . from ( org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) . getTableName ( ) . toCql ( ) ) ; return org.springframework.data.cassandra.core.AsyncCqlOperations . queryForObject ( org.springframework.data.cassandra.core.Select , java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.ListenableFuture<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Boolean> ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> = org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ; Select org.springframework.data.cassandra.core.Select = QueryBuilder . select ( ) . from ( org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.CassandraConverter . write ( java.lang.Object , org.springframework.data.cassandra.core.Select . where ( ) , org.springframework.data.cassandra.core.CassandraPersistentEntity<> ) ; return new org.springframework.data.cassandra.core.AsyncCassandraTemplate.MappingListenableFutureAdapter <> ( org.springframework.data.cassandra.core.AsyncCqlOperations . queryForResultSet ( org.springframework.data.cassandra.core.Select ) , resultSet -> resultSet . iterator ( ) . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<T> < T > org.springframework.data.cassandra.core.ListenableFuture<T> ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> = org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<T> ) ; Select org.springframework.data.cassandra.core.Select = QueryBuilder . select ( ) . all ( ) . from ( org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.CassandraConverter . write ( java.lang.Object , org.springframework.data.cassandra.core.Select . where ( ) , org.springframework.data.cassandra.core.CassandraPersistentEntity<> ) ; return org.springframework.data.cassandra.core.ListenableFuture ( org.springframework.data.cassandra.core.Select , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<T> < T > org.springframework.data.cassandra.core.ListenableFuture<T> ( T T ) { return org.springframework.data.cassandra.core.ListenableFuture<T> ( T , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<T> < T > org.springframework.data.cassandra.core.ListenableFuture<T> ( T T , WriteOptions org.springframework.data.cassandra.core.WriteOptions ) { Assert . notNull ( T , STRING ) ; Insert org.springframework.data.cassandra.core.Insert = QueryUtils . createInsertQuery ( org.springframework.data.cassandra.core.CqlIdentifier ( T ) . toCql ( ) , T , org.springframework.data.cassandra.core.WriteOptions , org.springframework.data.cassandra.core.CassandraConverter ) ; return new org.springframework.data.cassandra.core.AsyncCassandraTemplate.MappingListenableFutureAdapter <> ( org.springframework.data.cassandra.core.AsyncCqlOperations . execute ( new org.springframework.data.cassandra.core.AsyncCassandraTemplate.AsyncStatementCallback ( org.springframework.data.cassandra.core.Insert ) ) , resultSet -> resultSet . wasApplied ( ) ? entity : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<T> < T > org.springframework.data.cassandra.core.ListenableFuture<T> ( T T ) { return org.springframework.data.cassandra.core.ListenableFuture<T> ( T , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<T> < T > org.springframework.data.cassandra.core.ListenableFuture<T> ( T T , WriteOptions org.springframework.data.cassandra.core.WriteOptions ) { Assert . notNull ( T , STRING ) ; Update org.springframework.data.cassandra.core.Update = QueryUtils . createUpdateQuery ( org.springframework.data.cassandra.core.CqlIdentifier ( T ) . toCql ( ) , T , org.springframework.data.cassandra.core.WriteOptions , org.springframework.data.cassandra.core.CassandraConverter ) ; return new org.springframework.data.cassandra.core.AsyncCassandraTemplate.MappingListenableFutureAdapter <> ( org.springframework.data.cassandra.core.AsyncCqlOperations . execute ( new org.springframework.data.cassandra.core.AsyncCassandraTemplate.AsyncStatementCallback ( org.springframework.data.cassandra.core.Update ) ) , resultSet -> resultSet . wasApplied ( ) ? entity : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<T> < T > org.springframework.data.cassandra.core.ListenableFuture<T> ( T T ) { return org.springframework.data.cassandra.core.ListenableFuture<T> ( T , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.ListenableFuture<T> < T > org.springframework.data.cassandra.core.ListenableFuture<T> ( T T , QueryOptions org.springframework.data.cassandra.core.QueryOptions ) { Assert . notNull ( T , STRING ) ; Delete org.springframework.data.cassandra.core.Delete = QueryUtils . createDeleteQuery ( org.springframework.data.cassandra.core.CqlIdentifier ( T ) . toCql ( ) , T , org.springframework.data.cassandra.core.QueryOptions , org.springframework.data.cassandra.core.CassandraConverter ) ; return new org.springframework.data.cassandra.core.AsyncCassandraTemplate.MappingListenableFutureAdapter <> ( org.springframework.data.cassandra.core.AsyncCqlOperations . execute ( new org.springframework.data.cassandra.core.AsyncCassandraTemplate.AsyncStatementCallback ( org.springframework.data.cassandra.core.Delete ) ) , resultSet -> resultSet . wasApplied ( ) ? entity : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.ListenableFuture<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Boolean> ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> = org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ; Delete org.springframework.data.cassandra.core.Delete = QueryBuilder . delete ( ) . from ( org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.CassandraConverter . write ( java.lang.Object , org.springframework.data.cassandra.core.Delete . where ( ) , org.springframework.data.cassandra.core.CassandraPersistentEntity<> ) ; return org.springframework.data.cassandra.core.AsyncCqlOperations . execute ( org.springframework.data.cassandra.core.Delete ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Void> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Truncate org.springframework.data.cassandra.core.Truncate = QueryBuilder . truncate ( org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) . getTableName ( ) . toCql ( ) ) ; return new org.springframework.data.cassandra.core.AsyncCassandraTemplate.MappingListenableFutureAdapter <> ( org.springframework.data.cassandra.core.AsyncCqlOperations . execute ( org.springframework.data.cassandra.core.Truncate ) , aBoolean -> null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.core.CqlIdentifier org.springframework.data.cassandra.core.CqlIdentifier ( java.lang.Object java.lang.Object ) { return org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( ClassUtils . getUserClass ( java.lang.Object ) ) . getTableName ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ListenableFuture < S > org.springframework.data.cassandra.core.ListenableFuture<S> , java.util.function.Function<S,T> < S , T > java.util.function.Function<S,T> ) { super( org.springframework.data.cassandra.core.ListenableFuture<S> ); this . java.util.function.Function<S,T> = java.util.function.Function<S,T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected T T ( S S ) throws java.util.concurrent.ExecutionException { return java.util.function.Function<S,T> . T ( S ) ; }  <METHOD_END>
<METHOD_START> void ( Statement org.springframework.data.cassandra.core.Statement ) { this . org.springframework.data.cassandra.core.Statement = org.springframework.data.cassandra.core.Statement ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.ResultSet> < ResultSet > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.ResultSet> ( Session org.springframework.data.cassandra.core.Session ) throws org.springframework.data.cassandra.core.DriverException , org.springframework.data.cassandra.core.DataAccessException { return new GuavaListenableFutureAdapter <> ( org.springframework.data.cassandra.core.Session . executeAsync ( org.springframework.data.cassandra.core.Statement ) , e -> ( e instanceof DriverException ? exceptionTranslator . translate ( STRING , getCql ( ) , ( DriverException ) e ) : exceptionTranslator . translateExceptionIfPossible ( e ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.cassandra.core.Statement . toString ( ) ; }  <METHOD_END>
