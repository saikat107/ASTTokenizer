<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = ( java.lang.ClassLoader != null ? java.lang.ClassLoader : ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String java.lang.String = java.lang.String[] [ int ] . java.lang.String ( ) ; java.lang.Class<?>[] [ int ] = ClassUtils . resolveClassName ( java.lang.String , this . java.lang.ClassLoader ) ; } void ( java.lang.Class<?>[] ) ; } else { void ( null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( java.lang.Class [] ) java.lang.Object ( ) ; if ( ObjectUtils . isEmpty ( java.lang.Class<?>[] ) ) { return STRING ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; ++ int ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( ClassUtils . getQualifiedName ( java.lang.Class<?>[] [ int ] ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
