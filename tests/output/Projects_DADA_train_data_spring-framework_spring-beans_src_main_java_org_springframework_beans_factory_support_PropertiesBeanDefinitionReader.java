<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.beans.factory.support.BeanDefinitionRegistry ) { super( org.springframework.beans.factory.support.BeanDefinitionRegistry ); }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( PropertiesPersister org.springframework.beans.factory.support.PropertiesPersister ) { this . org.springframework.beans.factory.support.PropertiesPersister = ( org.springframework.beans.factory.support.PropertiesPersister != null ? org.springframework.beans.factory.support.PropertiesPersister : new DefaultPropertiesPersister ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.PropertiesPersister org.springframework.beans.factory.support.PropertiesPersister ( ) { return this . org.springframework.beans.factory.support.PropertiesPersister ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( Resource org.springframework.beans.factory.support.Resource ) throws org.springframework.beans.factory.support.BeanDefinitionStoreException { return int ( new EncodedResource ( org.springframework.beans.factory.support.Resource ) , null ) ; }  <METHOD_END>
<METHOD_START> public int int ( Resource org.springframework.beans.factory.support.Resource , java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeanDefinitionStoreException { return int ( new EncodedResource ( org.springframework.beans.factory.support.Resource ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public int int ( EncodedResource org.springframework.beans.factory.support.EncodedResource ) throws org.springframework.beans.factory.support.BeanDefinitionStoreException { return int ( org.springframework.beans.factory.support.EncodedResource , null ) ; }  <METHOD_END>
<METHOD_START> public int int ( EncodedResource org.springframework.beans.factory.support.EncodedResource , java.lang.String java.lang.String )			throws org.springframework.beans.factory.support.BeanDefinitionStoreException { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; try { java.io.InputStream java.io.InputStream = org.springframework.beans.factory.support.EncodedResource . getResource ( ) . getInputStream ( ) ; try { if ( org.springframework.beans.factory.support.EncodedResource . getEncoding ( ) != null ) { org.springframework.beans.factory.support.PropertiesPersister ( ) . load ( java.util.Properties , new java.io.InputStreamReader ( java.io.InputStream , org.springframework.beans.factory.support.EncodedResource . getEncoding ( ) ) ) ; } else { org.springframework.beans.factory.support.PropertiesPersister ( ) . load ( java.util.Properties , java.io.InputStream ) ; } } finally { java.io.InputStream . void ( ) ; } return int ( java.util.Properties , java.lang.String , org.springframework.beans.factory.support.EncodedResource . getResource ( ) . getDescription ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new BeanDefinitionStoreException ( STRING + org.springframework.beans.factory.support.EncodedResource . getResource ( ) , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public int int ( java.util.ResourceBundle java.util.ResourceBundle ) throws org.springframework.beans.factory.support.BeanDefinitionStoreException { return int ( java.util.ResourceBundle , null ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.util.ResourceBundle java.util.ResourceBundle , java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeanDefinitionStoreException { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = java.util.ResourceBundle . java.util.Enumeration<java.lang.String> ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.ResourceBundle . java.lang.Object ( java.lang.String ) ) ; } return int ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) throws org.springframework.beans.factory.support.BeansException { return int ( java.util.Map<,> , null ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeansException { return int ( java.util.Map<,> , java.lang.String , STRING + java.util.Map<,> ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.lang.String java.lang.String , java.lang.String java.lang.String )			throws org.springframework.beans.factory.support.BeansException { if ( java.lang.String == null ) { java.lang.String = STRING ; } int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.util.Map<,> . java.util.Set<> ( ) ) { if ( ! ( java.lang.Object instanceof java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object + STRING ) ; } java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( ) ) ; int int = - NUMBER ; int int = java.lang.String . int ( PropertyAccessor . PROPERTY_KEY_PREFIX ) ; if ( int != - NUMBER ) { int = java.lang.String . int ( java.lang.String , int ) ; } else { int = java.lang.String . int ( java.lang.String ) ; } if ( int != - NUMBER ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } if ( ! getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { void ( java.lang.String , java.util.Map<,> , java.lang.String + java.lang.String , java.lang.String ) ; ++ int ; } } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } } } } return int ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.lang.String java.lang.String , java.lang.String java.lang.String )			throws org.springframework.beans.factory.support.BeansException { java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = GenericBeanDefinition . SCOPE_SINGLETON ; boolean boolean = false ; boolean boolean = false ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; MutablePropertyValues org.springframework.beans.factory.support.MutablePropertyValues = new MutablePropertyValues ( ) ; for ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.String java.lang.String = StringUtils . trimWhitespace ( ( java.lang.String ) java.util.Map.Entry<,> . getKey ( ) ) ; if ( java.lang.String . boolean ( java.lang.String + java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( ) + java.lang.String . int ( ) ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = StringUtils . trimWhitespace ( ( java.lang.String ) java.util.Map.Entry<,> . getValue ( ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = StringUtils . trimWhitespace ( ( java.lang.String ) java.util.Map.Entry<,> . getValue ( ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = StringUtils . trimWhitespace ( ( java.lang.String ) java.util.Map.Entry<,> . getValue ( ) ) ; boolean = java.lang.String . boolean ( java.lang.String ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = StringUtils . trimWhitespace ( ( java.lang.String ) java.util.Map.Entry<,> . getValue ( ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = StringUtils . trimWhitespace ( ( java.lang.String ) java.util.Map.Entry<,> . getValue ( ) ) ; java.lang.String = ( ( java.lang.String == null || java.lang.String . boolean ( java.lang.String ) ? GenericBeanDefinition . SCOPE_SINGLETON : GenericBeanDefinition . SCOPE_PROTOTYPE ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = StringUtils . trimWhitespace ( ( java.lang.String ) java.util.Map.Entry<,> . getValue ( ) ) ; boolean = java.lang.String . boolean ( java.lang.String ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.String . boolean ( java.lang.String ) ) { int int = java.lang.Integer . int ( java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - java.lang.String . int ( ) ) ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addIndexedArgumentValue ( int , new RuntimeBeanReference ( java.util.Map.Entry<,> . getValue ( ) . java.lang.String ( ) ) ) ; } else { int int = java.lang.Integer . int ( java.lang.String . java.lang.String ( NUMBER ) ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addIndexedArgumentValue ( int , java.lang.Object ( java.util.Map.Entry<,> ) ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - java.lang.String . int ( ) ) ; java.lang.String java.lang.String = StringUtils . trimWhitespace ( ( java.lang.String ) java.util.Map.Entry<,> . getValue ( ) ) ; java.lang.Object java.lang.Object = new RuntimeBeanReference ( java.lang.String ) ; org.springframework.beans.factory.support.MutablePropertyValues . add ( java.lang.String , java.lang.Object ) ; } else { org.springframework.beans.factory.support.MutablePropertyValues . add ( java.lang.String , java.lang.Object ( java.util.Map.Entry<,> ) ) ; } } } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + org.springframework.beans.factory.support.MutablePropertyValues ) ; } if ( java.lang.String == null && java.lang.String == null && ! java.lang.String . boolean ( this . java.lang.String ) ) { java.lang.String = this . java.lang.String ; } try { AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition = BeanDefinitionReaderUtils . createBeanDefinition ( java.lang.String , java.lang.String , getBeanClassLoader ( ) ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setScope ( java.lang.String ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setAbstract ( boolean ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setLazyInit ( boolean ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setConstructorArgumentValues ( org.springframework.beans.factory.support.ConstructorArgumentValues ) ; org.springframework.beans.factory.support.AbstractBeanDefinition . setPropertyValues ( org.springframework.beans.factory.support.MutablePropertyValues ) ; getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.AbstractBeanDefinition ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new CannotLoadBeanClassException ( java.lang.String , java.lang.String , java.lang.String , java.lang.ClassNotFoundException ) ; } catch ( java.lang.LinkageError java.lang.LinkageError ) { throw new CannotLoadBeanClassException ( java.lang.String , java.lang.String , java.lang.String , java.lang.LinkageError ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> ) { java.lang.Object java.lang.Object = java.util.Map.Entry<,> . getValue ( ) ; if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.Object = java.lang.String ; } else { java.lang.Object = new RuntimeBeanReference ( java.lang.String ) ; } } } return java.lang.Object ; }  <METHOD_END>
