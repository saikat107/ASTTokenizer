<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.data.neo4j.queries.GraphDatabaseService = getGraphDatabaseService ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.queries.GraphDatabaseService . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING } ; for ( java.lang.String java.lang.String : java.lang.String[] ) { Cinema org.springframework.data.neo4j.queries.Cinema = new Cinema ( java.lang.String ) ; org.springframework.data.neo4j.queries.Cinema . setLocation ( STRING ) ; org.springframework.data.neo4j.queries.Cinema . setCapacity ( NUMBER ) ; org.springframework.data.neo4j.queries.CinemaStreamingRepository . save ( org.springframework.data.neo4j.queries.Cinema ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; java.util.Optional<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.Optional<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaStreamingRepository . findByName ( STRING , NUMBER ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.queries.Cinema> . isPresent ( ) ) ; assertEquals ( STRING , java.util.Optional<org.springframework.data.neo4j.queries.Cinema> . get ( ) . getName ( ) ) ; java.util.Optional<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaStreamingRepository . findByName ( STRING , NUMBER ) ; assertFalse ( java.util.Optional<org.springframework.data.neo4j.queries.Cinema> . isPresent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; java.util.stream.Stream<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.stream.Stream<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaStreamingRepository . getAllCinemas ( ) ; assertEquals ( NUMBER , java.util.stream.Stream<org.springframework.data.neo4j.queries.Cinema> . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; java.util.Collection<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.Collection<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaStreamingRepository . getCinemasSortedByName ( new Sort ( STRING ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; assertEquals ( NUMBER , java.util.Collection<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.Collection<org.springframework.data.neo4j.queries.Cinema> . iterator ( ) . next ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; org.springframework.data.neo4j.queries.CinemaStreamingRepository . getAllCinemasAsync ( ) . thenAccept ( cinemas -> { assertEquals ( NUMBER , cinemas . size ( ) ) ; cinemas . forEach ( cinema -> assertNotNull ( cinema . getName ( ) ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.PlatformTransactionManager org.springframework.data.neo4j.queries.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.queries.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.SessionFactory org.springframework.data.neo4j.queries.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
