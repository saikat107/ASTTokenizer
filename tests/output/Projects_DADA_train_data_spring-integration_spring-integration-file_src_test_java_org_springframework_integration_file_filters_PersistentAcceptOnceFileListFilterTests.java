<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; ConcurrentMetadataStore org.springframework.integration.file.filters.ConcurrentMetadataStore = new SimpleMetadataStore ( ) { @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { java.util.concurrent.CountDownLatch . void ( ) ; try { java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } } return super. replace ( java.lang.String , java.lang.String , java.lang.String ) ; } } ; final FileSystemPersistentAcceptOnceFileListFilter org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter = new FileSystemPersistentAcceptOnceFileListFilter ( org.springframework.integration.file.filters.ConcurrentMetadataStore , STRING ) ; final java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( new java.io.File [] { java.io.File } ) . size ( ) ) ; java.lang.String java.lang.String = org.springframework.integration.file.filters.ConcurrentMetadataStore . get ( STRING + java.io.File . java.lang.String ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( java.io.File . long ( ) ) , java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( new java.io.File [] { java.io.File } ) . size ( ) ) ; java.io.File . boolean ( java.io.File . long ( ) + NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( new java.io.File [] { java.io.File } ) . size ( ) ) ; java.lang.String = org.springframework.integration.file.filters.ConcurrentMetadataStore . get ( STRING + java.io.File . java.lang.String ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( java.io.File . long ( ) ) , java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( new java.io.File [] { java.io.File } ) . size ( ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; java.io.File . boolean ( java.io.File . long ( ) + NUMBER ) ; java.util.concurrent.Future<java.lang.Integer> < java.lang.Integer > java.util.concurrent.Future<java.lang.Integer> = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . java.util.concurrent.Future<java.lang.Integer> ( new java.util.concurrent.Callable<java.lang.Integer> < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( ) java.lang.Exception { return org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( new java.io.File [] { java.io.File } ) . size ( ) ; } } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.file.filters.ConcurrentMetadataStore . put ( STRING + java.io.File . java.lang.String ( ) , STRING ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.lang.Integer java.lang.Integer = java.util.concurrent.Future<java.lang.Integer> . java.lang.Integer ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; java.io.File . boolean ( ) ; org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { java.util.concurrent.CountDownLatch . void ( ) ; try { java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } } return super. replace ( java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( ) java.lang.Exception { return org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( new java.io.File [] { java.io.File } ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { AbstractPersistentAcceptOnceFileListFilter < java.lang.String > org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<java.lang.String> = new AbstractPersistentAcceptOnceFileListFilter < java.lang.String > ( new SimpleMetadataStore ( ) , STRING ) { @ java.lang.Override protected long long ( java.lang.String java.lang.String ) { return NUMBER ; } @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; } } ; doTestRollback ( org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected long long ( java.lang.String java.lang.String ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FileSystemPersistentAcceptOnceFileListFilter org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter = new FileSystemPersistentAcceptOnceFileListFilter ( new SimpleMetadataStore ( ) , STRING ) ; java.io.File [] java.io.File[] = new java.io.File [] { new java.io.File ( STRING ) , new java.io.File ( STRING ) , new java.io.File ( STRING ) } ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( java.io.File[] ) ; assertTrue ( java.util.Arrays . boolean ( java.io.File[] , java.util.List<java.io.File> . java.lang.Object[] ( ) ) ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . rollback ( java.util.List<java.io.File> . java.io.File ( NUMBER ) , java.util.List<java.io.File> ) ; java.util.List<java.io.File> = org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.io.File> . java.io.File ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.List<java.io.File> . java.io.File ( NUMBER ) . java.lang.String ( ) ) ; java.util.List<java.io.File> = org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; class MS extends SimpleMetadataStore implements java.io.Flushable , java.io.Closeable { @ java.lang.Override public void void ( ) java.io.IOException { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } @ java.lang.Override public void void ( ) java.io.IOException { void ( ) ; } @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return super. replace ( java.lang.String , java.lang.String , java.lang.String ) ; } } MS store = new MS ( ) ; java.lang.String java.lang.String = STRING ; FileSystemPersistentAcceptOnceFileListFilter org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter = new FileSystemPersistentAcceptOnceFileListFilter ( store , java.lang.String ) ; final java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; java.io.File [] java.io.File[] = new java.io.File [] { java.io.File } ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( java.io.File[] ) ; assertTrue ( java.util.Arrays . boolean ( java.io.File[] , java.util.List<java.io.File> . java.lang.Object[] ( ) ) ) ; org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . rollback ( java.util.List<java.io.File> . java.io.File ( NUMBER ) , java.util.List<java.io.File> ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . setFlushOnUpdate ( true ) ; java.util.List<java.io.File> = org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( java.io.File[] ) ; assertTrue ( java.util.Arrays . boolean ( java.io.File[] , java.util.List<java.io.File> . java.lang.Object[] ( ) ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . rollback ( java.util.List<java.io.File> . java.io.File ( NUMBER ) , java.util.List<java.io.File> ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; java.util.List<java.io.File> = org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( java.io.File[] ) ; assertTrue ( java.util.Arrays . boolean ( java.io.File[] , java.util.List<java.io.File> . java.lang.Object[] ( ) ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; java.util.List<java.io.File> = org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; store . put ( java.lang.String + java.io.File . java.lang.String ( ) , STRING ) ; java.util.List<java.io.File> = org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . filterFiles ( java.io.File[] ) ; assertTrue ( java.util.Arrays . boolean ( java.io.File[] , java.util.List<java.io.File> . java.lang.Object[] ( ) ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; java.io.File . boolean ( ) ; org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter . close ( ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return super. replace ( java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
