<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Fields . from ( ( Field [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Fields . fields ( ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( Fields . field ( STRING ) , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( Fields . field ( STRING , STRING ) , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Fields . field ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Fields . field ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Fields . field ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AggregationField org.springframework.data.mongodb.core.aggregation.AggregationField = new AggregationField ( STRING ) ; Fields org.springframework.data.mongodb.core.aggregation.Fields = Fields . from ( org.springframework.data.mongodb.core.aggregation.AggregationField ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Fields , is ( Matchers .< Field > iterableWithSize ( NUMBER ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Fields , hasItem ( org.springframework.data.mongodb.core.aggregation.AggregationField ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( Fields . field ( STRING ) , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Fields org.springframework.data.mongodb.core.aggregation.Fields = fields ( STRING , STRING ) . and ( STRING ) . and ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Fields , is ( Matchers .< Field > iterableWithSize ( NUMBER ) ) ) ; void ( org.springframework.data.mongodb.core.aggregation.Fields . getField ( STRING ) , STRING , null ) ; void ( org.springframework.data.mongodb.core.aggregation.Fields . getField ( STRING ) , STRING , null ) ; void ( org.springframework.data.mongodb.core.aggregation.Fields . getField ( STRING ) , STRING , null ) ; void ( org.springframework.data.mongodb.core.aggregation.Fields . getField ( STRING ) , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.aggregation.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; fields ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( Fields . field ( STRING ) . getName ( ) , is ( STRING ) ) ; assertThat ( Fields . field ( STRING ) . getName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Fields . field ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( Fields . field ( STRING ) . getTarget ( ) , is ( STRING ) ) ; assertThat ( Fields . field ( STRING ) . getTarget ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( Field org.springframework.data.mongodb.core.aggregation.Field , java.lang.String java.lang.String , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.mongodb.core.aggregation.Field , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Field . getName ( ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Field . getTarget ( ) , is ( java.lang.String != null ? java.lang.String : java.lang.String ) ) ; }  <METHOD_END>
