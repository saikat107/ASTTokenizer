<METHOD_START> public static java.util.Properties java.util.Properties ( java.util.Properties java.util.Properties , java.lang.String java.lang.String , java.lang.Integer java.lang.Integer ) { if ( StringUtils . hasText ( java.lang.String ) ) { Assert . notNull ( java.util.Properties , STRING ) ; java.util.Properties . java.lang.Object ( java.lang.String , java.lang.String ) ; if ( java.lang.Integer != null ) { java.util.Properties . java.lang.Object ( java.lang.String , java.lang.Integer . java.lang.String ( ) ) ; } } return java.util.Properties ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( DistributedSystem org.springframework.data.gemfire.util.DistributedSystem ) { return ( org.springframework.data.gemfire.util.DistributedSystem != null && org.springframework.data.gemfire.util.DistributedSystem . isConnected ( ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( DistributedSystem org.springframework.data.gemfire.util.DistributedSystem ) { return ! boolean ( org.springframework.data.gemfire.util.DistributedSystem ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T extends org.springframework.data.gemfire.util.DistributedSystem > T T ( ) { return ( T ) InternalDistributedSystem . getAnyInstance ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T extends org.springframework.data.gemfire.util.DistributedSystem > T T ( GemFireCache org.springframework.data.gemfire.util.GemFireCache ) { return ( T ) java.util.Optional . java.util.Optional ( org.springframework.data.gemfire.util.GemFireCache ) . map ( GemFireCache :: getDistributedSystem ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T extends org.springframework.data.gemfire.util.Locator > T T ( ) { return ( T ) InternalLocator . getLocator ( ) ; }  <METHOD_END>
