<METHOD_START> public void ( CacheErrorHandler org.springframework.cache.jcache.interceptor.CacheErrorHandler ) { super( org.springframework.cache.jcache.interceptor.CacheErrorHandler ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( CacheOperationInvocationContext < CachePutOperation > org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CachePutOperation> , CacheOperationInvoker org.springframework.cache.jcache.interceptor.CacheOperationInvoker ) { CacheKeyInvocationContext < CachePut > org.springframework.cache.jcache.interceptor.CacheKeyInvocationContext<org.springframework.cache.jcache.interceptor.CachePut> = createCacheKeyInvocationContext ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CachePutOperation> ) ; CachePutOperation org.springframework.cache.jcache.interceptor.CachePutOperation = org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CachePutOperation> . getOperation ( ) ; boolean boolean = org.springframework.cache.jcache.interceptor.CachePutOperation . isEarlyPut ( ) ; java.lang.Object java.lang.Object = org.springframework.cache.jcache.interceptor.CacheKeyInvocationContext<org.springframework.cache.jcache.interceptor.CachePut> . getValueParameter ( ) . getValue ( ) ; if ( boolean ) { void ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CachePutOperation> , java.lang.Object ) ; } try { java.lang.Object java.lang.Object = org.springframework.cache.jcache.interceptor.CacheOperationInvoker . invoke ( ) ; if ( ! boolean ) { void ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CachePutOperation> , java.lang.Object ) ; } return java.lang.Object ; } catch ( CacheOperationInvoker . CacheOperationInvoker CacheOperationInvoker.ThrowableWrapper ) { java.lang.Throwable java.lang.Throwable = CacheOperationInvoker.ThrowableWrapper . getOriginal ( ) ; if ( ! boolean && org.springframework.cache.jcache.interceptor.CachePutOperation . getExceptionTypeFilter ( ) . match ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ) { void ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CachePutOperation> , java.lang.Object ) ; } throw CacheOperationInvoker.ThrowableWrapper ; } }  <METHOD_END>
<METHOD_START> protected void void ( CacheOperationInvocationContext < CachePutOperation > org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CachePutOperation> , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = generateKey ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CachePutOperation> ) ; Cache org.springframework.cache.jcache.interceptor.Cache = resolveCache ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<org.springframework.cache.jcache.interceptor.CachePutOperation> ) ; doPut ( org.springframework.cache.jcache.interceptor.Cache , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
