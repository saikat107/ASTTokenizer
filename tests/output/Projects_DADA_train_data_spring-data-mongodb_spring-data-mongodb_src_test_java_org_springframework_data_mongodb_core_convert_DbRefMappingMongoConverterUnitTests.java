<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.mongodb.core.convert.MongoDbFactory . getExceptionTranslator ( ) ) . thenReturn ( new MongoExceptionTranslator ( ) ) ; this . org.springframework.data.mongodb.core.convert.DefaultDbRefResolver = spy ( new DefaultDbRefResolver ( org.springframework.data.mongodb.core.convert.MongoDbFactory ) ) ; this . org.springframework.data.mongodb.core.convert.MongoMappingContext = new MongoMappingContext ( ) ; this . org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.convert.DefaultDbRefResolver , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.convert.Person = new Person ( ) ; person . id = STRING ; DBRef org.springframework.data.mongodb.core.convert.DBRef = org.springframework.data.mongodb.core.convert.MappingMongoConverter . toDBRef ( org.springframework.data.mongodb.core.convert.Person , null ) ; assertThat ( org.springframework.data.mongodb.core.convert.DBRef . getId ( ) , is ( ( java.lang.Object ) STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DBRef . getCollectionName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.Document . put ( STRING , java.math.BigInteger . java.math.BigInteger ) ; DBRef org.springframework.data.mongodb.core.convert.DBRef = mock ( DBRef .class ) ; when ( org.springframework.data.mongodb.core.convert.DBRef . getId ( ) ) . thenReturn ( java.math.BigInteger . java.math.BigInteger ) ; when ( org.springframework.data.mongodb.core.convert.DBRef . getCollectionName ( ) ) . thenReturn ( STRING ) ; if ( MongoClientVersion . isMongo3Driver ( ) ) { MongoDatabase org.springframework.data.mongodb.core.convert.MongoDatabase = mock ( MongoDatabase .class ) ; MongoCollection org.springframework.data.mongodb.core.convert.MongoCollection = mock ( MongoCollection .class ) ; when ( org.springframework.data.mongodb.core.convert.MongoDbFactory . getDb ( ) ) . thenReturn ( org.springframework.data.mongodb.core.convert.MongoDatabase ) ; when ( org.springframework.data.mongodb.core.convert.MongoDatabase . getCollection ( anyString ( ) , eq ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.convert.MongoCollection ) ; FindIterable org.springframework.data.mongodb.core.convert.FindIterable = mock ( FindIterable .class ) ; when ( org.springframework.data.mongodb.core.convert.FindIterable . first ( ) ) . thenReturn ( org.springframework.data.mongodb.core.convert.Document ) ; when ( org.springframework.data.mongodb.core.convert.MongoCollection . find ( Mockito . any ( Bson .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.convert.FindIterable ) ; } else { when ( org.springframework.data.mongodb.core.convert.DefaultDbRefResolver . fetch ( org.springframework.data.mongodb.core.convert.DBRef ) ) . thenReturn ( org.springframework.data.mongodb.core.convert.Document ) ; } org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger = java.math.BigInteger . java.math.BigInteger ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> < java.lang.String , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal > java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> = new java.util.HashMap<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> < java.lang.String , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal > ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( STRING , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> = java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef , org.springframework.data.mongodb.core.convert.Document ) ; Document org.springframework.data.mongodb.core.convert.Document = ( Document ) org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( STRING ) , instanceOf ( DBRef .class ) ) ; ( ( Document ) org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ) . put ( STRING , org.springframework.data.mongodb.core.convert.DBRef ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef .class , org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( STRING ) . java.math.BigInteger , is ( java.math.BigInteger . java.math.BigInteger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mongodb.core.convert.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.PersonClient .class ) ; MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentPropertyPath ( org.springframework.data.mongodb.core.convert.PropertyPath ) . getLeafProperty ( ) ; Person org.springframework.data.mongodb.core.convert.Person = new Person ( ) ; person . id = STRING ; DBRef org.springframework.data.mongodb.core.convert.DBRef = org.springframework.data.mongodb.core.convert.MappingMongoConverter . toDBRef ( org.springframework.data.mongodb.core.convert.Person , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; assertThat ( org.springframework.data.mongodb.core.convert.DBRef . getId ( ) , is ( ( java.lang.Object ) STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DBRef . getCollectionName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . readRef ( ( DBRef ) any ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.List<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> = new java.util.LinkedList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> < org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget > ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> ( new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( STRING ) ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.List<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.List<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( NUMBER ) . java.lang.String ( ) , is ( java.lang.String ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.List<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> , true ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.List<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( NUMBER ) . java.lang.String ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . readRef ( ( DBRef ) any ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> = new java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> < org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget > ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> ( new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( java.lang.String , java.lang.String ) ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( NUMBER ) . java.lang.String ( ) , is ( java.lang.String ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> , true ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( NUMBER ) . java.lang.String ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . readRef ( ( DBRef ) any ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget . java.lang.String ( ) , is ( java.lang.String ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , true ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget . java.lang.String ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . readRef ( ( DBRef ) any ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructor = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructor ( ( java.lang.Object ) java.lang.String , ( java.lang.Object ) java.lang.String ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructor , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructor . java.lang.String ( ) , is ( java.lang.String ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructor , true ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructor . java.lang.String ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . readRef ( ( DBRef ) any ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructorWithoutDefaultConstructor = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructorWithoutDefaultConstructor ( ( java.lang.Object ) java.lang.String , ( java.lang.Object ) java.lang.String ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructorWithoutDefaultConstructor , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructorWithoutDefaultConstructor . java.lang.String ( ) , is ( java.lang.String ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructorWithoutDefaultConstructor , true ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructorWithoutDefaultConstructor . java.lang.String ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . readRef ( ( DBRef ) any ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableLazyDbRefTarget = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableLazyDbRefTarget ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs = ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs ) java.lang.Object ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableLazyDbRefTarget . java.lang.String ( ) , is ( java.lang.String ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableLazyDbRefTarget , true ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableLazyDbRefTarget . java.lang.String ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . readRef ( ( DBRef ) any ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget , is ( notNullValue ( ) ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget . java.lang.String ( ) , is ( java.lang.String + STRING + java.lang.String ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . readRef ( ( DBRef ) any ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , is ( notNullValue ( ) ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , false ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget . java.lang.String ( ) ; assertThat ( java.lang.String , is ( STRING + STRING + java.lang.String + STRING ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget . java.lang.String ( ) , is ( java.lang.String ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , is ( notNullValue ( ) ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , is ( equalTo ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , is ( not ( equalTo ( null ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , is ( not ( equalTo ( ( java.lang.Object ) org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget ) ) ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ToStringObjectMethodOverrideLazyDbRefTarget ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , is ( notNullValue ( ) ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget . int ( ) , is ( NUMBER ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . readRef ( ( DBRef ) any ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget , is ( notNullValue ( ) ) ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget . boolean ( null ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget , true ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget , is ( notNullValue ( ) ) ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget . int ( ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.lang.String , is ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.List<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructor , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetWithPeristenceConstructorWithoutDefaultConstructor , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField = org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField .class , org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField , is ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithDbRefField ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.NestedReferenceHolder = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.NestedReferenceHolder ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.NestedReferenceHolder . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField = org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField .class , org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.NestedReferenceHolder , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.NestedReferenceHolder . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField , is ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithNestedDbRefField ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class ) ; MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; java.lang.String java.lang.String = new ObjectId ( ) . toString ( ) ; DBRef org.springframework.data.mongodb.core.convert.DBRef = org.springframework.data.mongodb.core.convert.MappingMongoConverter . toDBRef ( new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( java.lang.String ) , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( STRING , org.springframework.data.mongodb.core.convert.DBRef ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; PersistentPropertyAccessor org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getPropertyAccessor ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ) ; MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget .class ) . getIdProperty ( ) . get ( ) ; assertThat ( org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor . getProperty ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) , is ( notNullValue ( ) ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class ) ; MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; java.lang.String java.lang.String = new ObjectId ( ) . toString ( ) ; DBRef org.springframework.data.mongodb.core.convert.DBRef = org.springframework.data.mongodb.core.convert.MappingMongoConverter . toDBRef ( new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetPropertyAccess ( java.lang.String ) , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( STRING , org.springframework.data.mongodb.core.convert.DBRef ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetPropertyAccess org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetPropertyAccess = org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetPropertyAccess ; assertThat ( ReflectionTestUtils . getField ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetPropertyAccess , STRING ) , is ( nullValue ( ) ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetPropertyAccess , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs .class ) ; MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; java.lang.String java.lang.String = new ObjectId ( ) . toString ( ) ; DBRef org.springframework.data.mongodb.core.convert.DBRef = org.springframework.data.mongodb.core.convert.MappingMongoConverter . toDBRef ( new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTargetPropertyAccess ( java.lang.String ) , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs .class , new Document ( STRING , org.springframework.data.mongodb.core.convert.DBRef ) ) ; ReflectionTestUtils . invokeMethod ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , STRING ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.WithObjectMethodOverrideLazyDbRefs . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( java.util.Arrays . java.util.List ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) , new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . bulkReadRefs ( anyListOf ( DBRef .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> = new java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> < org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget > ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> ( new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( java.lang.String , java.lang.String ) , new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( java.lang.String , java.lang.String ) ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( NUMBER ) . java.lang.String ( ) , is ( java.lang.String ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> , true ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( NUMBER ) . java.lang.String ( ) , is ( java.lang.String ) ) ; verify ( org.springframework.data.mongodb.core.convert.MappingMongoConverter , never ( ) ) . readRef ( Mockito . any ( DBRef .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . doReturn ( new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . readRef ( Mockito . any ( DBRef .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> = new java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> < org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget > ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> ( new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( java.lang.String , java.lang.String ) , new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.SerializableLazyDbRefTarget ( java.lang.String , java.lang.String ) ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs .class , org.springframework.data.mongodb.core.convert.Document ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( NUMBER ) . java.lang.String ( ) , is ( java.lang.String ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> , true ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.ClassWithLazyDbRefs . java.util.ArrayList<org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget ( NUMBER ) . java.lang.String ( ) , is ( java.lang.String ) ) ; verify ( org.springframework.data.mongodb.core.convert.MappingMongoConverter , times ( NUMBER ) ) . readRef ( Mockito . any ( DBRef .class ) ) ; verify ( org.springframework.data.mongodb.core.convert.MappingMongoConverter , never ( ) ) . bulkReadRefs ( anyListOf ( DBRef .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger = java.math.BigInteger . java.math.BigInteger ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger = java.math.BigInteger . java.math.BigInteger ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( java.util.Arrays . java.util.List ( new Document ( STRING , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger ) , new Document ( STRING , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger ) ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . bulkReadRefs ( anyListOf ( DBRef .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> = new java.util.LinkedHashMap<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> < java.lang.String , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal > ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( STRING , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( STRING , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef .class , org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( STRING ) . java.math.BigInteger , is ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( STRING ) . java.math.BigInteger , is ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger ) ) ; verify ( org.springframework.data.mongodb.core.convert.MappingMongoConverter , times ( NUMBER ) ) . bulkReadRefs ( anyListOf ( DBRef .class ) ) ; verify ( org.springframework.data.mongodb.core.convert.MappingMongoConverter , never ( ) ) . readRef ( Mockito . any ( DBRef .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger = java.math.BigInteger . java.math.BigInteger ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger = java.math.BigInteger . java.math.BigInteger ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = spy ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; doReturn ( java.util.Arrays . java.util.List ( new Document ( STRING , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger ) , new Document ( STRING , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger ) ) ) . when ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) . bulkReadRefs ( anyListOf ( DBRef .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef = new org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> = new java.util.LinkedHashMap<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> < java.lang.String , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal > ( ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( STRING , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( STRING , org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef .class , org.springframework.data.mongodb.core.convert.Document ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> , false ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( STRING ) . java.math.BigInteger , is ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger ) ) ; assertProxyIsResolved ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> , true ) ; assertThat ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRef . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal> . org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal ( STRING ) . java.math.BigInteger , is ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.MapDBRefVal . java.math.BigInteger ) ) ; verify ( org.springframework.data.mongodb.core.convert.MappingMongoConverter , times ( NUMBER ) ) . bulkReadRefs ( anyListOf ( DBRef .class ) ) ; verify ( org.springframework.data.mongodb.core.convert.MappingMongoConverter , never ( ) ) . readRef ( Mockito . any ( DBRef .class ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return SerializationUtils . deserialize ( SerializationUtils . serialize ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( java.lang.String , java.lang.String ); this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { super( java.lang.Object . java.lang.String ( ) , java.lang.Object . java.lang.String ( ) ); }  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( java.lang.String , java.lang.String ); this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { super( java.lang.Object . java.lang.String ( ) , java.lang.Object . java.lang.String ( ) ); }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String + STRING + this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) return true ; if ( java.lang.Object == null ) return false ; if ( java.lang.Class<? extends org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) return false ; org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget = ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.EqualsAndHashCodeObjectMethodOverrideLazyDbRefTarget ) java.lang.Object ; if ( java.lang.String == null ) { if ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget . java.lang.String != null ) return false ; } else if ( ! java.lang.String . boolean ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget . java.lang.String ) ) return false ; if ( java.lang.String == null ) { if ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget . java.lang.String != null ) return false ; } else if ( ! java.lang.String . boolean ( org.springframework.data.mongodb.core.convert.DbRefMappingMongoConverterUnitTests.LazyDbRefTarget . java.lang.String ) ) return false ; return true ; }  <METHOD_END>
