<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = new EmbeddedDatabaseBuilder ( ) . build ( ) ; JdbcOutboundGateway org.springframework.integration.jdbc.JdbcOutboundGateway = new JdbcOutboundGateway ( javax.sql.DataSource , STRING ) ; try { org.springframework.integration.jdbc.JdbcOutboundGateway . setMaxRowsPerPoll ( NUMBER ) ; org.springframework.integration.jdbc.JdbcOutboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.JdbcOutboundGateway . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcOperations org.springframework.integration.jdbc.JdbcOperations = null ; try { new JdbcOutboundGateway ( org.springframework.integration.jdbc.JdbcOperations , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { Assert . assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final javax.sql.DataSource javax.sql.DataSource = new EmbeddedDatabaseBuilder ( ) . build ( ) ; final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = null ; try { new JdbcOutboundGateway ( javax.sql.DataSource , java.lang.String , java.lang.String ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { Assert . assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = new EmbeddedDatabaseBuilder ( ) . build ( ) ; JdbcOutboundGateway org.springframework.integration.jdbc.JdbcOutboundGateway = new JdbcOutboundGateway ( javax.sql.DataSource , STRING ) ; try { org.springframework.integration.jdbc.JdbcOutboundGateway . setMaxRowsPerPoll ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
