<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { try { void ( ( m , h ) -> NUMBER / NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( java.lang.ArithmeticException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LambdaMessageProcessor org.springframework.integration.dsl.LambdaMessageProcessor = new LambdaMessageProcessor ( new GenericTransformer < Message < ? > , Message < ? > > ( ) { @ java.lang.Override public org.springframework.integration.dsl.Message<?> < ? > org.springframework.integration.dsl.Message<?> ( Message < ? > org.springframework.integration.dsl.Message<?> ) { return org.springframework.integration.dsl.Message<?> ( org.springframework.integration.dsl.Message<> ) ; } } , null ) ; org.springframework.integration.dsl.LambdaMessageProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; GenericMessage < java.lang.String > org.springframework.integration.dsl.GenericMessage<java.lang.String> = new GenericMessage <> ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.dsl.LambdaMessageProcessor . processMessage ( org.springframework.integration.dsl.GenericMessage<java.lang.String> ) ; assertSame ( org.springframework.integration.dsl.GenericMessage<java.lang.String> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.dsl.Message<?> < ? > org.springframework.integration.dsl.Message<?> ( Message < ? > org.springframework.integration.dsl.Message<?> ) { return org.springframework.integration.dsl.Message<?> ( org.springframework.integration.dsl.Message<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( GenericHandler < ? > org.springframework.integration.dsl.GenericHandler<?> ) { LambdaMessageProcessor org.springframework.integration.dsl.LambdaMessageProcessor = new LambdaMessageProcessor ( org.springframework.integration.dsl.GenericHandler<> , java.lang.String .class ) ; org.springframework.integration.dsl.LambdaMessageProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.dsl.LambdaMessageProcessor . processMessage ( new GenericMessage <> ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.dsl.Message<?> < ? > org.springframework.integration.dsl.Message<?> ( Message < ? > org.springframework.integration.dsl.Message<?> ) { return org.springframework.integration.dsl.Message<> ; }  <METHOD_END>
