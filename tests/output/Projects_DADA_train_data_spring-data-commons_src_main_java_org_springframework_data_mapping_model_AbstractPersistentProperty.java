<METHOD_START> public void ( Property org.springframework.data.mapping.model.Property , PersistentEntity < ? , P > org.springframework.data.mapping.model.PersistentEntity<?,P> , SimpleTypeHolder org.springframework.data.mapping.model.SimpleTypeHolder ) { Assert . notNull ( org.springframework.data.mapping.model.SimpleTypeHolder , STRING ) ; Assert . notNull ( org.springframework.data.mapping.model.PersistentEntity<,P> , STRING ) ; this . java.lang.String = org.springframework.data.mapping.model.Property . getName ( ) ; this . java.lang.Class<?> = org.springframework.data.mapping.model.Property . getType ( ) ; this . org.springframework.data.mapping.model.TypeInformation<?> = PropertyPath . from ( java.util.regex.Pattern . java.lang.String ( org.springframework.data.mapping.model.Property . getName ( ) ) , org.springframework.data.mapping.model.PersistentEntity<,P> . getTypeInformation ( ) ) . getTypeInformation ( ) ; this . org.springframework.data.mapping.model.Property = org.springframework.data.mapping.model.Property ; this . org.springframework.data.mapping.model.Lazy<java.util.Optional<org.springframework.data.mapping.model.Association<P>>> = Lazy . of ( ( ) isAssociation ( ) ? Optional . of ( createAssociation ( ) ) : Optional . empty ( ) ) ; this . org.springframework.data.mapping.model.PersistentEntity<?,P> = org.springframework.data.mapping.model.PersistentEntity<,P> ; this . org.springframework.data.mapping.model.Lazy<java.lang.Integer> = Lazy . of ( org.springframework.data.mapping.model.Property :: hashCode ) ; this . org.springframework.data.mapping.model.Lazy<java.lang.Boolean> = Lazy . of ( ( ) owner . getType ( ) . isInterface ( ) || getField ( ) . map ( it -> it . equals ( CAUSE_FIELD ) ) . orElse ( false ) ) ; this . org.springframework.data.mapping.model.Lazy<java.util.Optional<? extends org.springframework.data.mapping.model.TypeInformation<?>>> = Lazy . of ( ( ) Optional . ofNullable ( information . getActualType ( ) ) . filter ( it -> ! simpleTypeHolder . isSimpleType ( it . getType ( ) ) ) . filter ( it -> ! it . isCollectionLike ( ) ) . filter ( it -> ! it . isMap ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.mapping.model.Association<P> < P > org.springframework.data.mapping.model.Association<P> ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.mapping.model.TypeInformation<> . getType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mapping.model.TypeInformation<?> < ? > org.springframework.data.mapping.model.TypeInformation<?> ( ) { return org.springframework.data.mapping.model.TypeInformation<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<? extends org.springframework.data.mapping.model.TypeInformation<?>> < ? extends TypeInformation < ? > > java.lang.Iterable<? extends org.springframework.data.mapping.model.TypeInformation<?>> ( ) { if ( ! boolean ( ) ) { return java.util.Collections . java.util.Set<org.springframework.data.mapping.model.TypeInformation<?>> ( ) ; } return org.springframework.data.mapping.model.Lazy<java.util.Optional<? extends org.springframework.data.mapping.model.TypeInformation<?>>> . get ( ) . map ( it -> Collections . singleton ( it ) ) . orElseGet ( ( ) Collections . emptySet ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( ) { return org.springframework.data.mapping.model.Property . getGetter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( ) { return org.springframework.data.mapping.model.Property . getSetter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.reflect.Field> < java.lang.reflect.Field > java.util.Optional<java.lang.reflect.Field> ( ) { return org.springframework.data.mapping.model.Property . getField ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( ) { return java.util.Optional . java.util.Optional<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isAnnotationPresent ( Reference .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.data.mapping.model.Association<P>> < Association < P > > java.util.Optional<org.springframework.data.mapping.model.Association<P>> ( ) { return org.springframework.data.mapping.model.Lazy<java.util.Optional<org.springframework.data.mapping.model.Association<P>>> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.mapping.model.TypeInformation<> . isCollectionLike ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.util.Map .class . boolean ( java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.lang.Class<?> ( ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! boolean ( ) && org.springframework.data.mapping.model.Lazy<java.util.Optional<? extends org.springframework.data.mapping.model.TypeInformation<?>>> . get ( ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ( ) { if ( ! boolean ( ) && ! boolean ( ) ) { return java.util.Optional . java.util.Optional<java.lang.Class<?>> ( ) ; } return java.util.Optional . java.util.Optional ( org.springframework.data.mapping.model.TypeInformation<> . getRequiredComponentType ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ( ) { return boolean ( ) ? org.springframework.data.mapping.model.TypeInformation<> . getMapValueType ( ) . map ( TypeInformation :: getType ) : java.util.Optional . java.util.Optional<java.lang.Class<?>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.mapping.model.TypeInformation<> . getActualType ( ) . getType ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.mapping.model.Lazy<java.lang.Boolean> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.mapping.model.AbstractPersistentProperty ) ) { return false ; } org.springframework.data.mapping.model.AbstractPersistentProperty<?> < ? > org.springframework.data.mapping.model.AbstractPersistentProperty<?> = ( org.springframework.data.mapping.model.AbstractPersistentProperty<?> < ? > ) java.lang.Object ; return this . org.springframework.data.mapping.model.Property . equals ( org.springframework.data.mapping.model.AbstractPersistentProperty<> . org.springframework.data.mapping.model.Property ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.data.mapping.model.Lazy<java.lang.Integer> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.mapping.model.Property . toString ( ) ; }  <METHOD_END>
