<METHOD_START> protected java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return EnableEntityDefinedRegions .class ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.String java.lang.String ( ) { return java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.gemfire.config.annotation.BeanFactory ) throws org.springframework.data.gemfire.config.annotation.BeansException { this . org.springframework.data.gemfire.config.annotation.BeanFactory = org.springframework.data.gemfire.config.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanFactory org.springframework.data.gemfire.config.annotation.BeanFactory ( ) { return this . org.springframework.data.gemfire.config.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata ) { return boolean ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , java.lang.String java.lang.String ) { return org.springframework.data.gemfire.config.annotation.AnnotationMetadata . hasAnnotation ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return AnnotationAttributes . fromMap ( AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata ) { return org.springframework.data.gemfire.config.annotation.AnnotationAttributes ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , java.lang.String java.lang.String ) { return AnnotationAttributes . fromMap ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata . getAnnotationAttributes ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.gemfire.config.annotation.GemfireMappingContext ( ) . getPersistentEntity ( java.lang.Class<> ) . orElseThrow ( ( ) new IllegalStateException ( String . format ( STRING , persistentEntityType ) ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.GemfireMappingContext org.springframework.data.gemfire.config.annotation.GemfireMappingContext ( ) { return java.util.Optional . java.util.Optional ( this . org.springframework.data.gemfire.config.annotation.GemfireMappingContext ) . orElseGet ( ( ) { try { this . mappingContext = getBeanFactory ( ) . getBean ( GemfireMappingContext .class ) ; } catch ( Throwable ignore ) { this . mappingContext = new GemfireMappingContext ( ) ; } return this . mappingContext ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) { if ( boolean ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata ) ) { AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes = org.springframework.data.gemfire.config.annotation.AnnotationAttributes ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata ) ; boolean boolean = org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getBoolean ( STRING ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : org.springframework.data.gemfire.config.annotation.GemFireComponentClassTypeScanner ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) . scan ( ) ) { GemfirePersistentEntity org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity = org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> ( java.lang.Class<> ) ; void ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity , boolean , org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) ; org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry , org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.GemFireComponentClassTypeScanner org.springframework.data.gemfire.config.annotation.GemFireComponentClassTypeScanner ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) ; return GemFireComponentClassTypeScanner . from ( java.util.Set<java.lang.String> ) . with ( java.lang.ClassLoader ( ) ) . withExcludes ( java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) ) . withIncludes ( java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) ) . withIncludes ( java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Collections . boolean ( java.util.Set<java.lang.String> , nullSafeArray ( defaultIfEmpty ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getStringArray ( STRING ) , org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getStringArray ( STRING ) ) , java.lang.String .class ) ) ; java.util.stream.IntStream ( nullSafeArray ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getClassArray ( STRING ) , java.lang.Class .class ) ) . forEach ( type -> resolvedBasePackages . add ( type . getPackage ( ) . getName ( ) ) ) ; if ( java.util.Set<java.lang.String> . boolean ( ) ) { java.util.Set<java.lang.String> . boolean ( ClassUtils . getPackageName ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata . getClassName ( ) ) ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected java.lang.ClassLoader java.lang.ClassLoader ( ) { return java.util.Optional . java.util.Optional<java.lang.ClassLoader> ( this . java.lang.ClassLoader ) . java.lang.ClassLoader ( ( ) java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { return java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getAnnotationArray ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { return java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getAnnotationArray ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> ( AnnotationAttributes [] org.springframework.data.gemfire.config.annotation.AnnotationAttributes[] ) { java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> < TypeFilter > java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> = new java.util.HashSet<org.springframework.data.gemfire.config.annotation.TypeFilter> <> ( ) ; java.util.stream.IntStream ( nullSafeArray ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes[] , AnnotationAttributes .class ) ) . forEach ( filterAttributes -> CollectionUtils . addAll ( typeFilters , typeFiltersFor ( filterAttributes ) ) ) ; return java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> < TypeFilter > java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> = new java.util.HashSet<org.springframework.data.gemfire.config.annotation.TypeFilter> <> ( ) ; FilterType org.springframework.data.gemfire.config.annotation.FilterType = org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getEnum ( STRING ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : nullSafeArray ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getClassArray ( STRING ) , java.lang.Class .class ) ) { switch ( org.springframework.data.gemfire.config.annotation.FilterType ) { case ANNOTATION : Assert . isAssignable ( java.lang.annotation.Annotation .class , java.lang.Class<> , java.lang.String . java.lang.String ( STRING , java.lang.Class<> ) ) ; java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> . add ( new AnnotationTypeFilter ( ( java.lang.Class<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > ) java.lang.Class<> ) ) ; break; case ASSIGNABLE_TYPE : java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> . add ( new AssignableTypeFilter ( java.lang.Class<> ) ) ; break; case CUSTOM : Assert . isAssignable ( TypeFilter .class , java.lang.Class<> , java.lang.String . java.lang.String ( STRING , java.lang.Class<> ) ) ; java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> . add ( BeanUtils . instantiateClass ( java.lang.Class<> , TypeFilter .class ) ) ; break; default: throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.config.annotation.FilterType ) ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) ) { switch ( org.springframework.data.gemfire.config.annotation.FilterType ) { case ASPECTJ : java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> . add ( new AspectJTypeFilter ( java.lang.String , java.lang.ClassLoader ( ) ) ) ; break; case REGEX : java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> . add ( new RegexPatternTypeFilter ( java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String ) ) ) ; break; default: throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.config.annotation.FilterType ) ) ; } } } return java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { try { return nullSafeArray ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getStringArray ( STRING ) , java.lang.String .class ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return new java.lang.String [ NUMBER ] ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.gemfire.config.annotation.TypeFilter> ( ) { java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> < TypeFilter > java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> = new java.util.HashSet<org.springframework.data.gemfire.config.annotation.TypeFilter> <> ( ) ; org . springframework . data . gemfire . org.springframework.data.gemfire.mapping . org.springframework.data.gemfire.mapping . Region . REGION_ANNOTATION_TYPES . forEach ( annotationType -> regionAnnotatedPersistentEntityTypeFilters . add ( new AnnotationTypeFilter ( annotationType ) ) ) ; return java.util.Set<org.springframework.data.gemfire.config.annotation.TypeFilter> ; }  <METHOD_END>
<METHOD_START> protected void void ( GemfirePersistentEntity org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity , boolean boolean , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) { BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( java.lang.Class<? extends org.springframework.data.gemfire.config.annotation.RegionLookupFactoryBean> ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity ) ) . addPropertyReference ( STRING , GemfireConstants . DEFAULT_GEMFIRE_CACHE_NAME ) . addPropertyValue ( STRING , false ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , boolean ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry . registerBeanDefinition ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity . getRegionName ( ) , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Class<? extends org.springframework.data.gemfire.config.annotation.RegionLookupFactoryBean> < ? extends RegionLookupFactoryBean > java.lang.Class<? extends org.springframework.data.gemfire.config.annotation.RegionLookupFactoryBean> ( GemfirePersistentEntity org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity ) { return java.util.Optional .< java.lang.Class<? extends org.springframework.data.gemfire.config.annotation.RegionLookupFactoryBean> < ? extends RegionLookupFactoryBean > > java.util.Optional<java.lang.Class<? extends org.springframework.data.gemfire.config.annotation.RegionLookupFactoryBean>> ( java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.Class<? extends org.springframework.data.gemfire.config.annotation.RegionLookupFactoryBean>> . get ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity . getRegionAnnotationType ( ) ) ) . orElse ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( GemfirePersistentEntity org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , boolean boolean ) { java.util.Optional . java.util.Optional ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity . getRegionAnnotation ( ) ) . ifPresent ( regionAnnotation -> { AnnotationAttributes regionAnnotationAttributes = getAnnotationAttributes ( regionAnnotation ) ; if ( strict ) { regionFactoryBeanBuilder . addPropertyValue ( STRING , resolveIdType ( persistentEntity ) ) ; regionFactoryBeanBuilder . addPropertyValue ( STRING , resolveDomainType ( persistentEntity ) ) ; } if ( regionAnnotationAttributes . containsKey ( STRING ) ) { String diskStoreName = regionAnnotationAttributes . getString ( STRING ) ; setPropertyValueIfNotDefault ( regionFactoryBeanBuilder , STRING , diskStoreName , STRING ) ; if ( StringUtils . hasText ( diskStoreName ) ) { regionFactoryBeanBuilder . addDependsOn ( diskStoreName ) ; } } if ( regionAnnotationAttributes . containsKey ( STRING ) ) { regionFactoryBeanBuilder . addPropertyValue ( STRING , regionAnnotationAttributes . getBoolean ( STRING ) ) ; } if ( regionAnnotationAttributes . containsKey ( STRING ) ) { setPropertyValueIfNotDefault ( regionFactoryBeanBuilder , STRING , regionAnnotationAttributes . getBoolean ( STRING ) , false ) ; } BeanDefinitionBuilder regionAttributesFactoryBeanBuilder = resolveRegionAttributesFactoryBeanBuilder ( regionAnnotation , regionFactoryBeanBuilder ) ; if ( regionAnnotationAttributes . containsKey ( STRING ) ) { setPropertyValueIfNotDefault ( regionAttributesFactoryBeanBuilder , STRING , regionAnnotationAttributes . getBoolean ( STRING ) , true ) ; } if ( regionAnnotationAttributes . containsKey ( STRING ) ) { setPropertyValueIfNotDefault ( regionAttributesFactoryBeanBuilder , STRING , regionAnnotationAttributes . getBoolean ( STRING ) , false ) ; } setClientRegionAttributes ( regionAnnotationAttributes , regionFactoryBeanBuilder ) ; setPartitionRegionAttributes ( regionAnnotationAttributes , regionFactoryBeanBuilder , regionAttributesFactoryBeanBuilder ) ; setReplicateRegionAttributes ( regionAnnotationAttributes , regionFactoryBeanBuilder ) ; } ) ; return org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( GemfirePersistentEntity org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity ) { return java.util.Optional . java.util.Optional ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity . getType ( ) ) . orElse ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Class<?> < ? > java.lang.Class<?> ( GemfirePersistentEntity org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity ) { return ( java.lang.Class<?> < ? > ) org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity . getIdProperty ( ) . map ( idProperty -> ( ( GemfirePersistentProperty ) idProperty ) . getActualType ( ) ) . orElse ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( java.lang.annotation.Annotation java.lang.annotation.Annotation , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) { BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder = org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; if ( ! ClientRegion .class . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ) { org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( RegionAttributesFactoryBean .class ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } return org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) { if ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) ) { org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getString ( STRING ) , null ) ; } if ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) ) { org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getEnum ( STRING ) , ClientRegionShortcut . PROXY ) ; } return org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) { if ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) ) { BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( PartitionAttributesFactoryBean .class ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getString ( STRING ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , java.lang.String , STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addDependsOn ( java.lang.String ) ; } org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getString ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< java.lang.Integer > getNumber ( STRING ) , NUMBER ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } return org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) { PartitionRegion . PartitionRegion [] PartitionRegion.FixedPartition[] = nullSafeArray ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getAnnotationArray ( STRING , PartitionRegion . PartitionRegion .class ) , PartitionRegion . PartitionRegion .class ) ; if ( ! ObjectUtils . isEmpty ( PartitionRegion.FixedPartition[] ) ) { ManagedList < BeanDefinition > org.springframework.data.gemfire.config.annotation.ManagedList<org.springframework.data.gemfire.config.annotation.BeanDefinition> = new ManagedList < BeanDefinition > ( fixedPartitions . length ) ; for ( PartitionRegion . PartitionRegion PartitionRegion.FixedPartition : PartitionRegion.FixedPartition[] ) { BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( FixedPartitionAttributesFactoryBean .class ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , PartitionRegion.FixedPartition . name ( ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , PartitionRegion.FixedPartition . primary ( ) , false ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , PartitionRegion.FixedPartition . numBuckets ( ) , NUMBER ) ; org.springframework.data.gemfire.config.annotation.ManagedList<org.springframework.data.gemfire.config.annotation.BeanDefinition> . add ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.gemfire.config.annotation.ManagedList<org.springframework.data.gemfire.config.annotation.BeanDefinition> ) ; } return org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes , BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) { if ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) ) { org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , STRING , org.springframework.data.gemfire.config.annotation.AnnotationAttributes .< ScopeType > getEnum ( STRING ) . getScope ( ) , ScopeType . DISTRIBUTED_NO_ACK ) ; } return org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return ( StringUtils . hasText ( java.lang.String ) ? org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyReference ( java.lang.String , java.lang.String ) : org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ( BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder , java.lang.String java.lang.String , T T , T T ) { return ( T != null && ! T . boolean ( T ) ? org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , T ) : org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry , GemfirePersistentEntity < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> ) { return org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> ; }  <METHOD_END>
