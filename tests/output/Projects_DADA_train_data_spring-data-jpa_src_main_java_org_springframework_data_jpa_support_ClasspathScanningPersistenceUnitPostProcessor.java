<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( ResourceLoader org.springframework.data.jpa.support.ResourceLoader ) { Assert . notNull ( org.springframework.data.jpa.support.ResourceLoader , STRING ) ; this . org.springframework.data.jpa.support.ResourcePatternResolver = ResourcePatternUtils . getResourcePatternResolver ( org.springframework.data.jpa.support.ResourceLoader ) ; this . org.springframework.data.jpa.support.ResourceLoader = org.springframework.data.jpa.support.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.data.jpa.support.Environment ) { Assert . notNull ( org.springframework.data.jpa.support.Environment , STRING ) ; this . org.springframework.data.jpa.support.Environment = org.springframework.data.jpa.support.Environment ; }  <METHOD_END>
<METHOD_START> public void void ( MutablePersistenceUnitInfo org.springframework.data.jpa.support.MutablePersistenceUnitInfo ) { ClassPathScanningCandidateComponentProvider org.springframework.data.jpa.support.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.data.jpa.support.ClassPathScanningCandidateComponentProvider . setEnvironment ( org.springframework.data.jpa.support.Environment ) ; org.springframework.data.jpa.support.ClassPathScanningCandidateComponentProvider . setResourceLoader ( org.springframework.data.jpa.support.ResourceLoader ) ; org.springframework.data.jpa.support.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Entity .class ) ) ; org.springframework.data.jpa.support.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( MappedSuperclass .class ) ) ; for ( BeanDefinition org.springframework.data.jpa.support.BeanDefinition : org.springframework.data.jpa.support.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ) { org.springframework.data.jpa.support.Logger . debug ( STRING , org.springframework.data.jpa.support.BeanDefinition . getBeanClassName ( ) ) ; org.springframework.data.jpa.support.MutablePersistenceUnitInfo . addManagedClassName ( org.springframework.data.jpa.support.BeanDefinition . getBeanClassName ( ) ) ; } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ( ) ) { org.springframework.data.jpa.support.Logger . debug ( STRING , java.lang.String ) ; org.springframework.data.jpa.support.MutablePersistenceUnitInfo . addMappingFileName ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; } char char = '/' ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( '.' , char ) ; java.lang.String java.lang.String = ResourcePatternResolver . CLASSPATH_ALL_URL_PREFIX + java.lang.String + char + java.lang.String ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; Resource [] org.springframework.data.jpa.support.Resource[] ; try { org.springframework.data.jpa.support.Resource[] = org.springframework.data.jpa.support.ResourcePatternResolver . getResources ( java.lang.String ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , java.io.IOException ) ; } for ( Resource org.springframework.data.jpa.support.Resource : org.springframework.data.jpa.support.Resource[] ) { try { java.lang.String java.lang.String = java.lang.String ( org.springframework.data.jpa.support.Resource . getURI ( ) ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( java.lang.String ) ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.jpa.support.Resource . toString ( ) ) , java.io.IOException ) ; } } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.net.URI java.net.URI ) throws java.io.IOException { if ( java.net.URI . boolean ( ) ) { java.lang.String java.lang.String = java.net.URI . java.lang.String ( ) ; if ( java.lang.String != null ) { int int = java.lang.String . int ( '!' ) ; if ( int > - NUMBER ) { return java.lang.String . java.lang.String ( int + NUMBER ) ; } } } return java.net.URI . java.lang.String ( ) ; }  <METHOD_END>
