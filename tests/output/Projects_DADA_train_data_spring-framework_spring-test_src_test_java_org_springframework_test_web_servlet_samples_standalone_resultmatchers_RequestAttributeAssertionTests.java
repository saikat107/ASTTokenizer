<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc = standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.resultmatchers.RequestAttributeAssertionTests.SimpleController ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . servletPath ( STRING ) ) . andExpect ( request ( ) . attribute ( HandlerMapping . BEST_MATCHING_PATTERN_ATTRIBUTE , STRING ) ) . andExpect ( request ( ) . attribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ) . andExpect ( request ( ) . attribute ( HandlerMapping . BEST_MATCHING_PATTERN_ATTRIBUTE , equalTo ( STRING ) ) ) . andExpect ( request ( ) . attribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = HandlerMapping . PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( request ( ) . attribute ( java.lang.String , hasItem ( MediaType . APPLICATION_JSON ) ) ) . andExpect ( request ( ) . attribute ( java.lang.String , not ( hasItem ( MediaType . APPLICATION_XML ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
