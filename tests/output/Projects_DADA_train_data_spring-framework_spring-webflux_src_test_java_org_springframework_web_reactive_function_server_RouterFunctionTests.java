<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> ServerResponse . ok ( ) . build ( ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> Mono . empty ( ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> Mono . just ( handlerFunction ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> . and ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; Mono < HandlerFunction < ServerResponse > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> = org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> . route ( org.springframework.web.reactive.function.server.MockServerRequest ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> ) . expectNext ( org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> ServerResponse . ok ( ) . body ( fromObject ( STRING ) ) ; RouterFunction < ? > org.springframework.web.reactive.function.server.RouterFunction<?> = request -> Mono . empty ( ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> Mono . just ( handlerFunction ) ; RouterFunction < ? > org.springframework.web.reactive.function.server.RouterFunction<?> = org.springframework.web.reactive.function.server.RouterFunction<> . andOther ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.RouterFunction<> ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; Mono < ? extends HandlerFunction < ? > > org.springframework.web.reactive.function.server.Mono<? extends org.springframework.web.reactive.function.server.HandlerFunction<?>> = org.springframework.web.reactive.function.server.RouterFunction<> . route ( org.springframework.web.reactive.function.server.MockServerRequest ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<> ) . expectNextMatches ( o -> o . equals ( handlerFunction ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> Mono . empty ( ) ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = request -> true ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> . andRoute ( org.springframework.web.reactive.function.server.RequestPredicate , this :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; Mono < ? extends HandlerFunction < ? > > org.springframework.web.reactive.function.server.Mono<? extends org.springframework.web.reactive.function.server.HandlerFunction<?>> = org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> . route ( org.springframework.web.reactive.function.server.MockServerRequest ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<> ) . expectNextCount ( NUMBER ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < java.lang.String > org.springframework.web.reactive.function.server.Mono<java.lang.String> = Mono . just ( STRING ) ; HandlerFunction < EntityResponse < Mono < java.lang.String > > > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.String>>> = request -> EntityResponse . fromPublisher ( stringMono , String .class ) . build ( ) ; RouterFunction < EntityResponse < Mono < java.lang.String > > > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.String>>> = request -> Mono . just ( handlerFunction ) ; HandlerFilterFunction < EntityResponse < Mono < java.lang.String > > , EntityResponse < Mono < java.lang.Integer > > > org.springframework.web.reactive.function.server.HandlerFilterFunction<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.String>>,org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.Integer>>> = ( request , next ) -> next . handle ( request ) . then ( response -> { Mono < Integer > intMono = response . entity ( ) . map ( Integer :: parseInt ) ; return EntityResponse . fromPublisher ( intMono , Integer .class ) . build ( ) ; } ) ; RouterFunction < EntityResponse < Mono < java.lang.Integer > > > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.Integer>>> = org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.String>>> . filter ( org.springframework.web.reactive.function.server.HandlerFilterFunction<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.String>>,org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.Integer>>> ) ; assertNotNull ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.Integer>>> ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; Mono < EntityResponse < Mono < java.lang.Integer > > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.Integer>>> = org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.Integer>>> . route ( org.springframework.web.reactive.function.server.MockServerRequest ) . then ( hf -> hf . handle ( request ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.EntityResponse<org.springframework.web.reactive.function.server.Mono<java.lang.Integer>>> ) . consumeNextWith ( serverResponse -> { StepVerifier . create ( serverResponse . entity ( ) ) . expectNext ( NUMBER ) . expectComplete ( ) . verify ( ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { return ServerResponse . ok ( ) . body ( fromObject ( STRING ) ) ; }  <METHOD_END>
