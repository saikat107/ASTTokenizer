<METHOD_START> @ Before public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.integration.monitor.GenericApplicationContext = TestUtils . createTestApplicationContext ( ) ; this . org.springframework.integration.monitor.ConfigurableListableBeanFactory = org.springframework.integration.monitor.GenericApplicationContext . getBeanFactory ( ) ; this . org.springframework.integration.monitor.MessageChannel = new NullChannel ( ) ; this . org.springframework.integration.monitor.IntegrationMBeanExporter = new IntegrationMBeanExporter ( ) ; this . org.springframework.integration.monitor.IntegrationMBeanExporter . setApplicationContext ( org.springframework.integration.monitor.GenericApplicationContext ) ; this . org.springframework.integration.monitor.IntegrationMBeanExporter . setBeanFactory ( this . org.springframework.integration.monitor.ConfigurableListableBeanFactory ) ; this . org.springframework.integration.monitor.IntegrationMBeanExporter . setBeanClassLoader ( ClassUtils . getDefaultClassLoader ( ) ) ; this . org.springframework.integration.monitor.IntegrationMBeanExporter . afterPropertiesSet ( ) ; this . org.springframework.integration.monitor.MessageHandler = new org.springframework.integration.monitor.MessageMetricsAdviceTests.DummyHandler ( ) ; org.springframework.integration.monitor.GenericApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.MessageMetricsAdviceTests.DummyInterceptor org.springframework.integration.monitor.MessageMetricsAdviceTests.DummyInterceptor = new org.springframework.integration.monitor.MessageMetricsAdviceTests.DummyInterceptor ( ) ; NameMatchMethodPointcutAdvisor org.springframework.integration.monitor.NameMatchMethodPointcutAdvisor = new NameMatchMethodPointcutAdvisor ( org.springframework.integration.monitor.MessageMetricsAdviceTests.DummyInterceptor ) ; org.springframework.integration.monitor.NameMatchMethodPointcutAdvisor . addMethodName ( STRING ) ; ProxyFactory org.springframework.integration.monitor.ProxyFactory = new ProxyFactory ( this . org.springframework.integration.monitor.MessageHandler ) ; org.springframework.integration.monitor.ProxyFactory . addAdvisor ( org.springframework.integration.monitor.NameMatchMethodPointcutAdvisor ) ; MessageHandler org.springframework.integration.monitor.MessageHandler = ( MessageHandler ) org.springframework.integration.monitor.ProxyFactory . getProxy ( ) ; this . org.springframework.integration.monitor.ConfigurableListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.monitor.MessageHandler ) ; this . org.springframework.integration.monitor.ConfigurableListableBeanFactory . initializeBean ( org.springframework.integration.monitor.MessageHandler , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter . afterSingletonsInstantiated ( ) ; MessageHandler org.springframework.integration.monitor.MessageHandler = this . org.springframework.integration.monitor.ConfigurableListableBeanFactory . getBean ( STRING , MessageHandler .class ) ; org.springframework.integration.monitor.MessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.monitor.MessageMetricsAdviceTests.DummyInterceptor org.springframework.integration.monitor.MessageMetricsAdviceTests.DummyInterceptor = new org.springframework.integration.monitor.MessageMetricsAdviceTests.DummyInterceptor ( ) ; NameMatchMethodPointcutAdvisor org.springframework.integration.monitor.NameMatchMethodPointcutAdvisor = new NameMatchMethodPointcutAdvisor ( org.springframework.integration.monitor.MessageMetricsAdviceTests.DummyInterceptor ) ; org.springframework.integration.monitor.NameMatchMethodPointcutAdvisor . addMethodName ( STRING ) ; ProxyFactory org.springframework.integration.monitor.ProxyFactory = new ProxyFactory ( org.springframework.integration.monitor.MessageChannel ) ; org.springframework.integration.monitor.ProxyFactory . addAdvisor ( org.springframework.integration.monitor.NameMatchMethodPointcutAdvisor ) ; MessageChannel org.springframework.integration.monitor.MessageChannel = ( MessageChannel ) org.springframework.integration.monitor.ProxyFactory . getProxy ( ) ; this . org.springframework.integration.monitor.ConfigurableListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.monitor.MessageChannel ) ; this . org.springframework.integration.monitor.ConfigurableListableBeanFactory . initializeBean ( org.springframework.integration.monitor.MessageChannel , STRING ) ; org.springframework.integration.monitor.IntegrationMBeanExporter . afterSingletonsInstantiated ( ) ; MessageChannel org.springframework.integration.monitor.MessageChannel = this . org.springframework.integration.monitor.ConfigurableListableBeanFactory . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.monitor.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.monitor.Message<?> ) throws org.springframework.integration.monitor.MessagingException { boolean = true ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.integration.monitor.MethodInvocation ) throws java.lang.Throwable { boolean = true ; return org.springframework.integration.monitor.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return super. java.lang.String ( ) + STRING + STRING + boolean + '}' ; }  <METHOD_END>
