<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext != null ) { this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; ( ( AnnotationConfigWebApplicationContext ) this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext ) . register ( SpringDataWebAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext . refresh ( ) ; ( ( AnnotationConfigWebApplicationContext ) this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext ) . setServletContext ( new MockServletContext ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.data.web.PageableHandlerMethodArgumentResolver> < java.lang.String , PageableHandlerMethodArgumentResolver > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.data.web.PageableHandlerMethodArgumentResolver> = this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext . getBeansOfType ( PageableHandlerMethodArgumentResolver .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.data.web.PageableHandlerMethodArgumentResolver> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( ) ; ( ( AnnotationConfigApplicationContext ) this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext ) . register ( SpringDataWebAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.data.web.PageableHandlerMethodArgumentResolver> < java.lang.String , PageableHandlerMethodArgumentResolver > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.data.web.PageableHandlerMethodArgumentResolver> = this . org.springframework.boot.autoconfigure.data.web.ConfigurableApplicationContext . getBeansOfType ( PageableHandlerMethodArgumentResolver .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.data.web.PageableHandlerMethodArgumentResolver> ) . isEmpty ( ) ; }  <METHOD_END>
