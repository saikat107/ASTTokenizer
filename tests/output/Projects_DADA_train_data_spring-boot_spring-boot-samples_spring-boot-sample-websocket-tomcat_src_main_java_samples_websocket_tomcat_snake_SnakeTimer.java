<METHOD_START> public static void void ( Snake samples.websocket.tomcat.snake.Snake ) { synchronized ( java.lang.Object ) { if ( java.util.concurrent.ConcurrentHashMap<java.lang.Integer,samples.websocket.tomcat.snake.Snake> . isEmpty ( ) ) { void ( ) ; } java.util.concurrent.ConcurrentHashMap<java.lang.Integer,samples.websocket.tomcat.snake.Snake> . put ( java.lang.Integer . java.lang.Integer ( samples.websocket.tomcat.snake.Snake . getId ( ) ) , samples.websocket.tomcat.snake.Snake ) ; } }  <METHOD_END>
<METHOD_START> public static java.util.Collection<samples.websocket.tomcat.snake.Snake> < Snake > java.util.Collection<samples.websocket.tomcat.snake.Snake> ( ) { return java.util.Collections . java.util.Collection ( java.util.concurrent.ConcurrentHashMap<java.lang.Integer,samples.websocket.tomcat.snake.Snake> . values ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Snake samples.websocket.tomcat.snake.Snake ) { synchronized ( java.lang.Object ) { java.util.concurrent.ConcurrentHashMap<java.lang.Integer,samples.websocket.tomcat.snake.Snake> . remove ( java.lang.Integer . java.lang.Integer ( samples.websocket.tomcat.snake.Snake . getId ( ) ) ) ; if ( java.util.concurrent.ConcurrentHashMap<java.lang.Integer,samples.websocket.tomcat.snake.Snake> . isEmpty ( ) ) { void ( ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( ) java.lang.Exception { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.util.Iterator<samples.websocket.tomcat.snake.Snake> < Snake > java.util.Iterator<samples.websocket.tomcat.snake.Snake> = samples.websocket.tomcat.snake.SnakeTimer . java.util.Collection<samples.websocket.tomcat.snake.Snake> ( ) . iterator ( ) ; java.util.Iterator<samples.websocket.tomcat.snake.Snake> . hasNext ( ) ;) { Snake samples.websocket.tomcat.snake.Snake = java.util.Iterator<samples.websocket.tomcat.snake.Snake> . next ( ) ; samples.websocket.tomcat.snake.Snake . update ( samples.websocket.tomcat.snake.SnakeTimer . java.util.Collection<samples.websocket.tomcat.snake.Snake> ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( samples.websocket.tomcat.snake.Snake . getLocationsJson ( ) ) ; if ( java.util.Iterator<samples.websocket.tomcat.snake.Snake> . hasNext ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( ',' ) ; } } void ( java.lang.String . java.lang.String ( STRING , java.lang.StringBuilder . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String ) throws java.lang.Exception { java.util.Collection<samples.websocket.tomcat.snake.Snake> < Snake > java.util.Collection<samples.websocket.tomcat.snake.Snake> = new java.util.concurrent.CopyOnWriteArrayList <> ( samples.websocket.tomcat.snake.SnakeTimer . java.util.Collection<samples.websocket.tomcat.snake.Snake> ( ) ) ; for ( Snake samples.websocket.tomcat.snake.Snake : java.util.Collection<samples.websocket.tomcat.snake.Snake> ) { try { samples.websocket.tomcat.snake.Snake . sendMessage ( java.lang.String ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( samples.websocket.tomcat.snake.Snake ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( ) { java.util.Timer = new java.util.Timer ( samples.websocket.tomcat.snake.SnakeTimer .class . java.lang.String ( ) + STRING ) ; java.util.Timer . void ( new java.util.TimerTask ( ) { @ java.lang.Override public void void ( ) { try { void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { samples.websocket.tomcat.snake.Log . error ( STRING , java.lang.Throwable ) ; } } } , long , long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { samples.websocket.tomcat.snake.Log . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( ) { if ( java.util.Timer != null ) { java.util.Timer . void ( ) ; } }  <METHOD_END>
