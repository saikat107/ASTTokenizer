<METHOD_START> public void ( MockHttpServletRequest org.springframework.test.web.servlet.MockHttpServletRequest , MockHttpServletResponse org.springframework.test.web.servlet.MockHttpServletResponse ) { this . org.springframework.test.web.servlet.MockHttpServletRequest = org.springframework.test.web.servlet.MockHttpServletRequest ; this . org.springframework.test.web.servlet.MockHttpServletResponse = org.springframework.test.web.servlet.MockHttpServletResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.MockHttpServletRequest org.springframework.test.web.servlet.MockHttpServletRequest ( ) { return this . org.springframework.test.web.servlet.MockHttpServletRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.MockHttpServletResponse org.springframework.test.web.servlet.MockHttpServletResponse ( ) { return this . org.springframework.test.web.servlet.MockHttpServletResponse ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( HandlerInterceptor ... org.springframework.test.web.servlet.HandlerInterceptor[] ) { this . org.springframework.test.web.servlet.HandlerInterceptor[] = org.springframework.test.web.servlet.HandlerInterceptor[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.HandlerInterceptor [] org.springframework.test.web.servlet.HandlerInterceptor[] ( ) { return this . org.springframework.test.web.servlet.HandlerInterceptor[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Exception java.lang.Exception ) { this . java.lang.Exception = java.lang.Exception ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Exception java.lang.Exception ( ) { return this . java.lang.Exception ; }  <METHOD_END>
<METHOD_START> public void void ( ModelAndView org.springframework.test.web.servlet.ModelAndView ) { this . org.springframework.test.web.servlet.ModelAndView = org.springframework.test.web.servlet.ModelAndView ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.ModelAndView org.springframework.test.web.servlet.ModelAndView ( ) { return this . org.springframework.test.web.servlet.ModelAndView ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.FlashMap org.springframework.test.web.servlet.FlashMap ( ) { return RequestContextUtils . getOutputFlashMap ( this . org.springframework.test.web.servlet.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.util.concurrent.atomic.AtomicReference<java.lang.Object> . void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return java.lang.Object ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( long long ) { if ( this . org.springframework.test.web.servlet.MockHttpServletRequest . getAsyncContext ( ) != null ) { long = ( long == - NUMBER ? this . org.springframework.test.web.servlet.MockHttpServletRequest . getAsyncContext ( ) . getTimeout ( ) : long ) ; } if ( long > NUMBER ) { long long = java.lang.System . long ( ) + long ; while ( java.lang.System . long ( ) < long && this . java.util.concurrent.atomic.AtomicReference<java.lang.Object> . java.lang.Object ( ) == java.lang.Object ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.IllegalStateException ( STRING + STRING + this . java.lang.Object + STRING , java.lang.InterruptedException ) ; } } } java.lang.Object java.lang.Object = this . java.util.concurrent.atomic.AtomicReference<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object == java.lang.Object ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.Object + STRING + STRING + long ) ; } return java.lang.Object ; }  <METHOD_END>
