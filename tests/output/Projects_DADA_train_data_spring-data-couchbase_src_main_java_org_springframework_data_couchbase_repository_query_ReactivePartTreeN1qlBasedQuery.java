<METHOD_START> public void ( CouchbaseQueryMethod org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , RxJavaCouchbaseOperations org.springframework.data.couchbase.repository.query.RxJavaCouchbaseOperations ) { super( org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.query.RxJavaCouchbaseOperations ); this . org.springframework.data.couchbase.repository.query.PartTree = new PartTree ( org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod . getName ( ) , org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod . getEntityInformation ( ) . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.JsonValue org.springframework.data.couchbase.repository.query.JsonValue ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor ) { return JsonArray . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.Statement org.springframework.data.couchbase.repository.query.Statement ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor , java.lang.Object [] java.lang.Object[] , ReturnedType org.springframework.data.couchbase.repository.query.ReturnedType ) { java.lang.String java.lang.String = getCouchbaseOperations ( ) . getCouchbaseBucket ( ) . name ( ) ; Expression org.springframework.data.couchbase.repository.query.Expression = N1qlUtils . escapedBucket ( java.lang.String ) ; FromPath org.springframework.data.couchbase.repository.query.FromPath ; if ( org.springframework.data.couchbase.repository.query.PartTree . isCountProjection ( ) ) { org.springframework.data.couchbase.repository.query.FromPath = select ( count ( STRING ) ) ; } else { org.springframework.data.couchbase.repository.query.FromPath = N1qlUtils . createSelectClauseForEntity ( java.lang.String , org.springframework.data.couchbase.repository.query.ReturnedType , this . getCouchbaseOperations ( ) . getConverter ( ) ) ; } WherePath org.springframework.data.couchbase.repository.query.WherePath = org.springframework.data.couchbase.repository.query.FromPath . from ( org.springframework.data.couchbase.repository.query.Expression ) ; N1qlQueryCreator org.springframework.data.couchbase.repository.query.N1qlQueryCreator = new N1qlQueryCreator ( org.springframework.data.couchbase.repository.query.PartTree , org.springframework.data.couchbase.repository.query.ParameterAccessor , org.springframework.data.couchbase.repository.query.WherePath , getCouchbaseOperations ( ) . getConverter ( ) , getQueryMethod ( ) ) ; LimitPath org.springframework.data.couchbase.repository.query.LimitPath = org.springframework.data.couchbase.repository.query.N1qlQueryCreator . createQuery ( ) ; if ( org.springframework.data.couchbase.repository.query.PartTree . isLimiting ( ) ) { return org.springframework.data.couchbase.repository.query.LimitPath . limit ( org.springframework.data.couchbase.repository.query.PartTree . getMaxResults ( ) ) ; } else { return org.springframework.data.couchbase.repository.query.LimitPath ; } }  <METHOD_END>
