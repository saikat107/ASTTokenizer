<METHOD_START> public void ( ConversionService org.springframework.messaging.handler.annotation.support.ConversionService , ConfigurableBeanFactory org.springframework.messaging.handler.annotation.support.ConfigurableBeanFactory ) { super( org.springframework.messaging.handler.annotation.support.ConversionService , org.springframework.messaging.handler.annotation.support.ConfigurableBeanFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter ) { return org.springframework.messaging.handler.annotation.support.MethodParameter . hasParameterAnnotation ( Header .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.handler.annotation.support.NamedValueInfo org.springframework.messaging.handler.annotation.support.NamedValueInfo ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter ) { Header org.springframework.messaging.handler.annotation.support.Header = org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterAnnotation ( Header .class ) ; return new org.springframework.messaging.handler.annotation.support.HeaderMethodArgumentResolver.HeaderNamedValueInfo ( org.springframework.messaging.handler.annotation.support.Header ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter , Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> , java.lang.String java.lang.String )			throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.messaging.handler.annotation.support.Message<> . getHeaders ( ) . get ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.messaging.handler.annotation.support.Message<> , java.lang.String ) ; if ( java.lang.Object != null && java.lang.Object != null ) { if ( org.springframework.messaging.handler.annotation.support.Log . isWarnEnabled ( ) ) { org.springframework.messaging.handler.annotation.support.Log . warn ( STRING + java.lang.String + STRING + STRING + STRING + STRING ) ; } } return ( java.lang.Object != null ? java.lang.Object : java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> , java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( org.springframework.messaging.handler.annotation.support.Message<> ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( STRING . int ( ) ) ; } if ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> == null || ! java.util.Map<java.lang.String,java.util.List<java.lang.String>> . boolean ( java.lang.String ) ) { return null ; } java.util.List<?> < ? > java.util.List<?> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String ) ; return ( java.util.List<> . int ( ) == NUMBER ? java.util.List<> . get ( NUMBER ) : java.util.List<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> ) { return ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ) org.springframework.messaging.handler.annotation.support.Message<> . getHeaders ( ) . get ( NativeMessageHeaderAccessor . NATIVE_HEADERS ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter , Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> ) { throw new MessageHandlingException ( org.springframework.messaging.handler.annotation.support.Message<> , STRING + java.lang.String + STRING + org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterType ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> private void ( Header org.springframework.messaging.handler.annotation.support.Header ) { super( org.springframework.messaging.handler.annotation.support.Header . name ( ) , org.springframework.messaging.handler.annotation.support.Header . required ( ) , org.springframework.messaging.handler.annotation.support.Header . defaultValue ( ) ); }  <METHOD_END>
