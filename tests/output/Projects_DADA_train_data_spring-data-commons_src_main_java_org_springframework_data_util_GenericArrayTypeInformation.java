<METHOD_START> protected void ( java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType , TypeDiscoverer < ? > org.springframework.data.util.TypeDiscoverer<?> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) { super( java.lang.reflect.GenericArrayType , org.springframework.data.util.TypeDiscoverer<> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ); this . java.lang.reflect.GenericArrayType = java.lang.reflect.GenericArrayType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Class<S> < S > java.lang.Class<S> ( ) { return ( java.lang.Class<S> < S > ) java.lang.reflect.Array . java.lang.Object ( resolveType ( java.lang.reflect.GenericArrayType . java.lang.reflect.Type ( ) ) , NUMBER ) . getClass ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> ( ) { java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.GenericArrayType . java.lang.reflect.Type ( ) ; return java.util.Optional . java.util.Optional ( createInfo ( java.lang.reflect.Type ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.reflect.GenericArrayType . java.lang.String ( ) ; }  <METHOD_END>
