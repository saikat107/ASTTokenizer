<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.client.MockWebServer = new MockWebServer ( ) ; this . org.springframework.web.client.MockWebServer . setDispatcher ( new org.springframework.web.client.AbstractMockWebServerTestCase.TestDispatcher ( ) ) ; this . org.springframework.web.client.MockWebServer . start ( ) ; this . int = this . org.springframework.web.client.MockWebServer . getPort ( ) ; this . java.lang.String = STRING + this . int ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { this . org.springframework.web.client.MockWebServer . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.client.MockResponse org.springframework.web.client.MockResponse ( RecordedRequest org.springframework.web.client.RecordedRequest , byte [] byte[] , java.lang.String java.lang.String ) { if ( org.springframework.web.client.RecordedRequest . getMethod ( ) . equals ( STRING ) ) { return new MockResponse ( ) . setResponseCode ( NUMBER ) . setHeader ( STRING , STRING ) ; } Buffer org.springframework.web.client.Buffer = new Buffer ( ) ; org.springframework.web.client.Buffer . write ( byte[] ) ; MockResponse org.springframework.web.client.MockResponse = new MockResponse ( ) . setHeader ( STRING , byte[] . int ) . setBody ( org.springframework.web.client.Buffer ) . setResponseCode ( NUMBER ) ; if ( java.lang.String != null ) { org.springframework.web.client.MockResponse = org.springframework.web.client.MockResponse . setHeader ( STRING , java.lang.String ) ; } return org.springframework.web.client.MockResponse ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.client.MockResponse org.springframework.web.client.MockResponse ( RecordedRequest org.springframework.web.client.RecordedRequest , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , byte [] byte[] ) { assertEquals ( NUMBER , org.springframework.web.client.RecordedRequest . getHeaders ( ) . values ( STRING ) . size ( ) ) ; assertTrue ( STRING , java.lang.Integer . int ( org.springframework.web.client.RecordedRequest . getHeader ( STRING ) ) > NUMBER ) ; java.lang.String java.lang.String = org.springframework.web.client.RecordedRequest . getHeader ( STRING ) ; assertNotNull ( STRING , java.lang.String ) ; java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.StandardCharsets . java.nio.charset.Charset ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String[] ( STRING ) [ NUMBER ] ; java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ; } assertEquals ( STRING , java.lang.String , org.springframework.web.client.RecordedRequest . getBody ( ) . readString ( java.nio.charset.Charset ) ) ; Buffer org.springframework.web.client.Buffer = new Buffer ( ) ; org.springframework.web.client.Buffer . write ( byte[] ) ; return new MockResponse ( ) . setHeader ( STRING , java.lang.String + java.lang.String ) . setHeader ( STRING , java.lang.String ) . setHeader ( STRING , byte[] . int ) . setBody ( org.springframework.web.client.Buffer ) . setResponseCode ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.client.MockResponse org.springframework.web.client.MockResponse ( RecordedRequest org.springframework.web.client.RecordedRequest , java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( org.springframework.web.client.RecordedRequest . getBodySize ( ) > NUMBER ) { assertTrue ( STRING , java.lang.Integer . int ( org.springframework.web.client.RecordedRequest . getHeader ( STRING ) ) > NUMBER ) ; assertNotNull ( STRING , org.springframework.web.client.RecordedRequest . getHeader ( STRING ) ) ; } return new MockResponse ( ) . setHeader ( STRING , java.lang.String + java.lang.String ) . setHeader ( STRING , java.lang.String ) . setHeader ( STRING , org.springframework.web.client.RecordedRequest . getBody ( ) . size ( ) ) . setBody ( org.springframework.web.client.RecordedRequest . getBody ( ) ) . setResponseCode ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.client.MockResponse org.springframework.web.client.MockResponse ( RecordedRequest org.springframework.web.client.RecordedRequest ) { java.lang.String java.lang.String = org.springframework.web.client.RecordedRequest . getHeader ( STRING ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String[] ( STRING ) [ NUMBER ] ; Buffer org.springframework.web.client.Buffer = org.springframework.web.client.RecordedRequest . getBody ( ) ; try { void ( org.springframework.web.client.Buffer , STRING , java.lang.String , STRING , STRING , STRING ) ; void ( org.springframework.web.client.Buffer , STRING , java.lang.String , STRING , STRING , STRING ) ; void ( org.springframework.web.client.Buffer , STRING , java.lang.String , STRING , STRING , STRING ) ; void ( org.springframework.web.client.Buffer , STRING , java.lang.String , STRING , STRING , STRING ) ; } catch ( java.io.EOFException java.io.EOFException ) { throw new java.lang.IllegalStateException ( java.io.EOFException ) ; } return new MockResponse ( ) . setResponseCode ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( Buffer org.springframework.web.client.Buffer , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.EOFException { assertTrue ( org.springframework.web.client.Buffer . readUtf8Line ( ) . contains ( STRING + java.lang.String ) ) ; java.lang.String java.lang.String = org.springframework.web.client.Buffer . readUtf8Line ( ) ; assertTrue ( java.lang.String . boolean ( STRING + java.lang.String ) ) ; assertTrue ( java.lang.String . boolean ( STRING + java.lang.String + STRING ) ) ; assertTrue ( org.springframework.web.client.Buffer . readUtf8Line ( ) . startsWith ( STRING + java.lang.String ) ) ; assertTrue ( org.springframework.web.client.Buffer . readUtf8Line ( ) . equals ( STRING + java.lang.String . int ( ) ) ) ; assertTrue ( org.springframework.web.client.Buffer . readUtf8Line ( ) . equals ( STRING ) ) ; assertTrue ( org.springframework.web.client.Buffer . readUtf8Line ( ) . equals ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Buffer org.springframework.web.client.Buffer , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.EOFException { assertTrue ( org.springframework.web.client.Buffer . readUtf8Line ( ) . contains ( STRING + java.lang.String ) ) ; java.lang.String java.lang.String = org.springframework.web.client.Buffer . readUtf8Line ( ) ; assertTrue ( java.lang.String . boolean ( STRING + java.lang.String ) ) ; assertTrue ( java.lang.String . boolean ( STRING + java.lang.String + STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING + java.lang.String + STRING ) ) ; assertTrue ( org.springframework.web.client.Buffer . readUtf8Line ( ) . startsWith ( STRING + java.lang.String ) ) ; assertTrue ( org.springframework.web.client.Buffer . readUtf8Line ( ) . startsWith ( STRING ) ) ; assertTrue ( org.springframework.web.client.Buffer . readUtf8Line ( ) . equals ( STRING ) ) ; assertNotNull ( org.springframework.web.client.Buffer . readUtf8Line ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.client.MockResponse org.springframework.web.client.MockResponse ( RecordedRequest org.springframework.web.client.RecordedRequest ) { assertEquals ( STRING , org.springframework.web.client.RecordedRequest . getHeader ( STRING ) ) ; java.lang.String java.lang.String = org.springframework.web.client.RecordedRequest . getBody ( ) . readUtf8 ( ) ; assertThat ( java.lang.String , Matchers . containsString ( STRING ) ) ; assertThat ( java.lang.String , Matchers . containsString ( STRING ) ) ; assertThat ( java.lang.String , Matchers . containsString ( STRING ) ) ; return new MockResponse ( ) . setResponseCode ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.client.MockResponse org.springframework.web.client.MockResponse ( RecordedRequest org.springframework.web.client.RecordedRequest , java.lang.String java.lang.String , java.lang.String java.lang.String , byte [] byte[] ) { assertEquals ( STRING , org.springframework.web.client.RecordedRequest . getMethod ( ) ) ; assertTrue ( STRING , java.lang.Integer . int ( org.springframework.web.client.RecordedRequest . getHeader ( STRING ) ) > NUMBER ) ; java.lang.String java.lang.String = org.springframework.web.client.RecordedRequest . getHeader ( STRING ) ; assertNotNull ( STRING , java.lang.String ) ; java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.StandardCharsets . java.nio.charset.Charset ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String[] ( STRING ) [ NUMBER ] ; java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ; } assertEquals ( STRING , java.lang.String , org.springframework.web.client.RecordedRequest . getBody ( ) . readString ( java.nio.charset.Charset ) ) ; Buffer org.springframework.web.client.Buffer = new Buffer ( ) ; org.springframework.web.client.Buffer . write ( byte[] ) ; return new MockResponse ( ) . setResponseCode ( NUMBER ) . setHeader ( STRING , byte[] . int ) . setHeader ( STRING , java.lang.String ) . setBody ( org.springframework.web.client.Buffer ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.client.MockResponse org.springframework.web.client.MockResponse ( RecordedRequest org.springframework.web.client.RecordedRequest , java.lang.String java.lang.String ) { assertTrue ( STRING , java.lang.Integer . int ( org.springframework.web.client.RecordedRequest . getHeader ( STRING ) ) > NUMBER ) ; java.lang.String java.lang.String = org.springframework.web.client.RecordedRequest . getHeader ( STRING ) ; assertNotNull ( STRING , java.lang.String ) ; java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.StandardCharsets . java.nio.charset.Charset ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String[] ( STRING ) [ NUMBER ] ; java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ; } assertEquals ( STRING , java.lang.String , org.springframework.web.client.RecordedRequest . getBody ( ) . readString ( java.nio.charset.Charset ) ) ; return new MockResponse ( ) . setResponseCode ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.MockResponse org.springframework.web.client.MockResponse ( RecordedRequest org.springframework.web.client.RecordedRequest ) throws java.lang.InterruptedException { try { byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return org.springframework.web.client.MockResponse ( org.springframework.web.client.RecordedRequest , byte[] , org.springframework.web.client.MediaType . toString ( ) ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return org.springframework.web.client.MockResponse ( org.springframework.web.client.RecordedRequest , new byte [ NUMBER ] , org.springframework.web.client.MediaType . toString ( ) ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return org.springframework.web.client.MockResponse ( org.springframework.web.client.RecordedRequest , byte[] , null ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return org.springframework.web.client.MockResponse ( org.springframework.web.client.RecordedRequest , java.lang.String , STRING , org.springframework.web.client.MediaType . toString ( ) , byte[] ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return org.springframework.web.client.MockResponse ( org.springframework.web.client.RecordedRequest , STRING , STRING ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return new MockResponse ( ) . setResponseCode ( NUMBER ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return new MockResponse ( ) . setResponseCode ( NUMBER ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return new MockResponse ( ) . setResponseCode ( NUMBER ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return new MockResponse ( ) . setResponseCode ( NUMBER ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . contains ( STRING ) ) { return new MockResponse ( ) . setBody ( org.springframework.web.client.RecordedRequest . getPath ( ) ) . setHeader ( STRING , STRING ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return org.springframework.web.client.MockResponse ( org.springframework.web.client.RecordedRequest ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return org.springframework.web.client.MockResponse ( org.springframework.web.client.RecordedRequest ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return new MockResponse ( ) . setResponseCode ( NUMBER ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return org.springframework.web.client.MockResponse ( org.springframework.web.client.RecordedRequest , java.lang.String , org.springframework.web.client.MediaType . toString ( ) , byte[] ) ; } else if ( org.springframework.web.client.RecordedRequest . getPath ( ) . equals ( STRING ) ) { return org.springframework.web.client.MockResponse ( org.springframework.web.client.RecordedRequest , java.lang.String ) ; } return new MockResponse ( ) . setResponseCode ( NUMBER ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return new MockResponse ( ) . setResponseCode ( NUMBER ) . setBody ( java.lang.Throwable . java.lang.String ( ) ) ; } }  <METHOD_END>
