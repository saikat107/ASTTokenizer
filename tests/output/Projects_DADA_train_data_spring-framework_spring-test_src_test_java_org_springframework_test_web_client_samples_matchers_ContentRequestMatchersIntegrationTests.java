<METHOD_START> @ Before public void void ( ) { java.util.List<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; java.util.List<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; this . org.springframework.test.web.client.samples.matchers.RestTemplate = new RestTemplate ( ) ; this . org.springframework.test.web.client.samples.matchers.RestTemplate . setMessageConverters ( java.util.List<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> ) ; this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer = MockRestServiceServer . createServer ( this . org.springframework.test.web.client.samples.matchers.RestTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( content ( ) . contentType ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.samples.matchers.RestTemplate . put ( new java.net.URI ( STRING ) , new Person ( ) ) ; this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( content ( ) . contentType ( STRING ) ) . andRespond ( withSuccess ( ) ) ; try { this . org.springframework.test.web.client.samples.matchers.RestTemplate . put ( new java.net.URI ( STRING ) , STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { java.lang.String java.lang.String = java.lang.AssertionError . java.lang.String ( ) ; assertTrue ( java.lang.String , java.lang.String . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( content ( ) . string ( STRING ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.samples.matchers.RestTemplate . put ( new java.net.URI ( STRING ) , STRING ) ; this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( content ( ) . string ( startsWith ( STRING ) ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.samples.matchers.RestTemplate . put ( new java.net.URI ( STRING ) , STRING ) ; this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( content ( ) . bytes ( STRING . byte[] ( ) ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.samples.matchers.RestTemplate . put ( new java.net.URI ( STRING ) , STRING ) ; this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
