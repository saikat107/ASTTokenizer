<METHOD_START> public static java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.rmi.MethodInvocation , java.lang.Object java.lang.Object )			throws java.lang.reflect.InvocationTargetException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.remoting.rmi.MethodInvocation . getMethod ( ) ; try { if ( java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.Object ) ) { return java.lang.reflect.Method . java.lang.Object ( java.lang.Object , org.springframework.remoting.rmi.MethodInvocation . getArguments ( ) ) ; } else { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ; return java.lang.reflect.Method . java.lang.Object ( java.lang.Object , org.springframework.remoting.rmi.MethodInvocation . getArguments ( ) ) ; } } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new RemoteProxyFailureException ( STRING + java.lang.reflect.Method , java.lang.NoSuchMethodException ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new RemoteProxyFailureException ( STRING + java.lang.reflect.Method , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public static java.lang.Exception java.lang.Exception ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Throwable java.lang.Throwable , java.lang.String java.lang.String ) { if ( org.springframework.remoting.rmi.Log . isDebugEnabled ( ) ) { org.springframework.remoting.rmi.Log . debug ( java.lang.String , java.lang.Throwable ) ; } if ( ReflectionUtils . declaresException ( java.lang.reflect.Method , java.rmi.RemoteException .class ) ) { return new java.rmi.RemoteException ( java.lang.String , java.lang.Throwable ) ; } else { return new RemoteAccessException ( java.lang.String , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public static java.lang.Exception java.lang.Exception ( java.lang.reflect.Method java.lang.reflect.Method , java.rmi.RemoteException java.rmi.RemoteException , java.lang.String java.lang.String ) { return java.lang.Exception ( java.lang.reflect.Method , java.rmi.RemoteException , boolean ( java.rmi.RemoteException ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Exception java.lang.Exception ( java.lang.reflect.Method java.lang.reflect.Method , java.rmi.RemoteException java.rmi.RemoteException , boolean boolean , java.lang.String java.lang.String ) { if ( org.springframework.remoting.rmi.Log . isDebugEnabled ( ) ) { org.springframework.remoting.rmi.Log . debug ( STRING + java.lang.String + STRING , java.rmi.RemoteException ) ; } if ( ReflectionUtils . declaresException ( java.lang.reflect.Method , java.rmi.RemoteException . java.lang.Class<? extends java.rmi.RemoteException> ( ) ) ) { return java.rmi.RemoteException ; } else { if ( boolean ) { return new RemoteConnectFailureException ( STRING + java.lang.String + STRING , java.rmi.RemoteException ) ; } else { return new RemoteAccessException ( STRING + java.lang.String + STRING , java.rmi.RemoteException ) ; } } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.rmi.RemoteException java.rmi.RemoteException ) { return ( java.rmi.RemoteException instanceof java.rmi.ConnectException || java.rmi.RemoteException instanceof java.rmi.ConnectIOException || java.rmi.RemoteException instanceof java.rmi.UnknownHostException || java.rmi.RemoteException instanceof java.rmi.NoSuchObjectException || java.rmi.RemoteException instanceof java.rmi.StubNotFoundException || java.rmi.RemoteException . java.lang.Throwable ( ) instanceof java.net.SocketException ) ; }  <METHOD_END>
