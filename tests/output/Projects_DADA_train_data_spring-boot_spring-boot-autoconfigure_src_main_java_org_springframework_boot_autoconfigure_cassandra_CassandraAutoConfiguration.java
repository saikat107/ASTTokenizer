<METHOD_START> public void ( CassandraProperties org.springframework.boot.autoconfigure.cassandra.CassandraProperties , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.cassandra.ClusterBuilderCustomizer> < ClusterBuilderCustomizer > > org.springframework.boot.autoconfigure.cassandra.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.cassandra.ClusterBuilderCustomizer>> ) { this . org.springframework.boot.autoconfigure.cassandra.CassandraProperties = org.springframework.boot.autoconfigure.cassandra.CassandraProperties ; this . java.util.List<org.springframework.boot.autoconfigure.cassandra.ClusterBuilderCustomizer> = org.springframework.boot.autoconfigure.cassandra.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.cassandra.ClusterBuilderCustomizer>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.cassandra.Cluster org.springframework.boot.autoconfigure.cassandra.Cluster ( ) { CassandraProperties org.springframework.boot.autoconfigure.cassandra.CassandraProperties = this . org.springframework.boot.autoconfigure.cassandra.CassandraProperties ; Cluster . Cluster Cluster.Builder = Cluster . builder ( ) . withClusterName ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getClusterName ( ) ) . withPort ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getPort ( ) ) ; if ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getUsername ( ) != null ) { Cluster.Builder . withCredentials ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getUsername ( ) , org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getPassword ( ) ) ; } if ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getCompression ( ) != null ) { Cluster.Builder . withCompression ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getCompression ( ) ) ; } if ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getLoadBalancingPolicy ( ) != null ) { LoadBalancingPolicy org.springframework.boot.autoconfigure.cassandra.LoadBalancingPolicy = java.lang.Object ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getLoadBalancingPolicy ( ) ) ; Cluster.Builder . withLoadBalancingPolicy ( org.springframework.boot.autoconfigure.cassandra.LoadBalancingPolicy ) ; } Cluster.Builder . withQueryOptions ( org.springframework.boot.autoconfigure.cassandra.QueryOptions ( ) ) ; if ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getReconnectionPolicy ( ) != null ) { ReconnectionPolicy org.springframework.boot.autoconfigure.cassandra.ReconnectionPolicy = java.lang.Object ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getReconnectionPolicy ( ) ) ; Cluster.Builder . withReconnectionPolicy ( org.springframework.boot.autoconfigure.cassandra.ReconnectionPolicy ) ; } if ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getRetryPolicy ( ) != null ) { RetryPolicy org.springframework.boot.autoconfigure.cassandra.RetryPolicy = java.lang.Object ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getRetryPolicy ( ) ) ; Cluster.Builder . withRetryPolicy ( org.springframework.boot.autoconfigure.cassandra.RetryPolicy ) ; } Cluster.Builder . withSocketOptions ( org.springframework.boot.autoconfigure.cassandra.SocketOptions ( ) ) ; if ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . isSsl ( ) ) { Cluster.Builder . withSSL ( ) ; } java.lang.String java.lang.String = org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getContactPoints ( ) ; Cluster.Builder . addContactPoints ( StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ) ; void ( Cluster.Builder ) ; return Cluster.Builder . build ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( Cluster . Cluster Cluster.Builder ) { if ( this . java.util.List<org.springframework.boot.autoconfigure.cassandra.ClusterBuilderCustomizer> != null ) { for ( ClusterBuilderCustomizer org.springframework.boot.autoconfigure.cassandra.ClusterBuilderCustomizer : this . java.util.List<org.springframework.boot.autoconfigure.cassandra.ClusterBuilderCustomizer> ) { org.springframework.boot.autoconfigure.cassandra.ClusterBuilderCustomizer . customize ( Cluster.Builder ) ; } } }  <METHOD_END>
<METHOD_START> public static < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { return BeanUtils . instantiateClass ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.cassandra.QueryOptions org.springframework.boot.autoconfigure.cassandra.QueryOptions ( ) { QueryOptions org.springframework.boot.autoconfigure.cassandra.QueryOptions = new QueryOptions ( ) ; CassandraProperties org.springframework.boot.autoconfigure.cassandra.CassandraProperties = this . org.springframework.boot.autoconfigure.cassandra.CassandraProperties ; if ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getConsistencyLevel ( ) != null ) { org.springframework.boot.autoconfigure.cassandra.QueryOptions . setConsistencyLevel ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getConsistencyLevel ( ) ) ; } if ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getSerialConsistencyLevel ( ) != null ) { org.springframework.boot.autoconfigure.cassandra.QueryOptions . setSerialConsistencyLevel ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getSerialConsistencyLevel ( ) ) ; } org.springframework.boot.autoconfigure.cassandra.QueryOptions . setFetchSize ( org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getFetchSize ( ) ) ; return org.springframework.boot.autoconfigure.cassandra.QueryOptions ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.cassandra.SocketOptions org.springframework.boot.autoconfigure.cassandra.SocketOptions ( ) { SocketOptions org.springframework.boot.autoconfigure.cassandra.SocketOptions = new SocketOptions ( ) ; org.springframework.boot.autoconfigure.cassandra.SocketOptions . setConnectTimeoutMillis ( this . org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getConnectTimeoutMillis ( ) ) ; org.springframework.boot.autoconfigure.cassandra.SocketOptions . setReadTimeoutMillis ( this . org.springframework.boot.autoconfigure.cassandra.CassandraProperties . getReadTimeoutMillis ( ) ) ; return org.springframework.boot.autoconfigure.cassandra.SocketOptions ; }  <METHOD_END>
