<METHOD_START> public void ( ) { this . java.util.List<org.springframework.util.comparator.InvertibleComparator> = new java.util.ArrayList <> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( java.util.Comparator ... java.util.Comparator[] ) { Assert . notNull ( java.util.Comparator[] , STRING ) ; this . java.util.List<org.springframework.util.comparator.InvertibleComparator> = new java.util.ArrayList <> ( java.util.Comparator[] . int ) ; for ( java.util.Comparator java.util.Comparator : java.util.Comparator[] ) { void ( java.util.Comparator ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.util.Comparator<? extends T> < ? extends T > java.util.Comparator<? extends T> ) { if ( java.util.Comparator<> instanceof InvertibleComparator ) { this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . add ( ( InvertibleComparator ) java.util.Comparator<> ) ; } else { this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . add ( new InvertibleComparator ( java.util.Comparator<> ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.util.Comparator<? extends T> < ? extends T > java.util.Comparator<? extends T> , boolean boolean ) { this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . add ( new InvertibleComparator ( java.util.Comparator<> , boolean ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( int int , java.util.Comparator<? extends T> < ? extends T > java.util.Comparator<? extends T> ) { if ( java.util.Comparator<> instanceof InvertibleComparator ) { this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . set ( int , ( InvertibleComparator ) java.util.Comparator<> ) ; } else { this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . set ( int , new InvertibleComparator ( java.util.Comparator<> ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int , java.util.Comparator<T> < T > java.util.Comparator<T> , boolean boolean ) { this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . set ( int , new InvertibleComparator <> ( java.util.Comparator<T> , boolean ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { for ( InvertibleComparator org.springframework.util.comparator.InvertibleComparator : this . java.util.List<org.springframework.util.comparator.InvertibleComparator> ) { org.springframework.util.comparator.InvertibleComparator . invertOrder ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . get ( int ) . invertOrder ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . get ( int ) . setAscending ( true ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . get ( int ) . setAscending ( false ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . size ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public int int ( T T , T T ) { Assert . state ( ! this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . isEmpty ( ) , STRING ) ; for ( InvertibleComparator org.springframework.util.comparator.InvertibleComparator : this . java.util.List<org.springframework.util.comparator.InvertibleComparator> ) { int int = org.springframework.util.comparator.InvertibleComparator . compare ( T , T ) ; if ( int != NUMBER ) { return int ; } } return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.util.comparator.CompoundComparator ) ) { return false ; } org.springframework.util.comparator.CompoundComparator<T> < T > org.springframework.util.comparator.CompoundComparator<T> = ( org.springframework.util.comparator.CompoundComparator<T> < T > ) java.lang.Object ; return this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . equals ( org.springframework.util.comparator.CompoundComparator<T> . java.util.List<org.springframework.util.comparator.InvertibleComparator> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.List<org.springframework.util.comparator.InvertibleComparator> . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.util.List<org.springframework.util.comparator.InvertibleComparator> ; }  <METHOD_END>
