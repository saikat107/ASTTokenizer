<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new WireTap ( org.springframework.integration.channel.interceptor.QueueChannel ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertEquals ( org.springframework.integration.channel.interceptor.Message<> , org.springframework.integration.channel.interceptor.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new WireTap ( org.springframework.integration.channel.interceptor.QueueChannel , new org.springframework.integration.channel.interceptor.WireTapTests.TestSelector ( false ) ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.channel.interceptor.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new WireTap ( org.springframework.integration.channel.interceptor.QueueChannel , new org.springframework.integration.channel.interceptor.WireTapTests.TestSelector ( true ) ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertEquals ( org.springframework.integration.channel.interceptor.Message<> , org.springframework.integration.channel.interceptor.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new WireTap ( ( MessageChannel ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new WireTap ( org.springframework.integration.channel.interceptor.QueueChannel ) ) ; assertNull ( org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( org.springframework.integration.channel.interceptor.Message<> ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertEquals ( org.springframework.integration.channel.interceptor.Message<> , org.springframework.integration.channel.interceptor.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new WireTap ( org.springframework.integration.channel.interceptor.QueueChannel ) ) ; java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.channel.interceptor.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( java.lang.String , NUMBER ) . build ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( org.springframework.integration.channel.interceptor.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.interceptor.Message<> . getHeaders ( ) . get ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.interceptor.Message<> . getHeaders ( ) . get ( java.lang.String ) ; assertNotNull ( java.lang.Object ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new WireTap ( org.springframework.integration.channel.interceptor.QueueChannel ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> ) { return this . boolean ; }  <METHOD_END>
