<METHOD_START> @ BeforeClass public static void void ( ) java.lang.InterruptedException { int int = NUMBER ; while ( int ++ < NUMBER && ( ! org.springframework.integration.mail.ImapServer . isListening ( ) ) ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( int < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.mail.ImapServer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING + org.springframework.integration.mail.ImapServer . getPort ( ) + STRING ) ; org.springframework.integration.mail.ImapMailReceiver . setSearchTermStrategy ( ( supportedFlags , folder ) -> { try { FromTerm fromTerm = new FromTerm ( new InternetAddress ( STRING ) ) ; return new AndTerm ( fromTerm , new FlagTerm ( new Flags ( Flag . SEEN ) , false ) ) ; } catch ( AddressException e ) { throw new RuntimeException ( e ) ; } } ) ; void ( org.springframework.integration.mail.ImapMailReceiver , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING + org.springframework.integration.mail.ImapServer . getPort ( ) + STRING ) ; void ( org.springframework.integration.mail.ImapMailReceiver , false ) ; assertTrue ( org.springframework.integration.mail.ImapServer . assertReceived ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING + org.springframework.integration.mail.ImapServer . getPort ( ) + STRING ) ; org.springframework.integration.mail.ImapMailReceiver . setHeaderMapper ( new DefaultMailHeaderMapper ( ) ) ; void ( org.springframework.integration.mail.ImapMailReceiver , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING + org.springframework.integration.mail.ImapServer . getPort ( ) + STRING ) ; org.springframework.integration.mail.ImapMailReceiver . setSimpleContent ( true ) ; void ( org.springframework.integration.mail.ImapMailReceiver , false , true ) ; assertTrue ( org.springframework.integration.mail.ImapServer . assertReceived ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING + org.springframework.integration.mail.ImapServer . getPort ( ) + STRING ) ; org.springframework.integration.mail.ImapMailReceiver . setSimpleContent ( true ) ; org.springframework.integration.mail.ImapMailReceiver . setHeaderMapper ( new DefaultMailHeaderMapper ( ) ) ; void ( org.springframework.integration.mail.ImapMailReceiver , true , true ) ; }  <METHOD_END>
<METHOD_START> public void void ( ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver , boolean boolean ) throws java.lang.Exception { void ( org.springframework.integration.mail.ImapMailReceiver , boolean , false ) ; }  <METHOD_END>
<METHOD_START> public void void ( ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver , boolean boolean , boolean boolean ) throws java.lang.Exception { org.springframework.integration.mail.ImapServer . resetServer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.integration.mail.ImapMailReceiver . setJavaMailProperties ( java.util.Properties ) ; org.springframework.integration.mail.ImapMailReceiver . setMaxFetchSize ( NUMBER ) ; org.springframework.integration.mail.ImapMailReceiver . setShouldDeleteMessages ( false ) ; org.springframework.integration.mail.ImapMailReceiver . setShouldMarkMessagesAsRead ( true ) ; org.springframework.integration.mail.ImapMailReceiver . setCancelIdleInterval ( NUMBER ) ; ThreadPoolTaskScheduler org.springframework.integration.mail.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; void ( org.springframework.integration.mail.ImapMailReceiver , org.springframework.integration.mail.ThreadPoolTaskScheduler ) ; org.springframework.integration.mail.ImapMailReceiver . setUserFlag ( STRING ) ; org.springframework.integration.mail.ImapMailReceiver . afterPropertiesSet ( ) ; Log org.springframework.integration.mail.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.mail.ImapMailReceiver , STRING , Log .class ) ) ; new DirectFieldAccessor ( org.springframework.integration.mail.ImapMailReceiver ) . setPropertyValue ( STRING , org.springframework.integration.mail.Log ) ; ImapIdleChannelAdapter org.springframework.integration.mail.ImapIdleChannelAdapter = new ImapIdleChannelAdapter ( org.springframework.integration.mail.ImapMailReceiver ) ; QueueChannel org.springframework.integration.mail.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setOutputChannel ( org.springframework.integration.mail.QueueChannel ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setTaskScheduler ( org.springframework.integration.mail.ThreadPoolTaskScheduler ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . start ( ) ; if ( ! boolean ) { @ SuppressWarnings ( STRING ) org . springframework . org.springframework.messaging . org.springframework.messaging < MimeMessage > received = ( org . springframework . org.springframework.messaging . org.springframework.messaging < MimeMessage > ) org.springframework.integration.mail.QueueChannel . receive ( NUMBER ) ; assertNotNull ( received ) ; assertNotNull ( received . getPayload ( ) . getReceivedDate ( ) ) ; assertTrue ( received . getPayload ( ) . getLineCount ( ) > - NUMBER ) ; if ( boolean ) { assertThat ( received . getPayload ( ) . getContent ( ) , equalTo ( TestMailServer . MailServer . MailHandler . BODY + STRING ) ) ; } else { assertThat ( received . getPayload ( ) . getContent ( ) , equalTo ( TestMailServer . MailServer . MailHandler . MESSAGE + STRING ) ) ; } } else { org . springframework . org.springframework.messaging . org.springframework.messaging < ? > received = org.springframework.integration.mail.QueueChannel . receive ( NUMBER ) ; assertNotNull ( received ) ; assertNotNull ( received . getHeaders ( ) . get ( MailHeaders . RAW_HEADERS ) ) ; assertThat ( ( java.lang.String ) received . getHeaders ( ) . get ( MailHeaders . CONTENT_TYPE ) , equalTo ( STRING ) ) ; assertThat ( ( java.lang.String ) received . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) , equalTo ( STRING ) ) ; assertThat ( ( java.lang.String ) received . getHeaders ( ) . get ( MailHeaders . FROM ) , equalTo ( STRING ) ) ; assertThat ( ( ( java.lang.String [] ) received . getHeaders ( ) . get ( MailHeaders . TO ) ) [ NUMBER ] , equalTo ( STRING ) ) ; assertThat ( ( java.lang.String ) received . getHeaders ( ) . get ( MailHeaders . SUBJECT ) , equalTo ( STRING ) ) ; if ( boolean ) { assertThat ( received . getPayload ( ) , equalTo ( TestMailServer . MailServer . MailHandler . BODY + STRING ) ) ; } else { assertThat ( received . getPayload ( ) , equalTo ( TestMailServer . MailServer . MailHandler . MESSAGE + STRING ) ) ; } } assertNotNull ( org.springframework.integration.mail.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.mail.QueueChannel . receive ( NUMBER ) ) ; verify ( org.springframework.integration.mail.Log ) . debug ( STRING ) ; org.springframework.integration.mail.ThreadPoolTaskScheduler . shutdown ( ) ; assertTrue ( org.springframework.integration.mail.ImapServer . assertReceived ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new ImapMailReceiver ( ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; org.springframework.integration.mail.AbstractMailReceiver = org.springframework.integration.mail.AbstractMailReceiver ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Message , org.springframework.integration.mail.Message ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.AbstractMailReceiver , times ( NUMBER ) ) . deleteMessages ( ( Message [] ) Mockito . any ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.mail.AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver ( AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver , Message org.springframework.integration.mail.Message , Message org.springframework.integration.mail.Message ) throws java.lang.NoSuchFieldException , java.lang.IllegalAccessException , org.springframework.integration.mail.MessagingException { ( ( ImapMailReceiver ) org.springframework.integration.mail.AbstractMailReceiver ) . setShouldMarkMessagesAsRead ( true ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; given ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Folder ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.Message , org.springframework.integration.mail.Message } ; willAnswer ( invocation -> { DirectFieldAccessor accessor = new DirectFieldAccessor ( invocation . getMock ( ) ) ; int folderOpenMode = ( Integer ) accessor . getPropertyValue ( STRING ) ; if ( folderOpenMode != Folder . READ_WRITE ) { throw new IllegalArgumentException ( STRING ) ; } return null ; } ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; willAnswer ( invocation -> messages ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; org.springframework.integration.mail.AbstractMailReceiver . receive ( ) ; return org.springframework.integration.mail.AbstractMailReceiver ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new ImapMailReceiver ( ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Expression org.springframework.integration.mail.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; org.springframework.integration.mail.AbstractMailReceiver . setSelectorExpression ( org.springframework.integration.mail.Expression ) ; org.springframework.integration.mail.AbstractMailReceiver = org.springframework.integration.mail.AbstractMailReceiver ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Message , org.springframework.integration.mail.Message ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.AbstractMailReceiver , times ( NUMBER ) ) . deleteMessages ( ( Message [] ) Mockito . any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new ImapMailReceiver ( ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; given ( org.springframework.integration.mail.Message . getSubject ( ) ) . willReturn ( STRING ) ; Expression org.springframework.integration.mail.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; org.springframework.integration.mail.AbstractMailReceiver . setSelectorExpression ( org.springframework.integration.mail.Expression ) ; org.springframework.integration.mail.AbstractMailReceiver = org.springframework.integration.mail.AbstractMailReceiver ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Message , org.springframework.integration.mail.Message ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.Message , never ( ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.AbstractMailReceiver , times ( NUMBER ) ) . deleteMessages ( ( Message [] ) Mockito . any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new ImapMailReceiver ( ) ; ( ( ImapMailReceiver ) org.springframework.integration.mail.AbstractMailReceiver ) . setShouldMarkMessagesAsRead ( true ) ; org.springframework.integration.mail.AbstractMailReceiver . setShouldDeleteMessages ( true ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; given ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Folder ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.Message , org.springframework.integration.mail.Message } ; willAnswer ( invocation -> { DirectFieldAccessor accessor = new DirectFieldAccessor ( invocation . getMock ( ) ) ; int folderOpenMode = ( Integer ) accessor . getPropertyValue ( STRING ) ; if ( folderOpenMode != Folder . READ_WRITE ) { throw new IllegalArgumentException ( STRING ) ; } return null ; } ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; willAnswer ( invocation -> messages ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; org.springframework.integration.mail.AbstractMailReceiver . receive ( ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.AbstractMailReceiver , times ( NUMBER ) ) . deleteMessages ( ( Message [] ) Mockito . any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new ImapMailReceiver ( ) ; ( ( ImapMailReceiver ) org.springframework.integration.mail.AbstractMailReceiver ) . setShouldMarkMessagesAsRead ( false ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; given ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Folder ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.Message , org.springframework.integration.mail.Message } ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; willAnswer ( invocation -> messages ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; org.springframework.integration.mail.AbstractMailReceiver . receive ( ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new ImapMailReceiver ( ) ; org.springframework.integration.mail.AbstractMailReceiver . setShouldDeleteMessages ( true ) ; ( ( ImapMailReceiver ) org.springframework.integration.mail.AbstractMailReceiver ) . setShouldMarkMessagesAsRead ( false ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; given ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Folder ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.Message , org.springframework.integration.mail.Message } ; willAnswer ( invocation -> { DirectFieldAccessor accessor = new DirectFieldAccessor ( invocation . getMock ( ) ) ; int folderOpenMode = ( Integer ) accessor . getPropertyValue ( STRING ) ; if ( folderOpenMode != Folder . READ_WRITE ) { throw new IllegalArgumentException ( STRING ) ; } return null ; } ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; willAnswer ( invocation -> messages ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; org.springframework.integration.mail.AbstractMailReceiver . receive ( ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . DELETED , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . DELETED , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new ImapMailReceiver ( ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; given ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Folder ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; Message org.springframework.integration.mail.Message = mock ( MimeMessage .class ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.Message , org.springframework.integration.mail.Message } ; willAnswer ( invocation -> { DirectFieldAccessor accessor = new DirectFieldAccessor ( invocation . getMock ( ) ) ; int folderOpenMode = ( Integer ) accessor . getPropertyValue ( STRING ) ; if ( folderOpenMode != Folder . READ_WRITE ) { throw new IllegalArgumentException ( STRING ) ; } return null ; } ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; willAnswer ( invocation -> messages ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; org.springframework.integration.mail.AbstractMailReceiver . receive ( ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.Message , times ( NUMBER ) ) . setFlag ( Flag . SEEN , true ) ; verify ( org.springframework.integration.mail.AbstractMailReceiver , times ( NUMBER ) ) . deleteMessages ( ( Message [] ) Mockito . any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ Ignore public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.mail.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , ImapIdleChannelAdapterParserTests .class ) ; ImapIdleChannelAdapter org.springframework.integration.mail.ImapIdleChannelAdapter = org.springframework.integration.mail.ConfigurableApplicationContext . getBean ( STRING , ImapIdleChannelAdapter .class ) ; AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new ImapMailReceiver ( ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; DirectFieldAccessor org.springframework.integration.mail.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.mail.ImapIdleChannelAdapter ) ; org.springframework.integration.mail.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.mail.AbstractMailReceiver ) ; MimeMessage org.springframework.integration.mail.MimeMessage = mock ( MimeMessage .class ) ; Flags org.springframework.integration.mail.Flags = mock ( Flags .class ) ; given ( org.springframework.integration.mail.MimeMessage . getFlags ( ) ) . willReturn ( org.springframework.integration.mail.Flags ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.MimeMessage } ; willAnswer ( invocation -> { DirectFieldAccessor accessor = new DirectFieldAccessor ( ( invocation . getMock ( ) ) ) ; IMAPFolder folder = mock ( IMAPFolder .class ) ; accessor . setPropertyValue ( STRING , folder ) ; given ( folder . hasNewMessages ( ) ) . willReturn ( true ) ; return null ; } ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; willAnswer ( invocation -> messages ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; PollableChannel org.springframework.integration.mail.PollableChannel = org.springframework.integration.mail.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . start ( ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > replMessage = org.springframework.integration.mail.PollableChannel . receive ( NUMBER ) ; MessageHistory org.springframework.integration.mail.MessageHistory = MessageHistory . read ( replMessage ) ; assertNotNull ( org.springframework.integration.mail.MessageHistory ) ; java.util.Properties java.util.Properties = TestUtils . locateComponentInHistory ( org.springframework.integration.mail.MessageHistory , STRING , NUMBER ) ; assertNotNull ( java.util.Properties ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . stop ( ) ; org.springframework.integration.mail.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.mail.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , ImapIdleChannelAdapterParserTests .class ) ; ImapIdleChannelAdapter org.springframework.integration.mail.ImapIdleChannelAdapter = org.springframework.integration.mail.ConfigurableApplicationContext . getBean ( STRING , ImapIdleChannelAdapter .class ) ; DirectChannel org.springframework.integration.mail.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.mail.DirectChannel . subscribe ( new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object handleRequestMessage ( org . springframework . org.springframework.messaging . org.springframework.messaging < ? > requestMessage ) { throw new java.lang.RuntimeException ( STRING ) ; } } ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setOutputChannel ( org.springframework.integration.mail.DirectChannel ) ; QueueChannel org.springframework.integration.mail.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setErrorChannel ( org.springframework.integration.mail.QueueChannel ) ; AbstractMailReceiver org.springframework.integration.mail.AbstractMailReceiver = new ImapMailReceiver ( ) ; org.springframework.integration.mail.AbstractMailReceiver = spy ( org.springframework.integration.mail.AbstractMailReceiver ) ; org.springframework.integration.mail.AbstractMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.AbstractMailReceiver . afterPropertiesSet ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Folder org.springframework.integration.mail.Folder = mock ( IMAPFolder .class ) ; given ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . USER ) ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.AbstractMailReceiver , org.springframework.integration.mail.Folder ) ; willAnswer ( invocation -> true ) . given ( org.springframework.integration.mail.Folder ) . isOpen ( ) ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . openFolder ( ) ; DirectFieldAccessor org.springframework.integration.mail.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.mail.ImapIdleChannelAdapter ) ; org.springframework.integration.mail.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.mail.AbstractMailReceiver ) ; MimeMessage org.springframework.integration.mail.MimeMessage = mock ( MimeMessage .class ) ; Flags org.springframework.integration.mail.Flags = mock ( Flags .class ) ; given ( org.springframework.integration.mail.MimeMessage . getFlags ( ) ) . willReturn ( org.springframework.integration.mail.Flags ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.MimeMessage } ; willAnswer ( invocation -> messages ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . searchForNewMessages ( ) ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.AbstractMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . start ( ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > replMessage = org.springframework.integration.mail.QueueChannel . receive ( NUMBER ) ; assertNotNull ( replMessage ) ; assertEquals ( STRING , ( ( java.lang.Exception ) replMessage . getPayload ( ) ) . java.lang.Throwable ( ) . java.lang.String ( ) ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . stop ( ) ; org.springframework.integration.mail.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object handleRequestMessage ( org . springframework . org.springframework.messaging . org.springframework.messaging < ? > requestMessage ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.mail.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , ImapIdleChannelAdapterParserTests .class ) ; ImapIdleChannelAdapter org.springframework.integration.mail.ImapIdleChannelAdapter = org.springframework.integration.mail.ConfigurableApplicationContext . getBean ( STRING , ImapIdleChannelAdapter .class ) ; QueueChannel org.springframework.integration.mail.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setOutputChannel ( org.springframework.integration.mail.QueueChannel ) ; ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING ) ; org.springframework.integration.mail.ImapMailReceiver = spy ( org.springframework.integration.mail.ImapMailReceiver ) ; org.springframework.integration.mail.ImapMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.ImapMailReceiver . afterPropertiesSet ( ) ; final IMAPFolder org.springframework.integration.mail.IMAPFolder = mock ( IMAPFolder .class ) ; given ( org.springframework.integration.mail.IMAPFolder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . USER ) ) ; given ( org.springframework.integration.mail.IMAPFolder . isOpen ( ) ) . willReturn ( false ) . willReturn ( true ) ; given ( org.springframework.integration.mail.IMAPFolder . exists ( ) ) . willReturn ( true ) ; DirectFieldAccessor org.springframework.integration.mail.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.mail.ImapIdleChannelAdapter ) ; org.springframework.integration.mail.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.mail.ImapMailReceiver ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Store org.springframework.integration.mail.Store = mock ( Store .class ) ; given ( org.springframework.integration.mail.Store . isConnected ( ) ) . willReturn ( true ) ; given ( org.springframework.integration.mail.Store . getFolder ( Mockito . any ( URLName .class ) ) ) . willReturn ( org.springframework.integration.mail.IMAPFolder ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.ImapMailReceiver , org.springframework.integration.mail.Store ) ; willAnswer ( invocation -> folder ) . given ( org.springframework.integration.mail.ImapMailReceiver ) . getFolder ( ) ; MimeMessage org.springframework.integration.mail.MimeMessage = mock ( MimeMessage .class ) ; Flags org.springframework.integration.mail.Flags = mock ( Flags .class ) ; given ( org.springframework.integration.mail.MimeMessage . getFlags ( ) ) . willReturn ( org.springframework.integration.mail.Flags ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.MimeMessage } ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ; willAnswer ( invocation -> { if ( shouldFindMessagesCounter . decrementAndGet ( ) >= NUMBER ) { return messages ; } else { return new Message [ NUMBER ] ; } } ) . given ( org.springframework.integration.mail.ImapMailReceiver ) . searchForNewMessages ( ) ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.ImapMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; willAnswer ( invocation -> { Thread . sleep ( NUMBER ) ; shouldFindMessagesCounter . set ( NUMBER ) ; return null ; } ) . given ( org.springframework.integration.mail.IMAPFolder ) . idle ( ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . start ( ) ; assertNotNull ( org.springframework.integration.mail.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.mail.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.mail.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . stop ( ) ; org.springframework.integration.mail.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.mail.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , ImapIdleChannelAdapterParserTests .class ) ; ImapIdleChannelAdapter org.springframework.integration.mail.ImapIdleChannelAdapter = org.springframework.integration.mail.ConfigurableApplicationContext . getBean ( STRING , ImapIdleChannelAdapter .class ) ; QueueChannel org.springframework.integration.mail.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setOutputChannel ( org.springframework.integration.mail.QueueChannel ) ; ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING ) ; org.springframework.integration.mail.ImapMailReceiver = spy ( org.springframework.integration.mail.ImapMailReceiver ) ; org.springframework.integration.mail.ImapMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.ImapMailReceiver . afterPropertiesSet ( ) ; final IMAPFolder org.springframework.integration.mail.IMAPFolder = mock ( IMAPFolder .class ) ; given ( org.springframework.integration.mail.IMAPFolder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . RECENT ) ) ; given ( org.springframework.integration.mail.IMAPFolder . isOpen ( ) ) . willReturn ( false ) . willReturn ( true ) ; given ( org.springframework.integration.mail.IMAPFolder . exists ( ) ) . willReturn ( true ) ; DirectFieldAccessor org.springframework.integration.mail.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.mail.ImapIdleChannelAdapter ) ; org.springframework.integration.mail.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.mail.ImapMailReceiver ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Store org.springframework.integration.mail.Store = mock ( Store .class ) ; given ( org.springframework.integration.mail.Store . isConnected ( ) ) . willReturn ( true ) ; given ( org.springframework.integration.mail.Store . getFolder ( Mockito . any ( URLName .class ) ) ) . willReturn ( org.springframework.integration.mail.IMAPFolder ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.ImapMailReceiver , org.springframework.integration.mail.Store ) ; willAnswer ( invocation -> folder ) . given ( org.springframework.integration.mail.ImapMailReceiver ) . getFolder ( ) ; MimeMessage org.springframework.integration.mail.MimeMessage = mock ( MimeMessage .class ) ; Flags org.springframework.integration.mail.Flags = mock ( Flags .class ) ; given ( org.springframework.integration.mail.MimeMessage . getFlags ( ) ) . willReturn ( org.springframework.integration.mail.Flags ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.MimeMessage } ; willAnswer ( invocation -> messages ) . given ( org.springframework.integration.mail.ImapMailReceiver ) . searchForNewMessages ( ) ; willAnswer ( invocation -> null ) . given ( org.springframework.integration.mail.ImapMailReceiver ) . fetchMessages ( org.springframework.integration.mail.Message[] ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; willAnswer ( invocation -> { idles . countDown ( ) ; Thread . sleep ( NUMBER ) ; return null ; } ) . given ( org.springframework.integration.mail.IMAPFolder ) . idle ( ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . start ( ) ; assertNull ( org.springframework.integration.mail.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.mail.QueueChannel . receive ( NUMBER ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . stop ( ) ; org.springframework.integration.mail.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING ) ; ImapIdleChannelAdapter org.springframework.integration.mail.ImapIdleChannelAdapter = new ImapIdleChannelAdapter ( org.springframework.integration.mail.ImapMailReceiver ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.mail.ImapIdleExceptionEvent> < ImapIdleExceptionEvent > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.mail.ImapIdleExceptionEvent> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.mail.ImapIdleExceptionEvent> < ImapIdleExceptionEvent > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setApplicationEventPublisher ( event -> { assertNull ( STRING , theEvent . get ( ) ) ; theEvent . set ( ( ImapIdleExceptionEvent ) event ) ; latch . countDown ( ) ; } ) ; ThreadPoolTaskScheduler org.springframework.integration.mail.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.mail.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setTaskScheduler ( org.springframework.integration.mail.ThreadPoolTaskScheduler ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.mail.ImapIdleExceptionEvent> . get ( ) . toString ( ) . endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { final ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING ) ; Store org.springframework.integration.mail.Store = mock ( Store .class ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; given ( org.springframework.integration.mail.Folder . exists ( ) ) . willReturn ( true ) ; given ( org.springframework.integration.mail.Folder . isOpen ( ) ) . willReturn ( true ) ; given ( org.springframework.integration.mail.Folder . search ( ( SearchTerm ) Mockito . any ( ) ) ) . willReturn ( new Message [] { } ) ; given ( org.springframework.integration.mail.Store . getFolder ( Mockito . any ( URLName .class ) ) ) . willReturn ( org.springframework.integration.mail.Folder ) ; given ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . USER ) ) ; DirectFieldAccessor org.springframework.integration.mail.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.mail.ImapMailReceiver ) ; org.springframework.integration.mail.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.mail.Store ) ; org.springframework.integration.mail.ImapMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.ImapMailReceiver . afterPropertiesSet ( ) ; new java.lang.Thread ( ( ) { try { org.springframework.integration.mail.ImapMailReceiver . receive ( ) ; } catch ( javax . javax.mail . javax.mail javax.mail.MessagingException ) { if ( javax.mail.MessagingException . getCause ( ) instanceof java.lang.NullPointerException ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } } ) . void ( ) ; new java.lang.Thread ( ( ) { try { org.springframework.integration.mail.ImapMailReceiver . destroy ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } ) . void ( ) ; } assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING ) ; Folder org.springframework.integration.mail.Folder = org.springframework.integration.mail.Folder ( org.springframework.integration.mail.ImapMailReceiver ) ; Message [] org.springframework.integration.mail.Message[] = ( Message [] ) org.springframework.integration.mail.ImapMailReceiver . receive ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mail.Message[] [ NUMBER ] . getContent ( ) ; assertEquals ( STRING , ( ( Multipart ) java.lang.Object ) . getBodyPart ( NUMBER ) . getContent ( ) . toString ( ) . trim ( ) ) ; assertEquals ( STRING , ( ( Multipart ) java.lang.Object ) . getBodyPart ( NUMBER ) . getContent ( ) . toString ( ) . trim ( ) ) ; assertSame ( org.springframework.integration.mail.Folder , org.springframework.integration.mail.Message[] [ NUMBER ] . getFolder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING ) ; org.springframework.integration.mail.ImapMailReceiver . setHeaderMapper ( new DefaultMailHeaderMapper ( ) ) ; org.springframework.integration.mail.Folder ( org.springframework.integration.mail.ImapMailReceiver ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > [] messages = ( org . springframework . org.springframework.messaging . org.springframework.messaging < ? > [] ) org.springframework.integration.mail.ImapMailReceiver . receive ( ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > received = messages [ NUMBER ] ; java.lang.Object java.lang.Object = received . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( byte [] .class ) ) ; assertThat ( ( java.lang.String ) received . getHeaders ( ) . get ( MailHeaders . CONTENT_TYPE ) , equalTo ( STRING ) ) ; assertThat ( ( java.lang.String ) received . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new ImapMailReceiver ( STRING ) ; org.springframework.integration.mail.ImapMailReceiver . setHeaderMapper ( new DefaultMailHeaderMapper ( ) ) ; org.springframework.integration.mail.ImapMailReceiver . setEmbeddedPartsAsBytes ( false ) ; org.springframework.integration.mail.Folder ( org.springframework.integration.mail.ImapMailReceiver ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > [] messages = ( org . springframework . org.springframework.messaging . org.springframework.messaging < ? > [] ) org.springframework.integration.mail.ImapMailReceiver . receive ( ) ; java.lang.Object java.lang.Object = messages [ NUMBER ] . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( Multipart .class ) ) ; assertEquals ( STRING , ( ( Multipart ) java.lang.Object ) . getBodyPart ( NUMBER ) . getContent ( ) . toString ( ) . trim ( ) ) ; assertEquals ( STRING , ( ( Multipart ) java.lang.Object ) . getBodyPart ( NUMBER ) . getContent ( ) . toString ( ) . trim ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.mail.Folder org.springframework.integration.mail.Folder ( final ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver ) throws org.springframework.integration.mail.MessagingException , java.io.IOException { Store org.springframework.integration.mail.Store = mock ( Store .class ) ; Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; given ( org.springframework.integration.mail.Folder . exists ( ) ) . willReturn ( true ) ; given ( org.springframework.integration.mail.Folder . isOpen ( ) ) . willReturn ( true ) ; Message org.springframework.integration.mail.Message = new MimeMessage ( null , new ClassPathResource ( STRING ) . getInputStream ( ) ) ; given ( org.springframework.integration.mail.Folder . search ( ( SearchTerm ) Mockito . any ( ) ) ) . willReturn ( new Message [] { org.springframework.integration.mail.Message } ) ; given ( org.springframework.integration.mail.Store . getFolder ( Mockito . any ( URLName .class ) ) ) . willReturn ( org.springframework.integration.mail.Folder ) ; given ( org.springframework.integration.mail.Folder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . USER ) ) ; DirectFieldAccessor org.springframework.integration.mail.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.mail.ImapMailReceiver ) ; org.springframework.integration.mail.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.mail.Store ) ; org.springframework.integration.mail.ImapMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.ImapMailReceiver . afterPropertiesSet ( ) ; return org.springframework.integration.mail.Folder ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ImapIdleChannelAdapter org.springframework.integration.mail.ImapIdleChannelAdapter = new ImapIdleChannelAdapter ( new ImapMailReceiver ( ) ) ; ThreadPoolTaskScheduler org.springframework.integration.mail.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.mail.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setTaskScheduler ( org.springframework.integration.mail.ThreadPoolTaskScheduler ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . start ( ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = TestUtils . getPropertyValue ( org.springframework.integration.mail.ImapIdleChannelAdapter , STRING , java.util.concurrent.ExecutorService .class ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . stop ( ) ; assertTrue ( java.util.concurrent.ExecutorService . boolean ( ) ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . start ( ) ; java.util.concurrent.ExecutorService = TestUtils . getPropertyValue ( org.springframework.integration.mail.ImapIdleChannelAdapter , STRING , java.util.concurrent.ExecutorService .class ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . stop ( ) ; assertTrue ( java.util.concurrent.ExecutorService . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message org.springframework.integration.mail.Message = mock ( Message .class ) ; Message org.springframework.integration.mail.Message = mock ( Message .class ) ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { null , null , org.springframework.integration.mail.Message } ; final Message [] org.springframework.integration.mail.Message[] = new Message [] { org.springframework.integration.mail.Message } ; final SearchTermStrategy org.springframework.integration.mail.SearchTermStrategy = mock ( SearchTermStrategy .class ) ; class TestReceiver extends ImapMailReceiver { private boolean boolean ; void ( ) { setSearchTermStrategy ( org.springframework.integration.mail.SearchTermStrategy ) ; } @ java.lang.Override protected org.springframework.integration.mail.Folder org.springframework.integration.mail.Folder ( ) { Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; given ( org.springframework.integration.mail.Folder . isOpen ( ) ) . willReturn ( true ) ; try { given ( org.springframework.integration.mail.Folder . getMessages ( ) ) . willReturn ( ! this . boolean ? org.springframework.integration.mail.Message[] : org.springframework.integration.mail.Message[] ) ; } catch ( MessagingException org.springframework.integration.mail.MessagingException ) {				} return org.springframework.integration.mail.Folder ; } @ java.lang.Override public org.springframework.integration.mail.Message [] org.springframework.integration.mail.Message[] ( ) org.springframework.integration.mail.MessagingException { Message [] org.springframework.integration.mail.Message[] = searchForNewMessages ( ) ; this . boolean = true ; return org.springframework.integration.mail.Message[] ; } } ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = new TestReceiver ( ) ; Message [] org.springframework.integration.mail.Message[] = ( Message [] ) org.springframework.integration.mail.ImapMailReceiver . receive ( ) ; assertEquals ( NUMBER , received . length ) ; assertSame ( org.springframework.integration.mail.Message , org.springframework.integration.mail.Message[] [ NUMBER ] ) ; org.springframework.integration.mail.Message[] = ( Message [] ) org.springframework.integration.mail.ImapMailReceiver . receive ( ) ; assertEquals ( NUMBER , received . length ) ; assertSame ( org.springframework.integration.mail.Message[] , org.springframework.integration.mail.Message[] ) ; assertSame ( org.springframework.integration.mail.Message , org.springframework.integration.mail.Message[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> void ( ) { setSearchTermStrategy ( org.springframework.integration.mail.SearchTermStrategy ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.mail.Folder org.springframework.integration.mail.Folder ( ) { Folder org.springframework.integration.mail.Folder = mock ( Folder .class ) ; given ( org.springframework.integration.mail.Folder . isOpen ( ) ) . willReturn ( true ) ; try { given ( org.springframework.integration.mail.Folder . getMessages ( ) ) . willReturn ( ! this . boolean ? org.springframework.integration.mail.Message[] : org.springframework.integration.mail.Message[] ) ; } catch ( MessagingException org.springframework.integration.mail.MessagingException ) {				} return org.springframework.integration.mail.Folder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mail.Message [] org.springframework.integration.mail.Message[] ( ) org.springframework.integration.mail.MessagingException { Message [] org.springframework.integration.mail.Message[] = searchForNewMessages ( ) ; this . boolean = true ; return org.springframework.integration.mail.Message[] ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver = spy ( new ImapMailReceiver ( STRING ) ) ; org.springframework.integration.mail.ImapMailReceiver . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mail.ImapMailReceiver . afterPropertiesSet ( ) ; IMAPFolder org.springframework.integration.mail.IMAPFolder = mock ( IMAPFolder .class ) ; given ( org.springframework.integration.mail.IMAPFolder . getPermanentFlags ( ) ) . willReturn ( new Flags ( Flags . Flag . USER ) ) ; given ( org.springframework.integration.mail.IMAPFolder . isOpen ( ) ) . willReturn ( false ) . willReturn ( true ) ; given ( org.springframework.integration.mail.IMAPFolder . exists ( ) ) . willReturn ( true ) ; given ( org.springframework.integration.mail.IMAPFolder . hasNewMessages ( ) ) . willReturn ( true ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractMailReceiver .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; Store org.springframework.integration.mail.Store = mock ( Store .class ) ; given ( org.springframework.integration.mail.Store . isConnected ( ) ) . willReturn ( false ) ; given ( org.springframework.integration.mail.Store . getFolder ( Mockito . any ( URLName .class ) ) ) . willReturn ( org.springframework.integration.mail.IMAPFolder ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.ImapMailReceiver , org.springframework.integration.mail.Store ) ; ImapIdleChannelAdapter org.springframework.integration.mail.ImapIdleChannelAdapter = new ImapIdleChannelAdapter ( org.springframework.integration.mail.ImapMailReceiver ) ; Log org.springframework.integration.mail.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.mail.ImapIdleChannelAdapter , STRING , Log .class ) ) ; new DirectFieldAccessor ( org.springframework.integration.mail.ImapIdleChannelAdapter ) . setPropertyValue ( STRING , org.springframework.integration.mail.Log ) ; willDoNothing ( ) . given ( org.springframework.integration.mail.Log ) . warn ( anyString ( ) , any ( java.lang.Throwable .class ) ) ; willAnswer ( i -> { i . callRealMethod ( ) ; throw new FolderClosedException ( folder , STRING ) ; } ) . given ( org.springframework.integration.mail.ImapMailReceiver ) . waitForNewMessages ( ) ; ThreadPoolTaskScheduler org.springframework.integration.mail.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.mail.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setTaskScheduler ( org.springframework.integration.mail.ThreadPoolTaskScheduler ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setReconnectDelay ( NUMBER ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . afterPropertiesSet ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . setApplicationEventPublisher ( e -> { latch . countDown ( ) ; } ) ; org.springframework.integration.mail.ImapIdleChannelAdapter . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; verify ( org.springframework.integration.mail.Store , atLeast ( NUMBER ) ) . connect ( ) ; org.springframework.integration.mail.ThreadPoolTaskScheduler . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ImapMailReceiver org.springframework.integration.mail.ImapMailReceiver , ThreadPoolTaskScheduler org.springframework.integration.mail.ThreadPoolTaskScheduler ) { org.springframework.integration.mail.ThreadPoolTaskScheduler . setPoolSize ( NUMBER ) ; org.springframework.integration.mail.ThreadPoolTaskScheduler . initialize ( ) ; BeanFactory org.springframework.integration.mail.BeanFactory = mock ( BeanFactory .class ) ; given ( org.springframework.integration.mail.BeanFactory . containsBean ( STRING ) ) . willReturn ( true ) ; given ( org.springframework.integration.mail.BeanFactory . getBean ( STRING , TaskScheduler .class ) ) . willReturn ( org.springframework.integration.mail.ThreadPoolTaskScheduler ) ; org.springframework.integration.mail.ImapMailReceiver . setBeanFactory ( org.springframework.integration.mail.BeanFactory ) ; }  <METHOD_END>
