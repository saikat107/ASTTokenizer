<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. afterPropertiesSet ( ) ; void ( getRegion ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.client.Region<K,V> < K , V > org.springframework.data.gemfire.client.Region<K,V> ( GemFireCache org.springframework.data.gemfire.client.GemFireCache , java.lang.String java.lang.String ) throws java.lang.Exception { Assert . isTrue ( GemfireUtils . isClient ( org.springframework.data.gemfire.client.GemFireCache ) , STRING ) ; ClientRegionFactory < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> = ( ( ClientCache ) org.springframework.data.gemfire.client.GemFireCache ) . createClientRegionFactory ( org.springframework.data.gemfire.client.ClientRegionShortcut ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ) ; if ( java.lang.Class<K> != null ) { org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setKeyConstraint ( java.lang.Class<K> ) ; } if ( java.lang.Class<V> != null ) { org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setValueConstraint ( java.lang.Class<V> ) ; } return org.springframework.data.gemfire.client.Region<K,V> ( org.springframework.data.gemfire.client.Region<K,V> ( org.springframework.data.gemfire.client.ClientRegionFactory<K,V> , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.client.Region<K,V> < K , V > org.springframework.data.gemfire.client.Region<K,V> ( ClientRegionFactory < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> , java.lang.String java.lang.String ) { return ( getParent ( ) != null ? org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . createSubregion ( getParent ( ) , java.lang.String ) : org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . create ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.client.Region<K,V> < K , V > org.springframework.data.gemfire.client.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.client.Region<K,V> ) { if ( org.springframework.data.gemfire.client.Log . isInfoEnabled ( ) ) { if ( getParent ( ) != null ) { org.springframework.data.gemfire.client.Log . info ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Region<K,V> . getName ( ) , getParent ( ) . getName ( ) ) ) ; } else { org.springframework.data.gemfire.client.Log . info ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Region<K,V> . getName ( ) ) ) ; } } return org.springframework.data.gemfire.client.Region<K,V> ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.client.ClientRegionShortcut org.springframework.data.gemfire.client.ClientRegionShortcut ( ) { ClientRegionShortcut org.springframework.data.gemfire.client.ClientRegionShortcut = this . org.springframework.data.gemfire.client.ClientRegionShortcut ; if ( org.springframework.data.gemfire.client.ClientRegionShortcut == null ) { if ( this . org.springframework.data.gemfire.client.DataPolicy != null ) { void ( this . org.springframework.data.gemfire.client.DataPolicy ) ; if ( DataPolicy . EMPTY . equals ( this . org.springframework.data.gemfire.client.DataPolicy ) ) { org.springframework.data.gemfire.client.ClientRegionShortcut = ClientRegionShortcut . PROXY ; } else if ( DataPolicy . NORMAL . equals ( this . org.springframework.data.gemfire.client.DataPolicy ) ) { org.springframework.data.gemfire.client.ClientRegionShortcut = ClientRegionShortcut . CACHING_PROXY ; } else if ( DataPolicy . PERSISTENT_REPLICATE . equals ( this . org.springframework.data.gemfire.client.DataPolicy ) ) { org.springframework.data.gemfire.client.ClientRegionShortcut = ClientRegionShortcut . LOCAL_PERSISTENT ; } else { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , this . org.springframework.data.gemfire.client.DataPolicy ) ) ; } } else { org.springframework.data.gemfire.client.ClientRegionShortcut = ( boolean ( ) ? ClientRegionShortcut . LOCAL_PERSISTENT : ClientRegionShortcut . LOCAL ) ; } } void ( org.springframework.data.gemfire.client.ClientRegionShortcut ) ; return org.springframework.data.gemfire.client.ClientRegionShortcut ; }  <METHOD_END>
<METHOD_START> private void void ( ClientRegionShortcut org.springframework.data.gemfire.client.ClientRegionShortcut ) { final boolean boolean = ( this . java.lang.Boolean == null ) ; if ( ClientRegionShortcut . LOCAL_PERSISTENT . equals ( org.springframework.data.gemfire.client.ClientRegionShortcut ) || ClientRegionShortcut . LOCAL_PERSISTENT_OVERFLOW . equals ( org.springframework.data.gemfire.client.ClientRegionShortcut ) ) { Assert . isTrue ( boolean || boolean ( ) , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.ClientRegionShortcut ) ) ; } else { Assert . isTrue ( boolean || boolean ( ) , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.ClientRegionShortcut ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( DataPolicy org.springframework.data.gemfire.client.DataPolicy ) { if ( org.springframework.data.gemfire.client.DataPolicy . withPersistence ( ) ) { Assert . isTrue ( boolean ( ) || boolean ( ) , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.DataPolicy ) ) ; } else { Assert . isTrue ( boolean ( ) || boolean ( ) , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.DataPolicy ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.client.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( ClientRegionFactory < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ) { RegionAttributes < K , V > org.springframework.data.gemfire.client.RegionAttributes<K,V> = this . org.springframework.data.gemfire.client.RegionAttributes<K,V> ; if ( org.springframework.data.gemfire.client.RegionAttributes<K,V> != null ) { org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setCloningEnabled ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getCloningEnabled ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setCompressor ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getCompressor ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setConcurrencyChecksEnabled ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getConcurrencyChecksEnabled ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setConcurrencyLevel ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getConcurrencyLevel ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setCustomEntryIdleTimeout ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getCustomEntryIdleTimeout ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setCustomEntryTimeToLive ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getCustomEntryTimeToLive ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setDiskStoreName ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getDiskStoreName ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setDiskSynchronous ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . isDiskSynchronous ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setEntryIdleTimeout ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getEntryIdleTimeout ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setEntryTimeToLive ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getEntryTimeToLive ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setEvictionAttributes ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getEvictionAttributes ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setInitialCapacity ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getInitialCapacity ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setKeyConstraint ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getKeyConstraint ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setLoadFactor ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getLoadFactor ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setPoolName ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getPoolName ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setRegionIdleTimeout ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getRegionIdleTimeout ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setRegionTimeToLive ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getRegionTimeToLive ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setStatisticsEnabled ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getStatisticsEnabled ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setValueConstraint ( org.springframework.data.gemfire.client.RegionAttributes<K,V> . getValueConstraint ( ) ) ; } return org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.data.gemfire.client.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( ClientRegionFactory < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ) { for ( CacheListener < K , V > org.springframework.data.gemfire.client.CacheListener<K,V> : this .< K , V > org.springframework.data.gemfire.client.CacheListener<K,V>[] ( ) ) { org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . addCacheListener ( org.springframework.data.gemfire.client.CacheListener<K,V> ) ; } for ( CacheListener < K , V > org.springframework.data.gemfire.client.CacheListener<K,V> : nullSafeArray ( this . org.springframework.data.gemfire.client.CacheListener<K,V>[] , CacheListener .class ) ) { org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . addCacheListener ( org.springframework.data.gemfire.client.CacheListener<K,V> ) ; } return org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < K , V > org.springframework.data.gemfire.client.CacheListener<K,V> < K , V > [] org.springframework.data.gemfire.client.CacheListener<K,V>[] ( ) { CacheListener [] org.springframework.data.gemfire.client.CacheListener[] = ( this . org.springframework.data.gemfire.client.RegionAttributes<K,V> != null ? this . org.springframework.data.gemfire.client.RegionAttributes<K,V> . getCacheListeners ( ) : null ) ; return nullSafeArray ( org.springframework.data.gemfire.client.CacheListener[] , CacheListener .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.client.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( ClientRegionFactory < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ) { if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setDiskStoreName ( this . java.lang.String ) ; } return org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.client.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( ClientRegionFactory < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ) { if ( this . org.springframework.data.gemfire.client.EvictionAttributes != null ) { org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setEvictionAttributes ( this . org.springframework.data.gemfire.client.EvictionAttributes ) ; } return org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.client.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( ClientRegionFactory < K , V > org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ) { java.lang.String java.lang.String = java.lang.String ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.gemfire.client.ClientRegionFactory<K,V> . setPoolName ( java.lang.String ( java.lang.String ) ) ; } return org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = this . java.lang.String ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String java.lang.String = GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ; java.lang.String = ( this . org.springframework.data.gemfire.client.BeanFactory . containsBean ( java.lang.String ) ? java.lang.String : java.lang.String ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { if ( this . org.springframework.data.gemfire.client.BeanFactory . isTypeMatch ( java.lang.String , Pool .class ) ) { if ( org.springframework.data.gemfire.client.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.client.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } this . org.springframework.data.gemfire.client.BeanFactory . getBean ( java.lang.String , Pool .class ) ; } } catch ( BeansException org.springframework.data.gemfire.client.BeansException ) { org.springframework.data.gemfire.client.Log . warn ( org.springframework.data.gemfire.client.BeansException . getMessage ( ) ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < K , V > org.springframework.data.gemfire.client.Region<K,V> ) throws java.lang.Exception { org.springframework.data.gemfire.client.Region<K,V> ( org.springframework.data.gemfire.client.Region<K,V> ) ; org.springframework.data.gemfire.client.Region<K,V> ( org.springframework.data.gemfire.client.Region<K,V> ) ; org.springframework.data.gemfire.client.Region<K,V> ( org.springframework.data.gemfire.client.Region<K,V> ) ; org.springframework.data.gemfire.client.Region<K,V> ( org.springframework.data.gemfire.client.Region<K,V> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.client.Region<K,V> < K , V > org.springframework.data.gemfire.client.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.client.Region<K,V> ) throws java.lang.Exception { if ( org.springframework.data.gemfire.client.Resource != null ) { org.springframework.data.gemfire.client.Region<K,V> . loadSnapshot ( org.springframework.data.gemfire.client.Resource . getInputStream ( ) ) ; } return org.springframework.data.gemfire.client.Region<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.data.gemfire.client.Region<K,V> < K , V > org.springframework.data.gemfire.client.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.client.Region<K,V> ) { for ( Interest < K > org.springframework.data.gemfire.client.Interest<K> : nullSafeArray ( org.springframework.data.gemfire.client.Interest<K>[] , Interest .class ) ) { if ( org.springframework.data.gemfire.client.Interest<K> . isRegexType ( ) ) { org.springframework.data.gemfire.client.Region<K,V> . registerInterestRegex ( ( java.lang.String ) org.springframework.data.gemfire.client.Interest<K> . getKey ( ) , org.springframework.data.gemfire.client.Interest<K> . getPolicy ( ) , org.springframework.data.gemfire.client.Interest<K> . isDurable ( ) , org.springframework.data.gemfire.client.Interest<K> . isReceiveValues ( ) ) ; } else { org.springframework.data.gemfire.client.Region<K,V> . registerInterest ( org.springframework.data.gemfire.client.Interest<K> . getKey ( ) , org.springframework.data.gemfire.client.Interest<K> . getPolicy ( ) , org.springframework.data.gemfire.client.Interest<K> . isDurable ( ) , org.springframework.data.gemfire.client.Interest<K> . isReceiveValues ( ) ) ; } } return org.springframework.data.gemfire.client.Region<K,V> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.client.Region<K,V> < K , V > org.springframework.data.gemfire.client.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.client.Region<K,V> ) { if ( org.springframework.data.gemfire.client.CacheLoader<K,V> != null ) { org.springframework.data.gemfire.client.Region<K,V> . getAttributesMutator ( ) . setCacheLoader ( this . org.springframework.data.gemfire.client.CacheLoader<K,V> ) ; } return org.springframework.data.gemfire.client.Region<K,V> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.client.Region<K,V> < K , V > org.springframework.data.gemfire.client.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.client.Region<K,V> ) { if ( org.springframework.data.gemfire.client.CacheWriter<K,V> != null ) { org.springframework.data.gemfire.client.Region<K,V> . getAttributesMutator ( ) . setCacheWriter ( this . org.springframework.data.gemfire.client.CacheWriter<K,V> ) ; } return org.springframework.data.gemfire.client.Region<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { Region < K , V > org.springframework.data.gemfire.client.Region<K,V> = getObject ( ) ; if ( org.springframework.data.gemfire.client.Region<K,V> != null ) { if ( boolean ) { if ( ! org.springframework.data.gemfire.client.Region<K,V> . getRegionService ( ) . isClosed ( ) ) { try { org.springframework.data.gemfire.client.Region<K,V> . close ( ) ; } catch ( java.lang.Exception java.lang.Exception ) {					} } } if ( boolean ) { org.springframework.data.gemfire.client.Region<K,V> . destroyRegion ( ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( RegionAttributes < K , V > org.springframework.data.gemfire.client.RegionAttributes<K,V> ) { this . org.springframework.data.gemfire.client.RegionAttributes<K,V> = org.springframework.data.gemfire.client.RegionAttributes<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.gemfire.client.BeanFactory ) throws org.springframework.data.gemfire.client.BeansException { this . org.springframework.data.gemfire.client.BeanFactory = org.springframework.data.gemfire.client.BeanFactory ; }  <METHOD_END>
<METHOD_START> final boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; this . boolean = ( this . boolean && ! boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.gemfire.client.CacheListener<K,V> < K , V > [] org.springframework.data.gemfire.client.CacheListener<K,V>[] ) { this . org.springframework.data.gemfire.client.CacheListener<K,V>[] = org.springframework.data.gemfire.client.CacheListener<K,V>[] ; }  <METHOD_END>
<METHOD_START> public void void ( CacheLoader < K , V > org.springframework.data.gemfire.client.CacheLoader<K,V> ) { this . org.springframework.data.gemfire.client.CacheLoader<K,V> = org.springframework.data.gemfire.client.CacheLoader<K,V> ; }  <METHOD_END>
<METHOD_START> public void void ( CacheWriter < K , V > org.springframework.data.gemfire.client.CacheWriter<K,V> ) { this . org.springframework.data.gemfire.client.CacheWriter<K,V> = org.springframework.data.gemfire.client.CacheWriter<K,V> ; }  <METHOD_END>
<METHOD_START> public void void ( DataPolicy org.springframework.data.gemfire.client.DataPolicy ) { this . org.springframework.data.gemfire.client.DataPolicy = org.springframework.data.gemfire.client.DataPolicy ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public void void ( java.lang.String java.lang.String ) { DataPolicy org.springframework.data.gemfire.client.DataPolicy = new DataPolicyConverter ( ) . convert ( java.lang.String ) ; Assert . notNull ( org.springframework.data.gemfire.client.DataPolicy , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; void ( org.springframework.data.gemfire.client.DataPolicy ) ; }  <METHOD_END>
<METHOD_START> final boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; this . boolean = ( this . boolean && ! boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( EvictionAttributes org.springframework.data.gemfire.client.EvictionAttributes ) { this . org.springframework.data.gemfire.client.EvictionAttributes = org.springframework.data.gemfire.client.EvictionAttributes ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.gemfire.client.Interest<K> < K > [] org.springframework.data.gemfire.client.Interest<K>[] ) { this . org.springframework.data.gemfire.client.Interest<K>[] = org.springframework.data.gemfire.client.Interest<K>[] ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.client.Interest<K> < K > [] org.springframework.data.gemfire.client.Interest<K>[] ( ) { return this . org.springframework.data.gemfire.client.Interest<K>[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<K> < K > java.lang.Class<K> ) { this . java.lang.Class<K> = java.lang.Class<K> ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return ( java.lang.Boolean == null ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( final boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( Pool org.springframework.data.gemfire.client.Pool ) { Assert . notNull ( org.springframework.data.gemfire.client.Pool , STRING ) ; org.springframework.data.gemfire.client.ClientRegionFactory<K,V> ( org.springframework.data.gemfire.client.Pool . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( ClientRegionShortcut org.springframework.data.gemfire.client.ClientRegionShortcut ) { this . org.springframework.data.gemfire.client.ClientRegionShortcut = org.springframework.data.gemfire.client.ClientRegionShortcut ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.data.gemfire.client.Resource ) { this . org.springframework.data.gemfire.client.Resource = org.springframework.data.gemfire.client.Resource ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<V> < V > java.lang.Class<V> ) { this . java.lang.Class<V> = java.lang.Class<V> ; }  <METHOD_END>
