<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.rmi.server.RMIClientSocketFactory java.rmi.server.RMIClientSocketFactory ) { this . java.rmi.server.RMIClientSocketFactory = java.rmi.server.RMIClientSocketFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.rmi.server.RMIServerSocketFactory java.rmi.server.RMIServerSocketFactory ) { this . java.rmi.server.RMIServerSocketFactory = java.rmi.server.RMIServerSocketFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.rmi.registry.Registry java.rmi.registry.Registry ) { this . java.rmi.registry.Registry = java.rmi.registry.Registry ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.rmi.server.RMIClientSocketFactory java.rmi.server.RMIClientSocketFactory ) { this . java.rmi.server.RMIClientSocketFactory = java.rmi.server.RMIClientSocketFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.rmi.server.RMIServerSocketFactory java.rmi.server.RMIServerSocketFactory ) { this . java.rmi.server.RMIServerSocketFactory = java.rmi.server.RMIServerSocketFactory ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.rmi.RemoteException { void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.rmi.RemoteException { checkService ( ) ; if ( this . java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . java.rmi.server.RMIClientSocketFactory instanceof java.rmi.server.RMIServerSocketFactory ) { this . java.rmi.server.RMIServerSocketFactory = ( java.rmi.server.RMIServerSocketFactory ) this . java.rmi.server.RMIClientSocketFactory ; } if ( ( this . java.rmi.server.RMIClientSocketFactory != null && this . java.rmi.server.RMIServerSocketFactory == null ) || ( this . java.rmi.server.RMIClientSocketFactory == null && this . java.rmi.server.RMIServerSocketFactory != null ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . java.rmi.server.RMIClientSocketFactory instanceof java.rmi.server.RMIServerSocketFactory ) { this . java.rmi.server.RMIServerSocketFactory = ( java.rmi.server.RMIServerSocketFactory ) this . java.rmi.server.RMIClientSocketFactory ; } if ( this . java.rmi.server.RMIClientSocketFactory == null && this . java.rmi.server.RMIServerSocketFactory != null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . boolean = false ; if ( this . java.rmi.registry.Registry == null ) { this . java.rmi.registry.Registry = java.rmi.registry.Registry ( this . java.lang.String , this . int , this . java.rmi.server.RMIClientSocketFactory , this . java.rmi.server.RMIServerSocketFactory ) ; this . boolean = true ; } this . java.rmi.Remote = getObjectToExport ( ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . java.lang.String + STRING + this . java.rmi.registry.Registry ) ; } if ( this . java.rmi.server.RMIClientSocketFactory != null ) { java.rmi.server.UnicastRemoteObject . java.rmi.Remote ( this . java.rmi.Remote , this . int , this . java.rmi.server.RMIClientSocketFactory , this . java.rmi.server.RMIServerSocketFactory ) ; } else { java.rmi.server.UnicastRemoteObject . java.rmi.Remote ( this . java.rmi.Remote , this . int ) ; } try { if ( this . boolean ) { this . java.rmi.registry.Registry . void ( this . java.lang.String , this . java.rmi.Remote ) ; } else { this . java.rmi.registry.Registry . void ( this . java.lang.String , this . java.rmi.Remote ) ; } } catch ( java.rmi.AlreadyBoundException java.rmi.AlreadyBoundException ) { void ( ) ; throw new java.lang.IllegalStateException ( STRING + this . java.lang.String + STRING + java.rmi.AlreadyBoundException . java.lang.String ( ) ) ; } catch ( java.rmi.RemoteException java.rmi.RemoteException ) { void ( ) ; throw java.rmi.RemoteException ; } }  <METHOD_END>
<METHOD_START> protected java.rmi.registry.Registry java.rmi.registry.Registry ( java.lang.String java.lang.String , int int , java.rmi.server.RMIClientSocketFactory java.rmi.server.RMIClientSocketFactory , java.rmi.server.RMIServerSocketFactory java.rmi.server.RMIServerSocketFactory )			throws java.rmi.RemoteException { if ( java.lang.String != null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + int + STRING + java.lang.String + STRING ) ; } java.rmi.registry.Registry java.rmi.registry.Registry = java.rmi.registry.LocateRegistry . java.rmi.registry.Registry ( java.lang.String , int , java.rmi.server.RMIClientSocketFactory ) ; void ( java.rmi.registry.Registry ) ; return java.rmi.registry.Registry ; } else { return java.rmi.registry.Registry ( int , java.rmi.server.RMIClientSocketFactory , java.rmi.server.RMIServerSocketFactory ) ; } }  <METHOD_END>
<METHOD_START> protected java.rmi.registry.Registry java.rmi.registry.Registry ( int int , java.rmi.server.RMIClientSocketFactory java.rmi.server.RMIClientSocketFactory , java.rmi.server.RMIServerSocketFactory java.rmi.server.RMIServerSocketFactory )			throws java.rmi.RemoteException { if ( java.rmi.server.RMIClientSocketFactory != null ) { if ( this . boolean ) { logger . info ( STRING ) ; return java.rmi.registry.LocateRegistry . java.rmi.registry.Registry ( int , java.rmi.server.RMIClientSocketFactory , java.rmi.server.RMIServerSocketFactory ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + int + STRING ) ; } synchronized ( java.rmi.registry.LocateRegistry .class ) { try { java.rmi.registry.Registry java.rmi.registry.Registry = java.rmi.registry.LocateRegistry . java.rmi.registry.Registry ( null , int , java.rmi.server.RMIClientSocketFactory ) ; void ( java.rmi.registry.Registry ) ; return java.rmi.registry.Registry ; } catch ( java.rmi.RemoteException java.rmi.RemoteException ) { logger . debug ( STRING , java.rmi.RemoteException ) ; logger . info ( STRING ) ; return java.rmi.registry.LocateRegistry . java.rmi.registry.Registry ( int , java.rmi.server.RMIClientSocketFactory , java.rmi.server.RMIServerSocketFactory ) ; } } } else { return java.rmi.registry.Registry ( int ) ; } }  <METHOD_END>
<METHOD_START> protected java.rmi.registry.Registry java.rmi.registry.Registry ( int int ) throws java.rmi.RemoteException { if ( this . boolean ) { logger . info ( STRING ) ; return java.rmi.registry.LocateRegistry . java.rmi.registry.Registry ( int ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + int + STRING ) ; } synchronized ( java.rmi.registry.LocateRegistry .class ) { try { java.rmi.registry.Registry java.rmi.registry.Registry = java.rmi.registry.LocateRegistry . java.rmi.registry.Registry ( int ) ; void ( java.rmi.registry.Registry ) ; return java.rmi.registry.Registry ; } catch ( java.rmi.RemoteException java.rmi.RemoteException ) { logger . debug ( STRING , java.rmi.RemoteException ) ; logger . info ( STRING ) ; return java.rmi.registry.LocateRegistry . java.rmi.registry.Registry ( int ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( java.rmi.registry.Registry java.rmi.registry.Registry ) throws java.rmi.RemoteException { java.rmi.registry.Registry . java.lang.String[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.rmi.RemoteException { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this . java.lang.String + STRING + ( this . boolean ? ( STRING + this . int + STRING ) : STRING ) ) ; } try { this . java.rmi.registry.Registry . void ( this . java.lang.String ) ; } catch ( java.rmi.NotBoundException java.rmi.NotBoundException ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + this . java.lang.String + STRING + ( this . boolean ? ( STRING + this . int + STRING ) : STRING ) , java.rmi.NotBoundException ) ; } } finally { void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { try { java.rmi.server.UnicastRemoteObject . boolean ( this . java.rmi.Remote , true ) ; } catch ( java.rmi.NoSuchObjectException java.rmi.NoSuchObjectException ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + this . java.lang.String + STRING , java.rmi.NoSuchObjectException ) ; } } }  <METHOD_END>
