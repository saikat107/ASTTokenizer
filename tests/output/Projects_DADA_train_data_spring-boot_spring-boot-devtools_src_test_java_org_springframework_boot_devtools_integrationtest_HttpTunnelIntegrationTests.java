<METHOD_START> @ BeforeClass @ AfterClass public static void void ( ) { ReflectionTestUtils . setField ( TomcatURLStreamHandlerFactory .class , STRING , null ) ; ReflectionTestUtils . setField ( java.net.URL .class , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + this . org.springframework.boot.devtools.integrationtest.HttpTunnelIntegrationTests.Config . int + STRING ; ResponseEntity < java.lang.String > org.springframework.boot.devtools.integrationtest.ResponseEntity<java.lang.String> = new TestRestTemplate ( ) . getForEntity ( java.lang.String , java.lang.String .class ) ; assertThat ( org.springframework.boot.devtools.integrationtest.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( org.springframework.boot.devtools.integrationtest.ResponseEntity<java.lang.String> . getBody ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + this . org.springframework.boot.devtools.integrationtest.HttpTunnelIntegrationTests.Config . int + STRING ; ResponseEntity < java.lang.String > org.springframework.boot.devtools.integrationtest.ResponseEntity<java.lang.String> = new TestRestTemplate ( ) . getForEntity ( java.lang.String , java.lang.String .class ) ; assertThat ( org.springframework.boot.devtools.integrationtest.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( org.springframework.boot.devtools.integrationtest.ResponseEntity<java.lang.String> . getBody ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.integrationtest.ServletWebServerFactory org.springframework.boot.devtools.integrationtest.ServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( this . int ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.integrationtest.DispatcherFilter org.springframework.boot.devtools.integrationtest.DispatcherFilter ( ) { PortProvider org.springframework.boot.devtools.integrationtest.PortProvider = new StaticPortProvider ( this . int ) ; TargetServerConnection org.springframework.boot.devtools.integrationtest.TargetServerConnection = new SocketTargetServerConnection ( org.springframework.boot.devtools.integrationtest.PortProvider ) ; HttpTunnelServer org.springframework.boot.devtools.integrationtest.HttpTunnelServer = new HttpTunnelServer ( org.springframework.boot.devtools.integrationtest.TargetServerConnection ) ; HandlerMapper org.springframework.boot.devtools.integrationtest.HandlerMapper = new UrlHandlerMapper ( STRING , new HttpTunnelServerHandler ( org.springframework.boot.devtools.integrationtest.HttpTunnelServer ) ) ; java.util.Collection<org.springframework.boot.devtools.integrationtest.HandlerMapper> < HandlerMapper > java.util.Collection<org.springframework.boot.devtools.integrationtest.HandlerMapper> = java.util.Collections . java.util.Set ( org.springframework.boot.devtools.integrationtest.HandlerMapper ) ; Dispatcher org.springframework.boot.devtools.integrationtest.Dispatcher = new Dispatcher ( AccessManager . PERMIT_ALL , java.util.Collection<org.springframework.boot.devtools.integrationtest.HandlerMapper> ) ; return new DispatcherFilter ( org.springframework.boot.devtools.integrationtest.Dispatcher ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.integrationtest.TunnelClient org.springframework.boot.devtools.integrationtest.TunnelClient ( ) { java.lang.String java.lang.String = STRING + this . int + STRING ; TunnelConnection org.springframework.boot.devtools.integrationtest.TunnelConnection = new HttpTunnelConnection ( java.lang.String , new SimpleClientHttpRequestFactory ( ) ) ; return new TunnelClient ( this . int , org.springframework.boot.devtools.integrationtest.TunnelConnection ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.integrationtest.DispatcherServlet org.springframework.boot.devtools.integrationtest.DispatcherServlet ( ) { return new DispatcherServlet ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.integrationtest.HttpTunnelIntegrationTests.MyController org.springframework.boot.devtools.integrationtest.HttpTunnelIntegrationTests.MyController ( ) { return new org.springframework.boot.devtools.integrationtest.HttpTunnelIntegrationTests.MyController ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
