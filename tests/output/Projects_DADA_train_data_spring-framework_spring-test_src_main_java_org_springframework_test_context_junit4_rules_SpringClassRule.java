<METHOD_START> @ java.lang.Override public org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , Description org.springframework.test.context.junit4.rules.Description ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.junit4.rules.Description . getTestClass ( ) ; if ( org.springframework.test.context.junit4.rules.Log . isDebugEnabled ( ) ) { org.springframework.test.context.junit4.rules.Log . debug ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } void ( java.lang.Class<> ) ; TestContextManager org.springframework.test.context.junit4.rules.TestContextManager = org.springframework.test.context.junit4.rules.TestContextManager ( java.lang.Class<> ) ; Statement org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ; org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ( org.springframework.test.context.junit4.rules.Statement , org.springframework.test.context.junit4.rules.TestContextManager ) ; org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ( org.springframework.test.context.junit4.rules.Statement , org.springframework.test.context.junit4.rules.TestContextManager ) ; org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ( org.springframework.test.context.junit4.rules.Statement , java.lang.Class<> ) ; org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ( org.springframework.test.context.junit4.rules.Statement , java.lang.Class<> ) ; return org.springframework.test.context.junit4.rules.Statement ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , TestContextManager org.springframework.test.context.junit4.rules.TestContextManager ) { return new RunBeforeTestClassCallbacks ( org.springframework.test.context.junit4.rules.Statement , org.springframework.test.context.junit4.rules.TestContextManager ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , TestContextManager org.springframework.test.context.junit4.rules.TestContextManager ) { return new RunAfterTestClassCallbacks ( org.springframework.test.context.junit4.rules.Statement , org.springframework.test.context.junit4.rules.TestContextManager ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , java.lang.Class<?> < ? > java.lang.Class<?> ) { return new ProfileValueChecker ( org.springframework.test.context.junit4.rules.Statement , java.lang.Class<> , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.junit4.rules.Statement org.springframework.test.context.junit4.rules.Statement ( Statement org.springframework.test.context.junit4.rules.Statement , java.lang.Class<?> < ? > java.lang.Class<?> ) { return new org.springframework.test.context.junit4.rules.SpringClassRule.TestContextManagerCacheEvictor ( org.springframework.test.context.junit4.rules.Statement , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.reflect.Field java.lang.reflect.Field = java.util.Optional<java.lang.reflect.Field> ( java.lang.Class<> ) . java.lang.reflect.Field ( ( ) new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.Class<> . java.lang.String ( ) ) ) ) ; Assert . state ( java.lang.reflect.Field . boolean ( Rule .class ) , ( ) String . format ( STRING + STRING , ruleField ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<java.lang.reflect.Field> < java.lang.reflect.Field > java.util.Optional<java.lang.reflect.Field> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Arrays . java.util.stream.Stream<java.lang.reflect.Field> ( java.lang.Class<> . java.lang.reflect.Field[] ( ) ) . java.util.stream.Stream<java.lang.reflect.Field> ( java.lang.reflect.Field -> ! java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) ) . java.util.stream.Stream<java.lang.reflect.Field> ( java.lang.reflect.Field -> java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) ) . java.util.stream.Stream<java.lang.reflect.Field> ( java.lang.reflect.Field -> SpringMethodRule .class . boolean ( java.lang.reflect.Field . java.lang.Class<?> ( ) ) ) . java.util.Optional<java.lang.reflect.Field> ( ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.test.context.junit4.rules.TestContextManager org.springframework.test.context.junit4.rules.TestContextManager ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.util.Map<java.lang.Class<?>,org.springframework.test.context.junit4.rules.TestContextManager> . computeIfAbsent ( java.lang.Class<> , TestContextManager ::new ) ; }  <METHOD_END>
<METHOD_START> void ( Statement org.springframework.test.context.junit4.rules.Statement , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.test.context.junit4.rules.Statement = org.springframework.test.context.junit4.rules.Statement ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { try { org.springframework.test.context.junit4.rules.Statement . evaluate ( ) ; } finally { java.util.Map<java.lang.Class<?>,org.springframework.test.context.junit4.rules.TestContextManager> . remove ( java.lang.Class<> ) ; } }  <METHOD_END>
