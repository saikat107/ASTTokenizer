<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessorUnitTests.PossibleRepository .class . java.lang.reflect.Method ( STRING , Flux .class ) ; ReactiveCassandraParameterAccessor org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor = new ReactiveCassandraParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method ) , new java.lang.Object [] { Flux . just ( STRING ) } ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor . getDataType ( NUMBER ) ) . isEqualTo ( DataType . varchar ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessorUnitTests.PossibleRepository .class . java.lang.reflect.Method ( STRING , Mono .class ) ; ReactiveCassandraParameterAccessor org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor = new ReactiveCassandraParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method ) , new java.lang.Object [] { Flux . just ( LocalDateTime . of ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) } ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor . getDataType ( NUMBER ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessorUnitTests.PossibleRepository .class . java.lang.reflect.Method ( STRING , Single .class ) ; ReactiveCassandraParameterAccessor org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor = new ReactiveCassandraParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method ) , new java.lang.Object [] { Single . just ( LocalDateTime . of ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) } ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor . getDataType ( NUMBER ) ) . isEqualTo ( DataType . date ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessorUnitTests.PossibleRepository .class . java.lang.reflect.Method ( STRING , Mono .class ) ; ReactiveCassandraParameterAccessor org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor = new ReactiveCassandraParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method ) , new java.lang.Object [] { Mono . just ( STRING ) } ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor . getDataType ( NUMBER ) ) . isEqualTo ( DataType . date ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessorUnitTests.PossibleRepository .class . java.lang.reflect.Method ( STRING , Mono .class ) ; ReactiveCassandraParameterAccessor org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor = new ReactiveCassandraParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method ) , new java.lang.Object [] { Mono . just ( STRING ) } ) ; assertThat ( org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor . getDataType ( NUMBER ) ) . isEqualTo ( DataType . date ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.CassandraQueryMethod org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( java.lang.reflect.Method java.lang.reflect.Method ) { return new ReactiveCassandraQueryMethod ( java.lang.reflect.Method , org.springframework.data.cassandra.repository.query.RepositoryMetadata , org.springframework.data.cassandra.repository.query.ProjectionFactory , org.springframework.data.cassandra.repository.query.CassandraMappingContext ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.AllPossibleTypes> < AllPossibleTypes > org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.AllPossibleTypes> ( Flux < java.lang.String > org.springframework.data.cassandra.repository.query.Flux<java.lang.String> );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.AllPossibleTypes> < AllPossibleTypes > org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.AllPossibleTypes> ( Mono < LocalDateTime > org.springframework.data.cassandra.repository.query.Mono<org.springframework.data.cassandra.repository.query.LocalDateTime> );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.AllPossibleTypes> < AllPossibleTypes > org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.AllPossibleTypes> ( @ CassandraType ( type = DataType . Name . DATE ) Single < LocalDateTime > org.springframework.data.cassandra.repository.query.Single<org.springframework.data.cassandra.repository.query.LocalDateTime> );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.AllPossibleTypes> < AllPossibleTypes > org.springframework.data.cassandra.repository.query.Flux<org.springframework.data.cassandra.repository.query.AllPossibleTypes> ( @ CassandraType ( type = DataType . Name . DATE ) Mono < java.lang.Object > org.springframework.data.cassandra.repository.query.Mono<java.lang.Object> );  <METHOD_END>
