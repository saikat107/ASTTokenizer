<METHOD_START> public void ( Property org.springframework.data.couchbase.core.mapping.Property , final CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<?> , final SimpleTypeHolder org.springframework.data.couchbase.core.mapping.SimpleTypeHolder , final FieldNamingStrategy org.springframework.data.couchbase.core.mapping.FieldNamingStrategy ) { super( org.springframework.data.couchbase.core.mapping.Property , org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<> , org.springframework.data.couchbase.core.mapping.SimpleTypeHolder ); this . org.springframework.data.couchbase.core.mapping.FieldNamingStrategy = org.springframework.data.couchbase.core.mapping.FieldNamingStrategy == null ? PropertyNameFieldNamingStrategy . INSTANCE : org.springframework.data.couchbase.core.mapping.FieldNamingStrategy ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.core.mapping.Association<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> < CouchbasePersistentProperty > org.springframework.data.couchbase.core.mapping.Association<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> ( ) { return new Association < CouchbasePersistentProperty > ( this , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.util.Optional<org.springframework.data.couchbase.core.mapping.Field> < Field > java.util.Optional<org.springframework.data.couchbase.core.mapping.Field> = findAnnotation ( com . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase .class ) ; return java.util.Optional<org.springframework.data.couchbase.core.mapping.Field> . map ( Field :: value ) . filter ( StringUtils :: hasText ) . orElseGet ( ( ) { String fieldName = fieldNamingStrategy . getFieldName ( this ) ; if ( ! StringUtils . hasText ( fieldName ) ) { throw new MappingException ( String . format ( STRING , this , fieldNamingStrategy . getClass ( ) ) ) ; } return fieldName ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isAnnotationPresent ( Id .class ) || super. isIdProperty ( ) ; }  <METHOD_END>
