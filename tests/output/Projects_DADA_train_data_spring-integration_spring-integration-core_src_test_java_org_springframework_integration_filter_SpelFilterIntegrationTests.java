<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.filter.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; this . org.springframework.integration.filter.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; this . org.springframework.integration.filter.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; this . org.springframework.integration.filter.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( - NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( new java.lang.Integer ( - NUMBER ) , org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.filter.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; this . org.springframework.integration.filter.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; this . org.springframework.integration.filter.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; this . org.springframework.integration.filter.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.filter.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( int int ) { return int % NUMBER == NUMBER ; }  <METHOD_END>
