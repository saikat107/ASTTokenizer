<METHOD_START> public void ( Message < ? > org.springframework.integration.dispatcher.Message<?> , java.lang.String java.lang.String , java.util.List<? extends java.lang.Exception> < ? extends java.lang.Exception > java.util.List<? extends java.lang.Exception> ) { super( org.springframework.integration.dispatcher.Message<> , java.lang.String ); this . initCause ( java.util.List<> . get ( NUMBER ) ) ; this . java.util.List<? extends java.lang.Exception> = java.util.List<> ; }  <METHOD_END>
<METHOD_START> public java.util.List<? extends java.lang.Exception> < ? extends java.lang.Exception > java.util.List<? extends java.lang.Exception> ( ) { return java.util.Collections . java.util.List<> ( this . java.util.List<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = super. getMessage ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ( java.lang.String ) + STRING ) ; for ( java.lang.Exception java.lang.Exception : this . java.util.List<> ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING + java.lang.Exception . java.lang.String ( ) + STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = STRING ; } else if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String + STRING ; } return java.lang.String ; }  <METHOD_END>
