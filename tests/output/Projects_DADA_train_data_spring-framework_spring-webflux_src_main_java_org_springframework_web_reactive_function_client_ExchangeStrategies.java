<METHOD_START> java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> ( )  <METHOD_END>
<METHOD_START> java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ( )  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.client.ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies ( ) { return org.springframework.web.reactive.function.client.ExchangeStrategies.Builder ( ) . org.springframework.web.reactive.function.client.ExchangeStrategies ( ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.client.ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies ( ApplicationContext org.springframework.web.reactive.function.client.ApplicationContext ) { return org.springframework.web.reactive.function.client.ExchangeStrategies.Builder ( org.springframework.web.reactive.function.client.ApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.client.ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies ( java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> , java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ) { return new org.springframework.web.reactive.function.client.ExchangeStrategies ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> ( ) { return java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> ( java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> ) ; } @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ( ) { return java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ( java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ) ; } private < T > java.util.function.Supplier<java.util.stream.Stream<T>> < java.util.stream.Stream<T> < T > > java.util.function.Supplier<java.util.stream.Stream<T>> ( java.util.function.Supplier<java.util.stream.Stream<T>> < java.util.stream.Stream<T> < T > > java.util.function.Supplier<java.util.stream.Stream<T>> ) { return java.util.function.Supplier<java.util.stream.Stream<T>> != null ? java.util.function.Supplier<java.util.stream.Stream<T>> : java.util.stream.Stream :: java.util.stream.Stream<T> ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> ( ) { return java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> ( java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageReader<?>>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ( ) { return java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ( java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ) ; }  <METHOD_END>
<METHOD_START> private < T > java.util.function.Supplier<java.util.stream.Stream<T>> < java.util.stream.Stream<T> < T > > java.util.function.Supplier<java.util.stream.Stream<T>> ( java.util.function.Supplier<java.util.stream.Stream<T>> < java.util.stream.Stream<T> < T > > java.util.function.Supplier<java.util.stream.Stream<T>> ) { return java.util.function.Supplier<java.util.stream.Stream<T>> != null ? java.util.function.Supplier<java.util.stream.Stream<T>> : java.util.stream.Stream :: java.util.stream.Stream<T> ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.client.ExchangeStrategies.Builder org.springframework.web.reactive.function.client.ExchangeStrategies.Builder ( ) { DefaultExchangeStrategiesBuilder org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder = new DefaultExchangeStrategiesBuilder ( ) ; org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder . defaultConfiguration ( ) ; return org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.client.ExchangeStrategies.Builder org.springframework.web.reactive.function.client.ExchangeStrategies.Builder ( ApplicationContext org.springframework.web.reactive.function.client.ApplicationContext ) { Assert . notNull ( org.springframework.web.reactive.function.client.ApplicationContext , STRING ) ; DefaultExchangeStrategiesBuilder org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder = new DefaultExchangeStrategiesBuilder ( ) ; org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder . applicationContext ( org.springframework.web.reactive.function.client.ApplicationContext ) ; return org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.client.ExchangeStrategies.Builder org.springframework.web.reactive.function.client.ExchangeStrategies.Builder ( ) { return new DefaultExchangeStrategiesBuilder ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.client.ExchangeStrategies.Builder org.springframework.web.reactive.function.client.ExchangeStrategies.Builder ( HttpMessageReader < ? > org.springframework.web.reactive.function.client.HttpMessageReader<?> );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.client.ExchangeStrategies.Builder org.springframework.web.reactive.function.client.ExchangeStrategies.Builder ( Decoder < ? > org.springframework.web.reactive.function.client.Decoder<?> );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.client.ExchangeStrategies.Builder org.springframework.web.reactive.function.client.ExchangeStrategies.Builder ( HttpMessageWriter < ? > org.springframework.web.reactive.function.client.HttpMessageWriter<?> );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.client.ExchangeStrategies.Builder org.springframework.web.reactive.function.client.ExchangeStrategies.Builder ( Encoder < ? > org.springframework.web.reactive.function.client.Encoder<?> );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.client.ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies ( )  <METHOD_END>
