<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new AnnotationDetectionFieldCallback ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationDetectionFieldCallback org.springframework.data.util.AnnotationDetectionFieldCallback = new AnnotationDetectionFieldCallback ( Autowired .class ) ; ReflectionUtils . doWithFields ( org.springframework.data.util.AnnotationDetectionFieldCallbackUnitTests.Sample .class , org.springframework.data.util.AnnotationDetectionFieldCallback ) ; assertThat ( org.springframework.data.util.AnnotationDetectionFieldCallback . getType ( ) ) . hasValue ( java.lang.String .class ) ; assertThat ( org.springframework.data.util.AnnotationDetectionFieldCallback . getValue ( new org.springframework.data.util.AnnotationDetectionFieldCallbackUnitTests.Sample ( STRING ) ) ) . hasValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationDetectionFieldCallback org.springframework.data.util.AnnotationDetectionFieldCallback = new AnnotationDetectionFieldCallback ( Autowired .class ) ; ReflectionUtils . doWithFields ( org.springframework.data.util.AnnotationDetectionFieldCallbackUnitTests.Empty .class , org.springframework.data.util.AnnotationDetectionFieldCallback ) ; assertThat ( org.springframework.data.util.AnnotationDetectionFieldCallback . getType ( ) ) . isNotPresent ( ) ; assertThat ( org.springframework.data.util.AnnotationDetectionFieldCallback . getValue ( new org.springframework.data.util.AnnotationDetectionFieldCallbackUnitTests.Empty ( ) ) ) . isNotPresent ( ) ; }  <METHOD_END>
