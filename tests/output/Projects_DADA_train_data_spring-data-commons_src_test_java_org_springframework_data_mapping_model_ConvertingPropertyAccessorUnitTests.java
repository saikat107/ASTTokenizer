<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ConvertingPropertyAccessor ( null , org.springframework.data.mapping.model.ConversionService ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ConvertingPropertyAccessor ( new BeanWrapper <> ( new java.lang.Object ( ) ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity ( ) ; assertThat ( org.springframework.data.mapping.model.ConvertingPropertyAccessor ( java.lang.Object , org.springframework.data.mapping.model.ConversionService ) . getBean ( ) ) . isEqualTo ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity = new org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity ( ) ; org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity . java.lang.Long = NUMBER ; assertThat ( java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> ( ) ) . hasValueSatisfying ( it -> assertThat ( getAccessor ( entity , CONVERSION_SERVICE ) . getProperty ( it , String .class ) ) . hasValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConversionService org.springframework.data.mapping.model.ConversionService = mock ( ConversionService .class ) ; assertThat ( java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> ( ) ) . hasValueSatisfying ( it -> { assertThat ( getAccessor ( new Entity ( ) , conversionService ) . getProperty ( it , Number .class ) ) . isNotPresent ( ) ; verify ( conversionService , times ( NUMBER ) ) . convert ( NUMBER , Number .class ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity = new org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity ( ) ; org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity . java.lang.Long = NUMBER ; ConversionService org.springframework.data.mapping.model.ConversionService = mock ( ConversionService .class ) ; assertThat ( java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> ( ) ) . hasValueSatisfying ( it -> { assertThat ( getAccessor ( entity , conversionService ) . getProperty ( it , Number .class ) ) . hasValue ( NUMBER ) ; verify ( conversionService , times ( NUMBER ) ) . convert ( NUMBER , Number .class ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity = new org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity ( ) ; assertThat ( java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> ( ) ) . hasValueSatisfying ( property -> { getAccessor ( entity , CONVERSION_SERVICE ) . setProperty ( property , Optional . of ( STRING ) ) ; assertThat ( entity . id ) . isEqualTo ( NUMBER ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> ( ) ) . hasValueSatisfying ( it -> { getAccessor ( new Entity ( ) , mock ( ConversionService .class ) ) . setProperty ( it , Optional . of ( NUMBER ) ) ; verify ( mock ( ConversionService .class ) , times ( NUMBER ) ) . convert ( NUMBER , Long .class ) ; } ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mapping.model.ConvertingPropertyAccessor org.springframework.data.mapping.model.ConvertingPropertyAccessor ( java.lang.Object java.lang.Object , ConversionService org.springframework.data.mapping.model.ConversionService ) { PersistentPropertyAccessor org.springframework.data.mapping.model.PersistentPropertyAccessor = new BeanWrapper <> ( java.lang.Object ) ; return new ConvertingPropertyAccessor ( org.springframework.data.mapping.model.PersistentPropertyAccessor , org.springframework.data.mapping.model.ConversionService ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> < SamplePersistentProperty > java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> ( ) { SampleMappingContext org.springframework.data.mapping.model.SampleMappingContext = new SampleMappingContext ( ) ; BasicPersistentEntity < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.model.BasicPersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.SampleMappingContext . getRequiredPersistentEntity ( org.springframework.data.mapping.model.ConvertingPropertyAccessorUnitTests.Entity .class ) ; return org.springframework.data.mapping.model.BasicPersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getPersistentProperty ( STRING ) ; }  <METHOD_END>
