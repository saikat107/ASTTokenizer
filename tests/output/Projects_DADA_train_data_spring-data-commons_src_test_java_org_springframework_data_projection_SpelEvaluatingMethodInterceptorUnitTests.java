<METHOD_START> @ Test public void void ( ) java.lang.Throwable { when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Projection .class . java.lang.reflect.Method ( STRING ) ) ; MethodInterceptor org.springframework.data.projection.MethodInterceptor = new SpelEvaluatingMethodInterceptor ( org.springframework.data.projection.MethodInterceptor , new org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Target ( ) , null , org.springframework.data.projection.SpelExpressionParser , org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Projection .class ) ; assertThat ( org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Projection .class . java.lang.reflect.Method ( STRING ) ) ; DefaultListableBeanFactory org.springframework.data.projection.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.data.projection.DefaultListableBeanFactory . registerSingleton ( STRING , new org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.SomeBean ( ) ) ; SpelEvaluatingMethodInterceptor org.springframework.data.projection.SpelEvaluatingMethodInterceptor = new SpelEvaluatingMethodInterceptor ( org.springframework.data.projection.MethodInterceptor , new org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Target ( ) , org.springframework.data.projection.DefaultListableBeanFactory , org.springframework.data.projection.SpelExpressionParser , org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Projection .class ) ; assertThat ( org.springframework.data.projection.SpelEvaluatingMethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Projection .class . java.lang.reflect.Method ( STRING ) ) ; SpelEvaluatingMethodInterceptor org.springframework.data.projection.SpelEvaluatingMethodInterceptor = new SpelEvaluatingMethodInterceptor ( org.springframework.data.projection.MethodInterceptor , new org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Target ( ) , new DefaultListableBeanFactory ( ) , org.springframework.data.projection.SpelExpressionParser , org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Projection .class ) ; org.springframework.data.projection.SpelEvaluatingMethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ; verify ( org.springframework.data.projection.MethodInterceptor ) . invoke ( org.springframework.data.projection.MethodInvocation ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Throwable { new SpelEvaluatingMethodInterceptor ( org.springframework.data.projection.MethodInterceptor , new org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Target ( ) , new DefaultListableBeanFactory ( ) , org.springframework.data.projection.SpelExpressionParser , org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.InvalidProjection .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Projection .class . java.lang.reflect.Method ( STRING ) ) ; SpelEvaluatingMethodInterceptor org.springframework.data.projection.SpelEvaluatingMethodInterceptor = new SpelEvaluatingMethodInterceptor ( org.springframework.data.projection.MethodInterceptor , java.util.Map<java.lang.String,java.lang.Object> , new DefaultListableBeanFactory ( ) , org.springframework.data.projection.SpelExpressionParser , org.springframework.data.projection.SpelEvaluatingMethodInterceptorUnitTests.Projection .class ) ; assertThat ( org.springframework.data.projection.SpelEvaluatingMethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Value ( STRING ) java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ Value ( STRING ) java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ Value ( STRING ) java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
