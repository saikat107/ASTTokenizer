<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.solr.core.query.HighlightOptions = new HighlightOptions ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.core.query.HighlightOptions . getFields ( ) , IsEmptyCollection . emptyCollectionOf ( Field .class ) ) ; Assert . assertThat ( org.springframework.data.solr.core.query.HighlightOptions . getFieldsWithHighlightParameters ( ) , IsEmptyCollection . emptyCollectionOf ( FieldWithHighlightParameters .class ) ) ; Assert . assertThat ( org.springframework.data.solr.core.query.HighlightOptions . getHighlightParameters ( ) , IsEmptyCollection . emptyCollectionOf ( HighlightParameter .class ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.HighlightOptions . getQuery ( ) ) ; Assert . assertFalse ( org.springframework.data.solr.core.query.HighlightOptions . hasFields ( ) ) ; Assert . assertFalse ( org.springframework.data.solr.core.query.HighlightOptions . hasQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.query.HighlightOptions . addField ( ( Field ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.query.HighlightOptions . addField ( ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.query.HighlightOptions . addField ( org.springframework.data.solr.core.query.Field ) ; org.springframework.data.solr.core.query.HighlightOptions . addField ( org.springframework.data.solr.core.query.Field ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.HighlightOptions . hasFields ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.query.HighlightOptions . getFields ( ) , Matchers . contains ( org.springframework.data.solr.core.query.Field , org.springframework.data.solr.core.query.Field ) ) ; Assert . assertThat ( org.springframework.data.solr.core.query.HighlightOptions . getFieldsWithHighlightParameters ( ) , IsEmptyCollection . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.query.HighlightOptions . addField ( org.springframework.data.solr.core.query.Field ) ; org.springframework.data.solr.core.query.HighlightOptions . addField ( org.springframework.data.solr.core.query.Field ) ; org.springframework.data.solr.core.query.HighlightOptions . addField ( org.springframework.data.solr.core.query.FieldWithHighlightParameters ) ; Assert . assertThat ( org.springframework.data.solr.core.query.HighlightOptions . getFields ( ) , Matchers . contains ( org.springframework.data.solr.core.query.Field , org.springframework.data.solr.core.query.Field , org.springframework.data.solr.core.query.FieldWithHighlightParameters ) ) ; Assert . assertThat ( org.springframework.data.solr.core.query.HighlightOptions . getFieldsWithHighlightParameters ( ) , Matchers . contains ( org.springframework.data.solr.core.query.FieldWithHighlightParameters ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.query.HighlightOptions . setQuery ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.HighlightOptions . hasQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.query.HighlightOptions . addHighlightParameter ( java.lang.String , java.lang.String ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.HighlightOptions . getHighlightParameters ( ) . size ( ) ) ; HighlightParameter org.springframework.data.solr.core.query.HighlightParameter = org.springframework.data.solr.core.query.HighlightOptions . getHighlightParameters ( ) . iterator ( ) . next ( ) ; Assert . assertEquals ( java.lang.String , org.springframework.data.solr.core.query.HighlightParameter . getName ( ) ) ; Assert . assertEquals ( java.lang.String , org.springframework.data.solr.core.query.HighlightParameter . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.query.HighlightOptions . addHighlightParameter ( null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.query.HighlightOptions . addHighlightParameter ( java.lang.String , java.lang.String ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.HighlightOptions . getHighlightParameters ( ) . size ( ) ) ; java.lang.String java.lang.String = org.springframework.data.solr.core.query.HighlightOptions . getHighlightParameterValue ( java.lang.String ) ; Assert . assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.query.HighlightOptions . addHighlightParameter ( java.lang.String , java.lang.String ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.HighlightOptions . getHighlightParameters ( ) . size ( ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.HighlightOptions . getHighlightParameterValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.query.HighlightOptions . addHighlightParameter ( java.lang.String , java.lang.String ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.query.HighlightOptions . getHighlightParameters ( ) . size ( ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.HighlightOptions . getHighlightParameterValue ( null ) ) ; }  <METHOD_END>
