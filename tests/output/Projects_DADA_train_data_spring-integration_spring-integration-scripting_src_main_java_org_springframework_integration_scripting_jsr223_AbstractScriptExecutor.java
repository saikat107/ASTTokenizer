<METHOD_START> protected void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . javax.script.ScriptEngine = new javax.script.ScriptEngineManager ( ) . javax.script.ScriptEngine ( this . java.lang.String ) ; Assert . notNull ( this . javax.script.ScriptEngine , java.lang.String ( this . java.lang.String ) ) ; if ( this . org.springframework.integration.scripting.jsr223.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.scripting.jsr223.Log . debug ( STRING + this . javax.script.ScriptEngine . javax.script.ScriptEngineFactory ( ) . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ScriptSource org.springframework.integration.scripting.jsr223.ScriptSource , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.Object java.lang.Object ; try { java.lang.String java.lang.String = org.springframework.integration.scripting.jsr223.ScriptSource . getScriptAsString ( ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; if ( this . org.springframework.integration.scripting.jsr223.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.scripting.jsr223.Log . debug ( STRING + java.lang.String ) ; } javax.script.Bindings javax.script.Bindings = null ; if ( java.util.Map<java.lang.String,java.lang.Object> != null && java.util.Map<java.lang.String,java.lang.Object> . int ( ) > NUMBER ) { javax.script.Bindings = new javax.script.SimpleBindings ( java.util.Map<java.lang.String,java.lang.Object> ) ; java.lang.Object = this . javax.script.ScriptEngine . java.lang.Object ( java.lang.String , javax.script.Bindings ) ; } else { java.lang.Object = this . javax.script.ScriptEngine . java.lang.Object ( java.lang.String ) ; } java.lang.Object = java.lang.Object ( java.lang.Object , this . javax.script.ScriptEngine , java.lang.String , javax.script.Bindings ) ; if ( this . org.springframework.integration.scripting.jsr223.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.scripting.jsr223.Log . debug ( STRING + ( new java.util.Date ( ) . long ( ) - java.util.Date . long ( ) ) + STRING ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new ScriptingException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , javax.script.ScriptEngine javax.script.ScriptEngine , java.lang.String java.lang.String , javax.script.Bindings javax.script.Bindings );  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return javax.script.ScriptEngineManager .class . java.lang.String ( ) + STRING + java.lang.String + STRING + STRING ; }  <METHOD_END>
