<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) < T > void void ( @ Observes ProcessBean < T > org.springframework.data.solr.repository.cdi.ProcessBean<T> ) { Bean < T > org.springframework.data.solr.repository.cdi.Bean<T> = org.springframework.data.solr.repository.cdi.ProcessBean<T> . getBean ( ) ; for ( java.lang.reflect.Type java.lang.reflect.Type : org.springframework.data.solr.repository.cdi.Bean<T> . getTypes ( ) ) { if ( java.lang.reflect.Type instanceof java.lang.Class<?> < ? > && SolrOperations .class . boolean ( ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ) ) { java.util.Map<java.lang.String,org.springframework.data.solr.repository.cdi.Bean<org.springframework.data.solr.repository.cdi.SolrOperations>> . put ( org.springframework.data.solr.repository.cdi.Bean<T> . getQualifiers ( ) . toString ( ) , ( ( Bean < SolrOperations > ) org.springframework.data.solr.repository.cdi.Bean<T> ) ) ; } } }  <METHOD_END>
<METHOD_START> void void ( @ Observes AfterBeanDiscovery org.springframework.data.solr.repository.cdi.AfterBeanDiscovery , BeanManager org.springframework.data.solr.repository.cdi.BeanManager ) { for ( java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> < java.lang.Class<?> < ? > , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> : getRepositoryTypes ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> . java.lang.Class<?> ( ) ; java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> . java.util.Set<java.lang.annotation.Annotation> ( ) ; Bean < ? > org.springframework.data.solr.repository.cdi.Bean<?> = org.springframework.data.solr.repository.cdi.Bean ( java.lang.Class<> , java.util.Set<java.lang.annotation.Annotation> , org.springframework.data.solr.repository.cdi.BeanManager ) ; org.springframework.data.solr.repository.cdi.AfterBeanDiscovery . addBean ( org.springframework.data.solr.repository.cdi.Bean<> ) ; } }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.solr.repository.cdi.Bean<T> < T > org.springframework.data.solr.repository.cdi.Bean<T> ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , BeanManager org.springframework.data.solr.repository.cdi.BeanManager ) { Bean < SolrOperations > org.springframework.data.solr.repository.cdi.Bean<org.springframework.data.solr.repository.cdi.SolrOperations> = this . java.util.Map<java.lang.String,org.springframework.data.solr.repository.cdi.Bean<org.springframework.data.solr.repository.cdi.SolrOperations>> . get ( java.util.Set<java.lang.annotation.Annotation> . java.lang.String ( ) ) ; if ( org.springframework.data.solr.repository.cdi.Bean<org.springframework.data.solr.repository.cdi.SolrOperations> == null ) { throw new UnsatisfiedResolutionException ( java.lang.String . java.lang.String ( STRING , SolrOperations .class . java.lang.String ( ) , java.util.Set<java.lang.annotation.Annotation> ) ) ; } return new SolrRepositoryBean <> ( org.springframework.data.solr.repository.cdi.Bean<org.springframework.data.solr.repository.cdi.SolrOperations> , java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> , org.springframework.data.solr.repository.cdi.BeanManager , java.util.Optional . java.util.Optional ( getCustomImplementationDetector ( ) ) ) ; }  <METHOD_END>
