<METHOD_START> public void ( ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return checkParameterTypeNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , Errors .class :: boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) . get ( BindingResult . MODEL_KEY_PREFIX + java.lang.String ) ; Mono < ? > org.springframework.web.reactive.result.method.annotation.Mono<?> ; if ( Mono .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { org.springframework.web.reactive.result.method.annotation.Mono<?> = ( Mono < ? > ) java.lang.Object ; } else if ( Errors .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { org.springframework.web.reactive.result.method.annotation.Mono<?> = Mono . just ( java.lang.Object ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } return org.springframework.web.reactive.result.method.annotation.Mono<> . cast ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { Assert . isTrue ( org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterIndex ( ) > NUMBER , STRING ) ; int int = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterIndex ( ) - NUMBER ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = new MethodParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter . getMethod ( ) , int ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterType ( ) ; ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; ReactiveAdapter org.springframework.web.reactive.result.method.annotation.ReactiveAdapter = getAdapterRegistry ( ) . getAdapter ( org.springframework.web.reactive.result.method.annotation.ResolvableType . resolve ( ) ) ; Assert . isNull ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter , STRING + STRING + STRING ) ; ModelAttribute org.springframework.web.reactive.result.method.annotation.ModelAttribute = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterAnnotation ( ModelAttribute .class ) ; if ( org.springframework.web.reactive.result.method.annotation.ModelAttribute != null && StringUtils . hasText ( org.springframework.web.reactive.result.method.annotation.ModelAttribute . value ( ) ) ) { return org.springframework.web.reactive.result.method.annotation.ModelAttribute . value ( ) ; } return ClassUtils . getShortNameAsProperty ( java.lang.Class<> ) ; }  <METHOD_END>
