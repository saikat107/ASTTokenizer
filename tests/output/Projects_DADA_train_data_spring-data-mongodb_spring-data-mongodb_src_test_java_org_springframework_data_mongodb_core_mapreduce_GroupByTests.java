<METHOD_START> @ Before public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { org.springframework.data.mongodb.core.mapreduce.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.mapreduce.MongoTemplate . getCollectionName ( XObject .class ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . dropCollection ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.mapreduce.Document = new GroupBy ( STRING ) . getGroupByObject ( ) ; assertThat ( org.springframework.data.mongodb.core.mapreduce.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.mapreduce.Document = GroupBy . key ( STRING , STRING ) . getGroupByObject ( ) ; assertThat ( org.springframework.data.mongodb.core.mapreduce.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.mapreduce.Document = GroupBy . keyFunction ( STRING ) . getGroupByObject ( ) ; assertThat ( org.springframework.data.mongodb.core.mapreduce.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; GroupByResults < XObject > org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . group ( STRING , GroupBy . key ( STRING ) . initialDocument ( new Document ( STRING , NUMBER ) ) . reduceFunction ( STRING ) , XObject .class ) ; void ( org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; GroupByResults < XObject > org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . group ( STRING , GroupBy . keyFunction ( STRING ) . initialDocument ( STRING ) . reduceFunction ( STRING ) , XObject .class ) ; void ( org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; GroupByResults < XObject > org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . group ( STRING , GroupBy . keyFunction ( STRING ) . initialDocument ( STRING ) . reduceFunction ( STRING ) , XObject .class ) ; void ( org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; GroupByResults < XObject > org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . group ( where ( STRING ) . gt ( NUMBER ) , STRING , keyFunction ( STRING ) . initialDocument ( STRING ) . reduceFunction ( STRING ) , XObject .class ) ; void ( org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> ) ; }  <METHOD_END>
<METHOD_START> private void void ( GroupByResults < XObject > org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> ) { int int = NUMBER ; for ( XObject org.springframework.data.mongodb.core.mapreduce.XObject : org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> ) { if ( org.springframework.data.mongodb.core.mapreduce.XObject . getX ( ) == NUMBER ) { Assert . assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapreduce.XObject . getCount ( ) , NUMBER ) ; } if ( org.springframework.data.mongodb.core.mapreduce.XObject . getX ( ) == NUMBER ) { Assert . assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapreduce.XObject . getCount ( ) , NUMBER ) ; } if ( org.springframework.data.mongodb.core.mapreduce.XObject . getX ( ) == NUMBER ) { Assert . assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapreduce.XObject . getCount ( ) , NUMBER ) ; } int ++ ; } assertThat ( int , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> . getKeys ( ) , is ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapreduce.GroupByResults<org.springframework.data.mongodb.core.mapreduce.XObject> . getCount ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { MongoCollection < Document > org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . getDb ( ) . getCollection ( STRING , Document .class ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , NUMBER ) ) ; }  <METHOD_END>
