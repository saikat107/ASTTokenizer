<METHOD_START> public void ( java.lang.String java.lang.String , AnnotationAttributes org.springframework.core.type.classreading.AnnotationAttributes , java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader , org.springframework.core.type.classreading.AnnotationAttributes ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = java.lang.Object ; java.lang.Object java.lang.Object = this . attributes . get ( this . java.lang.String ) ; if ( java.lang.Object != null ) { java.lang.Object = ObjectUtils . addObjectToArray ( ( java.lang.Object [] ) java.lang.Object , java.lang.Object ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( java.lang.Enum .class . boolean ( java.lang.Class<> ) ) { while ( java.lang.Class<> . java.lang.Class<? super > ( ) != null && ! java.lang.Class<> . boolean ( ) ) { java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } } java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) java.lang.reflect.Array . java.lang.Object ( java.lang.Class<> , NUMBER ) ; java.lang.Object[] [ NUMBER ] = java.lang.Object ; java.lang.Object = java.lang.Object[] ; } this . attributes . put ( this . java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.type.classreading.AnnotationVisitor org.springframework.core.type.classreading.AnnotationVisitor ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = Type . getType ( java.lang.String ) . getClassName ( ) ; AnnotationAttributes org.springframework.core.type.classreading.AnnotationAttributes = new AnnotationAttributes ( java.lang.String , this . classLoader ) ; this . java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> . add ( org.springframework.core.type.classreading.AnnotationAttributes ) ; return new RecursiveAnnotationAttributesVisitor ( java.lang.String , org.springframework.core.type.classreading.AnnotationAttributes , this . classLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! this . java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> . isEmpty ( ) ) { this . attributes . put ( this . java.lang.String , this . java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> . toArray ( new AnnotationAttributes [ this . java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> . size ( ) ] ) ) ; } }  <METHOD_END>
