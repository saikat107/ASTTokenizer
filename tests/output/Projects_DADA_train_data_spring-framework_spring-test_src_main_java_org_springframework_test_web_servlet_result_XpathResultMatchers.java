<METHOD_START> protected void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , java.lang.Object ... java.lang.Object[] )			throws javax.xml.xpath.XPathExpressionException { this . org.springframework.test.web.servlet.result.XpathExpectationsHelper = new XpathExpectationsHelper ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final Matcher < ? super org.w3c.dom.Node > org.springframework.test.web.servlet.result.Matcher<? super org.w3c.dom.Node> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertNode ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , org.springframework.test.web.servlet.result.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertNode ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , org.springframework.test.web.servlet.result.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse ) { return org.springframework.test.web.servlet.result.MockHttpServletResponse . isCharset ( ) ? org.springframework.test.web.servlet.result.MockHttpServletResponse . getCharacterEncoding ( ) : null ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . exists ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . exists ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . doesNotExist ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . doesNotExist ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final Matcher < java.lang.Integer > org.springframework.test.web.servlet.result.Matcher<java.lang.Integer> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertNodeCount ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , org.springframework.test.web.servlet.result.Matcher<java.lang.Integer> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertNodeCount ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , org.springframework.test.web.servlet.result.Matcher<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final int int ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertNodeCount ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , int ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertNodeCount ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , int ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final Matcher < ? super java.lang.String > org.springframework.test.web.servlet.result.Matcher<? super java.lang.String> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertString ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , org.springframework.test.web.servlet.result.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertString ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , org.springframework.test.web.servlet.result.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertString ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertString ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final Matcher < ? super java.lang.Double > org.springframework.test.web.servlet.result.Matcher<? super java.lang.Double> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertNumber ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , org.springframework.test.web.servlet.result.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertNumber ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , org.springframework.test.web.servlet.result.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.Double java.lang.Double ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertNumber ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , java.lang.Double ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertNumber ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , java.lang.Double ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.Boolean java.lang.Boolean ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertBoolean ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , java.lang.Boolean ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.test.web.servlet.result.MockHttpServletResponse = org.springframework.test.web.servlet.result.MvcResult . getResponse ( ) ; org.springframework.test.web.servlet.result.XpathExpectationsHelper . assertBoolean ( org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsByteArray ( ) , java.lang.String ( org.springframework.test.web.servlet.result.MockHttpServletResponse ) , java.lang.Boolean ) ; }  <METHOD_END>
