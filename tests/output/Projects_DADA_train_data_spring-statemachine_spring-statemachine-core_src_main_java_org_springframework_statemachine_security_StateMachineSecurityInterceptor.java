<METHOD_START> public void ( ) { this( null , null ); }  <METHOD_END>
<METHOD_START> public void ( AccessDecisionManager org.springframework.statemachine.security.AccessDecisionManager , AccessDecisionManager org.springframework.statemachine.security.AccessDecisionManager ) { this( org.springframework.statemachine.security.AccessDecisionManager , org.springframework.statemachine.security.AccessDecisionManager , null ); }  <METHOD_END>
<METHOD_START> public void ( AccessDecisionManager org.springframework.statemachine.security.AccessDecisionManager , AccessDecisionManager org.springframework.statemachine.security.AccessDecisionManager , SecurityRule org.springframework.statemachine.security.SecurityRule ) { this . org.springframework.statemachine.security.AccessDecisionManager = org.springframework.statemachine.security.AccessDecisionManager ; this . org.springframework.statemachine.security.AccessDecisionManager = org.springframework.statemachine.security.AccessDecisionManager ; this . org.springframework.statemachine.security.SecurityRule = org.springframework.statemachine.security.SecurityRule ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.security.Message<E> < E > org.springframework.statemachine.security.Message<E> ( Message < E > org.springframework.statemachine.security.Message<E> , StateMachine < S , E > org.springframework.statemachine.security.StateMachine<S,E> ) { if ( org.springframework.statemachine.security.SecurityRule != null ) { void ( org.springframework.statemachine.security.SecurityRule , org.springframework.statemachine.security.Message<E> ) ; } return super. preEvent ( org.springframework.statemachine.security.Message<E> , org.springframework.statemachine.security.StateMachine<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.security.StateContext<S,E> < S , E > org.springframework.statemachine.security.StateContext<S,E> ( StateContext < S , E > org.springframework.statemachine.security.StateContext<S,E> ) { Transition < S , E > org.springframework.statemachine.security.Transition<S,E> = org.springframework.statemachine.security.StateContext<S,E> . getTransition ( ) ; SecurityRule org.springframework.statemachine.security.SecurityRule = org.springframework.statemachine.security.Transition<S,E> . getSecurityRule ( ) ; if ( org.springframework.statemachine.security.SecurityRule != null ) { void ( org.springframework.statemachine.security.SecurityRule , org.springframework.statemachine.security.Transition<S,E> ) ; } return super. preTransition ( org.springframework.statemachine.security.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( AccessDecisionManager org.springframework.statemachine.security.AccessDecisionManager ) { this . org.springframework.statemachine.security.AccessDecisionManager = org.springframework.statemachine.security.AccessDecisionManager ; }  <METHOD_END>
<METHOD_START> public void void ( AccessDecisionManager org.springframework.statemachine.security.AccessDecisionManager ) { this . org.springframework.statemachine.security.AccessDecisionManager = org.springframework.statemachine.security.AccessDecisionManager ; }  <METHOD_END>
<METHOD_START> public void void ( SecurityRule org.springframework.statemachine.security.SecurityRule ) { this . org.springframework.statemachine.security.SecurityRule = org.springframework.statemachine.security.SecurityRule ; }  <METHOD_END>
<METHOD_START> private void void ( SecurityRule org.springframework.statemachine.security.SecurityRule , Message < E > org.springframework.statemachine.security.Message<E> ) { Authentication org.springframework.statemachine.security.Authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> = java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ( org.springframework.statemachine.security.SecurityRule ) ; if ( org.springframework.statemachine.security.AccessDecisionManager != null ) { void ( org.springframework.statemachine.security.AccessDecisionManager , org.springframework.statemachine.security.Authentication , org.springframework.statemachine.security.Message<E> , java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) ; } else { void ( org.springframework.statemachine.security.AbstractAccessDecisionManager ( org.springframework.statemachine.security.SecurityRule ) , org.springframework.statemachine.security.Authentication , org.springframework.statemachine.security.Message<E> , java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( SecurityRule org.springframework.statemachine.security.SecurityRule , Transition < S , E > org.springframework.statemachine.security.Transition<S,E> ) { Authentication org.springframework.statemachine.security.Authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> = java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ( org.springframework.statemachine.security.SecurityRule ) ; if ( org.springframework.statemachine.security.AccessDecisionManager != null ) { void ( org.springframework.statemachine.security.AccessDecisionManager , org.springframework.statemachine.security.Authentication , org.springframework.statemachine.security.Transition<S,E> , java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) ; } else { void ( org.springframework.statemachine.security.AbstractAccessDecisionManager ( org.springframework.statemachine.security.SecurityRule ) , org.springframework.statemachine.security.Authentication , org.springframework.statemachine.security.Transition<S,E> , java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ( SecurityRule org.springframework.statemachine.security.SecurityRule ) { java.util.List<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.List<org.springframework.statemachine.security.ConfigAttribute> = new java.util.ArrayList<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > ( ) ; if ( org.springframework.statemachine.security.SecurityRule . getAttributes ( ) != null ) { for ( java.lang.String java.lang.String : org.springframework.statemachine.security.SecurityRule . getAttributes ( ) ) { java.util.List<org.springframework.statemachine.security.ConfigAttribute> . add ( new SecurityConfig ( java.lang.String ) ) ; } } if ( StringUtils . hasText ( org.springframework.statemachine.security.SecurityRule . getExpression ( ) ) ) { java.util.List<org.springframework.statemachine.security.ConfigAttribute> . add ( new TransitionExpressionConfigAttribute ( org.springframework.statemachine.security.ExpressionParser . parseExpression ( org.springframework.statemachine.security.SecurityRule . getExpression ( ) ) ) ) ; } return java.util.List<org.springframework.statemachine.security.ConfigAttribute> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ( SecurityRule org.springframework.statemachine.security.SecurityRule ) { java.util.List<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.List<org.springframework.statemachine.security.ConfigAttribute> = new java.util.ArrayList<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > ( ) ; if ( org.springframework.statemachine.security.SecurityRule . getAttributes ( ) != null ) { for ( java.lang.String java.lang.String : org.springframework.statemachine.security.SecurityRule . getAttributes ( ) ) { java.util.List<org.springframework.statemachine.security.ConfigAttribute> . add ( new SecurityConfig ( java.lang.String ) ) ; } } if ( StringUtils . hasText ( org.springframework.statemachine.security.SecurityRule . getExpression ( ) ) ) { java.util.List<org.springframework.statemachine.security.ConfigAttribute> . add ( new EventExpressionConfigAttribute ( org.springframework.statemachine.security.ExpressionParser . parseExpression ( org.springframework.statemachine.security.SecurityRule . getExpression ( ) ) ) ) ; } return java.util.List<org.springframework.statemachine.security.ConfigAttribute> ; }  <METHOD_END>
<METHOD_START> private void void ( AccessDecisionManager org.springframework.statemachine.security.AccessDecisionManager , Authentication org.springframework.statemachine.security.Authentication , Transition < S , E > org.springframework.statemachine.security.Transition<S,E> , java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) { if ( org.springframework.statemachine.security.AccessDecisionManager . supports ( org.springframework.statemachine.security.Transition<S,E> . getClass ( ) ) ) { org.springframework.statemachine.security.AccessDecisionManager . decide ( org.springframework.statemachine.security.Authentication , org.springframework.statemachine.security.Transition<S,E> , java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AccessDecisionManager org.springframework.statemachine.security.AccessDecisionManager , Authentication org.springframework.statemachine.security.Authentication , Message < E > org.springframework.statemachine.security.Message<E> , java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) { if ( org.springframework.statemachine.security.AccessDecisionManager . supports ( org.springframework.statemachine.security.Message<E> . getClass ( ) ) ) { org.springframework.statemachine.security.AccessDecisionManager . decide ( org.springframework.statemachine.security.Authentication , org.springframework.statemachine.security.Message<E> , java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.security.AbstractAccessDecisionManager org.springframework.statemachine.security.AbstractAccessDecisionManager ( SecurityRule org.springframework.statemachine.security.SecurityRule ) { java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> < AccessDecisionVoter < ? extends java.lang.Object > > java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> = new java.util.ArrayList<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> < AccessDecisionVoter < ? extends java.lang.Object > > ( ) ; java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> . add ( new TransitionExpressionVoter ( ) ) ; java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> . add ( new TransitionVoter < java.lang.Object , java.lang.Object > ( ) ) ; java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> . add ( new RoleVoter ( ) ) ; if ( org.springframework.statemachine.security.SecurityRule . getComparisonType ( ) == SecurityRule . ComparisonType . ANY ) { return new AffirmativeBased ( java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> ) ; } else if ( org.springframework.statemachine.security.SecurityRule . getComparisonType ( ) == SecurityRule . ComparisonType . ALL ) { return new UnanimousBased ( java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> ) ; } else if ( org.springframework.statemachine.security.SecurityRule . getComparisonType ( ) == SecurityRule . ComparisonType . MAJORITY ) { return new ConsensusBased ( java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> ) ; } else { throw new java.lang.IllegalStateException ( STRING + org.springframework.statemachine.security.SecurityRule . getComparisonType ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.security.AbstractAccessDecisionManager org.springframework.statemachine.security.AbstractAccessDecisionManager ( SecurityRule org.springframework.statemachine.security.SecurityRule ) { java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> < AccessDecisionVoter < ? extends java.lang.Object > > java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> = new java.util.ArrayList<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> < AccessDecisionVoter < ? extends java.lang.Object > > ( ) ; java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> . add ( new EventExpressionVoter < java.lang.Object > ( ) ) ; java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> . add ( new EventVoter < java.lang.Object > ( ) ) ; java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> . add ( new RoleVoter ( ) ) ; if ( org.springframework.statemachine.security.SecurityRule . getComparisonType ( ) == SecurityRule . ComparisonType . ANY ) { return new AffirmativeBased ( java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> ) ; } else if ( org.springframework.statemachine.security.SecurityRule . getComparisonType ( ) == SecurityRule . ComparisonType . ALL ) { return new UnanimousBased ( java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> ) ; } else if ( org.springframework.statemachine.security.SecurityRule . getComparisonType ( ) == SecurityRule . ComparisonType . MAJORITY ) { return new ConsensusBased ( java.util.List<org.springframework.statemachine.security.AccessDecisionVoter<? extends java.lang.Object>> ) ; } else { throw new java.lang.IllegalStateException ( STRING + org.springframework.statemachine.security.SecurityRule . getComparisonType ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + org.springframework.statemachine.security.AccessDecisionManager + STRING + org.springframework.statemachine.security.AccessDecisionManager + STRING + org.springframework.statemachine.security.SecurityRule + STRING ; }  <METHOD_END>
