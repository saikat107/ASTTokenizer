<METHOD_START> void ( SinglePublishedArtifact org.springframework.boot.gradle.plugin.SinglePublishedArtifact ) { this . org.springframework.boot.gradle.plugin.SinglePublishedArtifact = org.springframework.boot.gradle.plugin.SinglePublishedArtifact ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.boot.gradle.plugin.Plugin<? extends org.springframework.boot.gradle.plugin.Project>> < ? extends Plugin < ? extends Project > > java.lang.Class<? extends org.springframework.boot.gradle.plugin.Plugin<? extends org.springframework.boot.gradle.plugin.Project>> ( ) { return JavaPlugin .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Project org.springframework.boot.gradle.plugin.Project ) { BootJar org.springframework.boot.gradle.plugin.BootJar = org.springframework.boot.gradle.plugin.BootJar ( org.springframework.boot.gradle.plugin.Project ) ; void ( org.springframework.boot.gradle.plugin.Project , org.springframework.boot.gradle.plugin.BootJar ) ; void ( org.springframework.boot.gradle.plugin.Project ) ; void ( org.springframework.boot.gradle.plugin.Project ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.gradle.plugin.BootJar org.springframework.boot.gradle.plugin.BootJar ( Project org.springframework.boot.gradle.plugin.Project ) { BootJar org.springframework.boot.gradle.plugin.BootJar = org.springframework.boot.gradle.plugin.Project . getTasks ( ) . create ( SpringBootPlugin . BOOT_JAR_TASK_NAME , BootJar .class ) ; org.springframework.boot.gradle.plugin.BootJar . classpath ( ( java.util.concurrent.Callable<org.springframework.boot.gradle.plugin.FileCollection> < FileCollection > ) ( ) { JavaPluginConvention org.springframework.boot.gradle.plugin.JavaPluginConvention = org.springframework.boot.gradle.plugin.Project . getConvention ( ) . getPlugin ( JavaPluginConvention .class ) ; SourceSet org.springframework.boot.gradle.plugin.SourceSet = org.springframework.boot.gradle.plugin.JavaPluginConvention . getSourceSets ( ) . getByName ( SourceSet . MAIN_SOURCE_SET_NAME ) ; return org.springframework.boot.gradle.plugin.SourceSet . getRuntimeClasspath ( ) ; } ) ; org.springframework.boot.gradle.plugin.BootJar . conventionMapping ( STRING , new MainClassConvention ( org.springframework.boot.gradle.plugin.Project , org.springframework.boot.gradle.plugin.BootJar :: getClasspath ) ) ; return org.springframework.boot.gradle.plugin.BootJar ; }  <METHOD_END>
<METHOD_START> private void void ( Project org.springframework.boot.gradle.plugin.Project , BootJar org.springframework.boot.gradle.plugin.BootJar ) { ArchivePublishArtifact org.springframework.boot.gradle.plugin.ArchivePublishArtifact = new ArchivePublishArtifact ( org.springframework.boot.gradle.plugin.BootJar ) ; this . org.springframework.boot.gradle.plugin.SinglePublishedArtifact . addCandidate ( org.springframework.boot.gradle.plugin.ArchivePublishArtifact ) ; org.springframework.boot.gradle.plugin.Project . getComponents ( ) . add ( new SpringBootSoftwareComponent ( org.springframework.boot.gradle.plugin.ArchivePublishArtifact , SpringBootPlugin . BOOT_JAVA_SOFTWARE_COMPONENT_NAME ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Project org.springframework.boot.gradle.plugin.Project ) { JavaPluginConvention org.springframework.boot.gradle.plugin.JavaPluginConvention = org.springframework.boot.gradle.plugin.Project . getConvention ( ) . getPlugin ( JavaPluginConvention .class ) ; BootRun org.springframework.boot.gradle.plugin.BootRun = org.springframework.boot.gradle.plugin.Project . getTasks ( ) . create ( STRING , BootRun .class ) ; org.springframework.boot.gradle.plugin.BootRun . setDescription ( STRING + STRING ) ; org.springframework.boot.gradle.plugin.BootRun . setGroup ( STRING ) ; org.springframework.boot.gradle.plugin.BootRun . classpath ( org.springframework.boot.gradle.plugin.JavaPluginConvention . getSourceSets ( ) . findByName ( SourceSet . MAIN_SOURCE_SET_NAME ) . getRuntimeClasspath ( ) ) ; org.springframework.boot.gradle.plugin.BootRun . getConventionMapping ( ) . map ( STRING , ( ) { if ( project . hasProperty ( STRING ) ) { return project . property ( STRING ) ; } return Collections . emptyList ( ) ; } ) ; org.springframework.boot.gradle.plugin.BootRun . conventionMapping ( STRING , new MainClassConvention ( org.springframework.boot.gradle.plugin.Project , org.springframework.boot.gradle.plugin.BootRun :: getClasspath ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Project org.springframework.boot.gradle.plugin.Project ) { org.springframework.boot.gradle.plugin.Project . afterEvaluate ( evaluated -> evaluated . getTasks ( ) . withType ( JavaCompile .class , compile -> { if ( compile . getOptions ( ) . getEncoding ( ) == null ) { compile . getOptions ( ) . setEncoding ( STRING ) ; } } ) ) ; }  <METHOD_END>
