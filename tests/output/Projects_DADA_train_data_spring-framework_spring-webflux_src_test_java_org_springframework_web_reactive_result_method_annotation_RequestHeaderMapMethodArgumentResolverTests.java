<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver = new RequestHeaderMapMethodArgumentResolver ( new ReactiveAdapterRegistry ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolverTests> ( ) , STRING , ( java.lang.Class<?> < ? > [] ) null ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; assertTrue ( STRING , org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; assertTrue ( STRING , org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; assertFalse ( STRING , org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; try { this . org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.IllegalStateException . java.lang.String ( ) , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( java.lang.String , java.lang.String ) ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( java.lang.String , java.lang.String ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , null , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof java.util.Map ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( java.lang.String , java.lang.String , java.lang.String ) . toExchange ( ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( NUMBER ) ; org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , null , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof MultiValueMap ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( java.lang.String , java.lang.String , java.lang.String ) . toExchange ( ) ; HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( java.lang.String , java.lang.String ) ; org.springframework.web.reactive.result.method.annotation.HttpHeaders . add ( java.lang.String , java.lang.String ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = org.springframework.web.reactive.result.method.annotation.RequestHeaderMapMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , null , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertTrue ( java.lang.Object instanceof HttpHeaders ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( @ RequestHeader java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , @ RequestHeader MultiValueMap < ? , ? > org.springframework.web.reactive.result.method.annotation.MultiValueMap<?,?> , @ RequestHeader HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , @ RequestHeader Mono < java.util.Map<?,?> < ? , ? > > org.springframework.web.reactive.result.method.annotation.Mono<java.util.Map<?,?>> ) {	}  <METHOD_END>
