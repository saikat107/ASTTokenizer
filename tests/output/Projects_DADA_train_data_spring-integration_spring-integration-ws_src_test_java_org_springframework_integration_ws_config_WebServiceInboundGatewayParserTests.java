<METHOD_START> @ Test public void void ( ) java.lang.Exception { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertSame ( this . org.springframework.integration.ws.config.MessageChannel , TestUtils . getPropertyValue ( this . org.springframework.integration.ws.config.SimpleWebServiceInboundGateway , STRING ) ) ; assertSame ( this . org.springframework.integration.ws.config.MessageChannel , TestUtils . getPropertyValue ( this . org.springframework.integration.ws.config.SimpleWebServiceInboundGateway , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.ws.config.SimpleWebServiceInboundGateway , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.ws.config.SimpleWebServiceInboundGateway , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectFieldAccessor org.springframework.integration.ws.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ws.config.SimpleWebServiceInboundGateway ) ; assertThat ( ( java.lang.Boolean ) org.springframework.integration.ws.config.DirectFieldAccessor . getPropertyValue ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectFieldAccessor org.springframework.integration.ws.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ws.config.MarshallingWebServiceInboundGateway ) ; AbstractMarshaller org.springframework.integration.ws.config.AbstractMarshaller = ( AbstractMarshaller ) org.springframework.integration.ws.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( org.springframework.integration.ws.config.AbstractMarshaller , is ( org.springframework.integration.ws.config.AbstractMarshaller ) ) ; AbstractMarshaller org.springframework.integration.ws.config.AbstractMarshaller = ( AbstractMarshaller ) org.springframework.integration.ws.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( org.springframework.integration.ws.config.AbstractMarshaller , is ( org.springframework.integration.ws.config.AbstractMarshaller ) ) ; assertTrue ( STRING , org.springframework.integration.ws.config.MarshallingWebServiceInboundGateway . isRunning ( ) ) ; assertThat ( ( MessageChannel ) org.springframework.integration.ws.config.DirectFieldAccessor . getPropertyValue ( STRING ) , is ( org.springframework.integration.ws.config.MessageChannel ) ) ; AbstractHeaderMapper . AbstractHeaderMapper AbstractHeaderMapper.HeaderMatcher = TestUtils . getPropertyValue ( org.springframework.integration.ws.config.MarshallingWebServiceInboundGateway , STRING , AbstractHeaderMapper . AbstractHeaderMapper .class ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertFalse ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; AbstractHeaderMapper . AbstractHeaderMapper AbstractHeaderMapper.HeaderMatcher = TestUtils . getPropertyValue ( org.springframework.integration.ws.config.MarshallingWebServiceInboundGateway , STRING , AbstractHeaderMapper . AbstractHeaderMapper .class ) ; assertFalse ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; assertTrue ( AbstractHeaderMapper.HeaderMatcher . matchHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageContext org.springframework.integration.ws.config.MessageContext = new DefaultMessageContext ( new StubMessageFactory ( ) ) ; Unmarshaller org.springframework.integration.ws.config.Unmarshaller = mock ( Unmarshaller .class ) ; when ( org.springframework.integration.ws.config.Unmarshaller . unmarshal ( ( javax.xml.transform.Source ) Mockito . any ( ) ) ) . thenReturn ( STRING ) ; org.springframework.integration.ws.config.MarshallingWebServiceInboundGateway . setUnmarshaller ( org.springframework.integration.ws.config.Unmarshaller ) ; org.springframework.integration.ws.config.MarshallingWebServiceInboundGateway . invoke ( org.springframework.integration.ws.config.MessageContext ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = org.springframework.integration.ws.config.PollableChannel . receive ( NUMBER ) ; MessageHistory org.springframework.integration.ws.config.MessageHistory = MessageHistory . read ( org.springframework.integration.ws.config.Message<> ) ; assertNotNull ( org.springframework.integration.ws.config.MessageHistory ) ; java.util.Properties java.util.Properties = TestUtils . locateComponentInHistory ( org.springframework.integration.ws.config.MessageHistory , STRING , NUMBER ) ; assertNotNull ( java.util.Properties ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageContext org.springframework.integration.ws.config.MessageContext = new DefaultMessageContext ( new StubMessageFactory ( ) ) ; org.springframework.integration.ws.config.SimpleWebServiceInboundGateway . invoke ( org.springframework.integration.ws.config.MessageContext ) ; Message < ? > org.springframework.integration.ws.config.Message<?> = org.springframework.integration.ws.config.PollableChannel . receive ( NUMBER ) ; MessageHistory org.springframework.integration.ws.config.MessageHistory = MessageHistory . read ( org.springframework.integration.ws.config.Message<> ) ; assertNotNull ( org.springframework.integration.ws.config.MessageHistory ) ; java.util.Properties java.util.Properties = TestUtils . locateComponentInHistory ( org.springframework.integration.ws.config.MessageHistory , STRING , NUMBER ) ; assertNotNull ( java.util.Properties ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectFieldAccessor org.springframework.integration.ws.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ws.config.SimpleWebServiceInboundGateway ) ; java.lang.Object java.lang.Object = org.springframework.integration.ws.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( org.springframework.integration.ws.config.SoapHeaderMapper , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectFieldAccessor org.springframework.integration.ws.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ws.config.SimpleWebServiceInboundGateway ) ; java.lang.Object java.lang.Object = org.springframework.integration.ws.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageHeaders org.springframework.integration.ws.config.MessageHeaders , SoapMessage org.springframework.integration.ws.config.SoapMessage ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageHeaders org.springframework.integration.ws.config.MessageHeaders , SoapMessage org.springframework.integration.ws.config.SoapMessage ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( SoapMessage org.springframework.integration.ws.config.SoapMessage ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( SoapMessage org.springframework.integration.ws.config.SoapMessage ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
