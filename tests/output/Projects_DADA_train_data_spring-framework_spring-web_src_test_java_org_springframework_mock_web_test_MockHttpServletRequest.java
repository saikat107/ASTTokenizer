<METHOD_START> public void ( ) { this( null , STRING , STRING ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this( null , java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( ServletContext org.springframework.mock.web.test.ServletContext ) { this( org.springframework.mock.web.test.ServletContext , STRING , STRING ); }  <METHOD_END>
<METHOD_START> public void ( ServletContext org.springframework.mock.web.test.ServletContext , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.mock.web.test.ServletContext = ( org.springframework.mock.web.test.ServletContext != null ? org.springframework.mock.web.test.ServletContext : new MockServletContext ( ) ) ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.util.List<java.util.Locale> . boolean ( java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.ServletContext org.springframework.mock.web.test.ServletContext ( ) { return this . org.springframework.mock.web.test.ServletContext ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = false ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) java.lang.IllegalStateException { Assert . state ( this . boolean , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { void ( ) ; return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { void ( ) ; return java.util.Collections . java.util.Enumeration<java.lang.String> ( new java.util.LinkedHashSet<java.lang.String> <> ( this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( StringUtils . hasLength ( this . java.lang.String ) ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( this . java.lang.String ) ; if ( ! this . java.lang.String . java.lang.String ( ) . boolean ( java.lang.String ) && StringUtils . hasLength ( this . java.lang.String ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( this . java.lang.String ) ; } void ( java.lang.String , java.lang.StringBuilder . java.lang.String ( ) , true ) ; } }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return this . byte[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) java.lang.IllegalStateException , java.io.UnsupportedEncodingException { Assert . state ( this . java.lang.String != null , STRING + STRING ) ; if ( this . byte[] == null ) { return null ; } return new java.lang.String ( this . byte[] , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . byte[] != null ? this . byte[] . int : - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return int ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; if ( java.lang.String != null ) { try { MediaType org.springframework.mock.web.test.MediaType = MediaType . parseMediaType ( java.lang.String ) ; if ( org.springframework.mock.web.test.MediaType . getCharset ( ) != null ) { this . java.lang.String = org.springframework.mock.web.test.MediaType . getCharset ( ) . name ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { int int = java.lang.String . java.lang.String ( ) . int ( java.lang.String ) ; if ( int != - NUMBER ) { this . java.lang.String = java.lang.String . java.lang.String ( int + java.lang.String . int ( ) ) ; } } void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.ServletInputStream org.springframework.mock.web.test.ServletInputStream ( ) { if ( this . byte[] != null ) { return new DelegatingServletInputStream ( new java.io.ByteArrayInputStream ( this . byte[] ) ) ; } else { return org.springframework.mock.web.test.ServletInputStream ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( java.lang.String , new java.lang.String [] { java.lang.String } ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( java.lang.String , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { Assert . notNull ( java.util.Map<java.lang.String,> , STRING ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,> . get ( java.lang.String ) ; if ( java.lang.Object instanceof java.lang.String ) { void ( java.lang.String , ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String [] ) { void ( java.lang.String , ( java.lang.String [] ) java.lang.Object ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + STRING + java.lang.String .class . java.lang.String ( ) + STRING ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( java.lang.String , new java.lang.String [] { java.lang.String } ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String , STRING ) ; java.lang.String [] java.lang.String[] = this . java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( java.lang.String ) ; if ( java.lang.String[] != null ) { java.lang.String [] java.lang.String[] = new java.lang.String [ java.lang.String[] . int + java.lang.String[] . int ] ; java.lang.System . void ( java.lang.String[] , NUMBER , java.lang.String[] , NUMBER , java.lang.String[] . int ) ; java.lang.System . void ( java.lang.String[] , NUMBER , java.lang.String[] , java.lang.String[] . int , java.lang.String[] . int ) ; this . java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( java.lang.String , java.lang.String[] ) ; } else { this . java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( java.lang.String , java.lang.String[] ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { Assert . notNull ( java.util.Map<java.lang.String,> , STRING ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,> . get ( java.lang.String ) ; if ( java.lang.Object instanceof java.lang.String ) { void ( java.lang.String , ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String [] ) { void ( java.lang.String , ( java.lang.String [] ) java.lang.Object ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + STRING + java.lang.String .class . java.lang.String ( ) + STRING ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.Map<java.lang.String,java.lang.String[]> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = ( java.lang.String != null ? this . java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( java.lang.String ) : null ) ; return ( java.lang.String[] != null && java.lang.String[] . int > NUMBER ? java.lang.String[] [ NUMBER ] : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { return java.util.Collections . java.util.Enumeration<java.lang.String> ( this . java.util.Map<java.lang.String,java.lang.String[]> . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return ( java.lang.String != null ? this . java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.String[]> ( this . java.util.Map<java.lang.String,java.lang.String[]> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { java.lang.String = java.lang.String . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ']' ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ':' ) ) ; } return java.lang.String ; } return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { java.lang.String = java.lang.String . java.lang.String ( ) ; int int ; if ( java.lang.String . boolean ( STRING ) ) { int = java.lang.String . int ( ':' , java.lang.String . int ( ']' ) ) ; } else { int = java.lang.String . int ( ':' ) ; } if ( int != - NUMBER ) { return java.lang.Integer . int ( java.lang.String . java.lang.String ( int + NUMBER ) ) ; } } return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.BufferedReader java.io.BufferedReader ( ) java.io.UnsupportedEncodingException { if ( this . byte[] != null ) { java.io.InputStream java.io.InputStream = new java.io.ByteArrayInputStream ( this . byte[] ) ; java.io.Reader java.io.Reader = ( this . java.lang.String != null ) ? new java.io.InputStreamReader ( java.io.InputStream , this . java.lang.String ) : new java.io.InputStreamReader ( java.io.InputStream ) ; return new java.io.BufferedReader ( java.io.Reader ) ; } else { return java.io.BufferedReader ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { void ( ) ; Assert . notNull ( java.lang.String , STRING ) ; if ( java.lang.Object != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } else { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( ) ; Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Locale java.util.Locale ) { Assert . notNull ( java.util.Locale , STRING ) ; this . java.util.List<java.util.Locale> . void ( NUMBER , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.Locale> < java.util.Locale > java.util.List<java.util.Locale> ) { Assert . notEmpty ( java.util.List<java.util.Locale> , STRING ) ; this . java.util.List<java.util.Locale> . void ( ) ; this . java.util.List<java.util.Locale> . boolean ( java.util.List<java.util.Locale> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Locale java.util.Locale ( ) { return this . java.util.List<java.util.Locale> . java.util.Locale ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.util.Locale> < java.util.Locale > java.util.Enumeration<java.util.Locale> ( ) { return java.util.Collections . java.util.Enumeration<java.util.Locale> ( this . java.util.List<java.util.Locale> ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . boolean || java.lang.String . boolean ( this . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.RequestDispatcher org.springframework.mock.web.test.RequestDispatcher ( java.lang.String java.lang.String ) { return new MockRequestDispatcher ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . org.springframework.mock.web.test.ServletContext . getRealPath ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.AsyncContext org.springframework.mock.web.test.AsyncContext ( ) { return org.springframework.mock.web.test.AsyncContext ( this , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.AsyncContext org.springframework.mock.web.test.AsyncContext ( ServletRequest org.springframework.mock.web.test.ServletRequest , ServletResponse org.springframework.mock.web.test.ServletResponse ) { Assert . state ( this . boolean , STRING ) ; this . boolean = true ; this . org.springframework.mock.web.test.MockAsyncContext = new MockAsyncContext ( org.springframework.mock.web.test.ServletRequest , org.springframework.mock.web.test.ServletResponse ) ; return this . org.springframework.mock.web.test.MockAsyncContext ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MockAsyncContext org.springframework.mock.web.test.MockAsyncContext ) { this . org.springframework.mock.web.test.MockAsyncContext = org.springframework.mock.web.test.MockAsyncContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.AsyncContext org.springframework.mock.web.test.AsyncContext ( ) { return this . org.springframework.mock.web.test.MockAsyncContext ; }  <METHOD_END>
<METHOD_START> public void void ( DispatcherType org.springframework.mock.web.test.DispatcherType ) { this . org.springframework.mock.web.test.DispatcherType = org.springframework.mock.web.test.DispatcherType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.DispatcherType org.springframework.mock.web.test.DispatcherType ( ) { return this . org.springframework.mock.web.test.DispatcherType ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Cookie ... org.springframework.mock.web.test.Cookie[] ) { this . org.springframework.mock.web.test.Cookie[] = org.springframework.mock.web.test.Cookie[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.Cookie [] org.springframework.mock.web.test.Cookie[] ( ) { return this . org.springframework.mock.web.test.Cookie[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.String . boolean ( java.lang.String ) && ! this . java.util.Map<java.lang.String,org.springframework.mock.web.test.HeaderValueHolder> . containsKey ( java.lang.String ) ) { void ( java.lang.Object . java.lang.String ( ) ) ; } else { void ( java.lang.String , java.lang.Object , false ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , boolean boolean ) { HeaderValueHolder org.springframework.mock.web.test.HeaderValueHolder = HeaderValueHolder . getByName ( this . java.util.Map<java.lang.String,org.springframework.mock.web.test.HeaderValueHolder> , java.lang.String ) ; Assert . notNull ( java.lang.Object , STRING ) ; if ( org.springframework.mock.web.test.HeaderValueHolder == null || boolean ) { org.springframework.mock.web.test.HeaderValueHolder = new HeaderValueHolder ( ) ; this . java.util.Map<java.lang.String,org.springframework.mock.web.test.HeaderValueHolder> . put ( java.lang.String , org.springframework.mock.web.test.HeaderValueHolder ) ; } if ( java.lang.Object instanceof java.util.Collection ) { org.springframework.mock.web.test.HeaderValueHolder . addValues ( ( java.util.Collection<?> < ? > ) java.lang.Object ) ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { org.springframework.mock.web.test.HeaderValueHolder . addValueArray ( java.lang.Object ) ; } else { org.springframework.mock.web.test.HeaderValueHolder . addValue ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( java.lang.String java.lang.String ) { HeaderValueHolder org.springframework.mock.web.test.HeaderValueHolder = HeaderValueHolder . getByName ( this . java.util.Map<java.lang.String,org.springframework.mock.web.test.HeaderValueHolder> , java.lang.String ) ; java.lang.Object java.lang.Object = ( org.springframework.mock.web.test.HeaderValueHolder != null ? org.springframework.mock.web.test.HeaderValueHolder . getValue ( ) : null ) ; if ( java.lang.Object instanceof java.util.Date ) { return ( ( java.util.Date ) java.lang.Object ) . long ( ) ; } else if ( java.lang.Object instanceof java.lang.Number ) { return ( ( java.lang.Number ) java.lang.Object ) . long ( ) ; } else if ( java.lang.Object instanceof java.lang.String ) { return long ( java.lang.String , ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object != null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.Object ) ; } else { return - NUMBER ; } }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( java.lang.String , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone ) ; try { return java.text.SimpleDateFormat . java.util.Date ( java.lang.String ) . long ( ) ; } catch ( java.text.ParseException java.text.ParseException ) { } } throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { HeaderValueHolder org.springframework.mock.web.test.HeaderValueHolder = HeaderValueHolder . getByName ( this . java.util.Map<java.lang.String,org.springframework.mock.web.test.HeaderValueHolder> , java.lang.String ) ; return ( org.springframework.mock.web.test.HeaderValueHolder != null ? org.springframework.mock.web.test.HeaderValueHolder . getStringValue ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( java.lang.String java.lang.String ) { HeaderValueHolder org.springframework.mock.web.test.HeaderValueHolder = HeaderValueHolder . getByName ( this . java.util.Map<java.lang.String,org.springframework.mock.web.test.HeaderValueHolder> , java.lang.String ) ; return java.util.Collections . java.util.Enumeration ( org.springframework.mock.web.test.HeaderValueHolder != null ? org.springframework.mock.web.test.HeaderValueHolder . getStringValues ( ) : new java.util.LinkedList <> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { return java.util.Collections . java.util.Enumeration ( this . java.util.Map<java.lang.String,org.springframework.mock.web.test.HeaderValueHolder> . keySet ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.String java.lang.String ) { HeaderValueHolder org.springframework.mock.web.test.HeaderValueHolder = HeaderValueHolder . getByName ( this . java.util.Map<java.lang.String,org.springframework.mock.web.test.HeaderValueHolder> , java.lang.String ) ; java.lang.Object java.lang.Object = ( org.springframework.mock.web.test.HeaderValueHolder != null ? org.springframework.mock.web.test.HeaderValueHolder . getValue ( ) : null ) ; if ( java.lang.Object instanceof java.lang.Number ) { return ( ( java.lang.Number ) java.lang.Object ) . int ( ) ; } else if ( java.lang.Object instanceof java.lang.String ) { return java.lang.Integer . int ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object != null ) { throw new java.lang.NumberFormatException ( STRING + java.lang.String + STRING + java.lang.Object ) ; } else { return - NUMBER ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . java.lang.String != null ? java.lang.String ( this . java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return ( this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) || ( this . org.springframework.mock.web.test.ServletContext instanceof MockServletContext && ( ( MockServletContext ) this . org.springframework.mock.web.test.ServletContext ) . getDeclaredRoles ( ) . contains ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.security.Principal java.security.Principal ) { this . java.security.Principal = java.security.Principal ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.Principal java.security.Principal ( ) { return this . java.security.Principal ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.StringBuffer java.lang.StringBuffer ( ) { java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( this . java.lang.String ) . java.lang.StringBuffer ( STRING ) . java.lang.StringBuffer ( this . java.lang.String ) ; if ( this . int > NUMBER && ( ( java.lang.String . boolean ( this . java.lang.String ) && this . int != NUMBER ) || ( java.lang.String . boolean ( this . java.lang.String ) && this . int != NUMBER ) ) ) { java.lang.StringBuffer . java.lang.StringBuffer ( ':' ) . java.lang.StringBuffer ( this . int ) ; } if ( StringUtils . hasText ( java.lang.String ( ) ) ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ( ) ) ; } return java.lang.StringBuffer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( HttpSession org.springframework.mock.web.test.HttpSession ) { this . org.springframework.mock.web.test.HttpSession = org.springframework.mock.web.test.HttpSession ; if ( org.springframework.mock.web.test.HttpSession instanceof MockHttpSession ) { MockHttpSession org.springframework.mock.web.test.MockHttpSession = ( ( MockHttpSession ) org.springframework.mock.web.test.HttpSession ) ; org.springframework.mock.web.test.MockHttpSession . access ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.HttpSession org.springframework.mock.web.test.HttpSession ( boolean boolean ) { void ( ) ; if ( this . org.springframework.mock.web.test.HttpSession instanceof MockHttpSession && ( ( MockHttpSession ) this . org.springframework.mock.web.test.HttpSession ) . isInvalid ( ) ) { this . org.springframework.mock.web.test.HttpSession = null ; } if ( this . org.springframework.mock.web.test.HttpSession == null && boolean ) { this . org.springframework.mock.web.test.HttpSession = new MockHttpSession ( this . org.springframework.mock.web.test.ServletContext ) ; } return this . org.springframework.mock.web.test.HttpSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.HttpSession org.springframework.mock.web.test.HttpSession ( ) { return org.springframework.mock.web.test.HttpSession ( true ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { Assert . isTrue ( this . org.springframework.mock.web.test.HttpSession != null , STRING ) ; if ( this . org.springframework.mock.web.test.HttpSession instanceof MockHttpSession ) { return ( ( MockHttpSession ) org.springframework.mock.web.test.HttpSession ) . changeSessionId ( ) ; } return this . org.springframework.mock.web.test.HttpSession . getId ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public boolean boolean ( ) { return boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletResponse org.springframework.mock.web.test.HttpServletResponse ) throws java.io.IOException , org.springframework.mock.web.test.ServletException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.mock.web.test.ServletException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.mock.web.test.ServletException { this . java.security.Principal = null ; this . java.lang.String = null ; this . java.lang.String = null ; }  <METHOD_END>
<METHOD_START> public void void ( Part org.springframework.mock.web.test.Part ) { this . org.springframework.mock.web.test.MultiValueMap<java.lang.String,org.springframework.mock.web.test.Part> . add ( org.springframework.mock.web.test.Part . getName ( ) , org.springframework.mock.web.test.Part ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.Part org.springframework.mock.web.test.Part ( java.lang.String java.lang.String ) throws java.io.IOException , java.lang.IllegalStateException , org.springframework.mock.web.test.ServletException { return this . org.springframework.mock.web.test.MultiValueMap<java.lang.String,org.springframework.mock.web.test.Part> . getFirst ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.mock.web.test.Part> < Part > java.util.Collection<org.springframework.mock.web.test.Part> ( ) java.io.IOException , java.lang.IllegalStateException , org.springframework.mock.web.test.ServletException { java.util.List<org.springframework.mock.web.test.Part> < Part > java.util.List<org.springframework.mock.web.test.Part> = new java.util.LinkedList<org.springframework.mock.web.test.Part> <> ( ) ; for ( java.util.List<org.springframework.mock.web.test.Part> < Part > java.util.List<org.springframework.mock.web.test.Part> : this . org.springframework.mock.web.test.MultiValueMap<java.lang.String,org.springframework.mock.web.test.Part> . values ( ) ) { java.util.List<org.springframework.mock.web.test.Part> . addAll ( java.util.List<org.springframework.mock.web.test.Part> ) ; } return java.util.List<org.springframework.mock.web.test.Part> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends org.springframework.mock.web.test.HttpUpgradeHandler > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws java.io.IOException , org.springframework.mock.web.test.ServletException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
