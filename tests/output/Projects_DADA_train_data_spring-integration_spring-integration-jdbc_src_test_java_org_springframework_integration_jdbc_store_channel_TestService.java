<METHOD_START> public void ( int int , int int ) { super(); this . int = int ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> public void ( ) { super(); this . int = NUMBER ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { org.springframework.integration.jdbc.store.channel.Log . info ( STRING + java.lang.String ) ; if ( java.util.Map<java.lang.String,java.lang.String> . boolean ( java.lang.String ) ) { org.springframework.integration.jdbc.store.channel.Log . error ( STRING + java.lang.String ) ; java.util.concurrent.atomic.AtomicInteger . int ( NUMBER ) ; } else { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; org.springframework.integration.jdbc.store.channel.Log . info ( STRING + java.lang.String ) ; if ( this . int > NUMBER ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } } org.springframework.integration.jdbc.store.channel.Log . info ( STRING + java.lang.String + STRING + java.util.concurrent.CountDownLatch . long ( ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( int int ) throws java.lang.InterruptedException { return java.util.concurrent.CountDownLatch . boolean ( int , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
