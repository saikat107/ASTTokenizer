<METHOD_START> public void ( ConfigurableListableBeanFactory org.springframework.aop.framework.autoproxy.ConfigurableListableBeanFactory ) { Assert . notNull ( org.springframework.aop.framework.autoproxy.ConfigurableListableBeanFactory , STRING ) ; this . org.springframework.aop.framework.autoproxy.ConfigurableListableBeanFactory = org.springframework.aop.framework.autoproxy.ConfigurableListableBeanFactory ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.aop.framework.autoproxy.Advisor> < Advisor > java.util.List<org.springframework.aop.framework.autoproxy.Advisor> ( ) { java.lang.String [] java.lang.String[] = null ; synchronized ( this ) { java.lang.String[] = this . java.lang.String[] ; if ( java.lang.String[] == null ) { java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( this . org.springframework.aop.framework.autoproxy.ConfigurableListableBeanFactory , Advisor .class , true , false ) ; this . java.lang.String[] = java.lang.String[] ; } } if ( java.lang.String[] . int == NUMBER ) { return new java.util.LinkedList<org.springframework.aop.framework.autoproxy.Advisor> <> ( ) ; } java.util.List<org.springframework.aop.framework.autoproxy.Advisor> < Advisor > java.util.List<org.springframework.aop.framework.autoproxy.Advisor> = new java.util.LinkedList<org.springframework.aop.framework.autoproxy.Advisor> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( boolean ( java.lang.String ) ) { if ( this . org.springframework.aop.framework.autoproxy.ConfigurableListableBeanFactory . isCurrentlyInCreation ( java.lang.String ) ) { if ( org.springframework.aop.framework.autoproxy.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.autoproxy.Log . debug ( STRING + java.lang.String + STRING ) ; } } else { try { java.util.List<org.springframework.aop.framework.autoproxy.Advisor> . add ( this . org.springframework.aop.framework.autoproxy.ConfigurableListableBeanFactory . getBean ( java.lang.String , Advisor .class ) ) ; } catch ( BeanCreationException org.springframework.aop.framework.autoproxy.BeanCreationException ) { java.lang.Throwable java.lang.Throwable = org.springframework.aop.framework.autoproxy.BeanCreationException . getMostSpecificCause ( ) ; if ( java.lang.Throwable instanceof BeanCurrentlyInCreationException ) { BeanCreationException org.springframework.aop.framework.autoproxy.BeanCreationException = ( BeanCreationException ) java.lang.Throwable ; if ( this . org.springframework.aop.framework.autoproxy.ConfigurableListableBeanFactory . isCurrentlyInCreation ( org.springframework.aop.framework.autoproxy.BeanCreationException . getBeanName ( ) ) ) { if ( org.springframework.aop.framework.autoproxy.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.autoproxy.Log . debug ( STRING + java.lang.String + STRING + org.springframework.aop.framework.autoproxy.BeanCreationException . getMessage ( ) ) ; } continue; } } throw org.springframework.aop.framework.autoproxy.BeanCreationException ; } } } } return java.util.List<org.springframework.aop.framework.autoproxy.Advisor> ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { return true ; }  <METHOD_END>
