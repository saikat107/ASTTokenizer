<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.cassandra.mapping.Converter<?,?>> < Converter < ? , ? > > java.util.List<org.springframework.data.cassandra.mapping.Converter<?,?>> = new java.util.ArrayList<org.springframework.data.cassandra.mapping.Converter<?,?>> <> ( ) ; java.util.List<org.springframework.data.cassandra.mapping.Converter<?,?>> . add ( new org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.PersonReadConverter ( ) ) ; java.util.List<org.springframework.data.cassandra.mapping.Converter<?,?>> . add ( new org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.PersonWriteConverter ( ) ) ; CustomConversions org.springframework.data.cassandra.mapping.CustomConversions = new CustomConversions ( java.util.List<org.springframework.data.cassandra.mapping.Converter<?,?>> ) ; org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setCustomConversions ( org.springframework.data.cassandra.mapping.CustomConversions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.Employee .class ) ; CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getCreateTableSpecificationFor ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . varchar ( ) ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = org.springframework.data.cassandra.mapping.ColumnSpecification ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getType ( ) . isCollection ( ) ) . isTrue ( ) ; CollectionType org.springframework.data.cassandra.mapping.CollectionType = ( CollectionType ) org.springframework.data.cassandra.mapping.ColumnSpecification . getType ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CollectionType . getName ( ) ) . isEqualTo ( Name . LIST ) ; assertThat ( org.springframework.data.cassandra.mapping.CollectionType . getTypeArguments ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.CollectionType . getTypeArguments ( ) . get ( NUMBER ) ) . isEqualTo ( DataType . varchar ( ) ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = org.springframework.data.cassandra.mapping.ColumnSpecification ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getType ( ) . isCollection ( ) ) . isTrue ( ) ; CollectionType org.springframework.data.cassandra.mapping.CollectionType = ( CollectionType ) org.springframework.data.cassandra.mapping.ColumnSpecification . getType ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CollectionType . getName ( ) ) . isEqualTo ( Name . SET ) ; assertThat ( org.springframework.data.cassandra.mapping.CollectionType . getTypeArguments ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.CollectionType . getTypeArguments ( ) . get ( NUMBER ) ) . isEqualTo ( DataType . varchar ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.Employee .class ) ; CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getCreateTableSpecificationFor ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . cfloat ( ) ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = org.springframework.data.cassandra.mapping.ColumnSpecification ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getType ( ) . isCollection ( ) ) . isTrue ( ) ; CollectionType org.springframework.data.cassandra.mapping.CollectionType = ( CollectionType ) org.springframework.data.cassandra.mapping.ColumnSpecification . getType ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CollectionType . getName ( ) ) . isEqualTo ( Name . SET ) ; assertThat ( org.springframework.data.cassandra.mapping.CollectionType . getTypeArguments ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.CollectionType . getTypeArguments ( ) . get ( NUMBER ) ) . isEqualTo ( DataType . bigint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . varchar ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . varchar ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . varchar ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . varchar ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . tinyint ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . tinyint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . smallint ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . smallint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . bigint ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . bigint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . varint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . decimal ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . cint ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . cint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . cfloat ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . cfloat ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . cdouble ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . cdouble ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . cboolean ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . cboolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . date ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . date ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . date ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . date ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . date ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . timestamp ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . timestamp ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . timestamp ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . timestamp ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . timestamp ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . timestamp ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . timestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.TypeWithOverrides .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . timestamp ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . timestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( AllPossibleTypes .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . blob ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final UserType org.springframework.data.cassandra.mapping.UserType = mock ( UserType .class , STRING ) ; final UserType org.springframework.data.cassandra.mapping.UserType = mock ( UserType .class , STRING ) ; final UserType org.springframework.data.cassandra.mapping.UserType = mock ( UserType .class , STRING ) ; org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setUserTypeResolver ( typeName -> { if ( typeName . toCql ( ) . equals ( human_udt . toString ( ) ) ) { return human_udt ; } if ( typeName . toCql ( ) . equals ( species_udt . toString ( ) ) ) { return species_udt ; } if ( typeName . toCql ( ) . equals ( peeps_udt . toString ( ) ) ) { return peeps_udt ; } return null ; } ) ; CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.WithUdtFields .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( org.springframework.data.cassandra.mapping.UserType ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . list ( org.springframework.data.cassandra.mapping.UserType ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . set ( org.springframework.data.cassandra.mapping.UserType ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final UserType org.springframework.data.cassandra.mapping.UserType = mock ( UserType .class , STRING ) ; org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setUserTypeResolver ( typeName -> { if ( typeName . toCql ( ) . equals ( mappedUdt . toString ( ) ) ) { return mappedUdt ; } return null ; } ) ; CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification ( org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.WithMappedUdtFields .class ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( org.springframework.data.cassandra.mapping.UserType ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . list ( org.springframework.data.cassandra.mapping.UserType ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . set ( org.springframework.data.cassandra.mapping.UserType ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . map ( DataType . varchar ( ) , org.springframework.data.cassandra.mapping.UserType ) ) ; assertThat ( org.springframework.data.cassandra.mapping.DataType ( STRING , org.springframework.data.cassandra.mapping.CreateTableSpecification ) ) . isEqualTo ( DataType . map ( org.springframework.data.cassandra.mapping.UserType , DataType . varchar ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.mapping.CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification ( java.lang.Class<?> < ? > java.lang.Class<?> ) { CustomConversions org.springframework.data.cassandra.mapping.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List ) ; org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setCustomConversions ( org.springframework.data.cassandra.mapping.CustomConversions ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ; return org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getCreateTableSpecificationFor ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( java.lang.String java.lang.String , CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification ) { return org.springframework.data.cassandra.mapping.ColumnSpecification ( java.lang.String , org.springframework.data.cassandra.mapping.CreateTableSpecification ) . getType ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.mapping.ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification ( java.lang.String java.lang.String , CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification ) { for ( ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification : org.springframework.data.cassandra.mapping.CreateTableSpecification . getColumns ( ) ) { if ( org.springframework.data.cassandra.mapping.ColumnSpecification . getName ( ) . equals ( CqlIdentifier . cqlId ( java.lang.String ) ) ) { return org.springframework.data.cassandra.mapping.ColumnSpecification ; } } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.data.cassandra.mapping.CreateTableSpecification . getColumns ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.Human org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.Human ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { try { return new ObjectMapper ( ) . readValue ( java.lang.String , org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.Human .class ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.Human org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.Human ) { try { return new ObjectMapper ( ) . writeValueAsString ( org.springframework.data.cassandra.mapping.CreateTableSpecificationBasicCassandraMappingContextUnitTests.Human ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } }  <METHOD_END>
