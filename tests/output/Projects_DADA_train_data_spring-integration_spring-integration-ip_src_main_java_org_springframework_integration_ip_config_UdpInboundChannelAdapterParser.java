<METHOD_START> @ java.lang.Override protected org.springframework.integration.ip.config.AbstractBeanDefinition org.springframework.integration.ip.config.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.ip.config.ParserContext , java.lang.String java.lang.String ) { BeanDefinitionBuilder org.springframework.integration.ip.config.BeanDefinitionBuilder = org.springframework.integration.ip.config.BeanDefinitionBuilder ( org.w3c.dom.Element , org.springframework.integration.ip.config.ParserContext ) ; IpAdapterParserUtils . addCommonSocketOptions ( org.springframework.integration.ip.config.BeanDefinitionBuilder , org.w3c.dom.Element ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.ip.config.BeanDefinitionBuilder , org.w3c.dom.Element , IpAdapterParserUtils . RECEIVE_BUFFER_SIZE ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.ip.config.BeanDefinitionBuilder , org.w3c.dom.Element , IpAdapterParserUtils . POOL_SIZE ) ; org.springframework.integration.ip.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.ip.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , STRING ) ; IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.ip.config.BeanDefinitionBuilder , org.w3c.dom.Element , IpAdapterParserUtils . TASK_EXECUTOR ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.ip.config.BeanDefinitionBuilder , org.w3c.dom.Element , IpAdapterParserUtils . LOOKUP_HOST ) ; return org.springframework.integration.ip.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , BeanDefinitionBuilder org.springframework.integration.ip.config.BeanDefinitionBuilder , ParserContext org.springframework.integration.ip.config.ParserContext ) { java.lang.String java.lang.String = IpAdapterParserUtils . getPort ( org.w3c.dom.Element , org.springframework.integration.ip.config.ParserContext ) ; org.springframework.integration.ip.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.config.BeanDefinitionBuilder org.springframework.integration.ip.config.BeanDefinitionBuilder ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.ip.config.ParserContext ) { BeanDefinitionBuilder org.springframework.integration.ip.config.BeanDefinitionBuilder ; java.lang.String java.lang.String = IpAdapterParserUtils . getMulticast ( org.w3c.dom.Element ) ; if ( java.lang.String . boolean ( STRING ) ) { org.springframework.integration.ip.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( UnicastReceivingChannelAdapter .class ) ; } else { org.springframework.integration.ip.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( MulticastReceivingChannelAdapter .class ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( IpAdapterParserUtils . MULTICAST_ADDRESS ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.ip.config.ParserContext . getReaderContext ( ) . error ( IpAdapterParserUtils . MULTICAST_ADDRESS + STRING , org.w3c.dom.Element ) ; } org.springframework.integration.ip.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; } void ( org.w3c.dom.Element , org.springframework.integration.ip.config.BeanDefinitionBuilder , org.springframework.integration.ip.config.ParserContext ) ; IpAdapterParserUtils . addConstructorValueIfAttributeDefined ( org.springframework.integration.ip.config.BeanDefinitionBuilder , org.w3c.dom.Element , IpAdapterParserUtils . CHECK_LENGTH ) ; return org.springframework.integration.ip.config.BeanDefinitionBuilder ; }  <METHOD_END>
