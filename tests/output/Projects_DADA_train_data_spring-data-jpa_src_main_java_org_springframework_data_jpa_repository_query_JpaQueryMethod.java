<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.jpa.repository.query.RepositoryMetadata , ProjectionFactory org.springframework.data.jpa.repository.query.ProjectionFactory , QueryExtractor org.springframework.data.jpa.repository.query.QueryExtractor ) { super( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.RepositoryMetadata , org.springframework.data.jpa.repository.query.ProjectionFactory ); Assert . notNull ( java.lang.reflect.Method , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.QueryExtractor , STRING ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . org.springframework.data.jpa.repository.query.QueryExtractor = org.springframework.data.jpa.repository.query.QueryExtractor ; Assert . isTrue ( ! ( boolean ( ) && org.springframework.data.jpa.repository.query.JpaParameters ( ) . hasSpecialParameter ( ) ) , java.lang.String . java.lang.String ( STRING , Parameters . TYPES ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.String java.lang.String = java.lang.String ( ) ; if ( ! QueryUtils . hasNamedParameter ( java.lang.String ) ) { return; } for ( Parameter org.springframework.data.jpa.repository.query.Parameter : org.springframework.data.jpa.repository.query.JpaParameters ( ) ) { if ( ! org.springframework.data.jpa.repository.query.Parameter . isNamedParameter ( ) ) { continue; } if ( ! java.lang.String . boolean ( java.lang.String . java.lang.String ( STRING , org.springframework.data.jpa.repository.query.Parameter . getName ( ) . get ( ) ) ) && ! java.lang.String . boolean ( java.lang.String . java.lang.String ( STRING , org.springframework.data.jpa.repository.query.Parameter . getName ( ) . get ( ) ) ) ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.reflect.Method , org.springframework.data.jpa.repository.query.Parameter . getName ( ) , java.lang.String ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) public org.springframework.data.jpa.repository.query.JpaEntityMetadata<?> < ? > org.springframework.data.jpa.repository.query.JpaEntityMetadata<?> ( ) { return new DefaultJpaEntityMetadata ( getDomainClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return null != AnnotationUtils . findAnnotation ( java.lang.reflect.Method , Modifying .class ) ; }  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.jpa.repository.query.QueryHint> < QueryHint > java.util.List<org.springframework.data.jpa.repository.query.QueryHint> ( ) { java.util.List<org.springframework.data.jpa.repository.query.QueryHint> < QueryHint > java.util.List<org.springframework.data.jpa.repository.query.QueryHint> = new java.util.ArrayList<org.springframework.data.jpa.repository.query.QueryHint> < QueryHint > ( ) ; QueryHints org.springframework.data.jpa.repository.query.QueryHints = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , QueryHints .class ) ; if ( org.springframework.data.jpa.repository.query.QueryHints != null ) { java.util.List<org.springframework.data.jpa.repository.query.QueryHint> . addAll ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.query.QueryHints . value ( ) ) ) ; } return java.util.List<org.springframework.data.jpa.repository.query.QueryHint> ; }  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.LockModeType org.springframework.data.jpa.repository.query.LockModeType ( ) { Lock org.springframework.data.jpa.repository.query.Lock = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , Lock .class ) ; return ( LockModeType ) AnnotationUtils . getValue ( org.springframework.data.jpa.repository.query.Lock ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.JpaEntityGraph org.springframework.data.jpa.repository.query.JpaEntityGraph ( ) { EntityGraph org.springframework.data.jpa.repository.query.EntityGraph = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , EntityGraph .class ) ; return org.springframework.data.jpa.repository.query.EntityGraph == null ? null : new JpaEntityGraph ( org.springframework.data.jpa.repository.query.EntityGraph , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { QueryHints org.springframework.data.jpa.repository.query.QueryHints = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , QueryHints .class ) ; return org.springframework.data.jpa.repository.query.QueryHints != null ? org.springframework.data.jpa.repository.query.QueryHints . forCounting ( ) : false ; }  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.QueryExtractor org.springframework.data.jpa.repository.query.QueryExtractor ( ) { return org.springframework.data.jpa.repository.query.QueryExtractor ; }  <METHOD_END>
<METHOD_START> java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.reflect.Method . java.lang.Class<?> ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , java.lang.String .class ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , java.lang.String .class ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , java.lang.String .class ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return java.lang.Boolean ( STRING , java.lang.Boolean .class ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , java.lang.String .class ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : super. getNamedQueryName ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , java.lang.String .class ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return java.lang.Boolean ( STRING , Modifying .class , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> private < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { return T ( java.lang.String , Query .class , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private < T > T T ( java.lang.String java.lang.String , java.lang.Class java.lang.Class , java.lang.Class<T> < T > java.lang.Class<T> ) { java.lang.annotation.Annotation java.lang.annotation.Annotation = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , java.lang.Class ) ; if ( java.lang.annotation.Annotation == null ) { return java.lang.Class<T> . T ( AnnotationUtils . getDefaultValue ( java.lang.Class , java.lang.String ) ) ; } return java.lang.Class<T> . T ( AnnotationUtils . getValue ( java.lang.annotation.Annotation , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.JpaParameters org.springframework.data.jpa.repository.query.JpaParameters ( java.lang.reflect.Method java.lang.reflect.Method ) { return new JpaParameters ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.repository.query.JpaParameters org.springframework.data.jpa.repository.query.JpaParameters ( ) { return ( JpaParameters ) super. getParameters ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return super. isCollectionQuery ( ) && ! java.util.Set<java.lang.Class<?>> . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return AnnotationUtils . findAnnotation ( java.lang.reflect.Method , Procedure .class ) != null ; }  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes ( ) { if ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes == null ) { this . org.springframework.data.jpa.repository.query.StoredProcedureAttributes = org.springframework.data.jpa.repository.query.StoredProcedureAttributeSource . createFrom ( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.JpaEntityMetadata<?> ( ) ) ; } return org.springframework.data.jpa.repository.query.StoredProcedureAttributes ; }  <METHOD_END>
