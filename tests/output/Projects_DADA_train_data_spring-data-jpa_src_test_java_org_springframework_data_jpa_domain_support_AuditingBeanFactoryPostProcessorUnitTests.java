<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.jpa.domain.support.DefaultListableBeanFactory = org.springframework.data.jpa.domain.support.DefaultListableBeanFactory ( ) ; this . org.springframework.data.jpa.domain.support.AuditingBeanFactoryPostProcessor = new AuditingBeanFactoryPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.jpa.domain.support.DefaultListableBeanFactory org.springframework.data.jpa.domain.support.DefaultListableBeanFactory ( ) { DefaultListableBeanFactory org.springframework.data.jpa.domain.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.data.jpa.domain.support.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.data.jpa.domain.support.DefaultListableBeanFactory ) ; org.springframework.data.jpa.domain.support.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING + java.lang.String ( ) ) ) ; return org.springframework.data.jpa.domain.support.DefaultListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.jpa.domain.support.AuditingBeanFactoryPostProcessor . postProcessBeanFactory ( org.springframework.data.jpa.domain.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.data.jpa.domain.support.DefaultListableBeanFactory . isBeanNameInUse ( AuditingBeanFactoryPostProcessor . BEAN_CONFIGURER_ASPECT_BEAN_NAME ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { org.springframework.data.jpa.domain.support.AuditingBeanFactoryPostProcessor . postProcessBeanFactory ( new DefaultListableBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.domain.support.AuditingBeanFactoryPostProcessor . postProcessBeanFactory ( org.springframework.data.jpa.domain.support.DefaultListableBeanFactory ) ; java.lang.String [] java.lang.String[] = org.springframework.data.jpa.domain.support.DefaultListableBeanFactory . getBeanNamesForType ( EntityManagerFactory .class ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { BeanDefinition org.springframework.data.jpa.domain.support.BeanDefinition = org.springframework.data.jpa.domain.support.DefaultListableBeanFactory . getBeanDefinition ( java.lang.String ) ; assertThat ( org.springframework.data.jpa.domain.support.BeanDefinition , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.domain.support.BeanDefinition . getDependsOn ( ) , is ( arrayContaining ( AuditingBeanFactoryPostProcessor . BEAN_CONFIGURER_ASPECT_BEAN_NAME ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.data.jpa.domain.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.data.jpa.domain.support.DefaultListableBeanFactory ( ) ) ; org.springframework.data.jpa.domain.support.AuditingBeanFactoryPostProcessor . postProcessBeanFactory ( org.springframework.data.jpa.domain.support.DefaultListableBeanFactory ) ; }  <METHOD_END>
