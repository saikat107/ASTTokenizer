<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; MockEnvironment org.springframework.context.support.MockEnvironment = new MockEnvironment ( ) ; org.springframework.context.support.MockEnvironment . setProperty ( STRING , STRING ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setEnvironment ( org.springframework.context.support.MockEnvironment ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.context.support.PropertySourcesPlaceholderConfigurer . getAppliedPropertySources ( ) , not ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; Resource org.springframework.context.support.Resource = new ClassPathResource ( STRING , this . java.lang.Class<? extends org.springframework.context.support.PropertySourcesPlaceholderConfigurerTests> ( ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setLocation ( org.springframework.context.support.Resource ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; MutablePropertySources org.springframework.context.support.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.context.support.MutablePropertySources . addLast ( new MockPropertySource ( ) . withProperty ( STRING , STRING ) ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setPropertySources ( org.springframework.context.support.MutablePropertySources ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; assertEquals ( org.springframework.context.support.PropertySourcesPlaceholderConfigurer . getAppliedPropertySources ( ) . iterator ( ) . next ( ) , org.springframework.context.support.MutablePropertySources . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; MutablePropertySources org.springframework.context.support.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.context.support.MutablePropertySources . addLast ( new MockPropertySource ( ) ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setPropertySources ( org.springframework.context.support.MutablePropertySources ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setEnvironment ( new MockEnvironment ( ) . withProperty ( STRING , STRING ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setIgnoreUnresolvablePlaceholders ( true ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; assertEquals ( org.springframework.context.support.PropertySourcesPlaceholderConfigurer . getAppliedPropertySources ( ) . iterator ( ) . next ( ) , org.springframework.context.support.MutablePropertySources . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; MutablePropertySources org.springframework.context.support.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.context.support.MutablePropertySources . addLast ( new MockPropertySource ( ) ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setPropertySources ( org.springframework.context.support.MutablePropertySources ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setProperties ( new java.util.Properties ( ) { { java.lang.Object ( STRING , STRING ) ; } } ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setIgnoreUnresolvablePlaceholders ( true ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setIgnoreUnresolvablePlaceholders ( true ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setProperties ( new java.util.Properties ( ) { { java.lang.Object ( STRING , STRING ) ; } } ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setProperties ( new java.util.Properties ( ) { { java.lang.Object ( STRING , STRING ) ; } } ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setIgnoreUnresolvablePlaceholders ( true ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; PropertySource < ? > org.springframework.context.support.PropertySource<?> = new PropertySource < java.lang.Object > ( STRING , new java.lang.Object ( ) ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return STRING ; } } ; MockEnvironment org.springframework.context.support.MockEnvironment = new MockEnvironment ( ) ; org.springframework.context.support.MockEnvironment . getPropertySources ( ) . addFirst ( org.springframework.context.support.PropertySource<> ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setEnvironment ( org.springframework.context.support.MockEnvironment ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( boolean boolean ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setLocalOverride ( boolean ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setProperties ( new java.util.Properties ( ) { { java.lang.Object ( STRING , STRING ) ; } } ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setEnvironment ( new MockEnvironment ( ) . withProperty ( STRING , STRING ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; if ( boolean ) { assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; } else { assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setPlaceholderPrefix ( STRING ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setPlaceholderSuffix ( STRING ) ; DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , rootBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setEnvironment ( new StandardEnvironment ( ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getSex ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setNullValue ( STRING ) ; DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , rootBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setEnvironment ( new MockEnvironment ( ) . withProperty ( STRING , STRING ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , rootBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setEnvironment ( new MockEnvironment ( ) . withProperty ( STRING , STRING ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setTrimValues ( true ) ; DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , rootBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setEnvironment ( new MockEnvironment ( ) . withProperty ( STRING , STRING ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . getAppliedPropertySources ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; ClassPathResource org.springframework.context.support.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.context.support.PropertySourcesPlaceholderConfigurerTests> ( ) ) ; ClassPathResource org.springframework.context.support.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.context.support.PropertySourcesPlaceholderConfigurerTests> ( ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setLocations ( org.springframework.context.support.ClassPathResource , org.springframework.context.support.ClassPathResource ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setIgnoreResourceNotFound ( true ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setIgnoreUnresolvablePlaceholders ( true ) ; DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( TestBean .class ) . isJedi ( ) , equalTo ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . setConversionService ( new DefaultConversionService ( ) ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.context.support.PropertySourcesPlaceholderConfigurerTests.OptionalTestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; MockEnvironment org.springframework.context.support.MockEnvironment = new MockEnvironment ( ) ; org.springframework.context.support.MockEnvironment . setProperty ( STRING , STRING ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setEnvironment ( org.springframework.context.support.MockEnvironment ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setIgnoreUnresolvablePlaceholders ( true ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( org.springframework.context.support.PropertySourcesPlaceholderConfigurerTests.OptionalTestBean .class ) . getName ( ) , equalTo ( java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . setConversionService ( new DefaultConversionService ( ) ) ; org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.context.support.PropertySourcesPlaceholderConfigurerTests.OptionalTestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; MockEnvironment org.springframework.context.support.MockEnvironment = new MockEnvironment ( ) ; org.springframework.context.support.MockEnvironment . setProperty ( STRING , STRING ) ; PropertySourcesPlaceholderConfigurer org.springframework.context.support.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setEnvironment ( org.springframework.context.support.MockEnvironment ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setIgnoreUnresolvablePlaceholders ( true ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . setNullValue ( STRING ) ; org.springframework.context.support.PropertySourcesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.support.DefaultListableBeanFactory . getBean ( org.springframework.context.support.PropertySourcesPlaceholderConfigurerTests.OptionalTestBean .class ) . getName ( ) , equalTo ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( ) { return java.util.Optional<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { this . java.util.Optional<java.lang.String> = java.util.Optional<java.lang.String> ; }  <METHOD_END>
