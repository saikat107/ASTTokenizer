<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.RequestParamMethodArgumentResolver = new RequestParamMethodArgumentResolver ( null , true ) ; org.springframework.web.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.method.annotation.RequestParamMethodArgumentResolver = new RequestParamMethodArgumentResolver ( null , true ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( STRING ) ) . arg ( java.lang.String .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.lang.String [] .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestParam ( ) . name ( STRING ) ) . arg ( java.util.Map .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( MultipartFile .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.util.List .class , MultipartFile .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( MultipartFile [] .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( Part .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.util.List .class , Part .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( Part [] .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestParam ( ) . noName ( ) ) . arg ( java.util.Map .class ) ; assertFalse ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( ) . arg ( MultipartFile .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.util.List .class , MultipartFile .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( Part .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestPart ( ) ) . arg ( MultipartFile .class ) ; assertFalse ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestParam ( ) ) . arg ( java.lang.String .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( ) ) . arg ( java.lang.String .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.util.Optional .class , java.lang.Integer .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.util.Optional .class , MultipartFile .class ) ; assertTrue ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.RequestParamMethodArgumentResolver = new RequestParamMethodArgumentResolver ( null , false ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; assertFalse ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestPart .class ) . arg ( MultipartFile .class ) ; assertFalse ( org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.method.annotation.MockHttpServletRequest . addParameter ( STRING , java.lang.String ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( STRING ) ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; org.springframework.web.method.annotation.MockHttpServletRequest . addParameter ( STRING , java.lang.String[] ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.lang.String [] .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String [] ) ; assertArrayEquals ( STRING , java.lang.String[] , ( java.lang.String [] ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; MultipartFile org.springframework.web.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.method.annotation.MultipartFile ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockMultipartHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( MultipartFile .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof MultipartFile ) ; assertEquals ( STRING , org.springframework.web.method.annotation.MultipartFile , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; MultipartFile org.springframework.web.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; MultipartFile org.springframework.web.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.method.annotation.MultipartFile ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.method.annotation.MultipartFile ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockMultipartHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.util.List .class , MultipartFile .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; assertEquals ( java.util.Arrays . java.util.List ( org.springframework.web.method.annotation.MultipartFile , org.springframework.web.method.annotation.MultipartFile ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; MultipartFile org.springframework.web.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; MultipartFile org.springframework.web.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.method.annotation.MultipartFile ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.method.annotation.MultipartFile ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockMultipartHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( MultipartFile [] .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof MultipartFile [] ) ; MultipartFile [] org.springframework.web.method.annotation.MultipartFile[] = ( MultipartFile [] ) java.lang.Object ; assertEquals ( NUMBER , parts . length ) ; assertEquals ( org.springframework.web.method.annotation.MultipartFile[] [ NUMBER ] , org.springframework.web.method.annotation.MultipartFile ) ; assertEquals ( org.springframework.web.method.annotation.MultipartFile[] [ NUMBER ] , org.springframework.web.method.annotation.MultipartFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockPart org.springframework.web.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.method.annotation.MockPart ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( Part .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof Part ) ; assertEquals ( STRING , org.springframework.web.method.annotation.MockPart , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; MockPart org.springframework.web.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; MockPart org.springframework.web.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.method.annotation.MockPart ) ; org.springframework.web.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.method.annotation.MockPart ) ; org.springframework.web.method.annotation.MockHttpServletRequest . addPart ( new MockPart ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.util.List .class , Part .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; assertEquals ( java.util.Arrays . java.util.List ( org.springframework.web.method.annotation.MockPart , org.springframework.web.method.annotation.MockPart ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockPart org.springframework.web.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; MockPart org.springframework.web.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.method.annotation.MockPart ) ; org.springframework.web.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.method.annotation.MockPart ) ; org.springframework.web.method.annotation.MockHttpServletRequest . addPart ( new MockPart ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( Part [] .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof Part [] ) ; Part [] org.springframework.web.method.annotation.Part[] = ( Part [] ) java.lang.Object ; assertEquals ( NUMBER , parts . length ) ; assertEquals ( org.springframework.web.method.annotation.Part[] [ NUMBER ] , org.springframework.web.method.annotation.MockPart ) ; assertEquals ( org.springframework.web.method.annotation.Part[] [ NUMBER ] , org.springframework.web.method.annotation.MockPart ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; MultipartFile org.springframework.web.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.method.annotation.MultipartFile ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockMultipartHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( ) . arg ( MultipartFile .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof MultipartFile ) ; assertEquals ( STRING , org.springframework.web.method.annotation.MultipartFile , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; MultipartFile org.springframework.web.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; MultipartFile org.springframework.web.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.method.annotation.MultipartFile ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.method.annotation.MultipartFile ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockMultipartHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.util.List .class , MultipartFile .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; assertEquals ( java.util.Arrays . java.util.List ( org.springframework.web.method.annotation.MultipartFile , org.springframework.web.method.annotation.MultipartFile ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MultipartException .class ) public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( MultipartFile .class ) ; org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; MultipartFile org.springframework.web.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.method.annotation.MultipartFile ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockMultipartHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.util.List .class , MultipartFile .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; assertEquals ( org.springframework.web.method.annotation.MultipartFile , ( ( java.util.List<?> < ? > ) java.lang.Object ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MultipartException .class ) public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( MultipartFile .class ) ; org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MissingServletRequestPartException .class ) public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( MultipartFile .class ) ; org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockPart org.springframework.web.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; MockHttpServletRequest org.springframework.web.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.method.annotation.MockPart ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( Part .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof Part ) ; assertEquals ( STRING , org.springframework.web.method.annotation.MockPart , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( STRING ) ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MissingServletRequestParameterException .class ) public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.lang.String [] .class ) ; org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebDataBinder org.springframework.web.method.annotation.WebDataBinder = new WebRequestDataBinder ( null ) ; org.springframework.web.method.annotation.WebDataBinder . registerCustomEditor ( java.lang.String .class , new StringTrimmerEditor ( true ) ) ; WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory = mock ( WebDataBinderFactory .class ) ; given ( org.springframework.web.method.annotation.WebDataBinderFactory . createBinder ( org.springframework.web.method.annotation.NativeWebRequest , null , STRING ) ) . willReturn ( org.springframework.web.method.annotation.WebDataBinder ) ; this . org.springframework.web.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.WebDataBinderFactory ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebDataBinder org.springframework.web.method.annotation.WebDataBinder = new WebRequestDataBinder ( null ) ; org.springframework.web.method.annotation.WebDataBinder . registerCustomEditor ( java.lang.String .class , new StringTrimmerEditor ( true ) ) ; WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory = mock ( WebDataBinderFactory .class ) ; given ( org.springframework.web.method.annotation.WebDataBinderFactory . createBinder ( org.springframework.web.method.annotation.NativeWebRequest , null , STRING ) ) . willReturn ( org.springframework.web.method.annotation.WebDataBinder ) ; this . org.springframework.web.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( ) ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.WebDataBinderFactory ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.MockHttpServletRequest . setParameter ( STRING , STRING ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( STRING ) ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotNotPresent ( RequestParam .class ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annot ( requestParam ( ) . notRequired ( ) ) . arg ( java.lang.String .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ConfigurableWebBindingInitializer org.springframework.web.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultConversionService ( ) ) ; WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory = new DefaultDataBinderFactory ( org.springframework.web.method.annotation.ConfigurableWebBindingInitializer ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.util.Optional .class , java.lang.Integer .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.WebDataBinderFactory ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; this . org.springframework.web.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.WebDataBinderFactory ) ; assertEquals ( java.util.Optional .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( NUMBER , ( ( java.util.Optional ) java.lang.Object ) . java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableWebBindingInitializer org.springframework.web.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultConversionService ( ) ) ; WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory = new DefaultDataBinderFactory ( org.springframework.web.method.annotation.ConfigurableWebBindingInitializer ) ; MockMultipartHttpServletRequest org.springframework.web.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; MultipartFile org.springframework.web.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.method.annotation.MultipartFile ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockMultipartHttpServletRequest ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.util.Optional .class , MultipartFile .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.WebDataBinderFactory ) ; assertTrue ( java.lang.Object instanceof java.util.Optional ) ; assertEquals ( STRING , org.springframework.web.method.annotation.MultipartFile , ( ( java.util.Optional<?> < ? > ) java.lang.Object ) . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableWebBindingInitializer org.springframework.web.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultConversionService ( ) ) ; WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory = new DefaultDataBinderFactory ( org.springframework.web.method.annotation.ConfigurableWebBindingInitializer ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.util.Optional .class , MultipartFile .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.WebDataBinderFactory ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableWebBindingInitializer org.springframework.web.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultConversionService ( ) ) ; WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory = new DefaultDataBinderFactory ( org.springframework.web.method.annotation.ConfigurableWebBindingInitializer ) ; MethodParameter org.springframework.web.method.annotation.MethodParameter = this . org.springframework.web.method.annotation.ResolvableMethod . annotPresent ( RequestParam .class ) . arg ( java.util.Optional .class , MultipartFile .class ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestParamMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.WebDataBinderFactory ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( @ RequestParam ( name = STRING , defaultValue = STRING ) java.lang.String java.lang.String , @ RequestParam ( STRING ) java.lang.String [] java.lang.String[] , @ RequestParam ( STRING ) java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , @ RequestParam ( STRING ) MultipartFile org.springframework.web.method.annotation.MultipartFile , @ RequestParam ( STRING ) java.util.List<org.springframework.web.method.annotation.MultipartFile> < MultipartFile > java.util.List<org.springframework.web.method.annotation.MultipartFile> , @ RequestParam ( STRING ) MultipartFile [] org.springframework.web.method.annotation.MultipartFile[] , @ RequestParam ( STRING ) Part org.springframework.web.method.annotation.Part , @ RequestParam ( STRING ) java.util.List<org.springframework.web.method.annotation.Part> < Part > java.util.List<org.springframework.web.method.annotation.Part> , @ RequestParam ( STRING ) Part [] org.springframework.web.method.annotation.Part[] , @ RequestParam java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.lang.String java.lang.String , MultipartFile org.springframework.web.method.annotation.MultipartFile , java.util.List<org.springframework.web.method.annotation.MultipartFile> < MultipartFile > java.util.List<org.springframework.web.method.annotation.MultipartFile> , Part org.springframework.web.method.annotation.Part , @ RequestPart MultipartFile org.springframework.web.method.annotation.MultipartFile , @ RequestParam ( STRING ) java.lang.String java.lang.String , @ RequestParam ( name = STRING , required = false ) java.lang.String java.lang.String , @ RequestParam ( STRING ) java.util.Optional<java.lang.Integer> < java.lang.Integer > java.util.Optional<java.lang.Integer> , @ RequestParam ( STRING ) java.util.Optional<org.springframework.web.method.annotation.MultipartFile> < MultipartFile > java.util.Optional<org.springframework.web.method.annotation.MultipartFile> ) {	}  <METHOD_END>
