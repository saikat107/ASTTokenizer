<METHOD_START> public void ( S S , StateMachine < S , E > org.springframework.statemachine.state.StateMachine<S,E> ) { super( S , null , null , null , null , org.springframework.statemachine.state.StateMachine<S,E> ); this . java.util.Collection<S> = new java.util.ArrayList<S> < S > ( ) ; this . java.util.Collection<S> . boolean ( S ) ; }  <METHOD_END>
<METHOD_START> public void ( S S , StateMachine < S , E > org.springframework.statemachine.state.StateMachine<S,E> , java.util.Collection<E> < E > java.util.Collection<E> ) { super( S , java.util.Collection<E> , null , null , null , org.springframework.statemachine.state.StateMachine<S,E> ); this . java.util.Collection<S> = new java.util.ArrayList<S> < S > ( ) ; this . java.util.Collection<S> . boolean ( S ) ; }  <METHOD_END>
<METHOD_START> public void ( S S , StateMachine < S , E > org.springframework.statemachine.state.StateMachine<S,E> , PseudoState < S , E > org.springframework.statemachine.state.PseudoState<S,E> ) { super( S , null , null , null , org.springframework.statemachine.state.PseudoState<S,E> , org.springframework.statemachine.state.StateMachine<S,E> ); this . java.util.Collection<S> = new java.util.ArrayList<S> < S > ( ) ; this . java.util.Collection<S> . boolean ( S ) ; }  <METHOD_END>
<METHOD_START> public void ( S S , StateMachine < S , E > org.springframework.statemachine.state.StateMachine<S,E> , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , PseudoState < S , E > org.springframework.statemachine.state.PseudoState<S,E> ) { super( S , java.util.Collection<E> , java.util.Collection<> , java.util.Collection<> , org.springframework.statemachine.state.PseudoState<S,E> , org.springframework.statemachine.state.StateMachine<S,E> ); this . java.util.Collection<S> = new java.util.ArrayList<S> < S > ( ) ; this . java.util.Collection<S> . boolean ( S ) ; }  <METHOD_END>
<METHOD_START> public void ( S S , StateMachine < S , E > org.springframework.statemachine.state.StateMachine<S,E> , java.util.Collection<E> < E > java.util.Collection<E> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> , java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> < ? extends Action < S , E > > java.util.Collection<? extends org.springframework.statemachine.state.Action<S,E>> ) { super( S , java.util.Collection<E> , java.util.Collection<> , java.util.Collection<> , null , org.springframework.statemachine.state.StateMachine<S,E> ); this . java.util.Collection<S> = new java.util.ArrayList<S> < S > ( ) ; this . java.util.Collection<S> . boolean ( S ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<S> < S > java.util.Collection<S> ( ) { java.util.Collection<S> < S > java.util.Collection<S> = new java.util.ArrayList<S> < S > ( java.util.Collection<S> ) ; State < S , E > org.springframework.statemachine.state.State<S,E> = getSubmachine ( ) . getState ( ) ; if ( org.springframework.statemachine.state.State<S,E> != null ) { java.util.Collection<S> . boolean ( org.springframework.statemachine.state.State<S,E> . getIds ( ) ) ; } return java.util.Collection<S> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.statemachine.state.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.state.State<S,E>> ( ) { java.util.ArrayList<org.springframework.statemachine.state.State<S,E>> < State < S , E > > java.util.ArrayList<org.springframework.statemachine.state.State<S,E>> = new java.util.ArrayList<org.springframework.statemachine.state.State<S,E>> < State < S , E > > ( ) ; java.util.ArrayList<org.springframework.statemachine.state.State<S,E>> . add ( this ) ; for ( State < S , E > org.springframework.statemachine.state.State<S,E> : getSubmachine ( ) . getStates ( ) ) { java.util.ArrayList<org.springframework.statemachine.state.State<S,E>> . addAll ( org.springframework.statemachine.state.State<S,E> . getStates ( ) ) ; } return java.util.ArrayList<org.springframework.statemachine.state.State<S,E>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { super. exit ( org.springframework.statemachine.state.StateContext<S,E> ) ; if ( getSubmachine ( ) . getState ( ) != null && org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) != null && org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) . getSource ( ) . getId ( ) != getSubmachine ( ) . getState ( ) . getId ( ) ) { getSubmachine ( ) . stop ( ) ; } else if ( org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) != null && ! StateMachineUtils . isSubstate ( org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) . getTarget ( ) , org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) . getSource ( ) ) ) { getSubmachine ( ) . stop ( ) ; } if ( ! boolean ( org.springframework.statemachine.state.StateContext<S,E> ) ) { for ( Action < S , E > org.springframework.statemachine.state.Action<S,E> : getExitActions ( ) ) { executeAction ( org.springframework.statemachine.state.Action<S,E> , org.springframework.statemachine.state.StateContext<S,E> ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { super. entry ( org.springframework.statemachine.state.StateContext<S,E> ) ; if ( ! boolean ( org.springframework.statemachine.state.StateContext<S,E> ) ) { for ( Action < S , E > org.springframework.statemachine.state.Action<S,E> : getEntryActions ( ) ) { executeAction ( org.springframework.statemachine.state.Action<S,E> , org.springframework.statemachine.state.StateContext<S,E> ) ; } } if ( org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) != null ) { State < S , E > org.springframework.statemachine.state.State<S,E> = org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) . getTarget ( ) ; State < S , E > org.springframework.statemachine.state.State<S,E> = org.springframework.statemachine.state.State<S,E> ( getSubmachine ( ) . getStates ( ) , org.springframework.statemachine.state.State<S,E> ) ; if ( org.springframework.statemachine.state.StateContext<S,E> . getEvent ( ) != null ) { getSubmachine ( ) . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.state.StateMachineAccess<S,E> ) { org.springframework.statemachine.state.StateMachineAccess<S,E> . setForwardedInitialEvent ( MessageBuilder . withPayload ( org.springframework.statemachine.state.StateContext<S,E> . getEvent ( ) ) . copyHeaders ( org.springframework.statemachine.state.StateContext<S,E> . getMessageHeaders ( ) ) . build ( ) ) ; } } ) ; } if ( org.springframework.statemachine.state.State<S,E> != null && org.springframework.statemachine.state.State<S,E> . isSubmachineState ( ) && ( ! boolean ( org.springframework.statemachine.state.State<S,E> ) ) ) { ( ( org.springframework.statemachine.state.StateMachineState<S,E> < S , E > ) org.springframework.statemachine.state.State<S,E> ) . getSubmachine ( ) . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.state.StateMachineAccess<S,E> ) { org.springframework.statemachine.state.StateMachineAccess<S,E> . setInitialEnabled ( false ) ; } } ) ; } if ( org.springframework.statemachine.state.State<S,E> != null && ! boolean ( org.springframework.statemachine.state.State<S,E> ) ) { getSubmachine ( ) . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.state.StateMachineAccess<S,E> ) { org.springframework.statemachine.state.StateMachineAccess<S,E> . setInitialEnabled ( false ) ; } } ) ; } else if ( org.springframework.statemachine.state.State<S,E> != null && boolean ( org.springframework.statemachine.state.State<S,E> ) && boolean ( org.springframework.statemachine.state.State<S,E> ) ) { ( ( org.springframework.statemachine.state.StateMachineState<S,E> < S , E > ) org.springframework.statemachine.state.State<S,E> ) . getSubmachine ( ) . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.state.StateMachineAccess<S,E> ) { org.springframework.statemachine.state.StateMachineAccess<S,E> . setInitialEnabled ( false ) ; } } ) ; } if ( org.springframework.statemachine.state.State<S,E> == null && getSubmachine ( ) . getStates ( ) . contains ( org.springframework.statemachine.state.State<S,E> ) && ! boolean ( org.springframework.statemachine.state.State<S,E> ) && StateMachineUtils . isSubstate ( org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) . getSource ( ) , org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) . getTarget ( ) ) ) { getSubmachine ( ) . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.state.StateMachineAccess<S,E> ) { org.springframework.statemachine.state.StateMachineAccess<S,E> . setInitialEnabled ( false ) ; } } ) ; } } getSubmachine ( ) . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.state.StateMachineAccess<S,E> ) { org.springframework.statemachine.state.StateMachineAccess<S,E> . setForwardedInitialEvent ( MessageBuilder . withPayload ( org.springframework.statemachine.state.StateContext<S,E> . getEvent ( ) ) . copyHeaders ( org.springframework.statemachine.state.StateContext<S,E> . getMessageHeaders ( ) ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.state.StateMachineAccess<S,E> ) { org.springframework.statemachine.state.StateMachineAccess<S,E> . setInitialEnabled ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.state.StateMachineAccess<S,E> ) { org.springframework.statemachine.state.StateMachineAccess<S,E> . setInitialEnabled ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.state.StateMachineAccess<S,E> ) { org.springframework.statemachine.state.StateMachineAccess<S,E> . setInitialEnabled ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.state.StateMachineAccess<S,E> ) { org.springframework.statemachine.state.StateMachineAccess<S,E> . setInitialEnabled ( false ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( State < S , E > org.springframework.statemachine.state.State<S,E> ) { return org.springframework.statemachine.state.State<S,E> . getPseudoState ( ) != null && org.springframework.statemachine.state.State<S,E> . getPseudoState ( ) . getKind ( ) == PseudoStateKind . INITIAL ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.state.State<S,E> < S , E > org.springframework.statemachine.state.State<S,E> ( java.util.Collection<org.springframework.statemachine.state.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.state.State<S,E>> , State < S , E > org.springframework.statemachine.state.State<S,E> ) { for ( State < S , E > org.springframework.statemachine.state.State<S,E> : java.util.Collection<org.springframework.statemachine.state.State<S,E>> ) { if ( org.springframework.statemachine.state.State<S,E> . getStates ( ) . contains ( org.springframework.statemachine.state.State<S,E> ) ) { if ( org.springframework.statemachine.state.State<S,E> != org.springframework.statemachine.state.State<S,E> ) { return org.springframework.statemachine.state.State<S,E> ; } } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < E > org.springframework.statemachine.state.Message<E> ) { StateMachine < S , E > org.springframework.statemachine.state.StateMachine<S,E> = getSubmachine ( ) ; if ( org.springframework.statemachine.state.StateMachine<S,E> != null ) { return org.springframework.statemachine.state.StateMachine<S,E> . sendEvent ( org.springframework.statemachine.state.Message<E> ) ; } return super. sendEvent ( org.springframework.statemachine.state.Message<E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < E > org.springframework.statemachine.state.Message<E> ) { StateMachine < S , E > org.springframework.statemachine.state.StateMachine<S,E> = getSubmachine ( ) ; if ( org.springframework.statemachine.state.StateMachine<S,E> != null ) { State < S , E > org.springframework.statemachine.state.State<S,E> = org.springframework.statemachine.state.StateMachine<S,E> . getState ( ) ; if ( org.springframework.statemachine.state.State<S,E> != null ) { if ( org.springframework.statemachine.state.State<S,E> . getDeferredEvents ( ) . contains ( org.springframework.statemachine.state.Message<E> . getPayload ( ) ) ) { return true ; } } } return super. shouldDefer ( org.springframework.statemachine.state.Message<E> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { Transition < S , E > org.springframework.statemachine.state.Transition<S,E> = org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) ; if ( org.springframework.statemachine.state.Transition<S,E> != null && TransitionKind . LOCAL == org.springframework.statemachine.state.Transition<S,E> . getKind ( ) && this == org.springframework.statemachine.state.Transition<S,E> . getTarget ( ) ) { return true ; } else { return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.util.Collection<S> ( ) + STRING + super. java.lang.String ( ) + STRING + java.lang.Class<? extends org.springframework.statemachine.state.StateMachineState> ( ) + STRING ; }  <METHOD_END>
