<METHOD_START> @ Test public void void ( ) { try { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; assertEquals ( java.lang.String .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { org.springframework.expression.spel.EvaluationException . printStackTrace ( ) ; fail ( STRING + org.springframework.expression.spel.EvaluationException . getMessage ( ) ) ; } catch ( ParseException org.springframework.expression.spel.ParseException ) { org.springframework.expression.spel.ParseException . printStackTrace ( ) ; fail ( STRING + org.springframework.expression.spel.ParseException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , java.util.List<java.lang.Integer> ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( NUMBER , java.lang.Object ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { int = int ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.ExpressionLanguageScenarioTests.TestClass org.springframework.expression.spel.ExpressionLanguageScenarioTests.TestClass = new org.springframework.expression.spel.ExpressionLanguageScenarioTests.TestClass ( ) ; org.springframework.expression.spel.ExpressionLanguageScenarioTests.TestClass . void ( NUMBER ) ; org.springframework.expression.spel.ExpressionLanguageScenarioTests.TestClass . java.lang.String = STRING ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( org.springframework.expression.spel.ExpressionLanguageScenarioTests.TestClass ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( NUMBER , java.lang.Object ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { try { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.ExpressionLanguageScenarioTests .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.Object ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { org.springframework.expression.spel.EvaluationException . printStackTrace ( ) ; fail ( STRING + org.springframework.expression.spel.EvaluationException . getMessage ( ) ) ; } catch ( ParseException org.springframework.expression.spel.ParseException ) { org.springframework.expression.spel.ParseException . printStackTrace ( ) ; fail ( STRING + org.springframework.expression.spel.ParseException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.ExpressionLanguageScenarioTests.FruitColourAccessor ( ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( java.awt.Color . java.awt.Color , java.lang.Object ) ; try { org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.StandardEvaluationContext , java.awt.Color . java.awt.Color ) ; fail ( STRING ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) , SpelMessage . PROPERTY_OR_FIELD_NOT_WRITABLE_ON_NULL ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.ExpressionLanguageScenarioTests.VegetableColourAccessor ( ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( java.awt.Color . java.awt.Color , java.lang.Object ) ; try { org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.StandardEvaluationContext , java.awt.Color . java.awt.Color ) ; fail ( STRING ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertEquals ( org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) , SpelMessage . PROPERTY_OR_FIELD_NOT_WRITABLE_ON_NULL ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return java.util.Map<java.lang.String,java.awt.Color> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return new TypedValue ( java.util.Map<java.lang.String,java.awt.Color> . java.awt.Color ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object )				throws org.springframework.expression.spel.AccessException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return java.util.Map<java.lang.String,java.awt.Color> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return new TypedValue ( java.util.Map<java.lang.String,java.awt.Color> . java.awt.Color ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.AccessException {		}  <METHOD_END>
