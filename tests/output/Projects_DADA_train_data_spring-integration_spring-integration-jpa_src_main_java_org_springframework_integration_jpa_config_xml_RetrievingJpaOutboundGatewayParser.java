<METHOD_START> @ java.lang.Override protected org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.jpa.config.xml.ParserContext ) { final BeanDefinitionBuilder org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder = super. parseHandler ( org.w3c.dom.Element , org.springframework.integration.jpa.config.xml.ParserContext ) ; final BeanDefinitionBuilder org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder = JpaParserUtils . getOutboundGatewayJpaExecutorBuilder ( org.w3c.dom.Element , org.springframework.integration.jpa.config.xml.ParserContext ) ; BeanDefinition org.springframework.integration.jpa.config.xml.BeanDefinition = IntegrationNamespaceUtils . createExpressionDefinitionFromValueOrExpression ( STRING , STRING , org.springframework.integration.jpa.config.xml.ParserContext , org.w3c.dom.Element , false ) ; if ( org.springframework.integration.jpa.config.xml.BeanDefinition != null ) { org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.jpa.config.xml.BeanDefinition ) ; } BeanDefinition org.springframework.integration.jpa.config.xml.BeanDefinition = IntegrationNamespaceUtils . createExpressionDefinitionFromValueOrExpression ( STRING , STRING , org.springframework.integration.jpa.config.xml.ParserContext , org.w3c.dom.Element , false ) ; if ( org.springframework.integration.jpa.config.xml.BeanDefinition != null ) { org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.jpa.config.xml.BeanDefinition ) ; } if ( StringUtils . hasText ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING } ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( org.w3c.dom.Element . boolean ( java.lang.String ) && StringUtils . hasText ( org.w3c.dom.Element . java.lang.String ( java.lang.String ) ) ) { if ( java.lang.StringBuilder . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } } boolean boolean = ! CollectionUtils . isEmpty ( DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ) ; if ( java.lang.StringBuilder . int ( ) > NUMBER || boolean ) { org.springframework.integration.jpa.config.xml.ParserContext . getReaderContext ( ) . error ( ( java.lang.StringBuilder . int ( ) == NUMBER ? STRING : STRING + java.lang.StringBuilder . java.lang.String ( ) + STRING + ( boolean ? STRING : STRING ) ) + ( boolean ? STRING : STRING ) + STRING , org.w3c.dom.Element ) ; } BeanDefinition org.springframework.integration.jpa.config.xml.BeanDefinition = IntegrationNamespaceUtils . createExpressionDefIfAttributeDefined ( STRING , org.w3c.dom.Element ) ; org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.jpa.config.xml.BeanDefinition ) ; } IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; final BeanDefinition org.springframework.integration.jpa.config.xml.BeanDefinition = org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; final java.lang.String java.lang.String = resolveId ( org.w3c.dom.Element , org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . getRawBeanDefinition ( ) , org.springframework.integration.jpa.config.xml.ParserContext ) ; final java.lang.String java.lang.String = java.lang.String + STRING ; org.springframework.integration.jpa.config.xml.ParserContext . registerBeanComponent ( new BeanComponentDefinition ( org.springframework.integration.jpa.config.xml.BeanDefinition , java.lang.String ) ) ; return org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) . addPropertyValue ( STRING , OutboundGatewayType . RETRIEVING ) ; }  <METHOD_END>
