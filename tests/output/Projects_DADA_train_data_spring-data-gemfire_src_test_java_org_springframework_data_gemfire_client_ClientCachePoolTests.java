<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ProcessWrapper = startGemFireServer ( org.springframework.data.gemfire.client.ClientCachePoolTests .class ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { stopGemFireServer ( org.springframework.data.gemfire.client.ProcessWrapper ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.Long> . get ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.Long> . get ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.Long> . get ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.Long> . get ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.Long> . get ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.Long> . get ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.Long> . get ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.Long> . get ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.Long> . get ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.Long> . get ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Long java.lang.Long ( LoaderHelper < java.lang.Long , java.lang.Long > org.springframework.data.gemfire.client.LoaderHelper<java.lang.Long,java.lang.Long> ) throws org.springframework.data.gemfire.client.CacheLoaderException { java.lang.Long java.lang.Long = org.springframework.data.gemfire.client.LoaderHelper<java.lang.Long,java.lang.Long> . getKey ( ) ; Assert . notNull ( java.lang.Long , STRING ) ; Assert . isTrue ( java.lang.Long >= NUMBER , java.lang.String . java.lang.String ( STRING , java.lang.Long ) ) ; if ( java.lang.Long <= NUMBER ) { return ( java.lang.Long < NUMBER ? NUMBER : NUMBER ) ; } long long = java.lang.Long ; while ( -- java.lang.Long > NUMBER ) { long *= java.lang.Long ; } return long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
