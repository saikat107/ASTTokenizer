<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.transaction.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.transaction.config.AnnotationDrivenTests> ( ) ) ; void ( org.springframework.transaction.config.ClassPathXmlApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.transaction.config.ApplicationContext = new AnnotationConfigApplicationContext ( TransactionManagerConfiguration .class ) ; ClassPathXmlApplicationContext org.springframework.transaction.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING } , java.lang.Class<? extends org.springframework.transaction.config.AnnotationDrivenTests> ( ) , org.springframework.transaction.config.ApplicationContext ) ; void ( org.springframework.transaction.config.ClassPathXmlApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.transaction.config.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.config.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( SynchTransactionManager .class ) ) ; org.springframework.transaction.config.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( NoSynchTransactionManager .class ) ) ; org.springframework.transaction.config.AnnotationConfigApplicationContext . refresh ( ) ; ClassPathXmlApplicationContext org.springframework.transaction.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING } , java.lang.Class<? extends org.springframework.transaction.config.AnnotationDrivenTests> ( ) , org.springframework.transaction.config.AnnotationConfigApplicationContext ) ; void ( org.springframework.transaction.config.ClassPathXmlApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationContext org.springframework.transaction.config.ApplicationContext ) { CallCountingTransactionManager org.springframework.transaction.config.CallCountingTransactionManager = org.springframework.transaction.config.ApplicationContext . getBean ( STRING , CallCountingTransactionManager .class ) ; CallCountingTransactionManager org.springframework.transaction.config.CallCountingTransactionManager = org.springframework.transaction.config.ApplicationContext . getBean ( STRING , CallCountingTransactionManager .class ) ; TransactionalService org.springframework.transaction.config.TransactionalService = org.springframework.transaction.config.ApplicationContext . getBean ( STRING , TransactionalService .class ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.transaction.config.TransactionalService ) ) ; org.springframework.transaction.config.TransactionalService . setSomething ( STRING ) ; assertEquals ( NUMBER , tm1 . commits ) ; assertEquals ( NUMBER , tm2 . commits ) ; org.springframework.transaction.config.TransactionalService . doSomething ( ) ; assertEquals ( NUMBER , tm1 . commits ) ; assertEquals ( NUMBER , tm2 . commits ) ; org.springframework.transaction.config.TransactionalService . setSomething ( STRING ) ; assertEquals ( NUMBER , tm1 . commits ) ; assertEquals ( NUMBER , tm2 . commits ) ; org.springframework.transaction.config.TransactionalService . doSomething ( ) ; assertEquals ( NUMBER , tm1 . commits ) ; assertEquals ( NUMBER , tm2 . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.transaction.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.transaction.config.AnnotationDrivenTests> ( ) ) ; TransactionalService org.springframework.transaction.config.TransactionalService = org.springframework.transaction.config.ClassPathXmlApplicationContext . getBean ( STRING , TransactionalService .class ) ; org.springframework.transaction.config.TransactionalService . setSomething ( STRING ) ; org.springframework.transaction.config.TransactionalService = ( TransactionalService ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.transaction.config.TransactionalService ) ; org.springframework.transaction.config.TransactionalService . setSomething ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.transaction.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.transaction.config.AnnotationDrivenTests> ( ) ) ; TransactionalService org.springframework.transaction.config.TransactionalService = org.springframework.transaction.config.ClassPathXmlApplicationContext . getBean ( STRING , TransactionalService .class ) ; org.springframework.transaction.config.TransactionalService = ( TransactionalService ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.transaction.config.TransactionalService ) ; org.springframework.transaction.config.TransactionalService . setSomething ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.transaction.config.MethodInvocation ) throws java.lang.Throwable { if ( org.springframework.transaction.config.MethodInvocation . getMethod ( ) . getName ( ) . equals ( STRING ) ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; } else { assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; } return org.springframework.transaction.config.MethodInvocation . proceed ( ) ; }  <METHOD_END>
