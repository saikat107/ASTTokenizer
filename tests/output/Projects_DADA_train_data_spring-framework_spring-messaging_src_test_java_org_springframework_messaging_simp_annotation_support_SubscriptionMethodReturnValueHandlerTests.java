<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; SimpMessagingTemplate org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate = new SimpMessagingTemplate ( this . org.springframework.messaging.simp.annotation.support.MessageChannel ) ; org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate . setMessageConverter ( new StringMessageConverter ( ) ) ; this . org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler = new SubscriptionMethodReturnValueHandler ( org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate ) ; SimpMessagingTemplate org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate = new SimpMessagingTemplate ( this . org.springframework.messaging.simp.annotation.support.MessageChannel ) ; org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate . setMessageConverter ( new MappingJackson2MessageConverter ( ) ) ; this . org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler = new SubscriptionMethodReturnValueHandler ( org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate ) ; java.lang.reflect.Method java.lang.reflect.Method = this . java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = this . java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = this . java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = this . java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertFalse ( this . org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertFalse ( this . org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , java.lang.String , java.lang.String , null ) ; this . org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; assertNotNull ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . getValue ( ) ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . getValue ( ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertNull ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getId ( ) ) ; assertNull ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getTimestamp ( ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; assertEquals ( org.springframework.messaging.simp.annotation.support.MimeType , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getContentType ( ) ) ; assertEquals ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getHeader ( SimpMessagingTemplate . CONVERSION_HINT_HEADER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , java.lang.String , java.lang.String , null ) ; MessageSendingOperations org.springframework.messaging.simp.annotation.support.MessageSendingOperations = Mockito . mock ( MessageSendingOperations .class ) ; SubscriptionMethodReturnValueHandler org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler = new SubscriptionMethodReturnValueHandler ( org.springframework.messaging.simp.annotation.support.MessageSendingOperations ) ; org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; ArgumentCaptor < MessageHeaders > org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.MessageHeaders> = ArgumentCaptor . forClass ( MessageHeaders .class ) ; verify ( org.springframework.messaging.simp.annotation.support.MessageSendingOperations ) . convertAndSend ( eq ( STRING ) , eq ( java.lang.String ) , org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.MessageHeaders> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.MessageHeaders> . getValue ( ) , SimpMessageHeaderAccessor .class ) ; assertNotNull ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ) ; assertTrue ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . isMutable ( ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getHeader ( SimpMessagingTemplate . CONVERSION_HINT_HEADER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , java.lang.String , java.lang.String , null ) ; this . org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler . handleReturnValue ( org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.JacksonViewBean ( ) , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . getValue ( ) ; assertNotNull ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.messaging.simp.annotation.support.Message<> . getPayload ( ) , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.annotation.support.Message<?> < ? > org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.security.Principal java.security.Principal ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSubscriptionId ( java.lang.String ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setUser ( java.security.Principal ) ; return MessageBuilder . withPayload ( new byte [ NUMBER ] ) . copyHeaders ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . toMap ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ SubscribeMapping ( STRING ) private java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SubscribeMapping ( STRING ) @ SendTo ( STRING ) private java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SubscribeMapping ( STRING ) @ JsonView ( org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.MyJacksonView1 .class ) public org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.JacksonViewBean org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.JacksonViewBean ( ) { org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.JacksonViewBean org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.JacksonViewBean = new org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.JacksonViewBean ( ) ; org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.JacksonViewBean . void ( STRING ) ; org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.JacksonViewBean . void ( STRING ) ; org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.JacksonViewBean . void ( STRING ) ; return org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandlerTests.JacksonViewBean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
