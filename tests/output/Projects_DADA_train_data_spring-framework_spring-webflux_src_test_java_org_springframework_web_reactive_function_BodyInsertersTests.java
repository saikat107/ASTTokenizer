<METHOD_START> @ Before public void void ( ) { final java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> = new java.util.ArrayList<org.springframework.web.reactive.function.HttpMessageWriter<?>> <> ( ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( new ByteBufferEncoder ( ) ) ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( CharSequenceEncoder . textPlainOnly ( ) ) ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> . add ( new ResourceHttpMessageWriter ( ) ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( new Jaxb2XmlEncoder ( ) ) ) ; Jackson2JsonEncoder org.springframework.web.reactive.function.Jackson2JsonEncoder = new Jackson2JsonEncoder ( ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( org.springframework.web.reactive.function.Jackson2JsonEncoder ) ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> . add ( new ServerSentEventHttpMessageWriter ( org.springframework.web.reactive.function.Jackson2JsonEncoder ) ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> . add ( new FormHttpMessageWriter ( ) ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( CharSequenceEncoder . allMimeTypes ( ) ) ) ; this . BodyInserter.Context = new BodyInserter . BodyInserter ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>>> ( ) { return java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> :: stream ; } @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.ServerHttpRequest> < ServerHttpRequest > java.util.Optional<org.springframework.web.reactive.function.ServerHttpRequest> ( ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.function.ServerHttpRequest> ( ) ; } @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; } } ; this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>>> ( ) { return java.util.List<org.springframework.web.reactive.function.HttpMessageWriter<?>> :: stream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.ServerHttpRequest> < ServerHttpRequest > java.util.Optional<org.springframework.web.reactive.function.ServerHttpRequest> ( ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.function.ServerHttpRequest> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; BodyInserter < java.lang.String , ReactiveHttpOutputMessage > org.springframework.web.reactive.function.BodyInserter<java.lang.String,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> = BodyInserters . fromObject ( java.lang.String ) ; MockServerHttpResponse org.springframework.web.reactive.function.MockServerHttpResponse = new MockServerHttpResponse ( ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.Mono<java.lang.Void> = org.springframework.web.reactive.function.BodyInserter<java.lang.String,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> . insert ( org.springframework.web.reactive.function.MockServerHttpResponse , this . BodyInserter.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( java.lang.String . byte[] ( java.nio.charset.Charset ) ) ; DataBuffer org.springframework.web.reactive.function.DataBuffer = new DefaultDataBufferFactory ( ) . wrap ( java.nio.ByteBuffer ) ; StepVerifier . create ( org.springframework.web.reactive.function.MockServerHttpResponse . getBody ( ) ) . expectNext ( org.springframework.web.reactive.function.DataBuffer ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.function.BodyInsertersTests.User org.springframework.web.reactive.function.BodyInsertersTests.User = new org.springframework.web.reactive.function.BodyInsertersTests.User ( STRING , STRING ) ; BodyInserter < org.springframework.web.reactive.function.BodyInsertersTests.User , ReactiveHttpOutputMessage > org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.BodyInsertersTests.User,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> = BodyInserters . fromObject ( org.springframework.web.reactive.function.BodyInsertersTests.User ) ; MockServerHttpResponse org.springframework.web.reactive.function.MockServerHttpResponse = new MockServerHttpResponse ( ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.Mono<java.lang.Void> = org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.BodyInsertersTests.User,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> . insert ( org.springframework.web.reactive.function.MockServerHttpResponse , this . BodyInserter.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.MockServerHttpResponse . getBodyAsString ( ) ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.function.BodyInsertersTests.User org.springframework.web.reactive.function.BodyInsertersTests.User = new org.springframework.web.reactive.function.BodyInsertersTests.User ( STRING , STRING ) ; BodyInserter < org.springframework.web.reactive.function.BodyInsertersTests.User , ReactiveHttpOutputMessage > org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.BodyInsertersTests.User,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> = BodyInserters . fromObject ( org.springframework.web.reactive.function.BodyInsertersTests.User ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( JSON_VIEW_HINT , org.springframework.web.reactive.function.BodyInsertersTests.SafeToSerialize .class ) ; MockServerHttpResponse org.springframework.web.reactive.function.MockServerHttpResponse = new MockServerHttpResponse ( ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.Mono<java.lang.Void> = org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.BodyInsertersTests.User,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> . insert ( org.springframework.web.reactive.function.MockServerHttpResponse , this . BodyInserter.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.MockServerHttpResponse . getBodyAsString ( ) ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < java.lang.String > org.springframework.web.reactive.function.Flux<java.lang.String> = Flux . just ( STRING ) ; BodyInserter < Flux < java.lang.String > , ReactiveHttpOutputMessage > org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Flux<java.lang.String>,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> = BodyInserters . fromPublisher ( org.springframework.web.reactive.function.Flux<java.lang.String> , java.lang.String .class ) ; MockServerHttpResponse org.springframework.web.reactive.function.MockServerHttpResponse = new MockServerHttpResponse ( ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.Mono<java.lang.Void> = org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Flux<java.lang.String>,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> . insert ( org.springframework.web.reactive.function.MockServerHttpResponse , this . BodyInserter.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.Charset ) ) ; DataBuffer org.springframework.web.reactive.function.DataBuffer = new DefaultDataBufferFactory ( ) . wrap ( java.nio.ByteBuffer ) ; StepVerifier . create ( org.springframework.web.reactive.function.MockServerHttpResponse . getBody ( ) ) . expectNext ( org.springframework.web.reactive.function.DataBuffer ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.web.reactive.function.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.function.BodyInsertersTests> ( ) ) ; BodyInserter < Resource , ReactiveHttpOutputMessage > org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Resource,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> = BodyInserters . fromResource ( org.springframework.web.reactive.function.Resource ) ; MockServerHttpResponse org.springframework.web.reactive.function.MockServerHttpResponse = new MockServerHttpResponse ( ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.Mono<java.lang.Void> = org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Resource,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> . insert ( org.springframework.web.reactive.function.MockServerHttpResponse , this . BodyInserter.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; byte [] byte[] = java.nio.file.Files . byte[] ( org.springframework.web.reactive.function.Resource . getFile ( ) . toPath ( ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.MockServerHttpResponse . getBody ( ) ) . consumeNextWith ( dataBuffer -> { byte [] resultBytes = new byte [ dataBuffer . readableByteCount ( ) ] ; dataBuffer . read ( resultBytes ) ; assertArrayEquals ( expectedBytes , resultBytes ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final int int = NUMBER ; Resource org.springframework.web.reactive.function.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.function.BodyInsertersTests> ( ) ) ; BodyInserter < Resource , ReactiveHttpOutputMessage > org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Resource,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> = BodyInserters . fromResource ( org.springframework.web.reactive.function.Resource ) ; MockServerHttpRequest org.springframework.web.reactive.function.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . range ( HttpRange . createByteRange ( int ) ) . build ( ) ; MockServerHttpResponse org.springframework.web.reactive.function.MockServerHttpResponse = new MockServerHttpResponse ( ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.Mono<java.lang.Void> = org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Resource,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> . insert ( org.springframework.web.reactive.function.MockServerHttpResponse , new BodyInserter . BodyInserter ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>>> ( ) { return java.util.Collections .< HttpMessageWriter < ? > > java.util.Set<org.springframework.web.reactive.function.HttpMessageWriter<?>> ( new ResourceHttpMessageWriter ( ) ) :: stream ; } @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.ServerHttpRequest> < ServerHttpRequest > java.util.Optional<org.springframework.web.reactive.function.ServerHttpRequest> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.MockServerHttpRequest ) ; } @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; } } ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; byte [] byte[] = java.nio.file.Files . byte[] ( org.springframework.web.reactive.function.Resource . getFile ( ) . toPath ( ) ) ; byte [] byte[] = new byte [ byte[] . int - int ] ; java.lang.System . void ( byte[] , int , byte[] , NUMBER , byte[] . int ) ; StepVerifier . create ( org.springframework.web.reactive.function.MockServerHttpResponse . getBody ( ) ) . consumeNextWith ( dataBuffer -> { byte [] resultBytes = new byte [ dataBuffer . readableByteCount ( ) ] ; dataBuffer . read ( resultBytes ) ; assertArrayEquals ( expectedBytes , resultBytes ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageWriter<?>>> ( ) { return java.util.Collections .< HttpMessageWriter < ? > > java.util.Set<org.springframework.web.reactive.function.HttpMessageWriter<?>> ( new ResourceHttpMessageWriter ( ) ) :: stream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.ServerHttpRequest> < ServerHttpRequest > java.util.Optional<org.springframework.web.reactive.function.ServerHttpRequest> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.MockServerHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerSentEvent < java.lang.String > org.springframework.web.reactive.function.ServerSentEvent<java.lang.String> = ServerSentEvent . builder ( STRING ) . build ( ) ; Flux < ServerSentEvent < java.lang.String > > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.ServerSentEvent<java.lang.String>> = Flux . just ( org.springframework.web.reactive.function.ServerSentEvent<java.lang.String> ) ; BodyInserter < Flux < ServerSentEvent < java.lang.String > > , ServerHttpResponse > org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.ServerSentEvent<java.lang.String>>,org.springframework.web.reactive.function.ServerHttpResponse> = BodyInserters . fromServerSentEvents ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.ServerSentEvent<java.lang.String>> ) ; MockServerHttpResponse org.springframework.web.reactive.function.MockServerHttpResponse = new MockServerHttpResponse ( ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.Mono<java.lang.Void> = org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.ServerSentEvent<java.lang.String>>,org.springframework.web.reactive.function.ServerHttpResponse> . insert ( org.springframework.web.reactive.function.MockServerHttpResponse , this . BodyInserter.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.Void> ) . expectNextCount ( NUMBER ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < java.lang.String > org.springframework.web.reactive.function.Flux<java.lang.String> = Flux . just ( STRING ) ; BodyInserter < Flux < java.lang.String > , ServerHttpResponse > org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Flux<java.lang.String>,org.springframework.web.reactive.function.ServerHttpResponse> = BodyInserters . fromServerSentEvents ( org.springframework.web.reactive.function.Flux<java.lang.String> , java.lang.String .class ) ; MockServerHttpResponse org.springframework.web.reactive.function.MockServerHttpResponse = new MockServerHttpResponse ( ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.Mono<java.lang.Void> = org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Flux<java.lang.String>,org.springframework.web.reactive.function.ServerHttpResponse> . insert ( org.springframework.web.reactive.function.MockServerHttpResponse , this . BodyInserter.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.Void> ) . expectNextCount ( NUMBER ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , null ) ; BodyInserter < MultiValueMap < java.lang.String , java.lang.String > , ClientHttpRequest > org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String>,org.springframework.web.reactive.function.ClientHttpRequest> = BodyInserters . fromFormData ( org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String> ) ; MockClientHttpRequest org.springframework.web.reactive.function.MockClientHttpRequest = new MockClientHttpRequest ( HttpMethod . GET , java.net.URI . java.net.URI ( STRING ) ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.Mono<java.lang.Void> = org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String>,org.springframework.web.reactive.function.ClientHttpRequest> . insert ( org.springframework.web.reactive.function.MockClientHttpRequest , this . BodyInserter.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.MockClientHttpRequest . getBody ( ) ) . consumeNextWith ( dataBuffer -> { byte [] resultBytes = new byte [ dataBuffer . readableByteCount ( ) ] ; dataBuffer . read ( resultBytes ) ; assertArrayEquals ( STRING . getBytes ( StandardCharsets . UTF_8 ) , resultBytes ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultDataBufferFactory org.springframework.web.reactive.function.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.DefaultDataBuffer = org.springframework.web.reactive.function.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.DefaultDataBuffer ) ; BodyInserter < Flux < DataBuffer > , ReactiveHttpOutputMessage > org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer>,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> = BodyInserters . fromDataBuffers ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> ) ; MockServerHttpResponse org.springframework.web.reactive.function.MockServerHttpResponse = new MockServerHttpResponse ( ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.Mono<java.lang.Void> = org.springframework.web.reactive.function.BodyInserter<org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer>,org.springframework.web.reactive.function.ReactiveHttpOutputMessage> . insert ( org.springframework.web.reactive.function.MockServerHttpResponse , this . BodyInserter.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.MockServerHttpResponse . getBody ( ) ) . expectNext ( org.springframework.web.reactive.function.DefaultDataBuffer ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
