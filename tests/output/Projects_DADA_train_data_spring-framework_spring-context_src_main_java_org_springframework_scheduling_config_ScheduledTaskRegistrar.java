<METHOD_START> public void void ( TaskScheduler org.springframework.scheduling.config.TaskScheduler ) { Assert . notNull ( org.springframework.scheduling.config.TaskScheduler , STRING ) ; this . org.springframework.scheduling.config.TaskScheduler = org.springframework.scheduling.config.TaskScheduler ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( java.lang.Object instanceof TaskScheduler ) { this . org.springframework.scheduling.config.TaskScheduler = ( TaskScheduler ) java.lang.Object ; } else if ( java.lang.Object instanceof java.util.concurrent.ScheduledExecutorService ) { this . org.springframework.scheduling.config.TaskScheduler = new ConcurrentTaskScheduler ( ( ( java.util.concurrent.ScheduledExecutorService ) java.lang.Object ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.scheduling.config.TaskScheduler org.springframework.scheduling.config.TaskScheduler ( ) { return this . org.springframework.scheduling.config.TaskScheduler ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Runnable,org.springframework.scheduling.config.Trigger> < java.lang.Runnable , Trigger > java.util.Map<java.lang.Runnable,org.springframework.scheduling.config.Trigger> ) { this . java.util.List<org.springframework.scheduling.config.TriggerTask> = new java.util.ArrayList <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Runnable,org.springframework.scheduling.config.Trigger> < java.lang.Runnable , Trigger > java.util.Map.Entry<java.lang.Runnable,org.springframework.scheduling.config.Trigger> : java.util.Map<java.lang.Runnable,org.springframework.scheduling.config.Trigger> . entrySet ( ) ) { void ( new TriggerTask ( java.util.Map.Entry<java.lang.Runnable,org.springframework.scheduling.config.Trigger> . getKey ( ) , java.util.Map.Entry<java.lang.Runnable,org.springframework.scheduling.config.Trigger> . getValue ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.scheduling.config.TriggerTask> < TriggerTask > java.util.List<org.springframework.scheduling.config.TriggerTask> ) { this . java.util.List<org.springframework.scheduling.config.TriggerTask> = java.util.List<org.springframework.scheduling.config.TriggerTask> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.scheduling.config.TriggerTask> < TriggerTask > java.util.List<org.springframework.scheduling.config.TriggerTask> ( ) { return ( this . java.util.List<org.springframework.scheduling.config.TriggerTask> != null ? java.util.Collections . java.util.List<org.springframework.scheduling.config.TriggerTask> ( this . java.util.List<org.springframework.scheduling.config.TriggerTask> ) : java.util.Collections . java.util.List<org.springframework.scheduling.config.TriggerTask> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Runnable,java.lang.String> < java.lang.Runnable , java.lang.String > java.util.Map<java.lang.Runnable,java.lang.String> ) { this . java.util.List<org.springframework.scheduling.config.CronTask> = new java.util.ArrayList <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Runnable,java.lang.String> < java.lang.Runnable , java.lang.String > java.util.Map.Entry<java.lang.Runnable,java.lang.String> : java.util.Map<java.lang.Runnable,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.Runnable,java.lang.String>> ( ) ) { void ( java.util.Map.Entry<java.lang.Runnable,java.lang.String> . java.lang.Runnable ( ) , java.util.Map.Entry<java.lang.Runnable,java.lang.String> . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.scheduling.config.CronTask> < CronTask > java.util.List<org.springframework.scheduling.config.CronTask> ) { this . java.util.List<org.springframework.scheduling.config.CronTask> = java.util.List<org.springframework.scheduling.config.CronTask> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.scheduling.config.CronTask> < CronTask > java.util.List<org.springframework.scheduling.config.CronTask> ( ) { return ( this . java.util.List<org.springframework.scheduling.config.CronTask> != null ? java.util.Collections . java.util.List<org.springframework.scheduling.config.CronTask> ( this . java.util.List<org.springframework.scheduling.config.CronTask> ) : java.util.Collections . java.util.List<org.springframework.scheduling.config.CronTask> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Runnable,java.lang.Long> < java.lang.Runnable , java.lang.Long > java.util.Map<java.lang.Runnable,java.lang.Long> ) { this . java.util.List<org.springframework.scheduling.config.IntervalTask> = new java.util.ArrayList <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Runnable,java.lang.Long> < java.lang.Runnable , java.lang.Long > java.util.Map.Entry<java.lang.Runnable,java.lang.Long> : java.util.Map<java.lang.Runnable,java.lang.Long> . java.util.Set<java.util.Map.Entry<java.lang.Runnable,java.lang.Long>> ( ) ) { void ( java.util.Map.Entry<java.lang.Runnable,java.lang.Long> . java.lang.Runnable ( ) , java.util.Map.Entry<java.lang.Runnable,java.lang.Long> . java.lang.Long ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.scheduling.config.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.config.IntervalTask> ) { this . java.util.List<org.springframework.scheduling.config.IntervalTask> = java.util.List<org.springframework.scheduling.config.IntervalTask> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.scheduling.config.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.config.IntervalTask> ( ) { return ( this . java.util.List<org.springframework.scheduling.config.IntervalTask> != null ? java.util.Collections . java.util.List<org.springframework.scheduling.config.IntervalTask> ( this . java.util.List<org.springframework.scheduling.config.IntervalTask> ) : java.util.Collections . java.util.List<org.springframework.scheduling.config.IntervalTask> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Runnable,java.lang.Long> < java.lang.Runnable , java.lang.Long > java.util.Map<java.lang.Runnable,java.lang.Long> ) { this . java.util.List<org.springframework.scheduling.config.IntervalTask> = new java.util.ArrayList <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Runnable,java.lang.Long> < java.lang.Runnable , java.lang.Long > java.util.Map.Entry<java.lang.Runnable,java.lang.Long> : java.util.Map<java.lang.Runnable,java.lang.Long> . java.util.Set<java.util.Map.Entry<java.lang.Runnable,java.lang.Long>> ( ) ) { void ( java.util.Map.Entry<java.lang.Runnable,java.lang.Long> . java.lang.Runnable ( ) , java.util.Map.Entry<java.lang.Runnable,java.lang.Long> . java.lang.Long ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.scheduling.config.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.config.IntervalTask> ) { this . java.util.List<org.springframework.scheduling.config.IntervalTask> = java.util.List<org.springframework.scheduling.config.IntervalTask> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.scheduling.config.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.config.IntervalTask> ( ) { return ( this . java.util.List<org.springframework.scheduling.config.IntervalTask> != null ? java.util.Collections . java.util.List<org.springframework.scheduling.config.IntervalTask> ( this . java.util.List<org.springframework.scheduling.config.IntervalTask> ) : java.util.Collections . java.util.List<org.springframework.scheduling.config.IntervalTask> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Runnable java.lang.Runnable , Trigger org.springframework.scheduling.config.Trigger ) { void ( new TriggerTask ( java.lang.Runnable , org.springframework.scheduling.config.Trigger ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( TriggerTask org.springframework.scheduling.config.TriggerTask ) { if ( this . java.util.List<org.springframework.scheduling.config.TriggerTask> == null ) { this . java.util.List<org.springframework.scheduling.config.TriggerTask> = new java.util.ArrayList <> ( ) ; } this . java.util.List<org.springframework.scheduling.config.TriggerTask> . add ( org.springframework.scheduling.config.TriggerTask ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Runnable java.lang.Runnable , java.lang.String java.lang.String ) { void ( new CronTask ( java.lang.Runnable , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( CronTask org.springframework.scheduling.config.CronTask ) { if ( this . java.util.List<org.springframework.scheduling.config.CronTask> == null ) { this . java.util.List<org.springframework.scheduling.config.CronTask> = new java.util.ArrayList <> ( ) ; } this . java.util.List<org.springframework.scheduling.config.CronTask> . add ( org.springframework.scheduling.config.CronTask ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Runnable java.lang.Runnable , long long ) { void ( new IntervalTask ( java.lang.Runnable , long , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( IntervalTask org.springframework.scheduling.config.IntervalTask ) { if ( this . java.util.List<org.springframework.scheduling.config.IntervalTask> == null ) { this . java.util.List<org.springframework.scheduling.config.IntervalTask> = new java.util.ArrayList <> ( ) ; } this . java.util.List<org.springframework.scheduling.config.IntervalTask> . add ( org.springframework.scheduling.config.IntervalTask ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Runnable java.lang.Runnable , long long ) { void ( new IntervalTask ( java.lang.Runnable , long , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( IntervalTask org.springframework.scheduling.config.IntervalTask ) { if ( this . java.util.List<org.springframework.scheduling.config.IntervalTask> == null ) { this . java.util.List<org.springframework.scheduling.config.IntervalTask> = new java.util.ArrayList <> ( ) ; } this . java.util.List<org.springframework.scheduling.config.IntervalTask> . add ( org.springframework.scheduling.config.IntervalTask ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.scheduling.config.TriggerTask> ) || ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.scheduling.config.CronTask> ) || ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.scheduling.config.IntervalTask> ) || ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.scheduling.config.IntervalTask> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . org.springframework.scheduling.config.TaskScheduler == null ) { this . java.util.concurrent.ScheduledExecutorService = java.util.concurrent.Executors . java.util.concurrent.ScheduledExecutorService ( ) ; this . org.springframework.scheduling.config.TaskScheduler = new ConcurrentTaskScheduler ( this . java.util.concurrent.ScheduledExecutorService ) ; } if ( this . java.util.List<org.springframework.scheduling.config.TriggerTask> != null ) { for ( TriggerTask org.springframework.scheduling.config.TriggerTask : this . java.util.List<org.springframework.scheduling.config.TriggerTask> ) { void ( org.springframework.scheduling.config.ScheduledTask ( org.springframework.scheduling.config.TriggerTask ) ) ; } } if ( this . java.util.List<org.springframework.scheduling.config.CronTask> != null ) { for ( CronTask org.springframework.scheduling.config.CronTask : this . java.util.List<org.springframework.scheduling.config.CronTask> ) { void ( org.springframework.scheduling.config.ScheduledTask ( org.springframework.scheduling.config.CronTask ) ) ; } } if ( this . java.util.List<org.springframework.scheduling.config.IntervalTask> != null ) { for ( IntervalTask org.springframework.scheduling.config.IntervalTask : this . java.util.List<org.springframework.scheduling.config.IntervalTask> ) { void ( org.springframework.scheduling.config.ScheduledTask ( org.springframework.scheduling.config.IntervalTask ) ) ; } } if ( this . java.util.List<org.springframework.scheduling.config.IntervalTask> != null ) { for ( IntervalTask org.springframework.scheduling.config.IntervalTask : this . java.util.List<org.springframework.scheduling.config.IntervalTask> ) { void ( org.springframework.scheduling.config.ScheduledTask ( org.springframework.scheduling.config.IntervalTask ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ScheduledTask org.springframework.scheduling.config.ScheduledTask ) { if ( org.springframework.scheduling.config.ScheduledTask != null ) { this . java.util.Set<org.springframework.scheduling.config.ScheduledTask> . add ( org.springframework.scheduling.config.ScheduledTask ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.scheduling.config.ScheduledTask org.springframework.scheduling.config.ScheduledTask ( TriggerTask org.springframework.scheduling.config.TriggerTask ) { ScheduledTask org.springframework.scheduling.config.ScheduledTask = this . java.util.Map<org.springframework.scheduling.config.Task,org.springframework.scheduling.config.ScheduledTask> . remove ( org.springframework.scheduling.config.TriggerTask ) ; boolean boolean = false ; if ( org.springframework.scheduling.config.ScheduledTask == null ) { org.springframework.scheduling.config.ScheduledTask = new ScheduledTask ( ) ; boolean = true ; } if ( this . org.springframework.scheduling.config.TaskScheduler != null ) { scheduledTask . future = this . org.springframework.scheduling.config.TaskScheduler . schedule ( org.springframework.scheduling.config.TriggerTask . getRunnable ( ) , org.springframework.scheduling.config.TriggerTask . getTrigger ( ) ) ; } else { void ( org.springframework.scheduling.config.TriggerTask ) ; this . java.util.Map<org.springframework.scheduling.config.Task,org.springframework.scheduling.config.ScheduledTask> . put ( org.springframework.scheduling.config.TriggerTask , org.springframework.scheduling.config.ScheduledTask ) ; } return ( boolean ? org.springframework.scheduling.config.ScheduledTask : null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.scheduling.config.ScheduledTask org.springframework.scheduling.config.ScheduledTask ( CronTask org.springframework.scheduling.config.CronTask ) { ScheduledTask org.springframework.scheduling.config.ScheduledTask = this . java.util.Map<org.springframework.scheduling.config.Task,org.springframework.scheduling.config.ScheduledTask> . remove ( org.springframework.scheduling.config.CronTask ) ; boolean boolean = false ; if ( org.springframework.scheduling.config.ScheduledTask == null ) { org.springframework.scheduling.config.ScheduledTask = new ScheduledTask ( ) ; boolean = true ; } if ( this . org.springframework.scheduling.config.TaskScheduler != null ) { scheduledTask . future = this . org.springframework.scheduling.config.TaskScheduler . schedule ( org.springframework.scheduling.config.CronTask . getRunnable ( ) , org.springframework.scheduling.config.CronTask . getTrigger ( ) ) ; } else { void ( org.springframework.scheduling.config.CronTask ) ; this . java.util.Map<org.springframework.scheduling.config.Task,org.springframework.scheduling.config.ScheduledTask> . put ( org.springframework.scheduling.config.CronTask , org.springframework.scheduling.config.ScheduledTask ) ; } return ( boolean ? org.springframework.scheduling.config.ScheduledTask : null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.scheduling.config.ScheduledTask org.springframework.scheduling.config.ScheduledTask ( IntervalTask org.springframework.scheduling.config.IntervalTask ) { ScheduledTask org.springframework.scheduling.config.ScheduledTask = this . java.util.Map<org.springframework.scheduling.config.Task,org.springframework.scheduling.config.ScheduledTask> . remove ( org.springframework.scheduling.config.IntervalTask ) ; boolean boolean = false ; if ( org.springframework.scheduling.config.ScheduledTask == null ) { org.springframework.scheduling.config.ScheduledTask = new ScheduledTask ( ) ; boolean = true ; } if ( this . org.springframework.scheduling.config.TaskScheduler != null ) { if ( org.springframework.scheduling.config.IntervalTask . getInitialDelay ( ) > NUMBER ) { java.util.Date java.util.Date = new java.util.Date ( java.lang.System . long ( ) + org.springframework.scheduling.config.IntervalTask . getInitialDelay ( ) ) ; scheduledTask . future = this . org.springframework.scheduling.config.TaskScheduler . scheduleAtFixedRate ( org.springframework.scheduling.config.IntervalTask . getRunnable ( ) , java.util.Date , org.springframework.scheduling.config.IntervalTask . getInterval ( ) ) ; } else { scheduledTask . future = this . org.springframework.scheduling.config.TaskScheduler . scheduleAtFixedRate ( org.springframework.scheduling.config.IntervalTask . getRunnable ( ) , org.springframework.scheduling.config.IntervalTask . getInterval ( ) ) ; } } else { void ( org.springframework.scheduling.config.IntervalTask ) ; this . java.util.Map<org.springframework.scheduling.config.Task,org.springframework.scheduling.config.ScheduledTask> . put ( org.springframework.scheduling.config.IntervalTask , org.springframework.scheduling.config.ScheduledTask ) ; } return ( boolean ? org.springframework.scheduling.config.ScheduledTask : null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.scheduling.config.ScheduledTask org.springframework.scheduling.config.ScheduledTask ( IntervalTask org.springframework.scheduling.config.IntervalTask ) { ScheduledTask org.springframework.scheduling.config.ScheduledTask = this . java.util.Map<org.springframework.scheduling.config.Task,org.springframework.scheduling.config.ScheduledTask> . remove ( org.springframework.scheduling.config.IntervalTask ) ; boolean boolean = false ; if ( org.springframework.scheduling.config.ScheduledTask == null ) { org.springframework.scheduling.config.ScheduledTask = new ScheduledTask ( ) ; boolean = true ; } if ( this . org.springframework.scheduling.config.TaskScheduler != null ) { if ( org.springframework.scheduling.config.IntervalTask . getInitialDelay ( ) > NUMBER ) { java.util.Date java.util.Date = new java.util.Date ( java.lang.System . long ( ) + org.springframework.scheduling.config.IntervalTask . getInitialDelay ( ) ) ; scheduledTask . future = this . org.springframework.scheduling.config.TaskScheduler . scheduleWithFixedDelay ( org.springframework.scheduling.config.IntervalTask . getRunnable ( ) , java.util.Date , org.springframework.scheduling.config.IntervalTask . getInterval ( ) ) ; } else { scheduledTask . future = this . org.springframework.scheduling.config.TaskScheduler . scheduleWithFixedDelay ( org.springframework.scheduling.config.IntervalTask . getRunnable ( ) , org.springframework.scheduling.config.IntervalTask . getInterval ( ) ) ; } } else { void ( org.springframework.scheduling.config.IntervalTask ) ; this . java.util.Map<org.springframework.scheduling.config.Task,org.springframework.scheduling.config.ScheduledTask> . put ( org.springframework.scheduling.config.IntervalTask , org.springframework.scheduling.config.ScheduledTask ) ; } return ( boolean ? org.springframework.scheduling.config.ScheduledTask : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( ScheduledTask org.springframework.scheduling.config.ScheduledTask : this . java.util.Set<org.springframework.scheduling.config.ScheduledTask> ) { org.springframework.scheduling.config.ScheduledTask . cancel ( ) ; } if ( this . java.util.concurrent.ScheduledExecutorService != null ) { this . java.util.concurrent.ScheduledExecutorService . java.util.List<java.lang.Runnable> ( ) ; } }  <METHOD_END>
