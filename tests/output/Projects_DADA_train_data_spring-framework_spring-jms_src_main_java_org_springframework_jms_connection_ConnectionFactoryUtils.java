<METHOD_START> public static void void ( Connection org.springframework.jms.connection.Connection , ConnectionFactory org.springframework.jms.connection.ConnectionFactory , boolean boolean ) { if ( org.springframework.jms.connection.Connection == null ) { return; } if ( boolean && org.springframework.jms.connection.ConnectionFactory instanceof SmartConnectionFactory && ( ( SmartConnectionFactory ) org.springframework.jms.connection.ConnectionFactory ) . shouldStop ( org.springframework.jms.connection.Connection ) ) { try { org.springframework.jms.connection.Connection . stop ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jms.connection.Log . debug ( STRING , java.lang.Throwable ) ; } } try { org.springframework.jms.connection.Connection . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jms.connection.Log . debug ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Session org.springframework.jms.connection.Session ) { Session org.springframework.jms.connection.Session = org.springframework.jms.connection.Session ; while ( org.springframework.jms.connection.Session instanceof SessionProxy ) { org.springframework.jms.connection.Session = ( ( SessionProxy ) org.springframework.jms.connection.Session ) . getTargetSession ( ) ; } return org.springframework.jms.connection.Session ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( Session org.springframework.jms.connection.Session , ConnectionFactory org.springframework.jms.connection.ConnectionFactory ) { if ( org.springframework.jms.connection.Session == null || org.springframework.jms.connection.ConnectionFactory == null ) { return false ; } JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder = ( JmsResourceHolder ) TransactionSynchronizationManager . getResource ( org.springframework.jms.connection.ConnectionFactory ) ; return ( org.springframework.jms.connection.JmsResourceHolder != null && org.springframework.jms.connection.JmsResourceHolder . containsSession ( org.springframework.jms.connection.Session ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( final ConnectionFactory org.springframework.jms.connection.ConnectionFactory , final Connection org.springframework.jms.connection.Connection , final boolean boolean )			throws org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.Session ( org.springframework.jms.connection.ConnectionFactory , new org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory ( ) { @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return org.springframework.jms.connection.JmsResourceHolder . getSession ( Session .class , org.springframework.jms.connection.Connection ) ; } @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return ( org.springframework.jms.connection.Connection != null ? org.springframework.jms.connection.Connection : org.springframework.jms.connection.JmsResourceHolder . getConnection ( ) ) ; } @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ; } @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Connection org.springframework.jms.connection.Connection ) throws org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.Connection . createSession ( boolean , Session . AUTO_ACKNOWLEDGE ) ; } @ java.lang.Override public boolean boolean ( ) { return boolean ; } } , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return org.springframework.jms.connection.JmsResourceHolder . getSession ( Session .class , org.springframework.jms.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return ( org.springframework.jms.connection.Connection != null ? org.springframework.jms.connection.Connection : org.springframework.jms.connection.JmsResourceHolder . getConnection ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Connection org.springframework.jms.connection.Connection ) throws org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.Connection . createSession ( boolean , Session . AUTO_ACKNOWLEDGE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public static org.springframework.jms.connection.QueueSession org.springframework.jms.connection.QueueSession ( final QueueConnectionFactory org.springframework.jms.connection.QueueConnectionFactory , final QueueConnection org.springframework.jms.connection.QueueConnection , final boolean boolean )			throws org.springframework.jms.connection.JMSException { return ( QueueSession ) org.springframework.jms.connection.Session ( org.springframework.jms.connection.QueueConnectionFactory , new org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory ( ) { @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return org.springframework.jms.connection.JmsResourceHolder . getSession ( QueueSession .class , org.springframework.jms.connection.QueueConnection ) ; } @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return ( org.springframework.jms.connection.QueueConnection != null ? org.springframework.jms.connection.QueueConnection : org.springframework.jms.connection.JmsResourceHolder . getConnection ( QueueConnection .class ) ) ; } @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.QueueConnectionFactory . createQueueConnection ( ) ; } @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Connection org.springframework.jms.connection.Connection ) throws org.springframework.jms.connection.JMSException { return ( ( QueueConnection ) org.springframework.jms.connection.Connection ) . createQueueSession ( boolean , Session . AUTO_ACKNOWLEDGE ) ; } @ java.lang.Override public boolean boolean ( ) { return boolean ; } } , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return org.springframework.jms.connection.JmsResourceHolder . getSession ( QueueSession .class , org.springframework.jms.connection.QueueConnection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return ( org.springframework.jms.connection.QueueConnection != null ? org.springframework.jms.connection.QueueConnection : org.springframework.jms.connection.JmsResourceHolder . getConnection ( QueueConnection .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.QueueConnectionFactory . createQueueConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Connection org.springframework.jms.connection.Connection ) throws org.springframework.jms.connection.JMSException { return ( ( QueueConnection ) org.springframework.jms.connection.Connection ) . createQueueSession ( boolean , Session . AUTO_ACKNOWLEDGE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public static org.springframework.jms.connection.TopicSession org.springframework.jms.connection.TopicSession ( final TopicConnectionFactory org.springframework.jms.connection.TopicConnectionFactory , final TopicConnection org.springframework.jms.connection.TopicConnection , final boolean boolean )			throws org.springframework.jms.connection.JMSException { return ( TopicSession ) org.springframework.jms.connection.Session ( org.springframework.jms.connection.TopicConnectionFactory , new org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory ( ) { @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return org.springframework.jms.connection.JmsResourceHolder . getSession ( TopicSession .class , org.springframework.jms.connection.TopicConnection ) ; } @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return ( org.springframework.jms.connection.TopicConnection != null ? org.springframework.jms.connection.TopicConnection : org.springframework.jms.connection.JmsResourceHolder . getConnection ( TopicConnection .class ) ) ; } @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.TopicConnectionFactory . createTopicConnection ( ) ; } @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Connection org.springframework.jms.connection.Connection ) throws org.springframework.jms.connection.JMSException { return ( ( TopicConnection ) org.springframework.jms.connection.Connection ) . createTopicSession ( boolean , Session . AUTO_ACKNOWLEDGE ) ; } @ java.lang.Override public boolean boolean ( ) { return boolean ; } } , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return org.springframework.jms.connection.JmsResourceHolder . getSession ( TopicSession .class , org.springframework.jms.connection.TopicConnection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { return ( org.springframework.jms.connection.TopicConnection != null ? org.springframework.jms.connection.TopicConnection : org.springframework.jms.connection.JmsResourceHolder . getConnection ( TopicConnection .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.TopicConnectionFactory . createTopicConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Connection org.springframework.jms.connection.Connection ) throws org.springframework.jms.connection.JMSException { return ( ( TopicConnection ) org.springframework.jms.connection.Connection ) . createTopicSession ( boolean , Session . AUTO_ACKNOWLEDGE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public static org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( ConnectionFactory org.springframework.jms.connection.ConnectionFactory , org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory ) throws org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.Session ( org.springframework.jms.connection.ConnectionFactory , org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory , true ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( ConnectionFactory org.springframework.jms.connection.ConnectionFactory , org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory , boolean boolean )			throws org.springframework.jms.connection.JMSException { Assert . notNull ( org.springframework.jms.connection.ConnectionFactory , STRING ) ; Assert . notNull ( org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory , STRING ) ; JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder = ( JmsResourceHolder ) TransactionSynchronizationManager . getResource ( org.springframework.jms.connection.ConnectionFactory ) ; if ( org.springframework.jms.connection.JmsResourceHolder != null ) { Session org.springframework.jms.connection.Session = org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory . org.springframework.jms.connection.Session ( org.springframework.jms.connection.JmsResourceHolder ) ; if ( org.springframework.jms.connection.Session != null ) { if ( boolean ) { Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory . org.springframework.jms.connection.Connection ( org.springframework.jms.connection.JmsResourceHolder ) ; if ( org.springframework.jms.connection.Connection != null ) { org.springframework.jms.connection.Connection . start ( ) ; } } return org.springframework.jms.connection.Session ; } if ( org.springframework.jms.connection.JmsResourceHolder . isFrozen ( ) ) { return null ; } } if ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) { return null ; } JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder = org.springframework.jms.connection.JmsResourceHolder ; if ( org.springframework.jms.connection.JmsResourceHolder == null ) { org.springframework.jms.connection.JmsResourceHolder = new JmsResourceHolder ( org.springframework.jms.connection.ConnectionFactory ) ; } Connection org.springframework.jms.connection.Connection = org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory . org.springframework.jms.connection.Connection ( org.springframework.jms.connection.JmsResourceHolder ) ; Session org.springframework.jms.connection.Session = null ; try { boolean boolean = ( org.springframework.jms.connection.Connection != null ) ; if ( ! boolean ) { org.springframework.jms.connection.Connection = org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory . org.springframework.jms.connection.Connection ( ) ; org.springframework.jms.connection.JmsResourceHolder . addConnection ( org.springframework.jms.connection.Connection ) ; } org.springframework.jms.connection.Session = org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory . org.springframework.jms.connection.Session ( org.springframework.jms.connection.Connection ) ; org.springframework.jms.connection.JmsResourceHolder . addSession ( org.springframework.jms.connection.Session , org.springframework.jms.connection.Connection ) ; if ( boolean ) { org.springframework.jms.connection.Connection . start ( ) ; } } catch ( JMSException org.springframework.jms.connection.JMSException ) { if ( org.springframework.jms.connection.Session != null ) { try { org.springframework.jms.connection.Session . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } } if ( org.springframework.jms.connection.Connection != null ) { try { org.springframework.jms.connection.Connection . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } } throw org.springframework.jms.connection.JMSException ; } if ( org.springframework.jms.connection.JmsResourceHolder != org.springframework.jms.connection.JmsResourceHolder ) { TransactionSynchronizationManager . registerSynchronization ( new org.springframework.jms.connection.ConnectionFactoryUtils.JmsResourceSynchronization ( org.springframework.jms.connection.JmsResourceHolder , org.springframework.jms.connection.ConnectionFactory , org.springframework.jms.connection.ConnectionFactoryUtils.ResourceFactory . boolean ( ) ) ) ; org.springframework.jms.connection.JmsResourceHolder . setSynchronizedWithTransaction ( true ) ; TransactionSynchronizationManager . bindResource ( org.springframework.jms.connection.ConnectionFactory , org.springframework.jms.connection.JmsResourceHolder ) ; } return org.springframework.jms.connection.Session ; }  <METHOD_END>
<METHOD_START> org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder );  <METHOD_END>
<METHOD_START> org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder );  <METHOD_END>
<METHOD_START> org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) org.springframework.jms.connection.JMSException ;  <METHOD_END>
<METHOD_START> org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Connection org.springframework.jms.connection.Connection ) throws org.springframework.jms.connection.JMSException ;  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> public void ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder , java.lang.Object java.lang.Object , boolean boolean ) { super( org.springframework.jms.connection.JmsResourceHolder , java.lang.Object ); this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return ! this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { try { org.springframework.jms.connection.JmsResourceHolder . commitAll ( ) ; } catch ( JMSException org.springframework.jms.connection.JMSException ) { throw new SynchedLocalTransactionFailedException ( STRING , org.springframework.jms.connection.JMSException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder , java.lang.Object java.lang.Object ) { org.springframework.jms.connection.JmsResourceHolder . closeAll ( ) ; }  <METHOD_END>
