<METHOD_START> public void ( ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , ReactiveCassandraOperations org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations ) { Assert . notNull ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations , STRING ) ; this . org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod = org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod ; this . org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations = org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations ; this . org.springframework.data.cassandra.repository.query.EntityInstantiators = new EntityInstantiators ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.query.CassandraQueryMethod org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( ) { return org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { return ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . hasReactiveWrapperParameter ( ) ? java.lang.Object ( java.lang.Object[] ) : java.lang.Object ( new ReactiveCassandraParameterAccessor ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , java.lang.Object[] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { ReactiveCassandraParameterAccessor org.springframework.data.cassandra.repository.query.ReactiveCassandraParameterAccessor = new ReactiveCassandraParameterAccessor ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , java.lang.Object[] ) ; return ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( ) . isCollectionQuery ( ) ? Flux . defer ( ( ) ( Publisher < Object > ) execute ( accessor ) ) : Mono . defer ( ( ) ( Mono < Object > ) execute ( accessor ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) { CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new ConvertingParameterAccessor ( org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations . getConverter ( ) , org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; ResultProcessor org.springframework.data.cassandra.repository.query.ResultProcessor = org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . getResultProcessor ( ) . withDynamicProjection ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; ReactiveCassandraQueryExecution org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryExecution = org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryExecution ( new ResultProcessingConverter ( org.springframework.data.cassandra.repository.query.ResultProcessor , org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations . getConverter ( ) . getMappingContext ( ) , org.springframework.data.cassandra.repository.query.EntityInstantiators ) ) ; CassandraReturnedType org.springframework.data.cassandra.repository.query.CassandraReturnedType = new CassandraReturnedType ( org.springframework.data.cassandra.repository.query.ResultProcessor . getReturnedType ( ) , org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations . getConverter ( ) . getCustomConversions ( ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ( org.springframework.data.cassandra.repository.query.CassandraReturnedType . isProjecting ( ) ? org.springframework.data.cassandra.repository.query.CassandraReturnedType . getDomainType ( ) : org.springframework.data.cassandra.repository.query.CassandraReturnedType . getReturnedType ( ) ) ; return org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryExecution . execute ( java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor );  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryExecution org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryExecution ( Converter < java.lang.Object , java.lang.Object > org.springframework.data.cassandra.repository.query.Converter<java.lang.Object,java.lang.Object> ) { return new ResultProcessingExecution ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryExecution ( ) , org.springframework.data.cassandra.repository.query.Converter<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryExecution org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryExecution ( ) { return ( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . isCollectionQuery ( ) ? new CollectionExecution ( org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations ) : new SingleEntityExecution ( org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations ) ) ; }  <METHOD_END>
