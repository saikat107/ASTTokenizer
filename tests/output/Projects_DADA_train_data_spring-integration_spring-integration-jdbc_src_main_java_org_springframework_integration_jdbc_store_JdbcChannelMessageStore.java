<METHOD_START> public void ( ) { this . org.springframework.integration.jdbc.store.DeserializingConverter = new DeserializingConverter ( ) ; this . org.springframework.integration.jdbc.store.SerializingConverter = new SerializingConverter ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { this(); this . org.springframework.integration.jdbc.store.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; this . org.springframework.integration.jdbc.store.JdbcTemplate . setFetchSize ( NUMBER ) ; this . org.springframework.integration.jdbc.store.JdbcTemplate . setMaxRows ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource ) { this . org.springframework.integration.jdbc.store.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; this . org.springframework.integration.jdbc.store.JdbcTemplate . setFetchSize ( NUMBER ) ; this . org.springframework.integration.jdbc.store.JdbcTemplate . setMaxRows ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( Deserializer < ? extends Message < ? > > org.springframework.integration.jdbc.store.Deserializer<? extends org.springframework.integration.jdbc.store.Message<?>> ) { this . org.springframework.integration.jdbc.store.DeserializingConverter = new DeserializingConverter ( ( Deserializer ) org.springframework.integration.jdbc.store.Deserializer<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( JdbcTemplate org.springframework.integration.jdbc.store.JdbcTemplate ) { Assert . notNull ( org.springframework.integration.jdbc.store.JdbcTemplate , STRING ) ; this . org.springframework.integration.jdbc.store.JdbcTemplate = org.springframework.integration.jdbc.store.JdbcTemplate ; }  <METHOD_END>
<METHOD_START> public void void ( LobHandler org.springframework.integration.jdbc.store.LobHandler ) { Assert . notNull ( org.springframework.integration.jdbc.store.LobHandler , STRING ) ; this . org.springframework.integration.jdbc.store.LobHandler = org.springframework.integration.jdbc.store.LobHandler ; }  <METHOD_END>
<METHOD_START> public void void ( MessageRowMapper org.springframework.integration.jdbc.store.MessageRowMapper ) { Assert . notNull ( org.springframework.integration.jdbc.store.MessageRowMapper , STRING ) ; this . org.springframework.integration.jdbc.store.MessageRowMapper = org.springframework.integration.jdbc.store.MessageRowMapper ; }  <METHOD_END>
<METHOD_START> public void void ( ChannelMessageStoreQueryProvider org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider ) { Assert . notNull ( org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider , STRING ) ; this . org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider = org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( Serializer < ? super Message < ? > > org.springframework.integration.jdbc.store.Serializer<? super org.springframework.integration.jdbc.store.Message<?>> ) { Assert . notNull ( org.springframework.integration.jdbc.store.Serializer<> , STRING ) ; this . org.springframework.integration.jdbc.store.SerializingConverter = new SerializingConverter ( ( Serializer < java.lang.Object > ) org.springframework.integration.jdbc.store.Serializer<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MessageGroupFactory org.springframework.integration.jdbc.store.MessageGroupFactory ) { Assert . notNull ( org.springframework.integration.jdbc.store.MessageGroupFactory , STRING ) ; this . org.springframework.integration.jdbc.store.MessageGroupFactory = org.springframework.integration.jdbc.store.MessageGroupFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.jdbc.store.MessageGroupFactory org.springframework.integration.jdbc.store.MessageGroupFactory ( ) { return this . org.springframework.integration.jdbc.store.MessageGroupFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.jdbc.store.BeanFactory ) throws org.springframework.integration.jdbc.store.BeansException { this . org.springframework.integration.jdbc.store.BeanFactory = org.springframework.integration.jdbc.store.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { Assert . state ( this . org.springframework.integration.jdbc.store.JdbcTemplate != null , STRING ) ; Assert . notNull ( this . org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider , STRING ) ; if ( this . org.springframework.integration.jdbc.store.MessageRowMapper == null ) { this . org.springframework.integration.jdbc.store.MessageRowMapper = new MessageRowMapper ( this . org.springframework.integration.jdbc.store.DeserializingConverter , this . org.springframework.integration.jdbc.store.LobHandler ) ; } if ( this . org.springframework.integration.jdbc.store.JdbcTemplate . getFetchSize ( ) != NUMBER && org.springframework.integration.jdbc.store.Log . isWarnEnabled ( ) ) { org.springframework.integration.jdbc.store.Log . warn ( STRING ) ; } this . org.springframework.integration.jdbc.store.JdbcTemplate . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jdbc.store.MessageGroup org.springframework.integration.jdbc.store.MessageGroup ( java.lang.Object java.lang.Object , final Message < ? > org.springframework.integration.jdbc.store.Message<?> ) { java.lang.String java.lang.String = java.lang.String ( java.lang.Object ) ; long long = java.lang.System . long ( ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.integration.jdbc.store.Message<> . getHeaders ( ) . getId ( ) ) ; byte [] byte[] = this . org.springframework.integration.jdbc.store.SerializingConverter . convert ( org.springframework.integration.jdbc.store.Message<> ) ; if ( org.springframework.integration.jdbc.store.Log . isDebugEnabled ( ) ) { org.springframework.integration.jdbc.store.Log . debug ( STRING + java.lang.String ) ; } try { this . org.springframework.integration.jdbc.store.JdbcTemplate . update ( java.lang.String ( this . org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider . getCreateMessageQuery ( ) ) , ps -> { ps . setString ( NUMBER , messageId ) ; ps . setString ( NUMBER , groupKey ) ; ps . setString ( NUMBER , this . region ) ; ps . setLong ( NUMBER , createdDate ) ; Integer priority = message . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . PRIORITY , Integer .class ) ; if ( JdbcChannelMessageStore .this . priorityEnabled && priority != null ) { ps . setInt ( NUMBER , priority ) ; } else { ps . setNull ( NUMBER , Types . NUMERIC ) ; } this . lobHandler . getLobCreator ( ) . setBlobAsBytes ( ps , NUMBER , messageBytes ) ; } ) ; } catch ( DuplicateKeyException org.springframework.integration.jdbc.store.DuplicateKeyException ) { if ( org.springframework.integration.jdbc.store.Log . isDebugEnabled ( ) ) { org.springframework.integration.jdbc.store.Log . debug ( STRING + java.lang.String + STRING + STRING ) ; } } return org.springframework.integration.jdbc.store.MessageGroup ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { return java.lang.Object == null ? null : UUIDConverter . getUUID ( java.lang.Object ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jdbc.store.MessageGroup org.springframework.integration.jdbc.store.MessageGroup ( java.lang.Object java.lang.Object ) { return org.springframework.integration.jdbc.store.MessageGroupFactory ( ) . create ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute public int int ( ) { return this . org.springframework.integration.jdbc.store.JdbcTemplate . queryForObject ( this . java.lang.String ( STRING ) , java.lang.Integer .class , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; if ( java.lang.String == null ) { java.lang.String = StringUtils . replace ( java.lang.String , STRING , this . java.lang.String ) ; this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public int int ( java.lang.Object java.lang.Object ) { final java.lang.String java.lang.String = java.lang.String ( java.lang.Object ) ; return this . org.springframework.integration.jdbc.store.JdbcTemplate . queryForObject ( java.lang.String ( this . org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider . getCountAllMessagesInGroupQuery ( ) ) , java.lang.Integer .class , java.lang.String , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { this . org.springframework.integration.jdbc.store.JdbcTemplate . update ( this . java.lang.String ( this . org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider . getDeleteMessageGroupQuery ( ) ) , this . java.lang.String ( java.lang.Object ) , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jdbc.store.Message<?> < ? > org.springframework.integration.jdbc.store.Message<?> ( java.lang.Object java.lang.Object ) { final java.lang.String java.lang.String = java.lang.String ( java.lang.Object ) ; final Message < ? > org.springframework.integration.jdbc.store.Message<?> = this . org.springframework.integration.jdbc.store.Message<?> ( java.lang.String ) ; if ( org.springframework.integration.jdbc.store.Message<> != null ) { if ( ! this . boolean ( java.lang.Object , org.springframework.integration.jdbc.store.Message<> ) ) { return null ; } } return org.springframework.integration.jdbc.store.Message<> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.jdbc.store.Message<?> < ? > org.springframework.integration.jdbc.store.Message<?> ( java.lang.String java.lang.String ) { final NamedParameterJdbcTemplate org.springframework.integration.jdbc.store.NamedParameterJdbcTemplate = new NamedParameterJdbcTemplate ( this . org.springframework.integration.jdbc.store.JdbcTemplate ) ; final MapSqlParameterSource org.springframework.integration.jdbc.store.MapSqlParameterSource = new MapSqlParameterSource ( ) ; org.springframework.integration.jdbc.store.MapSqlParameterSource . addValue ( STRING , this . java.lang.String ) ; org.springframework.integration.jdbc.store.MapSqlParameterSource . addValue ( STRING , java.lang.String ) ; java.lang.String java.lang.String ; final java.util.List<org.springframework.integration.jdbc.store.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.jdbc.store.Message<?>> ; this . java.util.concurrent.locks.Lock . void ( ) ; try { if ( this . boolean && ! this . java.util.Set<java.lang.String> . boolean ( ) ) { if ( this . boolean ) { java.lang.String = java.lang.String ( this . org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider . getPriorityPollFromGroupExcludeIdsQuery ( ) ) ; } else { java.lang.String = java.lang.String ( this . org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider . getPollFromGroupExcludeIdsQuery ( ) ) ; } org.springframework.integration.jdbc.store.MapSqlParameterSource . addValue ( STRING , this . java.util.Set<java.lang.String> ) ; } else { if ( this . boolean ) { java.lang.String = java.lang.String ( this . org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider . getPriorityPollFromGroupQuery ( ) ) ; } else { java.lang.String = java.lang.String ( this . org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider . getPollFromGroupQuery ( ) ) ; } } java.util.List<org.springframework.integration.jdbc.store.Message<?>> = org.springframework.integration.jdbc.store.NamedParameterJdbcTemplate . query ( java.lang.String , org.springframework.integration.jdbc.store.MapSqlParameterSource , this . org.springframework.integration.jdbc.store.MessageRowMapper ) ; } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } Assert . state ( java.util.List<org.springframework.integration.jdbc.store.Message<?>> . size ( ) < NUMBER , ( ) STRING + messages . size ( ) + STRING ) ; if ( java.util.List<org.springframework.integration.jdbc.store.Message<?>> . size ( ) > NUMBER ) { final Message < ? > org.springframework.integration.jdbc.store.Message<?> = java.util.List<org.springframework.integration.jdbc.store.Message<?>> . get ( NUMBER ) ; final java.lang.String java.lang.String = org.springframework.integration.jdbc.store.Message<> . getHeaders ( ) . getId ( ) . toString ( ) ; if ( this . boolean ) { this . java.util.concurrent.locks.Lock . void ( ) ; try { boolean boolean = this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; if ( org.springframework.integration.jdbc.store.Log . isDebugEnabled ( ) ) { org.springframework.integration.jdbc.store.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String , boolean ) ) ; } } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } } return org.springframework.integration.jdbc.store.Message<> ; } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jdbc.store.Message<?> ) { final java.util.UUID java.util.UUID = org.springframework.integration.jdbc.store.Message<> . getHeaders ( ) . getId ( ) ; int int = this . org.springframework.integration.jdbc.store.JdbcTemplate . update ( java.lang.String ( this . org.springframework.integration.jdbc.store.ChannelMessageStoreQueryProvider . getDeleteMessageQuery ( ) ) , new java.lang.Object [] { java.lang.String ( java.util.UUID ) , java.lang.String ( java.lang.Object ) , this . java.lang.String } , new int [] { java.sql.Types . int , java.sql.Types . int , java.sql.Types . int } ) ; boolean boolean = int != NUMBER ; if ( boolean ) { org.springframework.integration.jdbc.store.Log . debug ( java.lang.String . java.lang.String ( STRING , java.util.UUID ) ) ; } else { org.springframework.integration.jdbc.store.Log . warn ( java.lang.String . java.lang.String ( STRING , java.util.UUID ) ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( org.springframework.integration.jdbc.store.Log . isDebugEnabled ( ) ) { org.springframework.integration.jdbc.store.Log . debug ( STRING + java.lang.String ) ; } this . java.util.concurrent.locks.Lock . void ( ) ; try { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ ManagedMetric public int int ( ) { return this . java.util.Set<java.lang.String> . int ( ) ; }  <METHOD_END>
