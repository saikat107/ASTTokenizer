<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.groovy.config.GroovyServiceActivatorTests.MyGroovyCustomizer . boolean = false ; QueueChannel org.springframework.integration.groovy.config.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.groovy.config.QueueChannel . setBeanName ( STRING ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING + int ) . setReplyChannel ( org.springframework.integration.groovy.config.QueueChannel ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; java.lang.Thread . void ( NUMBER ) ; } java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . java.lang.String ( NUMBER ) . boolean ( java.lang.String . java.lang.String ( NUMBER ) ) ) ; assertFalse ( java.lang.String . java.lang.String ( NUMBER ) . boolean ( java.lang.String . java.lang.String ( NUMBER ) ) ) ; assertTrue ( org.springframework.integration.groovy.config.GroovyServiceActivatorTests.MyGroovyCustomizer . boolean ) ; assertNull ( org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.groovy.config.GroovyServiceActivatorTests.MyGroovyCustomizer . boolean = false ; QueueChannel org.springframework.integration.groovy.config.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.groovy.config.QueueChannel . setBeanName ( STRING ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING + int ) . setReplyChannel ( org.springframework.integration.groovy.config.QueueChannel ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; java.lang.Thread . void ( NUMBER ) ; } java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . java.lang.String ( NUMBER ) . boolean ( java.lang.String . java.lang.String ( NUMBER ) ) ) ; assertFalse ( java.lang.String . java.lang.String ( NUMBER ) . boolean ( java.lang.String . java.lang.String ( NUMBER ) ) ) ; assertTrue ( org.springframework.integration.groovy.config.GroovyServiceActivatorTests.MyGroovyCustomizer . boolean ) ; assertNull ( org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.groovy.config.GroovyServiceActivatorTests.MyGroovyCustomizer . boolean = false ; QueueChannel org.springframework.integration.groovy.config.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.groovy.config.QueueChannel . setBeanName ( STRING ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING + int ) . setReplyChannel ( org.springframework.integration.groovy.config.QueueChannel ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; } java.text.DateFormat java.text.DateFormat = new java.text.SimpleDateFormat ( STRING ) ; java.lang.String java.lang.String = java.text.DateFormat . java.lang.String ( new java.util.Date ( ) ) ; assertEquals ( STRING + java.lang.String , org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING + java.lang.String , org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING + java.lang.String , org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) ) ; assertTrue ( org.springframework.integration.groovy.config.GroovyServiceActivatorTests.MyGroovyCustomizer . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PollableChannel org.springframework.integration.groovy.config.PollableChannel = new QueueChannel ( ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { Message < ? > org.springframework.integration.groovy.config.Message<?> = MessageBuilder . withPayload ( STRING + int ) . setReplyChannel ( org.springframework.integration.groovy.config.PollableChannel ) . build ( ) ; this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; } java.text.DateFormat java.text.DateFormat = new java.text.SimpleDateFormat ( STRING ) ; java.lang.String java.lang.String = java.text.DateFormat . java.lang.String ( new java.util.Date ( ) ) ; assertEquals ( STRING + java.lang.String , org.springframework.integration.groovy.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING + java.lang.String , org.springframework.integration.groovy.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING + java.lang.String , org.springframework.integration.groovy.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.groovy.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.groovy.config.Message<?> = new ErrorMessage ( new ReplyRequiredException ( new GenericMessage < java.lang.String > ( STRING ) , STRING ) ) ; try { this . org.springframework.integration.groovy.config.MessageChannel . send ( org.springframework.integration.groovy.config.Message<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception . java.lang.Throwable ( ) ; assertEquals ( MissingPropertyException .class , java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; assertThat ( java.lang.Throwable . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; throw java.lang.Exception ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionParsingException .class ) public void void ( ) java.lang.Exception { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.groovy.config.GroovyServiceActivatorTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.groovy.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Message < ? > org.springframework.integration.groovy.config.Message<?> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.Date ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.groovy.config.Message<> . getPayload ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.groovy.config.Message<> . getHeaders ( ) ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( GroovyObject org.springframework.integration.groovy.config.GroovyObject ) { this . boolean = true ; }  <METHOD_END>
