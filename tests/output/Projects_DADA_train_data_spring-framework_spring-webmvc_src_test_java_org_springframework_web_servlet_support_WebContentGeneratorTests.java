<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebContentGenerator org.springframework.web.servlet.support.WebContentGenerator = new org.springframework.web.servlet.support.WebContentGeneratorTests.TestWebContentGenerator ( true ) ; assertEquals ( STRING , org.springframework.web.servlet.support.WebContentGenerator . getAllowHeader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebContentGenerator org.springframework.web.servlet.support.WebContentGenerator = new org.springframework.web.servlet.support.WebContentGeneratorTests.TestWebContentGenerator ( false ) ; assertEquals ( STRING , org.springframework.web.servlet.support.WebContentGenerator . getAllowHeader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebContentGenerator org.springframework.web.servlet.support.WebContentGenerator = new org.springframework.web.servlet.support.WebContentGeneratorTests.TestWebContentGenerator ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.support.WebContentGenerator . getAllowHeader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebContentGenerator org.springframework.web.servlet.support.WebContentGenerator = new org.springframework.web.servlet.support.WebContentGeneratorTests.TestWebContentGenerator ( ) ; org.springframework.web.servlet.support.WebContentGenerator . setSupportedMethods ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.support.WebContentGenerator . getAllowHeader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebContentGenerator org.springframework.web.servlet.support.WebContentGenerator = new org.springframework.web.servlet.support.WebContentGeneratorTests.TestWebContentGenerator ( ) ; org.springframework.web.servlet.support.WebContentGenerator . setSupportedMethods ( ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.support.WebContentGenerator . getAllowHeader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebContentGenerator org.springframework.web.servlet.support.WebContentGenerator = new org.springframework.web.servlet.support.WebContentGeneratorTests.TestWebContentGenerator ( ) ; MockHttpServletResponse org.springframework.web.servlet.support.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.support.WebContentGenerator . prepareResponse ( org.springframework.web.servlet.support.MockHttpServletResponse ) ; assertNull ( org.springframework.web.servlet.support.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = { STRING , STRING } ; java.lang.String [] java.lang.String[] = {} ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; void ( java.lang.String[] , java.lang.String[] , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = { STRING } ; java.lang.String [] java.lang.String[] = { STRING } ; java.lang.String [] java.lang.String[] = { STRING } ; void ( java.lang.String[] , java.lang.String[] , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = { STRING , STRING } ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; java.lang.String [] java.lang.String[] = { STRING , STRING , STRING } ; void ( java.lang.String[] , java.lang.String[] , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = { STRING , STRING } ; java.lang.String [] java.lang.String[] = { STRING } ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; void ( java.lang.String[] , java.lang.String[] , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { WebContentGenerator org.springframework.web.servlet.support.WebContentGenerator = new org.springframework.web.servlet.support.WebContentGeneratorTests.TestWebContentGenerator ( ) ; org.springframework.web.servlet.support.WebContentGenerator . setVaryByRequestHeaders ( java.lang.String[] ) ; MockHttpServletResponse org.springframework.web.servlet.support.MockHttpServletResponse = new MockHttpServletResponse ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.web.servlet.support.MockHttpServletResponse . addHeader ( STRING , java.lang.String ) ; } org.springframework.web.servlet.support.WebContentGenerator . prepareResponse ( org.springframework.web.servlet.support.MockHttpServletResponse ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) , org.springframework.web.servlet.support.MockHttpServletResponse . getHeaderValues ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { super( boolean ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { super( java.lang.String[] ); }  <METHOD_END>
