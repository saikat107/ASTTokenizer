<METHOD_START> private void ( ) {}  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { if ( null != ReflectionUtils . findMethod ( java.lang.Class<> , STRING + java.lang.String ) ) { return true ; } return null != ReflectionUtils . findField ( java.lang.Class<> , StringUtils . uncapitalize ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return Repository .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.String java.lang.String ) { return Repository .class . java.lang.String ( ) . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static int int ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { int int = NUMBER ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { int ++ ; } } return int ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; Assert . notEmpty ( java.lang.Class<?>[] , STRING ) ; TypeInformation < ? > org.springframework.data.repository.util.TypeInformation<?> = org.springframework.data.repository.util.TypeInformation<?> ( java.lang.reflect.Method ) ; java.util.Arrays . java.util.stream.Stream<java.lang.Class<?>> ( java.lang.Class<?>[] ) . java.util.stream.Stream<java.lang.Class<?>> ( java.lang.Class<?> -> java.lang.Class<> . boolean ( org.springframework.data.repository.util.TypeInformation<> . getType ( ) ) ) . java.util.Optional<java.lang.Class<?>> ( ) . java.lang.Class<?> ( ( ) new java.lang.IllegalStateException ( STRING + java.util.Arrays . java.lang.String ( java.lang.Class<?>[] ) ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Object java.lang.Object , java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ) { if ( null == java.lang.Object ) { return false ; } return java.util.Collection<java.lang.Class<?>> . java.util.stream.Stream<java.lang.Class<?>> ( ) . boolean ( java.lang.Class<?> -> java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.Exception java.lang.Exception ) throws java.lang.Throwable { if ( java.lang.Exception instanceof java.lang.reflect.InvocationTargetException ) { throw ( ( java.lang.reflect.InvocationTargetException ) java.lang.Exception ) . java.lang.Throwable ( ) ; } throw java.lang.Exception ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.repository.util.TypeInformation<?> < ? > org.springframework.data.repository.util.TypeInformation<?> ( java.lang.reflect.Method java.lang.reflect.Method ) { TypeInformation < ? > org.springframework.data.repository.util.TypeInformation<?> = ClassTypeInformation . fromReturnTypeOf ( java.lang.reflect.Method ) ; return QueryExecutionConverters . supports ( org.springframework.data.repository.util.TypeInformation<> . getType ( ) ) ? org.springframework.data.repository.util.TypeInformation<> . getRequiredComponentType ( ) : org.springframework.data.repository.util.TypeInformation<> ; }  <METHOD_END>
