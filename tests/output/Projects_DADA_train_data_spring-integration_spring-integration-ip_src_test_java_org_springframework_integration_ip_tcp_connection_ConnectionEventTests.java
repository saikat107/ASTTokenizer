<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.Socket java.net.Socket = mock ( java.net.Socket .class ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> < TcpConnectionEvent > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> < TcpConnectionEvent > ( ) ; TcpNetConnection org.springframework.integration.ip.tcp.connection.TcpNetConnection = new TcpNetConnection ( java.net.Socket , false , false , new ApplicationEventPublisher ( ) { @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . add ( ( TcpConnectionEvent ) org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; } @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} } , STRING ) ; @ java.lang.SuppressWarnings ( STRING ) Serializer < java.lang.Object > org.springframework.integration.ip.tcp.connection.Serializer<java.lang.Object> = mock ( Serializer .class ) ; java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( STRING ) ; doThrow ( java.lang.RuntimeException ) . when ( org.springframework.integration.ip.tcp.connection.Serializer<java.lang.Object> ) . serialize ( Mockito . any ( java.lang.Object .class ) , Mockito . any ( java.io.OutputStream .class ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetConnection . setMapper ( new TcpMessageMapper ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetConnection . setSerializer ( org.springframework.integration.ip.tcp.connection.Serializer<java.lang.Object> ) ; try { org.springframework.integration.ip.tcp.connection.TcpNetConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { } assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . size ( ) > NUMBER ) ; assertNotNull ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . get ( NUMBER ) ) ; assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . get ( NUMBER ) instanceof TcpConnectionExceptionEvent ) ; assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . get ( NUMBER ) . toString ( ) . endsWith ( STRING + org.springframework.integration.ip.tcp.connection.TcpNetConnection . getConnectionId ( ) + STRING ) ) ; assertThat ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . get ( NUMBER ) . toString ( ) , containsString ( STRING ) ) ; TcpConnectionExceptionEvent org.springframework.integration.ip.tcp.connection.TcpConnectionExceptionEvent = ( TcpConnectionExceptionEvent ) java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . get ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.TcpConnectionExceptionEvent . getCause ( ) ) ; assertSame ( java.lang.RuntimeException , org.springframework.integration.ip.tcp.connection.TcpConnectionExceptionEvent . getCause ( ) . getCause ( ) ) ; assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . size ( ) > NUMBER ) ; assertNotNull ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . get ( NUMBER ) ) ; assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . get ( NUMBER ) . toString ( ) . endsWith ( STRING + org.springframework.integration.ip.tcp.connection.TcpNetConnection . getConnectionId ( ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnectionEvent> . add ( ( TcpConnectionEvent ) org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = SocketUtils . findAvailableTcpPort ( ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( int ) ; void ( int , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = SocketUtils . findAvailableTcpPort ( ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( int ) ; void ( int , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TcpSendingMessageHandler org.springframework.integration.ip.tcp.connection.TcpSendingMessageHandler = new TcpSendingMessageHandler ( ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new AbstractServerConnectionFactory ( NUMBER ) { @ java.lang.Override public void void ( ) {			} } ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> < ApplicationEvent > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> < ApplicationEvent > ( ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setApplicationEventPublisher ( new ApplicationEventPublisher ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . set ( org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; } } ) ; org.springframework.integration.ip.tcp.connection.TcpSendingMessageHandler . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.connection.TcpSendingMessageHandler . start ( ) ; Message < java.lang.String > org.springframework.integration.ip.tcp.connection.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IpHeaders . CONNECTION_ID , STRING ) . build ( ) ; try { org.springframework.integration.ip.tcp.connection.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( MessageHandlingException org.springframework.integration.ip.tcp.connection.MessageHandlingException ) { assertThat ( org.springframework.integration.ip.tcp.connection.MessageHandlingException . getMessage ( ) , Matchers . containsString ( STRING ) ) ; } assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . get ( ) ) ; TcpConnectionFailedCorrelationEvent org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent = ( TcpConnectionFailedCorrelationEvent ) java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . get ( ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent . getConnectionId ( ) ) ; assertSame ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> , ( ( MessagingException ) org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent . getCause ( ) ) . getFailedMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . set ( org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TcpInboundGateway org.springframework.integration.ip.tcp.connection.TcpInboundGateway = new TcpInboundGateway ( ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new AbstractServerConnectionFactory ( NUMBER ) { @ java.lang.Override public void void ( ) {			} } ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> < ApplicationEvent > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> < ApplicationEvent > ( ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setApplicationEventPublisher ( new ApplicationEventPublisher ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . set ( org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; } } ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; DirectChannel org.springframework.integration.ip.tcp.connection.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.ip.tcp.connection.DirectChannel . subscribe ( new MessageHandler ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) throws org.springframework.integration.ip.tcp.connection.MessagingException { ( ( MessageChannel ) org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . getReplyChannel ( ) ) . send ( org.springframework.integration.ip.tcp.connection.Message<> ) ; } } ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.connection.DirectChannel ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . start ( ) ; Message < java.lang.String > org.springframework.integration.ip.tcp.connection.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IpHeaders . CONNECTION_ID , STRING ) . build ( ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . onMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . get ( ) ) ; TcpConnectionFailedCorrelationEvent org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent = ( TcpConnectionFailedCorrelationEvent ) java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . get ( ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent . getConnectionId ( ) ) ; assertSame ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> , ( ( MessagingException ) org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent . getCause ( ) ) . getFailedMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . set ( org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) throws org.springframework.integration.ip.tcp.connection.MessagingException { ( ( MessageChannel ) org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . getReplyChannel ( ) ) . send ( org.springframework.integration.ip.tcp.connection.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TcpOutboundGateway org.springframework.integration.ip.tcp.connection.TcpOutboundGateway = new TcpOutboundGateway ( ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new AbstractClientConnectionFactory ( STRING , NUMBER ) {		} ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> < ApplicationEvent > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> < ApplicationEvent > ( ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setApplicationEventPublisher ( new ApplicationEventPublisher ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . set ( org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; } } ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; DirectChannel org.springframework.integration.ip.tcp.connection.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.ip.tcp.connection.DirectChannel . subscribe ( message -> ( ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ) . send ( message ) ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . start ( ) ; Message < java.lang.String > org.springframework.integration.ip.tcp.connection.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IpHeaders . CONNECTION_ID , STRING ) . build ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . onMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . get ( ) ) ; TcpConnectionFailedCorrelationEvent org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent = ( TcpConnectionFailedCorrelationEvent ) java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . get ( ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent . getConnectionId ( ) ) ; MessagingException org.springframework.integration.ip.tcp.connection.MessagingException = ( MessagingException ) org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent . getCause ( ) ; assertSame ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> , org.springframework.integration.ip.tcp.connection.MessagingException . getFailedMessage ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.MessagingException . getMessage ( ) ) ; org.springframework.integration.ip.tcp.connection.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . onMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . get ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent = ( TcpConnectionFailedCorrelationEvent ) java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . get ( ) ; assertNull ( org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent . getConnectionId ( ) ) ; org.springframework.integration.ip.tcp.connection.MessagingException = ( MessagingException ) org.springframework.integration.ip.tcp.connection.TcpConnectionFailedCorrelationEvent . getCause ( ) ; assertSame ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> , org.springframework.integration.ip.tcp.connection.MessagingException . getFailedMessage ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.MessagingException . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . set ( org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) throws java.lang.Exception { java.net.ServerSocket java.net.ServerSocket = null ; try { java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( int ) ; } catch ( java.lang.Exception java.lang.Exception ) { return; } final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnectionServerExceptionEvent> < TcpConnectionServerExceptionEvent > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnectionServerExceptionEvent> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnectionServerExceptionEvent> < TcpConnectionServerExceptionEvent > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setApplicationEventPublisher ( new ApplicationEventPublisher ( ) { @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnectionServerExceptionEvent> . set ( ( TcpConnectionServerExceptionEvent ) org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; java.util.concurrent.CountDownLatch . void ( ) ; } @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} } ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . registerListener ( message -> false ) ; Log org.springframework.integration.ip.tcp.connection.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , STRING , Log .class ) ) ; doAnswer ( new DoesNothing ( ) ) . when ( org.springframework.integration.ip.tcp.connection.Log ) . error ( anyString ( ) , any ( java.lang.Throwable .class ) ) ; new DirectFieldAccessor ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) . setPropertyValue ( STRING , org.springframework.integration.ip.tcp.connection.Log ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.lang.String java.lang.String = java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnectionServerExceptionEvent> . toString ( ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING + STRING + int ) ) ; ArgumentCaptor < java.lang.String > org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.String> = ArgumentCaptor . forClass ( java.lang.String .class ) ; ArgumentCaptor < java.lang.Throwable > org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.Throwable> = ArgumentCaptor . forClass ( java.lang.Throwable .class ) ; verify ( org.springframework.integration.ip.tcp.connection.Log ) . error ( org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.String> . capture ( ) , org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.Throwable> . capture ( ) ) ; assertThat ( org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.String> . getValue ( ) , startsWith ( STRING ) ) ; assertThat ( org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.String> . getValue ( ) , endsWith ( STRING + int ) ) ; assertThat ( org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.Throwable> . getValue ( ) , instanceOf ( java.net.BindException .class ) ) ; java.net.ServerSocket . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.TcpConnectionServerExceptionEvent> . set ( ( TcpConnectionServerExceptionEvent ) org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> < ApplicationEvent > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> < ApplicationEvent > ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . setApplicationEventPublisher ( new ApplicationEventPublisher ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . set ( org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; } } ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . start ( ) ; try { org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getConnection ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( java.net.UnknownHostException .class ) ) ; TcpConnectionFailedEvent org.springframework.integration.ip.tcp.connection.TcpConnectionFailedEvent = ( TcpConnectionFailedEvent ) java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . get ( ) ; assertSame ( java.lang.Exception , org.springframework.integration.ip.tcp.connection.TcpConnectionFailedEvent . getCause ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.ApplicationEvent> . set ( org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; }  <METHOD_END>
