<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( NUMBER ) ; ListenableFuture < java.lang.String > org.springframework.scheduling.annotation.ListenableFuture<java.lang.String> = AsyncResult . forValue ( java.lang.String ) ; org.springframework.scheduling.annotation.ListenableFuture<java.lang.String> . addCallback ( new ListenableFutureCallback < java.lang.String > ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( STRING + java.lang.Throwable ) ; } } ) ; assertSame ( java.lang.String , java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( STRING + java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.io.IOException java.io.IOException = new java.io.IOException ( ) ; final java.util.Set<java.lang.Throwable> < java.lang.Throwable > java.util.Set<java.lang.Throwable> = new java.util.HashSet<java.lang.Throwable> <> ( NUMBER ) ; ListenableFuture < java.lang.String > org.springframework.scheduling.annotation.ListenableFuture<java.lang.String> = AsyncResult . forExecutionException ( java.io.IOException ) ; org.springframework.scheduling.annotation.ListenableFuture<java.lang.String> . addCallback ( new ListenableFutureCallback < java.lang.String > ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) { fail ( STRING + java.lang.String ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { java.util.Set<java.lang.Throwable> . boolean ( java.lang.Throwable ) ; } } ) ; assertSame ( java.io.IOException , java.util.Set<java.lang.Throwable> . java.util.Iterator<java.lang.Throwable> ( ) . java.lang.Throwable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { fail ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { java.util.Set<java.lang.Throwable> . boolean ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( NUMBER ) ; ListenableFuture < java.lang.String > org.springframework.scheduling.annotation.ListenableFuture<java.lang.String> = AsyncResult . forValue ( java.lang.String ) ; org.springframework.scheduling.annotation.ListenableFuture<java.lang.String> . addCallback ( java.util.Set<java.lang.String> :: boolean , ( ex ) -> fail ( STRING + ex ) ) ; assertSame ( java.lang.String , java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.io.IOException java.io.IOException = new java.io.IOException ( ) ; final java.util.Set<java.lang.Throwable> < java.lang.Throwable > java.util.Set<java.lang.Throwable> = new java.util.HashSet<java.lang.Throwable> <> ( NUMBER ) ; ListenableFuture < java.lang.String > org.springframework.scheduling.annotation.ListenableFuture<java.lang.String> = AsyncResult . forExecutionException ( java.io.IOException ) ; org.springframework.scheduling.annotation.ListenableFuture<java.lang.String> . addCallback ( ( result ) -> fail ( STRING + result ) , java.util.Set<java.lang.Throwable> :: boolean ) ; assertSame ( java.io.IOException , java.util.Set<java.lang.Throwable> . java.util.Iterator<java.lang.Throwable> ( ) . java.lang.Throwable ( ) ) ; }  <METHOD_END>
