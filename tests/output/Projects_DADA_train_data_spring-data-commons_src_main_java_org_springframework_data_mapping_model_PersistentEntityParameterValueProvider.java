<METHOD_START> public void ( PersistentEntity < ? , P > org.springframework.data.mapping.model.PersistentEntity<?,P> , PropertyValueProvider < P > org.springframework.data.mapping.model.PropertyValueProvider<P> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { Assert . notNull ( org.springframework.data.mapping.model.PersistentEntity<,P> , STRING ) ; Assert . notNull ( org.springframework.data.mapping.model.PropertyValueProvider<P> , STRING ) ; Assert . notNull ( java.util.Optional<java.lang.Object> , STRING ) ; this . org.springframework.data.mapping.model.PersistentEntity<?,P> = org.springframework.data.mapping.model.PersistentEntity<,P> ; this . org.springframework.data.mapping.model.PropertyValueProvider<P> = org.springframework.data.mapping.model.PropertyValueProvider<P> ; this . java.util.Optional<java.lang.Object> = java.util.Optional<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > java.util.Optional<T> < T > java.util.Optional<T> ( Parameter < T , P > org.springframework.data.mapping.model.Parameter<T,P> ) { PreferredConstructor < ? , P > org.springframework.data.mapping.model.PreferredConstructor<?,P> = org.springframework.data.mapping.model.PersistentEntity<,P> . getPersistenceConstructor ( ) . get ( ) ; if ( org.springframework.data.mapping.model.PreferredConstructor<,P> . isEnclosingClassParameter ( org.springframework.data.mapping.model.Parameter<T,P> ) ) { return ( java.util.Optional<T> < T > ) java.util.Optional<java.lang.Object> ; } return org.springframework.data.mapping.model.PropertyValueProvider<P> . getPropertyValue ( org.springframework.data.mapping.model.Parameter<T,P> . getName ( ) . flatMap ( org.springframework.data.mapping.model.PersistentEntity<,P> :: getPersistentProperty ) . orElseThrow ( ( ) new MappingException ( String . format ( STRING , parameter . getName ( ) , entity . getType ( ) ) ) ) ) ; }  <METHOD_END>
