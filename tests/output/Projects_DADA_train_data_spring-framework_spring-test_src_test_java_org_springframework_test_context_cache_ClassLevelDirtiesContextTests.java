<METHOD_START> @ BeforeClass public static void void ( ) { resetContextCache ( ) ; java.util.concurrent.atomic.AtomicInteger . void ( NUMBER ) ; java.util.concurrent.atomic.AtomicInteger . void ( NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.ClassLevelDirtiesContextWithCleanMethodsAndDefaultModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.InheritedClassLevelDirtiesContextWithCleanMethodsAndDefaultModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.ClassLevelDirtiesContextWithCleanMethodsAndAfterClassModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.InheritedClassLevelDirtiesContextWithCleanMethodsAndAfterClassModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.ClassLevelDirtiesContextWithAfterEachTestMethodModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( NUMBER ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.InheritedClassLevelDirtiesContextWithAfterEachTestMethodModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( NUMBER ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.ClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.ClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.ClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.InheritedClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.InheritedClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.InheritedClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.ClassLevelDirtiesContextWithCleanMethodsAndAfterClassModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , int int ) throws java.lang.Exception { runTestsAndAssertCounters ( java.lang.Class<> , int , NUMBER , int , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTests.CleanTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { assertNotNull ( STRING , this . org.springframework.test.context.cache.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) { void ( ) ; }  <METHOD_END>
