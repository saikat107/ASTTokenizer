<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.amqp.outbound.BrokerRunning . removeTestQueues ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CachingConnectionFactory org.springframework.integration.amqp.outbound.CachingConnectionFactory = new CachingConnectionFactory ( STRING ) ; org.springframework.integration.amqp.outbound.CachingConnectionFactory . setPublisherConfirms ( true ) ; org.springframework.integration.amqp.outbound.CachingConnectionFactory . setPublisherReturns ( true ) ; RabbitTemplate org.springframework.integration.amqp.outbound.RabbitTemplate = new RabbitTemplate ( org.springframework.integration.amqp.outbound.CachingConnectionFactory ) ; SimpleMessageListenerContainer org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( org.springframework.integration.amqp.outbound.CachingConnectionFactory ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . setBeanName ( STRING ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . setQueueNames ( STRING ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . start ( ) ; AsyncRabbitTemplate org.springframework.integration.amqp.outbound.AsyncRabbitTemplate = new AsyncRabbitTemplate ( org.springframework.integration.amqp.outbound.RabbitTemplate , org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer ) ; org.springframework.integration.amqp.outbound.AsyncRabbitTemplate . setEnableConfirms ( true ) ; org.springframework.integration.amqp.outbound.AsyncRabbitTemplate . setMandatory ( true ) ; SimpleMessageListenerContainer org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( org.springframework.integration.amqp.outbound.CachingConnectionFactory ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . setBeanName ( STRING ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . setQueueNames ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; MessageListenerAdapter org.springframework.integration.amqp.outbound.MessageListenerAdapter = new MessageListenerAdapter ( ( ReplyingMessageListener < java.lang.String , java.lang.String > ) foo -> { try { waitForAckBeforeReplying . await ( NUMBER , TimeUnit . SECONDS ) ; } catch ( InterruptedException e ) { Thread . currentThread ( ) . interrupt ( ) ; } return foo . toUpperCase ( ) ; } ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . setMessageListener ( org.springframework.integration.amqp.outbound.MessageListenerAdapter ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . afterPropertiesSet ( ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . start ( ) ; AsyncAmqpOutboundGateway org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway = new AsyncAmqpOutboundGateway ( org.springframework.integration.amqp.outbound.AsyncRabbitTemplate ) ; Log org.springframework.integration.amqp.outbound.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway , STRING , Log .class ) ) ; given ( org.springframework.integration.amqp.outbound.Log . isDebugEnabled ( ) ) . willReturn ( true ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; willAnswer ( invocation -> { invocation . callRealMethod ( ) ; replyTimeoutLatch . countDown ( ) ; return null ; } ) . given ( org.springframework.integration.amqp.outbound.Log ) . debug ( startsWith ( STRING ) ) ; new DirectFieldAccessor ( org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway ) . setPropertyValue ( STRING , org.springframework.integration.amqp.outbound.Log ) ; QueueChannel org.springframework.integration.amqp.outbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.amqp.outbound.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.amqp.outbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.amqp.outbound.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.amqp.outbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.amqp.outbound.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.amqp.outbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.amqp.outbound.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setOutputChannel ( org.springframework.integration.amqp.outbound.QueueChannel ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setReturnChannel ( org.springframework.integration.amqp.outbound.QueueChannel ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setConfirmAckChannel ( org.springframework.integration.amqp.outbound.QueueChannel ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setConfirmNackChannel ( org.springframework.integration.amqp.outbound.QueueChannel ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setConfirmCorrelationExpressionString ( STRING ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setExchangeName ( STRING ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setRoutingKey ( STRING ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . start ( ) ; Message < ? > org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setErrorChannel ( org.springframework.integration.amqp.outbound.QueueChannel ) . build ( ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . handleMessage ( org.springframework.integration.amqp.outbound.Message<> ) ; Message < ? > org.springframework.integration.amqp.outbound.Message<?> = org.springframework.integration.amqp.outbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) ) ; assertEquals ( true , org.springframework.integration.amqp.outbound.Message<> . getHeaders ( ) . get ( AmqpHeaders . PUBLISH_CONFIRM ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; Message < ? > org.springframework.integration.amqp.outbound.Message<?> = org.springframework.integration.amqp.outbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) ) ; org.springframework.integration.amqp.outbound.AsyncRabbitTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . setMessageListener ( message1 -> { } ) ; org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setErrorChannel ( org.springframework.integration.amqp.outbound.QueueChannel ) . build ( ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . handleMessage ( org.springframework.integration.amqp.outbound.Message<> ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setRequiresReply ( true ) ; org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setErrorChannel ( org.springframework.integration.amqp.outbound.QueueChannel ) . build ( ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . handleMessage ( org.springframework.integration.amqp.outbound.Message<> ) ; org.springframework.integration.amqp.outbound.Message<?> = org.springframework.integration.amqp.outbound.QueueChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.amqp.outbound.Message<> , instanceOf ( ErrorMessage .class ) ) ; ErrorMessage org.springframework.integration.amqp.outbound.ErrorMessage = ( ErrorMessage ) org.springframework.integration.amqp.outbound.Message<> ; assertThat ( org.springframework.integration.amqp.outbound.ErrorMessage . getPayload ( ) , instanceOf ( MessagingException .class ) ) ; assertThat ( org.springframework.integration.amqp.outbound.ErrorMessage . getPayload ( ) . getCause ( ) , instanceOf ( AmqpReplyTimeoutException .class ) ) ; org.springframework.integration.amqp.outbound.AsyncRabbitTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . setMessageListener ( org.springframework.integration.amqp.outbound.MessageListenerAdapter ) ; DirectChannel org.springframework.integration.amqp.outbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.amqp.outbound.DirectChannel . setBeanName ( STRING ) ; org.springframework.integration.amqp.outbound.DirectChannel . subscribe ( message1 -> { throw new RuntimeException ( STRING ) ; } ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setOutputChannel ( org.springframework.integration.amqp.outbound.DirectChannel ) ; org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setErrorChannel ( org.springframework.integration.amqp.outbound.QueueChannel ) . build ( ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . handleMessage ( org.springframework.integration.amqp.outbound.Message<> ) ; org.springframework.integration.amqp.outbound.Message<?> = org.springframework.integration.amqp.outbound.QueueChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.amqp.outbound.Message<> , instanceOf ( ErrorMessage .class ) ) ; org.springframework.integration.amqp.outbound.ErrorMessage = ( ErrorMessage ) org.springframework.integration.amqp.outbound.Message<> ; assertThat ( org.springframework.integration.amqp.outbound.ErrorMessage . getPayload ( ) , instanceOf ( MessagingException .class ) ) ; assertEquals ( STRING , ( ( MessagingException ) org.springframework.integration.amqp.outbound.ErrorMessage . getPayload ( ) ) . getFailedMessage ( ) . getPayload ( ) ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . setRoutingKey ( java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ) ; org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setErrorChannel ( org.springframework.integration.amqp.outbound.QueueChannel ) . build ( ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . handleMessage ( org.springframework.integration.amqp.outbound.Message<> ) ; Message < ? > org.springframework.integration.amqp.outbound.Message<?> = org.springframework.integration.amqp.outbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) ) ; org.springframework.integration.amqp.outbound.QueueChannel . receive ( NUMBER ) ; org.springframework.integration.amqp.outbound.QueueChannel . purge ( null ) ; org.springframework.integration.amqp.outbound.AsyncRabbitTemplate = mock ( AsyncRabbitTemplate .class ) ; RabbitMessageFuture org.springframework.integration.amqp.outbound.RabbitMessageFuture = org.springframework.integration.amqp.outbound.AsyncRabbitTemplate .new RabbitMessageFuture ( null , null ) ; willReturn ( org.springframework.integration.amqp.outbound.RabbitMessageFuture ) . given ( org.springframework.integration.amqp.outbound.AsyncRabbitTemplate ) . sendAndReceive ( anyString ( ) , anyString ( ) , any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) ) ; DirectFieldAccessor org.springframework.integration.amqp.outbound.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.amqp.outbound.RabbitMessageFuture ) ; org.springframework.integration.amqp.outbound.DirectFieldAccessor . setPropertyValue ( STRING , STRING ) ; SettableListenableFuture < java.lang.Boolean > org.springframework.integration.amqp.outbound.SettableListenableFuture<java.lang.Boolean> = new SettableListenableFuture < java.lang.Boolean > ( ) ; org.springframework.integration.amqp.outbound.SettableListenableFuture<java.lang.Boolean> . set ( false ) ; org.springframework.integration.amqp.outbound.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.amqp.outbound.SettableListenableFuture<java.lang.Boolean> ) ; new DirectFieldAccessor ( org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway ) . setPropertyValue ( STRING , org.springframework.integration.amqp.outbound.AsyncRabbitTemplate ) ; org.springframework.integration.amqp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setErrorChannel ( org.springframework.integration.amqp.outbound.QueueChannel ) . build ( ) ; org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway . handleMessage ( org.springframework.integration.amqp.outbound.Message<> ) ; org.springframework.integration.amqp.outbound.Message<?> = org.springframework.integration.amqp.outbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.amqp.outbound.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.outbound.Message<> . getHeaders ( ) . get ( AmqpHeaders . PUBLISH_CONFIRM_NACK_CAUSE ) ) ; assertEquals ( false , org.springframework.integration.amqp.outbound.Message<> . getHeaders ( ) . get ( AmqpHeaders . PUBLISH_CONFIRM ) ) ; org.springframework.integration.amqp.outbound.AsyncRabbitTemplate . stop ( ) ; org.springframework.integration.amqp.outbound.SimpleMessageListenerContainer . stop ( ) ; org.springframework.integration.amqp.outbound.CachingConnectionFactory . destroy ( ) ; }  <METHOD_END>
