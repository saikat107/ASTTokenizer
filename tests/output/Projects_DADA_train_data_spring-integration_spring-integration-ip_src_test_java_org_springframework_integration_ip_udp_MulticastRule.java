<METHOD_START> public void ( ) { this( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , this . java.lang.String ) ; try { this . java.lang.String = java.lang.String ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } if ( this . java.lang.String != null ) { java.lang.System . java.lang.String ( STRING , this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) java.lang.Exception { java.lang.String java.lang.String = SocketTestUtils . chooseANic ( true ) ; if ( java.lang.String == null ) { this . boolean = true ; return null ; } try { java.net.MulticastSocket java.net.MulticastSocket = new java.net.MulticastSocket ( ) ; java.net.MulticastSocket . void ( java.net.InetAddress . java.net.InetAddress ( this . java.lang.String ) ) ; java.net.MulticastSocket . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . boolean = true ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.udp.Statement org.springframework.integration.ip.udp.Statement ( Statement org.springframework.integration.ip.udp.Statement , Description org.springframework.integration.ip.udp.Description ) { if ( this . boolean ) { LogFactory . getLog ( this . java.lang.Class<? extends org.springframework.integration.ip.udp.MulticastRule> ( ) ) . info ( STRING ) ; return new Statement ( ) { @ java.lang.Override public void void ( ) java.lang.Throwable { Assume . assumeTrue ( false ) ; } } ; } else { return super. apply ( org.springframework.integration.ip.udp.Statement , org.springframework.integration.ip.udp.Description ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { Assume . assumeTrue ( false ) ; }  <METHOD_END>
