<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.data.rest.webmvc.convert.MediaType ) { if ( null == org.springframework.data.rest.webmvc.convert.MediaType ) { return false ; } return ResourceSupport .class . boolean ( java.lang.Class<> ) && org.springframework.data.rest.webmvc.convert.MediaType . getSubtype ( ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.data.rest.webmvc.convert.MediaType ) { return boolean ( java.lang.Class<> , org.springframework.data.rest.webmvc.convert.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.rest.webmvc.convert.MediaType> < MediaType > java.util.List<org.springframework.data.rest.webmvc.convert.MediaType> ( ) { return java.util.List<org.springframework.data.rest.webmvc.convert.MediaType> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.webmvc.convert.ResourceSupport org.springframework.data.rest.webmvc.convert.ResourceSupport ( java.lang.Class<? extends org.springframework.data.rest.webmvc.convert.ResourceSupport> < ? extends ResourceSupport > java.lang.Class<? extends org.springframework.data.rest.webmvc.convert.ResourceSupport> , HttpInputMessage org.springframework.data.rest.webmvc.convert.HttpInputMessage )			throws java.io.IOException , org.springframework.data.rest.webmvc.convert.HttpMessageNotReadableException { java.util.List<org.springframework.data.rest.webmvc.convert.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.convert.Link> = new java.util.ArrayList<org.springframework.data.rest.webmvc.convert.Link> < Link > ( ) ; java.util.Scanner java.util.Scanner = new java.util.Scanner ( org.springframework.data.rest.webmvc.convert.HttpInputMessage . getBody ( ) ) ; try { while ( java.util.Scanner . boolean ( ) ) { java.lang.String java.lang.String = java.util.Scanner . java.lang.String ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.List<org.springframework.data.rest.webmvc.convert.Link> . add ( new Link ( java.lang.String ) ) ; } } } finally { java.util.Scanner . void ( ) ; } return new Resources < java.lang.Object > ( java.util.Collections . java.util.List<java.lang.Object> ( ) , java.util.List<org.springframework.data.rest.webmvc.convert.Link> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceSupport org.springframework.data.rest.webmvc.convert.ResourceSupport , MediaType org.springframework.data.rest.webmvc.convert.MediaType , HttpOutputMessage org.springframework.data.rest.webmvc.convert.HttpOutputMessage )			throws java.io.IOException , org.springframework.data.rest.webmvc.convert.HttpMessageNotWritableException { java.io.BufferedWriter java.io.BufferedWriter = new java.io.BufferedWriter ( new java.io.OutputStreamWriter ( org.springframework.data.rest.webmvc.convert.HttpOutputMessage . getBody ( ) ) ) ; for ( Link org.springframework.data.rest.webmvc.convert.Link : org.springframework.data.rest.webmvc.convert.ResourceSupport . getLinks ( ) ) { java.io.BufferedWriter . void ( org.springframework.data.rest.webmvc.convert.Link . getHref ( ) ) ; java.io.BufferedWriter . void ( ) ; } java.io.BufferedWriter . void ( ) ; }  <METHOD_END>
