<METHOD_START> @ Before public void void ( ) { org.springframework.http.converter.BufferedImageHttpMessageConverter = new BufferedImageHttpMessageConverter ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.http.converter.BufferedImageHttpMessageConverter . canRead ( java.awt.image.BufferedImage .class , null ) ) ; assertTrue ( STRING , org.springframework.http.converter.BufferedImageHttpMessageConverter . canRead ( java.awt.image.BufferedImage .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.http.converter.BufferedImageHttpMessageConverter . canWrite ( java.awt.image.BufferedImage .class , null ) ) ; assertTrue ( STRING , org.springframework.http.converter.BufferedImageHttpMessageConverter . canWrite ( java.awt.image.BufferedImage .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( STRING , org.springframework.http.converter.BufferedImageHttpMessageConverter . canWrite ( java.awt.image.BufferedImage .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.http.converter.Resource = new ClassPathResource ( STRING , org.springframework.http.converter.BufferedImageHttpMessageConverterTests .class ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( org.springframework.http.converter.Resource . getInputStream ( ) ) ; MockHttpInputMessage org.springframework.http.converter.MockHttpInputMessage = new MockHttpInputMessage ( byte[] ) ; org.springframework.http.converter.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; java.awt.image.BufferedImage java.awt.image.BufferedImage = org.springframework.http.converter.BufferedImageHttpMessageConverter . read ( java.awt.image.BufferedImage .class , org.springframework.http.converter.MockHttpInputMessage ) ; assertEquals ( STRING , NUMBER , java.awt.image.BufferedImage . int ( ) ) ; assertEquals ( STRING , NUMBER , java.awt.image.BufferedImage . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.http.converter.Resource = new ClassPathResource ( STRING , org.springframework.http.converter.BufferedImageHttpMessageConverterTests .class ) ; java.awt.image.BufferedImage java.awt.image.BufferedImage = javax.imageio.ImageIO . java.awt.image.BufferedImage ( org.springframework.http.converter.Resource . getFile ( ) ) ; MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; MediaType org.springframework.http.converter.MediaType = new MediaType ( STRING , STRING ) ; org.springframework.http.converter.BufferedImageHttpMessageConverter . write ( java.awt.image.BufferedImage , org.springframework.http.converter.MediaType , org.springframework.http.converter.MockHttpOutputMessage ) ; assertEquals ( STRING , org.springframework.http.converter.MediaType , org.springframework.http.converter.MockHttpOutputMessage . getWrittenHeaders ( ) . getContentType ( ) ) ; assertTrue ( STRING , org.springframework.http.converter.MockHttpOutputMessage . getBodyAsBytes ( ) . length > NUMBER ) ; java.awt.image.BufferedImage java.awt.image.BufferedImage = javax.imageio.ImageIO . java.awt.image.BufferedImage ( new java.io.ByteArrayInputStream ( org.springframework.http.converter.MockHttpOutputMessage . getBodyAsBytes ( ) ) ) ; assertEquals ( STRING , NUMBER , java.awt.image.BufferedImage . int ( ) ) ; assertEquals ( STRING , NUMBER , java.awt.image.BufferedImage . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.http.converter.Resource = new ClassPathResource ( STRING , org.springframework.http.converter.BufferedImageHttpMessageConverterTests .class ) ; MediaType org.springframework.http.converter.MediaType = new MediaType ( STRING , STRING ) ; org.springframework.http.converter.BufferedImageHttpMessageConverter . setDefaultContentType ( org.springframework.http.converter.MediaType ) ; java.awt.image.BufferedImage java.awt.image.BufferedImage = javax.imageio.ImageIO . java.awt.image.BufferedImage ( org.springframework.http.converter.Resource . getFile ( ) ) ; MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.BufferedImageHttpMessageConverter . write ( java.awt.image.BufferedImage , new MediaType ( STRING , STRING ) , org.springframework.http.converter.MockHttpOutputMessage ) ; assertEquals ( STRING , org.springframework.http.converter.MediaType , org.springframework.http.converter.MockHttpOutputMessage . getWrittenHeaders ( ) . getContentType ( ) ) ; assertTrue ( STRING , org.springframework.http.converter.MockHttpOutputMessage . getBodyAsBytes ( ) . length > NUMBER ) ; java.awt.image.BufferedImage java.awt.image.BufferedImage = javax.imageio.ImageIO . java.awt.image.BufferedImage ( new java.io.ByteArrayInputStream ( org.springframework.http.converter.MockHttpOutputMessage . getBodyAsBytes ( ) ) ) ; assertEquals ( STRING , NUMBER , java.awt.image.BufferedImage . int ( ) ) ; assertEquals ( STRING , NUMBER , java.awt.image.BufferedImage . int ( ) ) ; }  <METHOD_END>
