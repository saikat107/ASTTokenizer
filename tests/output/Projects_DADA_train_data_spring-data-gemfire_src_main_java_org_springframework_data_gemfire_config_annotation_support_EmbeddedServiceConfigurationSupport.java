<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < T extends org.springframework.data.gemfire.config.annotation.support.AbstractCacheConfiguration > T T ( ) { Assert . state ( org.springframework.data.gemfire.config.annotation.support.AbstractCacheConfiguration != null , STRING ) ; return ( T ) this . org.springframework.data.gemfire.config.annotation.support.AbstractCacheConfiguration ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class java.lang.Class ( )  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.Class ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.Class ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.gemfire.config.annotation.support.BeanFactory ) throws org.springframework.data.gemfire.config.annotation.support.BeansException { this . org.springframework.data.gemfire.config.annotation.support.BeanFactory = org.springframework.data.gemfire.config.annotation.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.support.BeanFactory org.springframework.data.gemfire.config.annotation.support.BeanFactory ( ) { Assert . state ( this . org.springframework.data.gemfire.config.annotation.support.BeanFactory != null , STRING ) ; return this . org.springframework.data.gemfire.config.annotation.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.support.BeanDefinitionRegistry ) { if ( boolean ( org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata ) ; void ( org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata , java.util.Map<java.lang.String,java.lang.Object> , org.springframework.data.gemfire.config.annotation.support.BeanDefinitionRegistry ) ; void ( org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata , java.util.Map<java.lang.String,java.lang.Object> , org.springframework.data.gemfire.config.annotation.support.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.support.BeanDefinitionRegistry ) {	}  <METHOD_END>
<METHOD_START> protected void void ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.support.BeanDefinitionRegistry ) { java.util.Properties java.util.Properties = java.util.Properties ( java.util.Map<java.lang.String,java.lang.Object> ) ; if ( boolean ( java.util.Properties ) ) { try { org.springframework.data.gemfire.config.annotation.support.AbstractCacheConfiguration ( ) . add ( java.util.Properties ) ; } catch ( java.lang.Exception java.lang.Exception ) { void ( org.springframework.data.gemfire.config.annotation.support.BeanDefinitionRegistry , java.util.Properties ) ; } } }  <METHOD_END>
<METHOD_START> protected abstract java.util.Properties java.util.Properties ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
<METHOD_START> protected boolean boolean ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata ) { return org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata . hasAnnotation ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.util.Properties java.util.Properties ) { return ! CollectionUtils . isEmpty ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata ) { return org.springframework.data.gemfire.config.annotation.support.AnnotationMetadata . getAnnotationAttributes ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.support.BeanDefinitionRegistry , java.util.Properties java.util.Properties ) { BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.support.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.data.gemfire.config.annotation.support.EmbeddedServiceConfigurationSupport.GemFirePropertiesBeanPostProcessor .class ) ; org.springframework.data.gemfire.config.annotation.support.BeanDefinitionBuilder . addConstructorArgValue ( java.util.Properties ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.data.gemfire.config.annotation.support.BeanDefinitionHolder ( org.springframework.data.gemfire.config.annotation.support.BeanDefinitionBuilder ) , org.springframework.data.gemfire.config.annotation.support.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.support.BeanDefinitionHolder org.springframework.data.gemfire.config.annotation.support.BeanDefinitionHolder ( BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.support.BeanDefinitionBuilder ) { return new BeanDefinitionHolder ( org.springframework.data.gemfire.config.annotation.support.BeanDefinitionBuilder . getBeanDefinition ( ) , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String ( java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( STRING , java.lang.Class<? extends org.springframework.data.gemfire.config.annotation.support.EmbeddedServiceConfigurationSupport> ( ) . java.lang.String ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { BeanFactory org.springframework.data.gemfire.config.annotation.support.BeanFactory = org.springframework.data.gemfire.config.annotation.support.BeanFactory ( ) ; if ( org.springframework.data.gemfire.config.annotation.support.BeanFactory instanceof AutowireCapableBeanFactory ) { AutowireCapableBeanFactory org.springframework.data.gemfire.config.annotation.support.AutowireCapableBeanFactory = ( AutowireCapableBeanFactory ) org.springframework.data.gemfire.config.annotation.support.BeanFactory ; NamedBeanHolder < T > org.springframework.data.gemfire.config.annotation.support.NamedBeanHolder<T> = org.springframework.data.gemfire.config.annotation.support.AutowireCapableBeanFactory . resolveNamedBean ( java.lang.Class<T> ) ; return ( T ) org.springframework.data.gemfire.config.annotation.support.AutowireCapableBeanFactory . configureBean ( org.springframework.data.gemfire.config.annotation.support.NamedBeanHolder<T> . getBeanInstance ( ) , org.springframework.data.gemfire.config.annotation.support.NamedBeanHolder<T> . getBeanName ( ) ) ; } else { return org.springframework.data.gemfire.config.annotation.support.BeanFactory . getBean ( java.lang.Class<T> ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer ( java.lang.Integer , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer ) { return ( java.lang.Integer != null ? java.lang.Integer : java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> protected void ( java.util.Properties java.util.Properties ) { Assert . notEmpty ( java.util.Properties , STRING ) ; this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.config.annotation.support.BeansException { if ( java.lang.Object instanceof java.util.Properties && java.lang.String . boolean ( java.lang.String ) ) { java.util.Properties java.util.Properties = ( java.util.Properties ) java.lang.Object ; java.util.Properties . void ( java.util.Properties ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.config.annotation.support.BeansException { return java.lang.Object ; }  <METHOD_END>
