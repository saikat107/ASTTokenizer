<METHOD_START> protected void ( SpelNode org.springframework.data.mongodb.core.spel.SpelNode , ExpressionState org.springframework.data.mongodb.core.spel.ExpressionState ) { Assert . notNull ( org.springframework.data.mongodb.core.spel.SpelNode , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.spel.ExpressionState , STRING ) ; this . org.springframework.data.mongodb.core.spel.SpelNode = org.springframework.data.mongodb.core.spel.SpelNode ; this . org.springframework.data.mongodb.core.spel.ExpressionState = org.springframework.data.mongodb.core.spel.ExpressionState ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.spel.ExpressionNode org.springframework.data.mongodb.core.spel.ExpressionNode ( SpelNode org.springframework.data.mongodb.core.spel.SpelNode , ExpressionState org.springframework.data.mongodb.core.spel.ExpressionState ) { if ( org.springframework.data.mongodb.core.spel.SpelNode == null ) { return null ; } if ( org.springframework.data.mongodb.core.spel.SpelNode instanceof Operator ) { return new OperatorNode ( ( Operator ) org.springframework.data.mongodb.core.spel.SpelNode , org.springframework.data.mongodb.core.spel.ExpressionState ) ; } if ( org.springframework.data.mongodb.core.spel.SpelNode instanceof MethodReference ) { return new MethodReferenceNode ( ( MethodReference ) org.springframework.data.mongodb.core.spel.SpelNode , org.springframework.data.mongodb.core.spel.ExpressionState ) ; } if ( org.springframework.data.mongodb.core.spel.SpelNode instanceof Literal ) { return new LiteralNode ( ( Literal ) org.springframework.data.mongodb.core.spel.SpelNode , org.springframework.data.mongodb.core.spel.ExpressionState ) ; } if ( org.springframework.data.mongodb.core.spel.SpelNode instanceof OperatorNot ) { return new NotOperatorNode ( ( OperatorNot ) org.springframework.data.mongodb.core.spel.SpelNode , org.springframework.data.mongodb.core.spel.ExpressionState ) ; } return new org.springframework.data.mongodb.core.spel.ExpressionNode ( org.springframework.data.mongodb.core.spel.SpelNode , org.springframework.data.mongodb.core.spel.ExpressionState ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return org.springframework.data.mongodb.core.spel.SpelNode . toStringAST ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.lang.Class<> . boolean ( org.springframework.data.mongodb.core.spel.SpelNode . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( org.springframework.data.mongodb.core.spel.ExpressionNode org.springframework.data.mongodb.core.spel.ExpressionNode ) { return org.springframework.data.mongodb.core.spel.ExpressionNode == null ? false : this . org.springframework.data.mongodb.core.spel.SpelNode . getClass ( ) . equals ( org.springframework.data.mongodb.core.spel.ExpressionNode . org.springframework.data.mongodb.core.spel.SpelNode . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return org.springframework.data.mongodb.core.spel.SpelNode . getValue ( org.springframework.data.mongodb.core.spel.ExpressionState ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.mongodb.core.spel.SpelNode . getChildCount ( ) != NUMBER ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.spel.ExpressionNode org.springframework.data.mongodb.core.spel.ExpressionNode ( int int ) { Assert . isTrue ( int >= NUMBER , STRING ) ; return org.springframework.data.mongodb.core.spel.ExpressionNode ( org.springframework.data.mongodb.core.spel.SpelNode . getChild ( int ) , org.springframework.data.mongodb.core.spel.ExpressionState ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return boolean ( ) && ! org.springframework.data.mongodb.core.spel.SpelNode . getChild ( NUMBER ) . getClass ( ) . equals ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.spel.ExpressionNode org.springframework.data.mongodb.core.spel.ExpressionNode ( SpelNode org.springframework.data.mongodb.core.spel.SpelNode ) { return org.springframework.data.mongodb.core.spel.ExpressionNode ( org.springframework.data.mongodb.core.spel.SpelNode , org.springframework.data.mongodb.core.spel.ExpressionState ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.data.mongodb.core.spel.ExpressionNode> < org.springframework.data.mongodb.core.spel.ExpressionNode > java.util.Iterator<org.springframework.data.mongodb.core.spel.ExpressionNode> ( ) { if ( ! boolean ( ) ) { return java.util.Iterator<org.springframework.data.mongodb.core.spel.ExpressionNode> ; } return new java.util.Iterator<org.springframework.data.mongodb.core.spel.ExpressionNode> < org.springframework.data.mongodb.core.spel.ExpressionNode > ( ) { int int = NUMBER ; @ java.lang.Override public boolean boolean ( ) { return int < org.springframework.data.mongodb.core.spel.SpelNode . getChildCount ( ) ; } @ java.lang.Override public org.springframework.data.mongodb.core.spel.ExpressionNode org.springframework.data.mongodb.core.spel.ExpressionNode ( ) { return org.springframework.data.mongodb.core.spel.ExpressionNode ( org.springframework.data.mongodb.core.spel.SpelNode . getChild ( int ++ ) ) ; } @ java.lang.Override public void void ( ) { throw new java.lang.UnsupportedOperationException ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return int < org.springframework.data.mongodb.core.spel.SpelNode . getChildCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.spel.ExpressionNode org.springframework.data.mongodb.core.spel.ExpressionNode ( ) { return org.springframework.data.mongodb.core.spel.ExpressionNode ( org.springframework.data.mongodb.core.spel.SpelNode . getChild ( int ++ ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
