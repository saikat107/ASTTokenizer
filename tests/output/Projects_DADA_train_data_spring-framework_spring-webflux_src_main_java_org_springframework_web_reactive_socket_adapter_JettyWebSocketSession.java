<METHOD_START> public void ( Session org.springframework.web.reactive.socket.adapter.Session , HandshakeInfo org.springframework.web.reactive.socket.adapter.HandshakeInfo , DataBufferFactory org.springframework.web.reactive.socket.adapter.DataBufferFactory ) { this( org.springframework.web.reactive.socket.adapter.Session , org.springframework.web.reactive.socket.adapter.HandshakeInfo , org.springframework.web.reactive.socket.adapter.DataBufferFactory , null ); }  <METHOD_END>
<METHOD_START> public void ( Session org.springframework.web.reactive.socket.adapter.Session , HandshakeInfo org.springframework.web.reactive.socket.adapter.HandshakeInfo , DataBufferFactory org.springframework.web.reactive.socket.adapter.DataBufferFactory , MonoProcessor < java.lang.Void > org.springframework.web.reactive.socket.adapter.MonoProcessor<java.lang.Void> ) { super( org.springframework.web.reactive.socket.adapter.Session , ObjectUtils . getIdentityHexString ( org.springframework.web.reactive.socket.adapter.Session ) , org.springframework.web.reactive.socket.adapter.HandshakeInfo , org.springframework.web.reactive.socket.adapter.DataBufferFactory , org.springframework.web.reactive.socket.adapter.MonoProcessor<java.lang.Void> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . state ( this . org.springframework.web.reactive.socket.adapter.SuspendToken == null , STRING ) ; this . org.springframework.web.reactive.socket.adapter.SuspendToken = getDelegate ( ) . suspend ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { SuspendToken org.springframework.web.reactive.socket.adapter.SuspendToken = this . org.springframework.web.reactive.socket.adapter.SuspendToken ; Assert . state ( org.springframework.web.reactive.socket.adapter.SuspendToken != null , STRING ) ; org.springframework.web.reactive.socket.adapter.SuspendToken . resume ( ) ; this . org.springframework.web.reactive.socket.adapter.SuspendToken = null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ) throws java.io.IOException { java.nio.ByteBuffer java.nio.ByteBuffer = org.springframework.web.reactive.socket.adapter.WebSocketMessage . getPayload ( ) . asByteBuffer ( ) ; if ( WebSocketMessage . Type . TEXT . equals ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) ) ) { getSendProcessor ( ) . setReadyToSend ( false ) ; java.lang.String java.lang.String = new java.lang.String ( java.nio.ByteBuffer . byte[] ( ) , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; getDelegate ( ) . getRemote ( ) . sendString ( java.lang.String , new org.springframework.web.reactive.socket.adapter.JettyWebSocketSession.SendProcessorCallback ( ) ) ; } else if ( WebSocketMessage . Type . BINARY . equals ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) ) ) { getSendProcessor ( ) . setReadyToSend ( false ) ; getDelegate ( ) . getRemote ( ) . sendBytes ( java.nio.ByteBuffer , new org.springframework.web.reactive.socket.adapter.JettyWebSocketSession.SendProcessorCallback ( ) ) ; } else if ( WebSocketMessage . Type . PING . equals ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) ) ) { getDelegate ( ) . getRemote ( ) . sendPing ( java.nio.ByteBuffer ) ; } else if ( WebSocketMessage . Type . PONG . equals ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) ) ) { getDelegate ( ) . getRemote ( ) . sendPong ( java.nio.ByteBuffer ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) ) ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.adapter.Mono<java.lang.Void> ( CloseStatus org.springframework.web.reactive.socket.adapter.CloseStatus ) { getDelegate ( ) . close ( org.springframework.web.reactive.socket.adapter.CloseStatus . getCode ( ) , org.springframework.web.reactive.socket.adapter.CloseStatus . getReason ( ) ) ; return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { getSendProcessor ( ) . cancel ( ) ; getSendProcessor ( ) . onError ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { getSendProcessor ( ) . setReadyToSend ( true ) ; getSendProcessor ( ) . onWritePossible ( ) ; }  <METHOD_END>
