<METHOD_START> public static void void ( ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> < BeanFactoryPostProcessor > java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; if ( org.springframework.context.support.ConfigurableListableBeanFactory instanceof BeanDefinitionRegistry ) { BeanDefinitionRegistry org.springframework.context.support.BeanDefinitionRegistry = ( BeanDefinitionRegistry ) org.springframework.context.support.ConfigurableListableBeanFactory ; java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> < BeanFactoryPostProcessor > java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> = new java.util.LinkedList<org.springframework.context.support.BeanFactoryPostProcessor> <> ( ) ; java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> < BeanDefinitionRegistryPostProcessor > java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> = new java.util.LinkedList<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> <> ( ) ; for ( BeanFactoryPostProcessor org.springframework.context.support.BeanFactoryPostProcessor : java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> ) { if ( org.springframework.context.support.BeanFactoryPostProcessor instanceof BeanDefinitionRegistryPostProcessor ) { BeanDefinitionRegistryPostProcessor org.springframework.context.support.BeanDefinitionRegistryPostProcessor = ( BeanDefinitionRegistryPostProcessor ) org.springframework.context.support.BeanFactoryPostProcessor ; org.springframework.context.support.BeanDefinitionRegistryPostProcessor . postProcessBeanDefinitionRegistry ( org.springframework.context.support.BeanDefinitionRegistry ) ; java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> . add ( org.springframework.context.support.BeanDefinitionRegistryPostProcessor ) ; } else { java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> . add ( org.springframework.context.support.BeanFactoryPostProcessor ) ; } } java.lang.String [] java.lang.String[] = org.springframework.context.support.ConfigurableListableBeanFactory . getBeanNamesForType ( BeanDefinitionRegistryPostProcessor .class , true , false ) ; java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> < BeanDefinitionRegistryPostProcessor > java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> = new java.util.ArrayList<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( org.springframework.context.support.ConfigurableListableBeanFactory . isTypeMatch ( java.lang.String , PriorityOrdered .class ) ) { java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> . add ( org.springframework.context.support.ConfigurableListableBeanFactory . getBean ( java.lang.String , BeanDefinitionRegistryPostProcessor .class ) ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> ) ; java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> . addAll ( java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> ) ; void ( java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> , org.springframework.context.support.BeanDefinitionRegistry ) ; java.lang.String[] = org.springframework.context.support.ConfigurableListableBeanFactory . getBeanNamesForType ( BeanDefinitionRegistryPostProcessor .class , true , false ) ; java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> < BeanDefinitionRegistryPostProcessor > java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> = new java.util.ArrayList<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) && org.springframework.context.support.ConfigurableListableBeanFactory . isTypeMatch ( java.lang.String , Ordered .class ) ) { java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> . add ( org.springframework.context.support.ConfigurableListableBeanFactory . getBean ( java.lang.String , BeanDefinitionRegistryPostProcessor .class ) ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> ) ; java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> . addAll ( java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> ) ; void ( java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> , org.springframework.context.support.BeanDefinitionRegistry ) ; boolean boolean = true ; while ( boolean ) { boolean = false ; java.lang.String[] = org.springframework.context.support.ConfigurableListableBeanFactory . getBeanNamesForType ( BeanDefinitionRegistryPostProcessor .class , true , false ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { BeanDefinitionRegistryPostProcessor org.springframework.context.support.BeanDefinitionRegistryPostProcessor = org.springframework.context.support.ConfigurableListableBeanFactory . getBean ( java.lang.String , BeanDefinitionRegistryPostProcessor .class ) ; java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> . add ( org.springframework.context.support.BeanDefinitionRegistryPostProcessor ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; org.springframework.context.support.BeanDefinitionRegistryPostProcessor . postProcessBeanDefinitionRegistry ( org.springframework.context.support.BeanDefinitionRegistry ) ; boolean = true ; } } } void ( java.util.List<org.springframework.context.support.BeanDefinitionRegistryPostProcessor> , org.springframework.context.support.ConfigurableListableBeanFactory ) ; void ( java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> , org.springframework.context.support.ConfigurableListableBeanFactory ) ; } else { void ( java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> , org.springframework.context.support.ConfigurableListableBeanFactory ) ; } java.lang.String [] java.lang.String[] = org.springframework.context.support.ConfigurableListableBeanFactory . getBeanNamesForType ( BeanFactoryPostProcessor .class , true , false ) ; java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> < BeanFactoryPostProcessor > java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> = new java.util.ArrayList<org.springframework.context.support.BeanFactoryPostProcessor> <> ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { } else if ( org.springframework.context.support.ConfigurableListableBeanFactory . isTypeMatch ( java.lang.String , PriorityOrdered .class ) ) { java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> . add ( org.springframework.context.support.ConfigurableListableBeanFactory . getBean ( java.lang.String , BeanFactoryPostProcessor .class ) ) ; } else if ( org.springframework.context.support.ConfigurableListableBeanFactory . isTypeMatch ( java.lang.String , Ordered .class ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } else { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> ) ; void ( java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> , org.springframework.context.support.ConfigurableListableBeanFactory ) ; java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> < BeanFactoryPostProcessor > java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> = new java.util.ArrayList<org.springframework.context.support.BeanFactoryPostProcessor> <> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> . add ( org.springframework.context.support.ConfigurableListableBeanFactory . getBean ( java.lang.String , BeanFactoryPostProcessor .class ) ) ; } void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> ) ; void ( java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> , org.springframework.context.support.ConfigurableListableBeanFactory ) ; java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> < BeanFactoryPostProcessor > java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> = new java.util.ArrayList<org.springframework.context.support.BeanFactoryPostProcessor> <> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> . add ( org.springframework.context.support.ConfigurableListableBeanFactory . getBean ( java.lang.String , BeanFactoryPostProcessor .class ) ) ; } void ( java.util.List<org.springframework.context.support.BeanFactoryPostProcessor> , org.springframework.context.support.ConfigurableListableBeanFactory ) ; org.springframework.context.support.ConfigurableListableBeanFactory . clearMetadataCache ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory , AbstractApplicationContext org.springframework.context.support.AbstractApplicationContext ) { java.lang.String [] java.lang.String[] = org.springframework.context.support.ConfigurableListableBeanFactory . getBeanNamesForType ( BeanPostProcessor .class , true , false ) ; int int = org.springframework.context.support.ConfigurableListableBeanFactory . getBeanPostProcessorCount ( ) + NUMBER + java.lang.String[] . int ; org.springframework.context.support.ConfigurableListableBeanFactory . addBeanPostProcessor ( new org.springframework.context.support.PostProcessorRegistrationDelegate.BeanPostProcessorChecker ( org.springframework.context.support.ConfigurableListableBeanFactory , int ) ) ; java.util.List<org.springframework.context.support.BeanPostProcessor> < BeanPostProcessor > java.util.List<org.springframework.context.support.BeanPostProcessor> = new java.util.ArrayList<org.springframework.context.support.BeanPostProcessor> <> ( ) ; java.util.List<org.springframework.context.support.BeanPostProcessor> < BeanPostProcessor > java.util.List<org.springframework.context.support.BeanPostProcessor> = new java.util.ArrayList<org.springframework.context.support.BeanPostProcessor> <> ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( org.springframework.context.support.ConfigurableListableBeanFactory . isTypeMatch ( java.lang.String , PriorityOrdered .class ) ) { BeanPostProcessor org.springframework.context.support.BeanPostProcessor = org.springframework.context.support.ConfigurableListableBeanFactory . getBean ( java.lang.String , BeanPostProcessor .class ) ; java.util.List<org.springframework.context.support.BeanPostProcessor> . add ( org.springframework.context.support.BeanPostProcessor ) ; if ( org.springframework.context.support.BeanPostProcessor instanceof MergedBeanDefinitionPostProcessor ) { java.util.List<org.springframework.context.support.BeanPostProcessor> . add ( org.springframework.context.support.BeanPostProcessor ) ; } } else if ( org.springframework.context.support.ConfigurableListableBeanFactory . isTypeMatch ( java.lang.String , Ordered .class ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } else { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanPostProcessor> ) ; void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanPostProcessor> ) ; java.util.List<org.springframework.context.support.BeanPostProcessor> < BeanPostProcessor > java.util.List<org.springframework.context.support.BeanPostProcessor> = new java.util.ArrayList<org.springframework.context.support.BeanPostProcessor> <> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { BeanPostProcessor org.springframework.context.support.BeanPostProcessor = org.springframework.context.support.ConfigurableListableBeanFactory . getBean ( java.lang.String , BeanPostProcessor .class ) ; java.util.List<org.springframework.context.support.BeanPostProcessor> . add ( org.springframework.context.support.BeanPostProcessor ) ; if ( org.springframework.context.support.BeanPostProcessor instanceof MergedBeanDefinitionPostProcessor ) { java.util.List<org.springframework.context.support.BeanPostProcessor> . add ( org.springframework.context.support.BeanPostProcessor ) ; } } void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanPostProcessor> ) ; void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanPostProcessor> ) ; java.util.List<org.springframework.context.support.BeanPostProcessor> < BeanPostProcessor > java.util.List<org.springframework.context.support.BeanPostProcessor> = new java.util.ArrayList<org.springframework.context.support.BeanPostProcessor> <> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { BeanPostProcessor org.springframework.context.support.BeanPostProcessor = org.springframework.context.support.ConfigurableListableBeanFactory . getBean ( java.lang.String , BeanPostProcessor .class ) ; java.util.List<org.springframework.context.support.BeanPostProcessor> . add ( org.springframework.context.support.BeanPostProcessor ) ; if ( org.springframework.context.support.BeanPostProcessor instanceof MergedBeanDefinitionPostProcessor ) { java.util.List<org.springframework.context.support.BeanPostProcessor> . add ( org.springframework.context.support.BeanPostProcessor ) ; } } void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanPostProcessor> ) ; void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanPostProcessor> ) ; void ( org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanPostProcessor> ) ; org.springframework.context.support.ConfigurableListableBeanFactory . addBeanPostProcessor ( new ApplicationListenerDetector ( org.springframework.context.support.AbstractApplicationContext ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<?> < ? > java.util.List<?> ) { java.util.Comparator<java.lang.Object> < java.lang.Object > java.util.Comparator<java.lang.Object> = null ; if ( org.springframework.context.support.ConfigurableListableBeanFactory instanceof DefaultListableBeanFactory ) { java.util.Comparator<java.lang.Object> = ( ( DefaultListableBeanFactory ) org.springframework.context.support.ConfigurableListableBeanFactory ) . getDependencyComparator ( ) ; } if ( java.util.Comparator<java.lang.Object> == null ) { java.util.Comparator<java.lang.Object> = OrderComparator . INSTANCE ; } java.util.Collections . void ( java.util.List<> , java.util.Comparator<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.util.Collection<? extends org.springframework.context.support.BeanDefinitionRegistryPostProcessor> < ? extends BeanDefinitionRegistryPostProcessor > java.util.Collection<? extends org.springframework.context.support.BeanDefinitionRegistryPostProcessor> , BeanDefinitionRegistry org.springframework.context.support.BeanDefinitionRegistry ) { for ( BeanDefinitionRegistryPostProcessor org.springframework.context.support.BeanDefinitionRegistryPostProcessor : java.util.Collection<> ) { org.springframework.context.support.BeanDefinitionRegistryPostProcessor . postProcessBeanDefinitionRegistry ( org.springframework.context.support.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( java.util.Collection<? extends org.springframework.context.support.BeanFactoryPostProcessor> < ? extends BeanFactoryPostProcessor > java.util.Collection<? extends org.springframework.context.support.BeanFactoryPostProcessor> , ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory ) { for ( BeanFactoryPostProcessor org.springframework.context.support.BeanFactoryPostProcessor : java.util.Collection<> ) { org.springframework.context.support.BeanFactoryPostProcessor . postProcessBeanFactory ( org.springframework.context.support.ConfigurableListableBeanFactory ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory , java.util.List<org.springframework.context.support.BeanPostProcessor> < BeanPostProcessor > java.util.List<org.springframework.context.support.BeanPostProcessor> ) { for ( BeanPostProcessor org.springframework.context.support.BeanPostProcessor : java.util.List<org.springframework.context.support.BeanPostProcessor> ) { org.springframework.context.support.ConfigurableListableBeanFactory . addBeanPostProcessor ( org.springframework.context.support.BeanPostProcessor ) ; } }  <METHOD_END>
<METHOD_START> public void ( ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory , int int ) { this . org.springframework.context.support.ConfigurableListableBeanFactory = org.springframework.context.support.ConfigurableListableBeanFactory ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { if ( java.lang.Object != null && ! ( java.lang.Object instanceof BeanPostProcessor ) && ! boolean ( java.lang.String ) && this . org.springframework.context.support.ConfigurableListableBeanFactory . getBeanPostProcessorCount ( ) < this . int ) { if ( org.springframework.context.support.Log . isInfoEnabled ( ) ) { org.springframework.context.support.Log . info ( STRING + java.lang.String + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING + STRING ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { if ( java.lang.String != null && this . org.springframework.context.support.ConfigurableListableBeanFactory . containsBeanDefinition ( java.lang.String ) ) { BeanDefinition org.springframework.context.support.BeanDefinition = this . org.springframework.context.support.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; return ( org.springframework.context.support.BeanDefinition . getRole ( ) == RootBeanDefinition . ROLE_INFRASTRUCTURE ) ; } return false ; }  <METHOD_END>
