<METHOD_START> public void ( java.util.List<org.springframework.web.socket.sockjs.client.Transport> < Transport > java.util.List<org.springframework.web.socket.sockjs.client.Transport> ) { Assert . notEmpty ( java.util.List<org.springframework.web.socket.sockjs.client.Transport> , STRING ) ; this . java.util.List<org.springframework.web.socket.sockjs.client.Transport> = new java.util.ArrayList <> ( java.util.List<org.springframework.web.socket.sockjs.client.Transport> ) ; this . org.springframework.web.socket.sockjs.client.InfoReceiver = org.springframework.web.socket.sockjs.client.InfoReceiver ( java.util.List<org.springframework.web.socket.sockjs.client.Transport> ) ; if ( boolean ) { this . org.springframework.web.socket.sockjs.client.SockJsMessageCodec = new Jackson2SockJsMessageCodec ( ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.web.socket.sockjs.client.InfoReceiver org.springframework.web.socket.sockjs.client.InfoReceiver ( java.util.List<org.springframework.web.socket.sockjs.client.Transport> < Transport > java.util.List<org.springframework.web.socket.sockjs.client.Transport> ) { for ( Transport org.springframework.web.socket.sockjs.client.Transport : java.util.List<org.springframework.web.socket.sockjs.client.Transport> ) { if ( org.springframework.web.socket.sockjs.client.Transport instanceof InfoReceiver ) { return ( ( InfoReceiver ) org.springframework.web.socket.sockjs.client.Transport ) ; } } return new RestTemplateXhrTransport ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( InfoReceiver org.springframework.web.socket.sockjs.client.InfoReceiver ) { Assert . notNull ( org.springframework.web.socket.sockjs.client.InfoReceiver , STRING ) ; this . org.springframework.web.socket.sockjs.client.InfoReceiver = org.springframework.web.socket.sockjs.client.InfoReceiver ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.client.InfoReceiver org.springframework.web.socket.sockjs.client.InfoReceiver ( ) { return this . org.springframework.web.socket.sockjs.client.InfoReceiver ; }  <METHOD_END>
<METHOD_START> public void void ( SockJsMessageCodec org.springframework.web.socket.sockjs.client.SockJsMessageCodec ) { Assert . notNull ( org.springframework.web.socket.sockjs.client.SockJsMessageCodec , STRING ) ; this . org.springframework.web.socket.sockjs.client.SockJsMessageCodec = org.springframework.web.socket.sockjs.client.SockJsMessageCodec ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.client.SockJsMessageCodec org.springframework.web.socket.sockjs.client.SockJsMessageCodec ( ) { return this . org.springframework.web.socket.sockjs.client.SockJsMessageCodec ; }  <METHOD_END>
<METHOD_START> public void void ( TaskScheduler org.springframework.web.socket.sockjs.client.TaskScheduler ) { this . org.springframework.web.socket.sockjs.client.TaskScheduler = org.springframework.web.socket.sockjs.client.TaskScheduler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! boolean ( ) ) { this . boolean = true ; for ( Transport org.springframework.web.socket.sockjs.client.Transport : this . java.util.List<org.springframework.web.socket.sockjs.client.Transport> ) { if ( org.springframework.web.socket.sockjs.client.Transport instanceof Lifecycle ) { if ( ! ( ( Lifecycle ) org.springframework.web.socket.sockjs.client.Transport ) . isRunning ( ) ) { ( ( Lifecycle ) org.springframework.web.socket.sockjs.client.Transport ) . start ( ) ; } } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( boolean ( ) ) { this . boolean = false ; for ( Transport org.springframework.web.socket.sockjs.client.Transport : this . java.util.List<org.springframework.web.socket.sockjs.client.Transport> ) { if ( org.springframework.web.socket.sockjs.client.Transport instanceof Lifecycle ) { if ( ( ( Lifecycle ) org.springframework.web.socket.sockjs.client.Transport ) . isRunning ( ) ) { ( ( Lifecycle ) org.springframework.web.socket.sockjs.client.Transport ) . stop ( ) ; } } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.client.ListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> < WebSocketSession > org.springframework.web.socket.sockjs.client.ListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ( WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { Assert . notNull ( java.lang.String , STRING ) ; java.net.URI java.net.URI = UriComponentsBuilder . fromUriString ( java.lang.String ) . buildAndExpand ( java.lang.Object[] ) . encode ( ) . toUri ( ) ; return org.springframework.web.socket.sockjs.client.ListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ( org.springframework.web.socket.sockjs.client.WebSocketHandler , null , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.web.socket.sockjs.client.ListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> < WebSocketSession > org.springframework.web.socket.sockjs.client.ListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ( WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler , WebSocketHttpHeaders org.springframework.web.socket.sockjs.client.WebSocketHttpHeaders , java.net.URI java.net.URI ) { Assert . notNull ( org.springframework.web.socket.sockjs.client.WebSocketHandler , STRING ) ; Assert . notNull ( java.net.URI , STRING ) ; java.lang.String java.lang.String = java.net.URI . java.lang.String ( ) ; if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> = new SettableListenableFuture <> ( ) ; try { SockJsUrlInfo org.springframework.web.socket.sockjs.client.SockJsUrlInfo = new SockJsUrlInfo ( java.net.URI ) ; org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo = org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo ( org.springframework.web.socket.sockjs.client.SockJsUrlInfo , org.springframework.web.socket.sockjs.client.HttpHeaders ( org.springframework.web.socket.sockjs.client.WebSocketHttpHeaders ) ) ; org.springframework.web.socket.sockjs.client.DefaultTransportRequest ( org.springframework.web.socket.sockjs.client.SockJsUrlInfo , org.springframework.web.socket.sockjs.client.WebSocketHttpHeaders , org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo ) . connect ( org.springframework.web.socket.sockjs.client.WebSocketHandler , org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.sockjs.client.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING + java.net.URI , java.lang.Throwable ) ; } org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> . setException ( java.lang.Throwable ) ; } return org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.sockjs.client.HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ( HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ) { if ( java.lang.String[] ( ) == null ) { return org.springframework.web.socket.sockjs.client.HttpHeaders ; } else { HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = new HttpHeaders ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ( ) ) { if ( org.springframework.web.socket.sockjs.client.HttpHeaders . containsKey ( java.lang.String ) ) { org.springframework.web.socket.sockjs.client.HttpHeaders . put ( java.lang.String , org.springframework.web.socket.sockjs.client.HttpHeaders . get ( java.lang.String ) ) ; } } return org.springframework.web.socket.sockjs.client.HttpHeaders ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo ( SockJsUrlInfo org.springframework.web.socket.sockjs.client.SockJsUrlInfo , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ) { java.net.URI java.net.URI = org.springframework.web.socket.sockjs.client.SockJsUrlInfo . getInfoUrl ( ) ; org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo = this . java.util.Map<java.net.URI,org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo> . org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo ( java.net.URI ) ; if ( org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo == null ) { long long = java.lang.System . long ( ) ; java.lang.String java.lang.String = this . org.springframework.web.socket.sockjs.client.InfoReceiver . executeInfoRequest ( java.net.URI , org.springframework.web.socket.sockjs.client.HttpHeaders ) ; long long = java.lang.System . long ( ) - long ; org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo = new org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo ( java.lang.String , long ) ; this . java.util.Map<java.net.URI,org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo> . org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo ( java.net.URI , org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo ) ; } return org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.sockjs.client.DefaultTransportRequest org.springframework.web.socket.sockjs.client.DefaultTransportRequest ( SockJsUrlInfo org.springframework.web.socket.sockjs.client.SockJsUrlInfo , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo ) { java.util.List<org.springframework.web.socket.sockjs.client.DefaultTransportRequest> < DefaultTransportRequest > java.util.List<org.springframework.web.socket.sockjs.client.DefaultTransportRequest> = new java.util.ArrayList <> ( this . java.util.List<org.springframework.web.socket.sockjs.client.Transport> . size ( ) ) ; for ( Transport org.springframework.web.socket.sockjs.client.Transport : this . java.util.List<org.springframework.web.socket.sockjs.client.Transport> ) { for ( TransportType org.springframework.web.socket.sockjs.client.TransportType : org.springframework.web.socket.sockjs.client.Transport . getTransportTypes ( ) ) { if ( org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo . boolean ( ) || ! TransportType . WEBSOCKET . equals ( org.springframework.web.socket.sockjs.client.TransportType ) ) { java.util.List<org.springframework.web.socket.sockjs.client.DefaultTransportRequest> . add ( new DefaultTransportRequest ( org.springframework.web.socket.sockjs.client.SockJsUrlInfo , org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.HttpHeaders ( org.springframework.web.socket.sockjs.client.HttpHeaders ) , org.springframework.web.socket.sockjs.client.Transport , org.springframework.web.socket.sockjs.client.TransportType , org.springframework.web.socket.sockjs.client.SockJsMessageCodec ( ) ) ) ; } } } if ( CollectionUtils . isEmpty ( java.util.List<org.springframework.web.socket.sockjs.client.DefaultTransportRequest> ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.socket.sockjs.client.SockJsUrlInfo + STRING + org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo . boolean ( ) ) ; } for ( int int = NUMBER ; int < java.util.List<org.springframework.web.socket.sockjs.client.DefaultTransportRequest> . size ( ) - NUMBER ; int ++ ) { DefaultTransportRequest org.springframework.web.socket.sockjs.client.DefaultTransportRequest = java.util.List<org.springframework.web.socket.sockjs.client.DefaultTransportRequest> . get ( int ) ; org.springframework.web.socket.sockjs.client.DefaultTransportRequest . setUser ( java.security.Principal ( ) ) ; if ( this . org.springframework.web.socket.sockjs.client.TaskScheduler != null ) { org.springframework.web.socket.sockjs.client.DefaultTransportRequest . setTimeoutValue ( org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo . long ( ) ) ; org.springframework.web.socket.sockjs.client.DefaultTransportRequest . setTimeoutScheduler ( this . org.springframework.web.socket.sockjs.client.TaskScheduler ) ; } org.springframework.web.socket.sockjs.client.DefaultTransportRequest . setFallbackRequest ( java.util.List<org.springframework.web.socket.sockjs.client.DefaultTransportRequest> . get ( int + NUMBER ) ) ; } return java.util.List<org.springframework.web.socket.sockjs.client.DefaultTransportRequest> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected java.security.Principal java.security.Principal ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.Map<java.net.URI,org.springframework.web.socket.sockjs.client.SockJsClient.ServerInfo> . void ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , long long ) { this . long = long ; this . boolean = ! java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return ( this . long > NUMBER ? NUMBER * this . long : this . long + NUMBER ) ; }  <METHOD_END>
