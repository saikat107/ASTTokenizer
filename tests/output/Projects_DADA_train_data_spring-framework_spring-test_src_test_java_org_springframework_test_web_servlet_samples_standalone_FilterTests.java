<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.PersonController ( ) ) . addFilters ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.ContinueFilter ( ) ) . build ( ) . perform ( post ( STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isFound ( ) ) . andExpect ( redirectedUrl ( STRING ) ) . andExpect ( model ( ) . size ( NUMBER ) ) . andExpect ( model ( ) . attributeExists ( STRING ) ) . andExpect ( flash ( ) . attributeCount ( NUMBER ) ) . andExpect ( flash ( ) . attribute ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.PersonController ( ) ) . addFilters ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.ContinueFilter ( ) , new org.springframework.test.web.servlet.samples.standalone.FilterTests.RedirectFilter ( ) ) . build ( ) . perform ( post ( STRING ) . param ( STRING , STRING ) ) . andExpect ( redirectedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.PersonController ( ) ) . addFilter ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.RedirectFilter ( ) , STRING ) . build ( ) . perform ( post ( STRING ) . param ( STRING , STRING ) ) . andExpect ( redirectedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.PersonController ( ) ) . addFilter ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.RedirectFilter ( ) , STRING , STRING ) . build ( ) . perform ( post ( STRING ) . param ( STRING , STRING ) ) . andExpect ( redirectedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.PersonController ( ) ) . addFilter ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.RedirectFilter ( ) , STRING , STRING ) . build ( ) . perform ( post ( STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isFound ( ) ) . andExpect ( redirectedUrl ( STRING ) ) . andExpect ( model ( ) . size ( NUMBER ) ) . andExpect ( model ( ) . attributeExists ( STRING ) ) . andExpect ( flash ( ) . attributeCount ( NUMBER ) ) . andExpect ( flash ( ) . attribute ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.PersonController ( ) ) . addFilters ( new org.springframework.test.web.servlet.samples.standalone.FilterTests.WrappingRequestResponseFilter ( ) ) . build ( ) . perform ( post ( STRING ) ) . andExpect ( model ( ) . attribute ( STRING , org.springframework.test.web.servlet.samples.standalone.FilterTests.WrappingRequestResponseFilter . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) public java.lang.String java.lang.String ( @ Valid Person org.springframework.test.web.servlet.samples.standalone.Person , Errors org.springframework.test.web.servlet.samples.standalone.Errors , RedirectAttributes org.springframework.test.web.servlet.samples.standalone.RedirectAttributes ) { if ( org.springframework.test.web.servlet.samples.standalone.Errors . hasErrors ( ) ) { return STRING ; } org.springframework.test.web.servlet.samples.standalone.RedirectAttributes . addAttribute ( STRING , STRING ) ; org.springframework.test.web.servlet.samples.standalone.RedirectAttributes . addFlashAttribute ( STRING , STRING ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING ) public org.springframework.test.web.servlet.samples.standalone.ModelAndView org.springframework.test.web.servlet.samples.standalone.ModelAndView ( java.security.Principal java.security.Principal ) { return new ModelAndView ( STRING , STRING , java.security.Principal . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.test.web.servlet.samples.standalone.HttpServletRequest , HttpServletResponse org.springframework.test.web.servlet.samples.standalone.HttpServletResponse , FilterChain org.springframework.test.web.servlet.samples.standalone.FilterChain ) throws org.springframework.test.web.servlet.samples.standalone.ServletException , java.io.IOException { org.springframework.test.web.servlet.samples.standalone.FilterChain . doFilter ( org.springframework.test.web.servlet.samples.standalone.HttpServletRequest , org.springframework.test.web.servlet.samples.standalone.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.test.web.servlet.samples.standalone.HttpServletRequest , HttpServletResponse org.springframework.test.web.servlet.samples.standalone.HttpServletResponse , FilterChain org.springframework.test.web.servlet.samples.standalone.FilterChain ) throws org.springframework.test.web.servlet.samples.standalone.ServletException , java.io.IOException { org.springframework.test.web.servlet.samples.standalone.FilterChain . doFilter ( new HttpServletRequestWrapper ( org.springframework.test.web.servlet.samples.standalone.HttpServletRequest ) { @ java.lang.Override public java.security.Principal java.security.Principal ( ) { return new java.security.Principal ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } } ; } } , new HttpServletResponseWrapper ( org.springframework.test.web.servlet.samples.standalone.HttpServletResponse ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.Principal java.security.Principal ( ) { return new java.security.Principal ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.test.web.servlet.samples.standalone.HttpServletRequest , HttpServletResponse org.springframework.test.web.servlet.samples.standalone.HttpServletResponse , FilterChain org.springframework.test.web.servlet.samples.standalone.FilterChain ) throws org.springframework.test.web.servlet.samples.standalone.ServletException , java.io.IOException { org.springframework.test.web.servlet.samples.standalone.HttpServletResponse . sendRedirect ( STRING ) ; }  <METHOD_END>
