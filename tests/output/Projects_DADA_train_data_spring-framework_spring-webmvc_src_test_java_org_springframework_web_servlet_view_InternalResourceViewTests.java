<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.InternalResourceView . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.view.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setServletPath ( STRING ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setPathInfo ( STRING ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setQueryString ( STRING ) ; org.springframework.web.servlet.view.InternalResourceView . setUrl ( java.lang.String ) ; org.springframework.web.servlet.view.InternalResourceView . setServletContext ( new MockServletContext ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ; org.springframework.web.servlet.view.InternalResourceView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.MockHttpServletRequest , org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.view.MockHttpServletResponse . getForwardedUrl ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> assertEquals ( STRING + java.lang.String + STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) , org.springframework.web.servlet.view.MockHttpServletRequest . getAttribute ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( View . PATH_VARIABLES ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.HttpServletRequest . getRequestDispatcher ( java.lang.String ) ) . willReturn ( new MockRequestDispatcher ( java.lang.String ) ) ; org.springframework.web.servlet.view.InternalResourceView . setUrl ( java.lang.String ) ; org.springframework.web.servlet.view.InternalResourceView . setAlwaysInclude ( true ) ; org.springframework.web.servlet.view.InternalResourceView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.view.MockHttpServletResponse . getIncludedUrl ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> verify ( org.springframework.web.servlet.view.HttpServletRequest ) . setAttribute ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( View . PATH_VARIABLES ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE ) ) . willReturn ( STRING ) ; given ( org.springframework.web.servlet.view.HttpServletRequest . getRequestDispatcher ( java.lang.String ) ) . willReturn ( new MockRequestDispatcher ( java.lang.String ) ) ; org.springframework.web.servlet.view.InternalResourceView . setUrl ( java.lang.String ) ; org.springframework.web.servlet.view.InternalResourceView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.view.MockHttpServletResponse . getIncludedUrl ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> verify ( org.springframework.web.servlet.view.HttpServletRequest ) . setAttribute ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( View . PATH_VARIABLES ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.HttpServletRequest . getRequestDispatcher ( java.lang.String ) ) . willReturn ( new MockRequestDispatcher ( java.lang.String ) ) ; org.springframework.web.servlet.view.MockHttpServletResponse . setCommitted ( true ) ; org.springframework.web.servlet.view.InternalResourceView . setUrl ( java.lang.String ) ; org.springframework.web.servlet.view.InternalResourceView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.view.MockHttpServletResponse . getIncludedUrl ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> verify ( org.springframework.web.servlet.view.HttpServletRequest ) . setAttribute ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ) ; }  <METHOD_END>
