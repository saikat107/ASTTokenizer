<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ProxyCreatorSupport org.springframework.aop.framework.ProxyCreatorSupport ) { org.springframework.aop.framework.ProxyCreatorSupport . setProxyTargetClass ( true ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.ProxyCreatorSupport . createAopProxy ( ) . getProxy ( ) ; assertTrue ( AopUtils . isCglibProxy ( java.lang.Object ) ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.aop.framework.AopProxy org.springframework.aop.framework.AopProxy ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { org.springframework.aop.framework.AdvisedSupport . setProxyTargetClass ( true ) ; return new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new CglibAopProxy ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AopConfigException .class ) public void void ( ) { AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( new NopInterceptor ( ) ) ; AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.AopProxy . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean = new org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean ( ) ; org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean . java.lang.String = STRING ; mockTargetSource . setTarget ( org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( mockTargetSource ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( new NopInterceptor ( ) ) ; AopProxy org.springframework.aop.framework.AopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean = ( org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean ) ) ; assertEquals ( org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean . java.lang.Class<? extends org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean> ( ) . java.lang.ClassLoader ( ) , org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean . java.lang.Class<? extends org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean> ( ) . java.lang.ClassLoader ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.CglibProxyTests.ProtectedMethodTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean = new org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean ( ) ; org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean . java.lang.String = STRING ; mockTargetSource . setTarget ( org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( mockTargetSource ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( new NopInterceptor ( ) ) ; AopProxy org.springframework.aop.framework.AopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean = ( org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean ) ) ; assertEquals ( org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean . java.lang.Class<? extends org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean> ( ) . java.lang.ClassLoader ( ) , org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean . java.lang.Class<? extends org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean> ( ) . java.lang.ClassLoader ( ) ) ; assertEquals ( STRING , org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.ClassLoader java.lang.ClassLoader = new java.lang.ClassLoader ( java.lang.Class<? extends org.springframework.aop.framework.CglibProxyTests> ( ) . java.lang.ClassLoader ( ) ) {		} ; org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean = new org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean ( ) ; org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean . java.lang.String = STRING ; mockTargetSource . setTarget ( org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( mockTargetSource ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( new NopInterceptor ( ) ) ; AopProxy org.springframework.aop.framework.AopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean = ( org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean ) org.springframework.aop.framework.AopProxy . getProxy ( java.lang.ClassLoader ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean ) ) ; assertNotEquals ( org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean . java.lang.Class<? extends org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean> ( ) . java.lang.ClassLoader ( ) , org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean . java.lang.Class<? extends org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean> ( ) . java.lang.ClassLoader ( ) ) ; assertNull ( org.springframework.aop.framework.CglibProxyTests.PackageMethodTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; mockTargetSource . setTarget ( org.springframework.aop.framework.TestBean ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( mockTargetSource ) ; AopProxy org.springframework.aop.framework.AopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.AopProxy . getProxy ( ) ; assertTrue ( AopUtils . isCglibProxy ( java.lang.Object ) ) ; assertTrue ( java.lang.Object instanceof ITestBean ) ; assertTrue ( java.lang.Object instanceof TestBean ) ; TestBean org.springframework.aop.framework.TestBean = ( TestBean ) java.lang.Object ; assertEquals ( NUMBER , org.springframework.aop.framework.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.framework.CglibTestBean org.springframework.aop.framework.CglibTestBean = new org.springframework.aop.framework.CglibTestBean ( ) ; org.springframework.aop.framework.CglibTestBean . void ( STRING ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . setTarget ( org.springframework.aop.framework.CglibTestBean ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( new NopInterceptor ( ) ) ; AopProxy org.springframework.aop.framework.AopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.CglibTestBean org.springframework.aop.framework.CglibTestBean = ( org.springframework.aop.framework.CglibTestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; assertEquals ( STRING , STRING , org.springframework.aop.framework.CglibTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.framework.CglibTestBean org.springframework.aop.framework.CglibTestBean = new org.springframework.aop.framework.CglibTestBean ( ) ; org.springframework.aop.framework.CglibTestBean . void ( STRING ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . setFrozen ( true ) ; org.springframework.aop.framework.AdvisedSupport . setTarget ( org.springframework.aop.framework.CglibTestBean ) ; CglibAopProxy org.springframework.aop.framework.CglibAopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.CglibTestBean org.springframework.aop.framework.CglibTestBean = ( org.springframework.aop.framework.CglibTestBean ) org.springframework.aop.framework.CglibAopProxy . getProxy ( ) ; assertNotNull ( STRING , org.springframework.aop.framework.CglibTestBean ) ; assertEquals ( STRING , STRING , org.springframework.aop.framework.CglibTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ITestBean org.springframework.aop.framework.ITestBean = org.springframework.aop.framework.ITestBean ( org.springframework.aop.framework.TestBean ) ; ITestBean org.springframework.aop.framework.ITestBean = org.springframework.aop.framework.ITestBean ( org.springframework.aop.framework.TestBean ) ; assertSame ( org.springframework.aop.framework.ITestBean . getClass ( ) , org.springframework.aop.framework.ITestBean . getClass ( ) ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.aop.framework.ITestBean org.springframework.aop.framework.ITestBean ( TestBean org.springframework.aop.framework.TestBean ) { ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( new java.lang.Class<?> < ? > [] { ITestBean .class } ) ; org.springframework.aop.framework.ProxyFactory . setProxyTargetClass ( true ) ; MethodInterceptor org.springframework.aop.framework.MethodInterceptor = new NopInterceptor ( ) ; Pointcut org.springframework.aop.framework.Pointcut = new Pointcut ( ) { @ java.lang.Override public org.springframework.aop.framework.ClassFilter org.springframework.aop.framework.ClassFilter ( ) { return ClassFilter . TRUE ; } @ java.lang.Override public org.springframework.aop.framework.MethodMatcher org.springframework.aop.framework.MethodMatcher ( ) { return MethodMatcher . TRUE ; } @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return true ; } @ java.lang.Override public int int ( ) { return NUMBER ; } } ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new DefaultPointcutAdvisor ( org.springframework.aop.framework.Pointcut , org.springframework.aop.framework.MethodInterceptor ) ) ; org.springframework.aop.framework.ProxyFactory . setTarget ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . setFrozen ( true ) ; org.springframework.aop.framework.ProxyFactory . setExposeProxy ( false ) ; return ( ITestBean ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.ClassFilter org.springframework.aop.framework.ClassFilter ( ) { return ClassFilter . TRUE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.MethodMatcher org.springframework.aop.framework.MethodMatcher ( ) { return MethodMatcher . TRUE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ITestBean org.springframework.aop.framework.ITestBean = org.springframework.aop.framework.ITestBean ( org.springframework.aop.framework.TestBean ) ; ITestBean org.springframework.aop.framework.ITestBean = org.springframework.aop.framework.ITestBean ( org.springframework.aop.framework.TestBean ) ; assertSame ( STRING , org.springframework.aop.framework.ITestBean . getClass ( ) , org.springframework.aop.framework.ITestBean . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.aop.framework.ITestBean org.springframework.aop.framework.ITestBean ( TestBean org.springframework.aop.framework.TestBean ) { ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( ITestBean .class ) ; org.springframework.aop.framework.ProxyFactory . setProxyTargetClass ( true ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new LockMixinAdvisor ( ) ) ; org.springframework.aop.framework.ProxyFactory . setTarget ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . setFrozen ( true ) ; org.springframework.aop.framework.ProxyFactory . setExposeProxy ( false ) ; return ( ITestBean ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean = new org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean ( STRING , NUMBER ) ; org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean . void ( ) ; mockTargetSource . setTarget ( org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( mockTargetSource ) ; CglibAopProxy org.springframework.aop.framework.CglibAopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.CglibAopProxy . setConstructorArguments ( new java.lang.Object [] { STRING , NUMBER } , new java.lang.Class<?> < ? > [] { java.lang.String .class , int .class } ) ; org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean = ( org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean ) org.springframework.aop.framework.CglibAopProxy . getProxy ( ) ; org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean = ( org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean ) org.springframework.aop.framework.CglibAopProxy . getProxy ( ) ; assertNotNull ( STRING , org.springframework.aop.framework.CglibProxyTests.NoArgCtorTestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.ITestBean = new TestBean ( ) ; mockTargetSource . setTarget ( org.springframework.aop.framework.ITestBean ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( mockTargetSource ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( new NopInterceptor ( ) ) ; CglibAopProxy org.springframework.aop.framework.CglibAopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.CglibAopProxy . getProxy ( ) ; mockTargetSource . setTarget ( org.springframework.aop.framework.ITestBean ) ; org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( new java.lang.Class<?> < ? > [] {} ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( mockTargetSource ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( new NopInterceptor ( ) ) ; org.springframework.aop.framework.CglibAopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; assertThat ( org.springframework.aop.framework.CglibAopProxy . getProxy ( ) , instanceOf ( ITestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.ITestBean = new TestBean ( ) ; mockTargetSource . setTarget ( org.springframework.aop.framework.ITestBean ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( mockTargetSource ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( new NopInterceptor ( ) ) ; org.springframework.aop.framework.AdvisedSupport . addInterface ( java.io.Serializable .class ) ; CglibAopProxy org.springframework.aop.framework.CglibAopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.CglibAopProxy . getProxy ( ) ; mockTargetSource . setTarget ( org.springframework.aop.framework.ITestBean ) ; org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( new java.lang.Class<?> < ? > [] {} ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( mockTargetSource ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( new NopInterceptor ( ) ) ; org.springframework.aop.framework.CglibAopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.CglibAopProxy . getProxy ( ) ; assertTrue ( org.springframework.aop.framework.ITestBean instanceof java.io.Serializable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.framework.CglibProxyTests.ExceptionThrower org.springframework.aop.framework.CglibProxyTests.ExceptionThrower = new org.springframework.aop.framework.CglibProxyTests.ExceptionThrower ( ) ; mockTargetSource . setTarget ( org.springframework.aop.framework.CglibProxyTests.ExceptionThrower ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( mockTargetSource ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( new NopInterceptor ( ) ) ; AopProxy org.springframework.aop.framework.AopProxy = new CglibAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.CglibProxyTests.ExceptionThrower org.springframework.aop.framework.CglibProxyTests.ExceptionThrower = ( org.springframework.aop.framework.CglibProxyTests.ExceptionThrower ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; try { org.springframework.aop.framework.CglibProxyTests.ExceptionThrower . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( STRING , java.lang.Exception instanceof ApplicationContextException ) ; } assertTrue ( STRING , org.springframework.aop.framework.CglibProxyTests.ExceptionThrower . boolean ( ) ) ; assertTrue ( STRING , org.springframework.aop.framework.CglibProxyTests.ExceptionThrower . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ApplicationContext org.springframework.aop.framework.ApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<? extends org.springframework.aop.framework.CglibProxyTests> ( ) ) ; org.springframework.aop.framework.ApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; CountingBeforeAdvice org.springframework.aop.framework.CountingBeforeAdvice = new CountingBeforeAdvice ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.framework.ProxyFactory . setTarget ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . setFrozen ( false ) ; org.springframework.aop.framework.ProxyFactory . setOpaque ( false ) ; org.springframework.aop.framework.ProxyFactory . setProxyTargetClass ( true ) ; TestBean org.springframework.aop.framework.TestBean = ( TestBean ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.aop.framework.TestBean ) ) ; org.springframework.aop.framework.TestBean . getAge ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; ( ( Advised ) org.springframework.aop.framework.TestBean ) . addAdvice ( org.springframework.aop.framework.CountingBeforeAdvice ) ; org.springframework.aop.framework.TestBean . getAge ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CountingBeforeAdvice org.springframework.aop.framework.CountingBeforeAdvice = new CountingBeforeAdvice ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( new org.springframework.aop.framework.CglibProxyTests.MyBean ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.CountingBeforeAdvice ) ; org.springframework.aop.framework.ProxyFactory . setProxyTargetClass ( true ) ; org.springframework.aop.framework.CglibProxyTests.MyBean org.springframework.aop.framework.CglibProxyTests.MyBean = ( org.springframework.aop.framework.CglibProxyTests.MyBean ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CglibProxyTests.MyBean . int ( NUMBER , NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( new org.springframework.aop.framework.CglibProxyTests.MyBean ( ) ) ; org.springframework.aop.framework.CglibProxyTests.MyBean org.springframework.aop.framework.CglibProxyTests.MyBean = ( org.springframework.aop.framework.CglibProxyTests.MyBean ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CglibProxyTests.MyBean . int ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( new org.springframework.aop.framework.CglibProxyTests.MyBean ( ) ) ; org.springframework.aop.framework.CglibProxyTests.MyBean org.springframework.aop.framework.CglibProxyTests.MyBean = ( org.springframework.aop.framework.CglibProxyTests.MyBean ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; assertTrue ( org.springframework.aop.framework.CglibProxyTests.MyBean . boolean ( org.springframework.aop.framework.CglibProxyTests.MyEnum . org.springframework.aop.framework.CglibProxyTests.MyEnum , org.springframework.aop.framework.CglibProxyTests.MyOtherEnum . org.springframework.aop.framework.CglibProxyTests.MyOtherEnum ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected int int ( int int , int int ) { return int + int ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < V extends org.springframework.aop.framework.CglibProxyTests.MyInterface > boolean boolean ( V ... V[] ) { return true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { try { throw new ApplicationContextException ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { boolean = true ; throw java.lang.Exception ; } finally { boolean = true ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { boolean = true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ) { boolean = false ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { throw new java.lang.UnsupportedOperationException ( org.springframework.aop.framework.MethodInvocation . getMethod ( ) . getName ( ) ) ; }  <METHOD_END>
