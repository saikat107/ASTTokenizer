<METHOD_START> public void ( ) { setExposePathVariables ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); setExposePathVariables ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , boolean boolean ) { super( java.lang.String ); this . boolean = boolean ; setExposePathVariables ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , boolean boolean , boolean boolean ) { super( java.lang.String ); this . boolean = boolean ; this . boolean = boolean ; setExposePathVariables ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , boolean boolean , boolean boolean , boolean boolean ) { super( java.lang.String ); this . boolean = boolean ; this . boolean = boolean ; this . boolean = boolean ; setExposePathVariables ( false ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( final boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( HttpStatus org.springframework.web.servlet.view.HttpStatus ) { this . org.springframework.web.servlet.view.HttpStatus = org.springframework.web.servlet.view.HttpStatus ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) throws java.io.IOException { java.lang.String java.lang.String = java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.HttpServletRequest ) ; java.lang.String = java.lang.String ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; RequestContextUtils . saveOutputFlashMap ( java.lang.String , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; void ( org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse , java.lang.String , this . boolean ) ; }  <METHOD_END>
<METHOD_START> protected final java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest )			throws java.io.UnsupportedEncodingException { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( this . boolean && getUrl ( ) . startsWith ( STRING ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.web.servlet.view.HttpServletRequest . getContextPath ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( getUrl ( ) ) ; java.lang.String java.lang.String = this . java.lang.String ; if ( java.lang.String == null ) { java.lang.String = org.springframework.web.servlet.view.HttpServletRequest . getCharacterEncoding ( ) ; } if ( java.lang.String == null ) { java.lang.String = WebUtils . DEFAULT_CHARACTER_ENCODING ; } if ( this . boolean && StringUtils . hasText ( java.lang.StringBuilder ) ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.servlet.view.HttpServletRequest ) ; java.lang.StringBuilder = java.lang.StringBuilder ( java.lang.StringBuilder . java.lang.String ( ) , java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.String> , java.lang.String ) ; } if ( boolean ( ) ) { void ( java.lang.StringBuilder , org.springframework.web.servlet.view.HttpServletRequest ) ; } if ( this . boolean ) { void ( java.lang.StringBuilder , java.util.Map<java.lang.String,java.lang.Object> , java.lang.String ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.StringBuilder java.lang.StringBuilder ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , java.lang.String java.lang.String )			throws java.io.UnsupportedEncodingException { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; int int = NUMBER ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.Object java.lang.Object = ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ? java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) : java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ) ; if ( java.lang.Object == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( int , java.util.regex.Matcher . int ( ) ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( UriUtils . encodePathSegment ( java.lang.Object . java.lang.String ( ) , java.lang.String ) ) ; int = java.util.regex.Matcher . int ( ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( int , java.lang.String . int ( ) ) ) ; return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest ) { java.lang.String java.lang.String = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( java.lang.String ) ; return ( java.util.Map<java.lang.String,java.lang.String> != null ) ? java.util.Map<java.lang.String,java.lang.String> : java.util.Collections .< java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.StringBuilder java.lang.StringBuilder , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest ) { java.lang.String java.lang.String = org.springframework.web.servlet.view.HttpServletRequest . getQueryString ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String java.lang.String = null ; int int = java.lang.StringBuilder . int ( STRING ) ; if ( int > - NUMBER ) { java.lang.String = java.lang.StringBuilder . java.lang.String ( int ) ; java.lang.StringBuilder . java.lang.StringBuilder ( int , java.lang.StringBuilder . int ( ) ) ; } if ( java.lang.StringBuilder . java.lang.String ( ) . int ( '?' ) < NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( '?' ) . java.lang.StringBuilder ( java.lang.String ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( '&' ) . java.lang.StringBuilder ( java.lang.String ) ; } if ( java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.StringBuilder java.lang.StringBuilder , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String )			throws java.io.UnsupportedEncodingException { java.lang.String java.lang.String = null ; int int = java.lang.StringBuilder . int ( STRING ) ; if ( int > - NUMBER ) { java.lang.String = java.lang.StringBuilder . java.lang.String ( int ) ; java.lang.StringBuilder . java.lang.StringBuilder ( int , java.lang.StringBuilder . int ( ) ) ; } boolean boolean = ( java.lang.StringBuilder . java.lang.String ( ) . int ( '?' ) < NUMBER ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ; if ( java.lang.Object != null && java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.util.Iterator<java.lang.Object> = java.util.Arrays . java.util.List ( ObjectUtils . toObjectArray ( java.lang.Object ) ) . iterator ( ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { java.util.Iterator<java.lang.Object> = ( ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . java.util.Iterator<java.lang.Object> ( ) ; } else { java.util.Iterator<java.lang.Object> = java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) . java.util.Iterator<java.lang.Object> ( ) ; } while ( java.util.Iterator<java.lang.Object> . boolean ( ) ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( '?' ) ; boolean = false ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( '&' ) ; } java.lang.String java.lang.String = java.lang.String ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.lang.String ) ; java.lang.String java.lang.String = ( java.lang.Object != null ? java.lang.String ( java.lang.Object . java.lang.String ( ) , java.lang.String ) : STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( '=' ) . java.lang.StringBuilder ( java.lang.String ) ; } } if ( java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { if ( boolean ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return false ; } if ( boolean ( java.lang.Object ) ) { return true ; } if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { int int = java.lang.reflect.Array . int ( java.lang.Object ) ; if ( int == NUMBER ) { return false ; } for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.Object java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Object , int ) ; if ( ! boolean ( java.lang.Object ) ) { return false ; } } return true ; } if ( java.lang.Object instanceof java.util.Collection ) { java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; if ( java.util.Collection<> . boolean ( ) ) { return false ; } for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { if ( ! boolean ( java.lang.Object ) ) { return false ; } } return true ; } return false ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object != null && BeanUtils . isSimpleValueType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.UnsupportedEncodingException { return ( java.lang.String != null ? java.net.URLEncoder . java.lang.String ( java.lang.String , java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) { WebApplicationContext org.springframework.web.servlet.view.WebApplicationContext = getWebApplicationContext ( ) ; if ( org.springframework.web.servlet.view.WebApplicationContext == null ) { org.springframework.web.servlet.view.WebApplicationContext = RequestContextUtils . findWebApplicationContext ( org.springframework.web.servlet.view.HttpServletRequest , getServletContext ( ) ) ; } if ( org.springframework.web.servlet.view.WebApplicationContext != null && org.springframework.web.servlet.view.WebApplicationContext . containsBean ( RequestContextUtils . REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME ) ) { RequestDataValueProcessor org.springframework.web.servlet.view.RequestDataValueProcessor = org.springframework.web.servlet.view.WebApplicationContext . getBean ( RequestContextUtils . REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME , RequestDataValueProcessor .class ) ; return org.springframework.web.servlet.view.RequestDataValueProcessor . processUrl ( org.springframework.web.servlet.view.HttpServletRequest , java.lang.String ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void void ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse , java.lang.String java.lang.String , boolean boolean ) throws java.io.IOException { java.lang.String java.lang.String = ( boolean ( java.lang.String ) ? java.lang.String : org.springframework.web.servlet.view.HttpServletResponse . encodeRedirectURL ( java.lang.String ) ) ; if ( boolean ) { HttpStatus org.springframework.web.servlet.view.HttpStatus = ( HttpStatus ) org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( View . RESPONSE_STATUS_ATTRIBUTE ) ; if ( this . org.springframework.web.servlet.view.HttpStatus != null ) { org.springframework.web.servlet.view.HttpServletResponse . setStatus ( this . org.springframework.web.servlet.view.HttpStatus . value ( ) ) ; org.springframework.web.servlet.view.HttpServletResponse . setHeader ( STRING , java.lang.String ) ; } else if ( org.springframework.web.servlet.view.HttpStatus != null ) { org.springframework.web.servlet.view.HttpServletResponse . setStatus ( org.springframework.web.servlet.view.HttpStatus . value ( ) ) ; org.springframework.web.servlet.view.HttpServletResponse . setHeader ( STRING , java.lang.String ) ; } else { org.springframework.web.servlet.view.HttpServletResponse . sendRedirect ( java.lang.String ) ; } } else { HttpStatus org.springframework.web.servlet.view.HttpStatus = org.springframework.web.servlet.view.HttpStatus ( org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse , java.lang.String ) ; org.springframework.web.servlet.view.HttpServletResponse . setStatus ( org.springframework.web.servlet.view.HttpStatus . value ( ) ) ; org.springframework.web.servlet.view.HttpServletResponse . setHeader ( STRING , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { if ( ObjectUtils . isEmpty ( java.lang.String[] ( ) ) ) { return false ; } java.lang.String java.lang.String = UriComponentsBuilder . fromUriString ( java.lang.String ) . build ( ) . getHost ( ) ; if ( StringUtils . isEmpty ( java.lang.String ) ) { return false ; } for ( java.lang.String java.lang.String : java.lang.String[] ( ) ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.view.HttpStatus org.springframework.web.servlet.view.HttpStatus ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse , java.lang.String java.lang.String ) { if ( this . org.springframework.web.servlet.view.HttpStatus != null ) { return this . org.springframework.web.servlet.view.HttpStatus ; } HttpStatus org.springframework.web.servlet.view.HttpStatus = ( HttpStatus ) org.springframework.web.servlet.view.HttpServletRequest . getAttribute ( View . RESPONSE_STATUS_ATTRIBUTE ) ; if ( org.springframework.web.servlet.view.HttpStatus != null ) { return org.springframework.web.servlet.view.HttpStatus ; } return HttpStatus . SEE_OTHER ; }  <METHOD_END>
