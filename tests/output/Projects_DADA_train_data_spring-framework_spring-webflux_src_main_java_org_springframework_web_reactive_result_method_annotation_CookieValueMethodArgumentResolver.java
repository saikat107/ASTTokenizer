<METHOD_START> public void ( ConfigurableBeanFactory org.springframework.web.reactive.result.method.annotation.ConfigurableBeanFactory , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.ConfigurableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return checkAnnotatedParamNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , CookieValue .class , ( annot , type ) -> true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.NamedValueInfo org.springframework.web.reactive.result.method.annotation.NamedValueInfo ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { CookieValue org.springframework.web.reactive.result.method.annotation.CookieValue = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterAnnotation ( CookieValue .class ) ; return new org.springframework.web.reactive.result.method.annotation.CookieValueMethodArgumentResolver.CookieValueNamedValueInfo ( org.springframework.web.reactive.result.method.annotation.CookieValue ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { HttpCookie org.springframework.web.reactive.result.method.annotation.HttpCookie = org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getRequest ( ) . getCookies ( ) . getFirst ( java.lang.String ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.MethodParameter . getNestedParameterType ( ) ; if ( HttpCookie .class . boolean ( java.lang.Class<> ) ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.result.method.annotation.HttpCookie ) ; } else if ( org.springframework.web.reactive.result.method.annotation.HttpCookie != null ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.result.method.annotation.HttpCookie . getValue ( ) ) ; } else { return java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { java.lang.String java.lang.String = org.springframework.web.reactive.result.method.annotation.MethodParameter . getNestedParameterType ( ) . getSimpleName ( ) ; java.lang.String java.lang.String = STRING + java.lang.String + STRING + java.lang.String ; throw new ServerWebInputException ( java.lang.String , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> private void ( CookieValue org.springframework.web.reactive.result.method.annotation.CookieValue ) { super( org.springframework.web.reactive.result.method.annotation.CookieValue . name ( ) , org.springframework.web.reactive.result.method.annotation.CookieValue . required ( ) , org.springframework.web.reactive.result.method.annotation.CookieValue . defaultValue ( ) ); }  <METHOD_END>
