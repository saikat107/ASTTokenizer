<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.test.matcher.Message<java.math.BigDecimal> , hasPayload ( new java.math.BigDecimal ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.test.matcher.Message<java.math.BigDecimal> , not ( hasPayload ( new java.math.BigDecimal ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.test.matcher.Message<java.math.BigDecimal> , hasPayload ( is ( instanceOf ( java.math.BigDecimal .class ) ) ) ) ; assertThat ( org.springframework.integration.test.matcher.Message<java.math.BigDecimal> , hasPayload ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.test.matcher.Message<java.math.BigDecimal> , not ( ( hasPayload ( is ( instanceOf ( java.lang.String .class ) ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { assertThat ( org.springframework.integration.test.matcher.Message<java.math.BigDecimal> , hasPayload ( STRING ) ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { assertTrue ( java.lang.AssertionError . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { Message org.springframework.integration.test.matcher.Message = this . org.springframework.integration.test.matcher.Message<java.math.BigDecimal> ; assertThat ( org.springframework.integration.test.matcher.Message , hasPayload ( new java.math.BigDecimal ( STRING ) ) ) ; }  <METHOD_END>
