<METHOD_START> public void ( java.util.List<org.springframework.web.reactive.result.view.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.reactive.result.view.ViewResolver> , RequestedContentTypeResolver org.springframework.web.reactive.result.view.RequestedContentTypeResolver ) { this( java.util.List<org.springframework.web.reactive.result.view.ViewResolver> , org.springframework.web.reactive.result.view.RequestedContentTypeResolver , new ReactiveAdapterRegistry ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.reactive.result.view.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.reactive.result.view.ViewResolver> , RequestedContentTypeResolver org.springframework.web.reactive.result.view.RequestedContentTypeResolver , ReactiveAdapterRegistry org.springframework.web.reactive.result.view.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.view.RequestedContentTypeResolver , org.springframework.web.reactive.result.view.ReactiveAdapterRegistry ); this . java.util.List<org.springframework.web.reactive.result.view.ViewResolver> . addAll ( java.util.List<org.springframework.web.reactive.result.view.ViewResolver> ) ; AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.web.reactive.result.view.ViewResolver> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.result.view.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.reactive.result.view.ViewResolver> ( ) { return java.util.Collections . java.util.List<org.springframework.web.reactive.result.view.ViewResolver> ( this . java.util.List<org.springframework.web.reactive.result.view.ViewResolver> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.reactive.result.view.View> < View > java.util.List<org.springframework.web.reactive.result.view.View> ) { this . java.util.List<org.springframework.web.reactive.result.view.View> . clear ( ) ; if ( java.util.List<org.springframework.web.reactive.result.view.View> != null ) { this . java.util.List<org.springframework.web.reactive.result.view.View> . addAll ( java.util.List<org.springframework.web.reactive.result.view.View> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.result.view.View> < View > java.util.List<org.springframework.web.reactive.result.view.View> ( ) { return this . java.util.List<org.springframework.web.reactive.result.view.View> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HandlerResult org.springframework.web.reactive.result.view.HandlerResult ) { if ( boolean ( org.springframework.web.reactive.result.view.HandlerResult . getReturnTypeSource ( ) ) ) { return true ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.view.HandlerResult . getReturnType ( ) . getRawClass ( ) ; ReactiveAdapter org.springframework.web.reactive.result.view.ReactiveAdapter = getAdapter ( org.springframework.web.reactive.result.view.HandlerResult ) ; if ( org.springframework.web.reactive.result.view.ReactiveAdapter != null ) { if ( org.springframework.web.reactive.result.view.ReactiveAdapter . isNoValue ( ) ) { return true ; } java.lang.Class<?> = org.springframework.web.reactive.result.view.HandlerResult . getReturnType ( ) . getGeneric ( NUMBER ) . getRawClass ( ) ; } return ( java.lang.CharSequence .class . boolean ( java.lang.Class<> ) || Rendering .class . boolean ( java.lang.Class<> ) || Model .class . boolean ( java.lang.Class<> ) || java.util.Map .class . boolean ( java.lang.Class<> ) || void .class . boolean ( java.lang.Class<> ) || View .class . boolean ( java.lang.Class<> ) || ! BeanUtils . isSimpleProperty ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MethodParameter org.springframework.web.reactive.result.view.MethodParameter ) { return org.springframework.web.reactive.result.view.MethodParameter . hasMethodAnnotation ( ModelAttribute .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.reactive.result.view.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.view.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange , HandlerResult org.springframework.web.reactive.result.view.HandlerResult ) { Mono < java.lang.Object > org.springframework.web.reactive.result.view.Mono<java.lang.Object> ; ResolvableType org.springframework.web.reactive.result.view.ResolvableType ; ReactiveAdapter org.springframework.web.reactive.result.view.ReactiveAdapter = getAdapter ( org.springframework.web.reactive.result.view.HandlerResult ) ; if ( org.springframework.web.reactive.result.view.ReactiveAdapter != null ) { Assert . isTrue ( ! org.springframework.web.reactive.result.view.ReactiveAdapter . isMultiValue ( ) , STRING + STRING + org.springframework.web.reactive.result.view.HandlerResult . getReturnType ( ) ) ; org.springframework.web.reactive.result.view.Mono<java.lang.Object> = org.springframework.web.reactive.result.view.HandlerResult . getReturnValue ( ) . map ( value -> Mono . from ( adapter . toPublisher ( value ) ) ) . orElse ( Mono . empty ( ) ) ; org.springframework.web.reactive.result.view.ResolvableType = org.springframework.web.reactive.result.view.ReactiveAdapter . isNoValue ( ) ? ResolvableType . forClass ( java.lang.Void .class ) : org.springframework.web.reactive.result.view.HandlerResult . getReturnType ( ) . getGeneric ( NUMBER ) ; } else { org.springframework.web.reactive.result.view.Mono<java.lang.Object> = Mono . justOrEmpty ( org.springframework.web.reactive.result.view.HandlerResult . getReturnValue ( ) ) ; org.springframework.web.reactive.result.view.ResolvableType = org.springframework.web.reactive.result.view.HandlerResult . getReturnType ( ) ; } return org.springframework.web.reactive.result.view.Mono<java.lang.Object> . otherwiseIfEmpty ( org.springframework.web.reactive.result.view.ServerWebExchange . isNotModified ( ) ? Mono . empty ( ) : org.springframework.web.reactive.result.view.Mono<java.lang.Object> ) . then ( returnValue -> { Mono < List < View > > viewsMono ; Model model = result . getModel ( ) ; MethodParameter parameter = result . getReturnTypeSource ( ) ; Locale acceptLocale = exchange . getRequest ( ) . getHeaders ( ) . getAcceptLanguageAsLocale ( ) ; Locale locale = acceptLocale != null ? acceptLocale : Locale . getDefault ( ) ; Class < ? > clazz = valueType . getRawClass ( ) ; if ( clazz == null ) { clazz = returnValue . getClass ( ) ; } if ( returnValue == NO_VALUE || Void .class . equals ( clazz ) || void .class . equals ( clazz ) ) { viewsMono = resolveViews ( getDefaultViewName ( exchange ) , locale ) ; } else if ( CharSequence .class . isAssignableFrom ( clazz ) && ! hasModelAnnotation ( parameter ) ) { viewsMono = resolveViews ( returnValue . toString ( ) , locale ) ; } else if ( Rendering .class . isAssignableFrom ( clazz ) ) { Rendering render = ( Rendering ) returnValue ; render . status ( ) . ifPresent ( exchange . getResponse ( ) :: setStatusCode ) ; exchange . getResponse ( ) . getHeaders ( ) . putAll ( render . headers ( ) ) ; model . addAllAttributes ( render . modelAttributes ( ) ) ; Object view = render . view ( ) . orElse ( getDefaultViewName ( exchange ) ) ; viewsMono = ( view instanceof String ? resolveViews ( ( String ) view , locale ) : Mono . just ( Collections . singletonList ( ( View ) view ) ) ) ; } else if ( Model .class . isAssignableFrom ( clazz ) ) { model . addAllAttributes ( ( ( Model ) returnValue ) . asMap ( ) ) ; viewsMono = resolveViews ( getDefaultViewName ( exchange ) , locale ) ; } else if ( Map .class . isAssignableFrom ( clazz ) && ! hasModelAnnotation ( parameter ) ) { model . addAllAttributes ( ( Map < String , ? > ) returnValue ) ; viewsMono = resolveViews ( getDefaultViewName ( exchange ) , locale ) ; } else if ( View .class . isAssignableFrom ( clazz ) ) { viewsMono = Mono . just ( Collections . singletonList ( ( View ) returnValue ) ) ; } else { String name = getNameForReturnValue ( clazz , parameter ) ; model . addAttribute ( name , returnValue ) ; viewsMono = resolveViews ( getDefaultViewName ( exchange ) , locale ) ; } updateBindingContext ( result . getBindingContext ( ) , exchange ) ; return viewsMono . then ( views -> render ( views , model . asMap ( ) , exchange ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange ) { java.lang.String java.lang.String = this . org.springframework.web.reactive.result.view.HttpRequestPathHelper . getLookupPathForRequest ( org.springframework.web.reactive.result.view.ServerWebExchange ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; } return StringUtils . stripFilenameExtension ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.view.Mono<java.util.List<org.springframework.web.reactive.result.view.View>> < java.util.List<org.springframework.web.reactive.result.view.View> < View > > org.springframework.web.reactive.result.view.Mono<java.util.List<org.springframework.web.reactive.result.view.View>> ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return Flux . fromIterable ( java.util.List<org.springframework.web.reactive.result.view.ViewResolver> ( ) ) . concatMap ( resolver -> resolver . resolveViewName ( viewName , locale ) ) . collectList ( ) . map ( views -> { if ( views . isEmpty ( ) ) { throw new IllegalStateException ( STRING + viewName + STRING ) ; } views . addAll ( getDefaultViews ( ) ) ; return views ; } ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> , MethodParameter org.springframework.web.reactive.result.view.MethodParameter ) { ModelAttribute org.springframework.web.reactive.result.view.ModelAttribute = org.springframework.web.reactive.result.view.MethodParameter . getMethodAnnotation ( ModelAttribute .class ) ; if ( org.springframework.web.reactive.result.view.ModelAttribute != null && StringUtils . hasText ( org.springframework.web.reactive.result.view.ModelAttribute . value ( ) ) ) { return org.springframework.web.reactive.result.view.ModelAttribute . value ( ) ; } return ClassUtils . getShortNameAsProperty ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( BindingContext org.springframework.web.reactive.result.view.BindingContext , ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.web.reactive.result.view.BindingContext . getModel ( ) . asMap ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) . java.util.stream.Stream<java.lang.String> ( ) . java.util.stream.Stream<java.lang.String> ( java.lang.String -> boolean ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ) . java.util.stream.Stream<java.lang.String> ( java.lang.String -> ! java.util.Map<java.lang.String,java.lang.Object> . boolean ( BindingResult . MODEL_KEY_PREFIX + java.lang.String ) ) . void ( java.lang.String -> { WebExchangeDataBinder org.springframework.web.reactive.result.view.WebExchangeDataBinder = org.springframework.web.reactive.result.view.BindingContext . createDataBinder ( org.springframework.web.reactive.result.view.ServerWebExchange , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( BindingResult . MODEL_KEY_PREFIX + java.lang.String , org.springframework.web.reactive.result.view.WebExchangeDataBinder . getBindingResult ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { return ! java.lang.String . boolean ( BindingResult . MODEL_KEY_PREFIX ) && java.lang.Object != null && ! java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) && ! ( java.lang.Object instanceof java.util.Collection ) && ! ( java.lang.Object instanceof java.util.Map ) && ! BeanUtils . isSimpleValueType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.view.Mono<? extends java.lang.Void> < ? extends java.lang.Void > org.springframework.web.reactive.result.view.Mono<? extends java.lang.Void> ( java.util.List<org.springframework.web.reactive.result.view.View> < View > java.util.List<org.springframework.web.reactive.result.view.View> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange ) { java.util.List<org.springframework.web.reactive.result.view.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.view.MediaType> = java.util.List<org.springframework.web.reactive.result.view.MediaType> ( java.util.List<org.springframework.web.reactive.result.view.View> ) ; MediaType org.springframework.web.reactive.result.view.MediaType = selectMediaType ( org.springframework.web.reactive.result.view.ServerWebExchange , ( ) mediaTypes ) ; if ( org.springframework.web.reactive.result.view.MediaType != null ) { for ( View org.springframework.web.reactive.result.view.View : java.util.List<org.springframework.web.reactive.result.view.View> ) { for ( MediaType org.springframework.web.reactive.result.view.MediaType : org.springframework.web.reactive.result.view.View . getSupportedMediaTypes ( ) ) { if ( org.springframework.web.reactive.result.view.MediaType . isCompatibleWith ( org.springframework.web.reactive.result.view.MediaType ) ) { return org.springframework.web.reactive.result.view.View . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.reactive.result.view.MediaType , org.springframework.web.reactive.result.view.ServerWebExchange ) ; } } } } throw new NotAcceptableStatusException ( java.util.List<org.springframework.web.reactive.result.view.MediaType> ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.reactive.result.view.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.view.MediaType> ( java.util.List<org.springframework.web.reactive.result.view.View> < View > java.util.List<org.springframework.web.reactive.result.view.View> ) { return java.util.List<org.springframework.web.reactive.result.view.View> . stream ( ) . flatMap ( view -> view . getSupportedMediaTypes ( ) . stream ( ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
