<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public boolean boolean ( CorsConfiguration org.springframework.web.cors.CorsConfiguration , HttpServletRequest org.springframework.web.cors.HttpServletRequest , HttpServletResponse org.springframework.web.cors.HttpServletResponse )			throws java.io.IOException { if ( ! CorsUtils . isCorsRequest ( org.springframework.web.cors.HttpServletRequest ) ) { return true ; } ServletServerHttpResponse org.springframework.web.cors.ServletServerHttpResponse = new ServletServerHttpResponse ( org.springframework.web.cors.HttpServletResponse ) ; if ( boolean ( org.springframework.web.cors.ServletServerHttpResponse ) ) { org.springframework.web.cors.Log . debug ( STRING ) ; return true ; } ServletServerHttpRequest org.springframework.web.cors.ServletServerHttpRequest = new ServletServerHttpRequest ( org.springframework.web.cors.HttpServletRequest ) ; if ( WebUtils . isSameOrigin ( org.springframework.web.cors.ServletServerHttpRequest ) ) { org.springframework.web.cors.Log . debug ( STRING ) ; return true ; } boolean boolean = CorsUtils . isPreFlightRequest ( org.springframework.web.cors.HttpServletRequest ) ; if ( org.springframework.web.cors.CorsConfiguration == null ) { if ( boolean ) { void ( org.springframework.web.cors.ServletServerHttpResponse ) ; return false ; } else { return true ; } } return boolean ( org.springframework.web.cors.ServletServerHttpRequest , org.springframework.web.cors.ServletServerHttpResponse , org.springframework.web.cors.CorsConfiguration , boolean ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ServerHttpResponse org.springframework.web.cors.ServerHttpResponse ) { try { return ( org.springframework.web.cors.ServerHttpResponse . getHeaders ( ) . getAccessControlAllowOrigin ( ) != null ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { return false ; } }  <METHOD_END>
<METHOD_START> protected void void ( ServerHttpResponse org.springframework.web.cors.ServerHttpResponse ) throws java.io.IOException { org.springframework.web.cors.ServerHttpResponse . setStatusCode ( HttpStatus . FORBIDDEN ) ; org.springframework.web.cors.ServerHttpResponse . getBody ( ) . write ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ServerHttpRequest org.springframework.web.cors.ServerHttpRequest , ServerHttpResponse org.springframework.web.cors.ServerHttpResponse , CorsConfiguration org.springframework.web.cors.CorsConfiguration , boolean boolean ) throws java.io.IOException { java.lang.String java.lang.String = org.springframework.web.cors.ServerHttpRequest . getHeaders ( ) . getOrigin ( ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.cors.CorsConfiguration , java.lang.String ) ; HttpMethod org.springframework.web.cors.HttpMethod = org.springframework.web.cors.HttpMethod ( org.springframework.web.cors.ServerHttpRequest , boolean ) ; java.util.List<org.springframework.web.cors.HttpMethod> < HttpMethod > java.util.List<org.springframework.web.cors.HttpMethod> = java.util.List<org.springframework.web.cors.HttpMethod> ( org.springframework.web.cors.CorsConfiguration , org.springframework.web.cors.HttpMethod ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.web.cors.ServerHttpRequest , boolean ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.web.cors.CorsConfiguration , java.util.List<java.lang.String> ) ; if ( java.lang.String == null || java.util.List<org.springframework.web.cors.HttpMethod> == null || ( boolean && java.util.List<java.lang.String> == null ) ) { void ( org.springframework.web.cors.ServerHttpResponse ) ; return false ; } HttpHeaders org.springframework.web.cors.HttpHeaders = org.springframework.web.cors.ServerHttpResponse . getHeaders ( ) ; org.springframework.web.cors.HttpHeaders . setAccessControlAllowOrigin ( java.lang.String ) ; org.springframework.web.cors.HttpHeaders . add ( HttpHeaders . VARY , HttpHeaders . ORIGIN ) ; if ( boolean ) { org.springframework.web.cors.HttpHeaders . setAccessControlAllowMethods ( java.util.List<org.springframework.web.cors.HttpMethod> ) ; } if ( boolean && ! java.util.List<java.lang.String> . boolean ( ) ) { org.springframework.web.cors.HttpHeaders . setAccessControlAllowHeaders ( java.util.List<java.lang.String> ) ; } if ( ! CollectionUtils . isEmpty ( org.springframework.web.cors.CorsConfiguration . getExposedHeaders ( ) ) ) { org.springframework.web.cors.HttpHeaders . setAccessControlExposeHeaders ( org.springframework.web.cors.CorsConfiguration . getExposedHeaders ( ) ) ; } if ( java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.web.cors.CorsConfiguration . getAllowCredentials ( ) ) ) { org.springframework.web.cors.HttpHeaders . setAccessControlAllowCredentials ( true ) ; } if ( boolean && org.springframework.web.cors.CorsConfiguration . getMaxAge ( ) != null ) { org.springframework.web.cors.HttpHeaders . setAccessControlMaxAge ( org.springframework.web.cors.CorsConfiguration . getMaxAge ( ) ) ; } org.springframework.web.cors.ServerHttpResponse . flush ( ) ; return true ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( CorsConfiguration org.springframework.web.cors.CorsConfiguration , java.lang.String java.lang.String ) { return org.springframework.web.cors.CorsConfiguration . checkOrigin ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.web.cors.HttpMethod> < HttpMethod > java.util.List<org.springframework.web.cors.HttpMethod> ( CorsConfiguration org.springframework.web.cors.CorsConfiguration , HttpMethod org.springframework.web.cors.HttpMethod ) { return org.springframework.web.cors.CorsConfiguration . checkHttpMethod ( org.springframework.web.cors.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.cors.HttpMethod org.springframework.web.cors.HttpMethod ( ServerHttpRequest org.springframework.web.cors.ServerHttpRequest , boolean boolean ) { return ( boolean ? org.springframework.web.cors.ServerHttpRequest . getHeaders ( ) . getAccessControlRequestMethod ( ) : org.springframework.web.cors.ServerHttpRequest . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( CorsConfiguration org.springframework.web.cors.CorsConfiguration , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return org.springframework.web.cors.CorsConfiguration . checkHeaders ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ServerHttpRequest org.springframework.web.cors.ServerHttpRequest , boolean boolean ) { HttpHeaders org.springframework.web.cors.HttpHeaders = org.springframework.web.cors.ServerHttpRequest . getHeaders ( ) ; return ( boolean ? org.springframework.web.cors.HttpHeaders . getAccessControlRequestHeaders ( ) : new java.util.ArrayList <> ( org.springframework.web.cors.HttpHeaders . keySet ( ) ) ) ; }  <METHOD_END>
