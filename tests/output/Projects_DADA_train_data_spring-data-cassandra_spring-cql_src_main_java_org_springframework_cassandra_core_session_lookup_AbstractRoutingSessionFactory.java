<METHOD_START> public void void ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ) { this . java.util.Map<java.lang.Object,java.lang.Object> = java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( SessionFactoryLookup org.springframework.cassandra.core.session.lookup.SessionFactoryLookup ) { this . org.springframework.cassandra.core.session.lookup.SessionFactoryLookup = ( org.springframework.cassandra.core.session.lookup.SessionFactoryLookup != null ? org.springframework.cassandra.core.session.lookup.SessionFactoryLookup : new MapSessionFactoryLookup ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.session.lookup.Session org.springframework.cassandra.core.session.lookup.Session ( ) { return org.springframework.cassandra.core.session.lookup.SessionFactory ( ) . getSession ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . notNull ( this . java.util.Map<java.lang.Object,java.lang.Object> , STRING ) ; this . java.util.Map<java.lang.Object,org.springframework.cassandra.core.session.lookup.SessionFactory> = new java.util.HashMap <> ( this . java.util.Map<java.lang.Object,java.lang.Object> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : this . java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ; SessionFactory org.springframework.cassandra.core.session.lookup.SessionFactory = org.springframework.cassandra.core.session.lookup.SessionFactory ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ; this . java.util.Map<java.lang.Object,org.springframework.cassandra.core.session.lookup.SessionFactory> . put ( java.lang.Object , org.springframework.cassandra.core.session.lookup.SessionFactory ) ; } if ( this . java.lang.Object != null ) { this . org.springframework.cassandra.core.session.lookup.SessionFactory = org.springframework.cassandra.core.session.lookup.SessionFactory ( this . java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.core.session.lookup.SessionFactory org.springframework.cassandra.core.session.lookup.SessionFactory ( java.lang.Object java.lang.Object ) throws java.lang.IllegalArgumentException { if ( java.lang.Object instanceof SessionFactory ) { return ( SessionFactory ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.String ) { return this . org.springframework.cassandra.core.session.lookup.SessionFactoryLookup . getSessionFactory ( ( java.lang.String ) java.lang.Object ) ; } else { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.Object ) ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.core.session.lookup.SessionFactory org.springframework.cassandra.core.session.lookup.SessionFactory ( ) { Assert . notNull ( this . java.util.Map<java.lang.Object,org.springframework.cassandra.core.session.lookup.SessionFactory> , STRING ) ; java.lang.Object java.lang.Object = java.lang.Object ( ) ; SessionFactory org.springframework.cassandra.core.session.lookup.SessionFactory = this . java.util.Map<java.lang.Object,org.springframework.cassandra.core.session.lookup.SessionFactory> . get ( java.lang.Object ) ; if ( org.springframework.cassandra.core.session.lookup.SessionFactory == null && ( this . boolean || java.lang.Object == null ) ) { org.springframework.cassandra.core.session.lookup.SessionFactory = this . org.springframework.cassandra.core.session.lookup.SessionFactory ; } if ( org.springframework.cassandra.core.session.lookup.SessionFactory == null ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.Object ) ) ; } return org.springframework.cassandra.core.session.lookup.SessionFactory ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( )  <METHOD_END>
