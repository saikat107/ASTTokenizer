<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo = org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo ( STRING ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.lang.String = STRING ; org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo = org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo ( STRING ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.lang.String = STRING ; void ( ) ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.bind.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . afterPropertiesSet ( ) ; org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo = this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . getObject ( ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.lang.String = STRING ; void ( ) ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; CompositePropertySource org.springframework.boot.bind.CompositePropertySource = new CompositePropertySource ( STRING ) ; org.springframework.boot.bind.CompositePropertySource . addPropertySource ( new MapPropertySource ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ) ; org.springframework.boot.bind.MutablePropertySources . addFirst ( org.springframework.boot.bind.CompositePropertySource ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . afterPropertiesSet ( ) ; org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo = this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . getObject ( ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo ( final java.lang.String java.lang.String ) throws java.lang.Exception { void ( ) ; return org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo ( final java.lang.String java.lang.String ) throws java.lang.Exception { java.util.Properties java.util.Properties = PropertiesLoaderUtils . loadProperties ( new ByteArrayResource ( java.lang.String . byte[] ( ) ) ) ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.bind.MutablePropertySources . addFirst ( new PropertiesPropertySource ( STRING , java.util.Properties ) ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . afterPropertiesSet ( ) ; return this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . getObject ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException { this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> = new PropertiesConfigurationFactory <> ( org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo .class ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . setValidator ( this . org.springframework.boot.bind.Validator ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . setTargetName ( this . java.lang.String ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . setIgnoreUnknownFields ( this . boolean ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryMapTests.Foo> . setMessageSource ( new StaticMessageSource ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
