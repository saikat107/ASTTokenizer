<METHOD_START> public void ( SessionHolder org.springframework.orm.hibernate5.SessionHolder , SessionFactory org.springframework.orm.hibernate5.SessionFactory ) { this( org.springframework.orm.hibernate5.SessionHolder , org.springframework.orm.hibernate5.SessionFactory , false ); }  <METHOD_END>
<METHOD_START> public void ( SessionHolder org.springframework.orm.hibernate5.SessionHolder , SessionFactory org.springframework.orm.hibernate5.SessionFactory , boolean boolean ) { this . org.springframework.orm.hibernate5.SessionHolder = org.springframework.orm.hibernate5.SessionHolder ; this . org.springframework.orm.hibernate5.SessionFactory = org.springframework.orm.hibernate5.SessionFactory ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> private org.springframework.orm.hibernate5.Session org.springframework.orm.hibernate5.Session ( ) { return this . org.springframework.orm.hibernate5.SessionHolder . getSession ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return SessionFactoryUtils . SESSION_SYNCHRONIZATION_ORDER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { TransactionSynchronizationManager . unbindResource ( this . org.springframework.orm.hibernate5.SessionFactory ) ; org.springframework.orm.hibernate5.Session ( ) . disconnect ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { TransactionSynchronizationManager . bindResource ( this . org.springframework.orm.hibernate5.SessionFactory , this . org.springframework.orm.hibernate5.SessionHolder ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { SessionFactoryUtils . flush ( org.springframework.orm.hibernate5.Session ( ) , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) throws org.springframework.orm.hibernate5.DataAccessException { if ( ! boolean ) { Session org.springframework.orm.hibernate5.Session = org.springframework.orm.hibernate5.Session ( ) ; if ( ! FlushMode . MANUAL . equals ( SessionFactoryUtils . getFlushMode ( org.springframework.orm.hibernate5.Session ) ) ) { SessionFactoryUtils . flush ( org.springframework.orm.hibernate5.Session ( ) , true ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { try { Session org.springframework.orm.hibernate5.Session = this . org.springframework.orm.hibernate5.SessionHolder . getSession ( ) ; if ( this . org.springframework.orm.hibernate5.SessionHolder . getPreviousFlushMode ( ) != null ) { org.springframework.orm.hibernate5.Session . setFlushMode ( this . org.springframework.orm.hibernate5.SessionHolder . getPreviousFlushMode ( ) ) ; } org.springframework.orm.hibernate5.Session . disconnect ( ) ; } finally { if ( this . boolean ) { TransactionSynchronizationManager . unbindResource ( this . org.springframework.orm.hibernate5.SessionFactory ) ; this . boolean = false ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { try { if ( int != STATUS_COMMITTED ) { this . org.springframework.orm.hibernate5.SessionHolder . getSession ( ) . clear ( ) ; } } finally { this . org.springframework.orm.hibernate5.SessionHolder . setSynchronizedWithTransaction ( false ) ; if ( this . boolean ) { SessionFactoryUtils . closeSession ( this . org.springframework.orm.hibernate5.SessionHolder . getSession ( ) ) ; } } }  <METHOD_END>
