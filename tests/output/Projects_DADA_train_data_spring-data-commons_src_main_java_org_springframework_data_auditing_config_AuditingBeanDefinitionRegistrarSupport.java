<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.data.auditing.config.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.auditing.config.BeanDefinitionRegistry ) { Assert . notNull ( org.springframework.data.auditing.config.AnnotationMetadata , STRING ) ; Assert . notNull ( org.springframework.data.auditing.config.AnnotationMetadata , STRING ) ; AbstractBeanDefinition org.springframework.data.auditing.config.AbstractBeanDefinition = org.springframework.data.auditing.config.AbstractBeanDefinition ( org.springframework.data.auditing.config.BeanDefinitionRegistry , org.springframework.data.auditing.config.AuditingConfiguration ( org.springframework.data.auditing.config.AnnotationMetadata ) ) ; void ( org.springframework.data.auditing.config.AbstractBeanDefinition , org.springframework.data.auditing.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.auditing.config.AbstractBeanDefinition org.springframework.data.auditing.config.AbstractBeanDefinition ( BeanDefinitionRegistry org.springframework.data.auditing.config.BeanDefinitionRegistry , AuditingConfiguration org.springframework.data.auditing.config.AuditingConfiguration ) { Assert . notNull ( org.springframework.data.auditing.config.BeanDefinitionRegistry , STRING ) ; Assert . notNull ( org.springframework.data.auditing.config.AuditingConfiguration , STRING ) ; AbstractBeanDefinition org.springframework.data.auditing.config.AbstractBeanDefinition = org.springframework.data.auditing.config.BeanDefinitionBuilder ( org.springframework.data.auditing.config.AuditingConfiguration ) . getBeanDefinition ( ) ; org.springframework.data.auditing.config.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String ( ) , org.springframework.data.auditing.config.AbstractBeanDefinition ) ; return org.springframework.data.auditing.config.AbstractBeanDefinition ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.auditing.config.BeanDefinitionBuilder org.springframework.data.auditing.config.BeanDefinitionBuilder ( AuditingConfiguration org.springframework.data.auditing.config.AuditingConfiguration ) { Assert . notNull ( org.springframework.data.auditing.config.AuditingConfiguration , STRING ) ; return org.springframework.data.auditing.config.BeanDefinitionBuilder ( org.springframework.data.auditing.config.AuditingConfiguration , BeanDefinitionBuilder . rootBeanDefinition ( AuditingHandler .class ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.auditing.config.BeanDefinitionBuilder org.springframework.data.auditing.config.BeanDefinitionBuilder ( AuditingConfiguration org.springframework.data.auditing.config.AuditingConfiguration , BeanDefinitionBuilder org.springframework.data.auditing.config.BeanDefinitionBuilder ) { if ( StringUtils . hasText ( org.springframework.data.auditing.config.AuditingConfiguration . getAuditorAwareRef ( ) ) ) { org.springframework.data.auditing.config.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , org.springframework.data.auditing.config.BeanDefinition ( org.springframework.data.auditing.config.AuditingConfiguration . getAuditorAwareRef ( ) ) ) ; } else { org.springframework.data.auditing.config.BeanDefinitionBuilder . setAutowireMode ( AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE ) ; } org.springframework.data.auditing.config.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , org.springframework.data.auditing.config.AuditingConfiguration . isSetDates ( ) ) ; org.springframework.data.auditing.config.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , org.springframework.data.auditing.config.AuditingConfiguration . isModifyOnCreate ( ) ) ; if ( StringUtils . hasText ( org.springframework.data.auditing.config.AuditingConfiguration . getDateTimeProviderRef ( ) ) ) { org.springframework.data.auditing.config.BeanDefinitionBuilder . addPropertyReference ( java.lang.String , org.springframework.data.auditing.config.AuditingConfiguration . getDateTimeProviderRef ( ) ) ; } else { org.springframework.data.auditing.config.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , CurrentDateTimeProvider . INSTANCE ) ; } org.springframework.data.auditing.config.BeanDefinitionBuilder . setRole ( AbstractBeanDefinition . ROLE_INFRASTRUCTURE ) ; return org.springframework.data.auditing.config.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.auditing.config.AuditingConfiguration org.springframework.data.auditing.config.AuditingConfiguration ( AnnotationMetadata org.springframework.data.auditing.config.AnnotationMetadata ) { return new AnnotationAuditingConfiguration ( org.springframework.data.auditing.config.AnnotationMetadata , java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( BeanDefinition org.springframework.data.auditing.config.BeanDefinition , BeanDefinitionRegistry org.springframework.data.auditing.config.BeanDefinitionRegistry );  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> protected void void ( AbstractBeanDefinition org.springframework.data.auditing.config.AbstractBeanDefinition , java.lang.String java.lang.String , BeanDefinitionRegistry org.springframework.data.auditing.config.BeanDefinitionRegistry ) { org.springframework.data.auditing.config.AbstractBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.data.auditing.config.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.data.auditing.config.AbstractBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.auditing.config.BeanDefinition org.springframework.data.auditing.config.BeanDefinition ( java.lang.String java.lang.String ) { BeanDefinitionBuilder org.springframework.data.auditing.config.BeanDefinitionBuilder = rootBeanDefinition ( LazyInitTargetSource .class ) ; org.springframework.data.auditing.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; BeanDefinitionBuilder org.springframework.data.auditing.config.BeanDefinitionBuilder = rootBeanDefinition ( ProxyFactoryBean .class ) ; org.springframework.data.auditing.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.auditing.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; return org.springframework.data.auditing.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
