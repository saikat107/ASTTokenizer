<METHOD_START> public void ( java.util.Set<org.springframework.data.jpa.mapping.Metamodel> < Metamodel > java.util.Set<org.springframework.data.jpa.mapping.Metamodel> ) { Assert . notNull ( java.util.Set<org.springframework.data.jpa.mapping.Metamodel> , STRING ) ; Assert . notEmpty ( java.util.Set<org.springframework.data.jpa.mapping.Metamodel> , STRING ) ; this . java.util.Set<org.springframework.data.jpa.mapping.Metamodel> = java.util.Set<org.springframework.data.jpa.mapping.Metamodel> ; this . org.springframework.data.jpa.mapping.PersistenceProvider = PersistenceProvider . fromMetamodel ( java.util.Set<org.springframework.data.jpa.mapping.Metamodel> . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?> < ? > org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?> ( TypeInformation < T > org.springframework.data.jpa.mapping.TypeInformation<T> ) { return new JpaPersistentEntityImpl < T > ( org.springframework.data.jpa.mapping.TypeInformation<T> , org.springframework.data.jpa.mapping.PersistenceProvider ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.mapping.JpaPersistentProperty org.springframework.data.jpa.mapping.JpaPersistentProperty ( Property org.springframework.data.jpa.mapping.Property , JpaPersistentEntityImpl < ? > org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?> , SimpleTypeHolder org.springframework.data.jpa.mapping.SimpleTypeHolder ) { Metamodel org.springframework.data.jpa.mapping.Metamodel = org.springframework.data.jpa.mapping.Metamodel ( org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> . getType ( ) ) ; return new JpaPersistentPropertyImpl ( org.springframework.data.jpa.mapping.Metamodel , org.springframework.data.jpa.mapping.Property , org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> , org.springframework.data.jpa.mapping.SimpleTypeHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( TypeInformation < ? > org.springframework.data.jpa.mapping.TypeInformation<?> ) { return org.springframework.data.jpa.mapping.Metamodel ( org.springframework.data.jpa.mapping.TypeInformation<> . getType ( ) ) != null ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.mapping.Metamodel org.springframework.data.jpa.mapping.Metamodel ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( Metamodel org.springframework.data.jpa.mapping.Metamodel : java.util.Set<org.springframework.data.jpa.mapping.Metamodel> ) { try { org.springframework.data.jpa.mapping.Metamodel . managedType ( java.lang.Class<> ) ; return org.springframework.data.jpa.mapping.Metamodel ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { for ( ManagedType < ? > org.springframework.data.jpa.mapping.ManagedType<?> : org.springframework.data.jpa.mapping.Metamodel . getManagedTypes ( ) ) { if ( java.lang.Class<> . boolean ( org.springframework.data.jpa.mapping.ManagedType<> . getJavaType ( ) ) ) { return org.springframework.data.jpa.mapping.Metamodel ; } } } } return null ; }  <METHOD_END>
