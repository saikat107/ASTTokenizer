<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.scripting.config.jsr223.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.scripting.config.jsr223.QueueChannel . setBeanName ( STRING ) ; this . org.springframework.integration.scripting.config.jsr223.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.scripting.config.jsr223.QueueChannel ) . build ( ) ) ; assertEquals ( STRING , org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; this . org.springframework.integration.scripting.config.jsr223.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.scripting.config.jsr223.QueueChannel ) . build ( ) ) ; assertEquals ( STRING , org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { super. void ( new org.springframework.integration.scripting.config.jsr223.Jsr223RefreshTests.CycleResource ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.IllegalStateException { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) java.io.IOException { return - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { if ( ++ int > java.lang.String[] . int - NUMBER ) { int = NUMBER ; } return new java.io.ByteArrayInputStream ( java.lang.String[] [ int ] . byte[] ( ) ) ; }  <METHOD_END>
