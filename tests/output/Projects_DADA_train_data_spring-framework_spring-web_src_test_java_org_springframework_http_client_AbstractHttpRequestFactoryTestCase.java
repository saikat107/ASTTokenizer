<METHOD_START> @ Before public final void void ( ) java.lang.Exception { org.springframework.http.client.ClientHttpRequestFactory = org.springframework.http.client.ClientHttpRequestFactory ( ) ; if ( org.springframework.http.client.ClientHttpRequestFactory instanceof InitializingBean ) { ( ( InitializingBean ) org.springframework.http.client.ClientHttpRequestFactory ) . afterPropertiesSet ( ) ; } }  <METHOD_END>
<METHOD_START> @ After public final void void ( ) java.lang.Exception { if ( org.springframework.http.client.ClientHttpRequestFactory instanceof DisposableBean ) { ( ( DisposableBean ) org.springframework.http.client.ClientHttpRequestFactory ) . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.http.client.ClientHttpRequestFactory org.springframework.http.client.ClientHttpRequestFactory ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( baseUrl + STRING ) ; ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.ClientHttpRequestFactory . createRequest ( java.net.URI , HttpMethod . GET ) ; assertEquals ( STRING , HttpMethod . GET , org.springframework.http.client.ClientHttpRequest . getMethod ( ) ) ; assertEquals ( STRING , java.net.URI , org.springframework.http.client.ClientHttpRequest . getURI ( ) ) ; ClientHttpResponse org.springframework.http.client.ClientHttpResponse = org.springframework.http.client.ClientHttpRequest . execute ( ) ; try { assertEquals ( STRING , HttpStatus . NOT_FOUND , org.springframework.http.client.ClientHttpResponse . getStatusCode ( ) ) ; } finally { org.springframework.http.client.ClientHttpResponse . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( baseUrl + STRING ) , HttpMethod . PUT ) ; assertEquals ( STRING , HttpMethod . PUT , org.springframework.http.client.ClientHttpRequest . getMethod ( ) ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.http.client.ClientHttpRequest . getHeaders ( ) . add ( java.lang.String , java.lang.String ) ; java.lang.String java.lang.String = STRING ; org.springframework.http.client.ClientHttpRequest . getHeaders ( ) . add ( java.lang.String , java.lang.String ) ; final byte [] byte[] = STRING . byte[] ( STRING ) ; org.springframework.http.client.ClientHttpRequest . getHeaders ( ) . setContentLength ( byte[] . int ) ; if ( org.springframework.http.client.ClientHttpRequest instanceof StreamingHttpOutputMessage ) { StreamingHttpOutputMessage org.springframework.http.client.StreamingHttpOutputMessage = ( StreamingHttpOutputMessage ) org.springframework.http.client.ClientHttpRequest ; org.springframework.http.client.StreamingHttpOutputMessage . setBody ( new StreamingHttpOutputMessage . StreamingHttpOutputMessage ( ) { @ java.lang.Override public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { StreamUtils . copy ( byte[] , java.io.OutputStream ) ; } } ) ; } else { StreamUtils . copy ( byte[] , org.springframework.http.client.ClientHttpRequest . getBody ( ) ) ; } ClientHttpResponse org.springframework.http.client.ClientHttpResponse = org.springframework.http.client.ClientHttpRequest . execute ( ) ; try { assertEquals ( STRING , HttpStatus . OK , org.springframework.http.client.ClientHttpResponse . getStatusCode ( ) ) ; assertTrue ( STRING , org.springframework.http.client.ClientHttpResponse . getHeaders ( ) . containsKey ( java.lang.String ) ) ; assertEquals ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String , java.lang.String ) , org.springframework.http.client.ClientHttpResponse . getHeaders ( ) . get ( java.lang.String ) ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( org.springframework.http.client.ClientHttpResponse . getBody ( ) ) ; assertTrue ( STRING , java.util.Arrays . boolean ( byte[] , byte[] ) ) ; } finally { org.springframework.http.client.ClientHttpResponse . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { StreamUtils . copy ( byte[] , java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( baseUrl + STRING ) , HttpMethod . POST ) ; final byte [] byte[] = STRING . byte[] ( STRING ) ; if ( org.springframework.http.client.ClientHttpRequest instanceof StreamingHttpOutputMessage ) { StreamingHttpOutputMessage org.springframework.http.client.StreamingHttpOutputMessage = ( StreamingHttpOutputMessage ) org.springframework.http.client.ClientHttpRequest ; org.springframework.http.client.StreamingHttpOutputMessage . setBody ( new StreamingHttpOutputMessage . StreamingHttpOutputMessage ( ) { @ java.lang.Override public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { StreamUtils . copy ( byte[] , java.io.OutputStream ) ; java.io.OutputStream . void ( ) ; java.io.OutputStream . void ( ) ; } } ) ; } else { StreamUtils . copy ( byte[] , org.springframework.http.client.ClientHttpRequest . getBody ( ) ) ; } org.springframework.http.client.ClientHttpRequest . execute ( ) ; FileCopyUtils . copy ( byte[] , org.springframework.http.client.ClientHttpRequest . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { StreamUtils . copy ( byte[] , java.io.OutputStream ) ; java.io.OutputStream . void ( ) ; java.io.OutputStream . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) java.lang.Exception { ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( baseUrl + STRING ) , HttpMethod . POST ) ; org.springframework.http.client.ClientHttpRequest . getHeaders ( ) . add ( STRING , STRING ) ; byte [] byte[] = STRING . byte[] ( STRING ) ; FileCopyUtils . copy ( byte[] , org.springframework.http.client.ClientHttpRequest . getBody ( ) ) ; ClientHttpResponse org.springframework.http.client.ClientHttpResponse = org.springframework.http.client.ClientHttpRequest . execute ( ) ; try { org.springframework.http.client.ClientHttpRequest . getHeaders ( ) . add ( STRING , STRING ) ; } finally { org.springframework.http.client.ClientHttpResponse . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , HttpMethod . GET ) ; void ( STRING , HttpMethod . HEAD ) ; void ( STRING , HttpMethod . POST ) ; void ( STRING , HttpMethod . PUT ) ; void ( STRING , HttpMethod . OPTIONS ) ; void ( STRING , HttpMethod . DELETE ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , HttpMethod org.springframework.http.client.HttpMethod ) throws java.lang.Exception { ClientHttpResponse org.springframework.http.client.ClientHttpResponse = null ; try { ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( baseUrl + STRING + java.lang.String ) , org.springframework.http.client.HttpMethod ) ; if ( org.springframework.http.client.HttpMethod == HttpMethod . POST || org.springframework.http.client.HttpMethod == HttpMethod . PUT || org.springframework.http.client.HttpMethod == HttpMethod . PATCH ) { try { org.springframework.http.client.ClientHttpRequest . getBody ( ) . write ( NUMBER ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } } org.springframework.http.client.ClientHttpResponse = org.springframework.http.client.ClientHttpRequest . execute ( ) ; assertEquals ( STRING , HttpStatus . OK , org.springframework.http.client.ClientHttpResponse . getStatusCode ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( java.util.Locale . java.util.Locale ) , org.springframework.http.client.ClientHttpRequest . getMethod ( ) . name ( ) ) ; } finally { if ( org.springframework.http.client.ClientHttpResponse != null ) { org.springframework.http.client.ClientHttpResponse . close ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( baseUrl + STRING ) ; ClientHttpRequest org.springframework.http.client.ClientHttpRequest = org.springframework.http.client.ClientHttpRequestFactory . createRequest ( java.net.URI , HttpMethod . GET ) ; ClientHttpResponse org.springframework.http.client.ClientHttpResponse = org.springframework.http.client.ClientHttpRequest . execute ( ) ; try { assertEquals ( STRING , HttpStatus . OK , org.springframework.http.client.ClientHttpResponse . getStatusCode ( ) ) ; } finally { org.springframework.http.client.ClientHttpResponse . close ( ) ; } }  <METHOD_END>
