<METHOD_START> @ Before public void void ( ) { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; this . org.springframework.messaging.simp.user.SimpUserRegistry = mock ( SimpUserRegistry .class ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUser ( STRING ) ) . thenReturn ( org.springframework.messaging.simp.user.TestSimpUser ) ; this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver = new DefaultUserDestinationResolver ( this . org.springframework.messaging.simp.user.SimpUserRegistry ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPrincipal org.springframework.messaging.simp.user.TestPrincipal = new TestPrincipal ( STRING ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . SUBSCRIBE , org.springframework.messaging.simp.user.TestPrincipal , STRING , java.lang.String ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.user.UserDestinationResult . getSourceDestination ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . iterator ( ) . next ( ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.user.UserDestinationResult . getSubscribeDestination ( ) ) ; assertEquals ( org.springframework.messaging.simp.user.TestPrincipal . getName ( ) , org.springframework.messaging.simp.user.UserDestinationResult . getUser ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AntPathMatcher org.springframework.messaging.simp.user.AntPathMatcher = new AntPathMatcher ( ) ; org.springframework.messaging.simp.user.AntPathMatcher . setPathSeparator ( STRING ) ; this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . setPathMatcher ( org.springframework.messaging.simp.user.AntPathMatcher ) ; TestPrincipal org.springframework.messaging.simp.user.TestPrincipal = new TestPrincipal ( STRING ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . SUBSCRIBE , org.springframework.messaging.simp.user.TestPrincipal , STRING , java.lang.String ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . iterator ( ) . next ( ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.user.UserDestinationResult . getSubscribeDestination ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) , new TestSimpSession ( STRING ) ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUser ( STRING ) ) . thenReturn ( org.springframework.messaging.simp.user.TestSimpUser ) ; TestPrincipal org.springframework.messaging.simp.user.TestPrincipal = new TestPrincipal ( STRING ) ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . SUBSCRIBE , org.springframework.messaging.simp.user.TestPrincipal , STRING , STRING ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . SUBSCRIBE , null , STRING , java.lang.String ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.user.UserDestinationResult . getSourceDestination ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . size ( ) ) ; assertEquals ( STRING + STRING , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . iterator ( ) . next ( ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.user.UserDestinationResult . getSubscribeDestination ( ) ) ; assertNull ( org.springframework.messaging.simp.user.UserDestinationResult . getUser ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPrincipal org.springframework.messaging.simp.user.TestPrincipal = new TestPrincipal ( STRING ) ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . UNSUBSCRIBE , org.springframework.messaging.simp.user.TestPrincipal , STRING , STRING ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPrincipal org.springframework.messaging.simp.user.TestPrincipal = new TestPrincipal ( STRING ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , org.springframework.messaging.simp.user.TestPrincipal , STRING , java.lang.String ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.user.UserDestinationResult . getSourceDestination ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . iterator ( ) . next ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getSubscribeDestination ( ) ) ; assertEquals ( org.springframework.messaging.simp.user.TestPrincipal . getName ( ) , org.springframework.messaging.simp.user.UserDestinationResult . getUser ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AntPathMatcher org.springframework.messaging.simp.user.AntPathMatcher = new AntPathMatcher ( ) ; org.springframework.messaging.simp.user.AntPathMatcher . setPathSeparator ( STRING ) ; this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . setPathMatcher ( org.springframework.messaging.simp.user.AntPathMatcher ) ; TestPrincipal org.springframework.messaging.simp.user.TestPrincipal = new TestPrincipal ( STRING ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , org.springframework.messaging.simp.user.TestPrincipal , STRING , java.lang.String ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . iterator ( ) . next ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getSubscribeDestination ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( STRING ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUser ( STRING ) ) . thenReturn ( org.springframework.messaging.simp.user.TestSimpUser ) ; TestPrincipal org.springframework.messaging.simp.user.TestPrincipal = new TestPrincipal ( STRING ) ; TestPrincipal org.springframework.messaging.simp.user.TestPrincipal = new TestPrincipal ( STRING ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , org.springframework.messaging.simp.user.TestPrincipal , STRING , java.lang.String ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.user.UserDestinationResult . getSourceDestination ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . iterator ( ) . next ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getSubscribeDestination ( ) ) ; assertEquals ( org.springframework.messaging.simp.user.TestPrincipal . getName ( ) , org.springframework.messaging.simp.user.UserDestinationResult . getUser ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; TestSimpUser org.springframework.messaging.simp.user.TestSimpUser = new TestSimpUser ( java.lang.String ) ; org.springframework.messaging.simp.user.TestSimpUser . addSessions ( new TestSimpSession ( STRING ) ) ; when ( this . org.springframework.messaging.simp.user.SimpUserRegistry . getUser ( java.lang.String ) ) . thenReturn ( org.springframework.messaging.simp.user.TestSimpUser ) ; java.lang.String java.lang.String = STRING + StringUtils . replace ( java.lang.String , STRING , STRING ) + STRING ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , new TestPrincipal ( STRING ) , null , java.lang.String ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING + STRING + STRING ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , null , STRING , java.lang.String ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.user.UserDestinationResult . getSourceDestination ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . iterator ( ) . next ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.user.UserDestinationResult . getSubscribeDestination ( ) ) ; assertNull ( org.springframework.messaging.simp.user.UserDestinationResult . getUser ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestPrincipal org.springframework.messaging.simp.user.TestPrincipal = new TestPrincipal ( STRING ) ; Message < ? > org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , org.springframework.messaging.simp.user.TestPrincipal , STRING , null ) ; UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertNull ( org.springframework.messaging.simp.user.UserDestinationResult ) ; org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . MESSAGE , org.springframework.messaging.simp.user.TestPrincipal , STRING , STRING ) ; org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertNull ( org.springframework.messaging.simp.user.UserDestinationResult ) ; org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . SUBSCRIBE , org.springframework.messaging.simp.user.TestPrincipal , STRING , STRING ) ; org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertNull ( org.springframework.messaging.simp.user.UserDestinationResult ) ; org.springframework.messaging.simp.user.Message<?> = org.springframework.messaging.simp.user.Message<?> ( SimpMessageType . CONNECT , org.springframework.messaging.simp.user.TestPrincipal , STRING , STRING ) ; org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.DefaultUserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; assertNull ( org.springframework.messaging.simp.user.UserDestinationResult ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.user.Message<?> < ? > org.springframework.messaging.simp.user.Message<?> ( SimpMessageType org.springframework.messaging.simp.user.SimpMessageType , java.security.Principal java.security.Principal , java.lang.String java.lang.String , java.lang.String java.lang.String ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.user.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( org.springframework.messaging.simp.user.SimpMessageType ) ; if ( java.lang.String != null ) { org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; } if ( java.security.Principal != null ) { org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setUser ( java.security.Principal ) ; } if ( java.lang.String != null ) { org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; } return MessageBuilder . withPayload ( new byte [ NUMBER ] ) . setHeaders ( org.springframework.messaging.simp.user.SimpMessageHeaderAccessor ) . build ( ) ; }  <METHOD_END>
