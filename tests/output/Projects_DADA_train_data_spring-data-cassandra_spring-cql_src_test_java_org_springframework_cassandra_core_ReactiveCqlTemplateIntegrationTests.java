<METHOD_START> @ Before public void void ( ) { org.springframework.cassandra.core.ReactiveSession = new DefaultBridgedReactiveSession ( getSession ( ) , Schedulers . elastic ( ) ) ; if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { getSession ( ) . execute ( STRING ) ; } else { getSession ( ) . execute ( STRING ) ; } getSession ( ) . execute ( STRING ) ; org.springframework.cassandra.core.ReactiveCqlTemplate = new ReactiveCqlTemplate ( new DefaultReactiveSessionFactory ( org.springframework.cassandra.core.ReactiveSession ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING ) ) . expectNext ( true ) . verifyComplete ( ) ; assertThat ( getSession ( ) . execute ( STRING ) . one ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , java.lang.String .class ) ) . expectNext ( STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . queryForMap ( STRING ) ) . consumeNextWith ( actual -> { assertThat ( actual ) . containsEntry ( STRING , STRING ) . containsEntry ( STRING , STRING ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( QueryBuilder . delete ( ) . from ( STRING ) . where ( QueryBuilder . eq ( STRING , STRING ) ) ) ) . expectNext ( true ) . verifyComplete ( ) ; assertThat ( getSession ( ) . execute ( STRING ) . one ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( QueryBuilder . select ( STRING ) . from ( STRING ) , java.lang.String .class ) ) . expectNext ( STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . queryForMap ( QueryBuilder . select ( ) . from ( STRING ) ) ) . consumeNextWith ( actual -> { assertThat ( actual ) . containsEntry ( STRING , STRING ) . containsEntry ( STRING , STRING ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING , STRING ) ) . expectNext ( true ) . verifyComplete ( ) ; assertThat ( getSession ( ) . execute ( STRING ) . one ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , java.lang.String .class , STRING ) ) . expectNext ( STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . queryForMap ( STRING , STRING ) ) . consumeNextWith ( actual -> { assertThat ( actual ) . containsEntry ( STRING , STRING ) . containsEntry ( STRING , STRING ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
