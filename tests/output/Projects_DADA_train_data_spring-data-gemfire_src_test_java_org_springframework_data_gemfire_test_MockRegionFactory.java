<METHOD_START> public void ( StubCache org.springframework.data.gemfire.test.StubCache ) { this . org.springframework.data.gemfire.test.StubCache = org.springframework.data.gemfire.test.StubCache ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.test.RegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> ( ) { return org.springframework.data.gemfire.test.RegionFactory<K,V> ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING , STRING } ) public org.springframework.data.gemfire.test.RegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> ( RegionAttributes < K , V > org.springframework.data.gemfire.test.RegionAttributes<K,V> ) { attributesFactory = ( org.springframework.data.gemfire.test.RegionAttributes<K,V> != null ? new org . org.apache . org.apache . org.apache . org.apache < K , V > ( attributes ) : new org . org.apache . org.apache . org.apache . org.apache < K , V > ( ) ) ; if ( org.springframework.data.gemfire.test.RegionAttributes<K,V> != null ) { attributesFactory . setLockGrantor ( org.springframework.data.gemfire.test.RegionAttributes<K,V> . isLockGrantor ( ) ) ; } final RegionFactory < K , V > org.springframework.data.gemfire.test.RegionFactory<K,V> = mock ( RegionFactory .class ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( RegionFactory .class , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; ReflectionUtils . setField ( java.lang.reflect.Field , org.springframework.data.gemfire.test.RegionFactory<K,V> , attributesFactory ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . create ( anyString ( ) ) ) . thenAnswer ( new Answer < Region > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; Region org.springframework.data.gemfire.test.Region = org.springframework.data.gemfire.test.Region ( java.lang.String ) ; org.springframework.data.gemfire.test.StubCache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; return org.springframework.data.gemfire.test.Region ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . createSubregion ( any ( Region .class ) , anyString ( ) ) ) . thenAnswer ( new Answer < Region > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { Region org.springframework.data.gemfire.test.Region = ( Region ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = org.springframework.data.gemfire.test.Region . getFullPath ( ) ; assert java.lang.String != null : STRING ; java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String + STRING + java.lang.String : STRING + java.lang.String + STRING + java.lang.String ) ; Region org.springframework.data.gemfire.test.Region = org.springframework.data.gemfire.test.Region ( java.lang.String ) ; org.springframework.data.gemfire.test.StubCache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; org.springframework.data.gemfire.test.StubCache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; return org.springframework.data.gemfire.test.Region ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setCacheLoader ( any ( CacheLoader .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CacheLoader org.springframework.data.gemfire.test.CacheLoader = ( CacheLoader ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setCacheLoader ( org.springframework.data.gemfire.test.CacheLoader ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setCacheWriter ( any ( CacheWriter .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CacheWriter org.springframework.data.gemfire.test.CacheWriter = ( CacheWriter ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setCacheWriter ( org.springframework.data.gemfire.test.CacheWriter ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setCloningEnabled ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setCloningEnabled ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setConcurrencyChecksEnabled ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setConcurrencyChecksEnabled ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setConcurrencyLevel ( anyInt ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { int int = ( java.lang.Integer ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setConcurrencyLevel ( int ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setDataPolicy ( any ( DataPolicy .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { DataPolicy org.springframework.data.gemfire.test.DataPolicy = ( DataPolicy ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDataPolicy ( org.springframework.data.gemfire.test.DataPolicy ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setDiskDirs ( any ( java.io.File [] .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.io.File [] java.io.File[] = ( java.io.File [] ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDiskDirs ( java.io.File[] ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setDiskDirsAndSizes ( any ( java.io.File [] .class ) , any ( int [] .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.io.File [] java.io.File[] = ( java.io.File [] ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; int [] int[] = ( int [] ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDiskDirsAndSizes ( java.io.File[] , int[] ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setDiskStoreName ( anyString ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDiskStoreName ( java.lang.String ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setDiskWriteAttributes ( any ( org . org.apache . org.apache . org.apache . org.apache .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { org . org.apache . org.apache . org.apache . org.apache org.apache.geode.cache.DiskWriteAttributes = ( org . org.apache . org.apache . org.apache . org.apache ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDiskWriteAttributes ( org.apache.geode.cache.DiskWriteAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setDiskSynchronous ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDiskSynchronous ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setEarlyAck ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEarlyAck ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setEnableAsyncConflation ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEnableAsyncConflation ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setEnableSubscriptionConflation ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEnableSubscriptionConflation ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setEntryIdleTimeout ( any ( ExpirationAttributes .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = ( ExpirationAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEntryIdleTimeout ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setCustomEntryIdleTimeout ( any ( CustomExpiry .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry org.springframework.data.gemfire.test.CustomExpiry = ( CustomExpiry ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setCustomEntryIdleTimeout ( org.springframework.data.gemfire.test.CustomExpiry ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setEntryTimeToLive ( any ( ExpirationAttributes .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = ( ExpirationAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEntryTimeToLive ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setCustomEntryTimeToLive ( any ( CustomExpiry .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry org.springframework.data.gemfire.test.CustomExpiry = ( CustomExpiry ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setCustomEntryTimeToLive ( org.springframework.data.gemfire.test.CustomExpiry ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setEvictionAttributes ( any ( EvictionAttributes .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { EvictionAttributes org.springframework.data.gemfire.test.EvictionAttributes = ( EvictionAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEvictionAttributes ( org.springframework.data.gemfire.test.EvictionAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setIgnoreJTA ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setIgnoreJTA ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setIndexMaintenanceSynchronous ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setIndexMaintenanceSynchronous ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setInitialCapacity ( anyInt ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { int int = ( java.lang.Integer ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setInitialCapacity ( int ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setKeyConstraint ( any ( java.lang.Class .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.Class java.lang.Class = ( java.lang.Class ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setKeyConstraint ( java.lang.Class ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setLoadFactor ( anyFloat ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { float float = ( java.lang.Float ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setLoadFactor ( float ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setLockGrantor ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setLockGrantor ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setMembershipAttributes ( any ( MembershipAttributes .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { MembershipAttributes org.springframework.data.gemfire.test.MembershipAttributes = ( MembershipAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setMembershipAttributes ( org.springframework.data.gemfire.test.MembershipAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setMulticastEnabled ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setMulticastEnabled ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setPartitionAttributes ( any ( PartitionAttributes .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { PartitionAttributes org.springframework.data.gemfire.test.PartitionAttributes = ( PartitionAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setPartitionAttributes ( org.springframework.data.gemfire.test.PartitionAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setPoolName ( anyString ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setPoolName ( java.lang.String ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setRegionIdleTimeout ( any ( ExpirationAttributes .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = ( ExpirationAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setRegionIdleTimeout ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setRegionTimeToLive ( any ( ExpirationAttributes .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = ( ExpirationAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setRegionTimeToLive ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setScope ( any ( Scope .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { Scope org.springframework.data.gemfire.test.Scope = ( Scope ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setScope ( org.springframework.data.gemfire.test.Scope ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setStatisticsEnabled ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setStatisticsEnabled ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setSubscriptionAttributes ( any ( SubscriptionAttributes .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { SubscriptionAttributes org.springframework.data.gemfire.test.SubscriptionAttributes = ( SubscriptionAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setSubscriptionAttributes ( org.springframework.data.gemfire.test.SubscriptionAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . setValueConstraint ( any ( java.lang.Class .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.Class java.lang.Class = ( java.lang.Class ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setValueConstraint ( java.lang.Class ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . addAsyncEventQueueId ( anyString ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . addAsyncEventQueueId ( java.lang.String ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . addCacheListener ( any ( CacheListener .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CacheListener org.springframework.data.gemfire.test.CacheListener = ( CacheListener ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . addCacheListener ( org.springframework.data.gemfire.test.CacheListener ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.RegionFactory<K,V> . addGatewaySenderId ( anyString ( ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . addGatewaySenderId ( java.lang.String ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; } } ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; Region org.springframework.data.gemfire.test.Region = org.springframework.data.gemfire.test.Region ( java.lang.String ) ; org.springframework.data.gemfire.test.StubCache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; return org.springframework.data.gemfire.test.Region ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { Region org.springframework.data.gemfire.test.Region = ( Region ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = org.springframework.data.gemfire.test.Region . getFullPath ( ) ; assert java.lang.String != null : STRING ; java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String + STRING + java.lang.String : STRING + java.lang.String + STRING + java.lang.String ) ; Region org.springframework.data.gemfire.test.Region = org.springframework.data.gemfire.test.Region ( java.lang.String ) ; org.springframework.data.gemfire.test.StubCache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; org.springframework.data.gemfire.test.StubCache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; return org.springframework.data.gemfire.test.Region ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CacheLoader org.springframework.data.gemfire.test.CacheLoader = ( CacheLoader ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setCacheLoader ( org.springframework.data.gemfire.test.CacheLoader ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CacheWriter org.springframework.data.gemfire.test.CacheWriter = ( CacheWriter ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setCacheWriter ( org.springframework.data.gemfire.test.CacheWriter ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setCloningEnabled ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setConcurrencyChecksEnabled ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { int int = ( java.lang.Integer ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setConcurrencyLevel ( int ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { DataPolicy org.springframework.data.gemfire.test.DataPolicy = ( DataPolicy ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDataPolicy ( org.springframework.data.gemfire.test.DataPolicy ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.io.File [] java.io.File[] = ( java.io.File [] ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDiskDirs ( java.io.File[] ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.io.File [] java.io.File[] = ( java.io.File [] ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; int [] int[] = ( int [] ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDiskDirsAndSizes ( java.io.File[] , int[] ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDiskStoreName ( java.lang.String ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { org . org.apache . org.apache . org.apache . org.apache org.apache.geode.cache.DiskWriteAttributes = ( org . org.apache . org.apache . org.apache . org.apache ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDiskWriteAttributes ( org.apache.geode.cache.DiskWriteAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setDiskSynchronous ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEarlyAck ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEnableAsyncConflation ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEnableSubscriptionConflation ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = ( ExpirationAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEntryIdleTimeout ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry org.springframework.data.gemfire.test.CustomExpiry = ( CustomExpiry ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setCustomEntryIdleTimeout ( org.springframework.data.gemfire.test.CustomExpiry ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = ( ExpirationAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEntryTimeToLive ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry org.springframework.data.gemfire.test.CustomExpiry = ( CustomExpiry ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setCustomEntryTimeToLive ( org.springframework.data.gemfire.test.CustomExpiry ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { EvictionAttributes org.springframework.data.gemfire.test.EvictionAttributes = ( EvictionAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setEvictionAttributes ( org.springframework.data.gemfire.test.EvictionAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setIgnoreJTA ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setIndexMaintenanceSynchronous ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { int int = ( java.lang.Integer ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setInitialCapacity ( int ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.Class java.lang.Class = ( java.lang.Class ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setKeyConstraint ( java.lang.Class ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { float float = ( java.lang.Float ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setLoadFactor ( float ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setLockGrantor ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { MembershipAttributes org.springframework.data.gemfire.test.MembershipAttributes = ( MembershipAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setMembershipAttributes ( org.springframework.data.gemfire.test.MembershipAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setMulticastEnabled ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { PartitionAttributes org.springframework.data.gemfire.test.PartitionAttributes = ( PartitionAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setPartitionAttributes ( org.springframework.data.gemfire.test.PartitionAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setPoolName ( java.lang.String ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = ( ExpirationAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setRegionIdleTimeout ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = ( ExpirationAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setRegionTimeToLive ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { Scope org.springframework.data.gemfire.test.Scope = ( Scope ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setScope ( org.springframework.data.gemfire.test.Scope ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { boolean boolean = ( java.lang.Boolean ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setStatisticsEnabled ( boolean ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { SubscriptionAttributes org.springframework.data.gemfire.test.SubscriptionAttributes = ( SubscriptionAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setSubscriptionAttributes ( org.springframework.data.gemfire.test.SubscriptionAttributes ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.Class java.lang.Class = ( java.lang.Class ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . setValueConstraint ( java.lang.Class ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . addAsyncEventQueueId ( java.lang.String ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CacheListener org.springframework.data.gemfire.test.CacheListener = ( CacheListener ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . addCacheListener ( org.springframework.data.gemfire.test.CacheListener ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . addGatewaySenderId ( java.lang.String ) ; return org.springframework.data.gemfire.test.RegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.test.RegionFactory org.springframework.data.gemfire.test.RegionFactory ( ) { return org.springframework.data.gemfire.test.RegionFactory<K,V> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( java.lang.String java.lang.String ) { RegionAttributes < K , V > org.springframework.data.gemfire.test.RegionAttributes<K,V> = attributesFactory . create ( ) ; Region org.springframework.data.gemfire.test.Region = mock ( Region .class ) ; when ( org.springframework.data.gemfire.test.Region . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.test.RegionAttributes<K,V> ) ; java.lang.String java.lang.String = ( java.lang.String . boolean ( Region . SEPARATOR ) ? java.lang.String : Region . SEPARATOR + java.lang.String ) ; java.lang.String java.lang.String = ( java.lang.String . int ( Region . SEPARATOR ) > NUMBER ? java.lang.String . java.lang.String ( java.lang.String . int ( Region . SEPARATOR ) + Region . SEPARATOR . length ( ) ) : java.lang.String ) ; when ( org.springframework.data.gemfire.test.Region . getFullPath ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.Region . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.Region . getRegionService ( ) ) . thenReturn ( org.springframework.data.gemfire.test.StubCache ) ; when ( org.springframework.data.gemfire.test.Region . getSubregion ( anyString ( ) ) ) . thenAnswer ( new Answer < Region > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { Region org.springframework.data.gemfire.test.Region = ( Region ) org.springframework.data.gemfire.test.InvocationOnMock . getMock ( ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.test.Region . getFullPath ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String + STRING + java.lang.String : STRING + java.lang.String + STRING + java.lang.String ) ; return org.springframework.data.gemfire.test.StubCache . getRegion ( java.lang.String ) ; } } ) ; when ( org.springframework.data.gemfire.test.Region . createSubregion ( anyString ( ) , any ( RegionAttributes .class ) ) ) . thenAnswer ( new Answer < Region > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; RegionAttributes org.springframework.data.gemfire.test.RegionAttributes = ( RegionAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; Region org.springframework.data.gemfire.test.Region = ( Region ) org.springframework.data.gemfire.test.InvocationOnMock . getMock ( ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.test.Region . getName ( ) ; java.lang.String java.lang.String = java.lang.String . boolean ( STRING ) ? java.lang.String + STRING + java.lang.String : STRING + java.lang.String + STRING + java.lang.String ; Region org.springframework.data.gemfire.test.Region = new org.springframework.data.gemfire.test.MockRegionFactory ( org.springframework.data.gemfire.test.StubCache ) . org.springframework.data.gemfire.test.RegionFactory ( org.springframework.data.gemfire.test.RegionAttributes ) . create ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.Region . getFullPath ( ) ) . thenReturn ( java.lang.String ) ; org.springframework.data.gemfire.test.StubCache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; return org.springframework.data.gemfire.test.Region ; } } ) ; return org.springframework.data.gemfire.test.Region ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { Region org.springframework.data.gemfire.test.Region = ( Region ) org.springframework.data.gemfire.test.InvocationOnMock . getMock ( ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.test.Region . getFullPath ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String + STRING + java.lang.String : STRING + java.lang.String + STRING + java.lang.String ) ; return org.springframework.data.gemfire.test.StubCache . getRegion ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; RegionAttributes org.springframework.data.gemfire.test.RegionAttributes = ( RegionAttributes ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; Region org.springframework.data.gemfire.test.Region = ( Region ) org.springframework.data.gemfire.test.InvocationOnMock . getMock ( ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.test.Region . getName ( ) ; java.lang.String java.lang.String = java.lang.String . boolean ( STRING ) ? java.lang.String + STRING + java.lang.String : STRING + java.lang.String + STRING + java.lang.String ; Region org.springframework.data.gemfire.test.Region = new org.springframework.data.gemfire.test.MockRegionFactory ( org.springframework.data.gemfire.test.StubCache ) . org.springframework.data.gemfire.test.RegionFactory ( org.springframework.data.gemfire.test.RegionAttributes ) . create ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.Region . getFullPath ( ) ) . thenReturn ( java.lang.String ) ; org.springframework.data.gemfire.test.StubCache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; return org.springframework.data.gemfire.test.Region ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.gemfire.test.QueryService org.springframework.data.gemfire.test.QueryService ( ) { return org.springframework.data.gemfire.test.QueryService ; }  <METHOD_END>
