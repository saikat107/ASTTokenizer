<METHOD_START> public void ( java.io.File java.io.File , java.io.File java.io.File , org.springframework.boot.devtools.filewatch.ChangedFile.Type org.springframework.boot.devtools.filewatch.ChangedFile.Type ) { Assert . notNull ( java.io.File , STRING ) ; Assert . notNull ( java.io.File , STRING ) ; Assert . notNull ( org.springframework.boot.devtools.filewatch.ChangedFile.Type , STRING ) ; this . java.io.File = java.io.File ; this . java.io.File = java.io.File ; this . org.springframework.boot.devtools.filewatch.ChangedFile.Type = org.springframework.boot.devtools.filewatch.ChangedFile.Type ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) { return this . java.io.File ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.devtools.filewatch.ChangedFile.Type org.springframework.boot.devtools.filewatch.ChangedFile.Type ( ) { return this . org.springframework.boot.devtools.filewatch.ChangedFile.Type ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { java.io.File java.io.File = this . java.io.File . java.io.File ( ) ; java.io.File java.io.File = this . java.io.File . java.io.File ( ) ; java.lang.String java.lang.String = StringUtils . cleanPath ( java.io.File . java.lang.String ( ) ) ; java.lang.String java.lang.String = StringUtils . cleanPath ( java.io.File . java.lang.String ( ) ) ; Assert . state ( java.lang.String . boolean ( java.lang.String ) , STRING + java.lang.String + STRING + java.lang.String ) ; return java.lang.String . java.lang.String ( java.lang.String . int ( ) + NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.io.File . int ( ) * NUMBER + this . org.springframework.boot.devtools.filewatch.ChangedFile.Type . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( java.lang.Object instanceof org.springframework.boot.devtools.filewatch.ChangedFile ) { org.springframework.boot.devtools.filewatch.ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile = ( org.springframework.boot.devtools.filewatch.ChangedFile ) java.lang.Object ; return this . java.io.File . boolean ( org.springframework.boot.devtools.filewatch.ChangedFile . java.io.File ) && this . org.springframework.boot.devtools.filewatch.ChangedFile.Type . boolean ( org.springframework.boot.devtools.filewatch.ChangedFile . org.springframework.boot.devtools.filewatch.ChangedFile.Type ) ; } return super. boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.io.File + STRING + this . org.springframework.boot.devtools.filewatch.ChangedFile.Type + STRING ; }  <METHOD_END>
