<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.validation.beanvalidation.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( BeanValidationPostProcessor .class ) ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( CommonAnnotationBeanPostProcessor .class ) ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.validation.beanvalidation.BeanValidationPostProcessorTests.NotNullConstrainedBean .class ) ) ; try { org.springframework.validation.beanvalidation.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.validation.beanvalidation.BeanCreationException ) { assertTrue ( org.springframework.validation.beanvalidation.BeanCreationException . getRootCause ( ) . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.validation.beanvalidation.BeanCreationException . getRootCause ( ) . getMessage ( ) . contains ( STRING ) ) ; } org.springframework.validation.beanvalidation.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.validation.beanvalidation.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( BeanValidationPostProcessor .class ) ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( CommonAnnotationBeanPostProcessor .class ) ) ; RootBeanDefinition org.springframework.validation.beanvalidation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.validation.beanvalidation.BeanValidationPostProcessorTests.NotNullConstrainedBean .class ) ; org.springframework.validation.beanvalidation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new TestBean ( ) ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.validation.beanvalidation.RootBeanDefinition ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . refresh ( ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.validation.beanvalidation.GenericApplicationContext = new GenericApplicationContext ( ) ; RootBeanDefinition org.springframework.validation.beanvalidation.RootBeanDefinition = new RootBeanDefinition ( BeanValidationPostProcessor .class ) ; org.springframework.validation.beanvalidation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , true ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.validation.beanvalidation.RootBeanDefinition ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( CommonAnnotationBeanPostProcessor .class ) ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.validation.beanvalidation.BeanValidationPostProcessorTests.AfterInitConstraintBean .class ) ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . refresh ( ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.validation.beanvalidation.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( BeanValidationPostProcessor .class ) ) ; RootBeanDefinition org.springframework.validation.beanvalidation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.validation.beanvalidation.BeanValidationPostProcessorTests.NotNullConstrainedBean .class ) ; org.springframework.validation.beanvalidation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new TestBean ( ) ) ; org.springframework.validation.beanvalidation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.validation.beanvalidation.RootBeanDefinition ) ; try { org.springframework.validation.beanvalidation.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.validation.beanvalidation.BeanCreationException ) { assertTrue ( org.springframework.validation.beanvalidation.BeanCreationException . getRootCause ( ) . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.validation.beanvalidation.BeanCreationException . getRootCause ( ) . getMessage ( ) . contains ( STRING ) ) ; } org.springframework.validation.beanvalidation.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.validation.beanvalidation.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( BeanValidationPostProcessor .class ) ) ; RootBeanDefinition org.springframework.validation.beanvalidation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.validation.beanvalidation.BeanValidationPostProcessorTests.NotNullConstrainedBean .class ) ; org.springframework.validation.beanvalidation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new TestBean ( ) ) ; org.springframework.validation.beanvalidation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.validation.beanvalidation.RootBeanDefinition ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . refresh ( ) ; org.springframework.validation.beanvalidation.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.validation.beanvalidation.TestBean org.springframework.validation.beanvalidation.TestBean ( ) { return org.springframework.validation.beanvalidation.TestBean ; }  <METHOD_END>
<METHOD_START> public void void ( TestBean org.springframework.validation.beanvalidation.TestBean ) { this . org.springframework.validation.beanvalidation.TestBean = org.springframework.validation.beanvalidation.TestBean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { assertNotNull ( STRING , this . org.springframework.validation.beanvalidation.TestBean ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.validation.beanvalidation.TestBean org.springframework.validation.beanvalidation.TestBean ( ) { return org.springframework.validation.beanvalidation.TestBean ; }  <METHOD_END>
<METHOD_START> public void void ( TestBean org.springframework.validation.beanvalidation.TestBean ) { this . org.springframework.validation.beanvalidation.TestBean = org.springframework.validation.beanvalidation.TestBean ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { this . org.springframework.validation.beanvalidation.TestBean = new TestBean ( ) ; }  <METHOD_END>
