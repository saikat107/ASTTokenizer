<METHOD_START> public void ( PersistentEntities org.springframework.data.rest.core.PersistentEntities , RepositoryInvokerFactory org.springframework.data.rest.core.RepositoryInvokerFactory , Repositories org.springframework.data.rest.core.Repositories ) { Assert . notNull ( org.springframework.data.rest.core.PersistentEntities , STRING ) ; Assert . notNull ( org.springframework.data.rest.core.RepositoryInvokerFactory , STRING ) ; Assert . notNull ( org.springframework.data.rest.core.Repositories , STRING ) ; java.util.Set<org.springframework.data.rest.core.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.data.rest.core.ConvertiblePair> = new java.util.HashSet<org.springframework.data.rest.core.ConvertiblePair> < ConvertiblePair > ( ) ; for ( TypeInformation < ? > org.springframework.data.rest.core.TypeInformation<?> : org.springframework.data.rest.core.PersistentEntities . getManagedTypes ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.core.TypeInformation<> . getType ( ) ; java.util.Optional<org.springframework.data.rest.core.PersistentEntity<?,? extends org.springframework.data.rest.core.PersistentProperty<?>>> < PersistentEntity < ? , ? extends PersistentProperty < ? > > > java.util.Optional<org.springframework.data.rest.core.PersistentEntity<?,? extends org.springframework.data.rest.core.PersistentProperty<?>>> = org.springframework.data.rest.core.PersistentEntities . getPersistentEntity ( java.lang.Class<> ) ; if ( java.util.Optional<org.springframework.data.rest.core.PersistentEntity<?,? extends org.springframework.data.rest.core.PersistentProperty<?>>> . map ( it -> it . hasIdProperty ( ) ) . orElse ( false ) ) { java.util.Set<org.springframework.data.rest.core.ConvertiblePair> . add ( new ConvertiblePair ( java.net.URI .class , org.springframework.data.rest.core.TypeInformation<> . getType ( ) ) ) ; } } this . java.util.Set<org.springframework.data.rest.core.ConvertiblePair> = java.util.Collections . java.util.Set<org.springframework.data.rest.core.ConvertiblePair> ( java.util.Set<org.springframework.data.rest.core.ConvertiblePair> ) ; this . org.springframework.data.rest.core.PersistentEntities = org.springframework.data.rest.core.PersistentEntities ; this . org.springframework.data.rest.core.RepositoryInvokerFactory = org.springframework.data.rest.core.RepositoryInvokerFactory ; this . org.springframework.data.rest.core.Repositories = org.springframework.data.rest.core.Repositories ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.data.rest.core.TypeDescriptor , TypeDescriptor org.springframework.data.rest.core.TypeDescriptor ) { return ! org.springframework.data.rest.core.TypeDescriptor . equals ( org.springframework.data.rest.core.TypeDescriptor ) ? false : org.springframework.data.rest.core.Repositories . getRepositoryInformationFor ( org.springframework.data.rest.core.TypeDescriptor . getType ( ) ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.rest.core.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.data.rest.core.ConvertiblePair> ( ) { return java.util.Set<org.springframework.data.rest.core.ConvertiblePair> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.data.rest.core.TypeDescriptor , TypeDescriptor org.springframework.data.rest.core.TypeDescriptor ) { java.util.Optional<org.springframework.data.rest.core.PersistentEntity<?,? extends org.springframework.data.rest.core.PersistentProperty<?>>> < PersistentEntity < ? , ? extends PersistentProperty < ? > > > java.util.Optional<org.springframework.data.rest.core.PersistentEntity<?,? extends org.springframework.data.rest.core.PersistentProperty<?>>> = org.springframework.data.rest.core.PersistentEntities . getPersistentEntity ( org.springframework.data.rest.core.TypeDescriptor . getType ( ) ) ; if ( ! java.util.Optional<org.springframework.data.rest.core.PersistentEntity<?,? extends org.springframework.data.rest.core.PersistentProperty<?>>> . isPresent ( ) ) { throw new ConversionFailedException ( org.springframework.data.rest.core.TypeDescriptor , org.springframework.data.rest.core.TypeDescriptor , java.lang.Object , new java.lang.IllegalArgumentException ( STRING + org.springframework.data.rest.core.TypeDescriptor . getType ( ) ) ) ; } java.net.URI java.net.URI = ( java.net.URI ) java.lang.Object ; java.lang.String [] java.lang.String[] = java.net.URI . java.lang.String ( ) . java.lang.String[] ( STRING ) ; if ( java.lang.String[] . int < NUMBER ) { throw new ConversionFailedException ( org.springframework.data.rest.core.TypeDescriptor , org.springframework.data.rest.core.TypeDescriptor , java.lang.Object , new java.lang.IllegalArgumentException ( STRING + java.net.URI + STRING ) ) ; } return org.springframework.data.rest.core.RepositoryInvokerFactory . getInvokerFor ( org.springframework.data.rest.core.TypeDescriptor . getType ( ) ) . invokeFindOne ( java.lang.String[] [ java.lang.String[] . int - NUMBER ] ) . orElse ( null ) ; }  <METHOD_END>
