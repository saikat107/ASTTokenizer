<METHOD_START> public void ( WebHandler org.springframework.web.server.handler.WebHandler , WebFilter ... org.springframework.web.server.handler.WebFilter[] ) { Assert . notNull ( org.springframework.web.server.handler.WebHandler , STRING ) ; this . java.util.List<org.springframework.web.server.handler.WebFilter> = ObjectUtils . isEmpty ( org.springframework.web.server.handler.WebFilter[] ) ? java.util.Collections . java.util.List<java.lang.Object> ( ) : java.util.Arrays . java.util.List ( org.springframework.web.server.handler.WebFilter[] ) ; this . org.springframework.web.server.handler.WebHandler = org.springframework.web.server.handler.WebHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange ) { if ( this . int < this . java.util.List<org.springframework.web.server.handler.WebFilter> . size ( ) ) { WebFilter org.springframework.web.server.handler.WebFilter = this . java.util.List<org.springframework.web.server.handler.WebFilter> . get ( this . int ++ ) ; return org.springframework.web.server.handler.WebFilter . filter ( org.springframework.web.server.handler.ServerWebExchange , this ) ; } else { return this . org.springframework.web.server.handler.WebHandler . handle ( org.springframework.web.server.handler.ServerWebExchange ) ; } }  <METHOD_END>
