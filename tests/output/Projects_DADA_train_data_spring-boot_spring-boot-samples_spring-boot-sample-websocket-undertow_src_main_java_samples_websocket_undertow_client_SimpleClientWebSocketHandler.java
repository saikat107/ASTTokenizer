<METHOD_START> public void ( GreetingService samples.websocket.undertow.client.GreetingService , java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch , java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> ) { this . samples.websocket.undertow.client.GreetingService = samples.websocket.undertow.client.GreetingService ; this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; this . java.util.concurrent.atomic.AtomicReference<java.lang.String> = java.util.concurrent.atomic.AtomicReference<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession samples.websocket.undertow.client.WebSocketSession ) throws java.lang.Exception { TextMessage samples.websocket.undertow.client.TextMessage = new TextMessage ( this . samples.websocket.undertow.client.GreetingService . getGreeting ( ) ) ; samples.websocket.undertow.client.WebSocketSession . sendMessage ( samples.websocket.undertow.client.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession samples.websocket.undertow.client.WebSocketSession , TextMessage samples.websocket.undertow.client.TextMessage )			throws java.lang.Exception { this . samples.websocket.undertow.client.Log . info ( STRING + samples.websocket.undertow.client.TextMessage + STRING + this . java.util.concurrent.CountDownLatch . long ( ) + STRING ) ; samples.websocket.undertow.client.WebSocketSession . close ( ) ; this . java.util.concurrent.atomic.AtomicReference<java.lang.String> . void ( samples.websocket.undertow.client.TextMessage . getPayload ( ) ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
