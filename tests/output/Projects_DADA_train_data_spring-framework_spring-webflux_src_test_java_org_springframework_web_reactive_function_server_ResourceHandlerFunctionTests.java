<METHOD_START> @ Test public void void ( ) java.io.IOException { MockServerWebExchange org.springframework.web.reactive.function.server.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; MockServerHttpResponse org.springframework.web.reactive.function.server.MockServerHttpResponse = org.springframework.web.reactive.function.server.MockServerWebExchange . getResponse ( ) ; ServerRequest org.springframework.web.reactive.function.server.ServerRequest = new DefaultServerRequest ( org.springframework.web.reactive.function.server.MockServerWebExchange , HandlerStrategies . withDefaults ( ) ) ; Mono < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> = this . org.springframework.web.reactive.function.server.ResourceHandlerFunction . handle ( org.springframework.web.reactive.function.server.ServerRequest ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.server.Mono<java.lang.Void> = org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> . then ( response -> { assertEquals ( HttpStatus . OK , response . statusCode ( ) ) ; return response . writeTo ( exchange , HandlerStrategies . withDefaults ( ) ) ; } ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; byte [] byte[] = java.nio.file.Files . byte[] ( this . org.springframework.web.reactive.function.server.Resource . getFile ( ) . toPath ( ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.MockServerHttpResponse . getBody ( ) ) . consumeNextWith ( dataBuffer -> { byte [] resultBytes = new byte [ dataBuffer . readableByteCount ( ) ] ; dataBuffer . read ( resultBytes ) ; assertArrayEquals ( expectedBytes , resultBytes ) ; } ) . expectComplete ( ) . verify ( ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.web.reactive.function.server.MockServerHttpResponse . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( this . org.springframework.web.reactive.function.server.Resource . contentLength ( ) , org.springframework.web.reactive.function.server.MockServerHttpResponse . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockServerWebExchange org.springframework.web.reactive.function.server.MockServerWebExchange = MockServerHttpRequest . head ( STRING ) . toExchange ( ) ; MockServerHttpResponse org.springframework.web.reactive.function.server.MockServerHttpResponse = org.springframework.web.reactive.function.server.MockServerWebExchange . getResponse ( ) ; ServerRequest org.springframework.web.reactive.function.server.ServerRequest = new DefaultServerRequest ( org.springframework.web.reactive.function.server.MockServerWebExchange , HandlerStrategies . withDefaults ( ) ) ; Mono < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> = this . org.springframework.web.reactive.function.server.ResourceHandlerFunction . handle ( org.springframework.web.reactive.function.server.ServerRequest ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.server.Mono<java.lang.Void> = org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> . then ( res -> { assertEquals ( HttpStatus . OK , res . statusCode ( ) ) ; return res . writeTo ( exchange , HandlerStrategies . withDefaults ( ) ) ; } ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.MockServerHttpResponse . getBody ( ) ) . expectComplete ( ) . verify ( ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.web.reactive.function.server.MockServerHttpResponse . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( this . org.springframework.web.reactive.function.server.Resource . contentLength ( ) , org.springframework.web.reactive.function.server.MockServerHttpResponse . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerWebExchange org.springframework.web.reactive.function.server.MockServerWebExchange = MockServerHttpRequest . options ( STRING ) . toExchange ( ) ; MockServerHttpResponse org.springframework.web.reactive.function.server.MockServerHttpResponse = org.springframework.web.reactive.function.server.MockServerWebExchange . getResponse ( ) ; ServerRequest org.springframework.web.reactive.function.server.ServerRequest = new DefaultServerRequest ( org.springframework.web.reactive.function.server.MockServerWebExchange , HandlerStrategies . withDefaults ( ) ) ; Mono < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> = this . org.springframework.web.reactive.function.server.ResourceHandlerFunction . handle ( org.springframework.web.reactive.function.server.ServerRequest ) ; Mono < java.lang.Void > org.springframework.web.reactive.function.server.Mono<java.lang.Void> = org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> . then ( response -> { assertEquals ( HttpStatus . OK , response . statusCode ( ) ) ; assertEquals ( EnumSet . of ( HttpMethod . GET , HttpMethod . HEAD , HttpMethod . OPTIONS ) , response . headers ( ) . getAllow ( ) ) ; return response . writeTo ( exchange , HandlerStrategies . withDefaults ( ) ) ; } ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<java.lang.Void> ) . expectComplete ( ) . verify ( ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.MockServerHttpResponse . getStatusCode ( ) ) ; assertEquals ( java.util.EnumSet . java.util.EnumSet ( HttpMethod . GET , HttpMethod . HEAD , HttpMethod . OPTIONS ) , org.springframework.web.reactive.function.server.MockServerHttpResponse . getHeaders ( ) . getAllow ( ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.MockServerHttpResponse . getBody ( ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
