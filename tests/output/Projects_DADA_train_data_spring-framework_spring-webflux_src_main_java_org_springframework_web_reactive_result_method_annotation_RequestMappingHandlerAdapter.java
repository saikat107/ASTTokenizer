<METHOD_START> public void void ( ServerCodecConfigurer org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer ) { this . org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer = org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer ( ) { return this . org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer ; }  <METHOD_END>
<METHOD_START> public void void ( WebBindingInitializer org.springframework.web.reactive.result.method.annotation.WebBindingInitializer ) { this . org.springframework.web.reactive.result.method.annotation.WebBindingInitializer = org.springframework.web.reactive.result.method.annotation.WebBindingInitializer ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.WebBindingInitializer org.springframework.web.reactive.result.method.annotation.WebBindingInitializer ( ) { return this . org.springframework.web.reactive.result.method.annotation.WebBindingInitializer ; }  <METHOD_END>
<METHOD_START> public void void ( ArgumentResolverConfigurer org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ) { Assert . notNull ( org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer , STRING ) ; this . org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer = org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ( ) { return this . org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer ; }  <METHOD_END>
<METHOD_START> public void void ( ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { this . org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry = org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ( ) { return this . org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ) { if ( org.springframework.web.reactive.result.method.annotation.ApplicationContext instanceof ConfigurableApplicationContext ) { this . org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) org.springframework.web.reactive.result.method.annotation.ApplicationContext ; } }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext ( ) { return this . org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer == null ) { this . org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer = new ServerCodecConfigurer ( ) ; } if ( this . org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer == null ) { this . org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer = new ArgumentResolverConfigurer ( ) ; } if ( this . org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry == null ) { this . org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry = new ReactiveAdapterRegistry ( ) ; } this . org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver = new ControllerMethodResolver ( this . org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer , this . org.springframework.web.reactive.result.method.annotation.ServerCodecConfigurer , this . org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , this . org.springframework.web.reactive.result.method.annotation.ConfigurableApplicationContext ) ; this . org.springframework.web.reactive.result.method.annotation.ModelInitializer = new ModelInitializer ( this . org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return HandlerMethod .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult> < HandlerResult > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult> ( ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; HandlerMethod org.springframework.web.reactive.result.method.annotation.HandlerMethod = ( HandlerMethod ) java.lang.Object ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = new InitBinderBindingContext ( org.springframework.web.reactive.result.method.annotation.WebBindingInitializer ( ) , this . org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver . getInitBinderMethods ( org.springframework.web.reactive.result.method.annotation.HandlerMethod ) ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> = this . org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver . getModelAttributeMethods ( org.springframework.web.reactive.result.method.annotation.HandlerMethod ) ; java.util.function.Function<java.lang.Throwable,org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult>> < java.lang.Throwable , Mono < HandlerResult > > java.util.function.Function<java.lang.Throwable,org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult>> = java.lang.Throwable -> org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult> ( java.lang.Throwable , org.springframework.web.reactive.result.method.annotation.HandlerMethod , org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; return this . org.springframework.web.reactive.result.method.annotation.ModelInitializer . initModel ( org.springframework.web.reactive.result.method.annotation.BindingContext , java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) . then ( ( ) this . methodResolver . getRequestMappingMethod ( handlerMethod ) . invoke ( exchange , bindingContext ) . doOnNext ( result -> result . setExceptionHandler ( exceptionHandler ) ) . otherwise ( exceptionHandler ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult> < HandlerResult > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult> ( java.lang.Throwable java.lang.Throwable , HandlerMethod org.springframework.web.reactive.result.method.annotation.HandlerMethod , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { return this . org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver . getExceptionHandlerMethod ( java.lang.Throwable , org.springframework.web.reactive.result.method.annotation.HandlerMethod ) . map ( invocable -> { try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + invocable . getMethod ( ) ) ; } bindingContext . getModel ( ) . asMap ( ) . clear ( ) ; Throwable cause = ex . getCause ( ) != null ? ex . getCause ( ) : ex ; return invocable . invoke ( exchange , bindingContext , cause , handlerMethod ) ; } catch ( Throwable invocationEx ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + invocable . getMethod ( ) , invocationEx ) ; } return null ; } } ) . orElseGet ( ( ) Mono . error ( ex ) ) ; }  <METHOD_END>
