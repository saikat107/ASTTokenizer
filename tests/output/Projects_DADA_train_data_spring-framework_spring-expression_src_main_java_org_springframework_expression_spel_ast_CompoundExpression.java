<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); if ( expressionComponents . length < NUMBER ) { throw new java.lang.IllegalStateException ( STRING + expressionComponents . length ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.expression.spel.ast.ValueRef org.springframework.expression.spel.ast.ValueRef ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { if ( getChildCount ( ) == NUMBER ) { return this . children [ NUMBER ] . getValueRef ( org.springframework.expression.spel.ast.ExpressionState ) ; } SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = this . children [ NUMBER ] ; try { TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; int int = getChildCount ( ) ; for ( int int = NUMBER ; int < int - NUMBER ; int ++ ) { try { org.springframework.expression.spel.ast.ExpressionState . pushActiveContextObject ( org.springframework.expression.spel.ast.TypedValue ) ; org.springframework.expression.spel.ast.SpelNodeImpl = this . children [ int ] ; org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; } finally { org.springframework.expression.spel.ast.ExpressionState . popActiveContextObject ( ) ; } } try { org.springframework.expression.spel.ast.ExpressionState . pushActiveContextObject ( org.springframework.expression.spel.ast.TypedValue ) ; org.springframework.expression.spel.ast.SpelNodeImpl = this . children [ int - NUMBER ] ; return org.springframework.expression.spel.ast.SpelNodeImpl . getValueRef ( org.springframework.expression.spel.ast.ExpressionState ) ; } finally { org.springframework.expression.spel.ast.ExpressionState . popActiveContextObject ( ) ; } } catch ( SpelEvaluationException org.springframework.expression.spel.ast.SpelEvaluationException ) { org.springframework.expression.spel.ast.SpelEvaluationException . setPosition ( org.springframework.expression.spel.ast.SpelNodeImpl . getStartPosition ( ) ) ; throw org.springframework.expression.spel.ast.SpelEvaluationException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { ValueRef org.springframework.expression.spel.ast.ValueRef = org.springframework.expression.spel.ast.ValueRef ( org.springframework.expression.spel.ast.ExpressionState ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.ValueRef . getValue ( ) ; this . exitTypeDescriptor = this . children [ this . children . length - NUMBER ] . exitTypeDescriptor ; return org.springframework.expression.spel.ast.TypedValue ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ExpressionState org.springframework.expression.spel.ast.ExpressionState , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.ast.EvaluationException { org.springframework.expression.spel.ast.ValueRef ( org.springframework.expression.spel.ast.ExpressionState ) . setValue ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { return org.springframework.expression.spel.ast.ValueRef ( org.springframework.expression.spel.ast.ExpressionState ) . isWritable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( int int = NUMBER ; int < getChildCount ( ) ; int ++ ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( getChild ( int ) . toStringAST ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { for ( SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl : this . children ) { if ( ! org.springframework.expression.spel.ast.SpelNodeImpl . isCompilable ( ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { for ( int int = NUMBER ; int < this . children . length ; int ++ ) { this . children [ int ] . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; } org.springframework.expression.spel.ast.CodeFlow . pushDescriptor ( this . exitTypeDescriptor ) ; }  <METHOD_END>
