<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ) { this( ( java.lang.reflect.Type ) java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Type java.lang.reflect.Type , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ) { this( java.lang.reflect.Type , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> , LogFactory . getLog ( org.springframework.web.client.HttpMessageConverterExtractor .class ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void ( java.lang.reflect.Type java.lang.reflect.Type , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> , Log org.springframework.web.client.Log ) { Assert . notNull ( java.lang.reflect.Type , STRING ) ; Assert . notEmpty ( java.util.List<org.springframework.web.client.HttpMessageConverter<?>> , STRING ) ; this . java.lang.reflect.Type = java.lang.reflect.Type ; this . java.lang.Class<T> = ( java.lang.reflect.Type instanceof java.lang.Class ) ? ( java.lang.Class<T> < T > ) java.lang.reflect.Type : null ; this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> = java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ; this . org.springframework.web.client.Log = org.springframework.web.client.Log ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING , STRING } ) public T T ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) throws java.io.IOException { MessageBodyClientHttpResponseWrapper org.springframework.web.client.MessageBodyClientHttpResponseWrapper = new MessageBodyClientHttpResponseWrapper ( org.springframework.web.client.ClientHttpResponse ) ; if ( ! org.springframework.web.client.MessageBodyClientHttpResponseWrapper . hasMessageBody ( ) || org.springframework.web.client.MessageBodyClientHttpResponseWrapper . hasEmptyMessageBody ( ) ) { return null ; } MediaType org.springframework.web.client.MediaType = org.springframework.web.client.MediaType ( org.springframework.web.client.MessageBodyClientHttpResponseWrapper ) ; try { for ( HttpMessageConverter < ? > org.springframework.web.client.HttpMessageConverter<?> : this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ) { if ( org.springframework.web.client.HttpMessageConverter<> instanceof GenericHttpMessageConverter ) { GenericHttpMessageConverter < ? > org.springframework.web.client.GenericHttpMessageConverter<?> = ( GenericHttpMessageConverter < ? > ) org.springframework.web.client.HttpMessageConverter<> ; if ( org.springframework.web.client.GenericHttpMessageConverter<> . canRead ( this . java.lang.reflect.Type , null , org.springframework.web.client.MediaType ) ) { if ( org.springframework.web.client.Log . isDebugEnabled ( ) ) { org.springframework.web.client.Log . debug ( STRING + this . java.lang.reflect.Type + STRING + org.springframework.web.client.MediaType + STRING + org.springframework.web.client.HttpMessageConverter<> + STRING ) ; } return ( T ) org.springframework.web.client.GenericHttpMessageConverter<> . read ( this . java.lang.reflect.Type , null , org.springframework.web.client.MessageBodyClientHttpResponseWrapper ) ; } } if ( this . java.lang.Class<T> != null ) { if ( org.springframework.web.client.HttpMessageConverter<> . canRead ( this . java.lang.Class<T> , org.springframework.web.client.MediaType ) ) { if ( org.springframework.web.client.Log . isDebugEnabled ( ) ) { org.springframework.web.client.Log . debug ( STRING + this . java.lang.Class<T> . java.lang.String ( ) + STRING + org.springframework.web.client.MediaType + STRING + org.springframework.web.client.HttpMessageConverter<> + STRING ) ; } return ( T ) org.springframework.web.client.HttpMessageConverter<> . read ( ( java.lang.Class ) this . java.lang.Class<T> , org.springframework.web.client.MessageBodyClientHttpResponseWrapper ) ; } } } } catch( java.io.IOException | HttpMessageNotReadableException java.lang.Object ) { throw new RestClientException ( STRING + this . java.lang.reflect.Type + STRING + org.springframework.web.client.MediaType + STRING , java.lang.Object ) ; } throw new RestClientException ( STRING + STRING + this . java.lang.reflect.Type + STRING + org.springframework.web.client.MediaType + STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.client.MediaType org.springframework.web.client.MediaType ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) { MediaType org.springframework.web.client.MediaType = org.springframework.web.client.ClientHttpResponse . getHeaders ( ) . getContentType ( ) ; if ( org.springframework.web.client.MediaType == null ) { if ( org.springframework.web.client.Log . isTraceEnabled ( ) ) { org.springframework.web.client.Log . trace ( STRING ) ; } org.springframework.web.client.MediaType = MediaType . APPLICATION_OCTET_STREAM ; } return org.springframework.web.client.MediaType ; }  <METHOD_END>
