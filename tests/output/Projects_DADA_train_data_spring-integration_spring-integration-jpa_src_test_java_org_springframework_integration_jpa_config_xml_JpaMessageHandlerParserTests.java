<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaMessageHandlerParserTests> ( ) ) ; final AbstractMessageChannel org.springframework.integration.jpa.config.xml.AbstractMessageChannel = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , AbstractMessageChannel .class ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.AbstractMessageChannel . getComponentName ( ) ) ; final JpaExecutor org.springframework.integration.jpa.config.xml.JpaExecutor = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , JpaExecutor .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.JpaExecutor ) ; final java.lang.String java.lang.String = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; final JpaOperations org.springframework.integration.jpa.config.xml.JpaOperations = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , JpaOperations .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.JpaOperations ) ; final PersistMode org.springframework.integration.jpa.config.xml.PersistMode = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , PersistMode .class ) ; assertEquals ( PersistMode . PERSIST , org.springframework.integration.jpa.config.xml.PersistMode ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> < JpaParameter > java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.util.List .class ) ; assertNotNull ( java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> ) ; assertTrue ( java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> . size ( ) == NUMBER ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.Integer .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaMessageHandlerParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jpa.config.xml.EventDrivenConsumer = this . org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; final AbstractMessageChannel org.springframework.integration.jpa.config.xml.AbstractMessageChannel = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , AbstractMessageChannel .class ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.AbstractMessageChannel . getComponentName ( ) ) ; final MessageHandler org.springframework.integration.jpa.config.xml.MessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , MessageHandler .class ) ; int = NUMBER ; org.springframework.integration.jpa.config.xml.MessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaMessageHandlerParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jpa.config.xml.EventDrivenConsumer = this . org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; final AbstractMessageChannel org.springframework.integration.jpa.config.xml.AbstractMessageChannel = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , AbstractMessageChannel .class ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.AbstractMessageChannel . getComponentName ( ) ) ; final MessageHandler org.springframework.integration.jpa.config.xml.MessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , MessageHandler .class ) ; int = NUMBER ; org.springframework.integration.jpa.config.xml.MessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaMessageHandlerParserTests> ( ) ) ; final AbstractMessageChannel org.springframework.integration.jpa.config.xml.AbstractMessageChannel = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , AbstractMessageChannel .class ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.AbstractMessageChannel . getComponentName ( ) ) ; final JpaExecutor org.springframework.integration.jpa.config.xml.JpaExecutor = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , JpaExecutor .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.JpaExecutor ) ; final java.lang.String java.lang.String = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; final JpaOperations org.springframework.integration.jpa.config.xml.JpaOperations = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , JpaOperations .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.JpaOperations ) ; final PersistMode org.springframework.integration.jpa.config.xml.PersistMode = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , PersistMode .class ) ; assertEquals ( PersistMode . PERSIST , org.springframework.integration.jpa.config.xml.PersistMode ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> < JpaParameter > java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.util.List .class ) ; assertNotNull ( java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> ) ; assertTrue ( java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaMessageHandlerParserTests> ( ) ) ; final JpaExecutor org.springframework.integration.jpa.config.xml.JpaExecutor = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , JpaExecutor .class ) ; final java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> < JpaParameter > java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.util.List .class ) ; assertTrue ( java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> . size ( ) == NUMBER ) ; JpaParameter org.springframework.integration.jpa.config.xml.JpaParameter = java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> . get ( NUMBER ) ; JpaParameter org.springframework.integration.jpa.config.xml.JpaParameter = java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> . get ( NUMBER ) ; JpaParameter org.springframework.integration.jpa.config.xml.JpaParameter = java.util.List<org.springframework.integration.jpa.config.xml.JpaParameter> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.JpaParameter . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.JpaParameter . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.JpaParameter . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.JpaParameter . getValue ( ) ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.JpaParameter . getValue ( ) ) ; assertNull ( org.springframework.integration.jpa.config.xml.JpaParameter . getValue ( ) ) ; assertNull ( org.springframework.integration.jpa.config.xml.JpaParameter . getExpression ( ) ) ; assertNull ( org.springframework.integration.jpa.config.xml.JpaParameter . getExpression ( ) ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.JpaParameter . getExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaMessageHandlerParserTests> ( ) ) ; AbstractReplyProducingMessageHandler . AbstractReplyProducingMessageHandler AbstractReplyProducingMessageHandler.RequestHandler = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , AbstractReplyProducingMessageHandler . AbstractReplyProducingMessageHandler .class ) ; assertNotNull ( AbstractReplyProducingMessageHandler.RequestHandler ) ; assertTrue ( AopUtils . isAopProxy ( AbstractReplyProducingMessageHandler.RequestHandler ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaMessageHandlerParserTests> ( ) ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . getBean ( STRING , JpaExecutor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext != null ) { org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; org.springframework.integration.jpa.config.xml.EventDrivenConsumer = this . org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.jpa.config.xml.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jpa.config.xml.Message<?> ) throws java.lang.Exception { int ++ ; return null ; }  <METHOD_END>
