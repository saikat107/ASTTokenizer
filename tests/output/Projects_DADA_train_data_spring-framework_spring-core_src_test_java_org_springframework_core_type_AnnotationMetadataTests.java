<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.core.type.AnnotationMetadata = new StandardAnnotationMetadata ( org.springframework.core.type.AnnotationMetadataTests.AnnotatedComponent .class , true ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( org.springframework.core.type.AnnotationMetadataTests.AnnotatedComponent .class . java.lang.String ( ) ) ; AnnotationMetadata org.springframework.core.type.AnnotationMetadata = org.springframework.core.type.MetadataReader . getAnnotationMetadata ( ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.core.type.AnnotationMetadata = new StandardAnnotationMetadata ( org.springframework.core.type.AnnotationMetadataTests.AnnotatedComponentSubClass .class , true ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( org.springframework.core.type.AnnotationMetadataTests.AnnotatedComponentSubClass .class . java.lang.String ( ) ) ; AnnotationMetadata org.springframework.core.type.AnnotationMetadata = org.springframework.core.type.MetadataReader . getAnnotationMetadata ( ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMetadata org.springframework.core.type.AnnotationMetadata ) { assertThat ( org.springframework.core.type.AnnotationMetadata . getClassName ( ) , is ( org.springframework.core.type.AnnotationMetadataTests.AnnotatedComponentSubClass .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isInterface ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotation ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAbstract ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isConcrete ( ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasSuperClass ( ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getSuperClassName ( ) , is ( org.springframework.core.type.AnnotationMetadataTests.AnnotatedComponent .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getInterfaceNames ( ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotated ( Component .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotated ( Scope .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotated ( org.springframework.core.type.AnnotationMetadataTests.SpecialAttr .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasAnnotation ( Component .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasAnnotation ( Scope .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasAnnotation ( org.springframework.core.type.AnnotationMetadataTests.SpecialAttr .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getAnnotationTypes ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( Component .class . java.lang.String ( ) ) , nullValue ( ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getAnnotatedMethods ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotated ( org.springframework.core.type.AnnotationMetadataTests.IsAnnotatedAnnotation .class . java.lang.String ( ) ) , equalTo ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getAllAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.core.type.AnnotationMetadata = new StandardAnnotationMetadata ( AnnotationMetadata .class , true ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( AnnotationMetadata .class . java.lang.String ( ) ) ; AnnotationMetadata org.springframework.core.type.AnnotationMetadata = org.springframework.core.type.MetadataReader . getAnnotationMetadata ( ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMetadata org.springframework.core.type.AnnotationMetadata ) { assertThat ( org.springframework.core.type.AnnotationMetadata . getClassName ( ) , is ( AnnotationMetadata .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isInterface ( ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotation ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAbstract ( ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isConcrete ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasSuperClass ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getSuperClassName ( ) , nullValue ( ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getInterfaceNames ( ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getInterfaceNames ( ) [ NUMBER ] , is ( ClassMetadata .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getInterfaceNames ( ) [ NUMBER ] , is ( AnnotatedTypeMetadata .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getAnnotationTypes ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.core.type.AnnotationMetadata = new StandardAnnotationMetadata ( Component .class , true ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( Component .class . java.lang.String ( ) ) ; AnnotationMetadata org.springframework.core.type.AnnotationMetadata = org.springframework.core.type.MetadataReader . getAnnotationMetadata ( ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMetadata org.springframework.core.type.AnnotationMetadata ) { assertThat ( org.springframework.core.type.AnnotationMetadata . getClassName ( ) , is ( Component .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isInterface ( ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotation ( ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAbstract ( ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isConcrete ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasSuperClass ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getSuperClassName ( ) , nullValue ( ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getInterfaceNames ( ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getInterfaceNames ( ) [ NUMBER ] , is ( java.lang.annotation.Annotation .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotated ( java.lang.annotation.Documented .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotated ( Scope .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotated ( org.springframework.core.type.AnnotationMetadataTests.SpecialAttr .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasAnnotation ( java.lang.annotation.Documented .class . java.lang.String ( ) ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasAnnotation ( Scope .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasAnnotation ( org.springframework.core.type.AnnotationMetadataTests.SpecialAttr .class . java.lang.String ( ) ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getAnnotationTypes ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.core.type.AnnotationMetadata = new StandardAnnotationMetadata ( org.springframework.core.type.AnnotationMetadataTests.AnnotatedComponent .class ) ; AnnotationAttributes org.springframework.core.type.AnnotationAttributes = ( AnnotationAttributes ) org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.SpecialAttr .class . java.lang.String ( ) ) ; java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = ( java.lang.annotation.Annotation [] ) org.springframework.core.type.AnnotationAttributes . get ( STRING ) ; assertThat ( java.lang.annotation.Annotation[] [ NUMBER ] , instanceOf ( org.springframework.core.type.AnnotationMetadataTests.NestedAnno .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationMetadata org.springframework.core.type.AnnotationMetadata = new StandardAnnotationMetadata ( org.springframework.core.type.AnnotationMetadataTests.ComposedConfigurationWithAttributeOverridesClass .class ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( org.springframework.core.type.AnnotationMetadataTests.ComposedConfigurationWithAttributeOverridesClass .class . java.lang.String ( ) ) ; AnnotationMetadata org.springframework.core.type.AnnotationMetadata = org.springframework.core.type.MetadataReader . getAnnotationMetadata ( ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMetadata org.springframework.core.type.AnnotationMetadata ) { AnnotationAttributes org.springframework.core.type.AnnotationAttributes = ( AnnotationAttributes ) org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.TestComponentScan .class . java.lang.String ( ) , false ) ; java.lang.String [] java.lang.String[] = org.springframework.core.type.AnnotationAttributes . getStringArray ( STRING ) ; assertThat ( STRING , java.lang.String[] . int , is ( NUMBER ) ) ; assertThat ( STRING , java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; java.lang.String [] java.lang.String[] = org.springframework.core.type.AnnotationAttributes . getStringArray ( STRING ) ; assertThat ( STRING , java.lang.String[] . int , is ( NUMBER ) ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.core.type.AnnotationAttributes . getClassArray ( STRING ) ; assertThat ( STRING , java.lang.Class<?>[] . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationMetadata org.springframework.core.type.AnnotationMetadata = new StandardAnnotationMetadata ( org.springframework.core.type.AnnotationMetadataTests.NamedAnnotationsClass .class ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( org.springframework.core.type.AnnotationMetadataTests.NamedAnnotationsClass .class . java.lang.String ( ) ) ; AnnotationMetadata org.springframework.core.type.AnnotationMetadata = org.springframework.core.type.MetadataReader . getAnnotationMetadata ( ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationMetadata org.springframework.core.type.AnnotationMetadata = new StandardAnnotationMetadata ( org.springframework.core.type.AnnotationMetadataTests.NamedComposedAnnotationClass .class ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( org.springframework.core.type.AnnotationMetadataTests.NamedComposedAnnotationClass .class . java.lang.String ( ) ) ; AnnotationMetadata org.springframework.core.type.AnnotationMetadata = org.springframework.core.type.MetadataReader . getAnnotationMetadata ( ) ; void ( org.springframework.core.type.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMetadata org.springframework.core.type.AnnotationMetadata ) { AnnotationAttributes org.springframework.core.type.AnnotationAttributes = ( AnnotationAttributes ) org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.NamedAnnotation1 .class . java.lang.String ( ) , false ) ; java.lang.String java.lang.String = org.springframework.core.type.AnnotationAttributes . getString ( STRING ) ; assertThat ( STRING , java.lang.String , is ( STRING ) ) ; AnnotationAttributes org.springframework.core.type.AnnotationAttributes = ( AnnotationAttributes ) org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.NamedAnnotation2 .class . java.lang.String ( ) , false ) ; java.lang.String java.lang.String = org.springframework.core.type.AnnotationAttributes . getString ( STRING ) ; assertThat ( STRING , java.lang.String , is ( STRING ) ) ; AnnotationAttributes org.springframework.core.type.AnnotationAttributes = ( AnnotationAttributes ) org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.NamedAnnotation3 .class . java.lang.String ( ) , false ) ; java.lang.String java.lang.String = org.springframework.core.type.AnnotationAttributes . getString ( STRING ) ; assertThat ( STRING , java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMetadata org.springframework.core.type.AnnotationMetadata ) { assertThat ( org.springframework.core.type.AnnotationMetadata . getClassName ( ) , is ( org.springframework.core.type.AnnotationMetadataTests.AnnotatedComponent .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isInterface ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAnnotation ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isAbstract ( ) , is ( false ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . isConcrete ( ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasSuperClass ( ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getSuperClassName ( ) , is ( java.lang.Object .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getInterfaceNames ( ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getInterfaceNames ( ) [ NUMBER ] , is ( java.io.Serializable .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasAnnotation ( Component .class . java.lang.String ( ) ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasAnnotation ( Scope .class . java.lang.String ( ) ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . hasAnnotation ( org.springframework.core.type.AnnotationMetadataTests.SpecialAttr .class . java.lang.String ( ) ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getAnnotationTypes ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getAnnotationTypes ( ) . contains ( Component .class . java.lang.String ( ) ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getAnnotationTypes ( ) . contains ( Scope .class . java.lang.String ( ) ) , is ( true ) ) ; assertThat ( org.springframework.core.type.AnnotationMetadata . getAnnotationTypes ( ) . contains ( org.springframework.core.type.AnnotationMetadataTests.SpecialAttr .class . java.lang.String ( ) ) , is ( true ) ) ; AnnotationAttributes org.springframework.core.type.AnnotationAttributes = ( AnnotationAttributes ) org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( Component .class . java.lang.String ( ) ) ; assertThat ( org.springframework.core.type.AnnotationAttributes . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationAttributes . getString ( STRING ) , is ( STRING ) ) ; AnnotationAttributes org.springframework.core.type.AnnotationAttributes = ( AnnotationAttributes ) org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( Scope .class . java.lang.String ( ) ) ; assertThat ( org.springframework.core.type.AnnotationAttributes . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationAttributes . getString ( STRING ) , is ( STRING ) ) ; java.util.Set<org.springframework.core.type.MethodMetadata> < MethodMetadata > java.util.Set<org.springframework.core.type.MethodMetadata> = org.springframework.core.type.AnnotationMetadata . getAnnotatedMethods ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) ; MethodMetadata org.springframework.core.type.MethodMetadata = java.util.Set<org.springframework.core.type.MethodMetadata> . iterator ( ) . next ( ) ; assertEquals ( STRING , org.springframework.core.type.MethodMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.core.type.MethodMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) . get ( STRING ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = org.springframework.core.type.MethodMetadata . getAllAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) . get ( STRING ) ; assertThat ( new java.util.HashSet <> ( java.util.List<java.lang.Object> ) , is ( equalTo ( new java.util.HashSet<java.lang.Object> < java.lang.Object > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ) ; java.util.List<java.lang.Object> = org.springframework.core.type.MethodMetadata . getAllAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) . get ( STRING ) ; assertThat ( new java.util.HashSet <> ( java.util.List<java.lang.Object> ) , is ( equalTo ( new java.util.HashSet<java.lang.Object> < java.lang.Object > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ) ; assertTrue ( org.springframework.core.type.AnnotationMetadata . isAnnotated ( org.springframework.core.type.AnnotationMetadataTests.IsAnnotatedAnnotation .class . java.lang.String ( ) ) ) ; { AnnotationAttributes org.springframework.core.type.AnnotationAttributes = ( AnnotationAttributes ) org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.SpecialAttr .class . java.lang.String ( ) ) ; assertThat ( org.springframework.core.type.AnnotationAttributes . size ( ) , is ( NUMBER ) ) ; assertTrue ( java.lang.String .class . boolean ( org.springframework.core.type.AnnotationAttributes . getClass ( STRING ) ) ) ; assertTrue ( org.springframework.core.type.AnnotationAttributes . getEnum ( STRING ) . equals ( java.lang.Thread . java.lang.Thread.State . java.lang.Thread.State ) ) ; AnnotationAttributes org.springframework.core.type.AnnotationAttributes = org.springframework.core.type.AnnotationAttributes . getAnnotation ( STRING ) ; assertThat ( STRING , is ( org.springframework.core.type.AnnotationAttributes . getString ( STRING ) ) ) ; assertTrue ( org.springframework.core.type.AnnotationAttributes . getEnum ( STRING ) . equals ( org.springframework.core.type.AnnotationMetadataTests.SomeEnum . org.springframework.core.type.AnnotationMetadataTests.SomeEnum ) ) ; assertArrayEquals ( new java.lang.Class [] { java.lang.String .class } , ( java.lang.Class [] ) org.springframework.core.type.AnnotationAttributes . get ( STRING ) ) ; AnnotationAttributes [] org.springframework.core.type.AnnotationAttributes[] = org.springframework.core.type.AnnotationAttributes . getAnnotationArray ( STRING ) ; assertThat ( nestedAnnoArray . length , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getString ( STRING ) , is ( STRING ) ) ; assertTrue ( org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getEnum ( STRING ) . equals ( org.springframework.core.type.AnnotationMetadataTests.SomeEnum . org.springframework.core.type.AnnotationMetadataTests.SomeEnum ) ) ; assertArrayEquals ( new java.lang.Class [] { java.lang.Void .class } , ( java.lang.Class [] ) org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . get ( STRING ) ) ; assertThat ( org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getString ( STRING ) , is ( STRING ) ) ; assertTrue ( org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getEnum ( STRING ) . equals ( org.springframework.core.type.AnnotationMetadataTests.SomeEnum . org.springframework.core.type.AnnotationMetadataTests.SomeEnum ) ) ; assertArrayEquals ( new java.lang.Class [] { java.lang.Number .class } , ( java.lang.Class [] ) org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . get ( STRING ) ) ; assertArrayEquals ( new java.lang.Class [] { java.lang.Number .class } , org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getClassArray ( STRING ) ) ; AnnotationAttributes org.springframework.core.type.AnnotationAttributes = org.springframework.core.type.AnnotationAttributes . getAnnotation ( STRING ) ; assertThat ( org.springframework.core.type.AnnotationAttributes . getString ( STRING ) , is ( STRING ) ) ; assertTrue ( org.springframework.core.type.AnnotationAttributes . getEnum ( STRING ) . equals ( org.springframework.core.type.AnnotationMetadataTests.SomeEnum . org.springframework.core.type.AnnotationMetadataTests.SomeEnum ) ) ; assertArrayEquals ( new java.lang.Class [] { java.lang.Void .class } , ( java.lang.Class [] ) org.springframework.core.type.AnnotationAttributes . get ( STRING ) ) ; assertArrayEquals ( new java.lang.Class [] { java.lang.Void .class } , org.springframework.core.type.AnnotationAttributes . getClassArray ( STRING ) ) ; AnnotationAttributes [] org.springframework.core.type.AnnotationAttributes[] = org.springframework.core.type.AnnotationAttributes . getAnnotationArray ( STRING ) ; assertThat ( optionalArray . length , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getString ( STRING ) , is ( STRING ) ) ; assertTrue ( org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getEnum ( STRING ) . equals ( org.springframework.core.type.AnnotationMetadataTests.SomeEnum . org.springframework.core.type.AnnotationMetadataTests.SomeEnum ) ) ; assertArrayEquals ( new java.lang.Class [] { java.lang.Void .class } , ( java.lang.Class [] ) org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . get ( STRING ) ) ; assertArrayEquals ( new java.lang.Class [] { java.lang.Void .class } , org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getClassArray ( STRING ) ) ; assertEquals ( STRING , org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) . get ( STRING ) ) ; java.util.List<java.lang.Object> = org.springframework.core.type.AnnotationMetadata . getAllAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) . get ( STRING ) ; assertThat ( new java.util.HashSet <> ( java.util.List<java.lang.Object> ) , is ( equalTo ( new java.util.HashSet<java.lang.Object> < java.lang.Object > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ) ; java.util.List<java.lang.Object> = org.springframework.core.type.AnnotationMetadata . getAllAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) . get ( STRING ) ; assertThat ( new java.util.HashSet <> ( java.util.List<java.lang.Object> ) , is ( equalTo ( new java.util.HashSet<java.lang.Object> < java.lang.Object > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ) ; } { AnnotationAttributes org.springframework.core.type.AnnotationAttributes = ( AnnotationAttributes ) org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.SpecialAttr .class . java.lang.String ( ) , true ) ; assertThat ( org.springframework.core.type.AnnotationAttributes . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.type.AnnotationAttributes . get ( STRING ) , is ( ( java.lang.Object ) java.lang.String .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.core.type.AnnotationAttributes . getString ( STRING ) , is ( java.lang.String .class . java.lang.String ( ) ) ) ; AnnotationAttributes org.springframework.core.type.AnnotationAttributes = org.springframework.core.type.AnnotationAttributes . getAnnotation ( STRING ) ; assertArrayEquals ( new java.lang.String [] { java.lang.String .class . java.lang.String ( ) } , org.springframework.core.type.AnnotationAttributes . getStringArray ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { java.lang.String .class . java.lang.String ( ) } , org.springframework.core.type.AnnotationAttributes . getStringArray ( STRING ) ) ; AnnotationAttributes [] org.springframework.core.type.AnnotationAttributes[] = org.springframework.core.type.AnnotationAttributes . getAnnotationArray ( STRING ) ; assertArrayEquals ( new java.lang.String [] { java.lang.Void .class . java.lang.String ( ) } , ( java.lang.String [] ) org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . get ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { java.lang.Void .class . java.lang.String ( ) } , org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getStringArray ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { java.lang.Number .class . java.lang.String ( ) } , ( java.lang.String [] ) org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . get ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { java.lang.Number .class . java.lang.String ( ) } , org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getStringArray ( STRING ) ) ; AnnotationAttributes org.springframework.core.type.AnnotationAttributes = org.springframework.core.type.AnnotationAttributes . getAnnotation ( STRING ) ; assertArrayEquals ( new java.lang.String [] { java.lang.Void .class . java.lang.String ( ) } , ( java.lang.String [] ) org.springframework.core.type.AnnotationAttributes . get ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { java.lang.Void .class . java.lang.String ( ) } , org.springframework.core.type.AnnotationAttributes . getStringArray ( STRING ) ) ; AnnotationAttributes [] org.springframework.core.type.AnnotationAttributes[] = org.springframework.core.type.AnnotationAttributes . getAnnotationArray ( STRING ) ; assertArrayEquals ( new java.lang.String [] { java.lang.Void .class . java.lang.String ( ) } , ( java.lang.String [] ) org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . get ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { java.lang.Void .class . java.lang.String ( ) } , org.springframework.core.type.AnnotationAttributes[] [ NUMBER ] . getStringArray ( STRING ) ) ; assertEquals ( org.springframework.core.type.AnnotationMetadata . getAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) . get ( STRING ) , STRING ) ; java.util.List<java.lang.Object> = org.springframework.core.type.AnnotationMetadata . getAllAnnotationAttributes ( org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation .class . java.lang.String ( ) ) . get ( STRING ) ; assertThat ( new java.util.HashSet <> ( java.util.List<java.lang.Object> ) , is ( equalTo ( new java.util.HashSet<java.lang.Object> < java.lang.Object > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AnnotationMetadata org.springframework.core.type.AnnotationMetadata ) { java.util.Set<org.springframework.core.type.MethodMetadata> < MethodMetadata > java.util.Set<org.springframework.core.type.MethodMetadata> = org.springframework.core.type.AnnotationMetadata . getAnnotatedMethods ( TestAutowired .class . java.lang.String ( ) ) ; assertThat ( java.util.Set<org.springframework.core.type.MethodMetadata> . size ( ) , is ( NUMBER ) ) ; for ( MethodMetadata org.springframework.core.type.MethodMetadata : java.util.Set<org.springframework.core.type.MethodMetadata> ) { assertThat ( org.springframework.core.type.MethodMetadata . isAnnotated ( TestAutowired .class . java.lang.String ( ) ) , is ( true ) ) ; } }  <METHOD_END>
<METHOD_START> @ TestAutowired public void void ( @ TestQualifier ( STRING ) java . awt . java.awt.Color java.awt.Color ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.type.AnnotationMetadataTests.DirectAnnotation ( STRING ) @ org.springframework.core.type.AnnotationMetadataTests.MetaMetaAnnotation public void void ( ) {		}  <METHOD_END>
