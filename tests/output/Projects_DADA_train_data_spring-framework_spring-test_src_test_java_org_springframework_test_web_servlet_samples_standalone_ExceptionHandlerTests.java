<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.ExceptionHandlerTests.PersonController ( ) ) . build ( ) . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.ExceptionHandlerTests.PersonController ( ) ) . setControllerAdvice ( new org.springframework.test.web.servlet.samples.standalone.ExceptionHandlerTests.GlobalExceptionHandler ( ) ) . build ( ) . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public java.lang.String java.lang.String ( @ PathVariable java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public java.lang.String java.lang.String ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public java.lang.String java.lang.String ( java.lang.IllegalStateException java.lang.IllegalStateException ) { return STRING ; }  <METHOD_END>
