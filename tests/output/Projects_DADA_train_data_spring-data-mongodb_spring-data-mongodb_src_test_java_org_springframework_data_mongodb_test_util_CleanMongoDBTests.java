<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Before public void void ( ) { when ( org.springframework.data.mongodb.test.util.MongoClient . getDatabaseNames ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; when ( org.springframework.data.mongodb.test.util.MongoClient . getDB ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.mongodb.test.util.DB ) ; when ( org.springframework.data.mongodb.test.util.MongoClient . getDB ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.mongodb.test.util.DB ) ; when ( org.springframework.data.mongodb.test.util.DB . collectionExists ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.test.util.DB . collectionExists ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.test.util.DB . getCollectionNames ( ) ) . thenReturn ( new java.util.HashSet<java.lang.String> < java.lang.String > ( ) { { boolean ( STRING ) ; boolean ( STRING ) ; } } ) ; when ( org.springframework.data.mongodb.test.util.DB . getCollectionNames ( ) ) . thenReturn ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; when ( org.springframework.data.mongodb.test.util.DB . getCollectionFromString ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.mongodb.test.util.DBCollection ) ; when ( org.springframework.data.mongodb.test.util.DB . getCollectionFromString ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.mongodb.test.util.DBCollection ) ; when ( org.springframework.data.mongodb.test.util.DB . getCollectionFromString ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.mongodb.test.util.DBCollection ) ; org.springframework.data.mongodb.test.util.CleanMongoDB = new CleanMongoDB ( org.springframework.data.mongodb.test.util.MongoClient ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.mongodb.test.util.CleanMongoDB . clean ( Struct . DATABASE ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . apply ( org.springframework.data.mongodb.test.util.Statement , org.springframework.data.mongodb.test.util.Description ) . evaluate ( ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , never ( ) ) . dropDatabase ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.mongodb.test.util.CleanMongoDB . clean ( Struct . DATABASE ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . preserveDatabases ( STRING ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . apply ( org.springframework.data.mongodb.test.util.Statement , org.springframework.data.mongodb.test.util.Description ) . evaluate ( ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , never ( ) ) . dropDatabase ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.mongodb.test.util.CleanMongoDB . clean ( Struct . DATABASE ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . apply ( org.springframework.data.mongodb.test.util.Statement , org.springframework.data.mongodb.test.util.Description ) . evaluate ( ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , times ( NUMBER ) ) . dropDatabase ( eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , times ( NUMBER ) ) . dropDatabase ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.mongodb.test.util.CleanMongoDB . clean ( Struct . DATABASE ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . useDatabases ( STRING ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . apply ( org.springframework.data.mongodb.test.util.Statement , org.springframework.data.mongodb.test.util.Description ) . evaluate ( ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , times ( NUMBER ) ) . dropDatabase ( eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , never ( ) ) . dropDatabase ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.mongodb.test.util.CleanMongoDB . clean ( Struct . COLLECTION ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . apply ( org.springframework.data.mongodb.test.util.Statement , org.springframework.data.mongodb.test.util.Description ) . evaluate ( ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , never ( ) ) . dropDatabase ( eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , never ( ) ) . dropDatabase ( eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , never ( ) ) . dropDatabase ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.mongodb.test.util.CleanMongoDB . clean ( Struct . COLLECTION ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . preserveDatabases ( STRING ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . apply ( org.springframework.data.mongodb.test.util.Statement , org.springframework.data.mongodb.test.util.Description ) . evaluate ( ) ; verify ( org.springframework.data.mongodb.test.util.DBCollection , never ( ) ) . drop ( ) ; verify ( org.springframework.data.mongodb.test.util.DBCollection , never ( ) ) . drop ( ) ; verify ( org.springframework.data.mongodb.test.util.DBCollection , times ( NUMBER ) ) . drop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.mongodb.test.util.CleanMongoDB . clean ( Struct . COLLECTION ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . apply ( org.springframework.data.mongodb.test.util.Statement , org.springframework.data.mongodb.test.util.Description ) . evaluate ( ) ; verify ( org.springframework.data.mongodb.test.util.DBCollection , times ( NUMBER ) ) . drop ( ) ; verify ( org.springframework.data.mongodb.test.util.DBCollection , times ( NUMBER ) ) . drop ( ) ; verify ( org.springframework.data.mongodb.test.util.DBCollection , times ( NUMBER ) ) . drop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.mongodb.test.util.CleanMongoDB . clean ( Struct . COLLECTION ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . useCollections ( STRING ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . apply ( org.springframework.data.mongodb.test.util.Statement , org.springframework.data.mongodb.test.util.Description ) . evaluate ( ) ; verify ( org.springframework.data.mongodb.test.util.DBCollection , never ( ) ) . drop ( ) ; verify ( org.springframework.data.mongodb.test.util.DBCollection , never ( ) ) . drop ( ) ; verify ( org.springframework.data.mongodb.test.util.DBCollection , times ( NUMBER ) ) . drop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.mongodb.test.util.CleanMongoDB . clean ( Struct . INDEX ) ; org.springframework.data.mongodb.test.util.CleanMongoDB . apply ( org.springframework.data.mongodb.test.util.Statement , org.springframework.data.mongodb.test.util.Description ) . evaluate ( ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , never ( ) ) . dropDatabase ( eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , never ( ) ) . dropDatabase ( eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.test.util.MongoClient , never ( ) ) . dropDatabase ( eq ( STRING ) ) ; verify ( org.springframework.data.mongodb.test.util.DBCollection , times ( NUMBER ) ) . dropIndexes ( ) ; }  <METHOD_END>
