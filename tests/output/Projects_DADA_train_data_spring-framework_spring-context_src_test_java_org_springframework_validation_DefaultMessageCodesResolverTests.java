<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING , STRING , TestBean .class ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING , STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING , STRING , TestBean .class ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.validation.DefaultMessageCodesResolver . setPrefix ( STRING ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.validation.DefaultMessageCodesResolver . setPrefix ( STRING ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING , STRING , TestBean .class ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING , STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.validation.DefaultMessageCodesResolver . setPrefix ( null ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING , STRING , TestBean .class ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING , STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING , STRING , TestBean .class ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING , STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING , STRING , null ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.validation.DefaultMessageCodesResolver . setMessageCodeFormatter ( Format . POSTFIX_ERROR_CODE ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.validation.DefaultMessageCodesResolver . setMessageCodeFormatter ( Format . POSTFIX_ERROR_CODE ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING , STRING , TestBean .class ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING , STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.validation.DefaultMessageCodesResolver . setMessageCodeFormatter ( new MessageCodeFormatter ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return DefaultMessageCodesResolver . Format . toDelimitedString ( STRING + java.lang.String , java.lang.String , java.lang.String ) ; } } ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DefaultMessageCodesResolver . resolveMessageCodes ( STRING , STRING ) ; assertThat ( java.lang.String[] , is ( equalTo ( new java.lang.String [] { STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return DefaultMessageCodesResolver . Format . toDelimitedString ( STRING + java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
