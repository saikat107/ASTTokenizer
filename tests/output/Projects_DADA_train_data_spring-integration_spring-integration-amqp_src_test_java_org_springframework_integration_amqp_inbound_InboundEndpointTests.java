<METHOD_START> @ Test public void void ( ) java.lang.Exception { Connection org.springframework.integration.amqp.inbound.Connection = mock ( Connection .class ) ; doAnswer ( invocation -> mock ( Channel .class ) ) . when ( org.springframework.integration.amqp.inbound.Connection ) . createChannel ( anyBoolean ( ) ) ; ConnectionFactory org.springframework.integration.amqp.inbound.ConnectionFactory = mock ( ConnectionFactory .class ) ; when ( org.springframework.integration.amqp.inbound.ConnectionFactory . createConnection ( ) ) . thenReturn ( org.springframework.integration.amqp.inbound.Connection ) ; SimpleMessageListenerContainer org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( ) ; org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.integration.amqp.inbound.ConnectionFactory ) ; org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer . setAcknowledgeMode ( AcknowledgeMode . MANUAL ) ; AmqpInboundChannelAdapter org.springframework.integration.amqp.inbound.AmqpInboundChannelAdapter = new AmqpInboundChannelAdapter ( org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer ) ; org.springframework.integration.amqp.inbound.AmqpInboundChannelAdapter . setMessageConverter ( new Jackson2JsonMessageConverter ( ) ) ; PollableChannel org.springframework.integration.amqp.inbound.PollableChannel = new QueueChannel ( ) ; org.springframework.integration.amqp.inbound.AmqpInboundChannelAdapter . setOutputChannel ( org.springframework.integration.amqp.inbound.PollableChannel ) ; org.springframework.integration.amqp.inbound.AmqpInboundChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.amqp.inbound.AmqpInboundChannelAdapter . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = new org.springframework.integration.amqp.inbound.InboundEndpointTests.Foo ( STRING ) ; Transformer org.springframework.integration.amqp.inbound.Transformer = new ObjectToJsonTransformer ( ) ; Message < ? > org.springframework.integration.amqp.inbound.Message<?> = org.springframework.integration.amqp.inbound.Transformer . transform ( new GenericMessage < java.lang.Object > ( java.lang.Object ) ) ; MessageProperties org.springframework.integration.amqp.inbound.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.inbound.MessageProperties . setDeliveryTag ( NUMBER ) ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message = new SimpleMessageConverter ( ) . toMessage ( org.springframework.integration.amqp.inbound.Message<> . getPayload ( ) , org.springframework.integration.amqp.inbound.MessageProperties ) ; DefaultAmqpHeaderMapper . inboundMapper ( ) . fromHeadersToRequest ( org.springframework.integration.amqp.inbound.Message<> . getHeaders ( ) , org.springframework.integration.amqp.inbound.MessageProperties ) ; ChannelAwareMessageListener org.springframework.integration.amqp.inbound.ChannelAwareMessageListener = ( ChannelAwareMessageListener ) org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer . getMessageListener ( ) ; Channel org.springframework.integration.amqp.inbound.Channel = mock ( Channel .class ) ; org.springframework.integration.amqp.inbound.ChannelAwareMessageListener . onMessage ( org.springframework.amqp.core.Message , org.springframework.integration.amqp.inbound.Channel ) ; Message < ? > org.springframework.integration.amqp.inbound.Message<?> = org.springframework.integration.amqp.inbound.PollableChannel . receive ( NUMBER ) ; assertEquals ( java.lang.Object , org.springframework.integration.amqp.inbound.Message<> . getPayload ( ) ) ; assertSame ( org.springframework.integration.amqp.inbound.Channel , org.springframework.integration.amqp.inbound.Message<> . getHeaders ( ) . get ( AmqpHeaders . CHANNEL ) ) ; assertEquals ( NUMBER , org.springframework.integration.amqp.inbound.Message<> . getHeaders ( ) . get ( AmqpHeaders . DELIVERY_TAG ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Connection org.springframework.integration.amqp.inbound.Connection = mock ( Connection .class ) ; doAnswer ( invocation -> mock ( Channel .class ) ) . when ( org.springframework.integration.amqp.inbound.Connection ) . createChannel ( anyBoolean ( ) ) ; ConnectionFactory org.springframework.integration.amqp.inbound.ConnectionFactory = mock ( ConnectionFactory .class ) ; when ( org.springframework.integration.amqp.inbound.ConnectionFactory . createConnection ( ) ) . thenReturn ( org.springframework.integration.amqp.inbound.Connection ) ; SimpleMessageListenerContainer org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( ) ; org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.integration.amqp.inbound.ConnectionFactory ) ; AmqpInboundChannelAdapter org.springframework.integration.amqp.inbound.AmqpInboundChannelAdapter = new AmqpInboundChannelAdapter ( org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer ) ; PollableChannel org.springframework.integration.amqp.inbound.PollableChannel = new QueueChannel ( ) ; org.springframework.integration.amqp.inbound.AmqpInboundChannelAdapter . setOutputChannel ( org.springframework.integration.amqp.inbound.PollableChannel ) ; org.springframework.integration.amqp.inbound.AmqpInboundChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.amqp.inbound.AmqpInboundChannelAdapter . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = new org.springframework.integration.amqp.inbound.InboundEndpointTests.Foo ( STRING ) ; MessageProperties org.springframework.integration.amqp.inbound.MessageProperties = new MessageProperties ( ) ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message = new Jackson2JsonMessageConverter ( ) . toMessage ( java.lang.Object , org.springframework.integration.amqp.inbound.MessageProperties ) ; ChannelAwareMessageListener org.springframework.integration.amqp.inbound.ChannelAwareMessageListener = ( ChannelAwareMessageListener ) org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer . getMessageListener ( ) ; org.springframework.integration.amqp.inbound.ChannelAwareMessageListener . onMessage ( org.springframework.amqp.core.Message , null ) ; Message < ? > org.springframework.integration.amqp.inbound.Message<?> = org.springframework.integration.amqp.inbound.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.amqp.inbound.Message<?> = new JsonToObjectTransformer ( ) . transform ( org.springframework.integration.amqp.inbound.Message<> ) ; assertEquals ( java.lang.Object , org.springframework.integration.amqp.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Connection org.springframework.integration.amqp.inbound.Connection = mock ( Connection .class ) ; doAnswer ( invocation -> mock ( Channel .class ) ) . when ( org.springframework.integration.amqp.inbound.Connection ) . createChannel ( anyBoolean ( ) ) ; ConnectionFactory org.springframework.integration.amqp.inbound.ConnectionFactory = mock ( ConnectionFactory .class ) ; when ( org.springframework.integration.amqp.inbound.ConnectionFactory . createConnection ( ) ) . thenReturn ( org.springframework.integration.amqp.inbound.Connection ) ; SimpleMessageListenerContainer org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( ) ; org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.integration.amqp.inbound.ConnectionFactory ) ; org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer . setAcknowledgeMode ( AcknowledgeMode . MANUAL ) ; DirectChannel org.springframework.integration.amqp.inbound.DirectChannel = new DirectChannel ( ) ; final Channel org.springframework.integration.amqp.inbound.Channel = mock ( Channel .class ) ; org.springframework.integration.amqp.inbound.DirectChannel . subscribe ( new MessageTransformingHandler ( message -> { assertSame ( rabbitChannel , message . getHeaders ( ) . get ( AmqpHeaders . CHANNEL ) ) ; assertEquals ( NUMBER , message . getHeaders ( ) . get ( AmqpHeaders . DELIVERY_TAG ) ) ; return MessageBuilder . fromMessage ( message ) . setHeader ( JsonHeaders . TYPE_ID , STRING ) . setHeader ( JsonHeaders . CONTENT_TYPE_ID , STRING ) . setHeader ( JsonHeaders . KEY_TYPE_ID , STRING ) . build ( ) ; } ) ) ; RabbitTemplate org.springframework.integration.amqp.inbound.RabbitTemplate = spy ( new RabbitTemplate ( ) ) ; org.springframework.integration.amqp.inbound.RabbitTemplate . setMessageConverter ( new Jackson2JsonMessageConverter ( ) ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; Mockito . doAnswer ( invocation -> { org . springframework . amqp . core . Message message = invocation . getArgument ( NUMBER ) ; Map < String , Object > headers = message . getMessageProperties ( ) . getHeaders ( ) ; assertTrue ( headers . containsKey ( JsonHeaders . TYPE_ID . replaceFirst ( JsonHeaders . PREFIX , STRING ) ) ) ; assertNotEquals ( STRING , headers . get ( JsonHeaders . TYPE_ID . replaceFirst ( JsonHeaders . PREFIX , STRING ) ) ) ; assertFalse ( headers . containsKey ( JsonHeaders . CONTENT_TYPE_ID . replaceFirst ( JsonHeaders . PREFIX , STRING ) ) ) ; assertFalse ( headers . containsKey ( JsonHeaders . KEY_TYPE_ID . replaceFirst ( JsonHeaders . PREFIX , STRING ) ) ) ; assertFalse ( headers . containsKey ( JsonHeaders . TYPE_ID ) ) ; assertFalse ( headers . containsKey ( JsonHeaders . KEY_TYPE_ID ) ) ; assertFalse ( headers . containsKey ( JsonHeaders . CONTENT_TYPE_ID ) ) ; sendLatch . countDown ( ) ; return null ; } ) . when ( org.springframework.integration.amqp.inbound.RabbitTemplate ) . send ( anyString ( ) , anyString ( ) , any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; AmqpInboundGateway org.springframework.integration.amqp.inbound.AmqpInboundGateway = new AmqpInboundGateway ( org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer , org.springframework.integration.amqp.inbound.RabbitTemplate ) ; org.springframework.integration.amqp.inbound.AmqpInboundGateway . setMessageConverter ( new Jackson2JsonMessageConverter ( ) ) ; org.springframework.integration.amqp.inbound.AmqpInboundGateway . setRequestChannel ( org.springframework.integration.amqp.inbound.DirectChannel ) ; org.springframework.integration.amqp.inbound.AmqpInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.amqp.inbound.AmqpInboundGateway . setDefaultReplyTo ( STRING ) ; org.springframework.integration.amqp.inbound.AmqpInboundGateway . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = new org.springframework.integration.amqp.inbound.InboundEndpointTests.Foo ( STRING ) ; MessageProperties org.springframework.integration.amqp.inbound.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.inbound.MessageProperties . setDeliveryTag ( NUMBER ) ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message = new Jackson2JsonMessageConverter ( ) . toMessage ( java.lang.Object , org.springframework.integration.amqp.inbound.MessageProperties ) ; ChannelAwareMessageListener org.springframework.integration.amqp.inbound.ChannelAwareMessageListener = ( ChannelAwareMessageListener ) org.springframework.integration.amqp.inbound.SimpleMessageListenerContainer . getMessageListener ( ) ; org.springframework.integration.amqp.inbound.ChannelAwareMessageListener . onMessage ( org.springframework.amqp.core.Message , org.springframework.integration.amqp.inbound.Channel ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.integration.amqp.inbound.InboundEndpointTests.Foo> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.integration.amqp.inbound.InboundEndpointTests.Foo org.springframework.integration.amqp.inbound.InboundEndpointTests.Foo = ( org.springframework.integration.amqp.inbound.InboundEndpointTests.Foo ) java.lang.Object ; return ! ( java.lang.String != null ? ! java.lang.String . boolean ( org.springframework.integration.amqp.inbound.InboundEndpointTests.Foo . java.lang.String ) : org.springframework.integration.amqp.inbound.InboundEndpointTests.Foo . java.lang.String != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.String != null ? java.lang.String . int ( ) : NUMBER ; }  <METHOD_END>
