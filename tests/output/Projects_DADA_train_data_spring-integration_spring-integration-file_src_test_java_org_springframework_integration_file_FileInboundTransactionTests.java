<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.file.SourcePollingChannelAdapter . getMessageSource ( ) , STRING ) ; assertThat ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , containsString ( STRING ) ) ; @ java.lang.SuppressWarnings ( STRING ) ResettableFileListFilter < java.io.File > org.springframework.integration.file.ResettableFileListFilter<java.io.File> = spy ( TestUtils . getPropertyValue ( java.lang.Object , STRING , ResettableFileListFilter .class ) ) ; new DirectFieldAccessor ( java.lang.Object ) . setPropertyValue ( STRING , org.springframework.integration.file.ResettableFileListFilter<java.io.File> ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; org.springframework.integration.file.SubscribableChannel . subscribe ( message -> { if ( crash . get ( ) ) { throw new MessagingException ( STRING ) ; } latch . countDown ( ) ; } ) ; org.springframework.integration.file.SourcePollingChannelAdapter . start ( ) ; java.io.File java.io.File = new java.io.File ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) , STRING ) ; java.io.File . boolean ( ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.Message<> ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.Message<> . getPayload ( ) ) ; assertFalse ( java.io.File . boolean ( ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; java.io.File = new java.io.File ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) , STRING ) ; java.io.File . boolean ( ) ; org.springframework.integration.file.Message<?> = org.springframework.integration.file.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.Message<> ) ; assertTrue ( java.io.File . boolean ( ) ) ; assertEquals ( STRING , org.springframework.integration.file.Message<> . getPayload ( ) ) ; org.springframework.integration.file.SourcePollingChannelAdapter . stop ( ) ; assertFalse ( org.springframework.integration.file.FileInboundTransactionTests.DummyTxManager . boolean ( ) ) ; assertFalse ( org.springframework.integration.file.FileInboundTransactionTests.DummyTxManager . boolean ( ) ) ; verify ( org.springframework.integration.file.ResettableFileListFilter<java.io.File> ) . remove ( new java.io.File ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; org.springframework.integration.file.SubscribableChannel . subscribe ( message -> { if ( crash . get ( ) ) { throw new MessagingException ( STRING ) ; } latch . countDown ( ) ; } ) ; org.springframework.integration.file.SourcePollingChannelAdapter . start ( ) ; java.io.File java.io.File = new java.io.File ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) , STRING ) ; java.io.File . boolean ( ) ; Message < ? > org.springframework.integration.file.Message<?> = org.springframework.integration.file.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.Message<> ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.Message<> . getPayload ( ) ) ; assertTrue ( java.io.File . boolean ( ) ) ; assertTrue ( org.springframework.integration.file.FileInboundTransactionTests.DummyTxManager . boolean ( ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; java.io.File = new java.io.File ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) , STRING ) ; java.io.File . boolean ( ) ; org.springframework.integration.file.Message<?> = org.springframework.integration.file.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.Message<> ) ; assertTrue ( java.io.File . boolean ( ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.Message<> . getPayload ( ) ) ; org.springframework.integration.file.SourcePollingChannelAdapter . stop ( ) ; assertTrue ( org.springframework.integration.file.FileInboundTransactionTests.DummyTxManager . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) org.springframework.integration.file.TransactionException { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.integration.file.TransactionDefinition ) throws org.springframework.integration.file.TransactionException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.integration.file.DefaultTransactionStatus ) throws org.springframework.integration.file.TransactionException { boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.integration.file.DefaultTransactionStatus ) throws org.springframework.integration.file.TransactionException { boolean = true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
