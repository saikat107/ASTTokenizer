<METHOD_START> public void ( ) { this . org.springframework.web.socket.sockjs.frame.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ObjectMapper org.springframework.web.socket.sockjs.frame.ObjectMapper ) { Assert . notNull ( org.springframework.web.socket.sockjs.frame.ObjectMapper , STRING ) ; this . org.springframework.web.socket.sockjs.frame.ObjectMapper = org.springframework.web.socket.sockjs.frame.ObjectMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.web.socket.sockjs.frame.ObjectMapper . readValue ( java.lang.String , java.lang.String [] .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { return this . org.springframework.web.socket.sockjs.frame.ObjectMapper . readValue ( java.io.InputStream , java.lang.String [] .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected char [] char[] ( java.lang.String java.lang.String ) { return JsonStringEncoder . getInstance ( ) . quoteAsString ( java.lang.String ) ; }  <METHOD_END>
