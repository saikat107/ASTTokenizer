<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { Message < byte [] > org.springframework.integration.ftp.inbound.Message<byte[]> = ( Message < byte [] > ) this . org.springframework.integration.ftp.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.inbound.Message<byte[]> ) ; assertThat ( new java.lang.String ( org.springframework.integration.ftp.inbound.Message<byte[]> . getPayload ( ) ) , equalTo ( STRING ) ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.ftp.inbound.Message<byte[]> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE_INFO ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; org.springframework.integration.ftp.inbound.Message<byte[]> = ( Message < byte [] > ) this . org.springframework.integration.ftp.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.inbound.Message<byte[]> ) ; assertThat ( new java.lang.String ( org.springframework.integration.ftp.inbound.Message<byte[]> . getPayload ( ) ) , equalTo ( STRING ) ) ; java.lang.String = ( java.lang.String ) org.springframework.integration.ftp.inbound.Message<byte[]> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE_INFO ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; this . org.springframework.integration.ftp.inbound.SourcePollingChannelAdapter . stop ( ) ; this . org.springframework.integration.ftp.inbound.FtpStreamingMessageSource . setFileInfoJson ( false ) ; this . org.springframework.integration.ftp.inbound.QueueChannel . purge ( null ) ; this . org.springframework.integration.ftp.inbound.SourcePollingChannelAdapter . start ( ) ; org.springframework.integration.ftp.inbound.Message<byte[]> = ( Message < byte [] > ) this . org.springframework.integration.ftp.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.inbound.Message<byte[]> ) ; assertThat ( org.springframework.integration.ftp.inbound.Message<byte[]> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE_INFO ) , instanceOf ( FtpFileInfo .class ) ) ; this . org.springframework.integration.ftp.inbound.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ftp.inbound.QueueChannel org.springframework.integration.ftp.inbound.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = PollerMetadata . DEFAULT_POLLER ) public org.springframework.integration.ftp.inbound.PollerMetadata org.springframework.integration.ftp.inbound.PollerMetadata ( ) { PollerMetadata org.springframework.integration.ftp.inbound.PollerMetadata = new PollerMetadata ( ) ; org.springframework.integration.ftp.inbound.PollerMetadata . setTrigger ( new PeriodicTrigger ( NUMBER ) ) ; org.springframework.integration.ftp.inbound.PollerMetadata . setMaxMessagesPerPoll ( NUMBER ) ; return org.springframework.integration.ftp.inbound.PollerMetadata ; }  <METHOD_END>
<METHOD_START> @ Bean @ InboundChannelAdapter ( channel = STRING ) public org.springframework.integration.ftp.inbound.MessageSource<java.io.InputStream> < java.io.InputStream > org.springframework.integration.ftp.inbound.MessageSource<java.io.InputStream> ( ) { FtpStreamingMessageSource org.springframework.integration.ftp.inbound.FtpStreamingMessageSource = new FtpStreamingMessageSource ( org.springframework.integration.ftp.inbound.FtpRemoteFileTemplate ( ) , java.util.Comparator . java.util.Comparator ( FileInfo :: getFilename ) ) ; org.springframework.integration.ftp.inbound.FtpStreamingMessageSource . setFilter ( new AcceptAllFileListFilter <> ( ) ) ; org.springframework.integration.ftp.inbound.FtpStreamingMessageSource . setRemoteDirectory ( STRING ) ; return org.springframework.integration.ftp.inbound.FtpStreamingMessageSource ; }  <METHOD_END>
<METHOD_START> @ Bean @ Transformer ( inputChannel = STRING , outputChannel = STRING ) public org . springframework . integration . org.springframework.integration.transformer . org.springframework.integration.transformer.Transformer org.springframework.integration.transformer.Transformer ( ) { return new StreamTransformer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ftp.inbound.FtpRemoteFileTemplate org.springframework.integration.ftp.inbound.FtpRemoteFileTemplate ( ) { return new FtpRemoteFileTemplate ( org.springframework.integration.ftp.inbound.SessionFactory<org.springframework.integration.ftp.inbound.FTPFile> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ftp.inbound.SessionFactory<org.springframework.integration.ftp.inbound.FTPFile> < FTPFile > org.springframework.integration.ftp.inbound.SessionFactory<org.springframework.integration.ftp.inbound.FTPFile> ( ) { return org.springframework.integration.ftp.inbound.FtpStreamingMessageSourceTests . sessionFactory ( ) ; }  <METHOD_END>
