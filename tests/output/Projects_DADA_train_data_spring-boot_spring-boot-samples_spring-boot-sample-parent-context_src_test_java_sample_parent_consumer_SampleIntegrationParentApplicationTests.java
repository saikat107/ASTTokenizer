<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { sample.parent.consumer.ConfigurableApplicationContext = SpringApplication . run ( SampleParentContextApplication .class ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { if ( sample.parent.consumer.ConfigurableApplicationContext != null ) { sample.parent.consumer.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication . run ( ProducerApplication .class , STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.String java.lang.String ) throws java.lang.Exception { long long = java.lang.System . long ( ) + NUMBER ; java.lang.String java.lang.String = null ; while ( java.lang.System . long ( ) < long ) { Resource [] sample.parent.consumer.Resource[] = sample.parent.consumer.Resource[] ( ) ; if ( resources . length == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; sample.parent.consumer.Resource[] = sample.parent.consumer.Resource[] ( ) ; } else { java.lang.String = java.lang.String ( sample.parent.consumer.Resource[] ) ; if ( java.lang.String != null && java.lang.String . boolean ( java.lang.String ) ) { return; } else { java.lang.Thread . void ( NUMBER ) ; java.lang.String = java.lang.String ( sample.parent.consumer.Resource[] ) ; } } } fail ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> private sample.parent.consumer.Resource [] sample.parent.consumer.Resource[] ( ) java.io.IOException { return ResourcePatternUtils . getResourcePatternResolver ( new DefaultResourceLoader ( ) ) . getResources ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Resource [] sample.parent.consumer.Resource[] ) throws java.io.IOException { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( Resource sample.parent.consumer.Resource : sample.parent.consumer.Resource[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( new java.lang.String ( StreamUtils . copyToByteArray ( sample.parent.consumer.Resource . getInputStream ( ) ) ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
