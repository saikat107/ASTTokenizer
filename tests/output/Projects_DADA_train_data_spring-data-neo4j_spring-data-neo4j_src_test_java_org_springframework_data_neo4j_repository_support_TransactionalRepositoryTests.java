<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.repository.support.TransactionTemplate = new TransactionTemplate ( org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager ) ; getGraphDatabaseService ( ) . execute ( STRING ) ; org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager . void ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.neo4j.repository.support.UserRepository . deleteAll ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.neo4j.repository.support.UserRepository . save ( new User ( STRING , STRING , STRING ) ) ; assertThat ( org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.neo4j.repository.support.UserRepository . findByEmailAddress ( STRING ) ; assertThat ( org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.neo4j.repository.support.UserRepository . findByAnnotatedQuery ( STRING ) ; assertThat ( org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.neo4j.repository.support.UserRepository . findOne ( NUMBER ) ; assertFalse ( org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager . org.springframework.data.neo4j.repository.support.TransactionDefinition ( ) . isReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { User org.springframework.data.neo4j.repository.support.User = org.springframework.data.neo4j.repository.support.UserRepository . save ( new User ( STRING , STRING , STRING ) ) ; org.springframework.data.neo4j.repository.support.UserRepository . delete ( org.springframework.data.neo4j.repository.support.User . getId ( ) ) ; assertFalse ( org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager . org.springframework.data.neo4j.repository.support.TransactionDefinition ( ) . isReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( PlatformTransactionManager org.springframework.data.neo4j.repository.support.PlatformTransactionManager ) { this . org.springframework.data.neo4j.repository.support.PlatformTransactionManager = org.springframework.data.neo4j.repository.support.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionStatus org.springframework.data.neo4j.repository.support.TransactionStatus ) throws org.springframework.data.neo4j.repository.support.TransactionException { org.springframework.data.neo4j.repository.support.PlatformTransactionManager . commit ( org.springframework.data.neo4j.repository.support.TransactionStatus ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.neo4j.repository.support.TransactionStatus org.springframework.data.neo4j.repository.support.TransactionStatus ( TransactionDefinition org.springframework.data.neo4j.repository.support.TransactionDefinition ) throws org.springframework.data.neo4j.repository.support.TransactionException { this . int ++ ; this . org.springframework.data.neo4j.repository.support.TransactionDefinition = org.springframework.data.neo4j.repository.support.TransactionDefinition ; return org.springframework.data.neo4j.repository.support.PlatformTransactionManager . getTransaction ( org.springframework.data.neo4j.repository.support.TransactionDefinition ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.neo4j.repository.support.TransactionDefinition org.springframework.data.neo4j.repository.support.TransactionDefinition ( ) { return org.springframework.data.neo4j.repository.support.TransactionDefinition ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . int = NUMBER ; this . org.springframework.data.neo4j.repository.support.TransactionDefinition = null ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionStatus org.springframework.data.neo4j.repository.support.TransactionStatus ) throws org.springframework.data.neo4j.repository.support.TransactionException { org.springframework.data.neo4j.repository.support.PlatformTransactionManager . rollback ( org.springframework.data.neo4j.repository.support.TransactionStatus ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager ( ) { return new org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager ( new Neo4jTransactionManager ( org.springframework.data.neo4j.repository.support.SessionFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.repository.support.SessionFactory org.springframework.data.neo4j.repository.support.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.repository.support.TransactionTemplate org.springframework.data.neo4j.repository.support.TransactionTemplate ( ) { return new TransactionTemplate ( org.springframework.data.neo4j.repository.support.TransactionalRepositoryTests.DelegatingTransactionManager ( ) ) ; }  <METHOD_END>
