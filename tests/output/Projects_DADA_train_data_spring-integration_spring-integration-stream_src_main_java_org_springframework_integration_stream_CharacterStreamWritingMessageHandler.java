<METHOD_START> public void ( java.io.Writer java.io.Writer ) { this( java.io.Writer , - NUMBER ); }  <METHOD_END>
<METHOD_START> public void ( java.io.Writer java.io.Writer , int int ) { Assert . notNull ( java.io.Writer , STRING ) ; if ( java.io.Writer instanceof java.io.BufferedWriter ) { this . java.io.BufferedWriter = ( java.io.BufferedWriter ) java.io.Writer ; } else if ( int > NUMBER ) { this . java.io.BufferedWriter = new java.io.BufferedWriter ( java.io.Writer , int ) ; } else { this . java.io.BufferedWriter = new java.io.BufferedWriter ( java.io.Writer ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.stream.CharacterStreamWritingMessageHandler org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( ) { return org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.stream.CharacterStreamWritingMessageHandler org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( java.lang.String java.lang.String ) { return org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( java.lang.System . java.io.PrintStream , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.stream.CharacterStreamWritingMessageHandler org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( ) { return org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.stream.CharacterStreamWritingMessageHandler org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( java.lang.String java.lang.String ) { return org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( java.lang.System . java.io.PrintStream , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.stream.CharacterStreamWritingMessageHandler org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( java.io.OutputStream java.io.OutputStream , java.lang.String java.lang.String ) { if ( java.lang.String == null ) { return new org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( new java.io.OutputStreamWriter ( java.io.OutputStream ) ) ; } try { return new org.springframework.integration.stream.CharacterStreamWritingMessageHandler ( new java.io.OutputStreamWriter ( java.io.OutputStream , java.lang.String ) ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String , java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.stream.Message<?> ) { java.lang.Object java.lang.Object = org.springframework.integration.stream.Message<> . getPayload ( ) ; if ( java.lang.Object == null ) { if ( this . org.springframework.integration.stream.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.stream.Log . warn ( STRING ) ; } return; } try { if ( java.lang.Object instanceof java.lang.String ) { this . java.io.BufferedWriter . void ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof char [] ) { this . java.io.BufferedWriter . void ( ( char [] ) java.lang.Object ) ; } else if ( java.lang.Object instanceof byte [] ) { this . java.io.BufferedWriter . void ( new java.lang.String ( ( byte [] ) java.lang.Object ) ) ; } else if ( java.lang.Object instanceof java.lang.Exception ) { java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter ( this . java.io.BufferedWriter , true ) ; ( ( java.lang.Exception ) java.lang.Object ) . void ( java.io.PrintWriter ) ; } else { this . java.io.BufferedWriter . void ( java.lang.Object . java.lang.String ( ) ) ; } if ( this . boolean ) { this . java.io.BufferedWriter . void ( ) ; } this . java.io.BufferedWriter . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessagingException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
