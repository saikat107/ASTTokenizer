<METHOD_START> @ Before public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> static void void ( ) { void ( STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> static void void ( java.lang.String ... java.lang.String[] ) { java.util.stream.Stream<java.lang.String> ( java.lang.String[] ) . void ( java.lang.String -> java.util.Map<?,?> ( java.lang.String ) . void ( ) ) ; }  <METHOD_END>
<METHOD_START> static java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ( java.lang.String java.lang.String ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( AnnotationUtils .class , java.lang.String ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ( java.util.Map<?,?> < ? , ? > ) ReflectionUtils . getField ( java.lang.reflect.Field , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.Leaf .class . java.lang.reflect.Method ( STRING ) ; assertNotNull ( java.lang.reflect.Method . T ( Order .class ) ) ; assertNotNull ( getAnnotation ( java.lang.reflect.Method , Order .class ) ) ; assertNotNull ( findAnnotation ( java.lang.reflect.Method , Order .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.Leaf .class . java.lang.reflect.Method ( STRING ) ; assertNull ( java.lang.reflect.Method . T ( Order .class ) ) ; assertNull ( getAnnotation ( java.lang.reflect.Method , Order .class ) ) ; assertNotNull ( findAnnotation ( java.lang.reflect.Method , Order .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.Leaf .class . java.lang.reflect.Method ( STRING ) ; assertNull ( java.lang.reflect.Method . T ( Order .class ) ) ; assertNotNull ( getAnnotation ( java.lang.reflect.Method , Order .class ) ) ; assertNotNull ( findAnnotation ( java.lang.reflect.Method , Order .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.Leaf .class . java.lang.reflect.Method ( STRING ) ; assertNull ( java.lang.reflect.Method . T ( Component .class ) ) ; assertNull ( getAnnotation ( java.lang.reflect.Method , Component .class ) ) ; assertNotNull ( findAnnotation ( java.lang.reflect.Method , Component .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.Leaf .class . java.lang.reflect.Method ( STRING ) ; assertNotNull ( java.lang.reflect.Method . T ( Order .class ) ) ; assertNotNull ( getAnnotation ( java.lang.reflect.Method , Order .class ) ) ; assertNotNull ( findAnnotation ( java.lang.reflect.Method , Order .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.Leaf .class . java.lang.reflect.Method ( STRING ) ; assertNull ( java.lang.reflect.Method . T ( Order .class ) ) ; assertNotNull ( getAnnotation ( java.lang.reflect.Method , Order .class ) ) ; assertNotNull ( findAnnotation ( java.lang.reflect.Method , Order .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.Leaf .class . java.lang.reflect.Method ( STRING ) ; assertNull ( java.lang.reflect.Method . T ( Order .class ) ) ; assertNull ( getAnnotation ( java.lang.reflect.Method , Order .class ) ) ; assertNotNull ( findAnnotation ( java.lang.reflect.Method , Order .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.Leaf .class . java.lang.reflect.Method ( STRING ) ; assertNull ( findAnnotation ( java.lang.reflect.Method , Order .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.SimpleFoo .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; assertTrue ( java.lang.reflect.Method . boolean ( ) ) ; assertNull ( java.lang.reflect.Method . T ( Order .class ) ) ; assertNull ( getAnnotation ( java.lang.reflect.Method , Order .class ) ) ; assertNotNull ( findAnnotation ( java.lang.reflect.Method , Order .class ) ) ; assertNotNull ( getAnnotation ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class ) ) ; assertNotNull ( findAnnotation ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.SimpleFoo .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; assertFalse ( java.lang.reflect.Method . boolean ( ) ) ; assertNull ( java.lang.reflect.Method . T ( Order .class ) ) ; assertNull ( getAnnotation ( java.lang.reflect.Method , Order .class ) ) ; assertNull ( findAnnotation ( java.lang.reflect.Method , Order .class ) ) ; assertNotNull ( java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.Transactional ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class ) ) ; assertNotNull ( getAnnotation ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class ) ) ; assertNotNull ( findAnnotation ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplementsInterfaceWithAnnotatedMethod .class . java.lang.reflect.Method ( STRING ) ; Order org.springframework.core.annotation.Order = findAnnotation ( java.lang.reflect.Method , Order .class ) ; assertNotNull ( org.springframework.core.annotation.Order ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.SubOfImplementsInterfaceWithAnnotatedMethod .class . java.lang.reflect.Method ( STRING ) ; Order org.springframework.core.annotation.Order = findAnnotation ( java.lang.reflect.Method , Order .class ) ; assertNotNull ( org.springframework.core.annotation.Order ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.SubOfAbstractImplementsInterfaceWithAnnotatedMethod .class . java.lang.reflect.Method ( STRING ) ; Order org.springframework.core.annotation.Order = findAnnotation ( java.lang.reflect.Method , Order .class ) ; assertNotNull ( org.springframework.core.annotation.Order ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Component org.springframework.core.annotation.Component = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface .class , Component .class ) ; assertNotNull ( org.springframework.core.annotation.Component ) ; assertEquals ( STRING , org.springframework.core.annotation.Component . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.AnnotationUtilsTests.Transactional org.springframework.core.annotation.AnnotationUtilsTests.Transactional = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.SubSubClassWithInheritedAnnotation .class , org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional ) ; assertTrue ( STRING , org.springframework.core.annotation.AnnotationUtilsTests.Transactional . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Component org.springframework.core.annotation.Component = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.SubSubClassWithInheritedMetaAnnotation .class , Component .class ) ; assertNotNull ( org.springframework.core.annotation.Component ) ; assertEquals ( STRING , org.springframework.core.annotation.Component . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Component org.springframework.core.annotation.Component = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.MetaMetaAnnotatedClass .class , Component .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.Component ) ; assertEquals ( STRING , org.springframework.core.annotation.Component . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Component org.springframework.core.annotation.Component = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.MetaMetaMetaAnnotatedClass .class , Component .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.Component ) ; assertEquals ( STRING , org.springframework.core.annotation.Component . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Component org.springframework.core.annotation.Component = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.TransactionalClass .class , Component .class ) ; assertNull ( STRING , org.springframework.core.annotation.Component ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Component org.springframework.core.annotation.Component = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.MetaCycleAnnotatedClass .class , Component .class ) ; assertNull ( STRING , org.springframework.core.annotation.Component ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.AnnotationUtilsTests.Transactional org.springframework.core.annotation.AnnotationUtilsTests.Transactional = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationInterface .class , org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationUtilsTests.Transactional ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.AnnotationUtilsTests.Transactional org.springframework.core.annotation.AnnotationUtilsTests.Transactional = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationInterface .class , org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationUtilsTests.Transactional ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.AnnotationUtilsTests.Transactional org.springframework.core.annotation.AnnotationUtilsTests.Transactional = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.SubSubInheritedAnnotationInterface .class , org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.AnnotationUtilsTests.Transactional ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Order org.springframework.core.annotation.Order = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationInterface .class , Order .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.Order ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Order org.springframework.core.annotation.Order = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationInterface .class , Order .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.Order ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Order org.springframework.core.annotation.Order = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.SubSubNonInheritedAnnotationInterface .class , Order .class ) ; assertNotNull ( STRING , org.springframework.core.annotation.Order ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( findAnnotationDeclaringClass ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.NonAnnotatedInterface .class ) ) ; assertNull ( findAnnotationDeclaringClass ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.NonAnnotatedClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationInterface .class , findAnnotationDeclaringClass ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationInterface .class ) ) ; assertNull ( findAnnotationDeclaringClass ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationInterface .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class , findAnnotationDeclaringClass ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class , findAnnotationDeclaringClass ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationInterface .class , findAnnotationDeclaringClass ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationInterface .class ) ) ; assertNull ( findAnnotationDeclaringClass ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationInterface .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class , findAnnotationDeclaringClass ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class , findAnnotationDeclaringClass ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationClass .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> = java.util.Collections . java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class ) ; assertNull ( findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.NonAnnotatedInterface .class ) ) ; assertNull ( findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.NonAnnotatedClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationInterface .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationInterface .class ) ) ; assertNull ( findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationInterface .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationClass .class ) ) ; java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> = java.util.Collections . java.util.List<java.lang.Class<org.springframework.core.annotation.Order>> ( Order .class ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationInterface .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationInterface .class ) ) ; assertNull ( findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationInterface .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationClass .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> = java.util.List<java.lang.Class<? extends java.lang.Object>> ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , Order .class ) ; assertNull ( findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.NonAnnotatedInterface .class ) ) ; assertNull ( findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.NonAnnotatedClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationInterface .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationInterface .class ) ) ; assertNull ( findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationInterface .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationInterface .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationInterface .class ) ) ; assertNull ( findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationInterface .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.TransactionalClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.TransactionalClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.TransactionalAndOrderedClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.TransactionalAndOrderedClass .class ) ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.TransactionalAndOrderedClass .class , findAnnotationDeclaringClassForTypes ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , org.springframework.core.annotation.AnnotationUtilsTests.SubTransactionalAndOrderedClass .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( isAnnotationDeclaredLocally ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.NonAnnotatedInterface .class ) ) ; assertFalse ( isAnnotationDeclaredLocally ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.NonAnnotatedClass .class ) ) ; assertTrue ( isAnnotationDeclaredLocally ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationInterface .class ) ) ; assertFalse ( isAnnotationDeclaredLocally ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationInterface .class ) ) ; assertTrue ( isAnnotationDeclaredLocally ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class ) ) ; assertFalse ( isAnnotationDeclaredLocally ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationClass .class ) ) ; assertTrue ( isAnnotationDeclaredLocally ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationInterface .class ) ) ; assertFalse ( isAnnotationDeclaredLocally ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationInterface .class ) ) ; assertTrue ( isAnnotationDeclaredLocally ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class ) ) ; assertFalse ( isAnnotationDeclaredLocally ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationClass .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( isAnnotationInherited ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.NonAnnotatedInterface .class ) ) ; assertFalse ( isAnnotationInherited ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.NonAnnotatedClass .class ) ) ; assertFalse ( isAnnotationInherited ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationInterface .class ) ) ; assertFalse ( isAnnotationInherited ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationInterface .class ) ) ; assertFalse ( isAnnotationInherited ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.InheritedAnnotationClass .class ) ) ; assertTrue ( isAnnotationInherited ( org.springframework.core.annotation.AnnotationUtilsTests.Transactional .class , org.springframework.core.annotation.AnnotationUtilsTests.SubInheritedAnnotationClass .class ) ) ; assertFalse ( isAnnotationInherited ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationInterface .class ) ) ; assertFalse ( isAnnotationInherited ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationInterface .class ) ) ; assertFalse ( isAnnotationInherited ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.NonInheritedAnnotationClass .class ) ) ; assertFalse ( isAnnotationInherited ( Order .class , org.springframework.core.annotation.AnnotationUtilsTests.SubNonInheritedAnnotationClass .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Component org.springframework.core.annotation.Component = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . A ( Component .class ) ; assertNotNull ( org.springframework.core.annotation.Component ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = ( AnnotationAttributes ) getAnnotationAttributes ( org.springframework.core.annotation.Component ) ; assertNotNull ( org.springframework.core.annotation.AnnotationAttributes ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationAttributes . getString ( VALUE ) ) ; assertEquals ( Component .class , org.springframework.core.annotation.AnnotationAttributes . annotationType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan = org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanClass .class . org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getAnnotationAttributes ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanClass .class , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan ) ; assertNotNull ( org.springframework.core.annotation.AnnotationAttributes ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan .class , org.springframework.core.annotation.AnnotationAttributes . annotationType ( ) ) ; org.springframework.core.annotation.AnnotationUtilsTests.Filter [] org.springframework.core.annotation.AnnotationUtilsTests.Filter[] = org.springframework.core.annotation.AnnotationAttributes . getAnnotationArray ( STRING , org.springframework.core.annotation.AnnotationUtilsTests.Filter .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.Filter[] ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.Filter> ( org.springframework.core.annotation.AnnotationUtilsTests.Filter[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.Filter :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertEquals ( java.util.List<java.lang.String> ( STRING , STRING ) , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = ( AnnotationAttributes ) getAnnotationAttributes ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertNotNull ( org.springframework.core.annotation.AnnotationAttributes ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class , org.springframework.core.annotation.AnnotationAttributes . annotationType ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationAttributes . getString ( STRING ) ) ; assertArrayEquals ( STRING , java.lang.String[] ( STRING ) , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( VALUE ) ) ; assertArrayEquals ( STRING , java.lang.String[] ( STRING ) , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; org.springframework.core.annotation.AnnotationAttributes = ( AnnotationAttributes ) getAnnotationAttributes ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertNotNull ( org.springframework.core.annotation.AnnotationAttributes ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class , org.springframework.core.annotation.AnnotationAttributes . annotationType ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationAttributes . getString ( STRING ) ) ; assertArrayEquals ( STRING , java.lang.String[] ( STRING ) , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( VALUE ) ) ; assertArrayEquals ( STRING , java.lang.String[] ( STRING ) , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; getAnnotationAttributes ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.SimpleFoo .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; Order org.springframework.core.annotation.Order = findAnnotation ( java.lang.reflect.Method , Order .class ) ; assertEquals ( NUMBER , getValue ( org.springframework.core.annotation.Order , VALUE ) ) ; assertEquals ( NUMBER , getValue ( org.springframework.core.annotation.Order ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = NonPublicAnnotatedClass .class . java.lang.annotation.Annotation[] ( ) ; assertEquals ( NUMBER , java.lang.annotation.Annotation[] . int ) ; java.lang.annotation.Annotation java.lang.annotation.Annotation = java.lang.annotation.Annotation[] [ NUMBER ] ; assertNotNull ( java.lang.annotation.Annotation ) ; assertEquals ( STRING , java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) ; assertEquals ( NUMBER , getValue ( java.lang.annotation.Annotation , VALUE ) ) ; assertEquals ( NUMBER , getValue ( java.lang.annotation.Annotation ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.SimpleFoo .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; Order org.springframework.core.annotation.Order = findAnnotation ( java.lang.reflect.Method , Order .class ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE , getDefaultValue ( org.springframework.core.annotation.Order , VALUE ) ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE , getDefaultValue ( org.springframework.core.annotation.Order ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = NonPublicAnnotatedClass .class . java.lang.annotation.Annotation[] ( ) ; assertEquals ( NUMBER , java.lang.annotation.Annotation[] . int ) ; java.lang.annotation.Annotation java.lang.annotation.Annotation = java.lang.annotation.Annotation[] [ NUMBER ] ; assertNotNull ( java.lang.annotation.Annotation ) ; assertEquals ( STRING , java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) ; assertEquals ( - NUMBER , getDefaultValue ( java.lang.annotation.Annotation , VALUE ) ) ; assertEquals ( - NUMBER , getDefaultValue ( java.lang.annotation.Annotation ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( Ordered . LOWEST_PRECEDENCE , getDefaultValue ( Order .class , VALUE ) ) ; assertEquals ( Ordered . LOWEST_PRECEDENCE , getDefaultValue ( Order .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.annotation.Repeatable java.lang.annotation.Repeatable = findAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableMeta1 .class , java.lang.annotation.Repeatable .class ) ; assertNotNull ( java.lang.annotation.Repeatable ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableContainer .class , java.lang.annotation.Repeatable . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.InterfaceWithRepeated .class . java.lang.reflect.Method ( STRING ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> < org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable > java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getRepeatableAnnotations ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableContainer .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.BrokenContextConfig .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; getRepeatableAnnotations ( org.springframework.core.annotation.AnnotationUtilsTests.BrokenConfigHierarchyTestCase .class , org.springframework.core.annotation.AnnotationUtilsTests.BrokenContextConfig .class , org.springframework.core.annotation.AnnotationUtilsTests.BrokenHierarchy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> < org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig > java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> = getRepeatableAnnotations ( org.springframework.core.annotation.AnnotationUtilsTests.ConfigHierarchyTestCase .class , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class , null ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> ) ; assertEquals ( STRING , NUMBER , java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> . int ( ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> = getRepeatableAnnotations ( org.springframework.core.annotation.AnnotationUtilsTests.ConfigHierarchyTestCase .class , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class , org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable [] org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] = org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableClass .class . org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> < org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable > java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getRepeatableAnnotations ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableClass .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableContainer .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getRepeatableAnnotations ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableClass .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotationUtilsTests.SubMyRepeatableClass .class ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable [] org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> < org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable > java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getRepeatableAnnotations ( java.lang.Class<> , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableContainer .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getRepeatableAnnotations ( java.lang.Class<> , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotationUtilsTests.SubMyRepeatableWithAdditionalLocalDeclarationsClass .class ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable [] org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> < org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable > java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getRepeatableAnnotations ( java.lang.Class<> , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableContainer .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getRepeatableAnnotations ( java.lang.Class<> , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotationUtilsTests.SubSubMyRepeatableWithAdditionalLocalDeclarationsClass .class ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable [] org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> < org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable > java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getRepeatableAnnotations ( java.lang.Class<> , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableContainer .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getRepeatableAnnotations ( java.lang.Class<> , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable [] org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] = org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableClass .class . org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> < org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable > java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getDeclaredRepeatableAnnotations ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableClass .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableContainer .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getDeclaredRepeatableAnnotations ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableClass .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; java.util.List<java.lang.String> = java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ( ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotationUtilsTests.SubMyRepeatableClass .class ; org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable [] org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable[] . int , is ( NUMBER ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> < org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable > java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getDeclaredRepeatableAnnotations ( java.lang.Class<> , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableContainer .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; assertThat ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . int ( ) , is ( NUMBER ) ) ; java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> = getDeclaredRepeatableAnnotations ( java.lang.Class<> , org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable .class ) ; assertNotNull ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> ) ; assertThat ( java.util.Set<org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.AliasedComposedContextConfig .class . java.lang.reflect.Method ( STRING ) ; assertThat ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , Component .class ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class . java.lang.reflect.Method ( STRING ) ; assertThat ( getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.AliasedComposedContextConfig .class . java.lang.reflect.Method ( STRING ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class . java.lang.reflect.Method ( STRING ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING , STRING , STRING , STRING , STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING , STRING , STRING , STRING , STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING , STRING , STRING , STRING , STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING , STRING , STRING , STRING , STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING , STRING , STRING , STRING , STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING , STRING , STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig .class . java.lang.reflect.Method ( STRING ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig .class . java.lang.reflect.Method ( STRING ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING , STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig .class . java.lang.reflect.Method ( STRING ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig .class . java.lang.reflect.Method ( STRING ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig .class ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesWithImpliedAliasNamesOmittedContextConfig .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesWithImpliedAliasNamesOmittedContextConfig .class . java.lang.reflect.Method ( STRING ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig .class ) ) ; assertEquals ( STRING , getAttributeOverrideName ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig .class ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING ) ) ; assertThat ( getAttributeAliasNames ( java.lang.reflect.Method ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Component org.springframework.core.annotation.Component = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . A ( Component .class ) ; assertNotNull ( org.springframework.core.annotation.Component ) ; Component org.springframework.core.annotation.Component = synthesizeAnnotation ( org.springframework.core.annotation.Component ) ; assertNotNull ( org.springframework.core.annotation.Component ) ; assertSame ( org.springframework.core.annotation.Component , org.springframework.core.annotation.Component ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.Component . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( STRING , synthesizeAnnotation ( null , null ) ) ; assertNull ( STRING , synthesizeAnnotation ( null , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertNotSame ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , instanceOf ( SynthesizedAnnotation .class ) ) ; assertSame ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] ( STRING ) , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] ( STRING ) , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingAttributeDeclaration org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingAttributeDeclaration = org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingAttributeDeclarationClass .class . org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingAttributeDeclaration ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingAttributeDeclaration .class ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingAttributeDeclaration .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingAttributeDeclaration ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithDuplicateAttributeDeclaration org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithDuplicateAttributeDeclaration = org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithDuplicateAttributeDeclarationClass .class . org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithDuplicateAttributeDeclaration ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithDuplicateAttributeDeclaration .class ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithDuplicateAttributeDeclaration .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithDuplicateAttributeDeclaration ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.AliasForNonexistentAttribute org.springframework.core.annotation.AnnotationUtilsTests.AliasForNonexistentAttribute = org.springframework.core.annotation.AnnotationUtilsTests.AliasForNonexistentAttributeClass .class . org.springframework.core.annotation.AnnotationUtilsTests.AliasForNonexistentAttribute ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForNonexistentAttribute .class ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForNonexistentAttribute .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForNonexistentAttribute ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithoutMirroredAliasFor org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithoutMirroredAliasFor = org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithoutMirroredAliasForClass .class . org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithoutMirroredAliasFor ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithoutMirroredAliasFor .class ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithoutMirroredAliasFor .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithoutMirroredAliasFor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMirroredAliasForWrongAttribute org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMirroredAliasForWrongAttribute = org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMirroredAliasForWrongAttributeClass .class . org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMirroredAliasForWrongAttribute ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMirroredAliasForWrongAttribute .class ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMirroredAliasForWrongAttribute .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( either ( containsString ( STRING ) ) . or ( containsString ( STRING ) ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMirroredAliasForWrongAttribute ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeOfDifferentType org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeOfDifferentType = org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeOfDifferentTypeClass .class . org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeOfDifferentType ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeOfDifferentType .class ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeOfDifferentType .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeOfDifferentType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingDefaultValues org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingDefaultValues = org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingDefaultValuesClass .class . org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingDefaultValues ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingDefaultValues .class ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingDefaultValues .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForWithMissingDefaultValues ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeWithDifferentDefaultValue org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeWithDifferentDefaultValue = org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeWithDifferentDefaultValueClass .class . org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeWithDifferentDefaultValue ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeWithDifferentDefaultValue .class ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeWithDifferentDefaultValue .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.AliasForAttributeWithDifferentDefaultValue ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.AliasedComposedContextConfigNotMetaPresent org.springframework.core.annotation.AnnotationUtilsTests.AliasedComposedContextConfigNotMetaPresent = org.springframework.core.annotation.AnnotationUtilsTests.AliasedComposedContextConfigNotMetaPresentClass .class . org.springframework.core.annotation.AnnotationUtilsTests.AliasedComposedContextConfigNotMetaPresent ( org.springframework.core.annotation.AnnotationUtilsTests.AliasedComposedContextConfigNotMetaPresent .class ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.AliasedComposedContextConfigNotMetaPresent .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.AliasedComposedContextConfigNotMetaPresent ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , instanceOf ( SynthesizedAnnotation .class ) ) ; assertNotSame ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] ( STRING ) , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] ( STRING ) , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String[] ( ) ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , instanceOf ( SynthesizedAnnotation .class ) ) ; assertNotSame ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] ( STRING ) , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String[] ( ) ) ; assertArrayEquals ( STRING , java.lang.String[] ( STRING ) , org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.core.annotation.AnnotationUtilsTests.ValueImplicitAliasesContextConfigClass .class , STRING ) ; void ( org.springframework.core.annotation.AnnotationUtilsTests.Location1ImplicitAliasesContextConfigClass .class , STRING ) ; void ( org.springframework.core.annotation.AnnotationUtilsTests.XmlImplicitAliasesContextConfigClass .class , STRING ) ; void ( org.springframework.core.annotation.AnnotationUtilsTests.GroovyImplicitAliasesContextConfigClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) throws java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig ) ; org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig , instanceOf ( SynthesizedAnnotation .class ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.core.annotation.AnnotationUtilsTests.ValueImplicitAliasesWithImpliedAliasNamesOmittedContextConfigClass .class , STRING ) ; void ( org.springframework.core.annotation.AnnotationUtilsTests.LocationsImplicitAliasesWithImpliedAliasNamesOmittedContextConfigClass .class , STRING ) ; void ( org.springframework.core.annotation.AnnotationUtilsTests.XmlFilesImplicitAliasesWithImpliedAliasNamesOmittedContextConfigClass .class , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) throws java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig ) ; org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig , instanceOf ( SynthesizedAnnotation .class ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithImpliedAliasNamesOmittedContextConfig . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfigClass .class ; org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig ) ; org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig , instanceOf ( SynthesizedAnnotation .class ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesForAliasPairContextConfig . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfigClass .class ; org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig ( org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig ) ; org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig , instanceOf ( SynthesizedAnnotation .class ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesContextConfig . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfigClass .class ; org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig ( org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig ) ; org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig , instanceOf ( SynthesizedAnnotation .class ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.TransitiveImplicitAliasesForAliasPairContextConfig . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfigClass .class ; java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig> < org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig > java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig> = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig .class ; org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig ( java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig> ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING + java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig> . java.lang.String ( ) + STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING + java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig> . java.lang.String ( ) + STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithMissingDefaultValuesContextConfig , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfigClass .class ; java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig> < org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig > java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig> = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig .class ; org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig ( java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig> ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING + java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig> . java.lang.String ( ) + STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING + java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig> . java.lang.String ( ) + STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDifferentDefaultValuesContextConfig , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfigClass .class ; java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig> < org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig > java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig> = org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig .class ; org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig = java.lang.Class<> . org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig ( java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig> ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig ) ; org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig , java.lang.Class<> ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig ) ; org.springframework.core.annotation.ExpectedException . expect ( AnnotationConfigurationException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( java.lang.Class<org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig> . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( java.lang.Class<> . java.lang.String ( ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( either ( containsString ( STRING ) ) . or ( containsString ( STRING ) ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( either ( containsString ( STRING ) ) . or ( containsString ( STRING ) ) ) ; org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesWithDuplicateValuesContextConfig . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Component org.springframework.core.annotation.Component = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . A ( Component .class ) ; assertNotNull ( org.springframework.core.annotation.Component ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map ( VALUE , STRING ) ; Component org.springframework.core.annotation.Component = synthesizeAnnotation ( java.util.Map<java.lang.String,java.lang.Object> , Component .class , org.springframework.core.annotation.AnnotationUtilsTests.WebController .class ) ; assertNotNull ( org.springframework.core.annotation.Component ) ; assertNotSame ( org.springframework.core.annotation.Component , org.springframework.core.annotation.Component ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.Component . value ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.Component . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter = org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilterClass .class . org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter . org.springframework.core.annotation.AnnotationUtilsTests.Filter ( ) . java.lang.String ( ) ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getAnnotationAttributes ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilterClass .class , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter , false , true ) ; assertNotNull ( org.springframework.core.annotation.AnnotationAttributes ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter .class , org.springframework.core.annotation.AnnotationAttributes . annotationType ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.core.annotation.AnnotationAttributes . get ( STRING ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationAttributes , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter .class , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilterClass .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter ) ; assertNotSame ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanSingleFilter . org.springframework.core.annotation.AnnotationUtilsTests.Filter ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan = org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanClass .class . org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getAnnotationAttributes ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanClass .class , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan , false , true ) ; assertNotNull ( org.springframework.core.annotation.AnnotationAttributes ) ; assertEquals ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan .class , org.springframework.core.annotation.AnnotationAttributes . annotationType ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > [] java.util.Map<java.lang.String,java.lang.Object>[] = ( java.util.Map [] ) org.springframework.core.annotation.AnnotationAttributes . get ( STRING ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object>[] ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<java.util.Map<java.lang.String,java.lang.Object>> ( java.util.Map<java.lang.String,java.lang.Object>[] ) . java.util.stream.Stream<java.lang.String> ( java.util.Map<java.lang.String,java.lang.Object> -> ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertEquals ( java.util.List<java.lang.String> ( STRING , STRING ) , java.util.List<java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.Object>[] [ NUMBER ] . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object>[] [ NUMBER ] . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object>[] [ NUMBER ] . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object>[] [ NUMBER ] . java.lang.Object ( STRING , NUMBER ) ; org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationAttributes , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan .class , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScanClass .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan ) ; assertNotSame ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan , org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan ) ; java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.Filter> ( org.springframework.core.annotation.AnnotationUtilsTests.ComponentScan . org.springframework.core.annotation.AnnotationUtilsTests.Filter[] ( ) ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.Filter :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertEquals ( java.util.List<java.lang.String> ( STRING , STRING ) , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.AnnotationWithDefaults org.springframework.core.annotation.AnnotationUtilsTests.AnnotationWithDefaults = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.AnnotationWithDefaults .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.AnnotationWithDefaults ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.AnnotationWithDefaults . java.lang.String ( ) ) ; assertTrue ( STRING , org.springframework.core.annotation.AnnotationUtilsTests.AnnotationWithDefaults . boolean ( ) ) ; assertArrayEquals ( STRING , new char [] { 'a' , 'b' , 'c' } , org.springframework.core.annotation.AnnotationUtilsTests.AnnotationWithDefaults . char[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig = synthesizeAnnotation ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class , null ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.Get org.springframework.core.annotation.AnnotationUtilsTests.Get = synthesizeAnnotation ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.core.annotation.AnnotationUtilsTests.Get .class , null ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.Get ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.Get . java.lang.String ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.Get . java.lang.String ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.Get = synthesizeAnnotation ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.core.annotation.AnnotationUtilsTests.Get .class , null ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.Get ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.Get . java.lang.String ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.AnnotationUtilsTests.Get . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String , java.lang.String ) ; org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig = synthesizeAnnotation ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig .class , null ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig . java.lang.String ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , null ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; void ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { org.springframework.core.annotation.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING + org.springframework.core.annotation.AnnotationUtilsTests.AnnotationWithoutDefaults .class . java.lang.String ( ) + STRING ) ) ; synthesizeAnnotation ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.core.annotation.AnnotationUtilsTests.AnnotationWithoutDefaults .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map ( VALUE , NUMBER ) ; org.springframework.core.annotation.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING + Component .class . java.lang.String ( ) + STRING ) ) ; synthesizeAnnotation ( java.util.Map<java.lang.String,java.lang.Object> , Component .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Component org.springframework.core.annotation.Component = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . A ( Component .class ) ; assertNotNull ( org.springframework.core.annotation.Component ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = getAnnotationAttributes ( org.springframework.core.annotation.AnnotationUtilsTests.WebController .class , org.springframework.core.annotation.Component ) ; assertNotNull ( org.springframework.core.annotation.AnnotationAttributes ) ; Component org.springframework.core.annotation.Component = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationAttributes , Component .class , org.springframework.core.annotation.AnnotationUtilsTests.WebController .class ) ; assertNotNull ( org.springframework.core.annotation.Component ) ; assertNotSame ( org.springframework.core.annotation.Component , org.springframework.core.annotation.Component ) ; assertEquals ( org.springframework.core.annotation.Component , org.springframework.core.annotation.Component ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.Component . value ( ) ) ; assertEquals ( STRING , STRING , org.springframework.core.annotation.Component . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String ( ) , is ( not ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String ( ) ) ) ) ; void ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; void ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) { java.lang.String java.lang.String = org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . java.lang.String ( ) ; assertThat ( java.lang.String , startsWith ( STRING + org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class . java.lang.String ( ) + STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( not ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( not ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( not ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping , is ( not ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.annotation.AnnotationUtilsTests.WebController .class . java.lang.reflect.Method ( STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = java.lang.reflect.Method . org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; org.springframework.core.annotation.AnnotationUtilsTests.WebMapping org.springframework.core.annotation.AnnotationUtilsTests.WebMapping = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( not ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( not ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( not ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) , is ( not ( org.springframework.core.annotation.AnnotationUtilsTests.WebMapping . int ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( STRING , null ) ; java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ) ClassUtils . forName ( STRING , null ) ; java.lang.annotation.Annotation java.lang.annotation.Annotation = java.lang.Class<> . getAnnotation ( java.lang.Class<> ) ; assertNotNull ( java.lang.annotation.Annotation ) ; java.lang.annotation.Annotation java.lang.annotation.Annotation = synthesizeAnnotation ( java.lang.annotation.Annotation ) ; assertNotSame ( java.lang.annotation.Annotation , java.lang.annotation.Annotation ) ; assertNotNull ( java.lang.annotation.Annotation ) ; assertEquals ( STRING , STRING , getValue ( java.lang.annotation.Annotation , STRING ) ) ; assertEquals ( STRING , STRING , getValue ( java.lang.annotation.Annotation , STRING ) ) ; assertEquals ( STRING , STRING , getValue ( java.lang.annotation.Annotation , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy = org.springframework.core.annotation.AnnotationUtilsTests.ConfigHierarchyTestCase .class . org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy ( org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy ) ; org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy ) ; assertNotSame ( org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy , org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy , instanceOf ( SynthesizedAnnotation .class ) ) ; org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig [] org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] = org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy . org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] ( ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] ) ; assertTrue ( STRING , java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] ) . boolean ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig -> org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig instanceof SynthesizedAnnotation ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING ) ; org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy = org.springframework.core.annotation.AnnotationUtilsTests.ConfigHierarchyTestCase .class . org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy ( org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy ) ; org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy , instanceOf ( SynthesizedAnnotation .class ) ) ; org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig = org.springframework.core.annotation.AnnotationUtilsTests.SimpleConfigTestCase .class . org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig ) ; org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig [] org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] = org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy . org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] [ NUMBER ] = org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig ; org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] = org.springframework.core.annotation.AnnotationUtilsTests.Hierarchy . org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.stream.Stream<org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig[] ) . java.util.stream.Stream<java.lang.String> ( org.springframework.core.annotation.AnnotationUtilsTests.ContextConfig :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; assertThat ( java.util.List<java.lang.String> , is ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer = org.springframework.core.annotation.AnnotationUtilsTests.GroupOfCharsClass .class . org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer ( org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer ) ; org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer = synthesizeAnnotation ( org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer ) ; assertThat ( org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer , instanceOf ( SynthesizedAnnotation .class ) ) ; char [] char[] = org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer . char[] ( ) ; assertArrayEquals ( new char [] { 'x' , 'y' , 'z' } , char[] ) ; char[] [ NUMBER ] = '?' ; char[] = org.springframework.core.annotation.AnnotationUtilsTests.CharsContainer . char[] ( ) ; assertArrayEquals ( new char [] { 'x' , 'y' , 'z' } , char[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs static < T > T [] T[] ( T ... T[] ) { return T[] ; }  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) void void ( )  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.Meta1 public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.Meta1 public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.MetaMeta public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Order ( NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) public abstract void void ( T T );  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.core.annotation.AnnotationUtilsTests.Transactional public void void ( final java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ Order void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable ( STRING ) @ org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableContainer ( { @ org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable ( STRING ) , @ org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatable ( STRING ) } ) @ org.springframework.core.annotation.AnnotationUtilsTests.MyRepeatableMeta1 void void ( )  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( java.lang.String[] = STRING , java.lang.String = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( java.lang.String[] = STRING , java.lang.String = STRING , org.springframework.core.annotation.AnnotationUtilsTests.RequestMethod[] = { org.springframework.core.annotation.AnnotationUtilsTests.RequestMethod . org.springframework.core.annotation.AnnotationUtilsTests.RequestMethod , org.springframework.core.annotation.AnnotationUtilsTests.RequestMethod . org.springframework.core.annotation.AnnotationUtilsTests.RequestMethod } ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.Get ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.Get ( java.lang.String = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.Post ( java.lang.String = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( java.lang.String[] = STRING , java.lang.String[] = STRING , java.lang.String = STRING , org.springframework.core.annotation.AnnotationUtilsTests.RequestMethod[] = { org.springframework.core.annotation.AnnotationUtilsTests.RequestMethod . org.springframework.core.annotation.AnnotationUtilsTests.RequestMethod , org.springframework.core.annotation.AnnotationUtilsTests.RequestMethod . org.springframework.core.annotation.AnnotationUtilsTests.RequestMethod } ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.core.annotation.AnnotationUtilsTests.WebMapping ( java.lang.String[] = STRING , java.lang.String[] = STRING , java.lang.String = STRING ) public void void ( ) {		}  <METHOD_END>
