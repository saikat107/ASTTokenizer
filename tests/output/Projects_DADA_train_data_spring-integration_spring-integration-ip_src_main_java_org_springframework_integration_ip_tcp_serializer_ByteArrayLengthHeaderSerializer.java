<METHOD_START> public void ( ) { this( int ); }  <METHOD_END>
<METHOD_START> public void ( int int ) { if ( int != int && int != int && int != int ) { throw new java.lang.IllegalArgumentException ( STRING + int ) ; } this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { int int = this . int ( java.io.InputStream ) ; if ( this . org.springframework.integration.ip.tcp.serializer.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.ip.tcp.serializer.Log . debug ( STRING + int ) ; } byte [] byte[] = null ; try { if ( int > this . maxMessageSize ) { throw new java.io.IOException ( STRING + int + STRING + this . maxMessageSize ) ; } byte[] = new byte [ int ] ; int ( java.io.InputStream , byte[] , false ) ; return byte[] ; } catch ( java.io.IOException java.io.IOException ) { publishEvent ( java.io.IOException , byte[] , - NUMBER ) ; throw java.io.IOException ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { publishEvent ( java.lang.RuntimeException , byte[] , - NUMBER ) ; throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { this . void ( java.io.OutputStream , byte[] . int ) ; java.io.OutputStream . void ( byte[] ) ; }  <METHOD_END>
<METHOD_START> protected int int ( java.io.InputStream java.io.InputStream , byte [] byte[] , boolean boolean )			throws java.io.IOException { int int = NUMBER ; int int = byte[] . int ; while ( int < int ) { int int ; int = java.io.InputStream . int ( byte[] , int , int - int ) ; if ( int < NUMBER && boolean && int == NUMBER ) { return int ; } if ( int < NUMBER ) { throw new java.io.IOException ( STRING + int + STRING + int ) ; } int += int ; if ( this . org.springframework.integration.ip.tcp.serializer.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.ip.tcp.serializer.Log . debug ( STRING + int + STRING + int + STRING + int ) ; } } return NUMBER ; }  <METHOD_END>
<METHOD_START> protected void void ( java.io.OutputStream java.io.OutputStream , int int ) throws java.io.IOException { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( this . int ) ; switch ( this . int ) { case int : java.nio.ByteBuffer . java.nio.ByteBuffer ( int ) ; break; case int : if ( int > NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + this . int + STRING + int ) ; } java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) int ) ; break; case int : if ( int > NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + this . int + STRING + int ) ; } java.nio.ByteBuffer . java.nio.ByteBuffer ( ( short ) int ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING + this . int ) ; } java.io.OutputStream . void ( java.nio.ByteBuffer . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> protected int int ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { byte [] byte[] = new byte [ this . int ] ; try { int int = int ( java.io.InputStream , byte[] , true ) ; if ( int < NUMBER ) { throw new SoftEndOfStreamException ( STRING ) ; } int int ; switch ( this . int ) { case int : int = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) . int ( ) ; if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + int + STRING ) ; } break; case int : int = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) . byte ( ) & NUMBER ; break; case int : int = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) . short ( ) & NUMBER ; break; default: throw new java.lang.IllegalArgumentException ( STRING + this . int ) ; } return int ; } catch ( SoftEndOfStreamException org.springframework.integration.ip.tcp.serializer.SoftEndOfStreamException ) { throw org.springframework.integration.ip.tcp.serializer.SoftEndOfStreamException ; } catch ( java.io.IOException java.io.IOException ) { publishEvent ( java.io.IOException , byte[] , - NUMBER ) ; throw java.io.IOException ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { publishEvent ( java.lang.RuntimeException , byte[] , - NUMBER ) ; throw java.lang.RuntimeException ; } }  <METHOD_END>
