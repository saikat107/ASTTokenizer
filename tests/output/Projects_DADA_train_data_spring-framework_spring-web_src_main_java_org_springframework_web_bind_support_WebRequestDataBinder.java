<METHOD_START> public void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { super( java.lang.Object , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void void ( WebRequest org.springframework.web.bind.support.WebRequest ) { MutablePropertyValues org.springframework.web.bind.support.MutablePropertyValues = new MutablePropertyValues ( org.springframework.web.bind.support.WebRequest . getParameterMap ( ) ) ; if ( boolean ( org.springframework.web.bind.support.WebRequest ) && org.springframework.web.bind.support.WebRequest instanceof NativeWebRequest ) { MultipartRequest org.springframework.web.bind.support.MultipartRequest = ( ( NativeWebRequest ) org.springframework.web.bind.support.WebRequest ) . getNativeRequest ( MultipartRequest .class ) ; if ( org.springframework.web.bind.support.MultipartRequest != null ) { bindMultipart ( org.springframework.web.bind.support.MultipartRequest . getMultiFileMap ( ) , org.springframework.web.bind.support.MutablePropertyValues ) ; } else { HttpServletRequest org.springframework.web.bind.support.HttpServletRequest = ( ( NativeWebRequest ) org.springframework.web.bind.support.WebRequest ) . getNativeRequest ( HttpServletRequest .class ) ; void ( org.springframework.web.bind.support.HttpServletRequest , org.springframework.web.bind.support.MutablePropertyValues ) ; } } doBind ( org.springframework.web.bind.support.MutablePropertyValues ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( WebRequest org.springframework.web.bind.support.WebRequest ) { java.lang.String java.lang.String = org.springframework.web.bind.support.WebRequest . getHeader ( STRING ) ; return ( java.lang.String != null && StringUtils . startsWithIgnoreCase ( java.lang.String , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.web.bind.support.HttpServletRequest , MutablePropertyValues org.springframework.web.bind.support.MutablePropertyValues ) { try { MultiValueMap < java.lang.String , Part > org.springframework.web.bind.support.MultiValueMap<java.lang.String,org.springframework.web.bind.support.Part> = new LinkedMultiValueMap <> ( ) ; for ( Part org.springframework.web.bind.support.Part : org.springframework.web.bind.support.HttpServletRequest . getParts ( ) ) { org.springframework.web.bind.support.MultiValueMap<java.lang.String,org.springframework.web.bind.support.Part> . add ( org.springframework.web.bind.support.Part . getName ( ) , org.springframework.web.bind.support.Part ) ; } for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.support.Part>> < java.lang.String , java.util.List<org.springframework.web.bind.support.Part> < Part > > java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.support.Part>> : org.springframework.web.bind.support.MultiValueMap<java.lang.String,org.springframework.web.bind.support.Part> . entrySet ( ) ) { if ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.support.Part>> . getValue ( ) . size ( ) == NUMBER ) { Part org.springframework.web.bind.support.Part = java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.support.Part>> . getValue ( ) . get ( NUMBER ) ; if ( isBindEmptyMultipartFiles ( ) || org.springframework.web.bind.support.Part . getSize ( ) > NUMBER ) { org.springframework.web.bind.support.MutablePropertyValues . add ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.support.Part>> . getKey ( ) , org.springframework.web.bind.support.Part ) ; } } else { org.springframework.web.bind.support.MutablePropertyValues . add ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.support.Part>> . getKey ( ) , java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.web.bind.support.Part>> . getValue ( ) ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { throw new MultipartException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.web.bind.support.BindException { if ( getBindingResult ( ) . hasErrors ( ) ) { throw new BindException ( getBindingResult ( ) ) ; } }  <METHOD_END>
