<METHOD_START> @ Bean org.springframework.data.jpa.repository.config.EvaluationContextExtension org.springframework.data.jpa.repository.config.EvaluationContextExtension ( ) { return new SampleEvaluationContextExtension ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { AuditableUser org.springframework.data.jpa.repository.config.AuditableUser = new AuditableUser ( null ) ; org.springframework.data.jpa.repository.config.AuditableUser . setFirstname ( STRING ) ; when ( this . org.springframework.data.jpa.repository.config.AuditorAware<org.springframework.data.jpa.repository.config.AuditableUser> . getCurrentAuditor ( ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; this . org.springframework.data.jpa.repository.config.AuditableUser = this . org.springframework.data.jpa.repository.config.AuditableUserRepository . save ( org.springframework.data.jpa.repository.config.AuditableUser ) ; when ( this . org.springframework.data.jpa.repository.config.AuditorAware<org.springframework.data.jpa.repository.config.AuditableUser> . getCurrentAuditor ( ) ) . thenReturn ( java.util.Optional . java.util.Optional ( this . org.springframework.data.jpa.repository.config.AuditableUser ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { Mockito . reset ( this . org.springframework.data.jpa.repository.config.AuditorAware<org.springframework.data.jpa.repository.config.AuditableUser> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AuditableUser org.springframework.data.jpa.repository.config.AuditableUser = new AuditableUser ( null ) ; org.springframework.data.jpa.repository.config.AuditableUser . setFirstname ( STRING ) ; AuditableUser org.springframework.data.jpa.repository.config.AuditableUser = org.springframework.data.jpa.repository.config.AuditableUserRepository . save ( org.springframework.data.jpa.repository.config.AuditableUser ) ; java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . void ( NUMBER ) ; assertThat ( org.springframework.data.jpa.repository.config.AuditableUser . getCreatedDate ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.config.AuditableUser . getCreatedDate ( ) . get ( ) . isBefore ( java.time.LocalDateTime . java.time.LocalDateTime ( ) ) , is ( true ) ) ; AuditableUser org.springframework.data.jpa.repository.config.AuditableUser = org.springframework.data.jpa.repository.config.AuditableUser . getCreatedBy ( ) . get ( ) ; assertThat ( org.springframework.data.jpa.repository.config.AuditableUser , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.config.AuditableUser . getFirstname ( ) , is ( this . org.springframework.data.jpa.repository.config.AuditableUser . getFirstname ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AuditableUser org.springframework.data.jpa.repository.config.AuditableUser = org.springframework.data.jpa.repository.config.AuditableUserRepository . save ( new AuditableUser ( null , STRING ) ) ; AuditableUser org.springframework.data.jpa.repository.config.AuditableUser = org.springframework.data.jpa.repository.config.AuditableUserRepository . save ( new AuditableUser ( null , STRING ) ) ; AuditableUser org.springframework.data.jpa.repository.config.AuditableUser = org.springframework.data.jpa.repository.config.AuditableUserRepository . save ( new AuditableUser ( null , STRING ) ) ; org.springframework.data.jpa.repository.config.EntityManager . detach ( org.springframework.data.jpa.repository.config.AuditableUser ) ; org.springframework.data.jpa.repository.config.EntityManager . detach ( org.springframework.data.jpa.repository.config.AuditableUser ) ; org.springframework.data.jpa.repository.config.EntityManager . detach ( org.springframework.data.jpa.repository.config.AuditableUser ) ; org.springframework.data.jpa.repository.config.EntityManager . detach ( org.springframework.data.jpa.repository.config.AuditableUser ) ; FixedDate . INSTANCE . setDate ( new java.util.Date ( ) ) ; SampleSecurityContextHolder . getCurrent ( ) . setPrincipal ( org.springframework.data.jpa.repository.config.AuditableUser ) ; org.springframework.data.jpa.repository.config.AuditableUserRepository . updateAllNamesToUpperCase ( ) ; java.time.LocalDateTime java.time.LocalDateTime = java.time.LocalDateTime . java.time.LocalDateTime ( FixedDate . INSTANCE . getDate ( ) . toInstant ( ) , java.time.ZoneId . java.time.ZoneId ( ) ) ; java.util.List<org.springframework.data.jpa.repository.config.AuditableUser> < AuditableUser > java.util.List<org.springframework.data.jpa.repository.config.AuditableUser> = org.springframework.data.jpa.repository.config.AuditableUserRepository . findAll ( ) ; for ( AuditableUser org.springframework.data.jpa.repository.config.AuditableUser : java.util.List<org.springframework.data.jpa.repository.config.AuditableUser> ) { assertThat ( org.springframework.data.jpa.repository.config.AuditableUser . getFirstname ( ) , is ( org.springframework.data.jpa.repository.config.AuditableUser . getFirstname ( ) . toUpperCase ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.config.AuditableUser . getLastModifiedBy ( ) , is ( java.util.Optional . java.util.Optional ( org.springframework.data.jpa.repository.config.AuditableUser ) ) ) ; assertThat ( org.springframework.data.jpa.repository.config.AuditableUser . getLastModifiedDate ( ) , is ( java.util.Optional . java.util.Optional<java.time.LocalDateTime> ( java.time.LocalDateTime ) ) ) ; } }  <METHOD_END>
