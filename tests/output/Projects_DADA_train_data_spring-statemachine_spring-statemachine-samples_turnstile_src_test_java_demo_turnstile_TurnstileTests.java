<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( demo.turnstile.StateMachineCommands . state ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.turnstile.StateMachine<demo.turnstile.States,demo.turnstile.Events> . start ( ) ; demo.turnstile.TurnstileTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; demo.turnstile.TurnstileTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.turnstile.StateMachine<demo.turnstile.States,demo.turnstile.Events> . getState ( ) . getIds ( ) , contains ( States . LOCKED ) ) ; assertThat ( demo.turnstile.TurnstileTests.TestListener . java.util.List<demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events>> . size ( ) , is ( NUMBER ) ) ; assertThat ( demo.turnstile.TurnstileTests.TestListener . java.util.List<demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events>> . get ( NUMBER ) . getId ( ) , is ( States . LOCKED ) ) ; assertThat ( demo.turnstile.TurnstileTests.TestListener . java.util.List<demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.turnstile.StateMachineListener<demo.turnstile.States,demo.turnstile.Events> < States , Events > demo.turnstile.StateMachineListener<demo.turnstile.States,demo.turnstile.Events> ( ) { demo.turnstile.TurnstileTests.TestListener demo.turnstile.TurnstileTests.TestListener = new demo.turnstile.TurnstileTests.TestListener ( ) ; demo.turnstile.StateMachine<demo.turnstile.States,demo.turnstile.Events> . addStateListener ( demo.turnstile.TurnstileTests.TestListener ) ; return demo.turnstile.TurnstileTests.TestListener ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events> , State < States , Events > demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events> ) { java.util.List<demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events>> . add ( demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events> ) { java.util.List<demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events>> . add ( demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < States , Events > demo.turnstile.Transition<demo.turnstile.States,demo.turnstile.Events> ) { java.util.List<demo.turnstile.Transition<demo.turnstile.States,demo.turnstile.Events>> . add ( demo.turnstile.Transition<demo.turnstile.States,demo.turnstile.Events> ) ; java.util.concurrent.CountDownLatch . void ( ) ; int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int ) { void ( int , int , int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.List<demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events>> . clear ( ) ; java.util.List<demo.turnstile.State<demo.turnstile.States,demo.turnstile.Events>> . clear ( ) ; int = NUMBER ; java.util.List<demo.turnstile.Transition<demo.turnstile.States,demo.turnstile.Events>> . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Before public void void ( ) { demo.turnstile.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; demo.turnstile.AnnotationConfigApplicationContext . register ( CommonConfiguration .class , Application .class , demo.turnstile.TurnstileTests.Config .class , StateMachineCommands .class ) ; demo.turnstile.AnnotationConfigApplicationContext . refresh ( ) ; demo.turnstile.StateMachine<demo.turnstile.States,demo.turnstile.Events> = demo.turnstile.AnnotationConfigApplicationContext . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; demo.turnstile.TurnstileTests.TestListener = demo.turnstile.AnnotationConfigApplicationContext . getBean ( demo.turnstile.TurnstileTests.TestListener .class ) ; demo.turnstile.StateMachineCommands = demo.turnstile.AnnotationConfigApplicationContext . getBean ( StateMachineCommands .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { demo.turnstile.StateMachine<demo.turnstile.States,demo.turnstile.Events> . stop ( ) ; demo.turnstile.AnnotationConfigApplicationContext . close ( ) ; demo.turnstile.AnnotationConfigApplicationContext = null ; demo.turnstile.StateMachine<demo.turnstile.States,demo.turnstile.Events> = null ; }  <METHOD_END>
