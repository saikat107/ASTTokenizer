<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext org.springframework.statemachine.zookeeper.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.Config1 .class , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.Config2 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) ; org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ) ; org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; DistributedStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> = new DistributedStateMachine < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; DistributedStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> = new DistributedStateMachine < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.Config1 .class , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.Config2 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) ; org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ) ; org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; DistributedStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> = new DistributedStateMachine < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; DistributedStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> = new DistributedStateMachine < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.Config3 .class , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.Config4 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; assertThat ( ( ( SmartLifecycle ) org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . isAutoStartup ( ) , is ( false ) ) ; assertThat ( ( ( SmartLifecycle ) org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . isRunning ( ) , is ( false ) ) ; assertThat ( ( ( SmartLifecycle ) org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . isAutoStartup ( ) , is ( false ) ) ; assertThat ( ( ( SmartLifecycle ) org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . isRunning ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.Config3 .class , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.Config4 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectState ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . defaultAwaitTime ( NUMBER ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . expectVariable ( STRING ) . expectVariable ( STRING , NUMBER ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . defaultAwaitTime ( NUMBER ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING , true ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING , true ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . defaultAwaitTime ( NUMBER ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING , true ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING , true , true ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING , true , true ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING , true , true ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING , true , true ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING , true , true ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING , true , true ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; Message < java.lang.String > org.springframework.statemachine.zookeeper.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . defaultAwaitTime ( NUMBER ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( org.springframework.statemachine.zookeeper.Message<java.lang.String> , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectTransition ( NUMBER ) . expectVariable ( STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; Message < java.lang.String > org.springframework.statemachine.zookeeper.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . defaultAwaitTime ( NUMBER ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( org.springframework.statemachine.zookeeper.Message<java.lang.String> , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectTransition ( NUMBER ) . expectExtendedStateChanged ( NUMBER ) . expectVariable ( STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.Config1 .class , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.Config2 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = context . getBean ( STRING , StateMachine .class ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener = new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) ; org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ) ; org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; DistributedStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> = new DistributedStateMachine < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; DistributedStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> = new DistributedStateMachine < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.DistributedStateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . defaultAwaitTime ( NUMBER ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; try { TestUtils . callMethod ( STRING , java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} TestUtils . callMethod ( STRING , java.lang.Object ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . defaultAwaitTime ( NUMBER ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( ZkServerConfig .class , BaseConfig .class ) ; context . refresh ( ) ; CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework = context . getBean ( STRING , CuratorFramework .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . defaultAwaitTime ( NUMBER ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) ; try { TestUtils . callMethod ( STRING , java.lang.Object ) ; TestUtils . callMethod ( STRING , java.lang.Object ) ; TestUtils . callMethod ( STRING , java.lang.Object ) ; TestUtils . callMethod ( STRING , java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} TestUtils . callMethod ( STRING , java.lang.Object ) ; TestUtils . callMethod ( STRING , java.lang.Object ) ; TestUtils . callMethod ( STRING , java.lang.Object ) ; TestUtils . callMethod ( STRING , java.lang.Object ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . defaultAwaitTime ( NUMBER ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . stateMachine ( org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING , org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.zookeeper.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean ( name = STRING ) public org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) { return new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean ( name = STRING ) public org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> ( ) java.lang.Exception { return new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean ( name = STRING ) public org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) { return new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean ( name = STRING ) public org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> ( ) java.lang.Exception { return new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.zookeeper.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withDistributed ( ) . ensemble ( org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> ( ) ) . and ( ) . withConfiguration ( ) . listener ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( ) ) . autoStartup ( false ) ; }  <METHOD_END>
<METHOD_START> public abstract org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> public abstract org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.TestListener ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.zookeeper.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.zookeeper.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.State<java.lang.String,java.lang.String> , State < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.State<java.lang.String,java.lang.String> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.Transition<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { void ( int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> private static org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> ( CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework ) { ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> = new ZookeeperStateMachineEnsemble < java.lang.String , java.lang.String > ( org.springframework.statemachine.zookeeper.CuratorFramework , STRING ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> . start ( ) ; return org.springframework.statemachine.zookeeper.ZookeeperStateMachineEnsemble<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework )			throws java.lang.Exception { StateMachineBuilder . StateMachineBuilder < java.lang.String , java.lang.String > builder = StateMachineBuilder . builder ( ) ; builder . configureConfiguration ( ) . withConfiguration ( ) . taskExecutor ( new SyncTaskExecutor ( ) ) . autoStartup ( true ) . and ( ) . withDistributed ( ) . ensemble ( org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ) ; builder . configureStates ( ) . withStates ( ) . initial ( STRING , org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooAction ( ) ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; builder . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . guard ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooGuard ( ) ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withInternal ( ) . source ( STRING ) . event ( STRING ) . guard ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooGuard ( ) ) . action ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooAction ( ) ) . and ( ) . withInternal ( ) . source ( STRING ) . event ( STRING ) . guard ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooGuard ( ) ) . action ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooAction ( ) ) . and ( ) . withInternal ( ) . source ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; return builder . build ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateMachine<java.lang.String,java.lang.String> ( CuratorFramework org.springframework.statemachine.zookeeper.CuratorFramework )			throws java.lang.Exception { StateMachineBuilder . StateMachineBuilder < java.lang.String , java.lang.String > builder = StateMachineBuilder . builder ( ) ; builder . configureConfiguration ( ) . withConfiguration ( ) . taskExecutor ( new SyncTaskExecutor ( ) ) . autoStartup ( true ) . and ( ) . withDistributed ( ) . ensemble ( org.springframework.statemachine.zookeeper.StateMachineEnsemble<java.lang.String,java.lang.String> ( org.springframework.statemachine.zookeeper.CuratorFramework ) ) ; builder . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; builder . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withInternal ( ) . source ( STRING ) . event ( STRING ) . action ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.SetVariableAction ( ) ) . and ( ) . withInternal ( ) . source ( STRING ) . event ( STRING ) . action ( org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.SetVariableAction ( ) ) ; return builder . build ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooGuard org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooGuard ( ) { return new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooGuard ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooGuard org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooGuard ( ) { return new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooGuard ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooAction org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooAction ( ) { return new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.FooAction ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.SetVariableAction org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.SetVariableAction ( ) { return new org.springframework.statemachine.zookeeper.ZookeeperStateMachineTests.SetVariableAction ( ) ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateContext<java.lang.String,java.lang.String> ) { java.lang.Object java.lang.Object = org.springframework.statemachine.zookeeper.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) . get ( STRING ) ; return ! ( java.lang.Object == null || ! java.lang.Object . boolean ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateContext<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.zookeeper.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; java.lang.Integer java.lang.Integer = org.springframework.statemachine.zookeeper.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . get ( STRING , java.lang.Integer .class ) ; if ( java.lang.Integer == null ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; } else if ( java.lang.Integer == NUMBER ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; } else if ( java.lang.Integer == NUMBER ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.zookeeper.StateContext<java.lang.String,java.lang.String> ) { java.lang.String java.lang.String = org.springframework.statemachine.zookeeper.StateContext<java.lang.String,java.lang.String> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) ; if ( java.lang.String != null ) { org.springframework.statemachine.zookeeper.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) . put ( STRING , java.lang.String ) ; } }  <METHOD_END>
