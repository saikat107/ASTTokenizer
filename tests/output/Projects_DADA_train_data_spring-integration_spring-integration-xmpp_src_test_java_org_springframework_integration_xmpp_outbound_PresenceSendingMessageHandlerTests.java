<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { PresenceSendingMessageHandler org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler = new PresenceSendingMessageHandler ( mock ( XMPPConnection .class ) ) ; org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler . handleMessage ( new GenericMessage < Presence > ( new Presence ( Presence . Type . subscribe ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test ( expected = MessageHandlingException .class ) public void void ( ) { PresenceSendingMessageHandler org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler = new PresenceSendingMessageHandler ( mock ( XMPPConnection .class ) ) ; org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler . handleMessage ( new GenericMessage ( new java.lang.Object ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.integration.xmpp.outbound.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.xmpp.outbound.DefaultListableBeanFactory . registerSingleton ( XmppContextUtils . XMPP_CONNECTION_BEAN_NAME , mock ( XMPPConnection .class ) ) ; PresenceSendingMessageHandler org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler = new PresenceSendingMessageHandler ( ) ; org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler . setBeanFactory ( org.springframework.integration.xmpp.outbound.DefaultListableBeanFactory ) ; org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler . afterPropertiesSet ( ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { PresenceSendingMessageHandler org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler = new PresenceSendingMessageHandler ( ) ; org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.outbound.PresenceSendingMessageHandler . afterPropertiesSet ( ) ; }  <METHOD_END>
