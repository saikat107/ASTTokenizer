<METHOD_START> public void ( Part org.springframework.data.neo4j.repository.query.derived.builder.Part , BooleanOperator org.springframework.data.neo4j.repository.query.derived.builder.BooleanOperator , java.lang.Class<?> < ? > java.lang.Class<?> ) { super( org.springframework.data.neo4j.repository.query.derived.builder.Part , org.springframework.data.neo4j.repository.query.derived.builder.BooleanOperator , java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.neo4j.repository.query.derived.builder.Filter> < Filter > java.util.List<org.springframework.data.neo4j.repository.query.derived.builder.Filter> ( java.util.Stack<java.lang.Object> < java.lang.Object > java.util.Stack<java.lang.Object> ) { java.lang.Object java.lang.Object = java.util.Stack<java.lang.Object> . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.util.Stack<java.lang.Object> . java.lang.Object ( ) ; Distance org.springframework.data.neo4j.repository.query.derived.builder.Distance ; Point org.springframework.data.neo4j.repository.query.derived.builder.Point ; if ( java.lang.Object instanceof Distance && java.lang.Object instanceof Point ) { org.springframework.data.neo4j.repository.query.derived.builder.Distance = ( Distance ) java.lang.Object ; org.springframework.data.neo4j.repository.query.derived.builder.Point = ( Point ) java.lang.Object ; } else if ( java.lang.Object instanceof Distance && java.lang.Object instanceof Point ) { org.springframework.data.neo4j.repository.query.derived.builder.Distance = ( Distance ) java.lang.Object ; org.springframework.data.neo4j.repository.query.derived.builder.Point = ( Point ) java.lang.Object ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } double double ; if ( org.springframework.data.neo4j.repository.query.derived.builder.Distance . getMetric ( ) == Metrics . KILOMETERS ) { double = org.springframework.data.neo4j.repository.query.derived.builder.Distance . getValue ( ) * NUMBER ; } else if ( org.springframework.data.neo4j.repository.query.derived.builder.Distance . getMetric ( ) == Metrics . MILES ) { double = org.springframework.data.neo4j.repository.query.derived.builder.Distance . getValue ( ) / NUMBER ; } else { double = org.springframework.data.neo4j.repository.query.derived.builder.Distance . getValue ( ) ; } DistanceFromPoint org.springframework.data.neo4j.repository.query.derived.builder.DistanceFromPoint = new DistanceFromPoint ( org.springframework.data.neo4j.repository.query.derived.builder.Point . getX ( ) , org.springframework.data.neo4j.repository.query.derived.builder.Point . getY ( ) , org.springframework.data.neo4j.repository.query.derived.builder.Distance . getValue ( ) * double ) ; DistanceComparison org.springframework.data.neo4j.repository.query.derived.builder.DistanceComparison = new DistanceComparison ( org.springframework.data.neo4j.repository.query.derived.builder.DistanceFromPoint ) ; Filter org.springframework.data.neo4j.repository.query.derived.builder.Filter = new Filter ( org.springframework.data.neo4j.repository.query.derived.builder.DistanceComparison , ComparisonOperator . LESS_THAN ) ; org.springframework.data.neo4j.repository.query.derived.builder.Filter . setOwnerEntityType ( entityType ) ; org.springframework.data.neo4j.repository.query.derived.builder.Filter . setBooleanOperator ( booleanOperator ) ; org.springframework.data.neo4j.repository.query.derived.builder.Filter . setNegated ( isNegated ( ) ) ; setNestedAttributes ( part , org.springframework.data.neo4j.repository.query.derived.builder.Filter ) ; return java.util.Collections . java.util.List ( org.springframework.data.neo4j.repository.query.derived.builder.Filter ) ; }  <METHOD_END>
