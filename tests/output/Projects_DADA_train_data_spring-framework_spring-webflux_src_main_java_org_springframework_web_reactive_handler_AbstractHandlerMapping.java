<METHOD_START> public final void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.web.reactive.handler.HttpRequestPathHelper . setUrlDecode ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( HttpRequestPathHelper org.springframework.web.reactive.handler.HttpRequestPathHelper ) { this . org.springframework.web.reactive.handler.HttpRequestPathHelper = org.springframework.web.reactive.handler.HttpRequestPathHelper ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.handler.HttpRequestPathHelper org.springframework.web.reactive.handler.HttpRequestPathHelper ( ) { return this . org.springframework.web.reactive.handler.HttpRequestPathHelper ; }  <METHOD_END>
<METHOD_START> public void void ( PathMatcher org.springframework.web.reactive.handler.PathMatcher ) { Assert . notNull ( org.springframework.web.reactive.handler.PathMatcher , STRING ) ; this . org.springframework.web.reactive.handler.PathMatcher = org.springframework.web.reactive.handler.PathMatcher ; this . org.springframework.web.reactive.handler.UrlBasedCorsConfigurationSource . setPathMatcher ( org.springframework.web.reactive.handler.PathMatcher ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.handler.PathMatcher org.springframework.web.reactive.handler.PathMatcher ( ) { return this . org.springframework.web.reactive.handler.PathMatcher ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.web.reactive.handler.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.reactive.handler.CorsConfiguration> ) { this . org.springframework.web.reactive.handler.UrlBasedCorsConfigurationSource . setCorsConfigurations ( java.util.Map<java.lang.String,org.springframework.web.reactive.handler.CorsConfiguration> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.web.reactive.handler.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.reactive.handler.CorsConfiguration> ( ) { return this . org.springframework.web.reactive.handler.UrlBasedCorsConfigurationSource . getCorsConfigurations ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( CorsProcessor org.springframework.web.reactive.handler.CorsProcessor ) { Assert . notNull ( org.springframework.web.reactive.handler.CorsProcessor , STRING ) ; this . org.springframework.web.reactive.handler.CorsProcessor = org.springframework.web.reactive.handler.CorsProcessor ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.handler.CorsProcessor org.springframework.web.reactive.handler.CorsProcessor ( ) { return this . org.springframework.web.reactive.handler.CorsProcessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.handler.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.handler.Mono<java.lang.Object> ( ServerWebExchange org.springframework.web.reactive.handler.ServerWebExchange ) { return org.springframework.web.reactive.handler.Mono<?> ( org.springframework.web.reactive.handler.ServerWebExchange ) . map ( handler -> { if ( CorsUtils . isCorsRequest ( exchange . getRequest ( ) ) ) { CorsConfiguration configA = this . globalCorsConfigSource . getCorsConfiguration ( exchange ) ; CorsConfiguration configB = getCorsConfiguration ( handler , exchange ) ; CorsConfiguration config = ( configA != null ? configA . combine ( configB ) : configB ) ; if ( ! getCorsProcessor ( ) . processRequest ( config , exchange ) || CorsUtils . isPreFlightRequest ( exchange . getRequest ( ) ) ) { return REQUEST_HANDLED_HANDLER ; } } return handler ; } ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.reactive.handler.Mono<?> < ? > org.springframework.web.reactive.handler.Mono<?> ( ServerWebExchange org.springframework.web.reactive.handler.ServerWebExchange );  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.handler.CorsConfiguration org.springframework.web.reactive.handler.CorsConfiguration ( java.lang.Object java.lang.Object , ServerWebExchange org.springframework.web.reactive.handler.ServerWebExchange ) { if ( java.lang.Object instanceof CorsConfigurationSource ) { return ( ( CorsConfigurationSource ) java.lang.Object ) . getCorsConfiguration ( org.springframework.web.reactive.handler.ServerWebExchange ) ; } return null ; }  <METHOD_END>
