<METHOD_START> @ org . org.junit . org.junit @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests> ( ) ) ; org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface = ( org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface = ( org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface = ( org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter = ( org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.Counter . int ) ; }  <METHOD_END>
<METHOD_START> public void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestAnnotation public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) { int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING + STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING + STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING + STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { int ++ ; }  <METHOD_END>
