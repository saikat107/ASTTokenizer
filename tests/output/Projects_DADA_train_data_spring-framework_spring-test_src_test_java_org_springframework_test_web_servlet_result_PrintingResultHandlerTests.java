<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.MockHttpServletRequest . addParameter ( STRING , STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletRequest . setCharacterEncoding ( STRING ) ; java.lang.String java.lang.String = STRING ; byte [] byte[] = java.lang.String . byte[] ( STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletRequest . setContent ( byte[] ) ; this . org.springframework.test.web.servlet.result.MockHttpServletRequest . getSession ( ) . setAttribute ( STRING , STRING ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; HttpHeaders org.springframework.test.web.servlet.result.HttpHeaders = new HttpHeaders ( ) ; org.springframework.test.web.servlet.result.HttpHeaders . set ( STRING , STRING ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.test.web.servlet.result.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.test.web.servlet.result.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; void ( STRING , STRING , this . org.springframework.test.web.servlet.result.MockHttpServletRequest . getMethod ( ) ) ; void ( STRING , STRING , this . org.springframework.test.web.servlet.result.MockHttpServletRequest . getRequestURI ( ) ) ; void ( STRING , STRING , org.springframework.test.web.servlet.result.MultiValueMap<java.lang.String,java.lang.String> ) ; void ( STRING , STRING , org.springframework.test.web.servlet.result.HttpHeaders ) ; void ( STRING , STRING , java.lang.String ) ; void ( STRING , STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { Cookie org.springframework.test.web.servlet.result.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.test.web.servlet.result.Cookie . setComment ( STRING ) ; org.springframework.test.web.servlet.result.Cookie . setHttpOnly ( true ) ; org.springframework.test.web.servlet.result.Cookie . setMaxAge ( NUMBER ) ; org.springframework.test.web.servlet.result.Cookie . setDomain ( STRING ) ; org.springframework.test.web.servlet.result.Cookie . setPath ( STRING ) ; org.springframework.test.web.servlet.result.Cookie . setSecure ( true ) ; this . org.springframework.test.web.servlet.result.MockHttpServletResponse . setStatus ( NUMBER , STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletResponse . addHeader ( STRING , STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletResponse . setContentType ( STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletResponse . getWriter ( ) . print ( STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletResponse . setForwardedUrl ( STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletResponse . sendRedirect ( STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletResponse . addCookie ( new Cookie ( STRING , STRING ) ) ; this . org.springframework.test.web.servlet.result.MockHttpServletResponse . addCookie ( org.springframework.test.web.servlet.result.Cookie ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; HttpHeaders org.springframework.test.web.servlet.result.HttpHeaders = new HttpHeaders ( ) ; org.springframework.test.web.servlet.result.HttpHeaders . set ( STRING , STRING ) ; org.springframework.test.web.servlet.result.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; org.springframework.test.web.servlet.result.HttpHeaders . setLocation ( new java.net.URI ( STRING ) ) ; java.lang.String java.lang.String = STRING ; void ( java.lang.String , STRING , this . org.springframework.test.web.servlet.result.MockHttpServletResponse . getStatus ( ) ) ; void ( java.lang.String , STRING , org.springframework.test.web.servlet.result.MockHttpServletResponse . getErrorMessage ( ) ) ; void ( java.lang.String , STRING , org.springframework.test.web.servlet.result.HttpHeaders ) ; void ( java.lang.String , STRING , this . org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentType ( ) ) ; void ( java.lang.String , STRING , this . org.springframework.test.web.servlet.result.MockHttpServletResponse . getContentAsString ( ) ) ; void ( java.lang.String , STRING , this . org.springframework.test.web.servlet.result.MockHttpServletResponse . getForwardedUrl ( ) ) ; void ( java.lang.String , STRING , this . org.springframework.test.web.servlet.result.MockHttpServletResponse . getRedirectedUrl ( ) ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> < java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> = this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler.TestResultValuePrinter ( ) . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ; java.lang.String [] java.lang.String[] = ( java.lang.String [] ) java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String ) . java.lang.Object ( STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; assertTrue ( java.lang.String . boolean ( STRING + Cookie .class . java.lang.String ( ) ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING + Cookie .class . java.lang.String ( ) ) ) ; assertTrue ( java.lang.String . boolean ( STRING + STRING + STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.MockHttpServletRequest . setCharacterEncoding ( STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.MockHttpServletResponse . setCharacterEncoding ( STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletResponse . getWriter ( ) . print ( STRING ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.MockHttpServletResponse . getWriter ( ) . print ( STRING ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.MockHttpServletResponse . setCharacterEncoding ( null ) ; this . org.springframework.test.web.servlet.result.MockHttpServletResponse . getWriter ( ) . print ( STRING ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StubMvcResult org.springframework.test.web.servlet.result.StubMvcResult = new StubMvcResult ( this . org.springframework.test.web.servlet.result.MockHttpServletRequest , null , null , null , null , null , this . org.springframework.test.web.servlet.result.MockHttpServletResponse ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.StubMvcResult . setHandler ( new java.lang.Object ( ) ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , java.lang.Object .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethod org.springframework.test.web.servlet.result.HandlerMethod = new HandlerMethod ( this , STRING ) ; this . org.springframework.test.web.servlet.result.StubMvcResult . setHandler ( org.springframework.test.web.servlet.result.HandlerMethod ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , this . java.lang.Class<? extends org.springframework.test.web.servlet.result.PrintingResultHandlerTests> ( ) . java.lang.String ( ) ) ; void ( STRING , STRING , org.springframework.test.web.servlet.result.HandlerMethod ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.StubMvcResult . setResolvedException ( new java.lang.Exception ( ) ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , java.lang.Exception .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , null ) ; void ( STRING , STRING , null ) ; void ( STRING , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BindException org.springframework.test.web.servlet.result.BindException = new BindException ( new java.lang.Object ( ) , STRING ) ; org.springframework.test.web.servlet.result.BindException . reject ( STRING ) ; ModelAndView org.springframework.test.web.servlet.result.ModelAndView = new ModelAndView ( STRING ) ; org.springframework.test.web.servlet.result.ModelAndView . addObject ( STRING , STRING ) ; org.springframework.test.web.servlet.result.ModelAndView . addObject ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.test.web.servlet.result.BindException ) ; this . org.springframework.test.web.servlet.result.StubMvcResult . setMav ( org.springframework.test.web.servlet.result.ModelAndView ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , null ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , org.springframework.test.web.servlet.result.BindException . getAllErrors ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FlashMap org.springframework.test.web.servlet.result.FlashMap = new FlashMap ( ) ; org.springframework.test.web.servlet.result.FlashMap . put ( STRING , STRING ) ; this . org.springframework.test.web.servlet.result.MockHttpServletRequest . setAttribute ( DispatcherServlet .class . java.lang.String ( ) + STRING , org.springframework.test.web.servlet.result.FlashMap ) ; this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . handle ( this . org.springframework.test.web.servlet.result.StubMvcResult ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> < java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> = this . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler . org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler.TestResultValuePrinter ( ) . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ; assertTrue ( STRING + java.lang.String + STRING , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> . boolean ( java.lang.String ) ) ; assertEquals ( STRING + java.lang.String + STRING + java.lang.String + STRING , java.lang.Object , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String ) . java.lang.Object ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( new org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler.TestResultValuePrinter ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler.TestResultValuePrinter org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler.TestResultValuePrinter ( ) { return ( org.springframework.test.web.servlet.result.PrintingResultHandlerTests.TestPrintingResultHandler.TestResultValuePrinter ) super. getPrinter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String , new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Assert . notNull ( this . java.lang.String , STRING + java.lang.String + STRING + java.lang.Object ) ; this . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( this . java.lang.String ) . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {	}  <METHOD_END>
