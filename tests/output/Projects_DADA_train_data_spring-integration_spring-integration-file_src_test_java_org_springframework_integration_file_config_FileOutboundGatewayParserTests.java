<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.EventDrivenConsumer ) ; FileWritingMessageHandler org.springframework.integration.file.config.FileWritingMessageHandler = ( FileWritingMessageHandler ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.FileWritingMessageHandler ) ; assertEquals ( NUMBER , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; DefaultFileNameGenerator org.springframework.integration.file.config.DefaultFileNameGenerator = ( DefaultFileNameGenerator ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( org.springframework.integration.file.config.DefaultFileNameGenerator ) ; Expression org.springframework.integration.file.config.Expression = TestUtils . getPropertyValue ( org.springframework.integration.file.config.DefaultFileNameGenerator , STRING , Expression .class ) ; assertNotNull ( org.springframework.integration.file.config.Expression ) ; assertEquals ( STRING , org.springframework.integration.file.config.Expression . getExpressionString ( ) ) ; java.lang.Long java.lang.Long = TestUtils . getPropertyValue ( org.springframework.integration.file.config.FileWritingMessageHandler , STRING , java.lang.Long .class ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FileWritingMessageHandler org.springframework.integration.file.config.FileWritingMessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.file.config.EventDrivenConsumer , STRING , FileWritingMessageHandler .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.file.config.FileWritingMessageHandler , STRING , Expression .class ) . getExpressionString ( ) ) ; org.springframework.integration.file.config.FileWritingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MessagingTemplate org.springframework.integration.file.config.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.file.config.MessagingTemplate . setDefaultDestination ( this . org.springframework.integration.file.config.MessageChannel ) ; final java.lang.String java.lang.String = STRING ; final java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } org.springframework.integration.file.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.file.config.Message<?> = org.springframework.integration.file.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; assertTrue ( org.springframework.integration.file.config.Message<> . getPayload ( ) instanceof java.io.File ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.config.Message<> . getPayload ( ) ; assertEquals ( java.lang.String , new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MessagingTemplate org.springframework.integration.file.config.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.file.config.MessagingTemplate . setDefaultDestination ( this . org.springframework.integration.file.config.MessageChannel ) ; java.lang.String java.lang.String = STRING ; java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } org.springframework.integration.file.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; final java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; try { org.springframework.integration.file.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( MessageHandlingException org.springframework.integration.file.config.MessageHandlingException ) { assertTrue ( org.springframework.integration.file.config.MessageHandlingException . getMessage ( ) . startsWith ( STRING ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MessagingTemplate org.springframework.integration.file.config.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.file.config.MessagingTemplate . setDefaultDestination ( this . org.springframework.integration.file.config.MessageChannel ) ; java.lang.String java.lang.String = STRING ; java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } org.springframework.integration.file.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; final java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; try { org.springframework.integration.file.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( MessageHandlingException org.springframework.integration.file.config.MessageHandlingException ) { assertTrue ( org.springframework.integration.file.config.MessageHandlingException . getMessage ( ) . startsWith ( STRING ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MessagingTemplate org.springframework.integration.file.config.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.file.config.MessagingTemplate . setDefaultDestination ( this . org.springframework.integration.file.config.MessageChannel ) ; java.lang.String java.lang.String = STRING ; java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } org.springframework.integration.file.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.file.config.Message<?> = org.springframework.integration.file.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; assertTrue ( org.springframework.integration.file.config.Message<> . getPayload ( ) instanceof java.io.File ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.config.Message<> . getPayload ( ) ; assertEquals ( java.lang.String , new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.file.config.MessageHandler , STRING , java.lang.Boolean .class ) ) ; final MessagingTemplate org.springframework.integration.file.config.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.file.config.MessagingTemplate . setDefaultDestination ( this . org.springframework.integration.file.config.MessageChannel ) ; java.lang.String java.lang.String = STRING ; java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } org.springframework.integration.file.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.file.config.Message<?> = org.springframework.integration.file.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; assertTrue ( org.springframework.integration.file.config.Message<> . getPayload ( ) instanceof java.io.File ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.config.Message<> . getPayload ( ) ; assertEquals ( java.lang.String , new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . getPropertyValue ( this . org.springframework.integration.file.config.EventDrivenConsumer , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.file.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.file.config.Message<?> ) throws java.lang.Exception { int ++ ; return null ; }  <METHOD_END>
