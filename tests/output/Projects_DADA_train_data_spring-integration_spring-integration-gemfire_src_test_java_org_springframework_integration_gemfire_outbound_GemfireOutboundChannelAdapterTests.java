<METHOD_START> @ Before public void void ( ) { org.springframework.integration.gemfire.outbound.DistributedRegion . clear ( ) ; org.springframework.integration.gemfire.outbound.DistributedRegion . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; Message < ? > org.springframework.integration.gemfire.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.String> ) . build ( ) ; org.springframework.integration.gemfire.outbound.MessageChannel . send ( org.springframework.integration.gemfire.outbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.outbound.DistributedRegion . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.gemfire.outbound.DistributedRegion . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.gemfire.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.gemfire.outbound.MessageChannel . send ( org.springframework.integration.gemfire.outbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.outbound.DistributedRegion . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.gemfire.outbound.DistributedRegion . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.gemfire.outbound.DistributedRegion . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; Message < ? > org.springframework.integration.gemfire.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.String> ) . build ( ) ; org.springframework.integration.gemfire.outbound.MessageChannel . send ( org.springframework.integration.gemfire.outbound.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.outbound.DistributedRegion . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.gemfire.outbound.DistributedRegion . get ( STRING ) ) ; }  <METHOD_END>
