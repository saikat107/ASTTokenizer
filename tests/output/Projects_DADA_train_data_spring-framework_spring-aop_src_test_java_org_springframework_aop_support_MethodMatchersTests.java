<METHOD_START> public void ( ) java.lang.Exception { java.lang.reflect.Method = java.lang.Exception .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method = ITestBean .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method = ITestBean .class . java.lang.reflect.Method ( STRING , int .class ) ; java.lang.reflect.Method = IOther .class . java.lang.reflect.Method ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodMatcher org.springframework.aop.support.MethodMatcher = MethodMatcher . TRUE ; assertTrue ( org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Exception .class ) ) ; assertTrue ( org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertSame ( SerializationTestUtils . serializeAndDeserialize ( MethodMatcher . TRUE ) , MethodMatcher . TRUE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodMatcher org.springframework.aop.support.MethodMatcher = MethodMatcher . TRUE ; assertTrue ( org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Exception .class ) ) ; assertTrue ( org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; org.springframework.aop.support.MethodMatcher = MethodMatchers . intersection ( org.springframework.aop.support.MethodMatcher , new org.springframework.aop.support.MethodMatchersTests.StartsWithMatcher ( STRING ) ) ; assertTrue ( org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Exception .class ) ) ; assertFalse ( org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodMatcher org.springframework.aop.support.MethodMatcher = MethodMatcher . TRUE ; MethodMatcher org.springframework.aop.support.MethodMatcher = new org.springframework.aop.support.MethodMatchersTests.TestDynamicMethodMatcherWhichMatches ( ) ; MethodMatcher org.springframework.aop.support.MethodMatcher = MethodMatchers . intersection ( org.springframework.aop.support.MethodMatcher , org.springframework.aop.support.MethodMatcher ) ; assertTrue ( STRING , org.springframework.aop.support.MethodMatcher . isRuntime ( ) ) ; assertTrue ( STRING , org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( STRING , org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; org.springframework.aop.support.MethodMatcher = MethodMatchers . intersection ( org.springframework.aop.support.MethodMatcher , new org.springframework.aop.support.MethodMatchersTests.TestDynamicMethodMatcherWhichDoesNotMatch ( ) ) ; assertTrue ( STRING , org.springframework.aop.support.MethodMatcher . isRuntime ( ) ) ; assertTrue ( STRING , org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( STRING , org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodMatcher org.springframework.aop.support.MethodMatcher = new org.springframework.aop.support.MethodMatchersTests.StartsWithMatcher ( STRING ) ; MethodMatcher org.springframework.aop.support.MethodMatcher = new org.springframework.aop.support.MethodMatchersTests.StartsWithMatcher ( STRING ) ; MethodMatcher org.springframework.aop.support.MethodMatcher = MethodMatchers . union ( org.springframework.aop.support.MethodMatcher , org.springframework.aop.support.MethodMatcher ) ; assertFalse ( STRING , org.springframework.aop.support.MethodMatcher . isRuntime ( ) ) ; assertTrue ( STRING , org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( STRING , org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( STRING , org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MethodMatcher org.springframework.aop.support.MethodMatcher = MethodMatchers . union ( MethodMatcher . TRUE , MethodMatcher . TRUE ) ; MethodMatcher org.springframework.aop.support.MethodMatcher = new ComposablePointcut ( MethodMatcher . TRUE ) . union ( new ComposablePointcut ( MethodMatcher . TRUE ) ) . getMethodMatcher ( ) ; assertTrue ( org.springframework.aop.support.MethodMatcher . equals ( org.springframework.aop.support.MethodMatcher ) ) ; assertTrue ( org.springframework.aop.support.MethodMatcher . equals ( org.springframework.aop.support.MethodMatcher ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { return false ; }  <METHOD_END>
