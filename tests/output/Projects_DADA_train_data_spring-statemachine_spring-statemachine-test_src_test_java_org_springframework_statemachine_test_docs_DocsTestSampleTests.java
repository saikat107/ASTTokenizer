<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.test.docs.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.test.docs.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.test.docs.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . defaultAwaitTime ( NUMBER ) . stateMachine ( org.springframework.statemachine.test.docs.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.test.docs.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.test.docs.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.test.docs.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { StateMachineBuilder . StateMachineBuilder < java.lang.String , java.lang.String > builder = StateMachineBuilder . builder ( ) ; builder . configureConfiguration ( ) . withConfiguration ( ) . taskExecutor ( new SyncTaskExecutor ( ) ) . autoStartup ( true ) ; builder . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; builder . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; return builder . build ( ) ; }  <METHOD_END>
