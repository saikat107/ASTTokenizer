<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . canDecode ( ResolvableType . forClass ( Pojo .class ) , MediaType . APPLICATION_XML ) ) ; assertTrue ( this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . canDecode ( ResolvableType . forClass ( Pojo .class ) , MediaType . TEXT_XML ) ) ; assertFalse ( this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . canDecode ( ResolvableType . forClass ( Pojo .class ) , MediaType . APPLICATION_JSON ) ) ; assertTrue ( this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . canDecode ( ResolvableType . forClass ( org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo .class ) , MediaType . APPLICATION_XML ) ) ; assertFalse ( this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . canDecode ( ResolvableType . forClass ( java.lang.Class<? extends org.springframework.http.codec.xml.Jaxb2XmlDecoderTests> ( ) ) , MediaType . APPLICATION_XML ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < javax.xml.stream.events.XMLEvent > org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> = this . org.springframework.http.codec.xml.XmlEventDecoder . decode ( Flux . just ( stringBuffer ( java.lang.String ) ) , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; Flux < java.util.List<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > > org.springframework.http.codec.xml.Flux<java.util.List<javax.xml.stream.events.XMLEvent>> = this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . split ( org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> , new javax.xml.namespace.QName ( STRING ) ) ; StepVerifier . create ( org.springframework.http.codec.xml.Flux<java.util.List<javax.xml.stream.events.XMLEvent>> ) . consumeNextWith ( events -> { assertEquals ( NUMBER , events . size ( ) ) ; assertStartElement ( events . get ( NUMBER ) , STRING ) ; assertStartElement ( events . get ( NUMBER ) , STRING ) ; assertCharacters ( events . get ( NUMBER ) , STRING ) ; assertEndElement ( events . get ( NUMBER ) , STRING ) ; assertStartElement ( events . get ( NUMBER ) , STRING ) ; assertCharacters ( events . get ( NUMBER ) , STRING ) ; assertEndElement ( events . get ( NUMBER ) , STRING ) ; assertEndElement ( events . get ( NUMBER ) , STRING ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < javax.xml.stream.events.XMLEvent > org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> = this . org.springframework.http.codec.xml.XmlEventDecoder . decode ( Flux . just ( stringBuffer ( java.lang.String ) ) , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; Flux < java.util.List<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > > org.springframework.http.codec.xml.Flux<java.util.List<javax.xml.stream.events.XMLEvent>> = this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . split ( org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> , new javax.xml.namespace.QName ( STRING ) ) ; StepVerifier . create ( org.springframework.http.codec.xml.Flux<java.util.List<javax.xml.stream.events.XMLEvent>> ) . consumeNextWith ( events -> { assertEquals ( NUMBER , events . size ( ) ) ; assertStartElement ( events . get ( NUMBER ) , STRING ) ; assertStartElement ( events . get ( NUMBER ) , STRING ) ; assertCharacters ( events . get ( NUMBER ) , STRING ) ; assertEndElement ( events . get ( NUMBER ) , STRING ) ; assertStartElement ( events . get ( NUMBER ) , STRING ) ; assertCharacters ( events . get ( NUMBER ) , STRING ) ; assertEndElement ( events . get ( NUMBER ) , STRING ) ; assertEndElement ( events . get ( NUMBER ) , STRING ) ; } ) . consumeNextWith ( events -> { assertEquals ( NUMBER , events . size ( ) ) ; assertStartElement ( events . get ( NUMBER ) , STRING ) ; assertStartElement ( events . get ( NUMBER ) , STRING ) ; assertCharacters ( events . get ( NUMBER ) , STRING ) ; assertEndElement ( events . get ( NUMBER ) , STRING ) ; assertStartElement ( events . get ( NUMBER ) , STRING ) ; assertCharacters ( events . get ( NUMBER ) , STRING ) ; assertEndElement ( events . get ( NUMBER ) , STRING ) ; assertEndElement ( events . get ( NUMBER ) , STRING ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent , java.lang.String java.lang.String ) { assertTrue ( javax.xml.stream.events.XMLEvent . boolean ( ) ) ; assertEquals ( java.lang.String , javax.xml.stream.events.XMLEvent . javax.xml.stream.events.StartElement ( ) . javax.xml.namespace.QName ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent , java.lang.String java.lang.String ) { assertTrue ( javax.xml.stream.events.XMLEvent . boolean ( ) ) ; assertEquals ( java.lang.String , javax.xml.stream.events.XMLEvent . javax.xml.stream.events.EndElement ( ) . javax.xml.namespace.QName ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent , java.lang.String java.lang.String ) { assertTrue ( javax.xml.stream.events.XMLEvent . boolean ( ) ) ; assertEquals ( java.lang.String , javax.xml.stream.events.XMLEvent . javax.xml.stream.events.Characters ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < DataBuffer > org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.DataBuffer> = Flux . just ( stringBuffer ( java.lang.String ) ) ; Flux < java.lang.Object > org.springframework.http.codec.xml.Flux<java.lang.Object> = this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . decode ( org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.DataBuffer> , ResolvableType . forClass ( Pojo .class ) , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; StepVerifier . create ( org.springframework.http.codec.xml.Flux<java.lang.Object> ) . expectNext ( new Pojo ( STRING , STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < DataBuffer > org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.DataBuffer> = Flux . just ( stringBuffer ( java.lang.String ) ) ; Flux < java.lang.Object > org.springframework.http.codec.xml.Flux<java.lang.Object> = this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . decode ( org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.DataBuffer> , ResolvableType . forClass ( org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo .class ) , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; StepVerifier . create ( org.springframework.http.codec.xml.Flux<java.lang.Object> ) . expectNext ( new org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo ( STRING , STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < DataBuffer > org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.DataBuffer> = Flux . just ( stringBuffer ( java.lang.String ) ) ; Flux < java.lang.Object > org.springframework.http.codec.xml.Flux<java.lang.Object> = this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . decode ( org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.DataBuffer> , ResolvableType . forClass ( Pojo .class ) , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; StepVerifier . create ( org.springframework.http.codec.xml.Flux<java.lang.Object> ) . expectNext ( new Pojo ( STRING , STRING ) ) . expectNext ( new Pojo ( STRING , STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < DataBuffer > org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.DataBuffer> = Flux . just ( stringBuffer ( java.lang.String ) ) ; Flux < java.lang.Object > org.springframework.http.codec.xml.Flux<java.lang.Object> = this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . decode ( org.springframework.http.codec.xml.Flux<org.springframework.http.codec.xml.DataBuffer> , ResolvableType . forClass ( org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo .class ) , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; StepVerifier . create ( org.springframework.http.codec.xml.Flux<java.lang.Object> ) . expectNext ( new org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo ( STRING , STRING ) ) . expectNext ( new org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo ( STRING , STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( new javax.xml.namespace.QName ( STRING ) , this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . toQName ( Pojo .class ) ) ; assertEquals ( new javax.xml.namespace.QName ( STRING ) , this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . toQName ( org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo .class ) ) ; assertEquals ( new javax.xml.namespace.QName ( STRING , STRING ) , this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . toQName ( XmlRootElementWithNameAndNamespace .class ) ) ; assertEquals ( new javax.xml.namespace.QName ( STRING , STRING ) , this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . toQName ( XmlRootElementWithName .class ) ) ; assertEquals ( new javax.xml.namespace.QName ( STRING , STRING ) , this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . toQName ( XmlRootElement .class ) ) ; assertEquals ( new javax.xml.namespace.QName ( STRING , STRING ) , this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . toQName ( XmlTypeWithNameAndNamespace .class ) ) ; assertEquals ( new javax.xml.namespace.QName ( STRING , STRING ) , this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . toQName ( XmlTypeWithName .class ) ) ; assertEquals ( new javax.xml.namespace.QName ( STRING , STRING ) , this . org.springframework.http.codec.xml.Jaxb2XmlDecoder . toQName ( XmlType .class ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object instanceof org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo ) { org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo = ( org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo ) java.lang.Object ; return this . java.lang.String . boolean ( org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo . java.lang.String ) && this . java.lang.String . boolean ( org.springframework.http.codec.xml.Jaxb2XmlDecoderTests.TypePojo . java.lang.String ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = this . java.lang.String . int ( ) ; int = NUMBER * int + this . java.lang.String . int ( ) ; return int ; }  <METHOD_END>
