<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.security.method.HttpHeaders = new HttpHeaders ( ) ; sample.security.method.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . TEXT_HTML ) ) ; ResponseEntity < java.lang.String > sample.security.method.ResponseEntity<java.lang.String> = this . sample.security.method.TestRestTemplate . exchange ( STRING , HttpMethod . GET , new HttpEntity < java.lang.Void > ( sample.security.method.HttpHeaders ) , java.lang.String .class ) ; assertThat ( sample.security.method.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.security.method.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.security.method.HttpHeaders = new HttpHeaders ( ) ; sample.security.method.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . TEXT_HTML ) ) ; MultiValueMap < java.lang.String , java.lang.String > sample.security.method.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; sample.security.method.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; sample.security.method.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; void ( sample.security.method.MultiValueMap<java.lang.String,java.lang.String> , sample.security.method.HttpHeaders ) ; ResponseEntity < java.lang.String > sample.security.method.ResponseEntity<java.lang.String> = this . sample.security.method.TestRestTemplate . exchange ( STRING , HttpMethod . POST , new HttpEntity <> ( sample.security.method.MultiValueMap<java.lang.String,java.lang.String> , sample.security.method.HttpHeaders ) , java.lang.String .class ) ; assertThat ( sample.security.method.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . FOUND ) ; assertThat ( sample.security.method.ResponseEntity<java.lang.String> . getHeaders ( ) . getLocation ( ) . toString ( ) ) . isEqualTo ( STRING + this . int + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.security.method.HttpHeaders = new HttpHeaders ( ) ; sample.security.method.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . TEXT_HTML ) ) ; MultiValueMap < java.lang.String , java.lang.String > sample.security.method.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; sample.security.method.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; sample.security.method.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; void ( sample.security.method.MultiValueMap<java.lang.String,java.lang.String> , sample.security.method.HttpHeaders ) ; ResponseEntity < java.lang.String > sample.security.method.ResponseEntity<java.lang.String> = this . sample.security.method.TestRestTemplate . exchange ( STRING , HttpMethod . POST , new HttpEntity <> ( sample.security.method.MultiValueMap<java.lang.String,java.lang.String> , sample.security.method.HttpHeaders ) , java.lang.String .class ) ; assertThat ( sample.security.method.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . FOUND ) ; java.lang.String java.lang.String = sample.security.method.ResponseEntity<java.lang.String> . getHeaders ( ) . getFirst ( STRING ) ; sample.security.method.HttpHeaders . set ( STRING , java.lang.String ) ; ResponseEntity < java.lang.String > sample.security.method.ResponseEntity<java.lang.String> = this . sample.security.method.TestRestTemplate . exchange ( sample.security.method.ResponseEntity<java.lang.String> . getHeaders ( ) . getLocation ( ) , HttpMethod . GET , new HttpEntity < java.lang.Void > ( sample.security.method.HttpHeaders ) , java.lang.String .class ) ; assertThat ( sample.security.method.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . FORBIDDEN ) ; assertThat ( sample.security.method.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > sample.security.method.ResponseEntity<java.lang.String> = this . sample.security.method.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.security.method.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BasicAuthorizationInterceptor sample.security.method.BasicAuthorizationInterceptor = new BasicAuthorizationInterceptor ( STRING , STRING ) ; this . sample.security.method.TestRestTemplate . getRestTemplate ( ) . getInterceptors ( ) . add ( sample.security.method.BasicAuthorizationInterceptor ) ; try { ResponseEntity < java.lang.String > sample.security.method.ResponseEntity<java.lang.String> = this . sample.security.method.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.security.method.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; } finally { this . sample.security.method.TestRestTemplate . getRestTemplate ( ) . getInterceptors ( ) . remove ( sample.security.method.BasicAuthorizationInterceptor ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BasicAuthorizationInterceptor sample.security.method.BasicAuthorizationInterceptor = new BasicAuthorizationInterceptor ( STRING , STRING ) ; this . sample.security.method.TestRestTemplate . getRestTemplate ( ) . getInterceptors ( ) . add ( sample.security.method.BasicAuthorizationInterceptor ) ; try { ResponseEntity < java.lang.String > sample.security.method.ResponseEntity<java.lang.String> = this . sample.security.method.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.security.method.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . FORBIDDEN ) ; } finally { this . sample.security.method.TestRestTemplate . getRestTemplate ( ) . getInterceptors ( ) . remove ( sample.security.method.BasicAuthorizationInterceptor ) ; } }  <METHOD_END>
<METHOD_START> private void void ( MultiValueMap < java.lang.String , java.lang.String > sample.security.method.MultiValueMap<java.lang.String,java.lang.String> , HttpHeaders sample.security.method.HttpHeaders ) { ResponseEntity < java.lang.String > sample.security.method.ResponseEntity<java.lang.String> = this . sample.security.method.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; java.lang.String java.lang.String = sample.security.method.ResponseEntity<java.lang.String> . getHeaders ( ) . getFirst ( STRING ) ; sample.security.method.HttpHeaders . set ( STRING , java.lang.String ) ; java.lang.String java.lang.String = sample.security.method.ResponseEntity<java.lang.String> . getBody ( ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) . java.util.regex.Matcher ( java.lang.String ) ; java.util.regex.Matcher . boolean ( ) ; sample.security.method.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
