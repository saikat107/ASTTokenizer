<METHOD_START> protected void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { this . java.lang.String = java.lang.String ; this . java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String : java.lang.String + STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { RelaxedPropertyResolver org.springframework.boot.autoconfigure.condition.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.condition.ConditionContext . getEnvironment ( ) , this . java.lang.String ) ; if ( org.springframework.boot.autoconfigure.condition.RelaxedPropertyResolver . containsProperty ( this . java.lang.String ) ) { return ConditionOutcome . match ( org.springframework.boot.autoconfigure.condition.Builder ( ) . foundExactly ( STRING + this . java.lang.String + this . java.lang.String ) ) ; } return org.springframework.boot.autoconfigure.condition.ConditionOutcome ( org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : this . java.lang.String[] ) { Resource org.springframework.boot.autoconfigure.condition.Resource = org.springframework.boot.autoconfigure.condition.ConditionContext . getResourceLoader ( ) . getResource ( java.lang.String ) ; if ( org.springframework.boot.autoconfigure.condition.Resource != null && org.springframework.boot.autoconfigure.condition.Resource . exists ( ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } if ( java.util.List<java.lang.String> . boolean ( ) ) { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = org.springframework.boot.autoconfigure.condition.Builder ( ) . didNotFind ( STRING , STRING ) . items ( Style . QUOTE , java.util.Arrays . java.util.List<java.lang.String> ( this . java.lang.String[] ) ) ; return ConditionOutcome . noMatch ( org.springframework.boot.autoconfigure.condition.ConditionMessage ) ; } ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = org.springframework.boot.autoconfigure.condition.Builder ( ) . found ( STRING , STRING ) . items ( Style . QUOTE , java.util.List<java.lang.String> ) ; return ConditionOutcome . match ( org.springframework.boot.autoconfigure.condition.ConditionMessage ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.autoconfigure.condition.Builder org.springframework.boot.autoconfigure.condition.Builder ( ) { return ConditionMessage . forCondition ( STRING , STRING + this . java.lang.String + STRING ) ; }  <METHOD_END>
