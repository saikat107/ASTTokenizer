<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.data.gemfire.config.annotation.ProcessWrapper = run ( org.springframework.data.gemfire.config.annotation.ClientServerCacheApplicationIntegrationTests.CacheServerApplicationConfiguration .class , java.lang.String . java.lang.String ( STRING , asApplicationName ( org.springframework.data.gemfire.config.annotation.ClientServerCacheApplicationIntegrationTests .class ) ) ) ; waitForServerToStart ( STRING , int ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { stop ( org.springframework.data.gemfire.config.annotation.ProcessWrapper ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.config.annotation.Region<java.lang.String,java.lang.String> . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Region<java.lang.String,java.lang.String> . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { runSpringApplication ( org.springframework.data.gemfire.config.annotation.ClientServerCacheApplicationIntegrationTests.CacheServerApplicationConfiguration .class , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) public org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.String,java.lang.String> ( Cache org.springframework.data.gemfire.config.annotation.Cache ) { PartitionedRegionFactoryBean < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.String,java.lang.String> = new PartitionedRegionFactoryBean < java.lang.String , java.lang.String > ( ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.String,java.lang.String> . setCache ( org.springframework.data.gemfire.config.annotation.Cache ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.String,java.lang.String> . setCacheLoader ( org.springframework.data.gemfire.config.annotation.CacheLoader<java.lang.String,java.lang.String> ( ) ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.String,java.lang.String> . setClose ( false ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.String,java.lang.String> . setPersistent ( false ) ; return org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.config.annotation.CacheLoader<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.CacheLoader<java.lang.String,java.lang.String> ( ) { return new CacheLoader < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( LoaderHelper < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.LoaderHelper<java.lang.String,java.lang.String> ) throws org.springframework.data.gemfire.config.annotation.CacheLoaderException { return org.springframework.data.gemfire.config.annotation.LoaderHelper<java.lang.String,java.lang.String> . getKey ( ) ; } @ java.lang.Override public void void ( ) {				} } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( LoaderHelper < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.LoaderHelper<java.lang.String,java.lang.String> ) throws org.springframework.data.gemfire.config.annotation.CacheLoaderException { return org.springframework.data.gemfire.config.annotation.LoaderHelper<java.lang.String,java.lang.String> . getKey ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {				}  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> ( ClientCache org.springframework.data.gemfire.config.annotation.ClientCache ) { ClientRegionFactoryBean < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> = new ClientRegionFactoryBean < java.lang.String , java.lang.String > ( ) ; org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> . setCache ( org.springframework.data.gemfire.config.annotation.ClientCache ) ; org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> . setClose ( false ) ; org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> . setShortcut ( ClientRegionShortcut . PROXY ) ; return org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> ; }  <METHOD_END>
