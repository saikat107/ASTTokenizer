<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Session org.springframework.jms.support.Session = mock ( Session .class ) ; TextMessage org.springframework.jms.support.TextMessage = mock ( TextMessage .class ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.jms.support.Session . createTextMessage ( java.lang.String ) ) . willReturn ( org.springframework.jms.support.TextMessage ) ; given ( org.springframework.jms.support.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; SimpleMessageConverter org.springframework.jms.support.SimpleMessageConverter = new SimpleMessageConverter ( ) ; Message org.springframework.jms.support.Message = org.springframework.jms.support.SimpleMessageConverter . toMessage ( java.lang.String , org.springframework.jms.support.Session ) ; assertEquals ( java.lang.String , org.springframework.jms.support.SimpleMessageConverter . fromMessage ( org.springframework.jms.support.Message ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Session org.springframework.jms.support.Session = mock ( Session .class ) ; BytesMessage org.springframework.jms.support.BytesMessage = mock ( BytesMessage .class ) ; byte [] byte[] = STRING . byte[] ( ) ; final java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; given ( org.springframework.jms.support.Session . createBytesMessage ( ) ) . willReturn ( org.springframework.jms.support.BytesMessage ) ; given ( org.springframework.jms.support.BytesMessage . getBodyLength ( ) ) . willReturn ( ( long ) byte[] . int ) ; given ( org.springframework.jms.support.BytesMessage . readBytes ( any ( byte [] .class ) ) ) . willAnswer ( new Answer < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( InvocationOnMock org.springframework.jms.support.InvocationOnMock ) throws java.lang.Throwable { return java.io.ByteArrayInputStream . int ( ( byte [] ) org.springframework.jms.support.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; } } ) ; SimpleMessageConverter org.springframework.jms.support.SimpleMessageConverter = new SimpleMessageConverter ( ) ; Message org.springframework.jms.support.Message = org.springframework.jms.support.SimpleMessageConverter . toMessage ( byte[] , org.springframework.jms.support.Session ) ; assertEquals ( byte[] . int , ( ( byte [] ) org.springframework.jms.support.SimpleMessageConverter . fromMessage ( org.springframework.jms.support.Message ) ) . int ) ; verify ( org.springframework.jms.support.BytesMessage ) . writeBytes ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( InvocationOnMock org.springframework.jms.support.InvocationOnMock ) throws java.lang.Throwable { return java.io.ByteArrayInputStream . int ( ( byte [] ) org.springframework.jms.support.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Session org.springframework.jms.support.Session = mock ( Session .class ) ; MapMessage org.springframework.jms.support.MapMessage = mock ( MapMessage .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; given ( org.springframework.jms.support.Session . createMapMessage ( ) ) . willReturn ( org.springframework.jms.support.MapMessage ) ; given ( org.springframework.jms.support.MapMessage . getMapNames ( ) ) . willReturn ( java.util.Collections . java.util.Enumeration<java.lang.String> ( java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) ) ) ; given ( org.springframework.jms.support.MapMessage . getObject ( STRING ) ) . willReturn ( STRING ) ; given ( org.springframework.jms.support.MapMessage . getObject ( STRING ) ) . willReturn ( STRING ) ; SimpleMessageConverter org.springframework.jms.support.SimpleMessageConverter = new SimpleMessageConverter ( ) ; Message org.springframework.jms.support.Message = org.springframework.jms.support.SimpleMessageConverter . toMessage ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.jms.support.Session ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.jms.support.SimpleMessageConverter . fromMessage ( org.springframework.jms.support.Message ) ) ; verify ( org.springframework.jms.support.MapMessage ) . setObject ( STRING , STRING ) ; verify ( org.springframework.jms.support.MapMessage ) . setObject ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Session org.springframework.jms.support.Session = mock ( Session .class ) ; ObjectMessage org.springframework.jms.support.ObjectMessage = mock ( ObjectMessage .class ) ; java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; given ( org.springframework.jms.support.Session . createObjectMessage ( java.lang.Integer ) ) . willReturn ( org.springframework.jms.support.ObjectMessage ) ; given ( org.springframework.jms.support.ObjectMessage . getObject ( ) ) . willReturn ( java.lang.Integer ) ; SimpleMessageConverter org.springframework.jms.support.SimpleMessageConverter = new SimpleMessageConverter ( ) ; Message org.springframework.jms.support.Message = org.springframework.jms.support.SimpleMessageConverter . toMessage ( java.lang.Integer , org.springframework.jms.support.Session ) ; assertEquals ( java.lang.Integer , org.springframework.jms.support.SimpleMessageConverter . fromMessage ( org.springframework.jms.support.Message ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageConversionException .class ) public void void ( ) java.lang.Exception { new SimpleMessageConverter ( ) . toMessage ( null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageConversionException .class ) public void void ( ) java.lang.Exception { new SimpleMessageConverter ( ) . toMessage ( new java.lang.Object ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Session org.springframework.jms.support.Session = mock ( Session .class ) ; ObjectMessage org.springframework.jms.support.ObjectMessage = mock ( ObjectMessage .class ) ; SimpleMessageConverter org.springframework.jms.support.SimpleMessageConverter = new SimpleMessageConverter ( ) ; Message org.springframework.jms.support.Message = org.springframework.jms.support.SimpleMessageConverter . toMessage ( org.springframework.jms.support.ObjectMessage , org.springframework.jms.support.Session ) ; assertSame ( org.springframework.jms.support.ObjectMessage , org.springframework.jms.support.Message ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message org.springframework.jms.support.Message = mock ( Message .class ) ; SimpleMessageConverter org.springframework.jms.support.SimpleMessageConverter = new SimpleMessageConverter ( ) ; java.lang.Object java.lang.Object = org.springframework.jms.support.SimpleMessageConverter . fromMessage ( org.springframework.jms.support.Message ) ; assertSame ( org.springframework.jms.support.Message , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { MapMessage org.springframework.jms.support.MapMessage = mock ( MapMessage .class ) ; Session org.springframework.jms.support.Session = mock ( Session .class ) ; given ( org.springframework.jms.support.Session . createMapMessage ( ) ) . willReturn ( org.springframework.jms.support.MapMessage ) ; java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > java.util.Map<java.lang.Integer,java.lang.String> = new java.util.HashMap<java.lang.Integer,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , STRING ) ; SimpleMessageConverter org.springframework.jms.support.SimpleMessageConverter = new SimpleMessageConverter ( ) ; try { org.springframework.jms.support.SimpleMessageConverter . toMessage ( java.util.Map<java.lang.Integer,java.lang.String> , org.springframework.jms.support.Session ) ; fail ( STRING ) ; } catch ( MessageConversionException org.springframework.jms.support.MessageConversionException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { MapMessage org.springframework.jms.support.MapMessage = mock ( MapMessage .class ) ; Session org.springframework.jms.support.Session = mock ( Session .class ) ; given ( org.springframework.jms.support.Session . createMapMessage ( ) ) . willReturn ( org.springframework.jms.support.MapMessage ) ; java.util.Map<java.lang.Object,java.lang.String> < java.lang.Object , java.lang.String > java.util.Map<java.lang.Object,java.lang.String> = new java.util.HashMap<java.lang.Object,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.Object,java.lang.String> . java.lang.String ( null , STRING ) ; SimpleMessageConverter org.springframework.jms.support.SimpleMessageConverter = new SimpleMessageConverter ( ) ; try { org.springframework.jms.support.SimpleMessageConverter . toMessage ( java.util.Map<java.lang.Object,java.lang.String> , org.springframework.jms.support.Session ) ; fail ( STRING ) ; } catch ( MessageConversionException org.springframework.jms.support.MessageConversionException ) { } }  <METHOD_END>
