<METHOD_START> @ java.lang.Override public void void ( ApplicationEnvironmentPreparedEvent org.springframework.boot.devtools.ApplicationEnvironmentPreparedEvent ) { ConfigurableEnvironment org.springframework.boot.devtools.ConfigurableEnvironment = org.springframework.boot.devtools.ApplicationEnvironmentPreparedEvent . getEnvironment ( ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.devtools.ConfigurableEnvironment . getProperty ( java.lang.String ) ) ; Assert . state ( StringUtils . hasLength ( java.lang.String ) , STRING ) ; Assert . state ( java.lang.String . int ( STRING ) == - NUMBER , STRING ) ; try { new java.net.URI ( java.lang.String ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) java.lang.String ) ; PropertySource < ? > org.springframework.boot.devtools.PropertySource<?> = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.boot.devtools.ConfigurableEnvironment . getPropertySources ( ) . addLast ( org.springframework.boot.devtools.PropertySource<> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) && java.lang.String . boolean ( STRING ) ) { return java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return Ordered . HIGHEST_PRECEDENCE ; }  <METHOD_END>
