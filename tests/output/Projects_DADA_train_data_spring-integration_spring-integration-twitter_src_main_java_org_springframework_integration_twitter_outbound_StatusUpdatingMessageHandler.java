<METHOD_START> public void ( Twitter org.springframework.integration.twitter.outbound.Twitter ) { Assert . notNull ( org.springframework.integration.twitter.outbound.Twitter , STRING ) ; this . org.springframework.integration.twitter.outbound.Twitter = org.springframework.integration.twitter.outbound.Twitter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.twitter.outbound.Expression ) { this . org.springframework.integration.twitter.outbound.Expression = org.springframework.integration.twitter.outbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( EvaluationContext org.springframework.integration.twitter.outbound.EvaluationContext ) { this . org.springframework.integration.twitter.outbound.EvaluationContext = org.springframework.integration.twitter.outbound.EvaluationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; if ( this . org.springframework.integration.twitter.outbound.EvaluationContext == null ) { this . org.springframework.integration.twitter.outbound.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; TypeLocator org.springframework.integration.twitter.outbound.TypeLocator = this . org.springframework.integration.twitter.outbound.EvaluationContext . getTypeLocator ( ) ; if ( org.springframework.integration.twitter.outbound.TypeLocator instanceof StandardTypeLocator ) { ( ( StandardTypeLocator ) org.springframework.integration.twitter.outbound.TypeLocator ) . registerImport ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.twitter.outbound.Message<?> ) throws java.lang.Exception { java.lang.Object java.lang.Object ; if ( this . org.springframework.integration.twitter.outbound.Expression != null ) { java.lang.Object = this . org.springframework.integration.twitter.outbound.Expression . getValue ( this . org.springframework.integration.twitter.outbound.EvaluationContext , org.springframework.integration.twitter.outbound.Message<> ) ; } else { java.lang.Object = org.springframework.integration.twitter.outbound.Message<> . getPayload ( ) ; } Assert . notNull ( java.lang.Object , STRING ) ; TweetData org.springframework.integration.twitter.outbound.TweetData = null ; if ( java.lang.Object instanceof TweetData ) { org.springframework.integration.twitter.outbound.TweetData = ( TweetData ) java.lang.Object ; } else if ( java.lang.Object instanceof Tweet ) { org.springframework.integration.twitter.outbound.TweetData = new TweetData ( ( ( Tweet ) java.lang.Object ) . getText ( ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.twitter.outbound.TweetData = new TweetData ( ( java.lang.String ) java.lang.Object ) ; } else { throw new MessageHandlingException ( org.springframework.integration.twitter.outbound.Message<> , STRING + java.lang.Object ) ; } this . org.springframework.integration.twitter.outbound.Twitter . timelineOperations ( ) . updateStatus ( org.springframework.integration.twitter.outbound.TweetData ) ; }  <METHOD_END>
