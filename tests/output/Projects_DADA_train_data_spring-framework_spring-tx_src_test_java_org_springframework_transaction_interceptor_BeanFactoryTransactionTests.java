<METHOD_START> @ Before public void void ( ) { this . org.springframework.transaction.interceptor.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( this . org.springframework.transaction.interceptor.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.transaction.interceptor.BeanFactoryTransactionTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , java.lang.reflect.Proxy . boolean ( org.springframework.transaction.interceptor.ITestBean . getClass ( ) ) ) ; assertFalse ( org.springframework.transaction.interceptor.ITestBean instanceof TransactionalProxy ) ; void ( org.springframework.transaction.interceptor.ITestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { this . org.springframework.transaction.interceptor.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , java.lang.reflect.Proxy . boolean ( org.springframework.transaction.interceptor.ITestBean . getClass ( ) ) ) ; assertTrue ( org.springframework.transaction.interceptor.ITestBean instanceof TransactionalProxy ) ; void ( org.springframework.transaction.interceptor.ITestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( org.springframework.transaction.interceptor.ITestBean ) ) ; assertTrue ( org.springframework.transaction.interceptor.ITestBean instanceof TransactionalProxy ) ; void ( org.springframework.transaction.interceptor.ITestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.transaction.interceptor.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.transaction.interceptor.ITestBean . getAge ( ) ) ; assertTrue ( org.springframework.transaction.interceptor.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { ImplementsNoInterfaces org.springframework.transaction.interceptor.ImplementsNoInterfaces = ( ImplementsNoInterfaces ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( org.springframework.transaction.interceptor.ImplementsNoInterfaces ) ) ; assertTrue ( org.springframework.transaction.interceptor.ImplementsNoInterfaces instanceof TransactionalProxy ) ; java.lang.String java.lang.String = STRING ; CallCountingTransactionManager org.springframework.transaction.interceptor.CallCountingTransactionManager = new CallCountingTransactionManager ( ) ; PlatformTransactionManagerFacade . delegate = org.springframework.transaction.interceptor.CallCountingTransactionManager ; org.springframework.transaction.interceptor.ImplementsNoInterfaces . setName ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.transaction.interceptor.ImplementsNoInterfaces . getName ( ) ) ; assertEquals ( NUMBER , ptm . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { ITestBean org.springframework.transaction.interceptor.ITestBean = ( ITestBean ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.transaction.interceptor.ITestBean instanceof DerivedTestBean ) ; assertTrue ( org.springframework.transaction.interceptor.ITestBean instanceof TransactionalProxy ) ; org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterPointcut org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterPointcut = ( org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterPointcut ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterInterceptor org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterInterceptor = ( org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterInterceptor ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterInterceptor org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterInterceptor = ( org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterInterceptor ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterPointcut . int = NUMBER ; org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterInterceptor . int = NUMBER ; org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterInterceptor . int = NUMBER ; void ( org.springframework.transaction.interceptor.ITestBean ) ; assertTrue ( NUMBER < org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterPointcut . int && org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterPointcut . int <= NUMBER ) ; assertEquals ( NUMBER , org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterInterceptor . int ) ; assertEquals ( NUMBER , org.springframework.transaction.interceptor.BeanFactoryTransactionTests.InvocationCounterInterceptor . int ) ; }  <METHOD_END>
<METHOD_START> private void void ( final ITestBean org.springframework.transaction.interceptor.ITestBean ) { PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = mock ( PlatformTransactionManager .class ) ; PlatformTransactionManagerFacade . delegate = org.springframework.transaction.interceptor.PlatformTransactionManager ; assertTrue ( STRING + org.springframework.transaction.interceptor.ITestBean . getAge ( ) , org.springframework.transaction.interceptor.ITestBean . getAge ( ) == NUMBER ) ; verifyZeroInteractions ( org.springframework.transaction.interceptor.PlatformTransactionManager ) ; final TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = mock ( TransactionStatus .class ) ; org.springframework.transaction.interceptor.PlatformTransactionManager = new PlatformTransactionManager ( ) { private boolean boolean ; @ java.lang.Override public org.springframework.transaction.interceptor.TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ( TransactionDefinition org.springframework.transaction.interceptor.TransactionDefinition ) throws org.springframework.transaction.interceptor.TransactionException { if ( boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } boolean = true ; if ( ! ( org.springframework.transaction.interceptor.TransactionDefinition . getName ( ) . contains ( DerivedTestBean .class . java.lang.String ( ) ) && org.springframework.transaction.interceptor.TransactionDefinition . getName ( ) . contains ( STRING ) ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.transaction.interceptor.TransactionDefinition . getName ( ) ) ; } return org.springframework.transaction.interceptor.TransactionStatus ; } @ java.lang.Override public void void ( TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ) throws org.springframework.transaction.interceptor.TransactionException { assertTrue ( org.springframework.transaction.interceptor.TransactionStatus == org.springframework.transaction.interceptor.TransactionStatus ) ; } @ java.lang.Override public void void ( TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ) throws org.springframework.transaction.interceptor.TransactionException { throw new java.lang.IllegalStateException ( STRING ) ; } } ; PlatformTransactionManagerFacade . delegate = org.springframework.transaction.interceptor.PlatformTransactionManager ; int int = NUMBER ; org.springframework.transaction.interceptor.ITestBean . setAge ( int ) ; assertTrue ( org.springframework.transaction.interceptor.ITestBean . getAge ( ) == int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.transaction.interceptor.TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ( TransactionDefinition org.springframework.transaction.interceptor.TransactionDefinition ) throws org.springframework.transaction.interceptor.TransactionException { if ( boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } boolean = true ; if ( ! ( org.springframework.transaction.interceptor.TransactionDefinition . getName ( ) . contains ( DerivedTestBean .class . java.lang.String ( ) ) && org.springframework.transaction.interceptor.TransactionDefinition . getName ( ) . contains ( STRING ) ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.transaction.interceptor.TransactionDefinition . getName ( ) ) ; } return org.springframework.transaction.interceptor.TransactionStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ) throws org.springframework.transaction.interceptor.TransactionException { assertTrue ( org.springframework.transaction.interceptor.TransactionStatus == org.springframework.transaction.interceptor.TransactionStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ) throws org.springframework.transaction.interceptor.TransactionException { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.transaction.interceptor.ITestBean> < java.lang.String , ITestBean > java.util.Map<java.lang.String,org.springframework.transaction.interceptor.ITestBean> = org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBeansOfType ( ITestBean .class , true , true ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.transaction.interceptor.ITestBean> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { DefaultListableBeanFactory org.springframework.transaction.interceptor.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.transaction.interceptor.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.transaction.interceptor.BeanFactoryTransactionTests> ( ) ) ) ; org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( FatalBeanException org.springframework.transaction.interceptor.FatalBeanException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { CallCountingTransactionManager org.springframework.transaction.interceptor.CallCountingTransactionManager = new CallCountingTransactionManager ( ) ; PlatformTransactionManagerFacade . delegate = org.springframework.transaction.interceptor.CallCountingTransactionManager ; TestBean org.springframework.transaction.interceptor.TestBean = ( TestBean ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.transaction.interceptor.TestBean . getAge ( ) ) ; int int = NUMBER ; org.springframework.transaction.interceptor.TestBean . setAge ( int ) ; assertEquals ( int , org.springframework.transaction.interceptor.TestBean . getAge ( ) ) ; TestBean org.springframework.transaction.interceptor.TestBean = new TestBean ( ) ; org.springframework.transaction.interceptor.TestBean . setAge ( NUMBER ) ; HotSwappableTargetSource org.springframework.transaction.interceptor.HotSwappableTargetSource = ( HotSwappableTargetSource ) org.springframework.transaction.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.transaction.interceptor.HotSwappableTargetSource . swap ( org.springframework.transaction.interceptor.TestBean ) ; assertEquals ( org.springframework.transaction.interceptor.TestBean . getAge ( ) , org.springframework.transaction.interceptor.TestBean . getAge ( ) ) ; org.springframework.transaction.interceptor.TestBean . setAge ( int ) ; assertEquals ( int , org.springframework.transaction.interceptor.TestBean . getAge ( ) ) ; assertEquals ( NUMBER , txMan . inflight ) ; assertEquals ( NUMBER , txMan . commits ) ; assertEquals ( NUMBER , txMan . rollbacks ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { int ++ ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.transaction.interceptor.MethodInvocation ) throws java.lang.Throwable { int ++ ; return org.springframework.transaction.interceptor.MethodInvocation . proceed ( ) ; }  <METHOD_END>
