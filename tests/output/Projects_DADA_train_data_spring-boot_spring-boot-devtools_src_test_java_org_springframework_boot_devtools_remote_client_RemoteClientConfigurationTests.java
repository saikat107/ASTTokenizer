<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext != null ) { this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.devtools.remote.client.OutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , true ) ; assertThat ( this . org.springframework.boot.devtools.remote.client.OutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , true ) ; assertThat ( this . org.springframework.boot.devtools.remote.client.OutputCapture . toString ( ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; void ( STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFiles> = new java.util.HashSet<org.springframework.boot.devtools.remote.client.ChangedFiles> <> ( ) ; ClassPathChangedEvent org.springframework.boot.devtools.remote.client.ClassPathChangedEvent = new ClassPathChangedEvent ( this , java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFiles> , false ) ; this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext . publishEvent ( org.springframework.boot.devtools.remote.client.ClassPathChangedEvent ) ; LiveReloadConfiguration org.springframework.boot.devtools.remote.client.LiveReloadConfiguration = this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext . getBean ( LiveReloadConfiguration .class ) ; org.springframework.boot.devtools.remote.client.LiveReloadConfiguration . getExecutor ( ) . shutdown ( ) ; org.springframework.boot.devtools.remote.client.LiveReloadConfiguration . getExecutor ( ) . awaitTermination ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; LiveReloadServer org.springframework.boot.devtools.remote.client.LiveReloadServer = this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext . getBean ( LiveReloadServer .class ) ; verify ( org.springframework.boot.devtools.remote.client.LiveReloadServer ) . triggerReload ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext . getBean ( OptionalLiveReloadServer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext . getBean ( ClassPathFileSystemWatcher .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext . getBean ( TunnelClient .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { void ( STRING , true , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , boolean boolean , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; new RestartScopeInitializer ( ) . initialize ( this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext ) ; this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.devtools.remote.client.RemoteClientConfigurationTests.Config .class , RemoteClientConfiguration .class ) ; java.lang.String java.lang.String = STRING + java.lang.String + STRING + org.springframework.boot.devtools.remote.client.RemoteClientConfigurationTests . int ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext , java.lang.String ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext , java.lang.String[] ) ; if ( boolean ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext , STRING ) ; } this . org.springframework.boot.devtools.remote.client.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.remote.client.TomcatServletWebServerFactory org.springframework.boot.devtools.remote.client.TomcatServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( int ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.remote.client.LiveReloadServer org.springframework.boot.devtools.remote.client.LiveReloadServer ( ) { return mock ( LiveReloadServer .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.remote.client.DispatcherFilter org.springframework.boot.devtools.remote.client.DispatcherFilter ( ) java.io.IOException { return new DispatcherFilter ( org.springframework.boot.devtools.remote.client.Dispatcher ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.devtools.remote.client.Dispatcher org.springframework.boot.devtools.remote.client.Dispatcher ( ) java.io.IOException { Dispatcher org.springframework.boot.devtools.remote.client.Dispatcher = mock ( Dispatcher .class ) ; ServerHttpRequest org.springframework.boot.devtools.remote.client.ServerHttpRequest = ( ServerHttpRequest ) any ( ) ; ServerHttpResponse org.springframework.boot.devtools.remote.client.ServerHttpResponse = ( ServerHttpResponse ) any ( ) ; given ( org.springframework.boot.devtools.remote.client.Dispatcher . handle ( org.springframework.boot.devtools.remote.client.ServerHttpRequest , org.springframework.boot.devtools.remote.client.ServerHttpResponse ) ) . willReturn ( true ) ; return org.springframework.boot.devtools.remote.client.Dispatcher ; }  <METHOD_END>
