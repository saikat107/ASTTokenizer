<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , STRING , Conventions . getVariableName ( new TestObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , STRING , Conventions . getVariableName ( new TestObject [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.core.TestObject> < TestObject > java.util.List<org.springframework.core.TestObject> = java.util.Arrays . java.util.List ( new TestObject ( ) ) ; assertEquals ( STRING , STRING , Conventions . getVariableName ( java.util.List<org.springframework.core.TestObject> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; Conventions . getVariableName ( new java.util.ArrayList <> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , STRING , Conventions . getVariableName ( java.util.Collections . java.util.Set ( new TestObject ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , Conventions . attributeNameToPropertyName ( STRING ) ) ; assertEquals ( STRING , Conventions . attributeNameToPropertyName ( STRING ) ) ; assertEquals ( STRING , Conventions . attributeNameToPropertyName ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.Class<java.lang.String> < java.lang.String > java.lang.Class<java.lang.String> = java.lang.String .class ; java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , Conventions . getQualifiedAttributeName ( java.lang.Class<java.lang.String> , java.lang.String ) ) ; }  <METHOD_END>
