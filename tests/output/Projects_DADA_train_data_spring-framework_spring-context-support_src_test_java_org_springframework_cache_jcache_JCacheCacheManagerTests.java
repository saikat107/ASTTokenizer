<METHOD_START> @ Before public void void ( ) { org.springframework.cache.jcache.JCacheCacheManagerTests.CacheManagerMock = new org.springframework.cache.jcache.JCacheCacheManagerTests.CacheManagerMock ( ) ; org.springframework.cache.jcache.JCacheCacheManagerTests.CacheManagerMock . void ( CACHE_NAME ) ; org.springframework.cache.jcache.JCacheCacheManager = new JCacheCacheManager ( org.springframework.cache.jcache.JCacheCacheManagerTests.CacheManagerMock . org.springframework.cache.jcache.CacheManager ( ) ) ; org.springframework.cache.jcache.JCacheCacheManager . setTransactionAware ( false ) ; org.springframework.cache.jcache.JCacheCacheManager . afterPropertiesSet ( ) ; org.springframework.cache.jcache.JCacheCacheManager = new JCacheCacheManager ( org.springframework.cache.jcache.JCacheCacheManagerTests.CacheManagerMock . org.springframework.cache.jcache.CacheManager ( ) ) ; org.springframework.cache.jcache.JCacheCacheManager . setTransactionAware ( true ) ; org.springframework.cache.jcache.JCacheCacheManager . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.JCacheCacheManager org.springframework.cache.jcache.JCacheCacheManager ( boolean boolean ) { if ( boolean ) { return org.springframework.cache.jcache.JCacheCacheManager ; } else { return org.springframework.cache.jcache.JCacheCacheManager ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<? extends org.springframework.cache.Cache> < ? extends org . springframework . cache . org.springframework.cache.Cache > java.lang.Class<? extends org.springframework.cache.Cache> ( ) { return JCacheCache .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { org.springframework.cache.jcache.JCacheCacheManagerTests.CacheManagerMock . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { org.springframework.cache.jcache.JCacheCacheManagerTests.CacheManagerMock . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( ) { this . java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; this . org.springframework.cache.jcache.CacheManager = mock ( CacheManager .class ) ; given ( org.springframework.cache.jcache.CacheManager . getCacheNames ( ) ) . willReturn ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.jcache.CacheManager org.springframework.cache.jcache.CacheManager ( ) { return org.springframework.cache.jcache.CacheManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; Cache org.springframework.cache.jcache.Cache = mock ( Cache .class ) ; given ( org.springframework.cache.jcache.Cache . getName ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.cache.jcache.CacheManager . getCache ( java.lang.String ) ) . willReturn ( org.springframework.cache.jcache.Cache ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; given ( org.springframework.cache.jcache.CacheManager . getCache ( java.lang.String ) ) . willReturn ( null ) ; }  <METHOD_END>
