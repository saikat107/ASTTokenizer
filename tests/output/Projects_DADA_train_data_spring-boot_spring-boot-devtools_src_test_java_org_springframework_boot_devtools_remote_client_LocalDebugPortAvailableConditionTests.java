<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConditionOutcome org.springframework.boot.devtools.remote.client.ConditionOutcome = org.springframework.boot.devtools.remote.client.ConditionOutcome ( ) ; assertThat ( org.springframework.boot.devtools.remote.client.ConditionOutcome . isMatch ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.devtools.remote.client.ConditionOutcome . getMessage ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( this . int ) ; ConditionOutcome org.springframework.boot.devtools.remote.client.ConditionOutcome = org.springframework.boot.devtools.remote.client.ConditionOutcome ( ) ; java.net.ServerSocket . void ( ) ; assertThat ( org.springframework.boot.devtools.remote.client.ConditionOutcome . isMatch ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.devtools.remote.client.ConditionOutcome . getMessage ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.remote.client.ConditionOutcome org.springframework.boot.devtools.remote.client.ConditionOutcome ( ) { MockEnvironment org.springframework.boot.devtools.remote.client.MockEnvironment = new MockEnvironment ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.devtools.remote.client.MockEnvironment , STRING + this . int ) ; ConditionContext org.springframework.boot.devtools.remote.client.ConditionContext = mock ( ConditionContext .class ) ; given ( org.springframework.boot.devtools.remote.client.ConditionContext . getEnvironment ( ) ) . willReturn ( org.springframework.boot.devtools.remote.client.MockEnvironment ) ; ConditionOutcome org.springframework.boot.devtools.remote.client.ConditionOutcome = this . org.springframework.boot.devtools.remote.client.LocalDebugPortAvailableCondition . getMatchOutcome ( org.springframework.boot.devtools.remote.client.ConditionContext , null ) ; return org.springframework.boot.devtools.remote.client.ConditionOutcome ; }  <METHOD_END>
