<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.Override protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return null ; } } ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.Override protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return null ; } } ; TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.Override protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return java.util.Collections . java.util.List<java.lang.Object> ( null ) ; } } ; TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return java.util.Collections . java.util.List<java.lang.Object> ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; } } ; TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; } } ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; } } ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; } } ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING , STRING } ) ; } } ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING , STRING } ) ; } } ; org.springframework.integration.router.AbstractMappingMessageRouter . setResolutionRequired ( false ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; } } ; org.springframework.integration.router.AbstractMappingMessageRouter . setPrefix ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; } } ; org.springframework.integration.router.AbstractMappingMessageRouter . setPrefix ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; } } ; org.springframework.integration.router.AbstractMappingMessageRouter . setSuffix ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; } } ; org.springframework.integration.router.AbstractMappingMessageRouter . setSuffix ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.Object> . boolean ( java.util.List<java.lang.String> ) ; return java.util.List<java.lang.Object> ; } } ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.Object> . boolean ( java.util.List<java.lang.String> ) ; return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; final QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { MessageChannel [] org.springframework.integration.router.MessageChannel[] = new MessageChannel [] { org.springframework.integration.router.QueueChannel } ; MessageChannel [] org.springframework.integration.router.MessageChannel[] = new MessageChannel [] { org.springframework.integration.router.QueueChannel } ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.integration.router.MessageChannel[] ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.integration.router.MessageChannel[] ) ; return java.util.List<java.lang.Object> ; } } ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { MessageChannel [] org.springframework.integration.router.MessageChannel[] = new MessageChannel [] { org.springframework.integration.router.QueueChannel } ; MessageChannel [] org.springframework.integration.router.MessageChannel[] = new MessageChannel [] { org.springframework.integration.router.QueueChannel } ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.integration.router.MessageChannel[] ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.integration.router.MessageChannel[] ) ; return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; final QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.Integer [] { NUMBER , NUMBER } ) ; } } ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.Integer [] { NUMBER , NUMBER } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { final QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new org.springframework.integration.router.RouterTests.CustomObjectWithChannelName [] { new org.springframework.integration.router.RouterTests.CustomObjectWithChannelName ( ) } ) ; } } ; GenericApplicationContext org.springframework.integration.router.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.router.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.GenericApplicationContext . refresh ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( org.springframework.integration.router.GenericApplicationContext ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new org.springframework.integration.router.RouterTests.CustomObjectWithChannelName [] { new org.springframework.integration.router.RouterTests.CustomObjectWithChannelName ( ) } ) ; }  <METHOD_END>
