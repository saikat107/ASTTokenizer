<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.transaction.jta.TransactionSystemException { super. afterPropertiesSet ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.transaction.jta.UserTransaction org.springframework.transaction.jta.UserTransaction ( ) org.springframework.transaction.jta.TransactionSystemException { void ( ) ; try { logger . debug ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( STRING ) ; return ( UserTransaction ) java.lang.reflect.Method . java.lang.Object ( this . java.lang.Object ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new TransactionSystemException ( STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new TransactionSystemException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.transaction.jta.TransactionManager org.springframework.transaction.jta.TransactionManager ( ) org.springframework.transaction.jta.TransactionSystemException { void ( ) ; try { logger . debug ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( STRING ) ; return ( TransactionManager ) java.lang.reflect.Method . java.lang.Object ( this . java.lang.Object ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new TransactionSystemException ( STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new TransactionSystemException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.transaction.jta.TransactionSystemException { if ( this . java.lang.Object == null ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.transaction.jta.WebLogicJtaTransactionManager> ( ) . java.lang.ClassLoader ( ) . java.lang.Class<?> ( java.lang.String ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING ) ; this . java.lang.Object = java.lang.reflect.Method . java.lang.Object ( null ) ; logger . debug ( STRING ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new TransactionSystemException ( STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new TransactionSystemException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.transaction.jta.TransactionSystemException { try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.transaction.jta.WebLogicJtaTransactionManager> ( ) . java.lang.ClassLoader ( ) . java.lang.Class<?> ( java.lang.String ) ; this . boolean = java.lang.Class<> . boolean ( getUserTransaction ( ) ) ; if ( this . boolean ) { this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.String .class , int .class ) ; logger . info ( STRING ) ; } else { logger . info ( STRING ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.transaction.jta.WebLogicJtaTransactionManager> ( ) . java.lang.ClassLoader ( ) . java.lang.Class<?> ( java.lang.String ) ; logger . debug ( STRING ) ; this . boolean = java.lang.Class<> . boolean ( getTransactionManager ( ) ) ; if ( this . boolean ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.transaction.jta.WebLogicJtaTransactionManager> ( ) . java.lang.ClassLoader ( ) . java.lang.Class<?> ( java.lang.String ) ; this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , Transaction .class ) ; this . java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.String .class , java.io.Serializable .class ) ; logger . debug ( STRING ) ; } else { logger . warn ( STRING ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new TransactionSystemException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject , TransactionDefinition org.springframework.transaction.jta.TransactionDefinition )			throws org.springframework.transaction.jta.NotSupportedException , org.springframework.transaction.jta.SystemException { int int = determineTimeout ( org.springframework.transaction.jta.TransactionDefinition ) ; if ( this . boolean && org.springframework.transaction.jta.TransactionDefinition . getName ( ) != null ) { try { if ( int > TransactionDefinition . TIMEOUT_DEFAULT ) { this . java.lang.reflect.Method . java.lang.Object ( org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) , org.springframework.transaction.jta.TransactionDefinition . getName ( ) , int ) ; } else { this . java.lang.reflect.Method . java.lang.Object ( org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) , org.springframework.transaction.jta.TransactionDefinition . getName ( ) ) ; } } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new TransactionSystemException ( STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new TransactionSystemException ( STRING , java.lang.Exception ) ; } } else { applyTimeout ( org.springframework.transaction.jta.JtaTransactionObject , int ) ; org.springframework.transaction.jta.JtaTransactionObject . getUserTransaction ( ) . begin ( ) ; } if ( this . boolean ) { if ( org.springframework.transaction.jta.TransactionDefinition . getIsolationLevel ( ) != TransactionDefinition . ISOLATION_DEFAULT ) { try { Transaction org.springframework.transaction.jta.Transaction = getTransactionManager ( ) . getTransaction ( ) ; java.lang.Integer java.lang.Integer = org.springframework.transaction.jta.TransactionDefinition . getIsolationLevel ( ) ; this . java.lang.reflect.Method . java.lang.Object ( org.springframework.transaction.jta.Transaction , java.lang.String , java.lang.Integer ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new TransactionSystemException ( STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new TransactionSystemException ( STRING , java.lang.Exception ) ; } } } else { applyIsolationLevel ( org.springframework.transaction.jta.JtaTransactionObject , org.springframework.transaction.jta.TransactionDefinition . getIsolationLevel ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject , java.lang.Object java.lang.Object )			throws javax.transaction.InvalidTransactionException , org.springframework.transaction.jta.SystemException { try { getTransactionManager ( ) . resume ( ( Transaction ) java.lang.Object ) ; } catch ( javax.transaction.InvalidTransactionException javax.transaction.InvalidTransactionException ) { if ( ! this . boolean ) { throw javax.transaction.InvalidTransactionException ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + javax.transaction.InvalidTransactionException . java.lang.String ( ) + STRING ) ; } try { this . java.lang.reflect.Method . java.lang.Object ( getTransactionManager ( ) , java.lang.Object ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new TransactionSystemException ( STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new TransactionSystemException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.transaction.jta.Transaction org.springframework.transaction.jta.Transaction ( java.lang.String java.lang.String , int int ) throws org.springframework.transaction.jta.NotSupportedException , org.springframework.transaction.jta.SystemException { if ( this . boolean && java.lang.String != null ) { try { if ( int >= NUMBER ) { this . java.lang.reflect.Method . java.lang.Object ( getUserTransaction ( ) , java.lang.String , int ) ; } else { this . java.lang.reflect.Method . java.lang.Object ( getUserTransaction ( ) , java.lang.String ) ; } } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { if ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) instanceof NotSupportedException ) { throw ( NotSupportedException ) java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } else if ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) instanceof SystemException ) { throw ( SystemException ) java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } else if ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } else { throw new SystemException ( STRING + java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new SystemException ( STRING + java.lang.Exception ) ; } return new ManagedTransactionAdapter ( getTransactionManager ( ) ) ; } else { return super. createTransaction ( java.lang.String , int ) ; } }  <METHOD_END>
