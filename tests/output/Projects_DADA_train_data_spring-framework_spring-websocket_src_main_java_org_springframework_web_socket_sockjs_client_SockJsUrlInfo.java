<METHOD_START> public void ( java.net.URI java.net.URI ) { this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( this . java.lang.String == null ) { this . java.lang.String = java.lang.String . java.lang.String ( java.lang.Math . long ( java.util.UUID ( ) . long ( ) ) % NUMBER ) ; } return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( this . java.lang.String == null ) { this . java.lang.String = java.util.UUID ( ) . java.lang.String ( ) . java.lang.String ( STRING , STRING ) ; } return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.util.UUID java.util.UUID ( ) { if ( this . java.util.UUID == null ) { this . java.util.UUID = org.springframework.web.socket.sockjs.client.IdGenerator . generateId ( ) ; } return this . java.util.UUID ; }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( ) { return UriComponentsBuilder . fromUri ( this . java.net.URI ) . scheme ( java.lang.String ( TransportType . XHR ) ) . pathSegment ( STRING ) . build ( true ) . toUri ( ) ; }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( TransportType org.springframework.web.socket.sockjs.client.TransportType ) { return UriComponentsBuilder . fromUri ( this . java.net.URI ) . scheme ( java.lang.String ( org.springframework.web.socket.sockjs.client.TransportType ) ) . pathSegment ( java.lang.String ( ) ) . pathSegment ( java.lang.String ( ) ) . pathSegment ( org.springframework.web.socket.sockjs.client.TransportType . toString ( ) ) . build ( true ) . toUri ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( TransportType org.springframework.web.socket.sockjs.client.TransportType ) { java.lang.String java.lang.String = this . java.net.URI . java.lang.String ( ) ; if ( TransportType . WEBSOCKET . equals ( org.springframework.web.socket.sockjs.client.TransportType ) ) { if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = ( STRING . boolean ( java.lang.String ) ? STRING : STRING ) ; } } else { if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = ( STRING . boolean ( java.lang.String ) ? STRING : STRING ) ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.net.URI + STRING ; }  <METHOD_END>
