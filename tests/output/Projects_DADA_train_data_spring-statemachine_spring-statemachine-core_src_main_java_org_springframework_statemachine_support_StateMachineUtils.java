<METHOD_START> public static < S , E > boolean boolean ( State < S , E > org.springframework.statemachine.support.State<S,E> , State < S , E > org.springframework.statemachine.support.State<S,E> ) { if ( org.springframework.statemachine.support.State<S,E> == null ) { return false ; } java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> = org.springframework.statemachine.support.State<S,E> . getStates ( ) ; java.util.Collection<org.springframework.statemachine.support.State<S,E>> . remove ( org.springframework.statemachine.support.State<S,E> ) ; return java.util.Collection<org.springframework.statemachine.support.State<S,E>> . contains ( org.springframework.statemachine.support.State<S,E> ) ; }  <METHOD_END>
<METHOD_START> public static < S > boolean boolean ( java.util.Collection<S> < S > java.util.Collection<S> , java.util.Collection<S> < S > java.util.Collection<S> ) { if ( java.util.Collection<S> == null || java.util.Collection<S> == null ) { return false ; } for ( S S : java.util.Collection<S> ) { if ( java.util.Collection<S> . boolean ( S ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public static < S , E > boolean boolean ( State < S , E > org.springframework.statemachine.support.State<S,E> ) { if ( org.springframework.statemachine.support.State<S,E> == null ) { return false ; } PseudoState < S , E > org.springframework.statemachine.support.PseudoState<S,E> = org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) ; if ( org.springframework.statemachine.support.PseudoState<S,E> == null ) { return false ; } PseudoStateKind org.springframework.statemachine.support.PseudoStateKind = org.springframework.statemachine.support.PseudoState<S,E> . getKind ( ) ; if ( org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . INITIAL || org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . END ) { return false ; } else { return true ; } }  <METHOD_END>
<METHOD_START> public static < S , E > boolean boolean ( State < S , E > org.springframework.statemachine.support.State<S,E> ) { if ( org.springframework.statemachine.support.State<S,E> == null ) { return false ; } PseudoState < S , E > org.springframework.statemachine.support.PseudoState<S,E> = org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) ; if ( org.springframework.statemachine.support.PseudoState<S,E> == null ) { return false ; } PseudoStateKind org.springframework.statemachine.support.PseudoStateKind = org.springframework.statemachine.support.PseudoState<S,E> . getKind ( ) ; if ( org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . CHOICE || org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . JUNCTION || org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . ENTRY || org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . EXIT || org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . HISTORY_DEEP || org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . HISTORY_SHALLOW || org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . FORK || org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . JOIN ) { return true ; } else { return false ; } }  <METHOD_END>
<METHOD_START> public static < S , E > boolean boolean ( State < S , E > org.springframework.statemachine.support.State<S,E> , PseudoStateKind org.springframework.statemachine.support.PseudoStateKind ) { if ( org.springframework.statemachine.support.State<S,E> != null ) { PseudoState < S , E > org.springframework.statemachine.support.PseudoState<S,E> = org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) ; return org.springframework.statemachine.support.PseudoState<S,E> != null && org.springframework.statemachine.support.PseudoState<S,E> . getKind ( ) == org.springframework.statemachine.support.PseudoStateKind ; } return false ; }  <METHOD_END>
<METHOD_START> public static < S > java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.util.Collection<S> < S > java.util.Collection<S> ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( S S : java.util.Collection<S> ) { java.util.Collection<java.lang.String> . boolean ( S . java.lang.String ( ) ) ; } return java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public static java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.lang.Object java.lang.Object ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; if ( ObjectUtils . isArray ( java.lang.Object ) ) { for ( java.lang.Object java.lang.Object : ObjectUtils . toObjectArray ( java.lang.Object ) ) { java.util.Collection<java.lang.String> . boolean ( java.lang.Object . java.lang.String ( ) ) ; } } return java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , java.lang.String java.lang.String ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( NUMBER ) ; java.util.Collection<java.lang.String> . boolean ( java.lang.String ) ; return boolean ( java.util.Collection<java.lang.String> , java.util.Collection<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { if ( java.util.Collection<java.lang.String> == null || java.util.Collection<java.lang.String> == null ) { return false ; } for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { if ( java.util.Collection<java.lang.String> . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
