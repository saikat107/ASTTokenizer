<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . setIgnoreFailedDrops ( true ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( defaultSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( defaultSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( defaultSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( defaultSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . setSeparator ( STRING ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( defaultSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . setSeparator ( STRING ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( defaultSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( defaultSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . setSeparator ( STRING ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( usersSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; assertUsersDatabaseCreated ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( usersSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; assertUsersDatabaseCreated ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . setSeparator ( ScriptUtils . EOF_STATEMENT_SEPARATOR ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; assertUsersDatabaseCreated ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final ResourceDatabasePopulator org.springframework.jdbc.datasource.init.ResourceDatabasePopulator = new ResourceDatabasePopulator ( usersSchema ( ) , resource ( STRING ) ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; assertUsersDatabaseCreated ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( defaultSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; assertThat ( jdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { TransactionSynchronizationManager . initSynchronization ( ) ; java.sql.Connection java.sql.Connection = DataSourceUtils . getConnection ( db ) ; DatabasePopulator org.springframework.jdbc.datasource.init.DatabasePopulator = mock ( DatabasePopulator .class ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.DatabasePopulator , db ) ; verify ( org.springframework.jdbc.datasource.init.DatabasePopulator ) . populate ( java.sql.Connection ) ; }  <METHOD_END>
<METHOD_START> @ Test ( timeout = NUMBER ) public void void ( ) java.sql.SQLException { org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( defaultSchema ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( resource ( STRING ) ) ; DatabasePopulatorUtils . execute ( org.springframework.jdbc.datasource.init.ResourceDatabasePopulator , db ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertEquals ( java.lang.String , jdbcTemplate . queryForObject ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
