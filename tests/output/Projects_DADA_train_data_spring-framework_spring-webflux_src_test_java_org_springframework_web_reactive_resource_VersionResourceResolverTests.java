<METHOD_START> @ Before public void void ( ) { this . java.util.List<org.springframework.web.reactive.resource.Resource> = new java.util.ArrayList <> ( ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.VersionResourceResolverTests> ( ) ) ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.VersionResourceResolverTests> ( ) ) ) ; this . org.springframework.web.reactive.resource.VersionResourceResolver = new VersionResourceResolver ( ) ; this . org.springframework.web.reactive.resource.ResourceResolverChain = mock ( ResourceResolverChain .class ) ; this . org.springframework.web.reactive.resource.VersionStrategy = mock ( VersionStrategy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING + java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.VersionResourceResolverTests> ( ) ) ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . just ( org.springframework.web.reactive.resource.Resource ) ) ; this . org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Collections . java.util.Map ( STRING , this . org.springframework.web.reactive.resource.VersionStrategy ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.VersionResourceResolver . resolveResourceInternal ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( org.springframework.web.reactive.resource.Resource , org.springframework.web.reactive.resource.Resource ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; verify ( this . org.springframework.web.reactive.resource.VersionStrategy , never ( ) ) . extractVersion ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; this . org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.VersionResourceResolver . resolveResourceInternal ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertNull ( org.springframework.web.reactive.resource.Resource ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; given ( this . org.springframework.web.reactive.resource.VersionStrategy . extractVersion ( java.lang.String ) ) . willReturn ( STRING ) ; this . org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Collections . java.util.Map ( STRING , this . org.springframework.web.reactive.resource.VersionStrategy ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.VersionResourceResolver . resolveResourceInternal ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertNull ( org.springframework.web.reactive.resource.Resource ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; verify ( this . org.springframework.web.reactive.resource.VersionStrategy , times ( NUMBER ) ) . extractVersion ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; given ( this . org.springframework.web.reactive.resource.VersionStrategy . extractVersion ( java.lang.String ) ) . willReturn ( java.lang.String ) ; given ( this . org.springframework.web.reactive.resource.VersionStrategy . removeVersion ( java.lang.String , java.lang.String ) ) . willReturn ( java.lang.String ) ; this . org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Collections . java.util.Map ( STRING , this . org.springframework.web.reactive.resource.VersionStrategy ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.VersionResourceResolver . resolveResourceInternal ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertNull ( org.springframework.web.reactive.resource.Resource ) ; verify ( this . org.springframework.web.reactive.resource.VersionStrategy , times ( NUMBER ) ) . removeVersion ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING + java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.VersionResourceResolverTests> ( ) ) ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . just ( org.springframework.web.reactive.resource.Resource ) ) ; given ( this . org.springframework.web.reactive.resource.VersionStrategy . extractVersion ( java.lang.String ) ) . willReturn ( java.lang.String ) ; given ( this . org.springframework.web.reactive.resource.VersionStrategy . removeVersion ( java.lang.String , java.lang.String ) ) . willReturn ( java.lang.String ) ; given ( this . org.springframework.web.reactive.resource.VersionStrategy . getResourceVersion ( org.springframework.web.reactive.resource.Resource ) ) . willReturn ( STRING ) ; this . org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Collections . java.util.Map ( STRING , this . org.springframework.web.reactive.resource.VersionStrategy ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.VersionResourceResolver . resolveResourceInternal ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertNull ( org.springframework.web.reactive.resource.Resource ) ; verify ( this . org.springframework.web.reactive.resource.VersionStrategy , times ( NUMBER ) ) . getResourceVersion ( org.springframework.web.reactive.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING + java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.VersionResourceResolverTests> ( ) ) ; ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . just ( org.springframework.web.reactive.resource.Resource ) ) ; given ( this . org.springframework.web.reactive.resource.VersionStrategy . extractVersion ( java.lang.String ) ) . willReturn ( java.lang.String ) ; given ( this . org.springframework.web.reactive.resource.VersionStrategy . removeVersion ( java.lang.String , java.lang.String ) ) . willReturn ( java.lang.String ) ; given ( this . org.springframework.web.reactive.resource.VersionStrategy . getResourceVersion ( org.springframework.web.reactive.resource.Resource ) ) . willReturn ( java.lang.String ) ; this . org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Collections . java.util.Map ( STRING , this . org.springframework.web.reactive.resource.VersionStrategy ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.VersionResourceResolver . resolveResourceInternal ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( org.springframework.web.reactive.resource.Resource . getFilename ( ) , org.springframework.web.reactive.resource.Resource . getFilename ( ) ) ; verify ( this . org.springframework.web.reactive.resource.VersionStrategy , times ( NUMBER ) ) . getResourceVersion ( org.springframework.web.reactive.resource.Resource ) ; assertThat ( org.springframework.web.reactive.resource.Resource , instanceOf ( HttpResource .class ) ) ; assertEquals ( STRING + java.lang.String + STRING , ( ( HttpResource ) org.springframework.web.reactive.resource.Resource ) . getResponseHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> < java.lang.String , VersionStrategy > java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> = new java.util.HashMap<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> <> ( ) ; VersionStrategy org.springframework.web.reactive.resource.VersionStrategy = mock ( VersionStrategy .class ) ; VersionStrategy org.springframework.web.reactive.resource.VersionStrategy = mock ( VersionStrategy .class ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> . put ( STRING , org.springframework.web.reactive.resource.VersionStrategy ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> . put ( STRING STRING , org.springframework.web.reactive.resource.VersionStrategy ) ; this . org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> ) ; assertEquals ( org.springframework.web.reactive.resource.VersionStrategy , this . org.springframework.web.reactive.resource.VersionResourceResolver . getStrategyForPath ( STRING ) ) ; assertEquals ( org.springframework.web.reactive.resource.VersionStrategy , this . org.springframework.web.reactive.resource.VersionResourceResolver . getStrategyForPath ( STRING ) ) ; assertEquals ( org.springframework.web.reactive.resource.VersionStrategy , this . org.springframework.web.reactive.resource.VersionResourceResolver . getStrategyForPath ( STRING ) ) ; assertEquals ( org.springframework.web.reactive.resource.VersionStrategy , this . org.springframework.web.reactive.resource.VersionResourceResolver . getStrategyForPath ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.resource.VersionResourceResolver . addFixedVersionStrategy ( STRING , STRING , STRING , STRING ) ; assertThat ( this . org.springframework.web.reactive.resource.VersionResourceResolver . getStrategyMap ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( this . org.springframework.web.reactive.resource.VersionResourceResolver . getStrategyForPath ( STRING ) , Matchers . instanceOf ( FixedVersionStrategy .class ) ) ; assertThat ( this . org.springframework.web.reactive.resource.VersionResourceResolver . getStrategyForPath ( STRING ) , Matchers . instanceOf ( FixedVersionStrategy .class ) ) ; assertThat ( this . org.springframework.web.reactive.resource.VersionResourceResolver . getStrategyForPath ( STRING ) , Matchers . instanceOf ( FixedVersionStrategy .class ) ) ; assertThat ( this . org.springframework.web.reactive.resource.VersionResourceResolver . getStrategyForPath ( STRING ) , Matchers . instanceOf ( FixedVersionStrategy .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( STRING , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . just ( STRING ) ) ; java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.VersionResourceResolver . resolveUrlPathInternal ( STRING , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertThat ( java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
