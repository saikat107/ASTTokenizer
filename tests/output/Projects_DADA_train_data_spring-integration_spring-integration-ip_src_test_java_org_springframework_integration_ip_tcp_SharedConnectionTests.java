<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = NUMBER ; while ( ! org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . isListening ( ) ) { java.lang.Thread . void ( NUMBER ) ; if ( int ++ > NUMBER ) { fail ( STRING ) ; } } MessageChannel org.springframework.integration.ip.tcp.MessageChannel = org.springframework.integration.ip.tcp.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.ip.tcp.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = org.springframework.integration.ip.tcp.AbstractApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; MessageHistory org.springframework.integration.ip.tcp.MessageHistory = MessageHistory . read ( org.springframework.integration.ip.tcp.Message<> ) ; assertNotNull ( org.springframework.integration.ip.tcp.MessageHistory ) ; java.util.Properties java.util.Properties = TestUtils . locateComponentInHistory ( org.springframework.integration.ip.tcp.MessageHistory , STRING , NUMBER ) ; assertNotNull ( java.util.Properties ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ; }  <METHOD_END>
