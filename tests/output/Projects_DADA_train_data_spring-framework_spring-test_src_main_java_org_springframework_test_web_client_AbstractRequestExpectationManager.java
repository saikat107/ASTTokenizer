<METHOD_START> protected java.util.List<org.springframework.test.web.client.RequestExpectation> < RequestExpectation > java.util.List<org.springframework.test.web.client.RequestExpectation> ( ) { return this . java.util.List<org.springframework.test.web.client.RequestExpectation> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.test.web.client.ClientHttpRequest> < ClientHttpRequest > java.util.List<org.springframework.test.web.client.ClientHttpRequest> ( ) { return this . java.util.List<org.springframework.test.web.client.ClientHttpRequest> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.client.ResponseActions org.springframework.test.web.client.ResponseActions ( ExpectedCount org.springframework.test.web.client.ExpectedCount , RequestMatcher org.springframework.test.web.client.RequestMatcher ) { Assert . state ( java.util.List<org.springframework.test.web.client.ClientHttpRequest> ( ) . isEmpty ( ) , STRING ) ; RequestExpectation org.springframework.test.web.client.RequestExpectation = new DefaultRequestExpectation ( org.springframework.test.web.client.ExpectedCount , org.springframework.test.web.client.RequestMatcher ) ; java.util.List<org.springframework.test.web.client.RequestExpectation> ( ) . add ( org.springframework.test.web.client.RequestExpectation ) ; return org.springframework.test.web.client.RequestExpectation ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.client.ClientHttpResponse org.springframework.test.web.client.ClientHttpResponse ( ClientHttpRequest org.springframework.test.web.client.ClientHttpRequest ) throws java.io.IOException { synchronized ( this . java.lang.Object ) { if ( java.util.List<org.springframework.test.web.client.ClientHttpRequest> ( ) . isEmpty ( ) ) { void ( ) ; } ClientHttpResponse org.springframework.test.web.client.ClientHttpResponse = org.springframework.test.web.client.ClientHttpResponse ( org.springframework.test.web.client.ClientHttpRequest ) ; java.util.List<org.springframework.test.web.client.ClientHttpRequest> ( ) . add ( org.springframework.test.web.client.ClientHttpRequest ) ; return org.springframework.test.web.client.ClientHttpResponse ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> protected abstract org.springframework.test.web.client.ClientHttpResponse org.springframework.test.web.client.ClientHttpResponse ( ClientHttpRequest org.springframework.test.web.client.ClientHttpRequest ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( java.util.List<org.springframework.test.web.client.RequestExpectation> ( ) . isEmpty ( ) ) { return; } int int = NUMBER ; for ( RequestExpectation org.springframework.test.web.client.RequestExpectation : java.util.List<org.springframework.test.web.client.RequestExpectation> ( ) ) { if ( ! org.springframework.test.web.client.RequestExpectation . isSatisfied ( ) ) { int ++ ; } } if ( int > NUMBER ) { java.lang.String java.lang.String = STRING + int + STRING ; throw new java.lang.AssertionError ( java.lang.String + java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.List<org.springframework.test.web.client.ClientHttpRequest> ( ) . size ( ) ) . append ( STRING ) ; if ( ! java.util.List<org.springframework.test.web.client.ClientHttpRequest> ( ) . isEmpty ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; for ( ClientHttpRequest org.springframework.test.web.client.ClientHttpRequest : java.util.List<org.springframework.test.web.client.ClientHttpRequest> ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.test.web.client.ClientHttpRequest . toString ( ) ) . append ( STRING ) ; } } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.AssertionError java.lang.AssertionError ( ClientHttpRequest org.springframework.test.web.client.ClientHttpRequest ) { HttpMethod org.springframework.test.web.client.HttpMethod = org.springframework.test.web.client.ClientHttpRequest . getMethod ( ) ; java.net.URI java.net.URI = org.springframework.test.web.client.ClientHttpRequest . getURI ( ) ; java.lang.String java.lang.String = STRING + org.springframework.test.web.client.HttpMethod + STRING + java.net.URI + STRING ; return new java.lang.AssertionError ( java.lang.String + java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.List<org.springframework.test.web.client.RequestExpectation> . clear ( ) ; this . java.util.List<org.springframework.test.web.client.ClientHttpRequest> . clear ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.test.web.client.RequestExpectation> < RequestExpectation > java.util.Set<org.springframework.test.web.client.RequestExpectation> ( ) { return this . java.util.Set<org.springframework.test.web.client.RequestExpectation> ; }  <METHOD_END>
<METHOD_START> public void void ( RequestExpectation org.springframework.test.web.client.RequestExpectation ) { if ( org.springframework.test.web.client.RequestExpectation . hasRemainingCount ( ) ) { java.util.Set<org.springframework.test.web.client.RequestExpectation> ( ) . add ( org.springframework.test.web.client.RequestExpectation ) ; } else { java.util.Set<org.springframework.test.web.client.RequestExpectation> ( ) . remove ( org.springframework.test.web.client.RequestExpectation ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<org.springframework.test.web.client.RequestExpectation> < RequestExpectation > java.util.Collection<org.springframework.test.web.client.RequestExpectation> ) { for ( RequestExpectation org.springframework.test.web.client.RequestExpectation : java.util.Collection<org.springframework.test.web.client.RequestExpectation> ) { void ( org.springframework.test.web.client.RequestExpectation ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.client.RequestExpectation org.springframework.test.web.client.RequestExpectation ( ClientHttpRequest org.springframework.test.web.client.ClientHttpRequest ) throws java.io.IOException { for ( RequestExpectation org.springframework.test.web.client.RequestExpectation : java.util.Set<org.springframework.test.web.client.RequestExpectation> ( ) ) { try { org.springframework.test.web.client.RequestExpectation . match ( org.springframework.test.web.client.ClientHttpRequest ) ; return org.springframework.test.web.client.RequestExpectation ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { } } return null ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.Set<org.springframework.test.web.client.RequestExpectation> . clear ( ) ; }  <METHOD_END>
