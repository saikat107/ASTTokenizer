<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.statemachine.action.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.statemachine.action.SpelExpressionActionTests.Config1 .class ) ; assertTrue ( org.springframework.statemachine.action.AnnotationConfigApplicationContext . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> = org.springframework.statemachine.action.AnnotationConfigApplicationContext . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; TestStateMachineListener org.springframework.statemachine.action.TestStateMachineListener = new TestStateMachineListener ( ) ; org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . addStateListener ( org.springframework.statemachine.action.TestStateMachineListener ) ; org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . start ( ) ; org.springframework.statemachine.action.TestStateMachineListener . reset ( NUMBER , NUMBER ) ; org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( listener . stateChangedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S3 ) ) ; org.springframework.statemachine.action.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( Expression org.springframework.statemachine.action.Expression ) { super( org.springframework.statemachine.action.Expression ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.action.StateMachineStateConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.action.StateMachineStateConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 , TestEvents . E2 ) . state ( TestStates . S2 ) . state ( TestStates . S3 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.action.StateMachineTransitionConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.action.StateMachineTransitionConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . action ( org.springframework.statemachine.action.SpelExpressionActionTests.TestSpelAction ( ) ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E2 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.action.SpelExpressionActionTests.TestSpelAction org.springframework.statemachine.action.SpelExpressionActionTests.TestSpelAction ( ) { ExpressionParser org.springframework.statemachine.action.ExpressionParser = new SpelExpressionParser ( ) ; return new org.springframework.statemachine.action.SpelExpressionActionTests.TestSpelAction ( org.springframework.statemachine.action.ExpressionParser . parseExpression ( STRING ) ) ; }  <METHOD_END>
