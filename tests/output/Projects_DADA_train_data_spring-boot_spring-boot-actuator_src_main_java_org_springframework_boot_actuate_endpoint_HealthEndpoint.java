<METHOD_START> public void ( HealthAggregator org.springframework.boot.actuate.endpoint.HealthAggregator , java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> ) { super( STRING , false ); Assert . notNull ( org.springframework.boot.actuate.endpoint.HealthAggregator , STRING ) ; Assert . notNull ( java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> , STRING ) ; CompositeHealthIndicator org.springframework.boot.actuate.endpoint.CompositeHealthIndicator = new CompositeHealthIndicator ( org.springframework.boot.actuate.endpoint.HealthAggregator ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> : java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> . entrySet ( ) ) { org.springframework.boot.actuate.endpoint.CompositeHealthIndicator . addHealthIndicator ( java.lang.String ( java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> . getKey ( ) ) , java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> . getValue ( ) ) ; } this . org.springframework.boot.actuate.endpoint.HealthIndicator = org.springframework.boot.actuate.endpoint.CompositeHealthIndicator ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.endpoint.Health org.springframework.boot.actuate.endpoint.Health ( ) { return this . org.springframework.boot.actuate.endpoint.HealthIndicator . health ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int int = java.lang.String . java.lang.String ( ) . int ( STRING ) ; if ( int > NUMBER ) { return java.lang.String . java.lang.String ( NUMBER , int ) ; } return java.lang.String ; }  <METHOD_END>
