<METHOD_START> @ Before public void void ( ) { ClassPathResource org.springframework.web.reactive.resource.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.CssLinkResourceTransformerTests> ( ) ) ; ResourceWebHandler org.springframework.web.reactive.resource.ResourceWebHandler = new ResourceWebHandler ( ) ; ResourceUrlProvider org.springframework.web.reactive.resource.ResourceUrlProvider = new ResourceUrlProvider ( ) ; org.springframework.web.reactive.resource.ResourceUrlProvider . setHandlerMap ( java.util.Collections . java.util.Map ( STRING , org.springframework.web.reactive.resource.ResourceWebHandler ) ) ; VersionResourceResolver org.springframework.web.reactive.resource.VersionResourceResolver = new VersionResourceResolver ( ) ; org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Collections . java.util.Map ( STRING , new ContentVersionStrategy ( ) ) ) ; PathResourceResolver org.springframework.web.reactive.resource.PathResourceResolver = new PathResourceResolver ( ) ; org.springframework.web.reactive.resource.PathResourceResolver . setAllowedLocations ( org.springframework.web.reactive.resource.ClassPathResource ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.resource.ResourceResolver> = java.util.Arrays . java.util.List ( org.springframework.web.reactive.resource.VersionResourceResolver , org.springframework.web.reactive.resource.PathResourceResolver ) ; CssLinkResourceTransformer org.springframework.web.reactive.resource.CssLinkResourceTransformer = new CssLinkResourceTransformer ( ) ; org.springframework.web.reactive.resource.CssLinkResourceTransformer . setResourceUrlProvider ( org.springframework.web.reactive.resource.ResourceUrlProvider ) ; java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> = java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.CssLinkResourceTransformer ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setResourceResolvers ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setResourceTransformers ( java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setLocations ( java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.ClassPathResource ) ) ; ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain = new DefaultResourceResolverChain ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) ; this . org.springframework.web.reactive.resource.ResourceTransformerChain = new DefaultResourceTransformerChain ( org.springframework.web.reactive.resource.ResourceResolverChain , java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.CssLinkResourceTransformerTests> ( ) ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING ; StepVerifier . create ( this . org.springframework.web.reactive.resource.ResourceTransformerChain . transform ( org.springframework.web.reactive.resource.MockServerWebExchange , org.springframework.web.reactive.resource.Resource ) . cast ( TransformedResource .class ) ) . consumeNextWith ( resource -> { String result = new String ( resource . getByteArray ( ) , StandardCharsets . UTF_8 ) ; result = StringUtils . deleteAny ( result , STRING ) ; assertEquals ( expected , result ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.CssLinkResourceTransformerTests> ( ) ) ; StepVerifier . create ( this . org.springframework.web.reactive.resource.ResourceTransformerChain . transform ( org.springframework.web.reactive.resource.MockServerWebExchange , org.springframework.web.reactive.resource.Resource ) ) . consumeNextWith ( resource -> assertSame ( expected , resource ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain = Mockito . mock ( DefaultResourceResolverChain .class ) ; ResourceTransformerChain org.springframework.web.reactive.resource.ResourceTransformerChain = new DefaultResourceTransformerChain ( org.springframework.web.reactive.resource.ResourceResolverChain , java.util.Collections . java.util.List ( new CssLinkResourceTransformer ( ) ) ) ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.CssLinkResourceTransformerTests> ( ) ) ; StepVerifier . create ( org.springframework.web.reactive.resource.ResourceTransformerChain . transform ( org.springframework.web.reactive.resource.MockServerWebExchange , org.springframework.web.reactive.resource.Resource ) . cast ( TransformedResource .class ) ) . consumeNextWith ( resource -> { String expected = STRING + STRING + STRING ; String result = new String ( resource . getByteArray ( ) , StandardCharsets . UTF_8 ) ; result = StringUtils . deleteAny ( result , STRING ) ; assertEquals ( expected , result ) ; } ) . expectComplete ( ) . verify ( ) ; Mockito . verify ( org.springframework.web.reactive.resource.ResourceResolverChain , Mockito . never ( ) ) . resolveUrlPath ( STRING , java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.Resource ) ) ; Mockito . verify ( org.springframework.web.reactive.resource.ResourceResolverChain , Mockito . never ( ) ) . resolveUrlPath ( STRING , java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.Resource ) ) ; Mockito . verify ( org.springframework.web.reactive.resource.ResourceResolverChain , Mockito . never ( ) ) . resolveUrlPath ( STRING , java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.Resource ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.CssLinkResourceTransformerTests> ( ) ) ; StepVerifier . create ( this . org.springframework.web.reactive.resource.ResourceTransformerChain . transform ( org.springframework.web.reactive.resource.MockServerWebExchange , org.springframework.web.reactive.resource.Resource ) ) . expectNext ( org.springframework.web.reactive.resource.Resource ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.CssLinkResourceTransformerTests> ( ) ) ; void ( STRING , STRING ) ; GzipResourceResolver . GzipResourceResolver GzipResourceResolver.GzippedResource = new GzipResourceResolver . GzipResourceResolver ( org.springframework.web.reactive.resource.Resource ) ; StepVerifier . create ( this . org.springframework.web.reactive.resource.ResourceTransformerChain . transform ( org.springframework.web.reactive.resource.MockServerWebExchange , GzipResourceResolver.GzippedResource ) ) . expectNext ( GzipResourceResolver.GzippedResource ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING , org.springframework.web.reactive.resource.CssLinkResourceTransformerTests .class ) ; java.nio.file.Path java.nio.file.Path = java.nio.file.Paths . java.nio.file.Path ( org.springframework.web.reactive.resource.Resource . getFile ( ) . getAbsolutePath ( ) , java.lang.String ) ; java.nio.file.Path java.nio.file.Path = java.nio.file.Paths . java.nio.file.Path ( org.springframework.web.reactive.resource.Resource . getFile ( ) . getAbsolutePath ( ) , java.lang.String ) ; java.nio.file.Files . boolean ( java.nio.file.Path ) ; java.nio.file.Files . java.nio.file.Path ( java.nio.file.Path , java.nio.file.Path ) ; java.nio.file.Path . java.io.File ( ) . void ( ) ; }  <METHOD_END>
