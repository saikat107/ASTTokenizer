<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; org.springframework.data.neo4j.repository.cdi.CdiTestContainer = CdiTestContainerLoader . getCdiContainer ( ) ; org.springframework.data.neo4j.repository.cdi.CdiTestContainer . bootContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { org.springframework.data.neo4j.repository.cdi.CdiTestContainer . shutdownContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryClient org.springframework.data.neo4j.repository.cdi.RepositoryClient = org.springframework.data.neo4j.repository.cdi.CdiTestContainer . getInstance ( RepositoryClient .class ) ; CdiPersonRepository org.springframework.data.neo4j.repository.cdi.CdiPersonRepository = client . repository ; assertThat ( org.springframework.data.neo4j.repository.cdi.CdiPersonRepository , is ( notNullValue ( ) ) ) ; Person org.springframework.data.neo4j.repository.cdi.Person = null ; Person org.springframework.data.neo4j.repository.cdi.Person = null ; org.springframework.data.neo4j.repository.cdi.CdiPersonRepository . deleteAll ( ) ; org.springframework.data.neo4j.repository.cdi.Person = new Person ( ) ; org.springframework.data.neo4j.repository.cdi.Person . setFirstName ( STRING ) ; org.springframework.data.neo4j.repository.cdi.Person . setLastName ( STRING ) ; org.springframework.data.neo4j.repository.cdi.Person = org.springframework.data.neo4j.repository.cdi.CdiPersonRepository . save ( org.springframework.data.neo4j.repository.cdi.Person ) ; assertThat ( org.springframework.data.neo4j.repository.cdi.Person , is ( notNullValue ( ) ) ) ; java.lang.Long java.lang.Long = org.springframework.data.neo4j.repository.cdi.Person . getId ( ) ; java.util.Optional<org.springframework.data.neo4j.repository.cdi.Person> < Person > java.util.Optional<org.springframework.data.neo4j.repository.cdi.Person> = org.springframework.data.neo4j.repository.cdi.CdiPersonRepository . findOne ( org.springframework.data.neo4j.repository.cdi.Person . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.repository.cdi.Person> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.repository.cdi.Person> . ifPresent ( actual -> assertThat ( actual . getId ( ) , is ( resultId ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryClient org.springframework.data.neo4j.repository.cdi.RepositoryClient = org.springframework.data.neo4j.repository.cdi.CdiTestContainer . getInstance ( RepositoryClient .class ) ; client . qualifiedPersonRepository . deleteAll ( ) ; assertEquals ( NUMBER , client . qualifiedPersonRepository . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryClient org.springframework.data.neo4j.repository.cdi.RepositoryClient = org.springframework.data.neo4j.repository.cdi.CdiTestContainer . getInstance ( RepositoryClient .class ) ; assertEquals ( NUMBER , client . samplePersonRepository . returnOne ( ) ) ; }  <METHOD_END>
