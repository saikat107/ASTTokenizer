<METHOD_START> @ Test public void void ( ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( ) . build ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.RequestMappingInfo . getPatternsCondition ( ) . getPatterns ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMethodsCondition ( ) . getMethods ( ) . size ( ) ) ; assertEquals ( true , org.springframework.web.servlet.mvc.method.RequestMappingInfo . getConsumesCondition ( ) . isEmpty ( ) ) ; assertEquals ( true , org.springframework.web.servlet.mvc.method.RequestMappingInfo . getProducesCondition ( ) . isEmpty ( ) ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . getParamsCondition ( ) ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . getHeadersCondition ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . getCustomCondition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpServletRequest org.springframework.web.servlet.mvc.method.HttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING , STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . build ( ) ; assertEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.HttpServletRequest ) ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING , STRING , STRING ) . build ( ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING , STRING , STRING ) . build ( ) ; assertEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.HttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . setParameter ( STRING , STRING ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . params ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . params ( STRING ) . build ( ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . addHeader ( STRING , STRING ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . headers ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . headers ( STRING ) . build ( ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . setContentType ( STRING ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . consumes ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . consumes ( STRING ) . build ( ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . addHeader ( STRING , STRING ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . produces ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . produces ( STRING ) . build ( ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . setParameter ( STRING , STRING ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . params ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . params ( STRING ) . params ( STRING ) . build ( ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( ) . methods ( GET ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( ) . methods ( GET ) . params ( STRING ) . build ( ) ; java.util.Comparator<org.springframework.web.servlet.mvc.method.RequestMappingInfo> < RequestMappingInfo > java.util.Comparator<org.springframework.web.servlet.mvc.method.RequestMappingInfo> = ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , org.springframework.web.servlet.mvc.method.RequestMappingInfo ) -> org.springframework.web.servlet.mvc.method.RequestMappingInfo . compareTo ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , new MockHttpServletRequest ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> < RequestMappingInfo > java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> = java.util.List ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , org.springframework.web.servlet.mvc.method.RequestMappingInfo , org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; java.util.Collections . void ( java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> ) ; java.util.Collections . void ( java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> , java.util.Comparator<org.springframework.web.servlet.mvc.method.RequestMappingInfo> ) ; assertEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> . get ( NUMBER ) ) ; assertEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> . get ( NUMBER ) ) ; assertEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . addHeader ( STRING , STRING ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( ) . methods ( GET ) . produces ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( ) . methods ( HEAD ) . build ( ) ; java.util.Comparator<org.springframework.web.servlet.mvc.method.RequestMappingInfo> < RequestMappingInfo > java.util.Comparator<org.springframework.web.servlet.mvc.method.RequestMappingInfo> = ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , org.springframework.web.servlet.mvc.method.RequestMappingInfo ) -> org.springframework.web.servlet.mvc.method.RequestMappingInfo . compareTo ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> < RequestMappingInfo > java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> = java.util.List ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , org.springframework.web.servlet.mvc.method.RequestMappingInfo , org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; java.util.Collections . void ( java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> ) ; java.util.Collections . void ( java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> , java.util.Comparator<org.springframework.web.servlet.mvc.method.RequestMappingInfo> ) ; assertEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> . get ( NUMBER ) ) ; assertEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> . get ( NUMBER ) ) ; assertEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , java.util.List<org.springframework.web.servlet.mvc.method.RequestMappingInfo> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . methods ( GET ) . params ( STRING , STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . methods ( GET ) . params ( STRING , STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . build ( ) ; assertEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; assertEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) , org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING , STRING ) . methods ( GET ) . params ( STRING , STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . build ( ) ; assertFalse ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . equals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) , org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . methods ( GET , RequestMethod . POST ) . params ( STRING , STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . build ( ) ; assertFalse ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . equals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) , org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . methods ( GET ) . params ( STRING , STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . build ( ) ; assertFalse ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . equals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) , org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . methods ( GET ) . params ( STRING , STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . build ( ) ; assertFalse ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . equals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) , org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . methods ( GET ) . params ( STRING , STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . build ( ) ; assertFalse ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . equals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) , org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . methods ( GET ) . params ( STRING , STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . build ( ) ; assertFalse ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . equals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) , org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . methods ( GET ) . params ( STRING , STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . build ( ) ; assertFalse ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . equals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) , org.springframework.web.servlet.mvc.method.RequestMappingInfo . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . POST ) . build ( ) ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . OPTIONS ) . build ( ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfo = org.springframework.web.servlet.mvc.method.RequestMappingInfo . getMatchingCondition ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNull ( STRING , org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; }  <METHOD_END>
