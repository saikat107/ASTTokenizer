<METHOD_START> public void ( java.lang.String [] java.lang.String[] , java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ) { super( STRING ); this . java.util.List<java.lang.String[]> = java.util.Arrays .< java.lang.String [] > java.util.List<java.lang.String[]> ( java.lang.String[] ) ; this . java.util.Map<java.lang.String,java.lang.String[]> = java.util.Map<java.lang.String,java.lang.String[]> ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<java.lang.String[]> < java.lang.String [] > java.util.List<java.lang.String[]> , java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ) { super( STRING ); Assert . notEmpty ( java.util.List<java.lang.String[]> , STRING ) ; this . java.util.List<java.lang.String[]> = java.util.List<java.lang.String[]> ; this . java.util.Map<java.lang.String,java.lang.String[]> = java.util.Map<java.lang.String,java.lang.String[]> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; int int = NUMBER ; for ( java.lang.String [] java.lang.String[] : this . java.util.List<java.lang.String[]> ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . arrayToDelimitedString ( java.lang.String[] , STRING ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; int ++ ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( this . java.util.Map<java.lang.String,java.lang.String[]> ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public final java.lang.String [] java.lang.String[] ( ) { return this . java.util.List<java.lang.String[]> . java.lang.String[] ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public final java.util.List<java.lang.String[]> < java.lang.String [] > java.util.List<java.lang.String[]> ( ) { return this . java.util.List<java.lang.String[]> ; }  <METHOD_END>
<METHOD_START> public final java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ( ) { return this . java.util.Map<java.lang.String,java.lang.String[]> ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String[]>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > > java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String[]>> = java.util.Map<java.lang.String,java.lang.String[]> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String[]>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String[]>> ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String[]>> . boolean ( ) ;) { java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map.Entry<java.lang.String,java.lang.String[]> = java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String[]>> . java.util.Map.Entry<java.lang.String,java.lang.String[]> ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String ( ) ) . java.lang.StringBuilder ( '=' ) . java.lang.StringBuilder ( ObjectUtils . nullSafeToString ( java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String[] ( ) ) ) ; if ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String[]>> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
