<METHOD_START> @ Before public void void ( ) { transformer = new FileToStringTransformer ( ) ; transformer . setCharset ( DEFAULT_ENCODING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.transformer.Message<?> = transformer . transform ( message ) ; assertThat ( org.springframework.integration.file.transformer.Message<> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.integration.file.transformer.Message<> , hasPayload ( instanceOf ( java.lang.String .class ) ) ) ; assertThat ( org.springframework.integration.file.transformer.Message<> , hasPayload ( SAMPLE_CONTENT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { transformer . setCharset ( STRING ) ; Message < ? > org.springframework.integration.file.transformer.Message<?> = transformer . transform ( message ) ; assertThat ( org.springframework.integration.file.transformer.Message<> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.integration.file.transformer.Message<> , hasPayload ( instanceOf ( java.lang.String .class ) ) ) ; assertThat ( org.springframework.integration.file.transformer.Message<> , hasPayload ( not ( SAMPLE_CONTENT ) ) ) ; }  <METHOD_END>
