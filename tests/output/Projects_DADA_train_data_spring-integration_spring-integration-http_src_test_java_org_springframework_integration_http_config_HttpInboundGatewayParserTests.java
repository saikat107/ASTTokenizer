<METHOD_START> @ Test public void void ( ) { assertNotNull ( this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway ) ; assertTrue ( getPropertyValue ( this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING , java.lang.Boolean .class ) ) ; assertTrue ( getPropertyValue ( this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING , java.lang.Boolean .class ) ) ; assertSame ( this . org.springframework.integration.http.config.PollableChannel , getPropertyValue ( this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING ) ) ; MessagingTemplate org.springframework.integration.http.config.MessagingTemplate = TestUtils . getPropertyValue ( this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING , MessagingTemplate .class ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.http.config.MessagingTemplate , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.http.config.MessagingTemplate , STRING ) ) ; boolean boolean = TestUtils . getPropertyValue ( this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING , java.lang.Boolean .class ) ; assertFalse ( STRING , boolean ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> = TestUtils . getPropertyValue ( this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING , java.util.List .class ) ; assertTrue ( STRING , java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> . size ( ) > NUMBER ) ; assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { this . org.springframework.integration.http.config.SubscribableChannel . subscribe ( org.springframework.integration.http.config.MessageHandler ( any ( Message .class ) ) ) ; MockHttpServletRequest org.springframework.integration.http.config.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.config.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.config.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.integration.http.config.MockHttpServletRequest . setParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.integration.http.config.MockHttpServletResponse = new MockHttpServletResponse ( ) ; java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.integration.http.config.HttpMessageConverter<?>> <> ( ) ; SerializingHttpMessageConverter org.springframework.integration.http.config.SerializingHttpMessageConverter = new SerializingHttpMessageConverter ( ) ; org.springframework.integration.http.config.SerializingHttpMessageConverter . setSupportedMediaTypes ( java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) ) ; java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> . add ( org.springframework.integration.http.config.SerializingHttpMessageConverter ) ; this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway . setMessageConverters ( java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> ) ; this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway . start ( ) ; this . org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.config.MockHttpServletRequest , org.springframework.integration.http.config.MockHttpServletResponse ) ; assertThat ( org.springframework.integration.http.config.MockHttpServletResponse . getStatus ( ) , is ( HttpServletResponse . SC_OK ) ) ; assertEquals ( org.springframework.integration.http.config.MockHttpServletResponse . getContentType ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectFieldAccessor org.springframework.integration.http.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.http.config.HttpRequestHandlingController ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.http.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; LiteralExpression org.springframework.integration.http.config.LiteralExpression = ( LiteralExpression ) org.springframework.integration.http.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , org.springframework.integration.http.config.LiteralExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectFieldAccessor org.springframework.integration.http.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.http.config.HttpRequestHandlingController ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.http.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; SpelExpression org.springframework.integration.http.config.SpelExpression = ( SpelExpression ) org.springframework.integration.http.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( org.springframework.integration.http.config.SpelExpression ) ; assertEquals ( STRING , org.springframework.integration.http.config.SpelExpression . getExpressionString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.config.DefaultHttpHeaderMapper = ( DefaultHttpHeaderMapper ) TestUtils . getPropertyValue ( org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING ) ; HttpHeaders org.springframework.integration.http.config.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.config.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.config.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.config.HttpHeaders . set ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.http.config.DefaultHttpHeaderMapper . toHeaders ( org.springframework.integration.http.config.HttpHeaders ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . int ( ) == NUMBER ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; MessageHeaders org.springframework.integration.http.config.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.integration.http.config.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.config.DefaultHttpHeaderMapper . fromHeaders ( org.springframework.integration.http.config.MessageHeaders , org.springframework.integration.http.config.HttpHeaders ) ; assertTrue ( org.springframework.integration.http.config.HttpHeaders . size ( ) == NUMBER ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.http.config.HttpHeaders . get ( STRING ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.config.DefaultHttpHeaderMapper = ( DefaultHttpHeaderMapper ) TestUtils . getPropertyValue ( org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING ) ; org.springframework.integration.http.config.DefaultHttpHeaderMapper . setUserDefinedHeaderPrefix ( STRING ) ; HttpHeaders org.springframework.integration.http.config.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.config.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.config.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.config.HttpHeaders . set ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.http.config.DefaultHttpHeaderMapper . toHeaders ( org.springframework.integration.http.config.HttpHeaders ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . int ( ) == NUMBER ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.integration.http.config.HttpInboundGatewayParserTests.Person org.springframework.integration.http.config.HttpInboundGatewayParserTests.Person = new org.springframework.integration.http.config.HttpInboundGatewayParserTests.Person ( ) ; org.springframework.integration.http.config.HttpInboundGatewayParserTests.Person . void ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.http.config.HttpInboundGatewayParserTests.Person ) ; MessageHeaders org.springframework.integration.http.config.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.integration.http.config.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.config.DefaultHttpHeaderMapper . fromHeaders ( org.springframework.integration.http.config.MessageHeaders , org.springframework.integration.http.config.HttpHeaders ) ; assertTrue ( org.springframework.integration.http.config.HttpHeaders . size ( ) == NUMBER ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.http.config.HttpHeaders . get ( STRING ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.http.config.HttpHeaders . get ( STRING ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> = TestUtils . getPropertyValue ( org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING , java.util.List .class ) ; assertThat ( STRING , java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> . get ( NUMBER ) , instanceOf ( SerializingHttpMessageConverter .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> = TestUtils . getPropertyValue ( org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING , java.util.List .class ) ; assertThat ( java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> . get ( NUMBER ) , instanceOf ( SerializingHttpMessageConverter .class ) ) ; assertThat ( STRING , java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> = TestUtils . getPropertyValue ( org.springframework.integration.http.config.HttpRequestHandlingMessagingGateway , STRING , java.util.List .class ) ; assertThat ( java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> . get ( NUMBER ) , instanceOf ( SerializingHttpMessageConverter .class ) ) ; assertTrue ( STRING , java.util.List<org.springframework.integration.http.config.HttpMessageConverter<?>> . size ( ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.integration.http.config.MessageHandler org.springframework.integration.http.config.MessageHandler ( final Matcher < Message > org.springframework.integration.http.config.Matcher<org.springframework.integration.http.config.Message> ) { return message -> assertThat ( message , is ( messageMatcher ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( org.springframework.integration.http.config.HttpInboundGatewayParserTests.Person org.springframework.integration.http.config.HttpInboundGatewayParserTests.Person ) { return org.springframework.integration.http.config.HttpInboundGatewayParserTests.Person . java.lang.String ( ) ; }  <METHOD_END>
