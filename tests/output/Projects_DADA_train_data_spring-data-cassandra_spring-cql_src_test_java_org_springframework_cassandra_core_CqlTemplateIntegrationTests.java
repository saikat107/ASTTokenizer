<METHOD_START> @ Before public void void ( ) java.lang.Exception { if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { getSession ( ) . execute ( STRING ) ; } else { session . execute ( STRING ) ; } session . execute ( STRING ) ; org.springframework.cassandra.core.CqlTemplate = new CqlTemplate ( ) ; org.springframework.cassandra.core.CqlTemplate . setSession ( getSession ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.CqlTemplate . execute ( STRING ) ; assertThat ( session . execute ( STRING ) . one ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; org.springframework.cassandra.core.CqlTemplate . query ( STRING , row -> { result . add ( row . getString ( NUMBER ) ) ; } ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , java.lang.String .class ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.cassandra.core.CqlTemplate . queryForMap ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . containsEntry ( STRING , STRING ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.CqlTemplate . execute ( QueryBuilder . delete ( ) . from ( STRING ) . where ( QueryBuilder . eq ( STRING , STRING ) ) ) ; assertThat ( session . execute ( STRING ) . one ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; org.springframework.cassandra.core.CqlTemplate . query ( QueryBuilder . select ( STRING ) . from ( STRING ) , row -> { result . add ( row . getString ( NUMBER ) ) ; } ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( QueryBuilder . select ( STRING ) . from ( STRING ) , java.lang.String .class ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.cassandra.core.CqlTemplate . queryForMap ( QueryBuilder . select ( ) . from ( STRING ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . containsEntry ( STRING , STRING ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.CqlTemplate . execute ( STRING , STRING ) ; assertThat ( session . execute ( STRING ) . one ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; org.springframework.cassandra.core.CqlTemplate . query ( STRING , row -> { result . add ( row . getString ( NUMBER ) ) ; } , STRING ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; org.springframework.cassandra.core.CqlTemplate . query ( session -> session . prepare ( STRING ) , ps -> ps . bind ( STRING ) , row -> { result . add ( row . getString ( NUMBER ) ) ; } ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = org.springframework.cassandra.core.CqlTemplate . queryForObject ( STRING , java.lang.String .class , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.cassandra.core.CqlTemplate . queryForMap ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . containsEntry ( STRING , STRING ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
