<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean1 org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean1 = new org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean1 ( ) ; CallCountingTransactionManager org.springframework.transaction.annotation.CallCountingTransactionManager = new CallCountingTransactionManager ( ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionInterceptor org.springframework.transaction.annotation.TransactionInterceptor = new TransactionInterceptor ( org.springframework.transaction.annotation.CallCountingTransactionManager , org.springframework.transaction.annotation.AnnotationTransactionAttributeSource ) ; ProxyFactory org.springframework.transaction.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.transaction.annotation.ProxyFactory . setInterfaces ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class ) ; org.springframework.transaction.annotation.ProxyFactory . addAdvice ( org.springframework.transaction.annotation.TransactionInterceptor ) ; org.springframework.transaction.annotation.ProxyFactory . setTarget ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean1 ) ; org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean = ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean ) org.springframework.transaction.annotation.ProxyFactory . getProxy ( ) ; org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean . int ( ) ; assertEquals ( NUMBER , ptm . commits ) ; org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean = ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean ) ; org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean . int ( ) ; Advised org.springframework.transaction.annotation.Advised = ( Advised ) org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean ; TransactionInterceptor org.springframework.transaction.annotation.TransactionInterceptor = ( TransactionInterceptor ) org.springframework.transaction.annotation.Advised . getAdvisors ( ) [ NUMBER ] . getAdvice ( ) ; CallCountingTransactionManager org.springframework.transaction.annotation.CallCountingTransactionManager = ( CallCountingTransactionManager ) org.springframework.transaction.annotation.TransactionInterceptor . getTransactionManager ( ) ; assertEquals ( NUMBER , serializedPtm . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.Empty .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; assertNull ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , null ) ) ; assertNull ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean1 .class ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( java.lang.Exception .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean1 org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean1 = new org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean1 ( ) ; ProxyFactory org.springframework.transaction.annotation.ProxyFactory = new ProxyFactory ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean1 ) ; org.springframework.transaction.annotation.ProxyFactory . setProxyTargetClass ( true ) ; java.lang.Object java.lang.Object = org.springframework.transaction.annotation.ProxyFactory . getProxy ( ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( java.lang.Exception .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean2 .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean2 .class ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean3 .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean3 .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean3 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_REQUIRES_NEW , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; assertEquals ( TransactionAttribute . ISOLATION_REPEATABLE_READ , org.springframework.transaction.annotation.TransactionAttribute . getIsolationLevel ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.annotation.TransactionAttribute . getTimeout ( ) ) ; assertTrue ( org.springframework.transaction.annotation.TransactionAttribute . isReadOnly ( ) ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( java.lang.Exception .class ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new NoRollbackRuleAttribute ( java.io.IOException .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean3 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_REQUIRED , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean3 .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean3 .class ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( STRING ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new NoRollbackRuleAttribute ( java.io.IOException .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; assertTrue ( org.springframework.transaction.annotation.TransactionAttribute . rollbackOn ( new java.lang.Exception ( ) ) ) ; assertFalse ( org.springframework.transaction.annotation.TransactionAttribute . rollbackOn ( new java.io.IOException ( ) ) ) ; org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( STRING ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new NoRollbackRuleAttribute ( java.io.IOException .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; assertTrue ( org.springframework.transaction.annotation.TransactionAttribute . rollbackOn ( new java.lang.Exception ( ) ) ) ; assertFalse ( org.springframework.transaction.annotation.TransactionAttribute . rollbackOn ( new java.io.IOException ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean4 .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean4 .class ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( java.lang.Exception .class ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new NoRollbackRuleAttribute ( java.io.IOException .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean5 .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean5 .class ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( java.lang.Exception .class ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new NoRollbackRuleAttribute ( java.io.IOException .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean6 .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean6 .class ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( java.lang.Exception .class ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new NoRollbackRuleAttribute ( java.io.IOException .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean7 .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean7 .class ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( java.lang.Exception .class ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new NoRollbackRuleAttribute ( java.io.IOException .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; assertTrue ( org.springframework.transaction.annotation.TransactionAttribute . isReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean8 .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean8 .class ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( java.lang.Exception .class ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new NoRollbackRuleAttribute ( java.io.IOException .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; assertTrue ( org.springframework.transaction.annotation.TransactionAttribute . isReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestInterface9 .class . java.lang.reflect.Method ( STRING ) ; Transactional org.springframework.transaction.annotation.Transactional = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , Transactional .class ) ; assertNull ( STRING , org.springframework.transaction.annotation.Transactional ) ; org.springframework.transaction.annotation.Transactional = AnnotationUtils . findAnnotation ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean9 .class , Transactional .class ) ; assertNotNull ( STRING , org.springframework.transaction.annotation.Transactional ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean9 .class ) ; assertNotNull ( STRING , org.springframework.transaction.annotation.TransactionAttribute ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( java.lang.Exception .class ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new NoRollbackRuleAttribute ( java.io.IOException .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; assertTrue ( org.springframework.transaction.annotation.TransactionAttribute . isReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestInterface10 .class . java.lang.reflect.Method ( STRING ) ; Transactional org.springframework.transaction.annotation.Transactional = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , Transactional .class ) ; assertNotNull ( STRING , org.springframework.transaction.annotation.Transactional ) ; org.springframework.transaction.annotation.Transactional = AnnotationUtils . findAnnotation ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean10 .class , Transactional .class ) ; assertNull ( STRING , org.springframework.transaction.annotation.Transactional ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TestBean10 .class ) ; assertNotNull ( STRING , org.springframework.transaction.annotation.TransactionAttribute ) ; RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new RollbackRuleAttribute ( java.lang.Exception .class ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . add ( new NoRollbackRuleAttribute ( java.io.IOException .class ) ) ; assertEquals ( org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) , ( ( RuleBasedTransactionAttribute ) org.springframework.transaction.annotation.TransactionAttribute ) . getRollbackRules ( ) ) ; assertTrue ( org.springframework.transaction.annotation.TransactionAttribute . isReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.Ejb3AnnotatedBean1 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_REQUIRED , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.Ejb3AnnotatedBean1 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_SUPPORTS , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.Ejb3AnnotatedBean2 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_REQUIRED , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.Ejb3AnnotatedBean2 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_SUPPORTS , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestEjb .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestEjb .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.Ejb3AnnotatedBean3 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_REQUIRED , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.Ejb3AnnotatedBean3 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_SUPPORTS , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.JtaAnnotatedBean1 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_REQUIRED , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.JtaAnnotatedBean1 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_SUPPORTS , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.JtaAnnotatedBean2 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_REQUIRED , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.JtaAnnotatedBean2 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_SUPPORTS , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestEjb .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestEjb .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.JtaAnnotatedBean3 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_REQUIRED , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.JtaAnnotatedBean3 .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_SUPPORTS , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.ITestBean .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = GroovyObject .class . java.lang.reflect.Method ( STRING ) ; AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.GroovyTestBean .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_REQUIRED , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.GroovyTestBean .class ) ; assertEquals ( TransactionAttribute . PROPAGATION_REQUIRED , org.springframework.transaction.annotation.TransactionAttribute . getPropagationBehavior ( ) ) ; assertNull ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.GroovyTestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
<METHOD_START> void void ( int int );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Transactional int int ( )  <METHOD_END>
<METHOD_START> void void ( int int );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
<METHOD_START> void void ( int int );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional ( rollbackFor = java.lang.Exception .class ) public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional ( propagation = Propagation . REQUIRES_NEW , isolation = Isolation . REPEATABLE_READ , timeout = NUMBER , readOnly = true , rollbackFor = java.lang.Exception .class , noRollbackFor = java.io.IOException .class ) public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.Tx public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TxWithAttribute ( boolean = true ) public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ org.springframework.transaction.annotation.AnnotationTransactionAttributeSourceTests.TxWithAttribute ( boolean = true ) int int ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> void void ( T T );  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional public void void ( java.lang.String java.lang.String ) { java.lang.System . java.io.PrintStream . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax . javax.ejb . javax.ejb ( TransactionAttributeType . SUPPORTS ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax . javax.ejb . javax.ejb public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax . javax.ejb . javax.ejb public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ javax . javax.ejb . javax.ejb int int ( )  <METHOD_END>
<METHOD_START> void void ( int int );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax . transaction . javax.transaction.Transactional ( javax . transaction . Transactional . TxType . SUPPORTS ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax . transaction . javax.transaction.Transactional public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax . transaction . javax.transaction.Transactional public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ javax . transaction . javax.transaction.Transactional int int ( )  <METHOD_END>
<METHOD_START> void void ( int int );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.transaction.annotation.MetaClass org.springframework.transaction.annotation.MetaClass ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MetaClass org.springframework.transaction.annotation.MetaClass ) {		}  <METHOD_END>
