<METHOD_START> public void ( WebHandler org.springframework.web.server.handler.WebHandler , java.util.List<org.springframework.web.server.handler.WebFilter> < WebFilter > java.util.List<org.springframework.web.server.handler.WebFilter> ) { super( org.springframework.web.server.handler.WebHandler ); this . org.springframework.web.server.handler.WebFilter[] = ! CollectionUtils . isEmpty ( java.util.List<org.springframework.web.server.handler.WebFilter> ) ? java.util.List<org.springframework.web.server.handler.WebFilter> . toArray ( new WebFilter [ java.util.List<org.springframework.web.server.handler.WebFilter> . size ( ) ] ) : new WebFilter [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.server.handler.WebFilter> < WebFilter > java.util.List<org.springframework.web.server.handler.WebFilter> ( ) { return java.util.Arrays . java.util.List ( this . org.springframework.web.server.handler.WebFilter[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange ) { return this . org.springframework.web.server.handler.WebFilter[] . length != NUMBER ? new DefaultWebFilterChain ( getDelegate ( ) , this . org.springframework.web.server.handler.WebFilter[] ) . filter ( org.springframework.web.server.handler.ServerWebExchange ) : super. handle ( org.springframework.web.server.handler.ServerWebExchange ) ; }  <METHOD_END>
