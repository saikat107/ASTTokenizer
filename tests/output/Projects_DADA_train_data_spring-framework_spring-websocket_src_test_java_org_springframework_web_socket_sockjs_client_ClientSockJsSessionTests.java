<METHOD_START> @ Before public void void ( ) java.lang.Exception { SockJsUrlInfo org.springframework.web.socket.sockjs.client.SockJsUrlInfo = new SockJsUrlInfo ( new java.net.URI ( STRING ) ) ; Transport org.springframework.web.socket.sockjs.client.Transport = mock ( Transport .class ) ; TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest = new DefaultTransportRequest ( org.springframework.web.socket.sockjs.client.SockJsUrlInfo , null , null , org.springframework.web.socket.sockjs.client.Transport , TransportType . XHR , org.springframework.web.socket.sockjs.client.Jackson2SockJsMessageCodec ) ; this . org.springframework.web.socket.sockjs.client.WebSocketHandler = mock ( WebSocketHandler .class ) ; this . org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> = new SettableListenableFuture <> ( ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession = new org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession ( org.springframework.web.socket.sockjs.client.TransportRequest , this . org.springframework.web.socket.sockjs.client.WebSocketHandler , this . org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . isOpen ( ) , is ( false ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . isOpen ( ) , is ( true ) ) ; assertTrue ( this . org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> . isDone ( ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> . get ( ) , sameInstance ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession ) ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . isOpen ( ) , is ( true ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . org.springframework.web.socket.sockjs.client.CloseStatus , equalTo ( new CloseStatus ( NUMBER , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { willThrow ( new java.lang.IllegalStateException ( STRING ) ) . given ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . isOpen ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . messageFrame ( org.springframework.web.socket.sockjs.client.Jackson2SockJsMessageCodec , STRING , STRING ) . getContent ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . handleMessage ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession , new TextMessage ( STRING ) ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . handleMessage ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession , new TextMessage ( STRING ) ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . close ( ) ; reset ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . messageFrame ( org.springframework.web.socket.sockjs.client.Jackson2SockJsMessageCodec , STRING , STRING ) . getContent ( ) ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( STRING ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . isOpen ( ) , equalTo ( false ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . org.springframework.web.socket.sockjs.client.CloseStatus , equalTo ( CloseStatus . BAD_DATA ) ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; willThrow ( new java.lang.IllegalStateException ( STRING ) ) . given ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . handleMessage ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession , new TextMessage ( STRING ) ) ; willThrow ( new java.lang.IllegalStateException ( STRING ) ) . given ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . handleMessage ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession , new TextMessage ( STRING ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . messageFrame ( org.springframework.web.socket.sockjs.client.Jackson2SockJsMessageCodec , STRING , STRING ) . getContent ( ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . isOpen ( ) , equalTo ( true ) ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . handleMessage ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession , new TextMessage ( STRING ) ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . handleMessage ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession , new TextMessage ( STRING ) ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . closeFrame ( NUMBER , STRING ) . getContent ( ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . isOpen ( ) , equalTo ( false ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . org.springframework.web.socket.sockjs.client.CloseStatus , equalTo ( new CloseStatus ( NUMBER , STRING ) ) ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( STRING ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleTransportError ( java.lang.IllegalStateException ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . handleTransportError ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession , java.lang.IllegalStateException ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . afterTransportClosed ( CloseStatus . SERVER_ERROR ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . isOpen ( ) , equalTo ( false ) ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . afterConnectionClosed ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession , CloseStatus . SERVER_ERROR ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . close ( ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . isOpen ( ) , equalTo ( false ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . org.springframework.web.socket.sockjs.client.CloseStatus , equalTo ( CloseStatus . NORMAL ) ) ; verify ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . close ( new CloseStatus ( NUMBER , STRING ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . org.springframework.web.socket.sockjs.client.CloseStatus , equalTo ( new CloseStatus ( NUMBER , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.web.socket.sockjs.client.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . close ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.web.socket.sockjs.client.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . close ( new CloseStatus ( NUMBER , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . getTimeoutTask ( ) . run ( ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . org.springframework.web.socket.sockjs.client.CloseStatus , equalTo ( new CloseStatus ( NUMBER , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . handleFrame ( SockJsFrame . openFrame ( ) . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . sendMessage ( new TextMessage ( STRING ) ) ; assertThat ( this . org.springframework.web.socket.sockjs.client.ClientSockJsSessionTests.TestClientSockJsSession . org.springframework.web.socket.sockjs.client.TextMessage , equalTo ( new TextMessage ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> protected void ( TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest , WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler , SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) { super( org.springframework.web.socket.sockjs.client.TransportRequest , org.springframework.web.socket.sockjs.client.WebSocketHandler , org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) throws java.io.IOException { this . org.springframework.web.socket.sockjs.client.TextMessage = org.springframework.web.socket.sockjs.client.TextMessage ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( CloseStatus org.springframework.web.socket.sockjs.client.CloseStatus ) throws java.io.IOException { this . org.springframework.web.socket.sockjs.client.CloseStatus = org.springframework.web.socket.sockjs.client.CloseStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.sockjs.client.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.sockjs.client.WebSocketExtension> ( ) { return null ; }  <METHOD_END>
