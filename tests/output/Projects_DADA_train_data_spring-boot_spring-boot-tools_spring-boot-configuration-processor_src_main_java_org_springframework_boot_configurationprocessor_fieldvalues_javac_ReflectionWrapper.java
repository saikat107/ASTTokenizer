<METHOD_START> void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.lang.Class<?> = java.lang.Class<?> ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.ClassLoader ( ) , java.lang.String ) ; this . java.lang.Object = this . java.lang.Class<> . cast ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected final java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.Object . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) { return java.lang.Class<?> ( java.lang.Object ( ) . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.ClassLoader ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.reflect.Method java.lang.reflect.Method ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return java.lang.reflect.Method ( this . java.lang.Class<> , java.lang.String , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> protected static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String ) { try { return java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new java.lang.IllegalStateException ( java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> protected static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { try { return java.lang.Class<> . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
