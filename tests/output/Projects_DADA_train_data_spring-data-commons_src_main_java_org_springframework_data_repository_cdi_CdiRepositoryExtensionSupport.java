<METHOD_START> protected void ( ) { Environment org.springframework.data.repository.cdi.Environment = new StandardEnvironment ( ) ; ResourceLoader org.springframework.data.repository.cdi.ResourceLoader = new PathMatchingResourcePatternResolver ( java.lang.Class<? extends org.springframework.data.repository.cdi.CdiRepositoryExtensionSupport> ( ) . java.lang.ClassLoader ( ) ) ; MetadataReaderFactory org.springframework.data.repository.cdi.MetadataReaderFactory = new CachingMetadataReaderFactory ( org.springframework.data.repository.cdi.ResourceLoader ) ; this . org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector = new CustomRepositoryImplementationDetector ( org.springframework.data.repository.cdi.MetadataReaderFactory , org.springframework.data.repository.cdi.Environment , org.springframework.data.repository.cdi.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> protected < X > void void ( @ Observes ProcessAnnotatedType < X > org.springframework.data.repository.cdi.ProcessAnnotatedType<X> ) { AnnotatedType < X > org.springframework.data.repository.cdi.AnnotatedType<X> = org.springframework.data.repository.cdi.ProcessAnnotatedType<X> . getAnnotatedType ( ) ; java.lang.Class<X> < X > java.lang.Class<X> = org.springframework.data.repository.cdi.AnnotatedType<X> . getJavaClass ( ) ; if ( boolean ( java.lang.Class<X> ) ) { java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = java.util.Set<java.lang.annotation.Annotation> ( java.lang.Class<X> ) ; if ( org.springframework.data.repository.cdi.Logger . isDebugEnabled ( ) ) { org.springframework.data.repository.cdi.Logger . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Class<X> . java.lang.String ( ) , java.util.Set<java.lang.annotation.Annotation> ) ) ; } java.util.Map<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> . java.util.Set<java.lang.annotation.Annotation> ( java.lang.Class<X> , java.util.Set<java.lang.annotation.Annotation> ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { boolean boolean = java.lang.Class<> . boolean ( ) ; boolean boolean = Repository .class . boolean ( java.lang.Class<> ) ; boolean boolean = java.lang.Class<> . boolean ( RepositoryDefinition .class ) ; boolean boolean = java.lang.Class<> . boolean ( NoRepositoryBean .class ) ; return boolean && ( boolean || boolean ) && ! boolean ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = new java.util.HashSet<java.lang.annotation.Annotation> <> ( ) ; java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = java.lang.Class<> . java.lang.annotation.Annotation[] ( ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( java.lang.Class<> . boolean ( Qualifier .class ) ) { java.util.Set<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ; } } if ( java.util.Set<java.lang.annotation.Annotation> . boolean ( ) ) { java.util.Set<java.lang.annotation.Annotation> . boolean ( org.springframework.data.repository.cdi.CdiRepositoryExtensionSupport.DefaultAnnotationLiteral . org.springframework.data.repository.cdi.CdiRepositoryExtensionSupport.DefaultAnnotationLiteral ) ; } java.util.Set<java.lang.annotation.Annotation> . boolean ( org.springframework.data.repository.cdi.CdiRepositoryExtensionSupport.AnyAnnotationLiteral . org.springframework.data.repository.cdi.CdiRepositoryExtensionSupport.AnyAnnotationLiteral ) ; return java.util.Set<java.lang.annotation.Annotation> ; }  <METHOD_END>
<METHOD_START> void void ( @ Observes AfterDeploymentValidation org.springframework.data.repository.cdi.AfterDeploymentValidation , BeanManager org.springframework.data.repository.cdi.BeanManager ) { for ( CdiRepositoryBean < ? > org.springframework.data.repository.cdi.CdiRepositoryBean<?> : java.util.Set<org.springframework.data.repository.cdi.CdiRepositoryBean<?>> ) { org.springframework.data.repository.cdi.Logger . debug ( STRING , org.springframework.data.repository.cdi.CdiRepositoryBean<> . getBeanClass ( ) ) ; org.springframework.data.repository.cdi.CdiRepositoryBean<> . initialize ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Iterable<java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>>> < java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> < java.lang.Class<?> < ? > , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > > java.lang.Iterable<java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>>> ( ) { return java.util.Map<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> . java.util.Set<java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>>> ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( CdiRepositoryBean < ? > org.springframework.data.repository.cdi.CdiRepositoryBean<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.cdi.CdiRepositoryBean<> . getBeanClass ( ) ; if ( AnnotationUtils . findAnnotation ( java.lang.Class<> , Eager .class ) != null ) { this . java.util.Set<org.springframework.data.repository.cdi.CdiRepositoryBean<?>> . add ( org.springframework.data.repository.cdi.CdiRepositoryBean<> ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector ( ) { return org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector ; }  <METHOD_END>
