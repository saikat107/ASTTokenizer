<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Subscriber < DataBuffer > org.springframework.http.server.reactive.Subscriber<org.springframework.http.server.reactive.DataBuffer> = mock ( Subscriber .class ) ; doAnswer ( new org.springframework.http.server.reactive.ListenerReadPublisherTests.SubscriptionAnswer ( ) ) . when ( org.springframework.http.server.reactive.Subscriber<org.springframework.http.server.reactive.DataBuffer> ) . onSubscribe ( isA ( Subscription .class ) ) ; org.springframework.http.server.reactive.ListenerReadPublisherTests.TestListenerReadPublisher org.springframework.http.server.reactive.ListenerReadPublisherTests.TestListenerReadPublisher = new org.springframework.http.server.reactive.ListenerReadPublisherTests.TestListenerReadPublisher ( ) ; org.springframework.http.server.reactive.ListenerReadPublisherTests.TestListenerReadPublisher . subscribe ( org.springframework.http.server.reactive.Subscriber<org.springframework.http.server.reactive.DataBuffer> ) ; org.springframework.http.server.reactive.ListenerReadPublisherTests.TestListenerReadPublisher . onDataAvailable ( ) ; assertTrue ( org.springframework.http.server.reactive.ListenerReadPublisherTests.TestListenerReadPublisher . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.DataBuffer org.springframework.http.server.reactive.DataBuffer ( ) java.io.IOException { int ++ ; return mock ( DataBuffer .class ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Subscription org.springframework.http.server.reactive.Subscription ( InvocationOnMock org.springframework.http.server.reactive.InvocationOnMock ) throws java.lang.Throwable { Subscription org.springframework.http.server.reactive.Subscription = ( Subscription ) org.springframework.http.server.reactive.InvocationOnMock . getArguments ( ) [ NUMBER ] ; org.springframework.http.server.reactive.Subscription . request ( NUMBER ) ; org.springframework.http.server.reactive.Subscription . request ( NUMBER ) ; return org.springframework.http.server.reactive.Subscription ; }  <METHOD_END>
