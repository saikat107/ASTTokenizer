<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties[] = new java.util.Properties [] { java.util.Properties } ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties ... java.util.Properties[] ) { this . java.util.Properties[] = java.util.Properties[] ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.core.io.support.Resource ) { this . org.springframework.core.io.support.Resource[] = new Resource [] { org.springframework.core.io.support.Resource } ; }  <METHOD_END>
<METHOD_START> public void void ( Resource ... org.springframework.core.io.support.Resource[] ) { this . org.springframework.core.io.support.Resource[] = org.springframework.core.io.support.Resource[] ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( PropertiesPersister org.springframework.core.io.support.PropertiesPersister ) { this . org.springframework.core.io.support.PropertiesPersister = ( org.springframework.core.io.support.PropertiesPersister != null ? org.springframework.core.io.support.PropertiesPersister : new DefaultPropertiesPersister ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Properties java.util.Properties ( ) java.io.IOException { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; if ( this . boolean ) { void ( java.util.Properties ) ; } if ( this . java.util.Properties[] != null ) { for ( java.util.Properties java.util.Properties : this . java.util.Properties[] ) { CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , java.util.Properties ) ; } } if ( ! this . boolean ) { void ( java.util.Properties ) ; } return java.util.Properties ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Properties java.util.Properties ) throws java.io.IOException { if ( this . org.springframework.core.io.support.Resource[] != null ) { for ( Resource org.springframework.core.io.support.Resource : this . org.springframework.core.io.support.Resource[] ) { if ( org.springframework.core.io.support.Log . isDebugEnabled ( ) ) { org.springframework.core.io.support.Log . debug ( STRING + org.springframework.core.io.support.Resource ) ; } try { PropertiesLoaderUtils . fillProperties ( java.util.Properties , new EncodedResource ( org.springframework.core.io.support.Resource , this . java.lang.String ) , this . org.springframework.core.io.support.PropertiesPersister ) ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { if ( this . boolean ) { if ( org.springframework.core.io.support.Log . isInfoEnabled ( ) ) { org.springframework.core.io.support.Log . info ( STRING + java.io.FileNotFoundException . java.lang.String ( ) ) ; } } else { throw java.io.FileNotFoundException ; } } } } }  <METHOD_END>
