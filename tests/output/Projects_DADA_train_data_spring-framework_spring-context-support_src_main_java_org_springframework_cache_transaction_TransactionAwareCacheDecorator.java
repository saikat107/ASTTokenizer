<METHOD_START> public void ( Cache org.springframework.cache.transaction.Cache ) { Assert . notNull ( org.springframework.cache.transaction.Cache , STRING ) ; this . org.springframework.cache.transaction.Cache = org.springframework.cache.transaction.Cache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.cache.transaction.Cache . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . org.springframework.cache.transaction.Cache . getNativeCache ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.transaction.ValueWrapper org.springframework.cache.transaction.ValueWrapper ( java.lang.Object java.lang.Object ) { return this . org.springframework.cache.transaction.Cache . get ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { return this . org.springframework.cache.transaction.Cache . get ( java.lang.Object , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Object java.lang.Object , java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) { return this . org.springframework.cache.transaction.Cache . get ( java.lang.Object , java.util.concurrent.Callable<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.Object java.lang.Object , final java.lang.Object java.lang.Object ) { if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { TransactionSynchronizationManager . registerSynchronization ( new TransactionSynchronizationAdapter ( ) { @ java.lang.Override public void void ( ) { org.springframework.cache.transaction.Cache . put ( java.lang.Object , java.lang.Object ) ; } } ) ; } else { this . org.springframework.cache.transaction.Cache . put ( java.lang.Object , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.cache.transaction.Cache . put ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.transaction.ValueWrapper org.springframework.cache.transaction.ValueWrapper ( final java.lang.Object java.lang.Object , final java.lang.Object java.lang.Object ) { return this . org.springframework.cache.transaction.Cache . putIfAbsent ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.Object java.lang.Object ) { if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { TransactionSynchronizationManager . registerSynchronization ( new TransactionSynchronizationAdapter ( ) { @ java.lang.Override public void void ( ) { org.springframework.cache.transaction.Cache . evict ( java.lang.Object ) ; } } ) ; } else { this . org.springframework.cache.transaction.Cache . evict ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.cache.transaction.Cache . evict ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { TransactionSynchronizationManager . registerSynchronization ( new TransactionSynchronizationAdapter ( ) { @ java.lang.Override public void void ( ) { org.springframework.cache.transaction.Cache . clear ( ) ; } } ) ; } else { this . org.springframework.cache.transaction.Cache . clear ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.cache.transaction.Cache . clear ( ) ; }  <METHOD_END>
