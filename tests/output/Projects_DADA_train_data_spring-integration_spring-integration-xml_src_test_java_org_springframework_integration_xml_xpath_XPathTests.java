<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.Object java.lang.Object = XPathUtils . evaluate ( java.lang.String , STRING ) ; assertEquals ( STRING , java.lang.Object ) ; java.lang.Object = XPathUtils . evaluate ( java.lang.String , STRING , STRING ) ; assertEquals ( STRING , java.lang.Object ) ; java.lang.Object = XPathUtils . evaluate ( java.lang.String , STRING , STRING ) ; assertEquals ( ( double ) NUMBER , java.lang.Object ) ; java.lang.Object = XPathUtils . evaluate ( java.lang.String , STRING , STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , java.lang.Object ) ; java.lang.Object = XPathUtils . evaluate ( java.lang.String , STRING , STRING ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( org.w3c.dom.Node .class ) ) ; org.w3c.dom.Node org.w3c.dom.Node = ( org.w3c.dom.Node ) java.lang.Object ; assertEquals ( STRING , org.w3c.dom.Node . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; java.lang.Object = XPathUtils . evaluate ( STRING , STRING , STRING ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( java.util.List .class ) ) ; java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > java.util.List<org.w3c.dom.Node> = ( java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<org.w3c.dom.Node> . int ( ) ) ; org.w3c.dom.Node org.w3c.dom.Node = java.util.List<org.w3c.dom.Node> . org.w3c.dom.Node ( NUMBER ) ; org.w3c.dom.Node org.w3c.dom.Node = java.util.List<org.w3c.dom.Node> . org.w3c.dom.Node ( NUMBER ) ; assertEquals ( STRING , org.w3c.dom.Node . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; java.lang.Object = XPathUtils . evaluate ( STRING , STRING , STRING ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( java.util.List .class ) ) ; java.util.List<org.w3c.dom.Document> < org.w3c.dom.Document > java.util.List<org.w3c.dom.Document> = ( java.util.List<org.w3c.dom.Document> < org.w3c.dom.Document > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<org.w3c.dom.Document> . int ( ) ) ; org.w3c.dom.Node org.w3c.dom.Node = java.util.List<org.w3c.dom.Document> . org.w3c.dom.Document ( NUMBER ) ; org.w3c.dom.Node org.w3c.dom.Node = java.util.List<org.w3c.dom.Document> . org.w3c.dom.Document ( NUMBER ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.Node ( ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.Node ( ) . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.Node ( ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.Node . org.w3c.dom.Node ( ) . org.w3c.dom.NamedNodeMap ( ) . org.w3c.dom.Node ( STRING ) . java.lang.String ( ) ) ; java.lang.Object = XPathUtils . evaluate ( java.lang.String , STRING , new org.springframework.integration.xml.xpath.XPathTests.TestNodeMapper ( ) ) ; assertEquals ( STRING , java.lang.Object ) ; try { XPathUtils . evaluate ( new java.util.Date ( ) , STRING ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( MessagingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } try { XPathUtils . evaluate ( java.lang.String , STRING , STRING , STRING ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( java.lang.IllegalArgumentException .class ) ) ; assertEquals ( STRING , java.lang.Exception . java.lang.String ( ) ) ; } try { XPathUtils . evaluate ( java.lang.String , STRING , STRING ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( java.lang.IllegalArgumentException .class ) ) ; assertEquals ( STRING + STRING , java.lang.Exception . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.xml.xpath.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.xml.xpath.MessageChannel . send ( org.springframework.integration.xml.xpath.Message<> ) ; Message < ? > org.springframework.integration.xml.xpath.Message<?> = this . org.springframework.integration.xml.xpath.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.xml.xpath.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.xpath.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.xml.xpath.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; this . org.springframework.integration.xml.xpath.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; Message < ? > org.springframework.integration.xml.xpath.Message<?> = this . org.springframework.integration.xml.xpath.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.xml.xpath.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.xpath.Message<> . getPayload ( ) ) ; org.springframework.integration.xml.xpath.Message<?> = this . org.springframework.integration.xml.xpath.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.xml.xpath.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.xpath.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringSourceFactory org.springframework.integration.xml.xpath.StringSourceFactory = new StringSourceFactory ( ) ; this . org.springframework.integration.xml.xpath.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; Message < ? > org.springframework.integration.xml.xpath.Message<?> = this . org.springframework.integration.xml.xpath.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.xml.xpath.Message<> ) ; assertThat ( org.springframework.integration.xml.xpath.StringSourceFactory . createSource ( org.springframework.integration.xml.xpath.Message<> . getPayload ( ) ) . toString ( ) , Matchers . containsString ( STRING ) ) ; org.springframework.integration.xml.xpath.Message<?> = this . org.springframework.integration.xml.xpath.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.xml.xpath.Message<> ) ; assertThat ( org.springframework.integration.xml.xpath.StringSourceFactory . createSource ( org.springframework.integration.xml.xpath.Message<> . getPayload ( ) ) . toString ( ) , Matchers . containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.xml.xpath.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; this . org.springframework.integration.xml.xpath.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; this . org.springframework.integration.xml.xpath.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; Message < ? > org.springframework.integration.xml.xpath.Message<?> = this . org.springframework.integration.xml.xpath.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.xml.xpath.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.xpath.Message<> . getPayload ( ) ) ; org.springframework.integration.xml.xpath.Message<?> = this . org.springframework.integration.xml.xpath.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.xml.xpath.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.xpath.Message<> . getPayload ( ) ) ; org.springframework.integration.xml.xpath.Message<?> = this . org.springframework.integration.xml.xpath.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.xml.xpath.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.xpath.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( org.w3c.dom.Node org.w3c.dom.Node , int int ) throws org.w3c.dom.DOMException { return org.w3c.dom.Node . java.lang.String ( ) + STRING ; }  <METHOD_END>
