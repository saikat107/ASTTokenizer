<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > org.springframework.integration.test.mock.MessageSource<T> < T > org.springframework.integration.test.mock.MessageSource<T> ( T T ) { return ( MessageSource < T > ) org.springframework.integration.test.mock.MessageSource<?> ( new GenericMessage <> ( T ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > org.springframework.integration.test.mock.MessageSource<T> < T > org.springframework.integration.test.mock.MessageSource<T> ( T T , T ... T[] ) { java.util.List<org.springframework.integration.test.mock.Message<T>> < Message < T > > java.util.List<org.springframework.integration.test.mock.Message<T>> = null ; if ( T[] != null ) { java.util.List<org.springframework.integration.test.mock.Message<T>> = new java.util.ArrayList <> ( T[] . int ) ; for ( T T : T[] ) { java.util.List<org.springframework.integration.test.mock.Message<T>> . add ( new GenericMessage <> ( T ) ) ; } } return ( MessageSource < T > ) org.springframework.integration.test.mock.MessageSource<?> ( new GenericMessage <> ( T ) , ( java.util.List<org.springframework.integration.test.mock.Message<T>> != null ? java.util.List<org.springframework.integration.test.mock.Message<T>> . toArray ( new Message < ? > [ java.util.List<org.springframework.integration.test.mock.Message<T>> . size ( ) ] ) : null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static org.springframework.integration.test.mock.MessageSource<?> < ? > org.springframework.integration.test.mock.MessageSource<?> ( Message < ? > org.springframework.integration.test.mock.Message<?> ) { MessageSource org.springframework.integration.test.mock.MessageSource = Mockito . mock ( MessageSource .class ) ; given ( org.springframework.integration.test.mock.MessageSource . receive ( ) ) .< Message < ? > > willReturn ( org.springframework.integration.test.mock.Message<> ) ; return org.springframework.integration.test.mock.MessageSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static org.springframework.integration.test.mock.MessageSource<?> < ? > org.springframework.integration.test.mock.MessageSource<?> ( Message < ? > org.springframework.integration.test.mock.Message<?> , org.springframework.integration.test.mock.Message<?> < ? > ... org.springframework.integration.test.mock.Message<?>[] ) { MessageSource org.springframework.integration.test.mock.MessageSource = Mockito . mock ( MessageSource .class ) ; given ( org.springframework.integration.test.mock.MessageSource . receive ( ) ) . willReturn ( org.springframework.integration.test.mock.Message<> , org.springframework.integration.test.mock.Message<?>[] ) ; return org.springframework.integration.test.mock.MessageSource ; }  <METHOD_END>
<METHOD_START> private void ( ) {	}  <METHOD_END>
