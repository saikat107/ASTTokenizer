<METHOD_START> @ Test public void void ( ) { TestService org.springframework.integration.config.xml.TestService = ( TestService ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.xml.TestService . oneWay ( STRING ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestService org.springframework.integration.config.xml.TestService = ( TestService ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.xml.TestService . oneWay ( STRING ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; GatewayProxyFactoryBean org.springframework.integration.config.xml.GatewayProxyFactoryBean = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , GatewayProxyFactoryBean .class ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( org.springframework.integration.config.xml.GatewayProxyFactoryBean , STRING , java.util.Map .class ) ; GatewayMethodMetadata org.springframework.integration.config.xml.GatewayMethodMetadata = ( GatewayMethodMetadata ) java.util.Map<,> . get ( STRING ) ; assertNotNull ( org.springframework.integration.config.xml.GatewayMethodMetadata ) ; assertEquals ( STRING , org.springframework.integration.config.xml.GatewayMethodMetadata . getRequestTimeout ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.GatewayMethodMetadata . getReplyTimeout ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.GatewayMethodMetadata . getReplyChannelName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.xml.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; TestService org.springframework.integration.config.xml.TestService = ( TestService ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.config.xml.TestService . solicitResponse ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; this . void ( org.springframework.integration.config.xml.PollableChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = ( TestService ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.config.xml.TestService . requestReply ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; this . void ( org.springframework.integration.config.xml.PollableChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , TestService .class ) ; java.util.concurrent.Future<org.springframework.integration.config.xml.Message<?>> < Message < ? > > java.util.concurrent.Future<org.springframework.integration.config.xml.Message<?>> = org.springframework.integration.config.xml.TestService . async ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = java.util.concurrent.Future<org.springframework.integration.config.xml.Message<?>> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; this . void ( org.springframework.integration.config.xml.PollableChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , TestService .class ) ; java.util.concurrent.Future<org.springframework.integration.config.xml.Message<?>> < Message < ? > > java.util.concurrent.Future<org.springframework.integration.config.xml.Message<?>> = org.springframework.integration.config.xml.TestService . async ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = java.util.concurrent.Future<org.springframework.integration.config.xml.Message<?>> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; assertNull ( TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableListableBeanFactory org.springframework.integration.config.xml.ConfigurableListableBeanFactory = ( ( GenericApplicationContext ) org.springframework.integration.config.xml.ApplicationContext ) . getBeanFactory ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ConfigurableListableBeanFactory . getMergedBeanDefinition ( STRING ) . getAttribute ( IntegrationConfigUtils . FACTORY_BEAN_OBJECT_TYPE ) ; assertEquals ( TestService .class . java.lang.String ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableListableBeanFactory org.springframework.integration.config.xml.ConfigurableListableBeanFactory = ( ( GenericApplicationContext ) org.springframework.integration.config.xml.ApplicationContext ) . getBeanFactory ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ConfigurableListableBeanFactory . getMergedBeanDefinition ( STRING ) . getAttribute ( IntegrationConfigUtils . FACTORY_BEAN_OBJECT_TYPE ) ; assertEquals ( RequestReplyExchanger .class . java.lang.String ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PollableChannel org.springframework.integration.config.xml.PollableChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , PollableChannel .class ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; this . void ( org.springframework.integration.config.xml.PollableChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , TestService .class ) ; Mono < Message < ? > > org.springframework.integration.config.xml.Mono<org.springframework.integration.config.xml.Message<?>> = org.springframework.integration.config.xml.TestService . promise ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.Mono<org.springframework.integration.config.xml.Message<?>> . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.config.xml.QueueChannel = ( QueueChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > java.util.concurrent.atomic.AtomicReference<java.lang.Thread> = new java.util.concurrent.atomic.AtomicReference<java.lang.Thread> <> ( ) ; org.springframework.integration.config.xml.QueueChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; } } ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; this . void ( org.springframework.integration.config.xml.QueueChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , TestService .class ) ; java.util.concurrent.CompletableFuture<java.lang.String> < java.lang.String > java.util.concurrent.CompletableFuture<java.lang.String> = org.springframework.integration.config.xml.TestService . completable ( STRING ) . thenApply ( java.lang.String :: toUpperCase ) ; java.lang.String java.lang.String = java.util.concurrent.CompletableFuture<java.lang.String> . java.lang.String ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , java.lang.String ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . java.lang.Thread ( ) . java.lang.String ( ) , startsWith ( STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.config.xml.QueueChannel = ( QueueChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > java.util.concurrent.atomic.AtomicReference<java.lang.Thread> = new java.util.concurrent.atomic.AtomicReference<java.lang.Thread> <> ( ) ; org.springframework.integration.config.xml.QueueChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; } } ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; this . void ( org.springframework.integration.config.xml.QueueChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , TestService .class ) ; java.util.concurrent.CompletableFuture<java.lang.String> < java.lang.String > java.util.concurrent.CompletableFuture<java.lang.String> = org.springframework.integration.config.xml.TestService . completable ( STRING ) ; java.lang.String java.lang.String = java.util.concurrent.CompletableFuture<java.lang.String> . java.lang.String ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( java.lang.Thread . java.lang.Thread ( ) , java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . java.lang.Thread ( ) ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.config.xml.QueueChannel = ( QueueChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > java.util.concurrent.atomic.AtomicReference<java.lang.Thread> = new java.util.concurrent.atomic.AtomicReference<java.lang.Thread> <> ( ) ; org.springframework.integration.config.xml.QueueChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; } } ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; this . void ( org.springframework.integration.config.xml.QueueChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , TestService .class ) ; MyCompletableFuture org.springframework.integration.config.xml.MyCompletableFuture = org.springframework.integration.config.xml.TestService . customCompletable ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.config.xml.MyCompletableFuture . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( java.lang.Thread . java.lang.Thread ( ) , java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . java.lang.Thread ( ) ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Log org.springframework.integration.config.xml.Log = spy ( TestUtils . getPropertyValue ( java.lang.Object , STRING , Log .class ) ) ; when ( org.springframework.integration.config.xml.Log . isDebugEnabled ( ) ) . thenReturn ( true ) ; new DirectFieldAccessor ( java.lang.Object ) . setPropertyValue ( STRING , org.springframework.integration.config.xml.Log ) ; QueueChannel org.springframework.integration.config.xml.QueueChannel = ( QueueChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > java.util.concurrent.atomic.AtomicReference<java.lang.Thread> = new java.util.concurrent.atomic.AtomicReference<java.lang.Thread> <> ( ) ; org.springframework.integration.config.xml.QueueChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; } } ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; this . void ( org.springframework.integration.config.xml.QueueChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , TestService .class ) ; MyCompletableFuture org.springframework.integration.config.xml.MyCompletableFuture = org.springframework.integration.config.xml.TestService . customCompletable ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.config.xml.MyCompletableFuture . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( java.lang.Thread . java.lang.Thread ( ) , java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . java.lang.Thread ( ) ) ; assertNotNull ( TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; verify ( org.springframework.integration.config.xml.Log ) . debug ( STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.config.xml.QueueChannel = ( QueueChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > java.util.concurrent.atomic.AtomicReference<java.lang.Thread> = new java.util.concurrent.atomic.AtomicReference<java.lang.Thread> <> ( ) ; org.springframework.integration.config.xml.QueueChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; } } ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; this . void ( org.springframework.integration.config.xml.QueueChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , TestService .class ) ; java.util.concurrent.CompletableFuture<org.springframework.integration.config.xml.Message<?>> < Message < ? > > java.util.concurrent.CompletableFuture<org.springframework.integration.config.xml.Message<?>> = org.springframework.integration.config.xml.TestService . completableReturnsMessage ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = java.util.concurrent.CompletableFuture<org.springframework.integration.config.xml.Message<?>> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . java.lang.Thread ( ) . java.lang.String ( ) , startsWith ( STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.config.xml.QueueChannel = ( QueueChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > java.util.concurrent.atomic.AtomicReference<java.lang.Thread> = new java.util.concurrent.atomic.AtomicReference<java.lang.Thread> <> ( ) ; org.springframework.integration.config.xml.QueueChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; } } ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; this . void ( org.springframework.integration.config.xml.QueueChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , TestService .class ) ; java.util.concurrent.CompletableFuture<org.springframework.integration.config.xml.Message<?>> < Message < ? > > java.util.concurrent.CompletableFuture<org.springframework.integration.config.xml.Message<?>> = org.springframework.integration.config.xml.TestService . completableReturnsMessage ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = java.util.concurrent.CompletableFuture<org.springframework.integration.config.xml.Message<?>> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( java.lang.Thread . java.lang.Thread ( ) , java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . java.lang.Thread ( ) ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.config.xml.QueueChannel = ( QueueChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > java.util.concurrent.atomic.AtomicReference<java.lang.Thread> = new java.util.concurrent.atomic.AtomicReference<java.lang.Thread> <> ( ) ; org.springframework.integration.config.xml.QueueChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; } } ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; this . void ( org.springframework.integration.config.xml.QueueChannel , org.springframework.integration.config.xml.MessageChannel ) ; TestService org.springframework.integration.config.xml.TestService = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , TestService .class ) ; MyCompletableMessageFuture org.springframework.integration.config.xml.MyCompletableMessageFuture = org.springframework.integration.config.xml.TestService . customCompletableReturnsMessage ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.MyCompletableMessageFuture . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( java.lang.Thread . java.lang.Thread ( ) , java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . java.lang.Thread ( ) ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.xml.Message<?> < ? > org.springframework.integration.config.xml.Message<?> ( Message < ? > org.springframework.integration.config.xml.Message<?> , MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread . java.lang.Thread ( ) ) ; return super. preSend ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> private void void ( final PollableChannel org.springframework.integration.config.xml.PollableChannel , final MessageChannel org.springframework.integration.config.xml.MessageChannel ) { java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( ( ) { Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( STRING , org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.config.xml.Message<> ) . setCorrelationId ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . getId ( ) ) . build ( ) ; java.lang.Object java.lang.Object = null ; if ( org.springframework.integration.config.xml.Message<> . getPayload ( ) . equals ( STRING ) ) { java.lang.Object = new AsyncResult < Message < ? > > ( org.springframework.integration.config.xml.Message<> ) ; } else if ( org.springframework.integration.config.xml.Message<> . getPayload ( ) . equals ( STRING ) ) { java.lang.Object = java.util.concurrent.CompletableFuture .< java.lang.String > java.util.concurrent.CompletableFuture<java.lang.String> ( STRING ) ; } else if ( org.springframework.integration.config.xml.Message<> . getPayload ( ) . equals ( STRING ) ) { MyCompletableFuture org.springframework.integration.config.xml.MyCompletableFuture = new MyCompletableFuture ( ) ; org.springframework.integration.config.xml.MyCompletableFuture . complete ( STRING ) ; java.lang.Object = org.springframework.integration.config.xml.MyCompletableFuture ; } else if ( org.springframework.integration.config.xml.Message<> . getPayload ( ) . equals ( STRING ) ) { java.lang.Object = java.util.concurrent.CompletableFuture .< Message < ? > > java.util.concurrent.CompletableFuture<org.springframework.integration.config.xml.Message<?>> ( org.springframework.integration.config.xml.Message<> ) ; } else if ( org.springframework.integration.config.xml.Message<> . getPayload ( ) . equals ( STRING ) ) { MyCompletableMessageFuture org.springframework.integration.config.xml.MyCompletableMessageFuture = new MyCompletableMessageFuture ( ) ; org.springframework.integration.config.xml.MyCompletableMessageFuture . complete ( org.springframework.integration.config.xml.Message<> ) ; java.lang.Object = org.springframework.integration.config.xml.MyCompletableMessageFuture ; } if ( java.lang.Object != null ) { org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( java.lang.Object ) . copyHeaders ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) ) . build ( ) ; } org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; } ) ; }  <METHOD_END>
<METHOD_START> void ( ) { setThreadNamePrefix ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) public < T > java.util.concurrent.Future<T> < T > java.util.concurrent.Future<T> ( java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) { try { java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = super. submit ( java.util.concurrent.Callable<T> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = ( Message < ? > ) java.util.concurrent.Future<> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; Message < ? > org.springframework.integration.config.xml.Message<?> ; if ( org.springframework.integration.config.xml.Message<> == null ) { org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , this . java.lang.String ) . build ( ) ; } else { org.springframework.integration.config.xml.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.config.xml.Message<> ) . setHeader ( STRING , this . java.lang.String ) . build ( ) ; } return new AsyncResult ( org.springframework.integration.config.xml.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
