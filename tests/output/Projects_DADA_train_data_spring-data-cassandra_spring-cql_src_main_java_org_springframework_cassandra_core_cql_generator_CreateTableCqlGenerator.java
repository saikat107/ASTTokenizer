<METHOD_START> public static java.lang.String java.lang.String ( CreateTableSpecification org.springframework.cassandra.core.cql.generator.CreateTableSpecification ) { return new org.springframework.cassandra.core.cql.generator.CreateTableCqlGenerator ( org.springframework.cassandra.core.cql.generator.CreateTableSpecification ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( CreateTableSpecification org.springframework.cassandra.core.cql.generator.CreateTableSpecification ) { super( org.springframework.cassandra.core.cql.generator.CreateTableSpecification ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.StringBuilder java.lang.StringBuilder ( java.lang.StringBuilder java.lang.StringBuilder ) { java.lang.StringBuilder = noNull ( java.lang.StringBuilder ) ; java.lang.StringBuilder ( java.lang.StringBuilder ) ; java.lang.StringBuilder ( java.lang.StringBuilder ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> protected java.lang.StringBuilder java.lang.StringBuilder ( java.lang.StringBuilder java.lang.StringBuilder ) { return noNull ( java.lang.StringBuilder ) . append ( STRING ) . append ( spec ( ) . getIfNotExists ( ) ? STRING : STRING ) . append ( spec ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.StringBuilder java.lang.StringBuilder ( java.lang.StringBuilder java.lang.StringBuilder ) { java.lang.StringBuilder = noNull ( java.lang.StringBuilder ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> = new java.util.ArrayList<org.springframework.cassandra.core.cql.generator.ColumnSpecification> <> ( ) ; java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> = new java.util.ArrayList<org.springframework.cassandra.core.cql.generator.ColumnSpecification> <> ( ) ; for ( ColumnSpecification org.springframework.cassandra.core.cql.generator.ColumnSpecification : spec ( ) . getColumns ( ) ) { org.springframework.cassandra.core.cql.generator.ColumnSpecification . toCql ( java.lang.StringBuilder ) . append ( STRING ) ; if ( org.springframework.cassandra.core.cql.generator.ColumnSpecification . getKeyType ( ) == PARTITIONED ) { java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> . add ( org.springframework.cassandra.core.cql.generator.ColumnSpecification ) ; } else if ( org.springframework.cassandra.core.cql.generator.ColumnSpecification . getKeyType ( ) == CLUSTERED ) { java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> . add ( org.springframework.cassandra.core.cql.generator.ColumnSpecification ) ; } } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> . size ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } void ( java.lang.StringBuilder , java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> ) ; if ( java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> . size ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } if ( ! java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> . isEmpty ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } void ( java.lang.StringBuilder , java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder java.lang.StringBuilder = java.lang.StringBuilder ( java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = spec ( ) . getOptions ( ) ; if ( java.lang.StringBuilder != null || ! java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { boolean boolean = true ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( java.lang.StringBuilder != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.StringBuilder ) ; boolean = false ; } if ( ! java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { if ( boolean ) { boolean = false ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { continue; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( java.lang.Object instanceof java.util.Map ) { optionValueMap ( ( java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> < Option , java.lang.Object > ) java.lang.Object , java.lang.StringBuilder ) ; continue; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object . java.lang.String ( ) ) ; } } } return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> private static java.lang.StringBuilder java.lang.StringBuilder ( java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> ) { java.lang.StringBuilder java.lang.StringBuilder = null ; boolean boolean = true ; for ( ColumnSpecification org.springframework.cassandra.core.cql.generator.ColumnSpecification : java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> ) { if ( org.springframework.cassandra.core.cql.generator.ColumnSpecification . getOrdering ( ) != null ) { if ( java.lang.StringBuilder == null ) { java.lang.StringBuilder = new java.lang.StringBuilder ( ) . java.lang.StringBuilder ( STRING ) ; } if ( boolean ) { boolean = false ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.cassandra.core.cql.generator.ColumnSpecification . getName ( ) ) . append ( STRING ) . append ( org.springframework.cassandra.core.cql.generator.ColumnSpecification . getOrdering ( ) . cql ( ) ) ; } } if ( java.lang.StringBuilder != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.StringBuilder java.lang.StringBuilder , java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> < ColumnSpecification > java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> ) { boolean boolean = true ; for ( ColumnSpecification org.springframework.cassandra.core.cql.generator.ColumnSpecification : java.util.List<org.springframework.cassandra.core.cql.generator.ColumnSpecification> ) { if ( boolean ) { boolean = false ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.cassandra.core.cql.generator.ColumnSpecification . getName ( ) ) ; } }  <METHOD_END>
