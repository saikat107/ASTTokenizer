<METHOD_START> public void ( MongoDbFactory org.springframework.data.mongodb.core.MongoDbFactory , java.lang.String java.lang.String , QueryMapper org.springframework.data.mongodb.core.QueryMapper ) { this( org.springframework.data.mongodb.core.MongoDbFactory , java.lang.String , org.springframework.data.mongodb.core.QueryMapper , null ); }  <METHOD_END>
<METHOD_START> public void ( MongoDbFactory org.springframework.data.mongodb.core.MongoDbFactory , java.lang.String java.lang.String , QueryMapper org.springframework.data.mongodb.core.QueryMapper , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( org.springframework.data.mongodb.core.MongoDbFactory , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.QueryMapper , STRING ) ; this . org.springframework.data.mongodb.core.MongoDbFactory = org.springframework.data.mongodb.core.MongoDbFactory ; this . java.lang.String = java.lang.String ; this . org.springframework.data.mongodb.core.QueryMapper = org.springframework.data.mongodb.core.QueryMapper ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( final IndexDefinition org.springframework.data.mongodb.core.IndexDefinition ) { return T ( collection -> { Document indexOptions = indexDefinition . getIndexOptions ( ) ; if ( indexOptions != null ) { IndexOptions ops = IndexConverters . indexDefinitionToIndexOptionsConverter ( ) . convert ( indexDefinition ) ; if ( indexOptions . containsKey ( PARTIAL_FILTER_EXPRESSION_KEY ) ) { Assert . isInstanceOf ( Document .class , indexOptions . get ( PARTIAL_FILTER_EXPRESSION_KEY ) ) ; ops . partialFilterExpression ( mapper . getMappedObject ( ( Document ) indexOptions . get ( PARTIAL_FILTER_EXPRESSION_KEY ) , lookupPersistentEntity ( type , collectionName ) ) ) ; } return collection . createIndex ( indexDefinition . getIndexKeys ( ) , ops ) ; } return collection . createIndex ( indexDefinition . getIndexKeys ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.MongoPersistentEntity<?> < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { if ( java.lang.Class<> != null ) { return org.springframework.data.mongodb.core.QueryMapper . getMappingContext ( ) . getRequiredPersistentEntity ( java.lang.Class<> ) ; } java.util.Collection<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Collection<? extends org.springframework.data.mongodb.core.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.QueryMapper . getMappingContext ( ) . getPersistentEntities ( ) ; for ( MongoPersistentEntity < ? > org.springframework.data.mongodb.core.MongoPersistentEntity<?> : java.util.Collection<> ) { if ( org.springframework.data.mongodb.core.MongoPersistentEntity<> . getCollection ( ) . equals ( java.lang.String ) ) { return org.springframework.data.mongodb.core.MongoPersistentEntity<> ; } } return null ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { T ( collection -> { collection . dropIndex ( name ) ; return null ; } ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.core.IndexInfo> ( ) { return T ( new CollectionCallback < java.util.List<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > > ( ) { public java.util.List<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.core.IndexInfo> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { MongoCursor < Document > org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . listIndexes ( Document .class ) . iterator ( ) ; return java.util.List<org.springframework.data.mongodb.core.IndexInfo> ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> ) ; } private java.util.List<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.core.IndexInfo> ( MongoCursor < Document > org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> ) { java.util.List<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.core.IndexInfo> = new java.util.ArrayList<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > ( ) ; while ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . hasNext ( ) ) { Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . next ( ) ; IndexInfo org.springframework.data.mongodb.core.IndexInfo = IndexConverters . documentToIndexInfoConverter ( ) . convert ( org.springframework.data.mongodb.core.Document ) ; java.util.List<org.springframework.data.mongodb.core.IndexInfo> . add ( org.springframework.data.mongodb.core.IndexInfo ) ; } return java.util.List<org.springframework.data.mongodb.core.IndexInfo> ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.core.IndexInfo> ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> )					throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { MongoCursor < Document > org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . listIndexes ( Document .class ) . iterator ( ) ; return java.util.List<org.springframework.data.mongodb.core.IndexInfo> ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.core.IndexInfo> ( MongoCursor < Document > org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> ) { java.util.List<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.core.IndexInfo> = new java.util.ArrayList<org.springframework.data.mongodb.core.IndexInfo> < IndexInfo > ( ) ; while ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . hasNext ( ) ) { Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . next ( ) ; IndexInfo org.springframework.data.mongodb.core.IndexInfo = IndexConverters . documentToIndexInfoConverter ( ) . convert ( org.springframework.data.mongodb.core.Document ) ; java.util.List<org.springframework.data.mongodb.core.IndexInfo> . add ( org.springframework.data.mongodb.core.IndexInfo ) ; } return java.util.List<org.springframework.data.mongodb.core.IndexInfo> ; }  <METHOD_END>
<METHOD_START> public < T > T T ( CollectionCallback < T > org.springframework.data.mongodb.core.CollectionCallback<T> ) { Assert . notNull ( org.springframework.data.mongodb.core.CollectionCallback<T> , STRING ) ; try { MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoDbFactory . getDb ( ) . getCollection ( java.lang.String ) ; return org.springframework.data.mongodb.core.CollectionCallback<T> . doInCollection ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw potentiallyConvertRuntimeException ( java.lang.RuntimeException , org.springframework.data.mongodb.core.MongoDbFactory . getExceptionTranslator ( ) ) ; } }  <METHOD_END>
