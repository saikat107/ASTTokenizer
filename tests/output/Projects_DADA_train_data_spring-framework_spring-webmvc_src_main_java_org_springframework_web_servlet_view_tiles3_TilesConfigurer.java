<METHOD_START> public void void ( TilesInitializer org.springframework.web.servlet.view.tiles3.TilesInitializer ) { this . org.springframework.web.servlet.view.tiles3.TilesInitializer = org.springframework.web.servlet.view.tiles3.TilesInitializer ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { if ( boolean ) { try { this . org.springframework.web.servlet.view.tiles3.TilesInitializer = new org.springframework.web.servlet.view.tiles3.TilesConfigurer.SpringCompleteAutoloadTilesInitializer ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } } else { this . org.springframework.web.servlet.view.tiles3.TilesInitializer = null ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends org.springframework.web.servlet.view.tiles3.DefinitionsFactory> < ? extends DefinitionsFactory > java.lang.Class<? extends org.springframework.web.servlet.view.tiles3.DefinitionsFactory> ) { this . java.lang.Class<? extends org.springframework.web.servlet.view.tiles3.DefinitionsFactory> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends org.springframework.web.servlet.view.tiles3.PreparerFactory> < ? extends PreparerFactory > java.lang.Class<? extends org.springframework.web.servlet.view.tiles3.PreparerFactory> ) { this . java.lang.Class<? extends org.springframework.web.servlet.view.tiles3.PreparerFactory> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.servlet.view.tiles3.ServletContext ) { this . org.springframework.web.servlet.view.tiles3.ServletContext = org.springframework.web.servlet.view.tiles3.ServletContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.web.servlet.view.tiles3.TilesException { ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext = new SpringWildcardServletTilesApplicationContext ( this . org.springframework.web.servlet.view.tiles3.ServletContext ) ; if ( this . org.springframework.web.servlet.view.tiles3.TilesInitializer == null ) { this . org.springframework.web.servlet.view.tiles3.TilesInitializer = new org.springframework.web.servlet.view.tiles3.TilesConfigurer.SpringTilesInitializer ( ) ; } this . org.springframework.web.servlet.view.tiles3.TilesInitializer . initialize ( org.springframework.web.servlet.view.tiles3.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.web.servlet.view.tiles3.TilesException { this . org.springframework.web.servlet.view.tiles3.TilesInitializer . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.tiles3.AbstractTilesContainerFactory org.springframework.web.servlet.view.tiles3.AbstractTilesContainerFactory ( ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext ) { return new org.springframework.web.servlet.view.tiles3.TilesConfigurer.SpringTilesContainerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.tiles3.TilesContainer org.springframework.web.servlet.view.tiles3.TilesContainer ( TilesContainer org.springframework.web.servlet.view.tiles3.TilesContainer , ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext ) { return ( boolean ? new CachingTilesContainer ( org.springframework.web.servlet.view.tiles3.TilesContainer ) : org.springframework.web.servlet.view.tiles3.TilesContainer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.web.servlet.view.tiles3.ApplicationResource> < ApplicationResource > java.util.List<org.springframework.web.servlet.view.tiles3.ApplicationResource> ( ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext ) { if ( java.lang.String[] != null ) { java.util.List<org.springframework.web.servlet.view.tiles3.ApplicationResource> < ApplicationResource > java.util.List<org.springframework.web.servlet.view.tiles3.ApplicationResource> = new java.util.LinkedList<org.springframework.web.servlet.view.tiles3.ApplicationResource> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Collection<org.springframework.web.servlet.view.tiles3.ApplicationResource> < ApplicationResource > java.util.Collection<org.springframework.web.servlet.view.tiles3.ApplicationResource> = org.springframework.web.servlet.view.tiles3.ApplicationContext . getResources ( java.lang.String ) ; if ( java.util.Collection<org.springframework.web.servlet.view.tiles3.ApplicationResource> != null ) { java.util.List<org.springframework.web.servlet.view.tiles3.ApplicationResource> . addAll ( java.util.Collection<org.springframework.web.servlet.view.tiles3.ApplicationResource> ) ; } } return java.util.List<org.springframework.web.servlet.view.tiles3.ApplicationResource> ; } else { return super. getSources ( org.springframework.web.servlet.view.tiles3.ApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.tiles3.BaseLocaleUrlDefinitionDAO org.springframework.web.servlet.view.tiles3.BaseLocaleUrlDefinitionDAO ( ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext , LocaleResolver org.springframework.web.servlet.view.tiles3.LocaleResolver ) { BaseLocaleUrlDefinitionDAO org.springframework.web.servlet.view.tiles3.BaseLocaleUrlDefinitionDAO = super. instantiateLocaleDefinitionDao ( org.springframework.web.servlet.view.tiles3.ApplicationContext , org.springframework.web.servlet.view.tiles3.LocaleResolver ) ; if ( boolean && org.springframework.web.servlet.view.tiles3.BaseLocaleUrlDefinitionDAO instanceof CachingLocaleUrlDefinitionDAO ) { ( ( CachingLocaleUrlDefinitionDAO ) org.springframework.web.servlet.view.tiles3.BaseLocaleUrlDefinitionDAO ) . setCheckRefresh ( true ) ; } return org.springframework.web.servlet.view.tiles3.BaseLocaleUrlDefinitionDAO ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.tiles3.DefinitionsReader org.springframework.web.servlet.view.tiles3.DefinitionsReader ( ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext ) { DigesterDefinitionsReader org.springframework.web.servlet.view.tiles3.DigesterDefinitionsReader = ( DigesterDefinitionsReader ) super. createDefinitionsReader ( org.springframework.web.servlet.view.tiles3.ApplicationContext ) ; org.springframework.web.servlet.view.tiles3.DigesterDefinitionsReader . setValidating ( boolean ) ; return org.springframework.web.servlet.view.tiles3.DigesterDefinitionsReader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.tiles3.DefinitionsFactory org.springframework.web.servlet.view.tiles3.DefinitionsFactory ( ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext , LocaleResolver org.springframework.web.servlet.view.tiles3.LocaleResolver ) { if ( java.lang.Class<> != null ) { DefinitionsFactory org.springframework.web.servlet.view.tiles3.DefinitionsFactory = BeanUtils . instantiateClass ( java.lang.Class<> ) ; if ( org.springframework.web.servlet.view.tiles3.DefinitionsFactory instanceof ApplicationContextAware ) { ( ( ApplicationContextAware ) org.springframework.web.servlet.view.tiles3.DefinitionsFactory ) . setApplicationContext ( org.springframework.web.servlet.view.tiles3.ApplicationContext ) ; } BeanWrapper org.springframework.web.servlet.view.tiles3.BeanWrapper = PropertyAccessorFactory . forBeanPropertyAccess ( org.springframework.web.servlet.view.tiles3.DefinitionsFactory ) ; if ( org.springframework.web.servlet.view.tiles3.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.web.servlet.view.tiles3.BeanWrapper . setPropertyValue ( STRING , org.springframework.web.servlet.view.tiles3.LocaleResolver ) ; } if ( org.springframework.web.servlet.view.tiles3.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.web.servlet.view.tiles3.BeanWrapper . setPropertyValue ( STRING , createLocaleDefinitionDao ( org.springframework.web.servlet.view.tiles3.ApplicationContext , org.springframework.web.servlet.view.tiles3.LocaleResolver ) ) ; } return org.springframework.web.servlet.view.tiles3.DefinitionsFactory ; } else { return super. createDefinitionsFactory ( org.springframework.web.servlet.view.tiles3.ApplicationContext , org.springframework.web.servlet.view.tiles3.LocaleResolver ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.tiles3.PreparerFactory org.springframework.web.servlet.view.tiles3.PreparerFactory ( ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext ) { if ( java.lang.Class<> != null ) { return BeanUtils . instantiateClass ( java.lang.Class<> ) ; } else { return super. createPreparerFactory ( org.springframework.web.servlet.view.tiles3.ApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.tiles3.LocaleResolver org.springframework.web.servlet.view.tiles3.LocaleResolver ( ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext ) { return new SpringLocaleResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.tiles3.AttributeEvaluatorFactory org.springframework.web.servlet.view.tiles3.AttributeEvaluatorFactory ( ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext , LocaleResolver org.springframework.web.servlet.view.tiles3.LocaleResolver ) { AttributeEvaluator org.springframework.web.servlet.view.tiles3.AttributeEvaluator ; if ( boolean && JspFactory . getDefaultFactory ( ) != null ) { org.springframework.web.servlet.view.tiles3.AttributeEvaluator = new org.springframework.web.servlet.view.tiles3.TilesConfigurer.TilesElActivator ( ) . org.springframework.web.servlet.view.tiles3.AttributeEvaluator ( ) ; } else { org.springframework.web.servlet.view.tiles3.AttributeEvaluator = new DirectAttributeEvaluator ( ) ; } return new BasicAttributeEvaluatorFactory ( org.springframework.web.servlet.view.tiles3.AttributeEvaluator ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.tiles3.AbstractTilesContainerFactory org.springframework.web.servlet.view.tiles3.AbstractTilesContainerFactory ( ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext ) { return new org.springframework.web.servlet.view.tiles3.TilesConfigurer.SpringCompleteAutoloadTilesContainerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.tiles3.LocaleResolver org.springframework.web.servlet.view.tiles3.LocaleResolver ( ApplicationContext org.springframework.web.servlet.view.tiles3.ApplicationContext ) { return new SpringLocaleResolver ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.view.tiles3.AttributeEvaluator org.springframework.web.servlet.view.tiles3.AttributeEvaluator ( ) { ELAttributeEvaluator org.springframework.web.servlet.view.tiles3.ELAttributeEvaluator = new ELAttributeEvaluator ( ) ; org.springframework.web.servlet.view.tiles3.ELAttributeEvaluator . setExpressionFactory ( JspFactory . getDefaultFactory ( ) . getJspApplicationContext ( org.springframework.web.servlet.view.tiles3.ServletContext ) . getExpressionFactory ( ) ) ; org.springframework.web.servlet.view.tiles3.ELAttributeEvaluator . setResolver ( new org.springframework.web.servlet.view.tiles3.TilesConfigurer.CompositeELResolverImpl ( ) ) ; return org.springframework.web.servlet.view.tiles3.ELAttributeEvaluator ; }  <METHOD_END>
<METHOD_START> public void ( ) { add ( new ScopeELResolver ( ) ) ; add ( new TilesContextELResolver ( new TilesContextBeanELResolver ( ) ) ) ; add ( new TilesContextBeanELResolver ( ) ) ; add ( new ArrayELResolver ( false ) ) ; add ( new ListELResolver ( false ) ) ; add ( new MapELResolver ( false ) ) ; add ( new ResourceBundleELResolver ( ) ) ; add ( new BeanELResolver ( false ) ) ; }  <METHOD_END>
