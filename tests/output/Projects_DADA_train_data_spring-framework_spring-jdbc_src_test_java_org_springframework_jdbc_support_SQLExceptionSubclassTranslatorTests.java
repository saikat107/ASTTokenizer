<METHOD_START> @ Test public void void ( ) { SQLExceptionTranslator org.springframework.jdbc.support.SQLExceptionTranslator = new SQLErrorCodeSQLExceptionTranslator ( org.springframework.jdbc.support.SQLErrorCodes ) ; java.sql.SQLException java.sql.SQLException = SQLExceptionSubclassFactory . newSQLDataException ( STRING , STRING , NUMBER ) ; DataIntegrityViolationException org.springframework.jdbc.support.DataIntegrityViolationException = ( DataIntegrityViolationException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.DataIntegrityViolationException . getCause ( ) ) ; java.sql.SQLException java.sql.SQLException = SQLExceptionSubclassFactory . newSQLFeatureNotSupportedException ( STRING , STRING , NUMBER ) ; InvalidDataAccessApiUsageException org.springframework.jdbc.support.InvalidDataAccessApiUsageException = ( InvalidDataAccessApiUsageException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.InvalidDataAccessApiUsageException . getCause ( ) ) ; java.sql.SQLException java.sql.SQLException = SQLExceptionSubclassFactory . newSQLIntegrityConstraintViolationException ( STRING , STRING , NUMBER ) ; DataIntegrityViolationException org.springframework.jdbc.support.DataIntegrityViolationException = ( DataIntegrityViolationException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.DataIntegrityViolationException . getCause ( ) ) ; java.sql.SQLException java.sql.SQLException = SQLExceptionSubclassFactory . newSQLInvalidAuthorizationSpecException ( STRING , STRING , NUMBER ) ; PermissionDeniedDataAccessException org.springframework.jdbc.support.PermissionDeniedDataAccessException = ( PermissionDeniedDataAccessException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.PermissionDeniedDataAccessException . getCause ( ) ) ; java.sql.SQLException java.sql.SQLException = SQLExceptionSubclassFactory . newSQLNonTransientConnectionException ( STRING , STRING , NUMBER ) ; DataAccessResourceFailureException org.springframework.jdbc.support.DataAccessResourceFailureException = ( DataAccessResourceFailureException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.DataAccessResourceFailureException . getCause ( ) ) ; java.sql.SQLException java.sql.SQLException = SQLExceptionSubclassFactory . newSQLSyntaxErrorException ( STRING , STRING , NUMBER ) ; BadSqlGrammarException org.springframework.jdbc.support.BadSqlGrammarException = ( BadSqlGrammarException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( STRING , org.springframework.jdbc.support.BadSqlGrammarException . getSql ( ) ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.BadSqlGrammarException . getSQLException ( ) ) ; java.sql.SQLException java.sql.SQLException = SQLExceptionSubclassFactory . newSQLTransactionRollbackException ( STRING , STRING , NUMBER ) ; ConcurrencyFailureException org.springframework.jdbc.support.ConcurrencyFailureException = ( ConcurrencyFailureException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.ConcurrencyFailureException . getCause ( ) ) ; java.sql.SQLException java.sql.SQLException = SQLExceptionSubclassFactory . newSQLTransientConnectionException ( STRING , STRING , NUMBER ) ; TransientDataAccessResourceException org.springframework.jdbc.support.TransientDataAccessResourceException = ( TransientDataAccessResourceException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.TransientDataAccessResourceException . getCause ( ) ) ; java.sql.SQLException java.sql.SQLException = SQLExceptionSubclassFactory . newSQLTimeoutException ( STRING , STRING , NUMBER ) ; QueryTimeoutException org.springframework.jdbc.support.QueryTimeoutException = ( QueryTimeoutException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.QueryTimeoutException . getCause ( ) ) ; java.sql.SQLException java.sql.SQLException = SQLExceptionSubclassFactory . newSQLRecoverableException ( STRING , STRING , NUMBER ) ; RecoverableDataAccessException org.springframework.jdbc.support.RecoverableDataAccessException = ( RecoverableDataAccessException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.RecoverableDataAccessException . getCause ( ) ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; BadSqlGrammarException org.springframework.jdbc.support.BadSqlGrammarException = ( BadSqlGrammarException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( STRING , org.springframework.jdbc.support.BadSqlGrammarException . getSql ( ) ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.BadSqlGrammarException . getSQLException ( ) ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; BadSqlGrammarException org.springframework.jdbc.support.BadSqlGrammarException = ( BadSqlGrammarException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( STRING , org.springframework.jdbc.support.BadSqlGrammarException . getSql ( ) ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.BadSqlGrammarException . getSQLException ( ) ) ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING , NUMBER ) ; DataAccessResourceFailureException org.springframework.jdbc.support.DataAccessResourceFailureException = ( DataAccessResourceFailureException ) org.springframework.jdbc.support.SQLExceptionTranslator . translate ( STRING , STRING , java.sql.SQLException ) ; assertEquals ( java.sql.SQLException , org.springframework.jdbc.support.DataAccessResourceFailureException . getCause ( ) ) ; }  <METHOD_END>
