<METHOD_START> @ Test public void void ( ) { SourcePollingChannelAdapter org.springframework.integration.endpoint.SourcePollingChannelAdapter = new SourcePollingChannelAdapter ( ) ; ExpressionEvaluatingTransactionSynchronizationProcessor org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor = new ExpressionEvaluatingTransactionSynchronizationProcessor ( ) ; org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = new QueueChannel ( ) ; org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor . setBeforeCommitExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor . setBeforeCommitChannel ( org.springframework.integration.endpoint.PollableChannel ) ; org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor . setAfterCommitExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; DefaultTransactionSynchronizationFactory org.springframework.integration.endpoint.DefaultTransactionSynchronizationFactory = new DefaultTransactionSynchronizationFactory ( org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setTransactionSynchronizationFactory ( org.springframework.integration.endpoint.DefaultTransactionSynchronizationFactory ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setSource ( new MessageSource < java.lang.String > ( ) { @ java.lang.Override public org.springframework.integration.endpoint.Message<java.lang.String> < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> ( ) { GenericMessage < java.lang.String > org.springframework.integration.endpoint.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; IntegrationResourceHolder org.springframework.integration.endpoint.IntegrationResourceHolder = ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ; org.springframework.integration.endpoint.IntegrationResourceHolder . addAttribute ( STRING , STRING ) ; org.springframework.integration.endpoint.IntegrationResourceHolder . addAttribute ( STRING , STRING ) ; return org.springframework.integration.endpoint.GenericMessage<java.lang.String> ; } } ) ; MessageChannel org.springframework.integration.endpoint.MessageChannel = TestUtils . getPropertyValue ( org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor , STRING , MessageChannel .class ) ; assertThat ( org.springframework.integration.endpoint.MessageChannel , Matchers . instanceOf ( NullChannel .class ) ) ; Log org.springframework.integration.endpoint.Log = TestUtils . getPropertyValue ( org.springframework.integration.endpoint.MessageChannel , STRING , Log .class ) ; org.springframework.integration.endpoint.Log = Mockito . spy ( org.springframework.integration.endpoint.Log ) ; Mockito . when ( org.springframework.integration.endpoint.Log . isDebugEnabled ( ) ) . thenReturn ( true ) ; DirectFieldAccessor org.springframework.integration.endpoint.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.endpoint.MessageChannel ) ; org.springframework.integration.endpoint.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.endpoint.Log ) ; TransactionSynchronizationManager . initSynchronization ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( true ) ; void ( org.springframework.integration.endpoint.SourcePollingChannelAdapter ) ; TransactionSynchronizationUtils . triggerBeforeCommit ( false ) ; TransactionSynchronizationUtils . triggerAfterCommit ( ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; Mockito . verify ( org.springframework.integration.endpoint.Log ) . debug ( Mockito . anyString ( ) ) ; TransactionSynchronizationUtils . triggerAfterCompletion ( TransactionSynchronization . STATUS_COMMITTED ) ; TransactionSynchronizationManager . clearSynchronization ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.endpoint.Message<java.lang.String> < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> ( ) { GenericMessage < java.lang.String > org.springframework.integration.endpoint.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; IntegrationResourceHolder org.springframework.integration.endpoint.IntegrationResourceHolder = ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ; org.springframework.integration.endpoint.IntegrationResourceHolder . addAttribute ( STRING , STRING ) ; org.springframework.integration.endpoint.IntegrationResourceHolder . addAttribute ( STRING , STRING ) ; return org.springframework.integration.endpoint.GenericMessage<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.endpoint.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.integration.endpoint.PseudoTransactionalMessageSourceTests.TestTxSyncConfiguration .class ) ; TransactionSynchronizationFactory org.springframework.integration.endpoint.TransactionSynchronizationFactory = org.springframework.integration.endpoint.ConfigurableApplicationContext . getBean ( TransactionSynchronizationFactory .class ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = org.springframework.integration.endpoint.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; SourcePollingChannelAdapter org.springframework.integration.endpoint.SourcePollingChannelAdapter = new SourcePollingChannelAdapter ( ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setTransactionSynchronizationFactory ( org.springframework.integration.endpoint.TransactionSynchronizationFactory ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setSource ( new MessageSource < java.lang.String > ( ) { @ java.lang.Override public org.springframework.integration.endpoint.Message<java.lang.String> < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> ( ) { GenericMessage < java.lang.String > org.springframework.integration.endpoint.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; IntegrationResourceHolder org.springframework.integration.endpoint.IntegrationResourceHolder = ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ; org.springframework.integration.endpoint.IntegrationResourceHolder . addAttribute ( STRING , STRING ) ; org.springframework.integration.endpoint.IntegrationResourceHolder . addAttribute ( STRING , STRING ) ; return org.springframework.integration.endpoint.GenericMessage<java.lang.String> ; } } ) ; TransactionSynchronizationManager . initSynchronization ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( true ) ; void ( org.springframework.integration.endpoint.SourcePollingChannelAdapter ) ; TransactionSynchronizationUtils . triggerBeforeCommit ( false ) ; TransactionSynchronizationUtils . triggerAfterCommit ( ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; TransactionSynchronizationUtils . triggerAfterCompletion ( TransactionSynchronization . STATUS_COMMITTED ) ; TransactionSynchronizationManager . clearSynchronization ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( false ) ; org.springframework.integration.endpoint.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.endpoint.Message<java.lang.String> < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> ( ) { GenericMessage < java.lang.String > org.springframework.integration.endpoint.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; IntegrationResourceHolder org.springframework.integration.endpoint.IntegrationResourceHolder = ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ; org.springframework.integration.endpoint.IntegrationResourceHolder . addAttribute ( STRING , STRING ) ; org.springframework.integration.endpoint.IntegrationResourceHolder . addAttribute ( STRING , STRING ) ; return org.springframework.integration.endpoint.GenericMessage<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SourcePollingChannelAdapter org.springframework.integration.endpoint.SourcePollingChannelAdapter = new SourcePollingChannelAdapter ( ) ; ExpressionEvaluatingTransactionSynchronizationProcessor org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor = new ExpressionEvaluatingTransactionSynchronizationProcessor ( ) ; org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = new QueueChannel ( ) ; org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor . setAfterRollbackChannel ( org.springframework.integration.endpoint.PollableChannel ) ; org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor . setAfterRollbackExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; DefaultTransactionSynchronizationFactory org.springframework.integration.endpoint.DefaultTransactionSynchronizationFactory = new DefaultTransactionSynchronizationFactory ( org.springframework.integration.endpoint.ExpressionEvaluatingTransactionSynchronizationProcessor ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setTransactionSynchronizationFactory ( org.springframework.integration.endpoint.DefaultTransactionSynchronizationFactory ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setSource ( new MessageSource < java.lang.String > ( ) { @ java.lang.Override public org.springframework.integration.endpoint.Message<java.lang.String> < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> ( ) { GenericMessage < java.lang.String > org.springframework.integration.endpoint.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; ( ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ) . addAttribute ( STRING , STRING ) ; return org.springframework.integration.endpoint.GenericMessage<java.lang.String> ; } } ) ; TransactionSynchronizationManager . initSynchronization ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( true ) ; void ( org.springframework.integration.endpoint.SourcePollingChannelAdapter ) ; TransactionSynchronizationUtils . triggerAfterCompletion ( TransactionSynchronization . STATUS_ROLLED_BACK ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; TransactionSynchronizationManager . clearSynchronization ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.endpoint.Message<java.lang.String> < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> ( ) { GenericMessage < java.lang.String > org.springframework.integration.endpoint.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; ( ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ) . addAttribute ( STRING , STRING ) ; return org.springframework.integration.endpoint.GenericMessage<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final PollableChannel org.springframework.integration.endpoint.PollableChannel = new QueueChannel ( ) ; TransactionTemplate org.springframework.integration.endpoint.TransactionTemplate = new TransactionTemplate ( new PseudoTransactionManager ( ) ) ; org.springframework.integration.endpoint.TransactionTemplate . execute ( status -> { SourcePollingChannelAdapter adapter = new SourcePollingChannelAdapter ( ) ; ExpressionEvaluatingTransactionSynchronizationProcessor syncProcessor = new ExpressionEvaluatingTransactionSynchronizationProcessor ( ) ; syncProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; syncProcessor . setBeforeCommitExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; syncProcessor . setBeforeCommitChannel ( queueChannel ) ; syncProcessor . setAfterCommitChannel ( queueChannel ) ; syncProcessor . setAfterCommitExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; DefaultTransactionSynchronizationFactory syncFactory = new DefaultTransactionSynchronizationFactory ( syncProcessor ) ; adapter . setTransactionSynchronizationFactory ( syncFactory ) ; QueueChannel outputChannel = new QueueChannel ( ) ; adapter . setOutputChannel ( outputChannel ) ; adapter . setSource ( new MessageSource < String > ( ) { @ Override public Message < String > receive ( ) { GenericMessage < String > message = new GenericMessage < String > ( STRING ) ; IntegrationResourceHolder holder = ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ; holder . addAttribute ( STRING , STRING ) ; holder . addAttribute ( STRING , STRING ) ; return message ; } } ) ; doPoll ( adapter ) ; return null ; } ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Override public Message < String > receive ( ) { GenericMessage < String > message = new GenericMessage < String > ( STRING ) ; IntegrationResourceHolder holder = ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ; holder . addAttribute ( STRING , STRING ) ; holder . addAttribute ( STRING , STRING ) ; return message ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final PollableChannel org.springframework.integration.endpoint.PollableChannel = new QueueChannel ( ) ; TransactionTemplate org.springframework.integration.endpoint.TransactionTemplate = new TransactionTemplate ( new PseudoTransactionManager ( ) ) ; try { org.springframework.integration.endpoint.TransactionTemplate . execute ( status -> { SourcePollingChannelAdapter adapter = new SourcePollingChannelAdapter ( ) ; ExpressionEvaluatingTransactionSynchronizationProcessor syncProcessor = new ExpressionEvaluatingTransactionSynchronizationProcessor ( ) ; syncProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; syncProcessor . setAfterRollbackChannel ( queueChannel ) ; syncProcessor . setAfterRollbackExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; DefaultTransactionSynchronizationFactory syncFactory = new DefaultTransactionSynchronizationFactory ( syncProcessor ) ; adapter . setTransactionSynchronizationFactory ( syncFactory ) ; QueueChannel outputChannel = new QueueChannel ( ) ; adapter . setOutputChannel ( outputChannel ) ; adapter . setSource ( new MessageSource < String > ( ) { @ Override public Message < String > receive ( ) { GenericMessage < String > message = new GenericMessage < String > ( STRING ) ; ( ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ) . addAttribute ( STRING , STRING ) ; return message ; } } ) ; doPoll ( adapter ) ; throw new RuntimeException ( STRING ) ; } ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.String ( ) ) ; } Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Override public Message < String > receive ( ) { GenericMessage < String > message = new GenericMessage < String > ( STRING ) ; ( ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ) . addAttribute ( STRING , STRING ) ; return message ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final PollableChannel org.springframework.integration.endpoint.PollableChannel = new QueueChannel ( ) ; TransactionTemplate org.springframework.integration.endpoint.TransactionTemplate = new TransactionTemplate ( new PseudoTransactionManager ( ) ) ; org.springframework.integration.endpoint.TransactionTemplate . execute ( status -> { SourcePollingChannelAdapter adapter = new SourcePollingChannelAdapter ( ) ; ExpressionEvaluatingTransactionSynchronizationProcessor syncProcessor = new ExpressionEvaluatingTransactionSynchronizationProcessor ( ) ; syncProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; syncProcessor . setAfterRollbackChannel ( queueChannel ) ; syncProcessor . setAfterRollbackExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; DefaultTransactionSynchronizationFactory syncFactory = new DefaultTransactionSynchronizationFactory ( syncProcessor ) ; adapter . setTransactionSynchronizationFactory ( syncFactory ) ; QueueChannel outputChannel = new QueueChannel ( ) ; adapter . setOutputChannel ( outputChannel ) ; adapter . setSource ( new MessageSource < String > ( ) { @ Override public Message < String > receive ( ) { GenericMessage < String > message = new GenericMessage < String > ( STRING ) ; ( ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ) . addAttribute ( STRING , STRING ) ; return message ; } } ) ; doPoll ( adapter ) ; status . setRollbackOnly ( ) ; return null ; } ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Override public Message < String > receive ( ) { GenericMessage < String > message = new GenericMessage < String > ( STRING ) ; ( ( IntegrationResourceHolder ) TransactionSynchronizationManager . getResource ( this ) ) . addAttribute ( STRING , STRING ) ; return message ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SourcePollingChannelAdapter org.springframework.integration.endpoint.SourcePollingChannelAdapter = new SourcePollingChannelAdapter ( ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setSource ( ( ) null ) ; TransactionSynchronizationManager . setActualTransactionActive ( true ) ; void ( org.springframework.integration.endpoint.SourcePollingChannelAdapter ) ; TransactionSynchronizationManager . setActualTransactionActive ( false ) ; TransactionSynchronizationManager . setActualTransactionActive ( true ) ; void ( org.springframework.integration.endpoint.SourcePollingChannelAdapter ) ; TransactionSynchronizationManager . setActualTransactionActive ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SourcePollingChannelAdapter org.springframework.integration.endpoint.SourcePollingChannelAdapter = new SourcePollingChannelAdapter ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; TransactionSynchronizationFactory org.springframework.integration.endpoint.TransactionSynchronizationFactory = new TransactionSynchronizationFactory ( ) { @ java.lang.Override public org.springframework.integration.endpoint.TransactionSynchronization org.springframework.integration.endpoint.TransactionSynchronization ( java.lang.Object java.lang.Object ) { return new TransactionSynchronizationAdapter ( ) { @ java.lang.Override public void void ( int int ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ; } } ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setTransactionSynchronizationFactory ( org.springframework.integration.endpoint.TransactionSynchronizationFactory ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setSource ( ( ) null ) ; TransactionSynchronizationManager . initSynchronization ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( true ) ; void ( org.springframework.integration.endpoint.SourcePollingChannelAdapter ) ; TransactionSynchronizationUtils . triggerAfterCompletion ( TransactionSynchronization . STATUS_COMMITTED ) ; TransactionSynchronizationManager . clearSynchronization ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( false ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; TransactionSynchronizationManager . initSynchronization ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( true ) ; void ( org.springframework.integration.endpoint.SourcePollingChannelAdapter ) ; TransactionSynchronizationUtils . triggerAfterCompletion ( TransactionSynchronization . STATUS_COMMITTED ) ; TransactionSynchronizationManager . clearSynchronization ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( false ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.endpoint.TransactionSynchronization org.springframework.integration.endpoint.TransactionSynchronization ( java.lang.Object java.lang.Object ) { return new TransactionSynchronizationAdapter ( ) { @ java.lang.Override public void void ( int int ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( SourcePollingChannelAdapter org.springframework.integration.endpoint.SourcePollingChannelAdapter ) { try { java.lang.reflect.Method java.lang.reflect.Method = AbstractPollingEndpoint .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method . void ( true ) ; java.lang.reflect.Method . java.lang.Object ( org.springframework.integration.endpoint.SourcePollingChannelAdapter ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING + java.lang.Exception . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.endpoint.MessageChannel org.springframework.integration.endpoint.MessageChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.endpoint.TransactionSynchronizationFactoryBean org.springframework.integration.endpoint.TransactionSynchronizationFactoryBean ( ) { return new TransactionSynchronizationFactoryBean ( ) . beforeCommit ( STRING ) . beforeCommit ( org.springframework.integration.endpoint.MessageChannel ( ) ) . afterCommit ( STRING , org.springframework.integration.endpoint.MessageChannel ( ) ) ; }  <METHOD_END>
