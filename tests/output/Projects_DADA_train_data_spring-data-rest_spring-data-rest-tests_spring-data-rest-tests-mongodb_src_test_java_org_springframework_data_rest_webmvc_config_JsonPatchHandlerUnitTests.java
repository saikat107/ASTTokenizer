<METHOD_START> @ Before public void void ( ) { MongoMappingContext org.springframework.data.rest.webmvc.config.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.rest.webmvc.config.MongoMappingContext . getPersistentEntity ( User .class ) ; PersistentEntities org.springframework.data.rest.webmvc.config.PersistentEntities = new PersistentEntities ( java.util.Arrays . java.util.List ( org.springframework.data.rest.webmvc.config.MongoMappingContext ) ) ; Associations org.springframework.data.rest.webmvc.config.Associations = new Associations ( org.springframework.data.rest.webmvc.config.ResourceMappings , mock ( RepositoryRestConfiguration .class ) ) ; this . org.springframework.data.rest.webmvc.config.JsonPatchHandler = new JsonPatchHandler ( new ObjectMapper ( ) , new DomainObjectReader ( org.springframework.data.rest.webmvc.config.PersistentEntities , org.springframework.data.rest.webmvc.config.Associations ) ) ; Address org.springframework.data.rest.webmvc.config.Address = new Address ( ) ; address . street = STRING ; address . zipCode = STRING ; this . org.springframework.data.rest.webmvc.config.User = new User ( ) ; this . org.springframework.data.rest.webmvc.config.User . firstname = STRING ; this . org.springframework.data.rest.webmvc.config.User . lastname = STRING ; this . org.springframework.data.rest.webmvc.config.User . address = org.springframework.data.rest.webmvc.config.Address ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING ; User org.springframework.data.rest.webmvc.config.User = org.springframework.data.rest.webmvc.config.JsonPatchHandler . applyPatch ( asStream ( java.lang.String ) , org.springframework.data.rest.webmvc.config.User ) ; assertThat ( result . lastname ) . isNull ( ) ; assertThat ( result . address . zipCode ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; User org.springframework.data.rest.webmvc.config.User = org.springframework.data.rest.webmvc.config.JsonPatchHandler . applyMergePatch ( asStream ( java.lang.String ) , org.springframework.data.rest.webmvc.config.User ) ; assertThat ( result . lastname ) . isNull ( ) ; assertThat ( result . address . zipCode ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { User org.springframework.data.rest.webmvc.config.User = new User ( ) ; thomas . firstname = STRING ; User org.springframework.data.rest.webmvc.config.User = new User ( ) ; christoph . firstname = STRING ; this . org.springframework.data.rest.webmvc.config.User . colleagues = new java.util.ArrayList<org.springframework.data.rest.webmvc.config.User> < User > ( java.util.Arrays . java.util.List ( org.springframework.data.rest.webmvc.config.User , org.springframework.data.rest.webmvc.config.User ) ) ; java.lang.String java.lang.String = STRING ; org.springframework.data.rest.webmvc.config.JsonPatchHandler . applyPatch ( asStream ( java.lang.String ) , org.springframework.data.rest.webmvc.config.User ) ; assertThat ( org.springframework.data.rest.webmvc.config.User . colleagues ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.config.User . colleagues . get ( NUMBER ) . firstname ) . isEqualTo ( christoph . firstname ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.config.ExpectedException . expect ( HttpMessageNotReadableException .class ) ; org.springframework.data.rest.webmvc.config.ExpectedException . expectMessage ( RestMediaTypes . JSON_PATCH_JSON . toString ( ) ) ; org.springframework.data.rest.webmvc.config.JsonPatchHandler . applyPatch ( asStream ( STRING ) , new User ( ) ) ; }  <METHOD_END>
