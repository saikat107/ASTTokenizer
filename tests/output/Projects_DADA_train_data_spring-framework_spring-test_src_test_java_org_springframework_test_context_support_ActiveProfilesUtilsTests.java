<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { assertArrayEquals ( java.lang.String[] , resolveActiveProfiles ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( Enigma .class , EMPTY_STRING_ARRAY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( BareAnnotations .class , EMPTY_STRING_ARRAY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.EmptyProfiles .class , EMPTY_STRING_ARRAY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.DuplicatedProfiles .class , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.ExtendedDuplicatedProfiles .class , STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( LocationsFoo .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.InheritedLocationsFoo .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.InheritedClassesFoo .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( LocationsBar .class , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.Animals .class , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( MetaLocationsFoo .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( MetaLocationsFooWithOverrides .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( MetaLocationsFooWithOverriddenAttributes .class , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( MetaLocationsBar .class , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.MetaAnimals .class , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.FooActiveProfilesResolverTestCase .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.InheritedFooActiveProfilesResolverTestCase .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.MergedInheritedFooActiveProfilesResolverTestCase .class , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.OverridenInheritedFooActiveProfilesResolverTestCase .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.ResolverAndProfilesTestCase .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.ResolverAndValueTestCase .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AnnotationConfigurationException .class ) public void void ( ) { resolveActiveProfiles ( org.springframework.test.context.support.ActiveProfilesUtilsTests.ConflictingProfilesAndValueTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { resolveActiveProfiles ( org.springframework.test.context.support.ActiveProfilesUtilsTests.NoDefaultConstructorActiveProfilesResolverTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { resolveActiveProfiles ( org.springframework.test.context.support.ActiveProfilesUtilsTests.NullActiveProfilesResolverTestCase .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<org.springframework.test.context.support.ActiveProfilesUtilsTests.TestClassVerifyingActiveProfilesResolverTestCase> < org.springframework.test.context.support.ActiveProfilesUtilsTests.TestClassVerifyingActiveProfilesResolverTestCase > java.lang.Class<org.springframework.test.context.support.ActiveProfilesUtilsTests.TestClassVerifyingActiveProfilesResolverTestCase> = org.springframework.test.context.support.ActiveProfilesUtilsTests.TestClassVerifyingActiveProfilesResolverTestCase .class ; void ( java.lang.Class<org.springframework.test.context.support.ActiveProfilesUtilsTests.TestClassVerifyingActiveProfilesResolverTestCase> , java.lang.Class<org.springframework.test.context.support.ActiveProfilesUtilsTests.TestClassVerifyingActiveProfilesResolverTestCase> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.DefaultActiveProfilesResolverTestCase .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.ActiveProfilesUtilsTests.ExtendedDefaultActiveProfilesResolverTestCase .class , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void ( java.lang.Object java.lang.Object ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . boolean ( ) ? new java.lang.String [] { STRING + java.lang.Class<> . java.lang.String ( ) } : new java.lang.String [] { java.lang.Class<> . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList <> ( java.util.Arrays . java.util.List ( super. resolve ( java.lang.Class<> ) ) ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; return StringUtils . toStringArray ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
