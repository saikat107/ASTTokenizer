<METHOD_START> @ Autowired public void ( PagedResourcesAssembler < java.lang.Object > org.springframework.data.rest.webmvc.PagedResourcesAssembler<java.lang.Object> , RepositoryEntityLinks org.springframework.data.rest.webmvc.RepositoryEntityLinks , ResourceMappings org.springframework.data.rest.webmvc.ResourceMappings , HttpHeadersPreparer org.springframework.data.rest.webmvc.HttpHeadersPreparer ) { super( org.springframework.data.rest.webmvc.PagedResourcesAssembler<java.lang.Object> ); Assert . notNull ( org.springframework.data.rest.webmvc.RepositoryEntityLinks , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.ResourceMappings , STRING ) ; this . org.springframework.data.rest.webmvc.RepositoryEntityLinks = org.springframework.data.rest.webmvc.RepositoryEntityLinks ; this . org.springframework.data.rest.webmvc.ResourceMappings = org.springframework.data.rest.webmvc.ResourceMappings ; this . org.springframework.data.rest.webmvc.ResourceStatus = ResourceStatus . of ( org.springframework.data.rest.webmvc.HttpHeadersPreparer ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = java.lang.String , method = RequestMethod . OPTIONS ) public org.springframework.data.rest.webmvc.HttpEntity<?> < ? > org.springframework.data.rest.webmvc.HttpEntity<?> ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation ) { org.springframework.data.rest.webmvc.SearchResourceMappings ( org.springframework.data.rest.webmvc.RootResourceInformation ) ; HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders = new HttpHeaders ( ) ; org.springframework.data.rest.webmvc.HttpHeaders . setAllow ( java.util.Collections . java.util.Set ( HttpMethod . GET ) ) ; return ResponseEntity . ok ( ) . headers ( org.springframework.data.rest.webmvc.HttpHeaders ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = java.lang.String , method = RequestMethod . HEAD ) public org.springframework.data.rest.webmvc.HttpEntity<?> < ? > org.springframework.data.rest.webmvc.HttpEntity<?> ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation ) { org.springframework.data.rest.webmvc.SearchResourceMappings ( org.springframework.data.rest.webmvc.RootResourceInformation ) ; return ResponseEntity . noContent ( ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ ResponseBody @ RequestMapping ( value = java.lang.String , method = RequestMethod . GET ) public org.springframework.data.rest.webmvc.RepositorySearchesResource org.springframework.data.rest.webmvc.RepositorySearchesResource ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation ) { org.springframework.data.rest.webmvc.SearchResourceMappings ( org.springframework.data.rest.webmvc.RootResourceInformation ) ; Links org.springframework.data.rest.webmvc.Links = org.springframework.data.rest.webmvc.RepositoryEntityLinks . linksToSearchResources ( org.springframework.data.rest.webmvc.RootResourceInformation . getDomainType ( ) ) ; if ( org.springframework.data.rest.webmvc.Links . isEmpty ( ) ) { throw new ResourceNotFoundException ( ) ; } RepositorySearchesResource org.springframework.data.rest.webmvc.RepositorySearchesResource = new RepositorySearchesResource ( org.springframework.data.rest.webmvc.RootResourceInformation . getDomainType ( ) ) ; org.springframework.data.rest.webmvc.RepositorySearchesResource . add ( org.springframework.data.rest.webmvc.Links ) ; org.springframework.data.rest.webmvc.RepositorySearchesResource . add ( getDefaultSelfLink ( ) ) ; return org.springframework.data.rest.webmvc.RepositorySearchesResource ; }  <METHOD_END>
<METHOD_START> @ ResponseBody @ RequestMapping ( value = java.lang.String + STRING , method = RequestMethod . GET ) public org.springframework.data.rest.webmvc.ResponseEntity<?> < ? > org.springframework.data.rest.webmvc.ResponseEntity<?> ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , @ RequestParam MultiValueMap < java.lang.String , java.lang.Object > org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> , @ PathVariable java.lang.String java.lang.String , DefaultedPageable org.springframework.data.rest.webmvc.DefaultedPageable , Sort org.springframework.data.rest.webmvc.Sort , PersistentEntityResourceAssembler org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler , @ RequestHeader HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.rest.webmvc.RootResourceInformation , java.lang.String ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<java.lang.Object> ( org.springframework.data.rest.webmvc.RootResourceInformation . getInvoker ( ) , org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> , java.lang.reflect.Method , org.springframework.data.rest.webmvc.DefaultedPageable , org.springframework.data.rest.webmvc.Sort , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler ) ; SearchResourceMappings org.springframework.data.rest.webmvc.SearchResourceMappings = org.springframework.data.rest.webmvc.RootResourceInformation . getSearchMappings ( ) ; MethodResourceMapping org.springframework.data.rest.webmvc.MethodResourceMapping = org.springframework.data.rest.webmvc.SearchResourceMappings . getExportedMethodMappingForPath ( java.lang.String ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.webmvc.MethodResourceMapping . getReturnedDomainType ( ) ; return org.springframework.data.rest.webmvc.ResponseEntity<?> ( java.util.Optional<java.lang.Object> , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler , java.lang.Class<> , null , org.springframework.data.rest.webmvc.HttpHeaders , org.springframework.data.rest.webmvc.RootResourceInformation ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.rest.webmvc.ResponseEntity<?> < ? > org.springframework.data.rest.webmvc.ResponseEntity<?> ( java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> , final PersistentEntityResourceAssembler org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler , java.lang.Class<?> < ? > java.lang.Class<?> , Link org.springframework.data.rest.webmvc.Link , HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders , RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation ) { return java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> { if ( java.lang.Object instanceof java.lang.Iterable ) { return ResponseEntity . ok ( toResources ( ( java.lang.Iterable<?> < ? > ) java.lang.Object , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler , java.lang.Class<> , org.springframework.data.rest.webmvc.Link ) ) ; } else if ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return ResponseEntity . ok ( java.lang.Object ) ; } PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.RootResourceInformation . getPersistentEntity ( ) ; return org.springframework.data.rest.webmvc.ResourceStatus . getStatusAndHeaders ( org.springframework.data.rest.webmvc.HttpHeaders , java.lang.Object , org.springframework.data.rest.webmvc.PersistentEntity<,> ) . toResponseEntity ( ( ) assembler . toFullResource ( it ) ) ; } ) . orElseThrow ( ( ) new ResourceNotFoundException ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ResponseBody @ RequestMapping ( value = java.lang.String + STRING , method = RequestMethod . GET , produces = { STRING } ) public org.springframework.data.rest.webmvc.ResourceSupport org.springframework.data.rest.webmvc.ResourceSupport ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , @ RequestHeader HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders , @ RequestParam MultiValueMap < java.lang.String , java.lang.Object > org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> , @ PathVariable java.lang.String java.lang.String , @ PathVariable java.lang.String java.lang.String , DefaultedPageable org.springframework.data.rest.webmvc.DefaultedPageable , Sort org.springframework.data.rest.webmvc.Sort , PersistentEntityResourceAssembler org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.rest.webmvc.RootResourceInformation , java.lang.String ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<java.lang.Object> ( org.springframework.data.rest.webmvc.RootResourceInformation . getInvoker ( ) , org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> , java.lang.reflect.Method , org.springframework.data.rest.webmvc.DefaultedPageable , org.springframework.data.rest.webmvc.Sort , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler ) ; ResourceMetadata org.springframework.data.rest.webmvc.ResourceMetadata = org.springframework.data.rest.webmvc.RootResourceInformation . getResourceMetadata ( ) ; ResponseEntity < ? > org.springframework.data.rest.webmvc.ResponseEntity<?> = org.springframework.data.rest.webmvc.ResponseEntity<?> ( java.util.Optional<java.lang.Object> , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler , org.springframework.data.rest.webmvc.ResourceMetadata . getDomainType ( ) , null , org.springframework.data.rest.webmvc.HttpHeaders , org.springframework.data.rest.webmvc.RootResourceInformation ) ; java.lang.Object java.lang.Object = org.springframework.data.rest.webmvc.ResponseEntity<> . getBody ( ) ; java.util.List<org.springframework.data.rest.webmvc.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.Link> = new java.util.ArrayList<org.springframework.data.rest.webmvc.Link> < Link > ( ) ; if ( java.lang.Object instanceof Resources && ( ( Resources < ? > ) java.lang.Object ) . getContent ( ) != null ) { for ( java.lang.Object java.lang.Object : ( ( Resources < ? > ) java.lang.Object ) . getContent ( ) ) { if ( null != java.lang.Object && java.lang.Object instanceof Resource ) { Resource < ? > org.springframework.data.rest.webmvc.Resource<?> = ( Resource < ? > ) java.lang.Object ; java.util.List<org.springframework.data.rest.webmvc.Link> . add ( resourceLink ( org.springframework.data.rest.webmvc.RootResourceInformation , org.springframework.data.rest.webmvc.Resource<> ) ) ; } } } else if ( java.lang.Object instanceof Resource ) { Resource < ? > org.springframework.data.rest.webmvc.Resource<?> = ( Resource < ? > ) java.lang.Object ; java.util.List<org.springframework.data.rest.webmvc.Link> . add ( resourceLink ( org.springframework.data.rest.webmvc.RootResourceInformation , org.springframework.data.rest.webmvc.Resource<> ) ) ; } return new Resources < Resource < ? > > ( EMPTY_RESOURCE_LIST , java.util.List<org.springframework.data.rest.webmvc.Link> ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = java.lang.String + STRING , method = RequestMethod . OPTIONS ) public org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Object> ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , @ PathVariable java.lang.String java.lang.String ) { java.lang.reflect.Method ( org.springframework.data.rest.webmvc.RootResourceInformation , java.lang.String ) ; HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders = new HttpHeaders ( ) ; org.springframework.data.rest.webmvc.HttpHeaders . setAllow ( java.util.Collections . java.util.Set ( HttpMethod . GET ) ) ; return new ResponseEntity < java.lang.Object > ( org.springframework.data.rest.webmvc.HttpHeaders , HttpStatus . OK ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = java.lang.String + STRING , method = RequestMethod . HEAD ) public org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Object> ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , @ PathVariable java.lang.String java.lang.String ) { java.lang.reflect.Method ( org.springframework.data.rest.webmvc.RootResourceInformation , java.lang.String ) ; return new ResponseEntity < java.lang.Object > ( HttpStatus . NO_CONTENT ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation , java.lang.String java.lang.String ) { SearchResourceMappings org.springframework.data.rest.webmvc.SearchResourceMappings = org.springframework.data.rest.webmvc.SearchResourceMappings ( org.springframework.data.rest.webmvc.RootResourceInformation ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.webmvc.SearchResourceMappings . getMappedMethod ( java.lang.String ) ; if ( java.lang.reflect.Method == null ) { throw new ResourceNotFoundException ( ) ; } return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( final RepositoryInvoker org.springframework.data.rest.webmvc.RepositoryInvoker , @ RequestParam MultiValueMap < java.lang.String , java.lang.Object > org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> , java.lang.reflect.Method java.lang.reflect.Method , DefaultedPageable org.springframework.data.rest.webmvc.DefaultedPageable , Sort org.springframework.data.rest.webmvc.Sort , PersistentEntityResourceAssembler org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap < java.lang.String , java.lang.Object > ( org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> ) ; MethodParameters org.springframework.data.rest.webmvc.MethodParameters = new MethodParameters ( java.lang.reflect.Method , new AnnotationAttribute ( Param .class ) ) ; java.util.List<org.springframework.data.rest.webmvc.MethodParameter> < MethodParameter > java.util.List<org.springframework.data.rest.webmvc.MethodParameter> = org.springframework.data.rest.webmvc.MethodParameters . getParameters ( ) ; java.util.List<org.springframework.data.rest.webmvc.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.rest.webmvc.TypeInformation<?>> = ClassTypeInformation . from ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) . getParameterTypes ( java.lang.reflect.Method ) ; for ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> < java.lang.String , java.util.List<java.lang.Object> < java.lang.Object > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> : org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> . entrySet ( ) ) { MethodParameter org.springframework.data.rest.webmvc.MethodParameter = org.springframework.data.rest.webmvc.MethodParameters . getParameter ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> . java.lang.String ( ) ) ; if ( org.springframework.data.rest.webmvc.MethodParameter == null ) { continue; } int int = java.util.List<org.springframework.data.rest.webmvc.MethodParameter> . indexOf ( org.springframework.data.rest.webmvc.MethodParameter ) ; TypeInformation < ? > org.springframework.data.rest.webmvc.TypeInformation<?> = java.util.List<org.springframework.data.rest.webmvc.TypeInformation<?>> . get ( int ) . getActualType ( ) ; ResourceMetadata org.springframework.data.rest.webmvc.ResourceMetadata = org.springframework.data.rest.webmvc.ResourceMappings . getMetadataFor ( org.springframework.data.rest.webmvc.TypeInformation<> . getType ( ) ) ; if ( org.springframework.data.rest.webmvc.ResourceMetadata != null && org.springframework.data.rest.webmvc.ResourceMetadata . isExported ( ) ) { org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> . put ( org.springframework.data.rest.webmvc.MethodParameter . getParameterName ( ) , java.util.List<java.lang.Object> ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> . java.util.List<java.lang.Object> ( ) ) ) ; } } return org.springframework.data.rest.webmvc.RepositoryInvoker . invokeQueryMethod ( java.lang.reflect.Method , org.springframework.data.rest.webmvc.MultiValueMap<java.lang.String,java.lang.Object> , org.springframework.data.rest.webmvc.DefaultedPageable . getPageable ( ) , org.springframework.data.rest.webmvc.Sort ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.rest.webmvc.SearchResourceMappings org.springframework.data.rest.webmvc.SearchResourceMappings ( RootResourceInformation org.springframework.data.rest.webmvc.RootResourceInformation ) { SearchResourceMappings org.springframework.data.rest.webmvc.SearchResourceMappings = org.springframework.data.rest.webmvc.RootResourceInformation . getSearchMappings ( ) ; if ( ! org.springframework.data.rest.webmvc.SearchResourceMappings . isExported ( ) ) { throw new ResourceNotFoundException ( ) ; } return org.springframework.data.rest.webmvc.SearchResourceMappings ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { if ( java.util.List<java.lang.Object> == null || java.util.List<java.lang.Object> . boolean ( ) ) { return java.util.Collections . java.util.List<java.lang.Object> ( ) ; } java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( java.util.List<java.lang.Object> . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { try { java.util.List<java.lang.Object> . boolean ( new java.net.URI ( java.lang.Object . java.lang.String ( ) ) ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } } return java.util.List<java.lang.Object> ; }  <METHOD_END>
