<METHOD_START> @ Bean @ ConditionalOnProperty ( prefix = STRING , name = STRING , matchIfMissing = true ) public static org.springframework.boot.autoconfigure.hateoas.HypermediaHttpMessageConverterConfiguration.HalMessageConverterSupportedMediaTypesCustomizer org.springframework.boot.autoconfigure.hateoas.HypermediaHttpMessageConverterConfiguration.HalMessageConverterSupportedMediaTypesCustomizer ( ) { return new org.springframework.boot.autoconfigure.hateoas.HypermediaHttpMessageConverterConfiguration.HalMessageConverterSupportedMediaTypesCustomizer ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { if ( this . org.springframework.boot.autoconfigure.hateoas.BeanFactory instanceof ListableBeanFactory ) { void ( ( ( ListableBeanFactory ) this . org.springframework.boot.autoconfigure.hateoas.BeanFactory ) . getBeansOfType ( RequestMappingHandlerAdapter .class ) . values ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.boot.autoconfigure.hateoas.RequestMappingHandlerAdapter> < RequestMappingHandlerAdapter > java.util.Collection<org.springframework.boot.autoconfigure.hateoas.RequestMappingHandlerAdapter> ) { for ( RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.hateoas.RequestMappingHandlerAdapter : java.util.Collection<org.springframework.boot.autoconfigure.hateoas.RequestMappingHandlerAdapter> ) { for ( HttpMessageConverter < ? > org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<?> : org.springframework.boot.autoconfigure.hateoas.RequestMappingHandlerAdapter . getMessageConverters ( ) ) { void ( org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<> ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( HttpMessageConverter < ? > org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<?> ) { if ( org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<> instanceof TypeConstrainedMappingJackson2HttpMessageConverter ) { java.util.List<org.springframework.boot.autoconfigure.hateoas.MediaType> < MediaType > java.util.List<org.springframework.boot.autoconfigure.hateoas.MediaType> = new java.util.ArrayList <> ( org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<> . getSupportedMediaTypes ( ) ) ; if ( ! java.util.List<org.springframework.boot.autoconfigure.hateoas.MediaType> . contains ( MediaType . APPLICATION_JSON ) ) { java.util.List<org.springframework.boot.autoconfigure.hateoas.MediaType> . add ( MediaType . APPLICATION_JSON ) ; } ( ( AbstractHttpMessageConverter < ? > ) org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<> ) . setSupportedMediaTypes ( java.util.List<org.springframework.boot.autoconfigure.hateoas.MediaType> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.autoconfigure.hateoas.BeanFactory ) throws org.springframework.boot.autoconfigure.hateoas.BeansException { this . org.springframework.boot.autoconfigure.hateoas.BeanFactory = org.springframework.boot.autoconfigure.hateoas.BeanFactory ; }  <METHOD_END>
