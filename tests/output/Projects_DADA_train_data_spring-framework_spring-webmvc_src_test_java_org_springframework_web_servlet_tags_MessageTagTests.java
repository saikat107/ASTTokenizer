<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setMessage ( new DefaultMessageSourceResolvable ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( null ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setArguments ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setArguments ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setArguments ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setArgumentSeparator ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setArguments ( new java.lang.Object [] { STRING , NUMBER } ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setArguments ( NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.MessageTag . setArguments ( NUMBER ) ; org.springframework.web.servlet.tags.MessageTag . addArgument ( NUMBER ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.MessageTag . addArgument ( NUMBER ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.MessageTag . addArgument ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . addArgument ( NUMBER ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setText ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , ( java.lang.StringBuffer . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setText ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setHtmlEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertTrue ( STRING , java.lang.StringBuffer . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; org.springframework.web.servlet.tags.PageContext . getServletContext ( ) . setInitParameter ( WebUtils . RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM , STRING ) ; org.springframework.web.servlet.tags.PageContext . getResponse ( ) . setCharacterEncoding ( STRING ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setText ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setHtmlEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setText ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setJavaScriptEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setText ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setHtmlEscape ( true ) ; org.springframework.web.servlet.tags.MessageTag . setJavaScriptEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setText ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setScope ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; org.springframework.web.servlet.tags.MessageTag . release ( ) ; org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; org.springframework.web.servlet.tags.MessageTag . release ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setText ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; org.springframework.web.servlet.tags.MessageTag . release ( ) ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; ConfigurableWebApplicationContext org.springframework.web.servlet.tags.ConfigurableWebApplicationContext = ( ConfigurableWebApplicationContext ) RequestContextUtils . findWebApplicationContext ( ( HttpServletRequest ) org.springframework.web.servlet.tags.PageContext . getRequest ( ) , org.springframework.web.servlet.tags.PageContext . getServletContext ( ) ) ; org.springframework.web.servlet.tags.ConfigurableWebApplicationContext . close ( ) ; MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.MessageTag . setCode ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.MessageTag . doStartTag ( ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.MessageTag . doEndTag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) org.springframework.web.servlet.tags.ServletException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; RequestContext org.springframework.web.servlet.tags.RequestContext = new RequestContext ( ( HttpServletRequest ) org.springframework.web.servlet.tags.PageContext . getRequest ( ) , org.springframework.web.servlet.tags.PageContext . getServletContext ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getMessage ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getMessage ( STRING , ( java.lang.Object [] ) null ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getMessage ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getMessage ( STRING , ( java.lang.Object [] ) null , STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getMessage ( STRING , new java.lang.String [] { STRING , STRING } , STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getMessage ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING } ) , STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getMessage ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getMessage ( STRING , ( java.util.List ) null , STRING ) ) ; MessageSourceResolvable org.springframework.web.servlet.tags.MessageSourceResolvable = new DefaultMessageSourceResolvable ( new java.lang.String [] { STRING } ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getMessage ( org.springframework.web.servlet.tags.MessageSourceResolvable ) ) ; }  <METHOD_END>
