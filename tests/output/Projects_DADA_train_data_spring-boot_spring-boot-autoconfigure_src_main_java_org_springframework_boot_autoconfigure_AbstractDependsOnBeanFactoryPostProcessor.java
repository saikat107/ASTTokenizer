<METHOD_START> protected void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<? extends org.springframework.boot.autoconfigure.FactoryBean<?>> < ? extends FactoryBean < ? > > java.lang.Class<? extends org.springframework.boot.autoconfigure.FactoryBean<?>> , java.lang.String ... java.lang.String[] ) { this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.Class<? extends org.springframework.boot.autoconfigure.FactoryBean<?>> = java.lang.Class<> ; this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ) { for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ( org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ) ) { BeanDefinition org.springframework.boot.autoconfigure.BeanDefinition = org.springframework.boot.autoconfigure.BeanDefinition ( java.lang.String , org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ) ; java.lang.String [] java.lang.String[] = org.springframework.boot.autoconfigure.BeanDefinition . getDependsOn ( ) ; for ( java.lang.String java.lang.String : this . java.lang.String[] ) { java.lang.String[] = StringUtils . addStringToArray ( java.lang.String[] , java.lang.String ) ; } org.springframework.boot.autoconfigure.BeanDefinition . setDependsOn ( java.lang.String[] ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ( ListableBeanFactory org.springframework.boot.autoconfigure.ListableBeanFactory ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.boot.autoconfigure.ListableBeanFactory , this . java.lang.Class<> , true , false ) ) ) ; for ( java.lang.String java.lang.String : BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.boot.autoconfigure.ListableBeanFactory , this . java.lang.Class<> , true , false ) ) { java.util.Set<java.lang.String> . boolean ( BeanFactoryUtils . transformedBeanName ( java.lang.String ) ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.boot.autoconfigure.BeanDefinition org.springframework.boot.autoconfigure.BeanDefinition ( java.lang.String java.lang.String , ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ) { try { return org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.autoconfigure.NoSuchBeanDefinitionException ) { BeanFactory org.springframework.boot.autoconfigure.BeanFactory = org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory . getParentBeanFactory ( ) ; if ( org.springframework.boot.autoconfigure.BeanFactory instanceof ConfigurableListableBeanFactory ) { return org.springframework.boot.autoconfigure.BeanDefinition ( java.lang.String , ( ConfigurableListableBeanFactory ) org.springframework.boot.autoconfigure.BeanFactory ) ; } throw org.springframework.boot.autoconfigure.NoSuchBeanDefinitionException ; } }  <METHOD_END>
