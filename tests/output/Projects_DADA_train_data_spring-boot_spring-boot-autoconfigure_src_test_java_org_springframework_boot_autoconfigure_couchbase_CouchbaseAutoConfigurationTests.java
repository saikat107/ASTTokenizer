<METHOD_START> @ Test public void void ( ) { load ( null ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { load ( CouchbaseTestConfigurer .class ) ; assertThat ( this . context . getBeansOfType ( CouchbaseTestConfigurer .class ) ) . hasSize ( NUMBER ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { load ( CouchbaseTestConfigurer .class , STRING ) ; assertThat ( this . context . getBeansOfType ( CouchbaseTestConfigurer .class ) ) . hasSize ( NUMBER ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { assertThat ( this . context . getBeansOfType ( CouchbaseEnvironment .class ) ) . isEmpty ( ) ; assertThat ( this . context . getBeansOfType ( ClusterInfo .class ) ) . isEmpty ( ) ; assertThat ( this . context . getBeansOfType ( Cluster .class ) ) . isEmpty ( ) ; assertThat ( this . context . getBeansOfType ( Bucket .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultCouchbaseEnvironment org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment = org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment ( STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . kvEndpoints ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . queryEndpoints ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . viewEndpoints ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultCouchbaseEnvironment org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment = org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment ( STRING , STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . connectTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . kvTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . queryTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . socketConnectTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . viewTimeout ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultCouchbaseEnvironment org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment = org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . sslEnabled ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . sslKeystoreFile ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . sslKeystorePassword ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultCouchbaseEnvironment org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment = org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment ( STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . sslEnabled ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . sslKeystoreFile ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . sslKeystorePassword ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { load ( org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfigurationTests.CustomCouchbaseConfiguration .class , STRING , STRING ) ; assertThat ( this . context . getBeansOfType ( CouchbaseConfiguration .class ) ) . hasSize ( NUMBER ) ; DefaultCouchbaseEnvironment org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment = this . context . getBean ( DefaultCouchbaseEnvironment .class ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . socketConnectTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment . connectTimeout ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment org.springframework.boot.autoconfigure.couchbase.DefaultCouchbaseEnvironment ( java.lang.String ... java.lang.String[] )			throws java.lang.Exception { load ( CouchbaseTestConfigurer .class , java.lang.String[] ) ; CouchbaseProperties org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties = this . context . getBean ( CouchbaseProperties .class ) ; return new CouchbaseConfiguration ( org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties ) . couchbaseEnvironment ( ) ; }  <METHOD_END>
<METHOD_START> void ( CouchbaseProperties org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties ) { super( org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected DefaultCouchbaseEnvironment . DefaultCouchbaseEnvironment.Builder DefaultCouchbaseEnvironment.Builder ( CouchbaseProperties org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties ) { return super. initializeEnvironmentBuilder ( org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties ) . socketConnectTimeout ( NUMBER ) . connectTimeout ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.couchbase.Cluster org.springframework.boot.autoconfigure.couchbase.Cluster ( ) java.lang.Exception { return mock ( Cluster .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.couchbase.ClusterInfo org.springframework.boot.autoconfigure.couchbase.ClusterInfo ( ) { return mock ( ClusterInfo .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.couchbase.Bucket org.springframework.boot.autoconfigure.couchbase.Bucket ( ) { return mock ( CouchbaseBucket .class ) ; }  <METHOD_END>
