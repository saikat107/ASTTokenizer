<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> = mock ( HttpMessageConverter .class ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> = mock ( HttpMessageConverter .class ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . ALL ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor = new HttpEntityMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; reset ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) ; reset ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING , HttpEntity .class , ResponseEntity .class , java.lang.Integer . java.lang.Class<java.lang.Integer> , RequestEntity .class ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING ) , - NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING , HttpEntity .class ) , - NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING , HttpEntity .class ) , - NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING ) , - NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING ) , - NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . read ( eq ( java.lang.String .class ) , isA ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertTrue ( java.lang.Object instanceof HttpEntity ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; assertEquals ( STRING , java.lang.String , ( ( HttpEntity < ? > ) java.lang.Object ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setServerName ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setServerPort ( NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . read ( eq ( java.lang.String .class ) , isA ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertTrue ( java.lang.Object instanceof RequestEntity ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; RequestEntity < ? > org.springframework.web.servlet.mvc.method.annotation.RequestEntity<?> = ( RequestEntity < ? > ) java.lang.Object ; assertEquals ( STRING , HttpMethod . GET , org.springframework.web.servlet.mvc.method.annotation.RequestEntity<> . getMethod ( ) ) ; assertEquals ( STRING , new java.net.URI ( STRING , null , STRING , - NUMBER , STRING , null , null ) , org.springframework.web.servlet.mvc.method.annotation.RequestEntity<> . getUrl ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.web.servlet.mvc.method.annotation.RequestEntity<> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( false ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExpectedException . expect ( HttpMediaTypeNotSupportedException .class ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExpectedException . expect ( HttpMediaTypeNotSupportedException .class ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = new ResponseEntity <> ( java.lang.String , HttpStatus . OK ) ; MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; void ( org.springframework.web.servlet.mvc.method.annotation.MediaType ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) . write ( eq ( java.lang.String ) , eq ( org.springframework.web.servlet.mvc.method.annotation.MediaType ) , isA ( HttpOutputMessage .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = new ResponseEntity <> ( java.lang.String , HttpStatus . OK ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE , java.util.Collections . java.util.Set ( MediaType . TEXT_HTML ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , MediaType . TEXT_HTML ) ) . willReturn ( true ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) . write ( eq ( java.lang.String ) , eq ( MediaType . TEXT_HTML ) , isA ( HttpOutputMessage .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE , java.util.Collections . java.util.Set ( MediaType . TEXT_HTML ) ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = new ResponseEntity <> ( HttpStatus . OK ) ; ResponseBodyAdvice < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<java.lang.String> = mock ( ResponseBodyAdvice .class ) ; given ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<java.lang.String> . supports ( any ( ) , any ( ) ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<java.lang.String> . beforeBodyWrite ( any ( ) , any ( ) , any ( ) , any ( ) , any ( ) , any ( ) ) ) . willReturn ( STRING ) ; HttpEntityMethodProcessor org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor = new HttpEntityMethodProcessor ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) , null , java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<java.lang.String> ) ) ; reset ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , MediaType . TEXT_HTML ) ) . willReturn ( true ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) . write ( eq ( STRING ) , eq ( MediaType . TEXT_HTML ) , isA ( HttpOutputMessage .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = new ResponseEntity <> ( java.lang.String , HttpStatus . OK ) ; MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . APPLICATION_ATOM_XML ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExpectedException . expect ( HttpMediaTypeNotAcceptableException .class ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = new ResponseEntity <> ( java.lang.String , HttpStatus . OK ) ; MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( false ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExpectedException . expect ( HttpMediaTypeNotAcceptableException .class ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = new ResponseEntity <> ( STRING , HttpStatus . ACCEPTED ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExpectedException . expect ( HttpMediaTypeNotAcceptableException .class ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . set ( STRING , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = new ResponseEntity <> ( org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus . ACCEPTED ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . set ( STRING , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = new ResponseEntity <> ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus . ACCEPTED ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; ArgumentCaptor < HttpOutputMessage > org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<org.springframework.web.servlet.mvc.method.annotation.HttpOutputMessage> = ArgumentCaptor . forClass ( HttpOutputMessage .class ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) . write ( eq ( STRING ) , eq ( MediaType . TEXT_PLAIN ) , org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<org.springframework.web.servlet.mvc.method.annotation.HttpOutputMessage> . capture ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<org.springframework.web.servlet.mvc.method.annotation.HttpOutputMessage> . getValue ( ) . getHeaders ( ) . get ( STRING ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = new java.util.Date ( ) . long ( ) ; long long = long - ( NUMBER * NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_MODIFIED_SINCE , java.text.SimpleDateFormat . java.lang.String ( long ) ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . ok ( ) . lastModified ( long ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . NOT_MODIFIED , null , null , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_NONE_MATCH , java.lang.String ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . ok ( ) . eTag ( java.lang.String ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . NOT_MODIFIED , null , java.lang.String , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_NONE_MATCH , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . ok ( ) . eTag ( java.lang.String ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . OK , STRING , java.lang.String , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = new java.util.Date ( ) . long ( ) ; long long = long - ( NUMBER * NUMBER ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_MODIFIED_SINCE , java.text.SimpleDateFormat . java.lang.String ( long ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_NONE_MATCH , java.lang.String ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . ok ( ) . eTag ( java.lang.String ) . lastModified ( long ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . NOT_MODIFIED , null , java.lang.String , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = new java.util.Date ( ) . long ( ) ; long long = long - ( NUMBER * NUMBER ) ; java.lang.String java.lang.String = STRING ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . status ( HttpStatus . NOT_MODIFIED ) . eTag ( java.lang.String ) . lastModified ( long ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . NOT_MODIFIED , null , java.lang.String , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = new java.util.Date ( ) . long ( ) ; long long = long - ( NUMBER * NUMBER ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_MODIFIED_SINCE , java.text.SimpleDateFormat . java.lang.String ( long ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_NONE_MATCH , java.lang.String ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . ok ( ) . eTag ( java.lang.String ) . lastModified ( long ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . OK , null , java.lang.String , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_NONE_MATCH , java.lang.String ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . ok ( ) . eTag ( java.lang.String ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . OK , STRING , java.lang.String , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_NONE_MATCH , java.lang.String ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . ok ( ) . eTag ( java.lang.String ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . OK , STRING , java.lang.String , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_NONE_MATCH , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_MATCH , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . ok ( ) . eTag ( java.lang.String ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . NOT_MODIFIED , null , java.lang.String , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_NONE_MATCH , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . IF_UNMODIFIED_SINCE , java.text.SimpleDateFormat . java.lang.String ( new java.util.Date ( ) . long ( ) ) ) ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . ok ( ) . eTag ( java.lang.String ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . NOT_MODIFIED , null , java.lang.String , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < Resource > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.Resource> = ResponseEntity . ok ( new ByteArrayResource ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> . canWrite ( ByteArrayResource .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . ALL ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> . canWrite ( ByteArrayResource .class , MediaType . APPLICATION_OCTET_STREAM ) ) . willReturn ( true ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.Resource> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; then ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> ) . should ( times ( NUMBER ) ) . write ( any ( ByteArrayResource .class ) , eq ( MediaType . APPLICATION_OCTET_STREAM ) , any ( HttpOutputMessage .class ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; java.lang.String java.lang.String = STRING ; ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> = ResponseEntity . ok ( ) . header ( HttpHeaders . ETAG , java.lang.String ) . body ( STRING ) ; void ( MediaType . TEXT_PLAIN ) ; org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; void ( HttpStatus . OK , STRING , java.lang.String , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ) { given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { ArgumentCaptor < HttpOutputMessage > org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<org.springframework.web.servlet.mvc.method.annotation.HttpOutputMessage> = ArgumentCaptor . forClass ( HttpOutputMessage .class ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) . write ( eq ( java.lang.String ) , eq ( MediaType . TEXT_PLAIN ) , org.springframework.web.servlet.mvc.method.annotation.ArgumentCaptor<org.springframework.web.servlet.mvc.method.annotation.HttpOutputMessage> . capture ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , java.lang.String java.lang.String , java.lang.String java.lang.String , long long ) throws java.lang.Exception { assertEquals ( org.springframework.web.servlet.mvc.method.annotation.HttpStatus . value ( ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; if ( java.lang.String != null ) { void ( java.lang.String ) ; } else { assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) . length ) ; } if ( java.lang.String != null ) { assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeaderValues ( HttpHeaders . ETAG ) . size ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( HttpHeaders . ETAG ) ) ; } if ( long != - NUMBER ) { assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeaderValues ( HttpHeaders . LAST_MODIFIED ) . size ( ) ) ; assertEquals ( java.text.SimpleDateFormat . java.lang.String ( long ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( HttpHeaders . LAST_MODIFIED ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ( HttpEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<java.lang.String> , ResponseEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> , int int , RequestEntity < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.RequestEntity<java.lang.String> ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.servlet.mvc.method.annotation.HttpEntity<?> < ? > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<?> ( HttpEntity < ? > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<?> ) { return org.springframework.web.servlet.mvc.method.annotation.HttpEntity<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests.CustomHttpEntity org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests.CustomHttpEntity ( HttpEntity < ? > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<?> ) { return new org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests.CustomHttpEntity ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ RequestMapping ( produces = { STRING , STRING } ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.Resource> < Resource > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.Resource> ( ) { return null ; }  <METHOD_END>
