<METHOD_START> @ Before public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { EmbeddedDatabaseConnection . override = null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.jdbc.TomcatDataSourceConfigurationTests.TomcatDataSourceConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( org . org.apache . org.apache . org.apache . org.apache . org.apache .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.jdbc.TomcatDataSourceConfigurationTests.TomcatDataSourceConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; org . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.tomcat.jdbc.pool.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( org . org.apache . org.apache . org.apache . org.apache . org.apache .class ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getUrl ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . isTestWhileIdle ( ) ) . isTrue ( ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . isTestOnBorrow ( ) ) . isTrue ( ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . isTestOnReturn ( ) ) . isTrue ( ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getTimeBetweenEvictionRunsMillis ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getMinEvictableIdleTimeMillis ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getMaxWait ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getValidationInterval ( ) ) . isEqualTo ( NUMBER ) ; void ( org.apache.tomcat.jdbc.pool.DataSource ) ; }  <METHOD_END>
<METHOD_START> private void void ( DataSourceProxy org.springframework.boot.autoconfigure.jdbc.DataSourceProxy )			throws java.lang.ClassNotFoundException { PoolProperties . PoolProperties [] PoolProperties.InterceptorDefinition[] = org.springframework.boot.autoconfigure.jdbc.DataSourceProxy . getJdbcInterceptorsAsArray ( ) ; for ( PoolProperties . PoolProperties PoolProperties.InterceptorDefinition : PoolProperties.InterceptorDefinition[] ) { if ( SlowQueryReport .class == PoolProperties.InterceptorDefinition . getInterceptorClass ( ) ) { return; } } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.jdbc.TomcatDataSourceConfigurationTests.TomcatDataSourceConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; org . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.tomcat.jdbc.pool.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( org . org.apache . org.apache . org.apache . org.apache . org.apache .class ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getTimeBetweenEvictionRunsMillis ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getMinEvictableIdleTimeMillis ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getMaxWait ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getValidationInterval ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Class<> , java.lang.String , null ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ( T ) ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConfigurationProperties ( prefix = STRING ) public javax.sql.DataSource javax.sql.DataSource ( ) { return DataSourceBuilder . create ( ) . type ( org . org.apache . org.apache . org.apache . org.apache . org.apache .class ) . build ( ) ; }  <METHOD_END>
