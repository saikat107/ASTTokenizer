<METHOD_START> @ Before public void void ( ) { ActiveMqTestUtils . prepare ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.jms.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.integration.jms.config.MessageChannel . send ( org.springframework.integration.jms.config.Message<> ) ; org.springframework.integration.jms.config.MessageChannel . send ( org.springframework.integration.jms.config.Message<> ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.config.Message<> ) ; assertNotNull ( org.springframework.integration.jms.config.Message<> ) ; TextMessage org.springframework.integration.jms.config.TextMessage = ( TextMessage ) org.springframework.integration.jms.config.Message<> . getPayload ( ) ; TextMessage org.springframework.integration.jms.config.TextMessage = ( TextMessage ) org.springframework.integration.jms.config.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.jms.config.TextMessage . getText ( ) ) ; assertEquals ( STRING , org.springframework.integration.jms.config.TextMessage . getJMSDestination ( ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.jms.config.TextMessage . getText ( ) ) ; assertEquals ( STRING , org.springframework.integration.jms.config.TextMessage . getJMSDestination ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.jms.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; MessagingTemplate org.springframework.integration.jms.config.MessagingTemplate = new MessagingTemplate ( ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = org.springframework.integration.jms.config.MessagingTemplate . sendAndReceive ( org.springframework.integration.jms.config.MessageChannel , org.springframework.integration.jms.config.Message<> ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = org.springframework.integration.jms.config.MessagingTemplate . sendAndReceive ( org.springframework.integration.jms.config.MessageChannel , org.springframework.integration.jms.config.Message<> ) ; assertNotNull ( org.springframework.integration.jms.config.Message<> ) ; assertNotNull ( org.springframework.integration.jms.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.config.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.jms.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String + STRING ; }  <METHOD_END>
