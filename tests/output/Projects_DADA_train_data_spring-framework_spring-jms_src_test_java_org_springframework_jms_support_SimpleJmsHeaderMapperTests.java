<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Destination org.springframework.jms.support.Destination = new Destination ( ) {} ; Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . REPLY_TO , org.springframework.jms.support.Destination ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNotNull ( javax.jms.Message . getJMSReplyTo ( ) ) ; assertSame ( org.springframework.jms.support.Destination , javax.jms.Message . getJMSReplyTo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . REPLY_TO , STRING ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNull ( javax.jms.Message . getJMSReplyTo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . CORRELATION_ID , java.lang.String ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNotNull ( javax.jms.Message . getJMSCorrelationID ( ) ) ; assertEquals ( java.lang.String , javax.jms.Message . getJMSCorrelationID ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . CORRELATION_ID , NUMBER ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertEquals ( STRING , javax.jms.Message . getJMSCorrelationID ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . CORRELATION_ID , new java.util.Date ( ) ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNull ( javax.jms.Message . getJMSCorrelationID ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . TYPE , java.lang.String ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNotNull ( javax.jms.Message . getJMSType ( ) ) ; assertEquals ( java.lang.String , javax.jms.Message . getJMSType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . TYPE , NUMBER ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNull ( javax.jms.Message . getJMSType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . DESTINATION , new Destination ( ) {} ) . setHeader ( JmsHeaders . DELIVERY_MODE , DeliveryMode . NON_PERSISTENT ) . setHeader ( JmsHeaders . EXPIRATION , NUMBER ) . setHeader ( JmsHeaders . MESSAGE_ID , STRING ) . setHeader ( JmsHeaders . PRIORITY , NUMBER ) . setHeader ( JmsHeaders . REDELIVERED , true ) . setHeader ( JmsHeaders . TIMESTAMP , java.lang.System . long ( ) ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNull ( javax.jms.Message . getJMSDestination ( ) ) ; assertEquals ( DeliveryMode . PERSISTENT , javax.jms.Message . getJMSDeliveryMode ( ) ) ; assertEquals ( NUMBER , javax.jms.Message . getJMSExpiration ( ) ) ; assertNull ( javax.jms.Message . getJMSMessageID ( ) ) ; assertEquals ( javax . javax.jms . Message . DEFAULT_PRIORITY , javax.jms.Message . getJMSPriority ( ) ) ; assertFalse ( javax.jms.Message . getJMSRedelivered ( ) ) ; assertEquals ( NUMBER , javax.jms.Message . getJMSTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( MessageHeaders . CONTENT_TYPE , STRING ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; java.lang.Object java.lang.Object = javax.jms.Message . getObjectProperty ( JmsHeaderMapper . CONTENT_TYPE_PROPERTY ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( STRING , NUMBER ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; java.lang.Object java.lang.Object = javax.jms.Message . getObjectProperty ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( java.lang.Integer .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) java.lang.Object ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . setOutboundPrefix ( STRING ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; java.lang.Object java.lang.Object = javax.jms.Message . getObjectProperty ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( java.lang.Integer .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( NUMBER , ( ( java.lang.Integer ) java.lang.Object ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Destination org.springframework.jms.support.Destination = new Destination ( ) {} ; Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( STRING , org.springframework.jms.support.Destination ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; java.lang.Object java.lang.Object = javax.jms.Message . getObjectProperty ( STRING ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; void ( javax.jms.Message , JmsHeaders . CORRELATION_ID ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public org.springframework.jms.support.Destination org.springframework.jms.support.Destination ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; void ( javax.jms.Message , JmsHeaders . DESTINATION ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.support.Destination org.springframework.jms.support.Destination ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public int int ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; void ( javax.jms.Message , JmsHeaders . DELIVERY_MODE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public long long ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; void ( javax.jms.Message , JmsHeaders . EXPIRATION ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; void ( javax.jms.Message , JmsHeaders . MESSAGE_ID ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public int int ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; void ( javax.jms.Message , JmsHeaders . PRIORITY ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public org.springframework.jms.support.Destination org.springframework.jms.support.Destination ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; void ( javax.jms.Message , JmsHeaders . REPLY_TO ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.support.Destination org.springframework.jms.support.Destination ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public boolean boolean ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; void ( javax.jms.Message , JmsHeaders . REDELIVERED ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; void ( javax.jms.Message , JmsHeaders . TYPE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public long long ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; void ( javax.jms.Message , JmsHeaders . TIMESTAMP ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws org.springframework.jms.support.JMSException { if ( java.lang.String . boolean ( STRING ) ) { throw new JMSException ( STRING ) ; } else { return super. getObjectProperty ( java.lang.String ) ; } } } ; javax.jms.Message . setBooleanProperty ( STRING , true ) ; void ( javax.jms.Message , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws org.springframework.jms.support.JMSException { if ( java.lang.String . boolean ( STRING ) ) { throw new JMSException ( STRING ) ; } else { return super. getObjectProperty ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { java.lang.String java.lang.String = STRING ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setJMSCorrelationID ( java.lang.String ) ; void ( javax.jms.Message , JmsHeaders . CORRELATION_ID , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Destination org.springframework.jms.support.Destination = new Destination ( ) {} ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setJMSDestination ( org.springframework.jms.support.Destination ) ; void ( javax.jms.Message , JmsHeaders . DESTINATION , org.springframework.jms.support.Destination ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { int int = NUMBER ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setJMSDeliveryMode ( int ) ; void ( javax.jms.Message , JmsHeaders . DELIVERY_MODE , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { long long = NUMBER ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setJMSExpiration ( long ) ; void ( javax.jms.Message , JmsHeaders . EXPIRATION , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { java.lang.String java.lang.String = STRING ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setJMSMessageID ( java.lang.String ) ; void ( javax.jms.Message , JmsHeaders . MESSAGE_ID , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { int int = NUMBER ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setJMSPriority ( int ) ; void ( javax.jms.Message , JmsHeaders . PRIORITY , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Destination org.springframework.jms.support.Destination = new Destination ( ) {} ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setJMSReplyTo ( org.springframework.jms.support.Destination ) ; void ( javax.jms.Message , JmsHeaders . REPLY_TO , org.springframework.jms.support.Destination ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { java.lang.String java.lang.String = STRING ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setJMSType ( java.lang.String ) ; void ( javax.jms.Message , JmsHeaders . TYPE , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { long long = NUMBER ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setJMSTimestamp ( long ) ; void ( javax.jms.Message , JmsHeaders . TIMESTAMP , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setStringProperty ( STRING , STRING ) ; void ( javax.jms.Message , MessageHeaders . CONTENT_TYPE , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setIntProperty ( STRING , NUMBER ) ; void ( javax.jms.Message , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) ; javax.jms.Message . setIntProperty ( STRING , NUMBER ) ; org.springframework.jms.support.SimpleJmsHeaderMapper . setInboundPrefix ( STRING ) ; void ( javax.jms.Message , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.jms.support.JMSException { if ( java.lang.String . boolean ( STRING ) ) { throw new JMSException ( STRING ) ; } super. setObjectProperty ( java.lang.String , java.lang.Object ) ; } } ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; java.lang.Object java.lang.Object = javax.jms.Message . getObjectProperty ( STRING ) ; assertNotNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = javax.jms.Message . getObjectProperty ( STRING ) ; assertNotNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = javax.jms.Message . getObjectProperty ( STRING ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.jms.support.JMSException { if ( java.lang.String . boolean ( STRING ) ) { throw new JMSException ( STRING ) ; } super. setObjectProperty ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.jms.support.JMSException { if ( java.lang.String . boolean ( STRING ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } super. setObjectProperty ( java.lang.String , java.lang.Object ) ; } } ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; java.lang.Object java.lang.Object = javax.jms.Message . getObjectProperty ( STRING ) ; assertNotNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = javax.jms.Message . getObjectProperty ( STRING ) ; assertNotNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = javax.jms.Message . getObjectProperty ( STRING ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.jms.support.JMSException { if ( java.lang.String . boolean ( STRING ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } super. setObjectProperty ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . REPLY_TO , new Destination ( ) {} ) . setHeader ( STRING , STRING ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public void void ( Destination org.springframework.jms.support.Destination ) throws org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNull ( javax.jms.Message . getJMSReplyTo ( ) ) ; assertNotNull ( javax.jms.Message . getStringProperty ( STRING ) ) ; assertEquals ( STRING , javax.jms.Message . getStringProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Destination org.springframework.jms.support.Destination ) throws org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . TYPE , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNull ( javax.jms.Message . getJMSType ( ) ) ; assertNotNull ( javax.jms.Message . getStringProperty ( STRING ) ) ; assertEquals ( STRING , javax.jms.Message . getStringProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . CORRELATION_ID , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNull ( javax.jms.Message . getJMSCorrelationID ( ) ) ; assertNotNull ( javax.jms.Message . getStringProperty ( STRING ) ) ; assertEquals ( STRING , javax.jms.Message . getStringProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.JMSException { Message < java.lang.String > org.springframework.jms.support.Message<java.lang.String> = org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) . setHeader ( JmsHeaders . CORRELATION_ID , NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; javax . javax.jms . javax.jms javax.jms.Message = new StubTextMessage ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; } } ; org.springframework.jms.support.SimpleJmsHeaderMapper . fromHeaders ( org.springframework.jms.support.Message<java.lang.String> . getHeaders ( ) , javax.jms.Message ) ; assertNull ( javax.jms.Message . getJMSCorrelationID ( ) ) ; assertNotNull ( javax.jms.Message . getStringProperty ( STRING ) ) ; assertEquals ( STRING , javax.jms.Message . getStringProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.jms.support.JMSException { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( javax . javax.jms . javax.jms javax.jms.Message , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jms.support.SimpleJmsHeaderMapper . toHeaders ( javax.jms.Message ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { assertNull ( java.lang.Object ) ; } else { assertNotNull ( java.lang.Object ) ; assertEquals ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax . javax.jms . javax.jms javax.jms.Message , java.lang.String java.lang.String )			throws org.springframework.jms.support.JMSException { javax.jms.Message . setStringProperty ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jms.support.SimpleJmsHeaderMapper . toHeaders ( javax.jms.Message ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.support.MessageBuilder<java.lang.String> < java.lang.String > org.springframework.jms.support.MessageBuilder<java.lang.String> ( ) { return MessageBuilder . withPayload ( STRING ) ; }  <METHOD_END>
