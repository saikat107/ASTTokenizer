<METHOD_START> void ( HttpAsyncClient org.springframework.http.client.HttpAsyncClient , HttpUriRequest org.springframework.http.client.HttpUriRequest , HttpContext org.springframework.http.client.HttpContext ) { this . org.springframework.http.client.HttpAsyncClient = org.springframework.http.client.HttpAsyncClient ; this . org.springframework.http.client.HttpUriRequest = org.springframework.http.client.HttpUriRequest ; this . org.springframework.http.client.HttpContext = org.springframework.http.client.HttpContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpMethod org.springframework.http.client.HttpMethod ( ) { return HttpMethod . resolve ( this . org.springframework.http.client.HttpUriRequest . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . org.springframework.http.client.HttpUriRequest . getURI ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.http.client.HttpContext org.springframework.http.client.HttpContext ( ) { return this . org.springframework.http.client.HttpContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> < ClientHttpResponse > org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> ( HttpHeaders org.springframework.http.client.HttpHeaders , byte [] byte[] )			throws java.io.IOException { HttpComponentsClientHttpRequest . addHeaders ( this . org.springframework.http.client.HttpUriRequest , org.springframework.http.client.HttpHeaders ) ; if ( this . org.springframework.http.client.HttpUriRequest instanceof HttpEntityEnclosingRequest ) { HttpEntityEnclosingRequest org.springframework.http.client.HttpEntityEnclosingRequest = ( HttpEntityEnclosingRequest ) this . org.springframework.http.client.HttpUriRequest ; HttpEntity org.springframework.http.client.HttpEntity = new NByteArrayEntity ( byte[] ) ; org.springframework.http.client.HttpEntityEnclosingRequest . setEntity ( org.springframework.http.client.HttpEntity ) ; } org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback = new org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback ( this . org.springframework.http.client.HttpUriRequest ) ; java.util.concurrent.Future<org.springframework.http.client.HttpResponse> < HttpResponse > java.util.concurrent.Future<org.springframework.http.client.HttpResponse> = this . org.springframework.http.client.HttpAsyncClient . execute ( this . org.springframework.http.client.HttpUriRequest , this . org.springframework.http.client.HttpContext , org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback ) ; return new org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.ClientHttpResponseFuture ( java.util.concurrent.Future<org.springframework.http.client.HttpResponse> , org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpUriRequest org.springframework.http.client.HttpUriRequest ) { this . org.springframework.http.client.HttpUriRequest = org.springframework.http.client.HttpUriRequest ; }  <METHOD_END>
<METHOD_START> public void void ( ListenableFutureCallback < ? super ClientHttpResponse > org.springframework.http.client.ListenableFutureCallback<? super org.springframework.http.client.ClientHttpResponse> ) { this . org.springframework.http.client.ListenableFutureCallbackRegistry<org.springframework.http.client.ClientHttpResponse> . addCallback ( org.springframework.http.client.ListenableFutureCallback<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( SuccessCallback < ? super ClientHttpResponse > org.springframework.http.client.SuccessCallback<? super org.springframework.http.client.ClientHttpResponse> ) { this . org.springframework.http.client.ListenableFutureCallbackRegistry<org.springframework.http.client.ClientHttpResponse> . addSuccessCallback ( org.springframework.http.client.SuccessCallback<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( FailureCallback org.springframework.http.client.FailureCallback ) { this . org.springframework.http.client.ListenableFutureCallbackRegistry<org.springframework.http.client.ClientHttpResponse> . addFailureCallback ( org.springframework.http.client.FailureCallback ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpResponse org.springframework.http.client.HttpResponse ) { this . org.springframework.http.client.ListenableFutureCallbackRegistry<org.springframework.http.client.ClientHttpResponse> . success ( new HttpComponentsAsyncClientHttpResponse ( org.springframework.http.client.HttpResponse ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Exception java.lang.Exception ) { this . org.springframework.http.client.ListenableFutureCallbackRegistry<org.springframework.http.client.ClientHttpResponse> . failure ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.http.client.HttpUriRequest . abort ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.concurrent.Future<org.springframework.http.client.HttpResponse> < HttpResponse > java.util.concurrent.Future<org.springframework.http.client.HttpResponse> , org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback ) { super( java.util.concurrent.Future<org.springframework.http.client.HttpResponse> ); this . org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback = org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpResponse org.springframework.http.client.HttpResponse ) { return new HttpComponentsAsyncClientHttpResponse ( org.springframework.http.client.HttpResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ListenableFutureCallback < ? super ClientHttpResponse > org.springframework.http.client.ListenableFutureCallback<? super org.springframework.http.client.ClientHttpResponse> ) { this . org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback . void ( org.springframework.http.client.ListenableFutureCallback<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SuccessCallback < ? super ClientHttpResponse > org.springframework.http.client.SuccessCallback<? super org.springframework.http.client.ClientHttpResponse> , FailureCallback org.springframework.http.client.FailureCallback ) { this . org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback . void ( org.springframework.http.client.SuccessCallback<> ) ; this . org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.HttpResponseFutureCallback . void ( org.springframework.http.client.FailureCallback ) ; }  <METHOD_END>
