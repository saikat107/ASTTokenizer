<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.function.config.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.gemfire.function.config.BeansException { void ( java.lang.Object ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { java.lang.reflect.Method [] java.lang.reflect.Method[] = ReflectionUtils . getAllDeclaredMethods ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { GemfireFunction org.springframework.data.gemfire.function.config.GemfireFunction = AnnotationUtils . getAnnotation ( java.lang.reflect.Method , GemfireFunction .class ) ; if ( org.springframework.data.gemfire.function.config.GemfireFunction != null ) { Assert . isTrue ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) , STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING + java.lang.String + STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = AnnotationUtils . getAnnotationAttributes ( org.springframework.data.gemfire.function.config.GemfireFunction , false , true ) ; GemfireFunctionUtils . registerFunctionForPojoMethod ( java.lang.Object , java.lang.reflect.Method , java.util.Map<java.lang.String,java.lang.Object> , false ) ; } } }  <METHOD_END>
