<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { PathVariable org.springframework.web.servlet.mvc.method.annotation.PathVariable = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( PathVariable .class ) ; return ( org.springframework.web.servlet.mvc.method.annotation.PathVariable != null && ( java.util.Map .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) ) && ! StringUtils . hasText ( org.springframework.web.servlet.mvc.method.annotation.PathVariable . value ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) throws java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , RequestAttributes . SCOPE_REQUEST ) ; if ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.String> ) ) { return new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( java.util.Map<java.lang.String,java.lang.String> ) ; } else { return java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ; } }  <METHOD_END>
