<METHOD_START> public void ( LockRegistry org.springframework.integration.util.LockRegistry , java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; this . org.springframework.integration.util.LockRegistry = org.springframework.integration.util.LockRegistry ; }  <METHOD_END>
<METHOD_START> public final void void ( ) java.io.IOException { java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . org.springframework.integration.util.LockRegistry . obtain ( this . java.lang.Object ) ; try { java.util.concurrent.locks.Lock . void ( ) ; try { this . void ( ) ; } finally { java.util.concurrent.locks.Lock . void ( ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new MessagingException ( STRING , java.lang.InterruptedException ) ; } }  <METHOD_END>
<METHOD_START> protected abstract void void ( ) java.io.IOException ;  <METHOD_END>
