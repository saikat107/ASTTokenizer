<METHOD_START> @ java.lang.Override public void void ( java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> , ServletContext org.springframework.web.ServletContext )			throws org.springframework.web.ServletException { java.util.List<org.springframework.web.WebApplicationInitializer> < WebApplicationInitializer > java.util.List<org.springframework.web.WebApplicationInitializer> = new java.util.LinkedList<org.springframework.web.WebApplicationInitializer> <> ( ) ; if ( java.util.Set<java.lang.Class<?>> != null ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ) { if ( ! java.lang.Class<> . boolean ( ) && ! java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) && WebApplicationInitializer .class . boolean ( java.lang.Class<> ) ) { try { java.util.List<org.springframework.web.WebApplicationInitializer> . add ( ( WebApplicationInitializer ) ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ServletException ( STRING , java.lang.Throwable ) ; } } } } if ( java.util.List<org.springframework.web.WebApplicationInitializer> . isEmpty ( ) ) { org.springframework.web.ServletContext . log ( STRING ) ; return; } org.springframework.web.ServletContext . log ( java.util.List<org.springframework.web.WebApplicationInitializer> . size ( ) + STRING ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.web.WebApplicationInitializer> ) ; for ( WebApplicationInitializer org.springframework.web.WebApplicationInitializer : java.util.List<org.springframework.web.WebApplicationInitializer> ) { org.springframework.web.WebApplicationInitializer . onStartup ( org.springframework.web.ServletContext ) ; } }  <METHOD_END>
