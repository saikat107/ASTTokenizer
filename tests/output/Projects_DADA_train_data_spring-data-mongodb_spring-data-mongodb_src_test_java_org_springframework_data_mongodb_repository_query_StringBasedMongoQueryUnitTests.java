<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.mongodb.repository.query.MongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.repository.query.DbRefResolver , new MongoMappingContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = new BasicQuery ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , Address .class ) ; Address org.springframework.data.mongodb.repository.query.Address = new Address ( STRING , STRING , STRING ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , org.springframework.data.mongodb.repository.query.Address ) ; Document org.springframework.data.mongodb.repository.query.Document = new Document ( ) ; org.springframework.data.mongodb.repository.query.MongoConverter . write ( org.springframework.data.mongodb.repository.query.Address , org.springframework.data.mongodb.repository.query.Document ) ; org.springframework.data.mongodb.repository.query.Document . remove ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; Document org.springframework.data.mongodb.repository.query.Document = new Document ( STRING , org.springframework.data.mongodb.repository.query.Document ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = new BasicQuery ( org.springframework.data.mongodb.repository.query.Document ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) . toJson ( ) , is ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class , Address .class ) ; Address org.springframework.data.mongodb.repository.query.Address = new Address ( STRING , STRING , STRING ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , org.springframework.data.mongodb.repository.query.Address ) ; Document org.springframework.data.mongodb.repository.query.Document = new Document ( ) ; org.springframework.data.mongodb.repository.query.MongoConverter . write ( org.springframework.data.mongodb.repository.query.Address , org.springframework.data.mongodb.repository.query.Document ) ; org.springframework.data.mongodb.repository.query.Document . remove ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) ; Document org.springframework.data.mongodb.repository.query.Document = new Document ( STRING , STRING ) ; org.springframework.data.mongodb.repository.query.Document . append ( STRING , org.springframework.data.mongodb.repository.query.Document ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) . toJson ( ) , is ( org.springframework.data.mongodb.repository.query.Document . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , Address .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , new java.lang.Object [] { null } ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) . get ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new BasicQuery ( STRING ) . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; assertThat ( org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . isDeleteQuery ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = new ConvertingParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , new Document ( STRING , STRING ) . append ( STRING , STRING ) , java.util.Collections . java.util.Map<java.lang.String,java.lang.Integer> ( STRING , NUMBER ) ) ) ; StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , Document .class , java.util.Map .class ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new BasicQuery ( STRING ) . getQueryObject ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getFieldsObject ( ) , is ( new BasicQuery ( null , STRING ) . getFieldsObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) . toJson ( ) , is ( new BasicQuery ( STRING ) . getQueryObject ( ) . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , NUMBER , NUMBER , NUMBER , NUMBER ) ; StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , int .class , int .class , int .class , int .class ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new BasicQuery ( STRING ) . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = new BasicQuery ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = new BasicQuery ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = new BasicQuery ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; Document org.springframework.data.mongodb.repository.query.Document = DocumentTestUtils . getTypedValue ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , STRING , Document .class ) ; assertThat ( org.springframework.data.mongodb.repository.query.Document , is ( new Document ( STRING , STRING ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = new BasicQuery ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , true , STRING , STRING ) ; StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , boolean .class , java.lang.String .class ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = new BasicQuery ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , true , STRING , STRING ) ; StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , boolean .class , java.lang.String .class , java.lang.String .class ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = new BasicQuery ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = STRING . byte[] ( STRING ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , byte[] ) ; StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , byte [] .class ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = new BasicQuery ( STRING + javax.xml.bind.DatatypeConverter . java.lang.String ( byte[] ) + STRING + BSON . B_GENERAL + STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) . toJson ( ) , is ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; assertThat ( org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . isExistsQuery ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , NUMBER ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( new Document ( STRING , NUMBER ) ) ; java.util.List<java.lang.Object> . boolean ( new Document ( STRING , STRING ) ) ; Document org.springframework.data.mongodb.repository.query.Document = new Document ( STRING , java.util.List<java.lang.Object> ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = new BasicQuery ( org.springframework.data.mongodb.repository.query.Document ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , STRING ) ; StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class , java.lang.String .class ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( not ( new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( not ( new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , Document .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , new Document ( STRING , STRING ) ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( STRING , new BsonRegularExpression ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( STRING , new BsonRegularExpression ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.String .class , java.lang.String .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , STRING ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.Object .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , NUMBER ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( STRING , java.lang.Object .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = StubParameterAccessor . getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , new java.lang.Object [] { null } ) ; org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.repository.query.StringBasedMongoQuery . createQuery ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( new Document ( STRING , null ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.StringBasedMongoQuery org.springframework.data.mongodb.repository.query.StringBasedMongoQuery ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.StringBasedMongoQueryUnitTests.SampleRepository .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; ProjectionFactory org.springframework.data.mongodb.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = new MongoQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.mongodb.repository.query.StringBasedMongoQueryUnitTests.SampleRepository .class ) , org.springframework.data.mongodb.repository.query.ProjectionFactory , org.springframework.data.mongodb.repository.query.MongoConverter . getMappingContext ( ) ) ; return new StringBasedMongoQuery ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.SpelExpressionParser , DefaultEvaluationContextProvider . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( byte [] byte[] );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( Address org.springframework.data.mongodb.repository.query.Address );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String , Address org.springframework.data.mongodb.repository.query.Address );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( )  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , delete = true ) void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , delete = true , count = true ) void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , fields = STRING ) org.springframework.data.mongodb.repository.query.Document org.springframework.data.mongodb.repository.query.Document ( Document org.springframework.data.mongodb.repository.query.Document , java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Document> < Document > java.util.List<org.springframework.data.mongodb.repository.query.Document> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Document> < Document > java.util.List<org.springframework.data.mongodb.repository.query.Document> ( int int , int int , int int , int int );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.lang.Object java.lang.Object ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( boolean boolean , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( boolean boolean , java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING ) boolean boolean ( int int );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , exists = true ) boolean boolean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( Document org.springframework.data.mongodb.repository.query.Document );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( java.lang.Object java.lang.Object );  <METHOD_END>
