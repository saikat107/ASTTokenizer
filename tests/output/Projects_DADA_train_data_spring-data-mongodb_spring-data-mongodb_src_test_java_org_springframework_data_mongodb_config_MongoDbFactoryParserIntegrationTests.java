<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.data.mongodb.config.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.data.mongodb.config.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleMongoDbFactory org.springframework.data.mongodb.config.SimpleMongoDbFactory = new SimpleMongoDbFactory ( new MongoClient ( STRING ) , STRING ) ; org.springframework.data.mongodb.config.SimpleMongoDbFactory . setWriteConcern ( WriteConcern . SAFE ) ; org.springframework.data.mongodb.config.SimpleMongoDbFactory . getDb ( ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.data.mongodb.config.SimpleMongoDbFactory , STRING ) , is ( ( java.lang.Object ) WriteConcern . SAFE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.data.mongodb.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; void ( org.springframework.data.mongodb.config.ClassPathXmlApplicationContext , WriteConcern . SAFE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.data.mongodb.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; void ( org.springframework.data.mongodb.config.ClassPathXmlApplicationContext , new WriteConcern ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.data.mongodb.config.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; MongoDbFactory org.springframework.data.mongodb.config.MongoDbFactory = org.springframework.data.mongodb.config.AbstractApplicationContext . getBean ( STRING , MongoDbFactory .class ) ; MongoDatabase org.springframework.data.mongodb.config.MongoDatabase = org.springframework.data.mongodb.config.MongoDbFactory . getDb ( ) ; assertThat ( org.springframework.data.mongodb.config.MongoDatabase . getWriteConcern ( ) , is ( WriteConcern . REPLICAS_SAFE ) ) ; org.springframework.data.mongodb.config.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.lang.String java.lang.String = new java.lang.String ( STRING ) ; java.lang.String java.lang.String = new java.lang.String ( STRING ) ; WriteConcern org.springframework.data.mongodb.config.WriteConcern = new WriteConcern ( java.lang.String ) ; WriteConcern org.springframework.data.mongodb.config.WriteConcern = new WriteConcern ( java.lang.String ) ; assertThat ( org.springframework.data.mongodb.config.WriteConcern , is ( org.springframework.data.mongodb.config.WriteConcern ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.config.BeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; org.springframework.data.mongodb.config.DefaultListableBeanFactory . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.config.BeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; BeanDefinition org.springframework.data.mongodb.config.BeanDefinition = org.springframework.data.mongodb.config.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; ConstructorArgumentValues org.springframework.data.mongodb.config.ConstructorArgumentValues = org.springframework.data.mongodb.config.BeanDefinition . getConstructorArgumentValues ( ) ; assertThat ( org.springframework.data.mongodb.config.ConstructorArgumentValues . getArgumentCount ( ) , is ( NUMBER ) ) ; ValueHolder org.springframework.data.mongodb.config.ValueHolder = org.springframework.data.mongodb.config.ConstructorArgumentValues . getArgumentValue ( NUMBER , MongoURI .class ) ; assertThat ( org.springframework.data.mongodb.config.ValueHolder , is ( notNullValue ( ) ) ) ; MongoDbFactory org.springframework.data.mongodb.config.MongoDbFactory = org.springframework.data.mongodb.config.DefaultListableBeanFactory . getBean ( STRING , MongoDbFactory .class ) ; MongoDatabase org.springframework.data.mongodb.config.MongoDatabase = org.springframework.data.mongodb.config.MongoDbFactory . getDb ( ) ; assertThat ( org.springframework.data.mongodb.config.MongoDatabase . getName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.config.BeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; BeanDefinition org.springframework.data.mongodb.config.BeanDefinition = org.springframework.data.mongodb.config.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; ConstructorArgumentValues org.springframework.data.mongodb.config.ConstructorArgumentValues = org.springframework.data.mongodb.config.BeanDefinition . getConstructorArgumentValues ( ) ; assertThat ( org.springframework.data.mongodb.config.ConstructorArgumentValues . getArgumentCount ( ) , is ( NUMBER ) ) ; ValueHolder org.springframework.data.mongodb.config.ValueHolder = org.springframework.data.mongodb.config.ConstructorArgumentValues . getArgumentValue ( NUMBER , MongoClientURI .class ) ; assertThat ( org.springframework.data.mongodb.config.ValueHolder , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.config.BeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; BeanDefinition org.springframework.data.mongodb.config.BeanDefinition = org.springframework.data.mongodb.config.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; ConstructorArgumentValues org.springframework.data.mongodb.config.ConstructorArgumentValues = org.springframework.data.mongodb.config.BeanDefinition . getConstructorArgumentValues ( ) ; assertThat ( org.springframework.data.mongodb.config.ConstructorArgumentValues . getArgumentCount ( ) , is ( NUMBER ) ) ; ValueHolder org.springframework.data.mongodb.config.ValueHolder = org.springframework.data.mongodb.config.ConstructorArgumentValues . getArgumentValue ( NUMBER , MongoClientURI .class ) ; assertThat ( org.springframework.data.mongodb.config.ValueHolder , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.config.BeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; BeanDefinition org.springframework.data.mongodb.config.BeanDefinition = org.springframework.data.mongodb.config.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; ConstructorArgumentValues org.springframework.data.mongodb.config.ConstructorArgumentValues = org.springframework.data.mongodb.config.BeanDefinition . getConstructorArgumentValues ( ) ; assertThat ( org.springframework.data.mongodb.config.ConstructorArgumentValues . getArgumentCount ( ) , is ( NUMBER ) ) ; ValueHolder org.springframework.data.mongodb.config.ValueHolder = org.springframework.data.mongodb.config.ConstructorArgumentValues . getArgumentValue ( NUMBER , MongoClientURI .class ) ; assertThat ( org.springframework.data.mongodb.config.ValueHolder , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ClassPathXmlApplicationContext org.springframework.data.mongodb.config.ClassPathXmlApplicationContext , WriteConcern org.springframework.data.mongodb.config.WriteConcern ) { SimpleMongoDbFactory org.springframework.data.mongodb.config.SimpleMongoDbFactory = org.springframework.data.mongodb.config.ClassPathXmlApplicationContext . getBean ( STRING , SimpleMongoDbFactory .class ) ; MongoDatabase org.springframework.data.mongodb.config.MongoDatabase = org.springframework.data.mongodb.config.SimpleMongoDbFactory . getDb ( ) ; assertThat ( org.springframework.data.mongodb.config.MongoDatabase . getName ( ) , is ( STRING ) ) ; WriteConcern org.springframework.data.mongodb.config.WriteConcern = ( WriteConcern ) ReflectionTestUtils . getField ( org.springframework.data.mongodb.config.SimpleMongoDbFactory , STRING ) ; MyWriteConcern org.springframework.data.mongodb.config.MyWriteConcern = new MyWriteConcern ( org.springframework.data.mongodb.config.WriteConcern ) ; MyWriteConcern org.springframework.data.mongodb.config.MyWriteConcern = new MyWriteConcern ( org.springframework.data.mongodb.config.MongoDatabase . getWriteConcern ( ) ) ; MyWriteConcern org.springframework.data.mongodb.config.MyWriteConcern = new MyWriteConcern ( org.springframework.data.mongodb.config.WriteConcern ) ; assertThat ( org.springframework.data.mongodb.config.MyWriteConcern , is ( org.springframework.data.mongodb.config.MyWriteConcern ) ) ; assertThat ( org.springframework.data.mongodb.config.MyWriteConcern , is ( org.springframework.data.mongodb.config.MyWriteConcern ) ) ; assertThat ( org.springframework.data.mongodb.config.MyWriteConcern , is ( org.springframework.data.mongodb.config.MyWriteConcern ) ) ; }  <METHOD_END>
