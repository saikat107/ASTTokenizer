<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; RegionFactoryBean org.springframework.data.gemfire.config.xml.RegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , RegionFactoryBean .class ) ; assertTrue ( org.springframework.data.gemfire.config.xml.RegionFactoryBean instanceof PartitionedRegionFactoryBean ) ; assertEquals ( null , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; assertEquals ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionAttributes ) ; assertTrue ( org.springframework.data.gemfire.config.xml.RegionAttributes . getStatisticsEnabled ( ) ) ; PartitionAttributes org.springframework.data.gemfire.config.xml.PartitionAttributes = org.springframework.data.gemfire.config.xml.RegionAttributes . getPartitionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.PartitionAttributes ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.PartitionAttributes . getRedundantCopies ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.PartitionAttributes . getTotalNumBuckets ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionResolver ( ) instanceof SimplePartitionResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; RegionFactoryBean org.springframework.data.gemfire.config.xml.RegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , RegionFactoryBean .class ) ; CacheListener [] org.springframework.data.gemfire.config.xml.CacheListener[] = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; assertFalse ( ObjectUtils . isEmpty ( org.springframework.data.gemfire.config.xml.CacheListener[] ) ) ; assertEquals ( NUMBER , cacheListeners . length ) ; assertSame ( org.springframework.data.gemfire.config.xml.CacheListener[] [ NUMBER ] , org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.CacheListener[] [ NUMBER ] instanceof SimpleCacheListener ) ; assertSame ( org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; assertSame ( org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionAttributes ) ; PartitionAttributes org.springframework.data.gemfire.config.xml.PartitionAttributes = org.springframework.data.gemfire.config.xml.RegionAttributes . getPartitionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.PartitionAttributes ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.PartitionAttributes . getLocalMaxMemory ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionListeners ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionListeners ( ) . length ) ; assertTrue ( org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionListeners ( ) [ NUMBER ] instanceof org.springframework.data.gemfire.config.xml.PartitionedRegionNamespaceTest.TestPartitionListener ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCompressor ( ) instanceof org.springframework.data.gemfire.config.xml.PartitionedRegionNamespaceTest.TestCompressor ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCompressor ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { RegionFactoryBean org.springframework.data.gemfire.config.xml.RegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , RegionFactoryBean .class ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.RegionFactoryBean ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionAttributes ) ; PartitionAttributes org.springframework.data.gemfire.config.xml.PartitionAttributes = org.springframework.data.gemfire.config.xml.RegionAttributes . getPartitionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.PartitionAttributes ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.PartitionAttributes . getFixedPartitionAttributes ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.PartitionAttributes . getFixedPartitionAttributes ( ) . size ( ) ) ; FixedPartitionAttributes org.springframework.data.gemfire.config.xml.FixedPartitionAttributes = ( FixedPartitionAttributes ) org.springframework.data.gemfire.config.xml.PartitionAttributes . getFixedPartitionAttributes ( ) . get ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.FixedPartitionAttributes . getNumBuckets ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.FixedPartitionAttributes . isPrimary ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; PartitionAttributes org.springframework.data.gemfire.config.xml.PartitionAttributes = org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getPartitionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.PartitionAttributes ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionListeners ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionListeners ( ) . length ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING ) ; for ( PartitionListener org.springframework.data.gemfire.config.xml.PartitionListener : org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionListeners ( ) ) { assertTrue ( org.springframework.data.gemfire.config.xml.PartitionListener instanceof org.springframework.data.gemfire.config.xml.PartitionedRegionNamespaceTest.TestPartitionListener ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( org.springframework.data.gemfire.config.xml.PartitionListener . toString ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; PartitionAttributes org.springframework.data.gemfire.config.xml.PartitionAttributes = org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getPartitionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.PartitionAttributes ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionListeners ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionListeners ( ) . length ) ; assertTrue ( org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionListeners ( ) [ NUMBER ] instanceof org.springframework.data.gemfire.config.xml.PartitionedRegionNamespaceTest.TestPartitionListener ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.PartitionAttributes . getPartitionListeners ( ) [ NUMBER ] . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( final byte [] byte[] ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( final byte [] byte[] ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
