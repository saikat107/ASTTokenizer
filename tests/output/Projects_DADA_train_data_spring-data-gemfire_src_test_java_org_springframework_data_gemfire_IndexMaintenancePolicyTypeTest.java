<METHOD_START> @ Test public void void ( ) { assertSame ( IndexMaintenancePolicyType . SYNCHRONOUS , IndexMaintenancePolicyType . DEFAULT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( IndexMaintenancePolicyType . SYNCHRONOUS , IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( IndexMaintenancePolicyType . SYNCHRONOUS , IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( IndexMaintenancePolicyType . SYNCHRONOUS , IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( IndexMaintenancePolicyType . SYNCHRONOUS , IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( IndexMaintenancePolicyType . ASYNCHRONOUS , IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( IndexMaintenancePolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( IndexMaintenancePolicyType . valueOfIgnoreCase ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AttributesFactory org.springframework.data.gemfire.AttributesFactory = mock ( AttributesFactory .class , STRING ) ; IndexMaintenancePolicyType . ASYNCHRONOUS . setIndexMaintenance ( org.springframework.data.gemfire.AttributesFactory ) ; verify ( org.springframework.data.gemfire.AttributesFactory ) . setIndexMaintenanceSynchronous ( eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AttributesFactory org.springframework.data.gemfire.AttributesFactory = mock ( AttributesFactory .class , STRING ) ; IndexMaintenancePolicyType . SYNCHRONOUS . setIndexMaintenance ( org.springframework.data.gemfire.AttributesFactory ) ; verify ( org.springframework.data.gemfire.AttributesFactory ) . setIndexMaintenanceSynchronous ( eq ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = mock ( RegionFactory .class , STRING ) ; IndexMaintenancePolicyType . ASYNCHRONOUS . setIndexMaintenance ( org.springframework.data.gemfire.RegionFactory ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setIndexMaintenanceSynchronous ( eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RegionFactory org.springframework.data.gemfire.RegionFactory = mock ( RegionFactory .class , STRING ) ; IndexMaintenancePolicyType . SYNCHRONOUS . setIndexMaintenance ( org.springframework.data.gemfire.RegionFactory ) ; verify ( org.springframework.data.gemfire.RegionFactory ) . setIndexMaintenanceSynchronous ( eq ( true ) ) ; }  <METHOD_END>
