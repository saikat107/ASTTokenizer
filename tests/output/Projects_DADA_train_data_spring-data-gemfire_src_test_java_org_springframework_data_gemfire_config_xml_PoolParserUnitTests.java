<METHOD_START> @ Before public void void ( ) { PoolParser . INFRASTRUCTURE_COMPONENTS_REGISTERED . set ( true ) ; org.springframework.data.gemfire.config.xml.PoolParser = new PoolParser ( ) { @ java.lang.Override org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ( ParserContext org.springframework.data.gemfire.config.xml.ParserContext ) { return org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ( ParserContext org.springframework.data.gemfire.config.xml.ParserContext ) { return org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition , java.lang.String java.lang.String , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getBeanClassName ( ) ) . isEqualTo ( ConnectionEndpoint .class . java.lang.String ( ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getConstructorArgumentValues ( ) . getArgumentCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getConstructorArgumentValues ( ) . getArgumentValue ( NUMBER , java.lang.String .class ) . getValue ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getConstructorArgumentValues ( ) . getArgumentValue ( NUMBER , java.lang.String .class ) . getValue ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getPropertyValues ( ) . contains ( java.lang.String ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getPropertyValues ( ) . contains ( java.lang.String ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getPropertyValues ( ) . getPropertyValue ( java.lang.String ) . getValue ( ) ) . isEqualTo ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String ( java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( STRING , java.lang.String , BeanDefinitionReaderUtils . GENERATED_BEAN_NAME_SEPARATOR , NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> < java.lang.Void > org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { return new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( InvocationOnMock org.springframework.data.gemfire.config.xml.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.config.xml.InvocationOnMock . getArgument ( NUMBER ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = org.springframework.data.gemfire.config.xml.InvocationOnMock . getArgument ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getBeanClassName ( ) ) . isEqualTo ( MethodInvokingBean .class . java.lang.String ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( java.lang.String ( org.springframework.data.gemfire.config.xml.BeanDefinition . getBeanClassName ( ) ) ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , new RuntimeBeanReference ( java.lang.String ) ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , java.lang.String ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = java.lang.Object ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getBeanClassName ( ) ) . isEqualTo ( ConnectionEndpointList .class . java.lang.String ( ) ) ; ConstructorArgumentValues org.springframework.data.gemfire.config.xml.ConstructorArgumentValues = org.springframework.data.gemfire.config.xml.BeanDefinition . getConstructorArgumentValues ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentValue ( NUMBER , java.lang.Integer .class ) . getValue ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentValue ( NUMBER , java.lang.String .class ) . getValue ( ) ) . isEqualTo ( java.lang.String ) ; return null ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( InvocationOnMock org.springframework.data.gemfire.config.xml.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.config.xml.InvocationOnMock . getArgument ( NUMBER ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = org.springframework.data.gemfire.config.xml.InvocationOnMock . getArgument ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getBeanClassName ( ) ) . isEqualTo ( MethodInvokingBean .class . java.lang.String ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( java.lang.String ( org.springframework.data.gemfire.config.xml.BeanDefinition . getBeanClassName ( ) ) ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , new RuntimeBeanReference ( java.lang.String ) ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , java.lang.String ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = java.lang.Object ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getBeanClassName ( ) ) . isEqualTo ( ConnectionEndpointList .class . java.lang.String ( ) ) ; ConstructorArgumentValues org.springframework.data.gemfire.config.xml.ConstructorArgumentValues = org.springframework.data.gemfire.config.xml.BeanDefinition . getConstructorArgumentValues ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentValue ( NUMBER , java.lang.Integer .class ) . getValue ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentValue ( NUMBER , java.lang.String .class ) . getValue ( ) ) . isEqualTo ( java.lang.String ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < T > T T ( BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition , java.lang.String java.lang.String ) { return ( T ) org.springframework.data.gemfire.config.xml.BeanDefinition . getPropertyValues ( ) . getPropertyValue ( java.lang.String ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . getBeanClass ( null ) ) . isEqualTo ( PoolFactoryBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class , STRING ) ; org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class , STRING ) ; org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class , STRING ) ; org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class , STRING ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = mock ( org.w3c.dom.NodeList .class ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . LOCATORS_ATTRIBUTE_NAME ) ) . thenReturn ( null ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . SERVERS_ATTRIBUTE_NAME ) ) . thenReturn ( null ) ; when ( org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ) . thenReturn ( org.w3c.dom.NodeList ) ; when ( org.w3c.dom.NodeList . int ( ) ) . thenReturn ( NUMBER ) ; when ( org.w3c.dom.NodeList . org.w3c.dom.Node ( eq ( NUMBER ) ) ) . thenReturn ( org.w3c.dom.Element ) ; when ( org.w3c.dom.NodeList . org.w3c.dom.Node ( eq ( NUMBER ) ) ) . thenReturn ( org.w3c.dom.Element ) ; when ( org.w3c.dom.NodeList . org.w3c.dom.Node ( eq ( NUMBER ) ) ) . thenReturn ( org.w3c.dom.Element ) ; when ( org.w3c.dom.Element . java.lang.String ( ) ) . thenReturn ( PoolParser . LOCATOR_ELEMENT_NAME ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . HOST_ATTRIBUTE_NAME ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . PORT_ATTRIBUTE_NAME ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( ) ) . thenReturn ( PoolParser . LOCATOR_ELEMENT_NAME ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . HOST_ATTRIBUTE_NAME ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . PORT_ATTRIBUTE_NAME ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( ) ) . thenReturn ( PoolParser . SERVER_ELEMENT_NAME ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . HOST_ATTRIBUTE_NAME ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . PORT_ATTRIBUTE_NAME ) ) . thenReturn ( STRING ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.data.gemfire.config.xml.PoolParser . getBeanClass ( org.w3c.dom.Element ) ) ; org.springframework.data.gemfire.config.xml.PoolParser . doParse ( org.w3c.dom.Element , null , org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; ManagedList < BeanDefinition > org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> = java.lang.Object ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> . size ( ) ) . isEqualTo ( NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> . get ( NUMBER ) , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> . get ( NUMBER ) , STRING , java.lang.String . java.lang.String ( PoolParser . DEFAULT_LOCATOR_PORT ) ) ; ManagedList < BeanDefinition > org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> = java.lang.Object ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> . size ( ) ) . isEqualTo ( NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> . get ( NUMBER ) , STRING , STRING ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getChildNodes ( ) ; verify ( org.w3c.dom.NodeList , times ( NUMBER ) ) . getLength ( ) ; verify ( org.w3c.dom.NodeList , times ( NUMBER ) ) . item ( eq ( NUMBER ) ) ; verify ( org.w3c.dom.NodeList , times ( NUMBER ) ) . item ( eq ( NUMBER ) ) ; verify ( org.w3c.dom.NodeList , times ( NUMBER ) ) . item ( eq ( NUMBER ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . LOCATORS_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . SERVERS_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getLocalName ( ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( PoolParser . HOST_ATTRIBUTE_NAME ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( PoolParser . PORT_ATTRIBUTE_NAME ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getLocalName ( ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( PoolParser . HOST_ATTRIBUTE_NAME ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( PoolParser . PORT_ATTRIBUTE_NAME ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getLocalName ( ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( PoolParser . HOST_ATTRIBUTE_NAME ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( PoolParser . PORT_ATTRIBUTE_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = mock ( org.w3c.dom.NodeList .class ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . LOCATORS_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . SERVERS_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ) . thenReturn ( org.w3c.dom.NodeList ) ; when ( org.w3c.dom.NodeList . int ( ) ) . thenReturn ( NUMBER ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.data.gemfire.config.xml.PoolParser . getBeanClass ( org.w3c.dom.Element ) ) ; org.springframework.data.gemfire.config.xml.PoolParser . doParse ( org.w3c.dom.Element , null , org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; PropertyValues org.springframework.data.gemfire.config.xml.PropertyValues = org.springframework.data.gemfire.config.xml.BeanDefinition . getPropertyValues ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.PropertyValues . contains ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.PropertyValues . contains ( STRING ) ) . isTrue ( ) ; ManagedList < BeanDefinition > org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> = java.lang.Object ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> . size ( ) ) . isEqualTo ( NUMBER ) ; void ( org.springframework.data.gemfire.config.xml.ManagedList<org.springframework.data.gemfire.config.xml.BeanDefinition> . get ( NUMBER ) , PoolParser . DEFAULT_HOST , java.lang.String . java.lang.String ( PoolParser . DEFAULT_SERVER_PORT ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getChildNodes ( ) ; verify ( org.w3c.dom.NodeList , times ( NUMBER ) ) . getLength ( ) ; verify ( org.w3c.dom.NodeList , never ( ) ) . item ( anyInt ( ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . LOCATORS_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . SERVERS_ATTRIBUTE_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = mock ( org.w3c.dom.NodeList .class ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . ID_ATTRIBUTE ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . LOCATORS_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . SERVERS_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ) . thenReturn ( org.w3c.dom.NodeList ) ; when ( org.w3c.dom.NodeList . int ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry . containsBeanDefinition ( anyString ( ) ) ) . thenReturn ( false ) ; Answer < java.lang.Void > org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> = org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> ( STRING , STRING , STRING , java.lang.String . java.lang.String ( PoolParser . DEFAULT_LOCATOR_PORT ) ) ; doAnswer ( org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> ) . when ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ) . registerBeanDefinition ( eq ( java.lang.String ( MethodInvokingBean .class ) ) , any ( BeanDefinition .class ) ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.data.gemfire.config.xml.PoolParser . getBeanClass ( org.w3c.dom.Element ) ) ; org.springframework.data.gemfire.config.xml.PoolParser . doParse ( org.w3c.dom.Element , null , org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . ID_ATTRIBUTE ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . LOCATORS_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . SERVERS_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getChildNodes ( ) ; verify ( org.w3c.dom.NodeList , times ( NUMBER ) ) . getLength ( ) ; verify ( org.w3c.dom.NodeList , never ( ) ) . item ( anyInt ( ) ) ; verify ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry , times ( NUMBER ) ) . containsBeanDefinition ( eq ( java.lang.String ( MethodInvokingBean .class ) ) ) ; verify ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry , times ( NUMBER ) ) . registerBeanDefinition ( eq ( java.lang.String ( MethodInvokingBean .class ) ) , isA ( BeanDefinition .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = mock ( org.w3c.dom.NodeList .class ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . ID_ATTRIBUTE ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . LOCATORS_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . SERVERS_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ) . thenReturn ( org.w3c.dom.NodeList ) ; when ( org.w3c.dom.NodeList . int ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry . containsBeanDefinition ( anyString ( ) ) ) . thenReturn ( false ) ; Answer < java.lang.Void > org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> = org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> ( STRING , STRING , STRING , java.lang.String . java.lang.String ( PoolParser . DEFAULT_SERVER_PORT ) ) ; doAnswer ( org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> ) . when ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ) . registerBeanDefinition ( eq ( java.lang.String ( MethodInvokingBean .class ) ) , any ( BeanDefinition .class ) ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.data.gemfire.config.xml.PoolParser . getBeanClass ( org.w3c.dom.Element ) ) ; org.springframework.data.gemfire.config.xml.PoolParser . doParse ( org.w3c.dom.Element , null , org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . ID_ATTRIBUTE ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . LOCATORS_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . SERVERS_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getChildNodes ( ) ; verify ( org.w3c.dom.NodeList , times ( NUMBER ) ) . getLength ( ) ; verify ( org.w3c.dom.NodeList , never ( ) ) . item ( anyInt ( ) ) ; verify ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry , times ( NUMBER ) ) . containsBeanDefinition ( eq ( java.lang.String ( MethodInvokingBean .class ) ) ) ; verify ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry , times ( NUMBER ) ) . registerBeanDefinition ( eq ( java.lang.String ( MethodInvokingBean .class ) ) , isA ( BeanDefinition .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.config.xml.PoolParser . buildConnection ( STRING , STRING , true ) , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . buildConnection ( STRING , STRING , true ) , STRING , java.lang.String . java.lang.String ( PoolParser . DEFAULT_SERVER_PORT ) ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . buildConnection ( STRING , STRING , true ) , PoolParser . DEFAULT_HOST , STRING ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . buildConnection ( STRING , STRING , true ) , PoolParser . DEFAULT_HOST , java.lang.String . java.lang.String ( PoolParser . DEFAULT_SERVER_PORT ) ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . buildConnection ( STRING , STRING , false ) , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . buildConnection ( STRING , null , false ) , STRING , java.lang.String . java.lang.String ( PoolParser . DEFAULT_LOCATOR_PORT ) ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . buildConnection ( null , STRING , false ) , PoolParser . DEFAULT_HOST , STRING ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . buildConnection ( STRING , STRING , false ) , PoolParser . DEFAULT_HOST , java.lang.String . java.lang.String ( PoolParser . DEFAULT_LOCATOR_PORT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = org.springframework.data.gemfire.config.xml.PoolParser . buildConnections ( STRING , false ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getBeanClassName ( ) ) . isEqualTo ( ConnectionEndpointList .class . java.lang.String ( ) ) ; ConstructorArgumentValues org.springframework.data.gemfire.config.xml.ConstructorArgumentValues = org.springframework.data.gemfire.config.xml.BeanDefinition . getConstructorArgumentValues ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentValue ( NUMBER , java.lang.Integer .class ) . getValue ( ) ) . isEqualTo ( java.lang.String . java.lang.String ( PoolParser . DEFAULT_LOCATOR_PORT ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentValue ( NUMBER , java.lang.String .class ) . getValue ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = org.springframework.data.gemfire.config.xml.PoolParser . buildConnections ( STRING , true ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getBeanClassName ( ) ) . isEqualTo ( ConnectionEndpointList .class . java.lang.String ( ) ) ; ConstructorArgumentValues org.springframework.data.gemfire.config.xml.ConstructorArgumentValues = org.springframework.data.gemfire.config.xml.BeanDefinition . getConstructorArgumentValues ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentCount ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentValue ( NUMBER , java.lang.Integer .class ) . getValue ( ) ) . isEqualTo ( java.lang.String . java.lang.String ( PoolParser . DEFAULT_SERVER_PORT ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.ConstructorArgumentValues . getArgumentValue ( NUMBER , java.lang.String .class ) . getValue ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . defaultHost ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . defaultHost ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . defaultHost ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . defaultHost ( null ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . defaultPort ( STRING , true ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . defaultPort ( STRING , false ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . defaultPort ( STRING , true ) ) . isEqualTo ( java.lang.String . java.lang.String ( PoolParser . DEFAULT_SERVER_PORT ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . defaultPort ( STRING , false ) ) . isEqualTo ( java.lang.String . java.lang.String ( PoolParser . DEFAULT_LOCATOR_PORT ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . defaultPort ( null , true ) ) . isEqualTo ( java.lang.String . java.lang.String ( PoolParser . DEFAULT_SERVER_PORT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . HOST_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . PORT_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . parseLocator ( org.w3c.dom.Element ) , STRING , STRING ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . HOST_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . PORT_ATTRIBUTE_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . HOST_ATTRIBUTE_NAME ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( PoolParser . PORT_ATTRIBUTE_NAME ) ) . thenReturn ( null ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . parseLocator ( org.w3c.dom.Element ) , PoolParser . DEFAULT_HOST , java.lang.String . java.lang.String ( PoolParser . DEFAULT_LOCATOR_PORT ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . HOST_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . PORT_ATTRIBUTE_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . ID_ATTRIBUTE ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . LOCATORS_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry . containsBeanDefinition ( anyString ( ) ) ) . thenReturn ( false ) ; Answer < java.lang.Void > org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> = org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> ( STRING , STRING , STRING , java.lang.String . java.lang.String ( PoolParser . DEFAULT_LOCATOR_PORT ) ) ; doAnswer ( org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> ) . when ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ) . registerBeanDefinition ( eq ( java.lang.String ( MethodInvokingBean .class ) ) , any ( BeanDefinition .class ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . parseLocators ( org.w3c.dom.Element , org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ) ) . isTrue ( ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . ID_ATTRIBUTE ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . LOCATORS_ATTRIBUTE_NAME ) ) ; verify ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry , times ( NUMBER ) ) . containsBeanDefinition ( eq ( java.lang.String ( MethodInvokingBean .class ) ) ) ; verify ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry , times ( NUMBER ) ) . registerBeanDefinition ( eq ( java.lang.String ( MethodInvokingBean .class ) ) , isA ( BeanDefinition .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . HOST_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . PORT_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . parseServer ( org.w3c.dom.Element ) , STRING , STRING ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . HOST_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . PORT_ATTRIBUTE_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . HOST_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . PORT_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; void ( org.springframework.data.gemfire.config.xml.PoolParser . parseServer ( org.w3c.dom.Element ) , PoolParser . DEFAULT_HOST , java.lang.String . java.lang.String ( PoolParser . DEFAULT_SERVER_PORT ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . HOST_ATTRIBUTE_NAME ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . PORT_ATTRIBUTE_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . ID_ATTRIBUTE ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( PoolParser . SERVERS_ATTRIBUTE_NAME ) ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry . containsBeanDefinition ( anyString ( ) ) ) . thenReturn ( false ) ; Answer < java.lang.Void > org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> = org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> ( STRING , STRING , STRING , java.lang.String . java.lang.String ( PoolParser . DEFAULT_SERVER_PORT ) ) ; doAnswer ( org.springframework.data.gemfire.config.xml.Answer<java.lang.Void> ) . when ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ) . registerBeanDefinition ( eq ( java.lang.String ( MethodInvokingBean .class ) ) , any ( BeanDefinition .class ) ) ; assertThat ( org.springframework.data.gemfire.config.xml.PoolParser . parseServers ( org.w3c.dom.Element , org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ) ) . isTrue ( ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . ID_ATTRIBUTE ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( PoolParser . SERVERS_ATTRIBUTE_NAME ) ) ; }  <METHOD_END>
