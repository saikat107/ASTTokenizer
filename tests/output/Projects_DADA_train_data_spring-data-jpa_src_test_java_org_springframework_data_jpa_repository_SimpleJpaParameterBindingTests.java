<METHOD_START> @ Test @ Ignore public void void ( ) { User org.springframework.data.jpa.repository.User = new User ( STRING , STRING , STRING ) ; org.springframework.data.jpa.repository.EntityManager . persist ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.EntityManager . flush ( ) ; CriteriaBuilder org.springframework.data.jpa.repository.CriteriaBuilder = org.springframework.data.jpa.repository.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < User > org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.CriteriaBuilder . createQuery ( User .class ) ; Root < User > org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> . from ( User .class ) ; ParameterExpression < java.lang.String [] > org.springframework.data.jpa.repository.ParameterExpression<java.lang.String[]> = org.springframework.data.jpa.repository.CriteriaBuilder . parameter ( java.lang.String [] .class ) ; org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> . where ( org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.User> . get ( STRING ) . in ( org.springframework.data.jpa.repository.ParameterExpression<java.lang.String[]> ) ) ; TypedQuery < User > org.springframework.data.jpa.repository.TypedQuery<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.EntityManager . createQuery ( org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> ) ; org.springframework.data.jpa.repository.TypedQuery<org.springframework.data.jpa.repository.User> . setParameter ( org.springframework.data.jpa.repository.ParameterExpression<java.lang.String[]> , new java.lang.String [] { STRING , STRING } ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.TypedQuery<org.springframework.data.jpa.repository.User> . getResultList ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . isEmpty ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { User org.springframework.data.jpa.repository.User = new User ( STRING , STRING , STRING ) ; org.springframework.data.jpa.repository.EntityManager . persist ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.EntityManager . flush ( ) ; CriteriaBuilder org.springframework.data.jpa.repository.CriteriaBuilder = org.springframework.data.jpa.repository.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < User > org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.CriteriaBuilder . createQuery ( User .class ) ; Root < User > org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> . from ( User .class ) ; ParameterExpression < java.util.Collection > org.springframework.data.jpa.repository.ParameterExpression<java.util.Collection> = org.springframework.data.jpa.repository.CriteriaBuilder . parameter ( java.util.Collection .class ) ; org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> . where ( org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.User> . get ( STRING ) . in ( org.springframework.data.jpa.repository.ParameterExpression<java.util.Collection> ) ) ; TypedQuery < User > org.springframework.data.jpa.repository.TypedQuery<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.EntityManager . createQuery ( org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> ) ; org.springframework.data.jpa.repository.TypedQuery<org.springframework.data.jpa.repository.User> . setParameter ( org.springframework.data.jpa.repository.ParameterExpression<java.util.Collection> , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.TypedQuery<org.springframework.data.jpa.repository.User> . getResultList ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . isEmpty ( ) , is ( false ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
