<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . exists ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . exists ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . exists ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . exists ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . exists ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . doesNotExist ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . doesNotExist ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . doesNotExist ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . doesNotExist ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . doesNotExist ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsNotEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsNotEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsNotEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsNotEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsNotEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsNotEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsNotEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsNotEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsNotEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsNotEmpty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValue ( java.lang.String , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValue ( java.lang.String , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValue ( java.lang.String , is ( NUMBER ) , java.lang.Double .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsString ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsString ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsString ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsNumber ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsNumber ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsBoolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsBoolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsArray ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsArray ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsArray ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsMap ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new JsonPathExpectationsHelper ( STRING ) . assertValueIsMap ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.util.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.util.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; new JsonPathExpectationsHelper ( java.lang.String ) . assertValueIsMap ( java.lang.String ) ; }  <METHOD_END>
