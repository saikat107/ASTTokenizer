<METHOD_START> public void ( ) { org.springframework.data.jpa.repository.cdi.Logger . info ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) < X > void void ( @ Observes ProcessBean < X > org.springframework.data.jpa.repository.cdi.ProcessBean<X> ) { Bean < X > org.springframework.data.jpa.repository.cdi.Bean<X> = org.springframework.data.jpa.repository.cdi.ProcessBean<X> . getBean ( ) ; for ( java.lang.reflect.Type java.lang.reflect.Type : org.springframework.data.jpa.repository.cdi.Bean<X> . getTypes ( ) ) { if ( java.lang.reflect.Type instanceof java.lang.Class<?> < ? > && EntityManager .class . boolean ( ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ) ) { java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = new java.util.HashSet<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > ( org.springframework.data.jpa.repository.cdi.Bean<X> . getQualifiers ( ) ) ; if ( org.springframework.data.jpa.repository.cdi.Bean<X> . isAlternative ( ) || ! java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager>> . containsKey ( java.util.Set<java.lang.annotation.Annotation> ) ) { org.springframework.data.jpa.repository.cdi.Logger . debug ( STRING , EntityManager .class . java.lang.String ( ) , java.util.Set<java.lang.annotation.Annotation> ) ; java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager>> . put ( java.util.Set<java.lang.annotation.Annotation> , ( Bean < EntityManager > ) org.springframework.data.jpa.repository.cdi.Bean<X> ) ; } } } }  <METHOD_END>
<METHOD_START> void void ( @ Observes AfterBeanDiscovery org.springframework.data.jpa.repository.cdi.AfterBeanDiscovery , BeanManager org.springframework.data.jpa.repository.cdi.BeanManager ) { for ( java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> < java.lang.Class<?> < ? > , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> : getRepositoryTypes ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> . java.lang.Class<?> ( ) ; java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> . java.util.Set<java.lang.annotation.Annotation> ( ) ; CdiRepositoryBean < ? > org.springframework.data.jpa.repository.cdi.CdiRepositoryBean<?> = org.springframework.data.jpa.repository.cdi.CdiRepositoryBean ( java.lang.Class<> , java.util.Set<java.lang.annotation.Annotation> , org.springframework.data.jpa.repository.cdi.BeanManager ) ; org.springframework.data.jpa.repository.cdi.Logger . info ( STRING , java.lang.Class<> . java.lang.String ( ) , java.util.Set<java.lang.annotation.Annotation> ) ; registerBean ( org.springframework.data.jpa.repository.cdi.CdiRepositoryBean<> ) ; org.springframework.data.jpa.repository.cdi.AfterBeanDiscovery . addBean ( org.springframework.data.jpa.repository.cdi.CdiRepositoryBean<> ) ; } }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.jpa.repository.cdi.CdiRepositoryBean<T> < T > org.springframework.data.jpa.repository.cdi.CdiRepositoryBean<T> ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , BeanManager org.springframework.data.jpa.repository.cdi.BeanManager ) { Bean < EntityManager > org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> = java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager>> . get ( java.util.Set<java.lang.annotation.Annotation> ) ; if ( org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> == null ) { throw new UnsatisfiedResolutionException ( java.lang.String . java.lang.String ( STRING , EntityManager .class . java.lang.String ( ) , java.util.Set<java.lang.annotation.Annotation> ) ) ; } return new JpaRepositoryBean < T > ( org.springframework.data.jpa.repository.cdi.BeanManager , org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> , java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> , java.util.Optional . java.util.Optional ( getCustomImplementationDetector ( ) ) ) ; }  <METHOD_END>
