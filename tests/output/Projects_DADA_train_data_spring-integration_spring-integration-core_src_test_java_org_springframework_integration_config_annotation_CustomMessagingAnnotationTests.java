<METHOD_START> @ Test public void void ( ) { assertNotNull ( this . org.springframework.integration.config.annotation.LoggingHandler ) ; Log org.springframework.integration.config.annotation.Log = spy ( TestUtils . getPropertyValue ( this . org.springframework.integration.config.annotation.LoggingHandler , STRING , Log .class ) ) ; given ( org.springframework.integration.config.annotation.Log . isWarnEnabled ( ) ) . willReturn ( true ) ; new DirectFieldAccessor ( this . org.springframework.integration.config.annotation.LoggingHandler ) . setPropertyValue ( STRING , org.springframework.integration.config.annotation.Log ) ; this . org.springframework.integration.config.annotation.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; ArgumentCaptor < java.lang.Object > org.springframework.integration.config.annotation.ArgumentCaptor<java.lang.Object> = ArgumentCaptor . forClass ( java.lang.Object .class ) ; verify ( org.springframework.integration.config.annotation.Log ) . warn ( org.springframework.integration.config.annotation.ArgumentCaptor<java.lang.Object> . capture ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.ArgumentCaptor<java.lang.Object> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = IntegrationContextUtils . MESSAGING_ANNOTATION_POSTPROCESSOR_NAME ) public static org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor ( ConfigurableListableBeanFactory org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) { MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . addMessagingAnnotationPostProcessor ( org.springframework.integration.config.annotation.CustomMessagingAnnotationTests.Logging .class , new org.springframework.integration.config.annotation.CustomMessagingAnnotationTests.LogAnnotationPostProcessor ( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) ) ; return org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor ; }  <METHOD_END>
<METHOD_START> @ org.springframework.integration.config.annotation.CustomMessagingAnnotationTests.Logging ( java.lang.String = STRING , LoggingHandler.Level = LoggingHandler . Level . WARN ) public java.lang.String java.lang.String ( Message < ? > org.springframework.integration.config.annotation.Message<?> ) { return org.springframework.integration.config.annotation.Message<> . getPayload ( ) + STRING + org.springframework.integration.config.annotation.Message<> . getHeaders ( ) . get ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( ConfigurableListableBeanFactory org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) { super( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.annotation.MessageHandler org.springframework.integration.config.annotation.MessageHandler ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> ) { LoggingHandler . LoggingHandler LoggingHandler.Level = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , LoggingHandler . LoggingHandler .class ) ; LoggingHandler org.springframework.integration.config.annotation.LoggingHandler = new LoggingHandler ( LoggingHandler.Level . name ( ) ) ; MethodInvokingMessageProcessor < java.lang.String > org.springframework.integration.config.annotation.MethodInvokingMessageProcessor<java.lang.String> = new MethodInvokingMessageProcessor <> ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.integration.config.annotation.LoggingHandler . setLogExpression ( new FunctionExpression <> ( org.springframework.integration.config.annotation.MethodInvokingMessageProcessor<java.lang.String> :: processMessage ) ) ; return org.springframework.integration.config.annotation.LoggingHandler ; }  <METHOD_END>
