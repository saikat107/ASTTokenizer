<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Cache org.springframework.data.gemfire.config.xml.Cache = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Cache .class ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Cache ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Cache . getDistributedSystem ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Cache . getDistributedSystem ( ) . getProperties ( ) ) ; assertTrue ( java.lang.Boolean . boolean ( org.springframework.data.gemfire.config.xml.Cache . getDistributedSystem ( ) . getProperties ( ) . getProperty ( STRING ) ) ) ; CacheFactoryBean org.springframework.data.gemfire.config.xml.CacheFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , CacheFactoryBean .class ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.CacheFactoryBean ) ) ; java.util.Properties java.util.Properties = org.springframework.data.gemfire.config.xml.CacheFactoryBean . getProperties ( ) ; assertNotNull ( java.util.Properties ) ; assertTrue ( java.util.Properties . boolean ( STRING ) ) ; assertTrue ( java.lang.Boolean . boolean ( java.util.Properties . java.lang.String ( STRING ) ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.CacheFactoryBean . getEnableAutoReconnect ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Cache org.springframework.data.gemfire.config.xml.Cache = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Cache .class ) ; assertTrue ( java.lang.Boolean . boolean ( org.springframework.data.gemfire.config.xml.Cache . getDistributedSystem ( ) . getProperties ( ) . getProperty ( STRING ) ) ) ; CacheFactoryBean org.springframework.data.gemfire.config.xml.CacheFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , CacheFactoryBean .class ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.CacheFactoryBean ) ) ; java.util.Properties java.util.Properties = org.springframework.data.gemfire.config.xml.CacheFactoryBean . getProperties ( ) ; assertNotNull ( java.util.Properties ) ; assertTrue ( java.util.Properties . boolean ( STRING ) ) ; assertTrue ( java.lang.Boolean . boolean ( java.util.Properties . java.lang.String ( STRING ) ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.CacheFactoryBean . getEnableAutoReconnect ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; CacheFactoryBean org.springframework.data.gemfire.config.xml.CacheFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , CacheFactoryBean .class ) ; Resource org.springframework.data.gemfire.config.xml.Resource = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.CacheFactoryBean ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Resource . getFilename ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; assertEquals ( org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.CacheFactoryBean ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.CacheFactoryBean ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.CacheFactoryBean ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.CacheFactoryBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.config.xml.Cache = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Cache .class ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Cache . getGatewayConflictResolver ( ) instanceof org.springframework.data.gemfire.config.xml.CacheNamespaceTest.TestGatewayConflictResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Cache org.springframework.data.gemfire.config.xml.Cache = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Cache .class ) ; assertTrue ( java.lang.Boolean . boolean ( org.springframework.data.gemfire.config.xml.Cache . getDistributedSystem ( ) . getProperties ( ) . getProperty ( STRING ) ) ) ; CacheFactoryBean org.springframework.data.gemfire.config.xml.CacheFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , CacheFactoryBean .class ) ; assertFalse ( org.springframework.data.gemfire.config.xml.CacheFactoryBean . getEnableAutoReconnect ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Cache org.springframework.data.gemfire.config.xml.Cache = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Cache .class ) ; assertFalse ( java.lang.Boolean . boolean ( org.springframework.data.gemfire.config.xml.Cache . getDistributedSystem ( ) . getProperties ( ) . getProperty ( STRING ) ) ) ; CacheFactoryBean org.springframework.data.gemfire.config.xml.CacheFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , CacheFactoryBean .class ) ; assertTrue ( org.springframework.data.gemfire.config.xml.CacheFactoryBean . getEnableAutoReconnect ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; CacheFactoryBean org.springframework.data.gemfire.config.xml.CacheFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , CacheFactoryBean .class ) ; java.lang.Float java.lang.Float = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.CacheFactoryBean ) ; java.lang.Float java.lang.Float = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.CacheFactoryBean ) ; assertEquals ( NUMBER , java.lang.Float , NUMBER ) ; assertEquals ( NUMBER , java.lang.Float , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; CacheFactoryBean org.springframework.data.gemfire.config.xml.CacheFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , CacheFactoryBean .class ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.data.gemfire.config.xml.CacheFactoryBean , STRING ) , is ( nullValue ( ) ) ) ; newBeanFactoryLocator ( ) . useBeanFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; ClientCacheFactoryBean org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , ClientCacheFactoryBean .class ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean ) ) ; java.util.Properties java.util.Properties = org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getProperties ( ) ; assertNotNull ( java.util.Properties ) ; assertTrue ( java.util.Properties . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; ClientCacheFactoryBean org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , ClientCacheFactoryBean .class ) ; Resource org.springframework.data.gemfire.config.xml.Resource = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Resource . getFilename ( ) ) ; java.util.Properties java.util.Properties = org.springframework.data.gemfire.config.xml.ClientCacheFactoryBean . getProperties ( ) ; assertNotNull ( java.util.Properties ) ; assertTrue ( java.util.Properties . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TimestampedEntryEvent org.springframework.data.gemfire.config.xml.TimestampedEntryEvent , GatewayConflictHelper org.springframework.data.gemfire.config.xml.GatewayConflictHelper ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
