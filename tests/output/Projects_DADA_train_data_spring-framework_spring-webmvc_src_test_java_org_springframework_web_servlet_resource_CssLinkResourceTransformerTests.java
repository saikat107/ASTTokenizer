<METHOD_START> @ Before public void void ( ) { ClassPathResource org.springframework.web.servlet.resource.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.CssLinkResourceTransformerTests> ( ) ) ; ResourceHttpRequestHandler org.springframework.web.servlet.resource.ResourceHttpRequestHandler = new ResourceHttpRequestHandler ( ) ; VersionResourceResolver org.springframework.web.servlet.resource.VersionResourceResolver = new VersionResourceResolver ( ) ; org.springframework.web.servlet.resource.VersionResourceResolver . setStrategyMap ( java.util.Collections . java.util.Map ( STRING , new ContentVersionStrategy ( ) ) ) ; PathResourceResolver org.springframework.web.servlet.resource.PathResourceResolver = new PathResourceResolver ( ) ; org.springframework.web.servlet.resource.PathResourceResolver . setAllowedLocations ( org.springframework.web.servlet.resource.ClassPathResource ) ; java.util.List<org.springframework.web.servlet.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.servlet.resource.ResourceResolver> = java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.VersionResourceResolver , org.springframework.web.servlet.resource.PathResourceResolver ) ; ResourceUrlProvider org.springframework.web.servlet.resource.ResourceUrlProvider = new ResourceUrlProvider ( ) ; org.springframework.web.servlet.resource.ResourceUrlProvider . setHandlerMap ( java.util.Collections . java.util.Map ( STRING , org.springframework.web.servlet.resource.ResourceHttpRequestHandler ) ) ; CssLinkResourceTransformer org.springframework.web.servlet.resource.CssLinkResourceTransformer = new CssLinkResourceTransformer ( ) ; org.springframework.web.servlet.resource.CssLinkResourceTransformer . setResourceUrlProvider ( org.springframework.web.servlet.resource.ResourceUrlProvider ) ; java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> = java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.CssLinkResourceTransformer ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setResourceResolvers ( java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setResourceTransformers ( java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> ) ; org.springframework.web.servlet.resource.ResourceHttpRequestHandler . setLocations ( java.util.Collections . java.util.List ( org.springframework.web.servlet.resource.ClassPathResource ) ) ; ResourceResolverChain org.springframework.web.servlet.resource.ResourceResolverChain = new DefaultResourceResolverChain ( java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ) ; this . org.springframework.web.servlet.resource.ResourceTransformerChain = new DefaultResourceTransformerChain ( org.springframework.web.servlet.resource.ResourceResolverChain , java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.CssLinkResourceTransformerTests> ( ) ) ; TransformedResource org.springframework.web.servlet.resource.TransformedResource = ( TransformedResource ) this . org.springframework.web.servlet.resource.ResourceTransformerChain . transform ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , org.springframework.web.servlet.resource.Resource ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.web.servlet.resource.TransformedResource . getByteArray ( ) , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; java.lang.String = StringUtils . deleteAny ( java.lang.String , STRING ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.CssLinkResourceTransformerTests> ( ) ) ; Resource org.springframework.web.servlet.resource.Resource = this . org.springframework.web.servlet.resource.ResourceTransformerChain . transform ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , org.springframework.web.servlet.resource.Resource ) ; assertSame ( org.springframework.web.servlet.resource.Resource , org.springframework.web.servlet.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; ResourceResolverChain org.springframework.web.servlet.resource.ResourceResolverChain = Mockito . mock ( DefaultResourceResolverChain .class ) ; ResourceTransformerChain org.springframework.web.servlet.resource.ResourceTransformerChain = new DefaultResourceTransformerChain ( org.springframework.web.servlet.resource.ResourceResolverChain , java.util.Arrays . java.util.List ( new CssLinkResourceTransformer ( ) ) ) ; Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.CssLinkResourceTransformerTests> ( ) ) ; Resource org.springframework.web.servlet.resource.Resource = org.springframework.web.servlet.resource.ResourceTransformerChain . transform ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , org.springframework.web.servlet.resource.Resource ) ; TransformedResource org.springframework.web.servlet.resource.TransformedResource = ( TransformedResource ) org.springframework.web.servlet.resource.Resource ; java.lang.String java.lang.String = STRING + STRING + STRING ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.web.servlet.resource.TransformedResource . getByteArray ( ) , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; java.lang.String = StringUtils . deleteAny ( java.lang.String , STRING ) ; assertEquals ( java.lang.String , java.lang.String ) ; Mockito . verify ( org.springframework.web.servlet.resource.ResourceResolverChain , Mockito . never ( ) ) . resolveUrlPath ( STRING , java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.Resource ) ) ; Mockito . verify ( org.springframework.web.servlet.resource.ResourceResolverChain , Mockito . never ( ) ) . resolveUrlPath ( STRING , java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.Resource ) ) ; Mockito . verify ( org.springframework.web.servlet.resource.ResourceResolverChain , Mockito . never ( ) ) . resolveUrlPath ( STRING , java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.Resource ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.CssLinkResourceTransformerTests> ( ) ) ; Resource org.springframework.web.servlet.resource.Resource = this . org.springframework.web.servlet.resource.ResourceTransformerChain . transform ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , org.springframework.web.servlet.resource.Resource ) ; assertSame ( org.springframework.web.servlet.resource.Resource , org.springframework.web.servlet.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.resource.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.resource.CssLinkResourceTransformerTests> ( ) ) ; void ( STRING , STRING ) ; GzipResourceResolver . GzipResourceResolver GzipResourceResolver.GzippedResource = new GzipResourceResolver . GzipResourceResolver ( org.springframework.web.servlet.resource.Resource ) ; Resource org.springframework.web.servlet.resource.Resource = this . org.springframework.web.servlet.resource.ResourceTransformerChain . transform ( this . org.springframework.web.servlet.resource.MockHttpServletRequest , GzipResourceResolver.GzippedResource ) ; assertSame ( GzipResourceResolver.GzippedResource , org.springframework.web.servlet.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , org.springframework.web.servlet.resource.CssLinkResourceTransformerTests .class ) ; java.nio.file.Path java.nio.file.Path = java.nio.file.Paths . java.nio.file.Path ( org.springframework.web.servlet.resource.Resource . getFile ( ) . getAbsolutePath ( ) , java.lang.String ) ; java.nio.file.Path java.nio.file.Path = java.nio.file.Paths . java.nio.file.Path ( org.springframework.web.servlet.resource.Resource . getFile ( ) . getAbsolutePath ( ) , java.lang.String ) ; java.nio.file.Files . boolean ( java.nio.file.Path ) ; java.nio.file.Files . java.nio.file.Path ( java.nio.file.Path , java.nio.file.Path ) ; java.nio.file.Path . java.io.File ( ) . void ( ) ; }  <METHOD_END>
