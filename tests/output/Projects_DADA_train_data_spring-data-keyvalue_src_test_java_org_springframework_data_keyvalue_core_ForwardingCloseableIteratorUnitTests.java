<METHOD_START> @ Test public void void ( ) { when ( java.util.Iterator<java.util.Map.Entry<K,V>> . boolean ( ) ) . thenReturn ( true ) ; CloseableIterator < java.util.Map.Entry<K,V> < K , V > > org.springframework.data.keyvalue.core.CloseableIterator<java.util.Map.Entry<K,V>> = new ForwardingCloseableIterator < java.util.Map.Entry<K,V> < K , V > > ( java.util.Iterator<java.util.Map.Entry<K,V>> ) ; try { assertThat ( org.springframework.data.keyvalue.core.CloseableIterator<java.util.Map.Entry<K,V>> . hasNext ( ) , is ( true ) ) ; verify ( java.util.Iterator<java.util.Map.Entry<K,V>> , times ( NUMBER ) ) . hasNext ( ) ; } finally { org.springframework.data.keyvalue.core.CloseableIterator<java.util.Map.Entry<K,V>> . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( java.util.Iterator<java.util.Map.Entry<K,V>> . java.util.Map.Entry<K,V> ( ) ) . thenReturn ( ( java.util.Map.Entry<K,V> < K , V > ) mock ( java.util.Map . java.util.Map.Entry .class ) ) ; CloseableIterator < java.util.Map.Entry<K,V> < K , V > > org.springframework.data.keyvalue.core.CloseableIterator<java.util.Map.Entry<K,V>> = new ForwardingCloseableIterator < java.util.Map.Entry<K,V> < K , V > > ( java.util.Iterator<java.util.Map.Entry<K,V>> ) ; try { assertThat ( org.springframework.data.keyvalue.core.CloseableIterator<java.util.Map.Entry<K,V>> . next ( ) , notNullValue ( ) ) ; verify ( java.util.Iterator<java.util.Map.Entry<K,V>> , times ( NUMBER ) ) . next ( ) ; } finally { org.springframework.data.keyvalue.core.CloseableIterator<java.util.Map.Entry<K,V>> . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.util.NoSuchElementException .class ) public void void ( ) { when ( java.util.Iterator<java.util.Map.Entry<K,V>> . java.util.Map.Entry<K,V> ( ) ) . thenThrow ( new java.util.NoSuchElementException ( ) ) ; CloseableIterator < java.util.Map.Entry<K,V> < K , V > > org.springframework.data.keyvalue.core.CloseableIterator<java.util.Map.Entry<K,V>> = new ForwardingCloseableIterator < java.util.Map.Entry<K,V> < K , V > > ( java.util.Iterator<java.util.Map.Entry<K,V>> ) ; try { org.springframework.data.keyvalue.core.CloseableIterator<java.util.Map.Entry<K,V>> . next ( ) ; } finally { org.springframework.data.keyvalue.core.CloseableIterator<java.util.Map.Entry<K,V>> . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new ForwardingCloseableIterator < java.util.Map.Entry<K,V> < K , V > > ( java.util.Iterator<java.util.Map.Entry<K,V>> ) . close ( ) ; verifyZeroInteractions ( java.util.Iterator<java.util.Map.Entry<K,V>> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new ForwardingCloseableIterator < java.util.Map.Entry<K,V> < K , V > > ( java.util.Iterator<java.util.Map.Entry<K,V>> , java.lang.Runnable ) . close ( ) ; verify ( java.lang.Runnable , times ( NUMBER ) ) . run ( ) ; }  <METHOD_END>
