<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { if ( org.springframework.data.solr.core.SolrDataQuery . getCriteria ( ) == null ) { return null ; } java.lang.String java.lang.String = java.lang.String ( org.springframework.data.solr.core.SolrDataQuery . getCriteria ( ) ) ; java.lang.String = java.lang.String ( java.lang.String , org.springframework.data.solr.core.SolrDataQuery ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Converter < ? , ? > org.springframework.data.solr.core.Converter<?,?> ) { org.springframework.data.solr.core.GenericConversionService . addConverter ( org.springframework.data.solr.core.Converter<,> ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.solr.core.QueryParserBase.PredicateProcessor org.springframework.data.solr.core.QueryParserBase.PredicateProcessor ) { this . java.util.List<org.springframework.data.solr.core.QueryParserBase.PredicateProcessor> . boolean ( org.springframework.data.solr.core.QueryParserBase.PredicateProcessor ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( Node org.springframework.data.solr.core.Node ) { return java.lang.String ( org.springframework.data.solr.core.Node , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( Node org.springframework.data.solr.core.Node , int int ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.solr.core.Node . isOr ( ) ? STRING : STRING ) ; } if ( org.springframework.data.solr.core.Node . hasSiblings ( ) ) { if ( org.springframework.data.solr.core.Node . isNegating ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } if ( ! org.springframework.data.solr.core.Node . isRoot ( ) || ( org.springframework.data.solr.core.Node . isRoot ( ) && org.springframework.data.solr.core.Node . isNegating ( ) ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '(' ) ; } int int = NUMBER ; for ( Node org.springframework.data.solr.core.Node : org.springframework.data.solr.core.Node . getSiblings ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( org.springframework.data.solr.core.Node , int ++ ) ) ; } if ( ! org.springframework.data.solr.core.Node . isRoot ( ) || ( org.springframework.data.solr.core.Node . isRoot ( ) && org.springframework.data.solr.core.Node . isNegating ( ) ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( ')' ) ; } } else { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( ( Criteria ) org.springframework.data.solr.core.Node ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( Criteria org.springframework.data.solr.core.Criteria ) { return java.lang.String ( org.springframework.data.solr.core.Criteria ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( Criteria org.springframework.data.solr.core.Criteria ) { Criteria org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; boolean boolean = ( org.springframework.data.solr.core.Criteria . getPredicates ( ) . size ( ) == NUMBER ) ; if ( org.springframework.data.solr.core.Criteria instanceof QueryStringHolder ) { return ( ( QueryStringHolder ) org.springframework.data.solr.core.Criteria ) . getQueryString ( ) ; } java.lang.String java.lang.String = java.lang.String ( org.springframework.data.solr.core.Criteria . getField ( ) ) ; if ( org.springframework.data.solr.core.Criteria . isNegating ( ) ) { java.lang.String = java.lang.String + java.lang.String ; } if ( ! StringUtils . isEmpty ( java.lang.String ) && ! boolean ( org.springframework.data.solr.core.Criteria . getPredicates ( ) ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } if ( org.springframework.data.solr.core.Criteria . getPredicates ( ) . isEmpty ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; } if ( ! boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } org.springframework.data.solr.core.QueryParserBase<QUERYTPYE>.CriteriaQueryStringValueProvider org.springframework.data.solr.core.QueryParserBase<QUERYTPYE>.CriteriaQueryStringValueProvider = new org.springframework.data.solr.core.QueryParserBase<QUERYTPYE>.CriteriaQueryStringValueProvider ( org.springframework.data.solr.core.Criteria ) ; while ( org.springframework.data.solr.core.QueryParserBase<QUERYTPYE>.CriteriaQueryStringValueProvider . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.solr.core.QueryParserBase<QUERYTPYE>.CriteriaQueryStringValueProvider . java.lang.String ( ) ) ; if ( org.springframework.data.solr.core.QueryParserBase<QUERYTPYE>.CriteriaQueryStringValueProvider . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } } if ( ! boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } if ( ! java.lang.Float . boolean ( org.springframework.data.solr.core.Criteria . getBoost ( ) ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( org.springframework.data.solr.core.Criteria . getBoost ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Field org.springframework.data.solr.core.Field ) { if ( org.springframework.data.solr.core.Field == null || org.springframework.data.solr.core.Field . getName ( ) == null ) { return STRING ; } return org.springframework.data.solr.core.Field . getName ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( CalculatedField org.springframework.data.solr.core.CalculatedField ) { return StringUtils . isNotBlank ( org.springframework.data.solr.core.CalculatedField . getAlias ( ) ) ? ( org.springframework.data.solr.core.CalculatedField . getAlias ( ) + STRING + java.lang.String ( org.springframework.data.solr.core.CalculatedField . getFunction ( ) , NUMBER ) ) : java.lang.String ( org.springframework.data.solr.core.CalculatedField . getFunction ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( Function org.springframework.data.solr.core.Function , int int ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( int <= NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.solr.core.Function . getOperation ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '(' ) ; if ( org.springframework.data.solr.core.Function . hasArguments ( ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.Object java.lang.Object : org.springframework.data.solr.core.Function . getArguments ( ) ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( java.lang.Object instanceof Function ) { java.util.List<java.lang.String> . boolean ( java.lang.String ( ( Function ) java.lang.Object , int + NUMBER ) ) ; } else if ( java.lang.Object instanceof Criteria ) { java.util.List<java.lang.String> . boolean ( java.lang.String ( ( Criteria ) java.lang.Object ) ) ; } else if ( java.lang.Object instanceof Field ) { java.util.List<java.lang.String> . boolean ( ( ( Field ) java.lang.Object ) . getName ( ) ) ; } else if ( java.lang.Object instanceof Query ) { java.util.List<java.lang.String> . boolean ( java.lang.String ( ( Query ) java.lang.Object ) ) ; } else if ( java.lang.Object instanceof java.lang.String || ! org.springframework.data.solr.core.GenericConversionService . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String .class ) ) { java.util.List<java.lang.String> . boolean ( java.lang.Object . java.lang.String ( ) ) ; } else { java.util.List<java.lang.String> . boolean ( org.springframework.data.solr.core.GenericConversionService . convert ( java.lang.Object , java.lang.String .class ) ) ; } } java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . join ( java.util.List<java.lang.String> , ',' ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( ')' ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { if ( org.springframework.data.solr.core.SolrDataQuery == null || org.springframework.data.solr.core.SolrDataQuery . getJoin ( ) == null ) { return java.lang.String ; } java.lang.String java.lang.String = org.springframework.data.solr.core.SolrDataQuery . getJoin ( ) . getFromIndex ( ) != null ? STRING + org.springframework.data.solr.core.SolrDataQuery . getJoin ( ) . getFromIndex ( ) : STRING ; return STRING + org.springframework.data.solr.core.SolrDataQuery . getJoin ( ) . getFrom ( ) . getName ( ) + STRING + org.springframework.data.solr.core.SolrDataQuery . getJoin ( ) . getTo ( ) . getName ( ) + java.lang.String + STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , java.lang.Long java.lang.Long , java.lang.Integer java.lang.Integer ) { if ( java.lang.Long != null && java.lang.Long . int ( ) >= NUMBER ) { org.springframework.data.solr.core.SolrQuery . setStart ( java.lang.Long . int ( ) ) ; } if ( java.lang.Integer != null && java.lang.Integer >= NUMBER ) { org.springframework.data.solr.core.SolrQuery . setRows ( java.lang.Integer ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , java.util.List<org.springframework.data.solr.core.Field> < Field > java.util.List<org.springframework.data.solr.core.Field> ) { if ( CollectionUtils . isEmpty ( java.util.List<org.springframework.data.solr.core.Field> ) ) { return; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( Field org.springframework.data.solr.core.Field : java.util.List<org.springframework.data.solr.core.Field> ) { if ( org.springframework.data.solr.core.Field instanceof CalculatedField ) { java.util.List<java.lang.String> . boolean ( java.lang.String ( ( CalculatedField ) org.springframework.data.solr.core.Field ) ) ; } else { java.util.List<java.lang.String> . boolean ( org.springframework.data.solr.core.Field . getName ( ) ) ; } } org.springframework.data.solr.core.SolrQuery . setParam ( CommonParams . FL , StringUtils . join ( java.util.List<java.lang.String> , STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , Operator org.springframework.data.solr.core.Operator ) { if ( org.springframework.data.solr.core.Operator != null && ! Query . Operator . NONE . equals ( org.springframework.data.solr.core.Operator ) ) { org.springframework.data.solr.core.SolrQuery . set ( STRING , org.springframework.data.solr.core.Operator . asQueryStringRepresentation ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , java.lang.Integer java.lang.Integer ) { if ( java.lang.Integer != null ) { org.springframework.data.solr.core.SolrQuery . setTimeAllowed ( java.lang.Integer ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , java.lang.String java.lang.String ) { if ( StringUtils . isNotBlank ( java.lang.String ) ) { org.springframework.data.solr.core.SolrQuery . set ( STRING , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , java.lang.String java.lang.String ) { if ( StringUtils . isNotBlank ( java.lang.String ) ) { org.springframework.data.solr.core.SolrQuery . add ( CommonParams . QT , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Set<org.springframework.data.solr.core.Predicate> < Predicate > java.util.Set<org.springframework.data.solr.core.Predicate> ) { for ( Predicate org.springframework.data.solr.core.Predicate : java.util.Set<org.springframework.data.solr.core.Predicate> ) { if ( StringUtils . equals ( OperationKey . WITHIN . getKey ( ) , org.springframework.data.solr.core.Predicate . getKey ( ) ) ) { return true ; } else if ( StringUtils . equals ( OperationKey . NEAR . getKey ( ) , org.springframework.data.solr.core.Predicate . getKey ( ) ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.data.solr.core.SolrQuery org.springframework.data.solr.core.SolrQuery ( SolrDataQuery org.springframework.data.solr.core.SolrDataQuery ) { return org.springframework.data.solr.core.SolrQuery ( ( QUERYTPYE ) org.springframework.data.solr.core.SolrDataQuery ) ; }  <METHOD_END>
<METHOD_START> public abstract org.springframework.data.solr.core.SolrQuery org.springframework.data.solr.core.SolrQuery ( QUERYTPYE QUERYTPYE );  <METHOD_END>
<METHOD_START> boolean boolean ( Predicate org.springframework.data.solr.core.Predicate );  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field );  <METHOD_END>
<METHOD_START> void ( Criteria org.springframework.data.solr.core.Criteria ) { Assert . notNull ( org.springframework.data.solr.core.Criteria , STRING ) ; this . org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria ; this . java.util.Iterator<org.springframework.data.solr.core.Predicate> = org.springframework.data.solr.core.Criteria . getPredicates ( ) . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( Predicate org.springframework.data.solr.core.Predicate ) { org.springframework.data.solr.core.QueryParserBase.PredicateProcessor org.springframework.data.solr.core.QueryParserBase.PredicateProcessor = org.springframework.data.solr.core.QueryParserBase.PredicateProcessor ( org.springframework.data.solr.core.Predicate ) ; return ( T ) org.springframework.data.solr.core.QueryParserBase.PredicateProcessor . java.lang.Object ( org.springframework.data.solr.core.Predicate , org.springframework.data.solr.core.Criteria . getField ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.QueryParserBase.PredicateProcessor org.springframework.data.solr.core.QueryParserBase.PredicateProcessor ( Predicate org.springframework.data.solr.core.Predicate ) { for ( org.springframework.data.solr.core.QueryParserBase.PredicateProcessor org.springframework.data.solr.core.QueryParserBase.PredicateProcessor : java.util.List<org.springframework.data.solr.core.QueryParserBase.PredicateProcessor> ) { if ( org.springframework.data.solr.core.QueryParserBase.PredicateProcessor . boolean ( org.springframework.data.solr.core.Predicate ) ) { return org.springframework.data.solr.core.QueryParserBase.PredicateProcessor ; } } return org.springframework.data.solr.core.QueryParserBase.PredicateProcessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.Iterator<org.springframework.data.solr.core.Predicate> . hasNext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.Object java.lang.Object = java.lang.Object ( this . java.util.Iterator<org.springframework.data.solr.core.Predicate> . next ( ) ) ; return java.lang.Object != null ? java.lang.Object . java.lang.String ( ) : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.Iterator<org.springframework.data.solr.core.Predicate> . remove ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field ) { if ( org.springframework.data.solr.core.Predicate == null || org.springframework.data.solr.core.Predicate . getValue ( ) == null ) { return null ; } return java.lang.Object ( org.springframework.data.solr.core.Predicate , org.springframework.data.solr.core.Field ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof java.lang.String ) ) { if ( org.springframework.data.solr.core.GenericConversionService . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String .class ) ) { return org.springframework.data.solr.core.GenericConversionService . convert ( java.lang.Object , java.lang.String .class ) ; } return java.lang.Object ; } java.lang.String java.lang.String = java.lang.String ( ( java.lang.String ) java.lang.Object ) ; return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return StringUtils . replaceEach ( java.lang.String , java.lang.String[] , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( StringUtils . contains ( java.lang.String , java.lang.String ) ) { return java.lang.String + java.lang.String + java.lang.String ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field );  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.solr.core.Predicate ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field ) { return java.lang.Object ( org.springframework.data.solr.core.Predicate . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.solr.core.Predicate ) { return OperationKey . EXPRESSION . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field ) { return org.springframework.data.solr.core.Predicate . getValue ( ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.solr.core.Predicate ) { return OperationKey . BETWEEN . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field ) { java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) org.springframework.data.solr.core.Predicate . getValue ( ) ; java.lang.String java.lang.String = ( java.lang.Boolean ) java.lang.Object[] [ NUMBER ] ? STRING : STRING ; java.lang.String += java.lang.String ( java.lang.Object[] [ NUMBER ] , java.lang.Object[] [ NUMBER ] ) ; java.lang.String += ( java.lang.Boolean ) java.lang.Object[] [ NUMBER ] ? STRING : STRING ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { java.lang.String java.lang.String = STRING ; java.lang.String += ( java.lang.Object != null ? java.lang.Object ( java.lang.Object ) : Criteria . WILDCARD ) ; java.lang.String += java.lang.String ; java.lang.String += ( java.lang.Object != null ? java.lang.Object ( java.lang.Object ) : Criteria . WILDCARD ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.solr.core.Predicate ) { return OperationKey . NEAR . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field ) { java.lang.String java.lang.String ; java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) org.springframework.data.solr.core.Predicate . getValue ( ) ; if ( java.lang.Object[] [ NUMBER ] instanceof Box ) { Box org.springframework.data.solr.core.Box = ( Box ) java.lang.Object[] [ NUMBER ] ; java.lang.String = org.springframework.data.solr.core.Field . getName ( ) + STRING ; java.lang.String += java.lang.String ( org.springframework.data.solr.core.Box . getFirst ( ) , org.springframework.data.solr.core.Box . getSecond ( ) ) ; java.lang.String += STRING ; } else { java.lang.String = java.lang.String ( org.springframework.data.solr.core.Field . getName ( ) , ( org . springframework . data . org.springframework.data.geo . org.springframework.data.geo ) java.lang.Object[] [ NUMBER ] , ( Distance ) java.lang.Object[] [ NUMBER ] , STRING ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , org . springframework . data . org.springframework.data.geo . org.springframework.data.geo org.springframework.data.geo.Point , Distance org.springframework.data.solr.core.Distance , java.lang.String java.lang.String ) { java.lang.String java.lang.String = STRING + java.lang.String + STRING + SpatialParams . POINT + STRING ; java.lang.String += java.lang.Object ( org.springframework.data.geo.Point ) ; java.lang.String += STRING + SpatialParams . FIELD + STRING + java.lang.String ; java.lang.String += STRING + SpatialParams . DISTANCE + STRING + java.lang.Object ( org.springframework.data.solr.core.Distance ) ; java.lang.String += STRING ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.solr.core.Predicate ) { return OperationKey . WITHIN . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field ) { java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) org.springframework.data.solr.core.Predicate . getValue ( ) ; return java.lang.String ( org.springframework.data.solr.core.Field . getName ( ) , ( org . springframework . data . org.springframework.data.geo . org.springframework.data.geo ) java.lang.Object[] [ NUMBER ] , ( Distance ) java.lang.Object[] [ NUMBER ] , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.solr.core.Predicate ) { return OperationKey . FUZZY . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field ) { java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) org.springframework.data.solr.core.Predicate . getValue ( ) ; java.lang.Float java.lang.Float = ( java.lang.Float ) java.lang.Object[] [ NUMBER ] ; return java.lang.Object ( java.lang.Object[] [ NUMBER ] ) + STRING + ( java.lang.Float . boolean ( ) ? STRING : java.lang.Float ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.solr.core.Predicate ) { return OperationKey . SLOPPY . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field ) { java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) org.springframework.data.solr.core.Predicate . getValue ( ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.lang.Object[] [ NUMBER ] ; return java.lang.Object ( java.lang.Object[] [ NUMBER ] ) + STRING + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.solr.core.Predicate ) { return OperationKey . CONTAINS . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) || OperationKey . STARTS_WITH . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) || OperationKey . ENDS_WITH . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.solr.core.Predicate . getValue ( ) ) ; if ( OperationKey . CONTAINS . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ) { return Criteria . WILDCARD + java.lang.Object + Criteria . WILDCARD ; } else if ( OperationKey . STARTS_WITH . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ) { return java.lang.Object + Criteria . WILDCARD ; } else if ( OperationKey . ENDS_WITH . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ) { return Criteria . WILDCARD + java.lang.Object ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.solr.core.Predicate ) { return OperationKey . FUNCTION . getKey ( ) . equals ( org.springframework.data.solr.core.Predicate . getKey ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Predicate org.springframework.data.solr.core.Predicate , Field org.springframework.data.solr.core.Field ) { return java.lang.String ( ( Function ) org.springframework.data.solr.core.Predicate . getValue ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( )  <METHOD_END>
<METHOD_START> public void ( Query org.springframework.data.solr.core.Query ) { super( org.springframework.data.solr.core.Query ); Assert . notNull ( org.springframework.data.solr.core.Query , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { void ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void ( FacetQuery org.springframework.data.solr.core.FacetQuery ) { super( org.springframework.data.solr.core.FacetQuery ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { void ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void ( HighlightQuery org.springframework.data.solr.core.HighlightQuery ) { super( org.springframework.data.solr.core.HighlightQuery ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { void ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void ( FacetAndHighlightQuery org.springframework.data.solr.core.FacetAndHighlightQuery ) { super( org.springframework.data.solr.core.FacetAndHighlightQuery ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { void ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
