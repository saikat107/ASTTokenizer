<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.integration.message.MessageBuilderFactory instanceof MutableMessageBuilderFactory ) ; org.springframework.integration.message.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.message.Message<?> = org.springframework.integration.message.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.message.Message<?> = org.springframework.integration.message.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.message.Message<> . getClass ( ) . getName ( ) ) ; assertTrue ( org.springframework.integration.message.Message<> == org.springframework.integration.message.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.message.MessageChannel org.springframework.integration.message.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.message.PollableChannel org.springframework.integration.message.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.message.MessageBuilderFactory org.springframework.integration.message.MessageBuilderFactory ( ) { return new MutableMessageBuilderFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.message.MessageChannel org.springframework.integration.message.MessageChannel ( ) { return new PublishSubscribeChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.message.ConsumerEndpointFactoryBean org.springframework.integration.message.ConsumerEndpointFactoryBean ( ) java.lang.Exception { ConsumerEndpointFactoryBean org.springframework.integration.message.ConsumerEndpointFactoryBean = new ConsumerEndpointFactoryBean ( ) ; org.springframework.integration.message.ConsumerEndpointFactoryBean . setHandler ( org.springframework.integration.message.AbstractReplyProducingMessageHandler ( ) ) ; org.springframework.integration.message.ConsumerEndpointFactoryBean . setInputChannel ( org.springframework.integration.message.MessageChannel ( ) ) ; return org.springframework.integration.message.ConsumerEndpointFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.message.AbstractReplyProducingMessageHandler org.springframework.integration.message.AbstractReplyProducingMessageHandler ( ) { AbstractReplyProducingMessageHandler org.springframework.integration.message.AbstractReplyProducingMessageHandler = new org.springframework.integration.message.MessageBuilderAtConfigTests.RequestHeaderCopyingEchoHandler ( ) ; org.springframework.integration.message.AbstractReplyProducingMessageHandler . setOutputChannel ( org.springframework.integration.message.MessageChannel ( ) ) ; return org.springframework.integration.message.AbstractReplyProducingMessageHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.message.ConsumerEndpointFactoryBean org.springframework.integration.message.ConsumerEndpointFactoryBean ( ) java.lang.Exception { ConsumerEndpointFactoryBean org.springframework.integration.message.ConsumerEndpointFactoryBean = new ConsumerEndpointFactoryBean ( ) ; org.springframework.integration.message.ConsumerEndpointFactoryBean . setHandler ( org.springframework.integration.message.AbstractReplyProducingMessageHandler ( ) ) ; org.springframework.integration.message.ConsumerEndpointFactoryBean . setInputChannel ( org.springframework.integration.message.MessageChannel ( ) ) ; return org.springframework.integration.message.ConsumerEndpointFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.message.AbstractReplyProducingMessageHandler org.springframework.integration.message.AbstractReplyProducingMessageHandler ( ) { AbstractReplyProducingMessageHandler org.springframework.integration.message.AbstractReplyProducingMessageHandler = new org.springframework.integration.message.MessageBuilderAtConfigTests.RequestHeaderCopyingEchoHandler ( ) ; org.springframework.integration.message.AbstractReplyProducingMessageHandler . setOutputChannel ( org.springframework.integration.message.PollableChannel ( ) ) ; return org.springframework.integration.message.AbstractReplyProducingMessageHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.message.ConsumerEndpointFactoryBean org.springframework.integration.message.ConsumerEndpointFactoryBean ( ) java.lang.Exception { ConsumerEndpointFactoryBean org.springframework.integration.message.ConsumerEndpointFactoryBean = new ConsumerEndpointFactoryBean ( ) ; org.springframework.integration.message.ConsumerEndpointFactoryBean . setHandler ( org.springframework.integration.message.AbstractReplyProducingMessageHandler ( ) ) ; org.springframework.integration.message.ConsumerEndpointFactoryBean . setInputChannel ( org.springframework.integration.message.MessageChannel ( ) ) ; return org.springframework.integration.message.ConsumerEndpointFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.message.AbstractReplyProducingMessageHandler org.springframework.integration.message.AbstractReplyProducingMessageHandler ( ) { AbstractReplyProducingMessageHandler org.springframework.integration.message.AbstractReplyProducingMessageHandler = new org.springframework.integration.message.MessageBuilderAtConfigTests.RequestHeaderCopyingEchoHandler ( ) ; org.springframework.integration.message.AbstractReplyProducingMessageHandler . setOutputChannel ( org.springframework.integration.message.PollableChannel ( ) ) ; return org.springframework.integration.message.AbstractReplyProducingMessageHandler ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.message.Message<?> ) { return org.springframework.integration.message.Message<> ; }  <METHOD_END>
