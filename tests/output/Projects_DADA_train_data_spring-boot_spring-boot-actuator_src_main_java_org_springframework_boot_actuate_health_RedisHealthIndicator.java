<METHOD_START> public void ( RedisConnectionFactory org.springframework.boot.actuate.health.RedisConnectionFactory ) { Assert . notNull ( org.springframework.boot.actuate.health.RedisConnectionFactory , STRING ) ; this . org.springframework.boot.actuate.health.RedisConnectionFactory = org.springframework.boot.actuate.health.RedisConnectionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Health . Health Health.Builder ) throws java.lang.Exception { RedisConnection org.springframework.boot.actuate.health.RedisConnection = RedisConnectionUtils . getConnection ( this . org.springframework.boot.actuate.health.RedisConnectionFactory ) ; try { if ( org.springframework.boot.actuate.health.RedisConnection instanceof RedisClusterConnection ) { ClusterInfo org.springframework.boot.actuate.health.ClusterInfo = ( ( RedisClusterConnection ) org.springframework.boot.actuate.health.RedisConnection ) . clusterGetClusterInfo ( ) ; Health.Builder . up ( ) . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterInfo . getClusterSize ( ) ) . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterInfo . getSlotsOk ( ) ) . withDetail ( STRING , org.springframework.boot.actuate.health.ClusterInfo . getSlotsFail ( ) ) ; } else { java.util.Properties java.util.Properties = org.springframework.boot.actuate.health.RedisConnection . info ( ) ; Health.Builder . up ( ) . withDetail ( java.lang.String , java.util.Properties . java.lang.String ( java.lang.String ) ) ; } } finally { RedisConnectionUtils . releaseConnection ( org.springframework.boot.actuate.health.RedisConnection , this . org.springframework.boot.actuate.health.RedisConnectionFactory ) ; } }  <METHOD_END>
