<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean . java.lang.Class<? extends org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , java.lang.reflect.Method ) ; Message < ? > org.springframework.integration.transformer.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , STRING ) ; Message < ? > org.springframework.integration.transformer.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean . java.lang.Class<? extends org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , java.lang.reflect.Method ) ; Message < ? > org.springframework.integration.transformer.Message<?> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , STRING ) ; Message < ? > org.springframework.integration.transformer.Message<?> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean . java.lang.Class<? extends org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , java.lang.reflect.Method ) ; Message < ? > org.springframework.integration.transformer.Message<?> = new GenericMessage < org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean > ( new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ) ; org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , STRING ) ; Message < ? > org.springframework.integration.transformer.Message<?> = new GenericMessage < org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean > ( new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ) ; org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean . java.lang.Class<? extends org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.transformer.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , STRING ) ; Message < java.lang.String > org.springframework.integration.transformer.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean . java.lang.Class<? extends org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.transformer.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean . java.lang.Class<? extends org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.transformer.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean . java.lang.Class<? extends org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer .class ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.transformer.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean . java.lang.Class<? extends org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean> ( ) . java.lang.reflect.Method ( STRING , Message .class ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , java.lang.reflect.Method ) ; Message < java.lang.String > org.springframework.integration.transformer.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , STRING ) ; Message < java.lang.String > org.springframework.integration.transformer.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean . java.lang.Class<? extends org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean> ( ) . java.lang.reflect.Method ( STRING , java.util.Properties .class ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , java.lang.reflect.Method ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; Message < java.util.Properties > org.springframework.integration.transformer.Message<java.util.Properties> = new GenericMessage < java.util.Properties > ( java.util.Properties ) ; Message < java.util.Properties > org.springframework.integration.transformer.Message<java.util.Properties> = ( Message < java.util.Properties > ) org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<java.util.Properties> ) ; assertEquals ( java.util.Properties .class , org.springframework.integration.transformer.Message<java.util.Properties> . getPayload ( ) . getClass ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.transformer.Message<java.util.Properties> . getPayload ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertNull ( org.springframework.integration.transformer.Message<java.util.Properties> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.transformer.Message<java.util.Properties> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.transformer.Message<java.util.Properties> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , STRING ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; Message < java.util.Properties > org.springframework.integration.transformer.Message<java.util.Properties> = new GenericMessage < java.util.Properties > ( java.util.Properties ) ; Message < java.util.Properties > org.springframework.integration.transformer.Message<java.util.Properties> = ( Message < java.util.Properties > ) org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.Message<java.util.Properties> ) ; assertEquals ( java.util.Properties .class , org.springframework.integration.transformer.Message<java.util.Properties> . getPayload ( ) . getClass ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.transformer.Message<java.util.Properties> . getPayload ( ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.String ( STRING ) ) ; assertNull ( org.springframework.integration.transformer.Message<java.util.Properties> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.transformer.Message<java.util.Properties> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.transformer.Message<java.util.Properties> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; MethodInvokingTransformer org.springframework.integration.transformer.MethodInvokingTransformer = new MethodInvokingTransformer ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , STRING ) ; GenericMessage < java.lang.String > org.springframework.integration.transformer.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.MethodInvokingTransformer . transform ( org.springframework.integration.transformer.GenericMessage<java.lang.String> ) ; assertNull ( org.springframework.integration.transformer.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean . java.lang.Class<? extends org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; HeaderEnricher org.springframework.integration.transformer.HeaderEnricher = new HeaderEnricher ( ) ; org.springframework.integration.transformer.HeaderEnricher . setDefaultOverwrite ( true ) ; MethodInvokingMessageProcessor org.springframework.integration.transformer.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , java.lang.reflect.Method ) ; org.springframework.integration.transformer.HeaderEnricher . setMessageProcessor ( org.springframework.integration.transformer.MethodInvokingMessageProcessor ) ; Message < java.lang.String > org.springframework.integration.transformer.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.HeaderEnricher . transform ( org.springframework.integration.transformer.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) java.lang.Exception { org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean = new org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean ( ) ; HeaderEnricher org.springframework.integration.transformer.HeaderEnricher = new HeaderEnricher ( ) ; MethodInvokingMessageProcessor org.springframework.integration.transformer.MethodInvokingMessageProcessor = new MethodInvokingMessageProcessor ( org.springframework.integration.transformer.MethodInvokingTransformerTests.TestBean , STRING ) ; org.springframework.integration.transformer.HeaderEnricher . setMessageProcessor ( org.springframework.integration.transformer.MethodInvokingMessageProcessor ) ; org.springframework.integration.transformer.HeaderEnricher . setDefaultOverwrite ( true ) ; Message < java.lang.String > org.springframework.integration.transformer.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.HeaderEnricher . transform ( org.springframework.integration.transformer.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.transformer.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ Transformer public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> @ Transformer public java.lang.String java.lang.String ( java.lang.String java.lang.String , @ Header ( STRING ) java.lang.Integer java.lang.Integer ) { return java.lang.String + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ Transformer public java.lang.String java.lang.String ( java.lang.String java.lang.String , @ Header ( value = STRING , required = false ) java.lang.Integer java.lang.Integer ) { return java.lang.String + java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ Transformer public java.util.Properties java.util.Properties ( java.lang.String java.lang.String ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ Transformer public java.util.Properties java.util.Properties ( java.util.Properties java.util.Properties ) { java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.transformer.Message<?> < ? > org.springframework.integration.transformer.Message<?> ( Message < ? > org.springframework.integration.transformer.Message<?> ) { return org.springframework.integration.transformer.Message<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.transformer.Message<?> ) { return null ; }  <METHOD_END>
