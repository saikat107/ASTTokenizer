<METHOD_START> @ Test public void void ( ) javax.management.MalformedObjectNameException { ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext = org.springframework.context.support.ConfigurableApplicationContext ( STRING ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> ( ) . int ( ) ) ; LiveBeansView . registerApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> ( ) . int ( ) ) ; LiveBeansView . unregisterApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.management.MalformedObjectNameException { this . org.springframework.context.support.MockEnvironment . setProperty ( LiveBeansView . MBEAN_DOMAIN_PROPERTY_NAME , this . org.springframework.context.support.TestName . getMethodName ( ) ) ; ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext = org.springframework.context.support.ConfigurableApplicationContext ( STRING ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> ( ) . int ( ) ) ; LiveBeansView . registerApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; void ( STRING ) ; LiveBeansView . unregisterApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.management.MalformedObjectNameException { this . org.springframework.context.support.MockEnvironment . setProperty ( LiveBeansView . MBEAN_DOMAIN_PROPERTY_NAME , this . org.springframework.context.support.TestName . getMethodName ( ) ) ; ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext = org.springframework.context.support.ConfigurableApplicationContext ( STRING ) ; ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext = org.springframework.context.support.ConfigurableApplicationContext ( STRING ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> ( ) . int ( ) ) ; LiveBeansView . registerApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; void ( STRING ) ; LiveBeansView . registerApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> ( ) . int ( ) ) ; LiveBeansView . unregisterApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; void ( STRING ) ; LiveBeansView . unregisterApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.management.MalformedObjectNameException { this . org.springframework.context.support.MockEnvironment . setProperty ( LiveBeansView . MBEAN_DOMAIN_PROPERTY_NAME , this . org.springframework.context.support.TestName . getMethodName ( ) ) ; ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext = org.springframework.context.support.ConfigurableApplicationContext ( STRING ) ; ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext = org.springframework.context.support.ConfigurableApplicationContext ( STRING ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> ( ) . int ( ) ) ; LiveBeansView . registerApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; void ( STRING ) ; LiveBeansView . registerApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; void ( STRING ) ; LiveBeansView . unregisterApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; LiveBeansView . unregisterApplicationContext ( org.springframework.context.support.ConfigurableApplicationContext ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.support.ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext ( java.lang.String java.lang.String ) { ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class ) ; given ( org.springframework.context.support.ConfigurableApplicationContext . getEnvironment ( ) ) . willReturn ( this . org.springframework.context.support.MockEnvironment ) ; given ( org.springframework.context.support.ConfigurableApplicationContext . getApplicationName ( ) ) . willReturn ( java.lang.String ) ; return org.springframework.context.support.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws javax.management.MalformedObjectNameException { java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> = java.util.Set<javax.management.ObjectName> ( ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( STRING , this . org.springframework.context.support.TestName . getMethodName ( ) , java.lang.String ) , java.util.Set<javax.management.ObjectName> . java.util.Iterator<javax.management.ObjectName> ( ) . javax.management.ObjectName ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> ( ) javax.management.MalformedObjectNameException { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , this . org.springframework.context.support.TestName . getMethodName ( ) , LiveBeansView . MBEAN_APPLICATION_KEY ) ; return java.lang.management.ManagementFactory . javax.management.MBeanServer ( ) . java.util.Set<javax.management.ObjectName> ( new javax.management.ObjectName ( java.lang.String ) , null ) ; }  <METHOD_END>
