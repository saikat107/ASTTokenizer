<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.search.lucene.LuceneTemplate . setLuceneService ( org.springframework.data.gemfire.search.lucene.LuceneService ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneService . createLuceneQueryFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setPageSize ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setProjectionFields ( any ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . setResultLimit ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) org.springframework.data.gemfire.search.lucene.LuceneQueryException { when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . create ( eq ( STRING ) , eq ( STRING ) , anyString ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> . findResults ( ) ) . thenReturn ( java.util.List ( org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object> , org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object> ) ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveIndexName ( ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveRegionPath ( ) ; java.util.List<org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object>> < LuceneResultStruct < java.lang.Object , java.lang.Object > > java.util.List<org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object>> = org.springframework.data.gemfire.search.lucene.LuceneTemplate . query ( STRING , STRING , NUMBER , STRING ) ; assertThat ( java.util.List<org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object>> ) . isNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object>> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object>> ) . containsAll ( java.util.List ( org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object> , org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object> ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveIndexName ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveRegionPath ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . doFind ( isA ( LuceneQueryExecutor .class ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( LuceneOperations . DEFAULT_PAGE_SIZE ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . create ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . findResults ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) org.springframework.data.gemfire.search.lucene.LuceneQueryException { when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . create ( eq ( STRING ) , eq ( STRING ) , anyString ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> . findPages ( ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.PageableLuceneQueryResults<java.lang.Object,java.lang.Object> ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveIndexName ( ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveRegionPath ( ) ; PageableLuceneQueryResults < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.search.lucene.PageableLuceneQueryResults<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.search.lucene.LuceneTemplate . query ( STRING , STRING , NUMBER , NUMBER , STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.PageableLuceneQueryResults<java.lang.Object,java.lang.Object> ) . isSameAs ( org.springframework.data.gemfire.search.lucene.PageableLuceneQueryResults<java.lang.Object,java.lang.Object> ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveIndexName ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveRegionPath ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . doFind ( isA ( LuceneQueryExecutor .class ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . create ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . findPages ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) org.springframework.data.gemfire.search.lucene.LuceneQueryException { when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . create ( eq ( STRING ) , eq ( STRING ) , any ( LuceneQueryProvider .class ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> . findResults ( ) ) . thenReturn ( java.util.List ( org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object> , org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object> ) ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveIndexName ( ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveRegionPath ( ) ; java.util.List<org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object>> < LuceneResultStruct < java.lang.Object , java.lang.Object > > java.util.List<org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object>> = org.springframework.data.gemfire.search.lucene.LuceneTemplate . query ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider , NUMBER , STRING ) ; assertThat ( java.util.List<org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object>> ) . isNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object>> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object>> ) . containsAll ( java.util.List ( org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object> , org.springframework.data.gemfire.search.lucene.LuceneResultStruct<java.lang.Object,java.lang.Object> ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveIndexName ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveRegionPath ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . doFind ( isA ( LuceneQueryExecutor .class ) , eq ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( LuceneOperations . DEFAULT_PAGE_SIZE ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . create ( eq ( STRING ) , eq ( STRING ) , eq ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . findResults ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) org.springframework.data.gemfire.search.lucene.LuceneQueryException { when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . create ( eq ( STRING ) , eq ( STRING ) , any ( LuceneQueryProvider .class ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> . findPages ( ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.PageableLuceneQueryResults<java.lang.Object,java.lang.Object> ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveIndexName ( ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveRegionPath ( ) ; PageableLuceneQueryResults < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.search.lucene.PageableLuceneQueryResults<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.search.lucene.LuceneTemplate . query ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider , NUMBER , NUMBER , STRING ) ; assertThat ( org.springframework.data.gemfire.search.lucene.PageableLuceneQueryResults<java.lang.Object,java.lang.Object> ) . isSameAs ( org.springframework.data.gemfire.search.lucene.PageableLuceneQueryResults<java.lang.Object,java.lang.Object> ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveIndexName ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveRegionPath ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . doFind ( isA ( LuceneQueryExecutor .class ) , eq ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . create ( eq ( STRING ) , eq ( STRING ) , eq ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . findPages ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) org.springframework.data.gemfire.search.lucene.LuceneQueryException { when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . create ( eq ( STRING ) , eq ( STRING ) , anyString ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> . findKeys ( ) ) . thenReturn ( java.util.List<java.lang.String> ( STRING , STRING ) ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveIndexName ( ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveRegionPath ( ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = org.springframework.data.gemfire.search.lucene.LuceneTemplate . queryForKeys ( STRING , STRING , NUMBER ) ; assertThat ( java.util.Collection<java.lang.String> ) . isNotNull ( ) ; assertThat ( java.util.Collection<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Collection<java.lang.String> ) . containsAll ( java.util.List<java.lang.String> ( STRING , STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveIndexName ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveRegionPath ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . doFind ( isA ( LuceneQueryExecutor .class ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( LuceneOperations . DEFAULT_PAGE_SIZE ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . create ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . findKeys ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) org.springframework.data.gemfire.search.lucene.LuceneQueryException { when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . create ( eq ( STRING ) , eq ( STRING ) , any ( LuceneQueryProvider .class ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> . findKeys ( ) ) . thenReturn ( java.util.List<java.lang.String> ( STRING , STRING ) ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveIndexName ( ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveRegionPath ( ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = org.springframework.data.gemfire.search.lucene.LuceneTemplate . queryForKeys ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider , NUMBER ) ; assertThat ( java.util.Collection<java.lang.String> ) . isNotNull ( ) ; assertThat ( java.util.Collection<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Collection<java.lang.String> ) . containsAll ( java.util.List<java.lang.String> ( STRING , STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveIndexName ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveRegionPath ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . doFind ( isA ( LuceneQueryExecutor .class ) , eq ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( LuceneOperations . DEFAULT_PAGE_SIZE ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . create ( eq ( STRING ) , eq ( STRING ) , eq ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . findKeys ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) org.springframework.data.gemfire.search.lucene.LuceneQueryException { when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . create ( eq ( STRING ) , eq ( STRING ) , anyString ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> . findValues ( ) ) . thenReturn ( java.util.List<java.lang.String> ( STRING , STRING ) ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveIndexName ( ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveRegionPath ( ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = org.springframework.data.gemfire.search.lucene.LuceneTemplate . queryForValues ( STRING , STRING , NUMBER ) ; assertThat ( java.util.Collection<java.lang.String> ) . isNotNull ( ) ; assertThat ( java.util.Collection<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Collection<java.lang.String> ) . containsAll ( java.util.List<java.lang.String> ( STRING , STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveIndexName ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveRegionPath ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . doFind ( isA ( LuceneQueryExecutor .class ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( LuceneOperations . DEFAULT_PAGE_SIZE ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . create ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . findValues ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) org.springframework.data.gemfire.search.lucene.LuceneQueryException { when ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory . create ( eq ( STRING ) , eq ( STRING ) , any ( LuceneQueryProvider .class ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> . findValues ( ) ) . thenReturn ( java.util.List<java.lang.String> ( STRING , STRING ) ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveIndexName ( ) ; doReturn ( STRING ) . when ( org.springframework.data.gemfire.search.lucene.LuceneTemplate ) . resolveRegionPath ( ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = org.springframework.data.gemfire.search.lucene.LuceneTemplate . queryForValues ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider , NUMBER ) ; assertThat ( java.util.Collection<java.lang.String> ) . isNotNull ( ) ; assertThat ( java.util.Collection<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Collection<java.lang.String> ) . containsAll ( java.util.List<java.lang.String> ( STRING , STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveIndexName ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . resolveRegionPath ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneTemplate , times ( NUMBER ) ) . doFind ( isA ( LuceneQueryExecutor .class ) , eq ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneService , times ( NUMBER ) ) . createLuceneQueryFactory ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setResultLimit ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setPageSize ( eq ( LuceneOperations . DEFAULT_PAGE_SIZE ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . setProjectionFields ( ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQueryFactory , times ( NUMBER ) ) . create ( eq ( STRING ) , eq ( STRING ) , eq ( org.springframework.data.gemfire.search.lucene.LuceneQueryProvider ) ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneQuery<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . findValues ( ) ; }  <METHOD_END>
