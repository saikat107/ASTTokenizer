<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { MatrixVariable org.springframework.web.servlet.mvc.method.annotation.MatrixVariable = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( MatrixVariable .class ) ; if ( org.springframework.web.servlet.mvc.method.annotation.MatrixVariable != null ) { if ( java.util.Map .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) ) { return ! StringUtils . hasText ( org.springframework.web.servlet.mvc.method.annotation.MatrixVariable . name ( ) ) ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) throws java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> = ( java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > ) org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getAttribute ( HandlerMapping . MATRIX_VARIABLES_ATTRIBUTE , RequestAttributes . SCOPE_REQUEST ) ; if ( CollectionUtils . isEmpty ( java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> ) ) { return java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ; } MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( MatrixVariable .class ) . pathVar ( ) ; if ( ! java.lang.String . boolean ( ValueConstants . DEFAULT_NONE ) ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> . get ( java.lang.String ) ; if ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> == null ) { return java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ; } org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . putAll ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> ) ; } else { for ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> . values ( ) ) { for ( java.lang.String java.lang.String : org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . keySet ( ) ) { for ( java.lang.String java.lang.String : org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) { org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; } } } } return ( boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ? org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . toSingleValueMap ( ) : org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { if ( ! MultiValueMap .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) ) { ResolvableType [] org.springframework.web.servlet.mvc.method.annotation.ResolvableType[] = ResolvableType . forMethodParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) . getGenerics ( ) ; if ( genericTypes . length == NUMBER ) { return ! java.util.List .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.ResolvableType[] [ NUMBER ] . getRawClass ( ) ) ; } } return false ; }  <METHOD_END>
