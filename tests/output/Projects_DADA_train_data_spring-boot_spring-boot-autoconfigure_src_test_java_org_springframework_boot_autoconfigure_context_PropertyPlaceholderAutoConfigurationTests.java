<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfigurationTests.PlaceholderConfig .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfigurationTests.PlaceholderConfig .class ) . getFoo ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfigurationTests.PlaceholderConfig .class , org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfigurationTests.PlaceholdersOverride .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfigurationTests.PlaceholderConfig .class ) . getFoo ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.boot.autoconfigure.context.PropertySourcesPlaceholderConfigurer org.springframework.boot.autoconfigure.context.PropertySourcesPlaceholderConfigurer ( ) { PropertySourcesPlaceholderConfigurer org.springframework.boot.autoconfigure.context.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; org.springframework.boot.autoconfigure.context.PropertySourcesPlaceholderConfigurer . setProperties ( StringUtils . splitArrayElementsIntoProperties ( new java.lang.String [] { STRING } , STRING ) ) ; org.springframework.boot.autoconfigure.context.PropertySourcesPlaceholderConfigurer . setLocalOverride ( true ) ; org.springframework.boot.autoconfigure.context.PropertySourcesPlaceholderConfigurer . setOrder ( NUMBER ) ; return org.springframework.boot.autoconfigure.context.PropertySourcesPlaceholderConfigurer ; }  <METHOD_END>
