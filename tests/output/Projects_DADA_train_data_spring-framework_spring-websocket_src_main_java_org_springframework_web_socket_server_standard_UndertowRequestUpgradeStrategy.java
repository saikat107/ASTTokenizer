<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServerHttpRequest org.springframework.web.socket.server.standard.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.server.standard.ServerHttpResponse , java.lang.String java.lang.String , java.util.List<org.springframework.web.socket.server.standard.Extension> < Extension > java.util.List<org.springframework.web.socket.server.standard.Extension> , Endpoint org.springframework.web.socket.server.standard.Endpoint )			throws org.springframework.web.socket.server.standard.HandshakeFailureException { HttpServletRequest org.springframework.web.socket.server.standard.HttpServletRequest = getHttpServletRequest ( org.springframework.web.socket.server.standard.ServerHttpRequest ) ; HttpServletResponse org.springframework.web.socket.server.standard.HttpServletResponse = getHttpServletResponse ( org.springframework.web.socket.server.standard.ServerHttpResponse ) ; java.lang.StringBuffer java.lang.StringBuffer = org.springframework.web.socket.server.standard.HttpServletRequest . getRequestURL ( ) ; java.lang.String java.lang.String = org.springframework.web.socket.server.standard.HttpServletRequest . getRequestURI ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( ) ; ServerEndpointRegistration org.springframework.web.socket.server.standard.ServerEndpointRegistration = new ServerEndpointRegistration ( java.lang.String , org.springframework.web.socket.server.standard.Endpoint ) ; org.springframework.web.socket.server.standard.ServerEndpointRegistration . setSubprotocols ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) ) ; org.springframework.web.socket.server.standard.ServerEndpointRegistration . setExtensions ( java.util.List<org.springframework.web.socket.server.standard.Extension> ) ; try { org.springframework.web.socket.server.standard.ServerWebSocketContainer ( org.springframework.web.socket.server.standard.HttpServletRequest ) . doUpgrade ( org.springframework.web.socket.server.standard.HttpServletRequest , org.springframework.web.socket.server.standard.HttpServletResponse , org.springframework.web.socket.server.standard.ServerEndpointRegistration , java.util.Map<java.lang.String,java.lang.String> ) ; } catch ( ServletException org.springframework.web.socket.server.standard.ServletException ) { throw new HandshakeFailureException ( STRING + java.lang.StringBuffer , org.springframework.web.socket.server.standard.ServletException ) ; } catch ( java.io.IOException java.io.IOException ) { throw new HandshakeFailureException ( STRING + java.lang.StringBuffer , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.server.standard.ServerWebSocketContainer org.springframework.web.socket.server.standard.ServerWebSocketContainer ( HttpServletRequest org.springframework.web.socket.server.standard.HttpServletRequest ) { return ( ServerWebSocketContainer ) super. getContainer ( org.springframework.web.socket.server.standard.HttpServletRequest ) ; }  <METHOD_END>
