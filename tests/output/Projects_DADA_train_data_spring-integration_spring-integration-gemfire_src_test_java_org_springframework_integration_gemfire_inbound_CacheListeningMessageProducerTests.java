<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.integration.gemfire.inbound.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.integration.gemfire.inbound.RegionFactoryBean<java.lang.String,java.lang.String> = new RegionFactoryBean < java.lang.String , java.lang.String > ( ) {		} ; org.springframework.integration.gemfire.inbound.RegionFactoryBean<java.lang.String,java.lang.String> . setName ( STRING ) ; org.springframework.integration.gemfire.inbound.RegionFactoryBean<java.lang.String,java.lang.String> . setCache ( org.springframework.integration.gemfire.inbound.CacheFactoryBean . getObject ( ) ) ; void ( org.springframework.integration.gemfire.inbound.RegionFactoryBean<java.lang.String,java.lang.String> ) ; org.springframework.integration.gemfire.inbound.RegionFactoryBean<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> = org.springframework.integration.gemfire.inbound.RegionFactoryBean<java.lang.String,java.lang.String> . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { org.springframework.integration.gemfire.inbound.RegionFactoryBean<java.lang.String,java.lang.String> . destroy ( ) ; org.springframework.integration.gemfire.inbound.CacheFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.gemfire.inbound.QueueChannel = new QueueChannel ( ) ; CacheListeningMessageProducer org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer = new CacheListeningMessageProducer ( org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setPayloadExpression ( org.springframework.integration.gemfire.inbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setOutputChannel ( org.springframework.integration.gemfire.inbound.QueueChannel ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . start ( ) ; assertNull ( org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> . put ( STRING , STRING ) ; Message < ? > org.springframework.integration.gemfire.inbound.Message<?> = org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gemfire.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gemfire.inbound.Message<> . getPayload ( ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.gemfire.inbound.QueueChannel = new QueueChannel ( ) ; CacheListeningMessageProducer org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer = new CacheListeningMessageProducer ( org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setPayloadExpression ( org.springframework.integration.gemfire.inbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setOutputChannel ( org.springframework.integration.gemfire.inbound.QueueChannel ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . start ( ) ; assertNull ( org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> . put ( STRING , STRING ) ; Message < ? > org.springframework.integration.gemfire.inbound.Message<?> = org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gemfire.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gemfire.inbound.Message<> . getPayload ( ) ) ; org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> . put ( STRING , STRING ) ; Message < ? > org.springframework.integration.gemfire.inbound.Message<?> = org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gemfire.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gemfire.inbound.Message<> . getPayload ( ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.gemfire.inbound.QueueChannel = new QueueChannel ( ) ; CacheListeningMessageProducer org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer = new CacheListeningMessageProducer ( org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setSupportedEventTypes ( EventType . DESTROYED ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setPayloadExpression ( org.springframework.integration.gemfire.inbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setOutputChannel ( org.springframework.integration.gemfire.inbound.QueueChannel ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . start ( ) ; assertNull ( org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> . put ( STRING , STRING ) ; assertNull ( org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> . destroy ( STRING ) ; Message < ? > org.springframework.integration.gemfire.inbound.Message<?> = org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gemfire.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gemfire.inbound.Message<> . getPayload ( ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.gemfire.inbound.QueueChannel = new QueueChannel ( ) ; CacheListeningMessageProducer org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer = new CacheListeningMessageProducer ( org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setSupportedEventTypes ( EventType . INVALIDATED ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setPayloadExpression ( org.springframework.integration.gemfire.inbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setOutputChannel ( org.springframework.integration.gemfire.inbound.QueueChannel ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . start ( ) ; assertNull ( org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> . put ( STRING , STRING ) ; assertNull ( org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.gemfire.inbound.Region<java.lang.String,java.lang.String> . invalidate ( STRING ) ; Message < ? > org.springframework.integration.gemfire.inbound.Message<?> = org.springframework.integration.gemfire.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gemfire.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gemfire.inbound.Message<> . getPayload ( ) ) ; org.springframework.integration.gemfire.inbound.CacheListeningMessageProducer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static void void ( RegionFactoryBean < java.lang.String , java.lang.String > org.springframework.integration.gemfire.inbound.RegionFactoryBean<java.lang.String,java.lang.String> ) throws java.lang.Exception { RegionAttributesFactoryBean org.springframework.integration.gemfire.inbound.RegionAttributesFactoryBean = new RegionAttributesFactoryBean ( ) ; org.springframework.integration.gemfire.inbound.RegionAttributesFactoryBean . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.inbound.RegionFactoryBean<java.lang.String,java.lang.String> . setAttributes ( org.springframework.integration.gemfire.inbound.RegionAttributesFactoryBean . getObject ( ) ) ; }  <METHOD_END>
