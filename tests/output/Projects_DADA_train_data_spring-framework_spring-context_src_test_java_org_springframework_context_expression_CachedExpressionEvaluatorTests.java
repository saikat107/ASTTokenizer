<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.context.expression.CachedExpressionEvaluatorTests> ( ) , STRING ) ; Expression org.springframework.context.expression.Expression = org.springframework.context.expression.CachedExpressionEvaluatorTests.TestExpressionEvaluator . org.springframework.context.expression.Expression ( STRING , java.lang.reflect.Method , java.lang.Class<? extends org.springframework.context.expression.CachedExpressionEvaluatorTests> ( ) ) ; void ( STRING ) ; assertEquals ( true , org.springframework.context.expression.Expression . getValue ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.context.expression.CachedExpressionEvaluatorTests.TestExpressionEvaluator . java.util.Map<org.springframework.context.expression.ExpressionKey,org.springframework.context.expression.Expression> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.context.expression.CachedExpressionEvaluatorTests> ( ) , STRING ) ; org.springframework.context.expression.CachedExpressionEvaluatorTests.TestExpressionEvaluator . org.springframework.context.expression.Expression ( STRING , java.lang.reflect.Method , java.lang.Class<? extends org.springframework.context.expression.CachedExpressionEvaluatorTests> ( ) ) ; org.springframework.context.expression.CachedExpressionEvaluatorTests.TestExpressionEvaluator . org.springframework.context.expression.Expression ( STRING , java.lang.reflect.Method , java.lang.Class<? extends org.springframework.context.expression.CachedExpressionEvaluatorTests> ( ) ) ; org.springframework.context.expression.CachedExpressionEvaluatorTests.TestExpressionEvaluator . org.springframework.context.expression.Expression ( STRING , java.lang.reflect.Method , java.lang.Class<? extends org.springframework.context.expression.CachedExpressionEvaluatorTests> ( ) ) ; void ( STRING ) ; assertEquals ( STRING , NUMBER , org.springframework.context.expression.CachedExpressionEvaluatorTests.TestExpressionEvaluator . java.util.Map<org.springframework.context.expression.ExpressionKey,org.springframework.context.expression.Expression> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.context.expression.CachedExpressionEvaluatorTests> ( ) , STRING ) ; org.springframework.context.expression.CachedExpressionEvaluatorTests.TestExpressionEvaluator . org.springframework.context.expression.Expression ( STRING , java.lang.reflect.Method , java.lang.Class<? extends org.springframework.context.expression.CachedExpressionEvaluatorTests> ( ) ) ; org.springframework.context.expression.CachedExpressionEvaluatorTests.TestExpressionEvaluator . org.springframework.context.expression.Expression ( STRING , java.lang.reflect.Method , java.lang.Object .class ) ; assertEquals ( STRING , NUMBER , org.springframework.context.expression.CachedExpressionEvaluatorTests.TestExpressionEvaluator . java.util.Map<org.springframework.context.expression.ExpressionKey,org.springframework.context.expression.Expression> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { verify ( org.springframework.context.expression.CachedExpressionEvaluatorTests.TestExpressionEvaluator . getParser ( ) , times ( NUMBER ) ) . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( org.springframework.context.expression.SpelExpressionParser ( ) ); }  <METHOD_END>
<METHOD_START> public org.springframework.context.expression.Expression org.springframework.context.expression.Expression ( java.lang.String java.lang.String , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return getExpression ( this . java.util.Map<org.springframework.context.expression.ExpressionKey,org.springframework.context.expression.Expression> , new AnnotatedElementKey ( java.lang.reflect.Method , java.lang.Class<> ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.context.expression.SpelExpressionParser org.springframework.context.expression.SpelExpressionParser ( ) { SpelExpressionParser org.springframework.context.expression.SpelExpressionParser = new SpelExpressionParser ( ) ; return spy ( org.springframework.context.expression.SpelExpressionParser ) ; }  <METHOD_END>
