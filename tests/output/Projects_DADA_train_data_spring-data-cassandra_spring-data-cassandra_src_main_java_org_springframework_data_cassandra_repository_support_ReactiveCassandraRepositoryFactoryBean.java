<METHOD_START> public void ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ) { super( java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> public void void ( ReactiveCassandraOperations org.springframework.data.cassandra.repository.support.ReactiveCassandraOperations ) { this . org.springframework.data.cassandra.repository.support.ReactiveCassandraOperations = org.springframework.data.cassandra.repository.support.ReactiveCassandraOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MappingContext < ? , ? > org.springframework.data.cassandra.repository.support.MappingContext<?,?> ) { super. setMappingContext ( org.springframework.data.cassandra.repository.support.MappingContext<,> ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final org.springframework.data.cassandra.repository.support.RepositoryFactorySupport org.springframework.data.cassandra.repository.support.RepositoryFactorySupport ( ) { return org.springframework.data.cassandra.repository.support.RepositoryFactorySupport ( org.springframework.data.cassandra.repository.support.ReactiveCassandraOperations ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.cassandra.repository.support.RepositoryFactorySupport org.springframework.data.cassandra.repository.support.RepositoryFactorySupport ( ReactiveCassandraOperations org.springframework.data.cassandra.repository.support.ReactiveCassandraOperations ) { return new ReactiveCassandraRepositoryFactory ( org.springframework.data.cassandra.repository.support.ReactiveCassandraOperations ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. afterPropertiesSet ( ) ; Assert . notNull ( org.springframework.data.cassandra.repository.support.ReactiveCassandraOperations , STRING ) ; if ( ! boolean ) { void ( org.springframework.data.cassandra.repository.support.ReactiveCassandraOperations . getConverter ( ) . getMappingContext ( ) ) ; } }  <METHOD_END>
