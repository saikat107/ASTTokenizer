<METHOD_START> public void ( XmlReaderContext org.springframework.data.gemfire.function.config.XmlReaderContext ) { this( org.springframework.data.gemfire.function.config.XmlReaderContext , org.springframework.data.gemfire.function.config.XmlReaderContext . getResourceLoader ( ) . getClassLoader ( ) ); }  <METHOD_END>
<METHOD_START> void ( ReaderContext org.springframework.data.gemfire.function.config.ReaderContext , java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( org.springframework.data.gemfire.function.config.ReaderContext , STRING ) ; Assert . notNull ( java.lang.ClassLoader , STRING ) ; this . org.springframework.data.gemfire.function.config.ReaderContext = org.springframework.data.gemfire.function.config.ReaderContext ; this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public java.lang.Iterable<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.gemfire.function.config.TypeFilter> ( org.w3c.dom.Element org.w3c.dom.Element , org.springframework.data.gemfire.function.config.TypeFilterParser.Type org.springframework.data.gemfire.function.config.TypeFilterParser.Type ) { org.w3c.dom.NodeList org.w3c.dom.NodeList = org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ; java.util.Collection<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > java.util.Collection<org.springframework.data.gemfire.function.config.TypeFilter> = new java.util.HashSet<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > ( ) ; for ( int int = NUMBER ; int < org.w3c.dom.NodeList . int ( ) ; int ++ ) { org.w3c.dom.Node org.w3c.dom.Node = org.w3c.dom.NodeList . org.w3c.dom.Node ( int ) ; org.w3c.dom.Element org.w3c.dom.Element = org.springframework.data.gemfire.function.config.TypeFilterParser.Type . org.w3c.dom.Element ( org.w3c.dom.Node ) ; if ( org.w3c.dom.Element != null ) { try { java.util.Collection<org.springframework.data.gemfire.function.config.TypeFilter> . add ( org.springframework.data.gemfire.function.config.TypeFilter ( org.w3c.dom.Element , java.lang.ClassLoader ) ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.data.gemfire.function.config.ReaderContext . error ( java.lang.RuntimeException . java.lang.String ( ) , org.springframework.data.gemfire.function.config.ReaderContext . extractSource ( org.w3c.dom.Element ) , java.lang.RuntimeException . java.lang.Throwable ( ) ) ; } } } return java.util.Collection<org.springframework.data.gemfire.function.config.TypeFilter> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.function.config.TypeFilter org.springframework.data.gemfire.function.config.TypeFilter ( org.w3c.dom.Element org.w3c.dom.Element , java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; try { org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType = org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType . org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType ( java.lang.String ) ; return org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType . org.springframework.data.gemfire.function.config.TypeFilter ( java.lang.String , java.lang.ClassLoader ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new FatalBeanException ( STRING + java.lang.String , java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.gemfire.function.config.TypeFilter org.springframework.data.gemfire.function.config.TypeFilter ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) throws java.lang.ClassNotFoundException { return new AnnotationTypeFilter ( ( java.lang.Class<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > ) java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.function.config.TypeFilter org.springframework.data.gemfire.function.config.TypeFilter ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) throws java.lang.ClassNotFoundException { return new AssignableTypeFilter ( java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.function.config.TypeFilter org.springframework.data.gemfire.function.config.TypeFilter ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { return new AspectJTypeFilter ( java.lang.String , java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.function.config.TypeFilter org.springframework.data.gemfire.function.config.TypeFilter ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { return new RegexPatternTypeFilter ( java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.function.config.TypeFilter org.springframework.data.gemfire.function.config.TypeFilter ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) throws java.lang.ClassNotFoundException { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ; if ( ! TypeFilter .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + TypeFilter .class . java.lang.String ( ) + STRING + java.lang.String ) ; } return ( TypeFilter ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> abstract org.springframework.data.gemfire.function.config.TypeFilter org.springframework.data.gemfire.function.config.TypeFilter ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) throws java.lang.ClassNotFoundException ;  <METHOD_END>
<METHOD_START> static org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType ( java.lang.String java.lang.String ) { for ( org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType : org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType . org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType[] ( ) ) { if ( org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType . java.lang.String ( ) . boolean ( java.lang.String ) ) { return org.springframework.data.gemfire.function.config.TypeFilterParser.FilterType ; } } throw new java.lang.IllegalArgumentException ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> org.w3c.dom.Element org.w3c.dom.Element ( org.w3c.dom.Node org.w3c.dom.Node ) { if ( org.w3c.dom.Node . short ( ) == org.w3c.dom.Node . short ) { java.lang.String java.lang.String = org.w3c.dom.Node . java.lang.String ( ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { return ( org.w3c.dom.Element ) org.w3c.dom.Node ; } } return null ; }  <METHOD_END>
