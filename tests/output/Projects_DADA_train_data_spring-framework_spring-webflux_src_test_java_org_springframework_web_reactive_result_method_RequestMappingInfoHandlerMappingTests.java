<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping = new org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping ( ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestController ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING , STRING } ; RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo = paths ( java.lang.String[] ) . build ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getMappingPathPatterns ( org.springframework.web.reactive.result.method.RequestMappingInfo ) ; assertEquals ( new java.util.HashSet <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) , java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestController .class ) . annot ( getMapping ( STRING ) . params ( ) ) . resolveMethod ( ) ; ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; HandlerMethod org.springframework.web.reactive.result.method.HandlerMethod = ( HandlerMethod ) this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) . block ( ) ; assertEquals ( java.lang.reflect.Method , org.springframework.web.reactive.result.method.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestController .class ) . annot ( requestMapping ( STRING ) . method ( GET , HEAD ) ) . resolveMethod ( ) ; ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; HandlerMethod org.springframework.web.reactive.result.method.HandlerMethod = ( HandlerMethod ) this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) . block ( ) ; assertEquals ( java.lang.reflect.Method , org.springframework.web.reactive.result.method.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestController .class ) . annot ( requestMapping ( STRING ) ) . resolveMethod ( ) ; ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; HandlerMethod org.springframework.web.reactive.result.method.HandlerMethod = ( HandlerMethod ) this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) . block ( ) ; assertEquals ( java.lang.reflect.Method , org.springframework.web.reactive.result.method.HandlerMethod . getMethod ( ) ) ; org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; org.springframework.web.reactive.result.method.HandlerMethod = ( HandlerMethod ) this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) . block ( ) ; assertEquals ( java.lang.reflect.Method , org.springframework.web.reactive.result.method.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestController .class ) . annot ( getMapping ( STRING ) . params ( STRING ) ) . resolveMethod ( ) ; ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; HandlerMethod org.springframework.web.reactive.result.method.HandlerMethod = ( HandlerMethod ) this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) . block ( ) ; assertEquals ( java.lang.reflect.Method , org.springframework.web.reactive.result.method.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = MockServerHttpRequest . post ( STRING ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; void ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> , MethodNotAllowedException .class , ex -> assertEquals ( EnumSet . of ( HttpMethod . GET , HttpMethod . HEAD ) , ex . getSupportedMethods ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . accept ( MediaType . APPLICATION_XML ) . toExchange ( ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.UserController ( ) ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> ) . expectError ( NotAcceptableStatusException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = MockServerHttpRequest . put ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; void ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> , UnsupportedMediaTypeStatusException .class , ex -> assertEquals ( STRING + STRING , ex . getMessage ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; void ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> , ServerWebInputException .class , ex -> { assertThat ( ex . getReason ( ) , containsString ( STRING ) ) ; assertThat ( ex . getReason ( ) , containsString ( STRING ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.util.EnumSet . java.util.EnumSet ( HttpMethod . GET , HttpMethod . HEAD ) ) ; void ( STRING , java.util.EnumSet . java.util.EnumSet ( HttpMethod . PUT ) ) ; void ( STRING , java.util.EnumSet . java.util.EnumSet ( HttpMethod . GET , HttpMethod . HEAD , HttpMethod . POST , HttpMethod . PUT , HttpMethod . PATCH , HttpMethod . DELETE , HttpMethod . OPTIONS ) ) ; void ( STRING , java.util.EnumSet . java.util.EnumSet ( HttpMethod . PUT , HttpMethod . POST ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . accept ( MediaType . APPLICATION_XML ) . toExchange ( ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) . block ( ) ; java.lang.String java.lang.String = HandlerMapping . PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE ; assertEquals ( java.util.Collections . java.util.Set ( MediaType . APPLICATION_XML ) , org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . get ( java.lang.String ) ) ; org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) . toExchange ( ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) . block ( ) ; assertNull ( STRING , org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . get ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( java.lang.String ) . toExchange ( ) ; RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo = paths ( STRING ) . build ( ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . handleMatch ( org.springframework.web.reactive.result.method.RequestMappingInfo , java.lang.String , org.springframework.web.reactive.result.method.ServerWebExchange ) ; java.lang.String java.lang.String = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . get ( java.lang.String ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo = paths ( STRING ) . build ( ) ; java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING ) ; ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = MockServerHttpRequest . method ( HttpMethod . GET , java.net.URI ) . toExchange ( ) ; HttpRequestPathHelper org.springframework.web.reactive.result.method.HttpRequestPathHelper = new HttpRequestPathHelper ( ) ; org.springframework.web.reactive.result.method.HttpRequestPathHelper . setUrlDecode ( false ) ; java.lang.String java.lang.String = org.springframework.web.reactive.result.method.HttpRequestPathHelper . getLookupPathForRequest ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . setPathHelper ( org.springframework.web.reactive.result.method.HttpRequestPathHelper ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . handleMatch ( org.springframework.web.reactive.result.method.RequestMappingInfo , java.lang.String , org.springframework.web.reactive.result.method.ServerWebExchange ) ; java.lang.String java.lang.String = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . get ( java.lang.String ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo = paths ( STRING , STRING ) . build ( ) ; ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . handleMatch ( org.springframework.web.reactive.result.method.RequestMappingInfo , STRING , org.springframework.web.reactive.result.method.ServerWebExchange ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . get ( HandlerMapping . BEST_MATCHING_PATTERN_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo = paths ( ) . build ( ) ; ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . handleMatch ( org.springframework.web.reactive.result.method.RequestMappingInfo , STRING , org.springframework.web.reactive.result.method.ServerWebExchange ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . get ( HandlerMapping . BEST_MATCHING_PATTERN_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ; ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.result.method.ServerWebExchange , STRING , STRING ) ; org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.method.ServerWebExchange , STRING ) ; java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.result.method.ServerWebExchange , STRING , STRING ) ; org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.method.ServerWebExchange , STRING ) ; java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.result.method.ServerWebExchange , STRING , STRING ) ; org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.method.ServerWebExchange , STRING ) ; java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestPathHelper org.springframework.web.reactive.result.method.HttpRequestPathHelper = new HttpRequestPathHelper ( ) ; org.springframework.web.reactive.result.method.HttpRequestPathHelper . setUrlDecode ( false ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . setPathHelper ( org.springframework.web.reactive.result.method.HttpRequestPathHelper ) ; ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( STRING ) . toExchange ( ) ; void ( org.springframework.web.reactive.result.method.ServerWebExchange , STRING , STRING ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.method.ServerWebExchange , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > void void ( Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> , final java.lang.Class<T> < T > java.lang.Class<T> , final java.util.function.Consumer<T> < T > java.util.function.Consumer<T> ) { StepVerifier . create ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> ) . consumeErrorWith ( error -> { assertEquals ( exceptionClass , error . getClass ( ) ) ; consumer . accept ( ( T ) error ) ; } ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = MockServerHttpRequest . put ( java.lang.String ) . contentType ( MediaType . APPLICATION_JSON ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; void ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> , UnsupportedMediaTypeStatusException .class , ex -> assertEquals ( STRING , Collections . singletonList ( new MediaType ( STRING , STRING ) ) , ex . getSupportedMediaTypes ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> ) throws java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = MockServerHttpRequest . options ( java.lang.String ) . toExchange ( ) ; HandlerMethod org.springframework.web.reactive.result.method.HandlerMethod = ( HandlerMethod ) this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) . block ( ) ; BindingContext org.springframework.web.reactive.result.method.BindingContext = new BindingContext ( ) ; InvocableHandlerMethod org.springframework.web.reactive.result.method.InvocableHandlerMethod = new InvocableHandlerMethod ( org.springframework.web.reactive.result.method.HandlerMethod ) ; Mono < HandlerResult > org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> = org.springframework.web.reactive.result.method.InvocableHandlerMethod . invoke ( org.springframework.web.reactive.result.method.ServerWebExchange , org.springframework.web.reactive.result.method.BindingContext ) ; HandlerResult org.springframework.web.reactive.result.method.HandlerResult = org.springframework.web.reactive.result.method.Mono<org.springframework.web.reactive.result.method.HandlerResult> . block ( ) ; assertNotNull ( org.springframework.web.reactive.result.method.HandlerResult ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.web.reactive.result.method.HandlerResult . getReturnValue ( ) ; assertTrue ( java.util.Optional<java.lang.Object> . boolean ( ) ) ; assertEquals ( HttpHeaders .class , java.util.Optional<java.lang.Object> . java.lang.Object ( ) . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( java.util.Set<org.springframework.web.reactive.result.method.HttpMethod> , ( ( HttpHeaders ) java.util.Optional<java.lang.Object> . java.lang.Object ( ) ) . getAllow ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange = get ( java.lang.String ) . accept ( MediaType . APPLICATION_JSON ) . toExchange ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.reactive.result.method.ServerWebExchange ) ; void ( org.springframework.web.reactive.result.method.Mono<java.lang.Object> , NotAcceptableStatusException .class , ex -> assertEquals ( STRING , Collections . singletonList ( new MediaType ( STRING , STRING ) ) , ex . getSupportedMediaTypes ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange , java.lang.String java.lang.String , java.lang.String java.lang.String ) { RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo = paths ( java.lang.String ) . build ( ) ; this . org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . handleMatch ( org.springframework.web.reactive.result.method.RequestMappingInfo , java.lang.String , org.springframework.web.reactive.result.method.ServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ( ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange , java.lang.String java.lang.String ) { java.lang.String java.lang.String = HandlerMapping . MATRIX_VARIABLES_ATTRIBUTE ; return ( ( java.util.Map<java.lang.String,org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > ) org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . get ( java.lang.String ) ) . org.springframework.web.reactive.result.method.MultiValueMap<java.lang.String,java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ServerWebExchange org.springframework.web.reactive.result.method.ServerWebExchange ) { java.lang.String java.lang.String = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; return ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.reactive.result.method.ServerWebExchange . getAttributes ( ) . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ GetMapping ( path = STRING , params = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = { GET , HEAD } ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ PutMapping ( path = STRING , consumes = STRING ) public void void ( @ RequestBody java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , params = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , params = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = OPTIONS ) public org.springframework.web.reactive.result.method.HttpHeaders org.springframework.web.reactive.result.method.HttpHeaders ( ) { HttpHeaders org.springframework.web.reactive.result.method.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.result.method.HttpHeaders . add ( STRING , STRING ) ; return org.springframework.web.reactive.result.method.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( path = STRING , produces = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ PutMapping ( path = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object ) { super. detectHandlerMethods ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return AnnotationUtils . findAnnotation ( java.lang.Class<> , RequestMapping .class ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.RequestMappingInfo org.springframework.web.reactive.result.method.RequestMappingInfo ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { RequestMapping org.springframework.web.reactive.result.method.RequestMapping = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , RequestMapping .class ) ; if ( org.springframework.web.reactive.result.method.RequestMapping != null ) { BuilderConfiguration org.springframework.web.reactive.result.method.BuilderConfiguration = new BuilderConfiguration ( ) ; org.springframework.web.reactive.result.method.BuilderConfiguration . setPathHelper ( getPathHelper ( ) ) ; org.springframework.web.reactive.result.method.BuilderConfiguration . setPathMatcher ( getPathMatcher ( ) ) ; org.springframework.web.reactive.result.method.BuilderConfiguration . setSuffixPatternMatch ( true ) ; org.springframework.web.reactive.result.method.BuilderConfiguration . setTrailingSlashMatch ( true ) ; return paths ( org.springframework.web.reactive.result.method.RequestMapping . value ( ) ) . methods ( org.springframework.web.reactive.result.method.RequestMapping . method ( ) ) . params ( org.springframework.web.reactive.result.method.RequestMapping . params ( ) ) . headers ( org.springframework.web.reactive.result.method.RequestMapping . headers ( ) ) . consumes ( org.springframework.web.reactive.result.method.RequestMapping . consumes ( ) ) . produces ( org.springframework.web.reactive.result.method.RequestMapping . produces ( ) ) . options ( org.springframework.web.reactive.result.method.BuilderConfiguration ) . build ( ) ; } else { return null ; } }  <METHOD_END>
