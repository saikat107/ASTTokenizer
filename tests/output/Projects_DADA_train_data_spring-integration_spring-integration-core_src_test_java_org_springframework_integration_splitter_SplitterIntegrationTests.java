<METHOD_START> @ Before public void void ( ) { org.springframework.integration.splitter.SplitterIntegrationTests.Receiver . java.util.List<java.lang.String> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING ) public void void ( java.lang.String java.lang.String ) { this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Splitter ( inputChannel = STRING , outputChannel = STRING ) public java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> ( java.lang.String java.lang.String ) { return java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String . java.lang.String[] ( STRING ) ) . java.util.Iterator<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.splitter.MessageChannel . send ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; assertTrue ( this . org.springframework.integration.splitter.SplitterIntegrationTests.Receiver . java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( this . org.springframework.integration.splitter.SplitterIntegrationTests.Receiver . java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.splitter.MessageChannel . send ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; assertTrue ( org.springframework.integration.splitter.SplitterIntegrationTests.Receiver . java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( this . org.springframework.integration.splitter.SplitterIntegrationTests.Receiver . java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.splitter.MessageChannel . send ( new GenericMessage < java.util.List<java.lang.String> < java.lang.String > > ( java.util.List<java.lang.String> ) ) ; assertTrue ( org.springframework.integration.splitter.SplitterIntegrationTests.Receiver . java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( org.springframework.integration.splitter.SplitterIntegrationTests.Receiver . java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.splitter.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( org.springframework.integration.splitter.SplitterIntegrationTests.Receiver . java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Throwable { try { new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.splitter.SplitterIntegrationTests .class ) . close ( ) ; } catch ( BeanCreationException org.springframework.integration.splitter.BeanCreationException ) { java.lang.Throwable java.lang.Throwable = org.springframework.integration.splitter.BeanCreationException . getMostSpecificCause ( ) ; assertNotNull ( java.lang.Throwable ) ; assertTrue ( java.lang.Throwable instanceof java.lang.IllegalArgumentException ) ; assertTrue ( java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; throw java.lang.Throwable ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Throwable { try { new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.splitter.SplitterIntegrationTests .class ) . close ( ) ; } catch ( BeanCreationException org.springframework.integration.splitter.BeanCreationException ) { java.lang.Throwable java.lang.Throwable = org.springframework.integration.splitter.BeanCreationException . getMostSpecificCause ( ) ; assertNotNull ( java.lang.Throwable ) ; assertTrue ( java.lang.Throwable instanceof java.lang.IllegalArgumentException ) ; assertTrue ( java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; throw java.lang.Throwable ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Throwable { try { new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.splitter.SplitterIntegrationTests .class ) . close ( ) ; } catch ( BeanCreationException org.springframework.integration.splitter.BeanCreationException ) { java.lang.Throwable java.lang.Throwable = org.springframework.integration.splitter.BeanCreationException . getMostSpecificCause ( ) ; assertNotNull ( java.lang.Throwable ) ; assertTrue ( java.lang.Throwable instanceof java.lang.IllegalArgumentException ) ; assertTrue ( java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ; throw java.lang.Throwable ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.splitter.MethodInvokingSplitter . setOutputChannel ( null ) ; Message < java.lang.String > org.springframework.integration.splitter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannelName ( STRING ) . build ( ) ; org.springframework.integration.splitter.MessageChannel . send ( org.springframework.integration.splitter.Message<java.lang.String> ) ; }  <METHOD_END>
