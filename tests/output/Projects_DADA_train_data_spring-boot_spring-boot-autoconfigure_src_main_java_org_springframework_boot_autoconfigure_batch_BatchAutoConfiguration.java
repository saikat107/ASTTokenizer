<METHOD_START> public void ( BatchProperties org.springframework.boot.autoconfigure.batch.BatchProperties , ObjectProvider < JobParametersConverter > org.springframework.boot.autoconfigure.batch.ObjectProvider<org.springframework.boot.autoconfigure.batch.JobParametersConverter> ) { this . org.springframework.boot.autoconfigure.batch.BatchProperties = org.springframework.boot.autoconfigure.batch.BatchProperties ; this . org.springframework.boot.autoconfigure.batch.JobParametersConverter = org.springframework.boot.autoconfigure.batch.ObjectProvider<org.springframework.boot.autoconfigure.batch.JobParametersConverter> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean @ ConditionalOnBean ( javax.sql.DataSource .class ) public org.springframework.boot.autoconfigure.batch.BatchDatabaseInitializer org.springframework.boot.autoconfigure.batch.BatchDatabaseInitializer ( javax.sql.DataSource javax.sql.DataSource , ResourceLoader org.springframework.boot.autoconfigure.batch.ResourceLoader ) { return new BatchDatabaseInitializer ( javax.sql.DataSource , org.springframework.boot.autoconfigure.batch.ResourceLoader , this . org.springframework.boot.autoconfigure.batch.BatchProperties ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean @ ConditionalOnProperty ( prefix = STRING , name = STRING , havingValue = STRING , matchIfMissing = true ) public org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner ( JobLauncher org.springframework.boot.autoconfigure.batch.JobLauncher , JobExplorer org.springframework.boot.autoconfigure.batch.JobExplorer ) { JobLauncherCommandLineRunner org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner = new JobLauncherCommandLineRunner ( org.springframework.boot.autoconfigure.batch.JobLauncher , org.springframework.boot.autoconfigure.batch.JobExplorer ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.batch.BatchProperties . getJob ( ) . getNames ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . setJobNames ( java.lang.String ) ; } return org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( ExitCodeGenerator .class ) public org.springframework.boot.autoconfigure.batch.JobExecutionExitCodeGenerator org.springframework.boot.autoconfigure.batch.JobExecutionExitCodeGenerator ( ) { return new JobExecutionExitCodeGenerator ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean @ ConditionalOnBean ( javax.sql.DataSource .class ) public org.springframework.boot.autoconfigure.batch.JobExplorer org.springframework.boot.autoconfigure.batch.JobExplorer ( javax.sql.DataSource javax.sql.DataSource ) throws java.lang.Exception { JobExplorerFactoryBean org.springframework.boot.autoconfigure.batch.JobExplorerFactoryBean = new JobExplorerFactoryBean ( ) ; org.springframework.boot.autoconfigure.batch.JobExplorerFactoryBean . setDataSource ( javax.sql.DataSource ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.batch.BatchProperties . getTablePrefix ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.boot.autoconfigure.batch.JobExplorerFactoryBean . setTablePrefix ( java.lang.String ) ; } org.springframework.boot.autoconfigure.batch.JobExplorerFactoryBean . afterPropertiesSet ( ) ; return org.springframework.boot.autoconfigure.batch.JobExplorerFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( JobOperator .class ) public org.springframework.boot.autoconfigure.batch.SimpleJobOperator org.springframework.boot.autoconfigure.batch.SimpleJobOperator ( JobExplorer org.springframework.boot.autoconfigure.batch.JobExplorer , JobLauncher org.springframework.boot.autoconfigure.batch.JobLauncher , ListableJobLocator org.springframework.boot.autoconfigure.batch.ListableJobLocator , JobRepository org.springframework.boot.autoconfigure.batch.JobRepository )					throws java.lang.Exception { SimpleJobOperator org.springframework.boot.autoconfigure.batch.SimpleJobOperator = new SimpleJobOperator ( ) ; org.springframework.boot.autoconfigure.batch.SimpleJobOperator . setJobExplorer ( org.springframework.boot.autoconfigure.batch.JobExplorer ) ; org.springframework.boot.autoconfigure.batch.SimpleJobOperator . setJobLauncher ( org.springframework.boot.autoconfigure.batch.JobLauncher ) ; org.springframework.boot.autoconfigure.batch.SimpleJobOperator . setJobRegistry ( org.springframework.boot.autoconfigure.batch.ListableJobLocator ) ; org.springframework.boot.autoconfigure.batch.SimpleJobOperator . setJobRepository ( org.springframework.boot.autoconfigure.batch.JobRepository ) ; if ( this . org.springframework.boot.autoconfigure.batch.JobParametersConverter != null ) { org.springframework.boot.autoconfigure.batch.SimpleJobOperator . setJobParametersConverter ( this . org.springframework.boot.autoconfigure.batch.JobParametersConverter ) ; } return org.springframework.boot.autoconfigure.batch.SimpleJobOperator ; }  <METHOD_END>
<METHOD_START> protected void ( BatchProperties org.springframework.boot.autoconfigure.batch.BatchProperties ) { this . org.springframework.boot.autoconfigure.batch.BatchProperties = org.springframework.boot.autoconfigure.batch.BatchProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( name = STRING ) public org.springframework.boot.autoconfigure.batch.BasicBatchConfigurer org.springframework.boot.autoconfigure.batch.BasicBatchConfigurer ( javax.sql.DataSource javax.sql.DataSource , EntityManagerFactory org.springframework.boot.autoconfigure.batch.EntityManagerFactory , ObjectProvider < TransactionManagerCustomizers > org.springframework.boot.autoconfigure.batch.ObjectProvider<org.springframework.boot.autoconfigure.batch.TransactionManagerCustomizers> ) { return new BasicBatchConfigurer ( this . org.springframework.boot.autoconfigure.batch.BatchProperties , javax.sql.DataSource , org.springframework.boot.autoconfigure.batch.EntityManagerFactory , org.springframework.boot.autoconfigure.batch.ObjectProvider<org.springframework.boot.autoconfigure.batch.TransactionManagerCustomizers> . getIfAvailable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.autoconfigure.batch.BasicBatchConfigurer org.springframework.boot.autoconfigure.batch.BasicBatchConfigurer ( javax.sql.DataSource javax.sql.DataSource , ObjectProvider < TransactionManagerCustomizers > org.springframework.boot.autoconfigure.batch.ObjectProvider<org.springframework.boot.autoconfigure.batch.TransactionManagerCustomizers> ) { return new BasicBatchConfigurer ( this . org.springframework.boot.autoconfigure.batch.BatchProperties , javax.sql.DataSource , org.springframework.boot.autoconfigure.batch.ObjectProvider<org.springframework.boot.autoconfigure.batch.TransactionManagerCustomizers> . getIfAvailable ( ) ) ; }  <METHOD_END>
