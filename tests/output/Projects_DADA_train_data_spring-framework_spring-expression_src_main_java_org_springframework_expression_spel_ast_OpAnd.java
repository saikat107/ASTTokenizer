<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( STRING , int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); this . exitTypeDescriptor = STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { if ( boolean ( org.springframework.expression.spel.ast.ExpressionState , getLeftOperand ( ) ) == false ) { return BooleanTypedValue . FALSE ; } return BooleanTypedValue . forValue ( boolean ( org.springframework.expression.spel.ast.ExpressionState , getRightOperand ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ExpressionState org.springframework.expression.spel.ast.ExpressionState , SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl ) { try { java.lang.Boolean java.lang.Boolean = org.springframework.expression.spel.ast.SpelNodeImpl . getValue ( org.springframework.expression.spel.ast.ExpressionState , java.lang.Boolean .class ) ; void ( java.lang.Boolean ) ; return java.lang.Boolean ; } catch ( SpelEvaluationException org.springframework.expression.spel.ast.SpelEvaluationException ) { org.springframework.expression.spel.ast.SpelEvaluationException . setPosition ( org.springframework.expression.spel.ast.SpelNodeImpl . getStartPosition ( ) ) ; throw org.springframework.expression.spel.ast.SpelEvaluationException ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Boolean java.lang.Boolean ) { if ( java.lang.Boolean == null ) { throw new SpelEvaluationException ( SpelMessage . TYPE_CONVERSION_ERROR , STRING , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = getLeftOperand ( ) ; SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = getRightOperand ( ) ; return ( org.springframework.expression.spel.ast.SpelNodeImpl . isCompilable ( ) && org.springframework.expression.spel.ast.SpelNodeImpl . isCompilable ( ) && CodeFlow . isBooleanCompatible ( left . exitTypeDescriptor ) && CodeFlow . isBooleanCompatible ( right . exitTypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { Label org.springframework.expression.spel.ast.Label = new Label ( ) ; Label org.springframework.expression.spel.ast.Label = new Label ( ) ; org.springframework.expression.spel.ast.CodeFlow . enterCompilationScope ( ) ; getLeftOperand ( ) . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; org.springframework.expression.spel.ast.CodeFlow . unboxBooleanIfNecessary ( org.springframework.expression.spel.ast.MethodVisitor ) ; org.springframework.expression.spel.ast.CodeFlow . exitCompilationScope ( ) ; org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( IFNE , org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.MethodVisitor . visitLdcInsn ( NUMBER ) ; org.springframework.expression.spel.ast.MethodVisitor . visitJumpInsn ( GOTO , org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.MethodVisitor . visitLabel ( org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.CodeFlow . enterCompilationScope ( ) ; getRightOperand ( ) . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; org.springframework.expression.spel.ast.CodeFlow . unboxBooleanIfNecessary ( org.springframework.expression.spel.ast.MethodVisitor ) ; org.springframework.expression.spel.ast.CodeFlow . exitCompilationScope ( ) ; org.springframework.expression.spel.ast.MethodVisitor . visitLabel ( org.springframework.expression.spel.ast.Label ) ; org.springframework.expression.spel.ast.CodeFlow . pushDescriptor ( this . exitTypeDescriptor ) ; }  <METHOD_END>
