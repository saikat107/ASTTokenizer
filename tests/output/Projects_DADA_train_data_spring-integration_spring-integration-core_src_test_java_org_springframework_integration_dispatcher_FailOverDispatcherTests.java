<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { UnicastingDispatcher org.springframework.integration.dispatcher.UnicastingDispatcher = new UnicastingDispatcher ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.ServiceActivatingHandler ( TestHandlers . countDownHandler ( java.util.concurrent.CountDownLatch ) ) ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { UnicastingDispatcher org.springframework.integration.dispatcher.UnicastingDispatcher = new UnicastingDispatcher ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.ServiceActivatingHandler ( TestHandlers . countingCountDownHandler ( java.util.concurrent.atomic.AtomicInteger , java.util.concurrent.CountDownLatch ) ) ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.ServiceActivatingHandler ( TestHandlers . countingCountDownHandler ( java.util.concurrent.atomic.AtomicInteger , java.util.concurrent.CountDownLatch ) ) ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; assertEquals ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) + java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UnicastingDispatcher org.springframework.integration.dispatcher.UnicastingDispatcher = new UnicastingDispatcher ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; try { org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } assertEquals ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UnicastingDispatcher org.springframework.integration.dispatcher.UnicastingDispatcher = new UnicastingDispatcher ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . removeHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; try { org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UnicastingDispatcher org.springframework.integration.dispatcher.UnicastingDispatcher = new UnicastingDispatcher ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; try { org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . removeHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; try { org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . removeHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; try { org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { UnicastingDispatcher org.springframework.integration.dispatcher.UnicastingDispatcher = new UnicastingDispatcher ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; try { org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . removeHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UnicastingDispatcher org.springframework.integration.dispatcher.UnicastingDispatcher = new UnicastingDispatcher ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , true ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; assertTrue ( org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; assertEquals ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UnicastingDispatcher org.springframework.integration.dispatcher.UnicastingDispatcher = new UnicastingDispatcher ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , true ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; assertTrue ( org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; assertEquals ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UnicastingDispatcher org.springframework.integration.dispatcher.UnicastingDispatcher = new UnicastingDispatcher ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = new org.springframework.integration.dispatcher.FailOverDispatcherTests.CountingTestEndpoint ( java.util.concurrent.atomic.AtomicInteger , false ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; org.springframework.integration.dispatcher.UnicastingDispatcher . addHandler ( org.springframework.integration.dispatcher.MessageHandler ) ; try { assertFalse ( org.springframework.integration.dispatcher.UnicastingDispatcher . dispatch ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } assertEquals ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.dispatcher.ServiceActivatingHandler org.springframework.integration.dispatcher.ServiceActivatingHandler ( java.lang.Object java.lang.Object ) { return new ServiceActivatingHandler ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger , boolean boolean ) { this . java.util.concurrent.atomic.AtomicInteger = java.util.concurrent.atomic.AtomicInteger ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.dispatcher.Message<?> ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; if ( ! this . boolean ) { throw new MessageRejectedException ( org.springframework.integration.dispatcher.Message<> , STRING ) ; } }  <METHOD_END>
