<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers = new ModelResultMatchers ( ) ; ModelAndView org.springframework.test.web.servlet.result.ModelAndView = new ModelAndView ( STRING , STRING , STRING ) ; BindingResult org.springframework.test.web.servlet.result.BindingResult = new BeanPropertyBindingResult ( STRING , STRING ) ; org.springframework.test.web.servlet.result.ModelAndView . addObject ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.test.web.servlet.result.BindingResult ) ; this . org.springframework.test.web.servlet.result.MvcResult = org.springframework.test.web.servlet.result.MvcResult ( org.springframework.test.web.servlet.result.ModelAndView ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; BindingResult org.springframework.test.web.servlet.result.BindingResult = new BeanPropertyBindingResult ( java.util.Date , STRING ) ; org.springframework.test.web.servlet.result.BindingResult . rejectValue ( STRING , STRING ) ; ModelAndView org.springframework.test.web.servlet.result.ModelAndView = new ModelAndView ( STRING , STRING , STRING ) ; org.springframework.test.web.servlet.result.ModelAndView . addObject ( STRING , java.util.Date ) ; org.springframework.test.web.servlet.result.ModelAndView . addObject ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.test.web.servlet.result.BindingResult ) ; this . org.springframework.test.web.servlet.result.MvcResult = org.springframework.test.web.servlet.result.MvcResult ( org.springframework.test.web.servlet.result.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeExists ( STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeExists ( STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeDoesNotExist ( STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeDoesNotExist ( STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attribute ( STRING , is ( STRING ) ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attribute ( STRING , is ( STRING ) ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . hasNoErrors ( ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . hasNoErrors ( ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasErrors ( STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasErrors ( STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasNoErrors ( STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasNoErrors ( STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasNoErrors ( STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasFieldErrors ( STRING , STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasFieldErrors ( STRING , STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasFieldErrors ( STRING , STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasFieldErrors ( STRING , STRING , STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasFieldErrorCode ( STRING , STRING , STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasFieldErrorCode ( STRING , STRING , STRING ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasFieldErrorCode ( STRING , STRING , startsWith ( STRING ) ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.result.ModelResultMatchers . attributeHasFieldErrorCode ( STRING , STRING , startsWith ( STRING ) ) . match ( this . org.springframework.test.web.servlet.result.MvcResult ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.result.MvcResult org.springframework.test.web.servlet.result.MvcResult ( ModelAndView org.springframework.test.web.servlet.result.ModelAndView ) { return new StubMvcResult ( null , null , null , null , org.springframework.test.web.servlet.result.ModelAndView , null , null ) ; }  <METHOD_END>
