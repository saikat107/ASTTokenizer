<METHOD_START> public void ( LiveReloadServer org.springframework.boot.devtools.autoconfigure.LiveReloadServer ) { this . org.springframework.boot.devtools.autoconfigure.LiveReloadServer = org.springframework.boot.devtools.autoconfigure.LiveReloadServer ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) java.lang.Exception { if ( this . org.springframework.boot.devtools.autoconfigure.LiveReloadServer != null ) { try { if ( ! this . org.springframework.boot.devtools.autoconfigure.LiveReloadServer . isStarted ( ) ) { this . org.springframework.boot.devtools.autoconfigure.LiveReloadServer . start ( ) ; } org.springframework.boot.devtools.autoconfigure.Log . info ( STRING + this . org.springframework.boot.devtools.autoconfigure.LiveReloadServer . getPort ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.devtools.autoconfigure.Log . warn ( STRING ) ; org.springframework.boot.devtools.autoconfigure.Log . debug ( STRING , java.lang.Exception ) ; this . org.springframework.boot.devtools.autoconfigure.LiveReloadServer = null ; } } }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( this . org.springframework.boot.devtools.autoconfigure.LiveReloadServer != null ) { this . org.springframework.boot.devtools.autoconfigure.LiveReloadServer . triggerReload ( ) ; } }  <METHOD_END>
