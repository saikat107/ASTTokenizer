<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Set<java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter>> < java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> < ? extends TypeExcludeFilter > > java.util.Set<java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter>> ) { this . java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> = java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> ( java.lang.Class<> , java.util.Set<java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter>> ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> < TypeExcludeFilter > java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Set<java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter>> < java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> < ? extends TypeExcludeFilter > > java.util.Set<java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter>> ) { java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> < TypeExcludeFilter > java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> = new java.util.LinkedHashSet<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> <> ( ) ; for ( java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> < ? extends TypeExcludeFilter > java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> : java.util.Set<java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter>> ) { java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> . add ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter ( java.lang.Class<> , java.lang.Class<> ) ) ; } return java.util.Collections . java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> ( java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { try { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = java.lang.reflect.Constructor<?> ( java.lang.Class<> ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Constructor<> ) ; if ( java.lang.reflect.Constructor<> . java.lang.Class<?>[] ( ) . int == NUMBER ) { return ( TypeExcludeFilter ) java.lang.reflect.Constructor<> . newInstance ( java.lang.Class<> ) ; } return ( TypeExcludeFilter ) java.lang.reflect.Constructor<> . newInstance ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object != null && java.lang.Class<? extends org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer> ( ) . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) && this . java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> . equals ( ( ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer ) java.lang.Object ) . java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.test.autoconfigure.filter.ConfigurableApplicationContext , MergedContextConfiguration org.springframework.boot.test.autoconfigure.filter.MergedContextConfiguration ) { if ( ! this . java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> . isEmpty ( ) ) { org.springframework.boot.test.autoconfigure.filter.ConfigurableApplicationContext . getBeanFactory ( ) . registerSingleton ( java.lang.String , org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter ( ) { return new TypeExcludeFilter ( ) { @ java.lang.Override public boolean boolean ( MetadataReader org.springframework.boot.test.autoconfigure.filter.MetadataReader , MetadataReaderFactory org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) throws java.io.IOException { for ( TypeExcludeFilter org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter : org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer .this . java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> ) { if ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter . match ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ) { return true ; } } return false ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MetadataReader org.springframework.boot.test.autoconfigure.filter.MetadataReader , MetadataReaderFactory org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) throws java.io.IOException { for ( TypeExcludeFilter org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter : org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer .this . java.util.Set<org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter> ) { if ( org.springframework.boot.test.autoconfigure.filter.TypeExcludeFilter . match ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> ( java.lang.Class<?> < ? > java.lang.Class<?> )			throws java.lang.NoSuchMethodException { try { return java.lang.Class<> . java.lang.reflect.Constructor<> ( java.lang.Class .class ) ; } catch ( java.lang.Exception java.lang.Exception ) { return java.lang.Class<> . java.lang.reflect.Constructor<> ( ) ; } }  <METHOD_END>
