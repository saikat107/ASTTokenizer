<METHOD_START> protected void ( java.lang.Thread java.lang.Thread , java.lang.String [] java.lang.String[] , boolean boolean , RestartInitializer org.springframework.boot.devtools.restart.RestartInitializer ) { Assert . notNull ( java.lang.Thread , STRING ) ; Assert . notNull ( java.lang.String[] , STRING ) ; Assert . notNull ( org.springframework.boot.devtools.restart.RestartInitializer , STRING ) ; this . org.springframework.boot.devtools.restart.Log . debug ( STRING + java.lang.Thread ) ; SilentExitExceptionHandler . setup ( java.lang.Thread ) ; this . boolean = boolean ; this . java.net.URL[] = org.springframework.boot.devtools.restart.RestartInitializer . getInitialUrls ( java.lang.Thread ) ; this . java.lang.String = java.lang.String ( java.lang.Thread ) ; this . java.lang.ClassLoader = java.lang.Thread . java.lang.ClassLoader ( ) ; this . java.lang.String[] = java.lang.String[] ; this . java.lang.Thread.UncaughtExceptionHandler = java.lang.Thread . java.lang.Thread.UncaughtExceptionHandler ( ) ; this . java.util.concurrent.BlockingDeque<org.springframework.boot.devtools.restart.Restarter.LeakSafeThread> . boolean ( new org.springframework.boot.devtools.restart.Restarter.LeakSafeThread ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Thread java.lang.Thread ) { try { return new MainMethod ( java.lang.Thread ) . getDeclaringClassName ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { return null ; } }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean ) { void ( ) ; if ( this . java.net.URL[] != null ) { this . java.util.Set<java.net.URL> . boolean ( java.util.Arrays . java.util.List<java.net.URL> ( this . java.net.URL[] ) ) ; if ( boolean ) { this . org.springframework.boot.devtools.restart.Log . debug ( STRING ) ; void ( ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { try { org.springframework.boot.devtools.restart.Restarter.LeakSafeThread ( ) . java.lang.Void ( new java.util.concurrent.Callable<java.lang.Void> < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { void ( FailureHandler . NONE ) ; void ( ) ; return null ; } } ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.boot.devtools.restart.Log . warn ( STRING , java.lang.Exception ) ; } SilentExitExceptionHandler . exitCurrentThread ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { void ( FailureHandler . NONE ) ; void ( ) ; return null ; }  <METHOD_END>
<METHOD_START> private void void ( ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassNameReader .class ; java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<> . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; ( ( java.lang.Throwable ) java.lang.reflect.Field . java.lang.Object ( null ) ) . java.lang.Throwable ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.boot.devtools.restart.Log . warn ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<java.net.URL> < java.net.URL > java.util.Collection<java.net.URL> ) { Assert . notNull ( java.util.Collection<java.net.URL> , STRING ) ; this . java.util.Set<java.net.URL> . boolean ( java.util.Collection<java.net.URL> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ClassLoaderFiles org.springframework.boot.devtools.restart.ClassLoaderFiles ) { Assert . notNull ( org.springframework.boot.devtools.restart.ClassLoaderFiles , STRING ) ; this . org.springframework.boot.devtools.restart.ClassLoaderFiles . addAll ( org.springframework.boot.devtools.restart.ClassLoaderFiles ) ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory ( ) { return new org.springframework.boot.devtools.restart.Restarter.LeakSafeThreadFactory ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( FailureHandler . NONE ) ; }  <METHOD_END>
<METHOD_START> public void void ( final FailureHandler org.springframework.boot.devtools.restart.FailureHandler ) { if ( ! this . boolean ) { this . org.springframework.boot.devtools.restart.Log . debug ( STRING ) ; return; } this . org.springframework.boot.devtools.restart.Log . debug ( STRING ) ; org.springframework.boot.devtools.restart.Restarter.LeakSafeThread ( ) . void ( new java.util.concurrent.Callable<java.lang.Void> < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { org.springframework.boot.devtools.restart.Restarter .this . void ( ) ; org.springframework.boot.devtools.restart.Restarter .this . void ( org.springframework.boot.devtools.restart.FailureHandler ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { org.springframework.boot.devtools.restart.Restarter .this . void ( ) ; org.springframework.boot.devtools.restart.Restarter .this . void ( org.springframework.boot.devtools.restart.FailureHandler ) ; return null ; }  <METHOD_END>
<METHOD_START> protected void void ( FailureHandler org.springframework.boot.devtools.restart.FailureHandler ) throws java.lang.Exception { do { java.lang.Throwable java.lang.Throwable = java.lang.Throwable ( ) ; if ( java.lang.Throwable == null ) { return; } if ( org.springframework.boot.devtools.restart.FailureHandler . handle ( java.lang.Throwable ) == Outcome . ABORT ) { return; } } while ( true ); }  <METHOD_END>
<METHOD_START> private java.lang.Throwable java.lang.Throwable ( ) java.lang.Exception { Assert . notNull ( this . java.lang.String , STRING ) ; java.lang.ClassLoader java.lang.ClassLoader = this . java.lang.ClassLoader ; java.net.URL [] java.net.URL[] = this . java.util.Set<java.net.URL> . java.net.URL[] ( new java.net.URL [ this . java.util.Set<java.net.URL> . int ( ) ] ) ; ClassLoaderFiles org.springframework.boot.devtools.restart.ClassLoaderFiles = new ClassLoaderFiles ( this . org.springframework.boot.devtools.restart.ClassLoaderFiles ) ; java.lang.ClassLoader java.lang.ClassLoader = new RestartClassLoader ( java.lang.ClassLoader , java.net.URL[] , org.springframework.boot.devtools.restart.ClassLoaderFiles , this . org.springframework.boot.devtools.restart.Log ) ; if ( this . org.springframework.boot.devtools.restart.Log . isDebugEnabled ( ) ) { this . org.springframework.boot.devtools.restart.Log . debug ( STRING + this . java.lang.String + STRING + java.util.Arrays . java.util.List<java.net.URL> ( java.net.URL[] ) ) ; } return java.lang.Throwable ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Throwable java.lang.Throwable ( java.lang.ClassLoader java.lang.ClassLoader ) throws java.lang.Exception { RestartLauncher org.springframework.boot.devtools.restart.RestartLauncher = new RestartLauncher ( java.lang.ClassLoader , this . java.lang.String , this . java.lang.String[] , this . java.lang.Thread.UncaughtExceptionHandler ) ; org.springframework.boot.devtools.restart.RestartLauncher . start ( ) ; org.springframework.boot.devtools.restart.RestartLauncher . join ( ) ; return org.springframework.boot.devtools.restart.RestartLauncher . getError ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.Log . debug ( STRING ) ; this . java.util.concurrent.locks.Lock . void ( ) ; try { for ( ConfigurableApplicationContext org.springframework.boot.devtools.restart.ConfigurableApplicationContext : this . java.util.List<org.springframework.boot.devtools.restart.ConfigurableApplicationContext> ) { org.springframework.boot.devtools.restart.ConfigurableApplicationContext . close ( ) ; this . java.util.List<org.springframework.boot.devtools.restart.ConfigurableApplicationContext> . remove ( org.springframework.boot.devtools.restart.ConfigurableApplicationContext ) ; } void ( ) ; if ( this . boolean ) { void ( ) ; } } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } java.lang.System . void ( ) ; java.lang.System . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { java.beans.Introspector . void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { void ( ResolvableType .class , STRING ) ; void ( STRING , STRING ) ; void ( CachedIntrospectionResults .class , STRING ) ; void ( CachedIntrospectionResults .class , STRING ) ; void ( CachedIntrospectionResults .class , STRING ) ; void ( ReflectionUtils .class , STRING ) ; void ( ReflectionUtils .class , STRING ) ; void ( AnnotationUtils .class , STRING ) ; void ( AnnotationUtils .class , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { try { void ( java.lang.Class . java.lang.Class<?> ( java.lang.String ) , java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.boot.devtools.restart.Log . debug ( STRING + java.lang.String + STRING + java.lang.String , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<> . java.lang.reflect.Field ( java.lang.String ) ; java.lang.reflect.Field . void ( true ) ; java.lang.Object java.lang.Object = java.lang.reflect.Field . java.lang.Object ( null ) ; if ( java.lang.Object instanceof java.util.Set ) { ( ( java.util.Set<?> < ? > ) java.lang.Object ) . void ( ) ; } if ( java.lang.Object instanceof java.util.Map ) { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) ; for ( java.util.Iterator<?> < ? > java.util.Iterator<?> = java.util.Map<,> . java.util.Set<> ( ) . java.util.Iterator<> ( ) ; java.util.Iterator<> . boolean ( ) ;) { java.lang.Object java.lang.Object = java.util.Iterator<> . next ( ) ; if ( java.lang.Object instanceof java.lang.Class && ( ( java.lang.Class<?> < ? > ) java.lang.Object ) . java.lang.ClassLoader ( ) instanceof RestartClassLoader ) { java.util.Iterator<> . void ( ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( ) { try { final java.util.List<long[]> < long [] > java.util.List<long[]> = new java.util.LinkedList<long[]> <> ( ) ; while ( true ) { java.util.List<long[]> . boolean ( new long [ NUMBER ] ) ; } } catch ( final java.lang.OutOfMemoryError java.lang.OutOfMemoryError ) { } }  <METHOD_END>
<METHOD_START> void void ( ) { synchronized ( this . java.lang.Object ) { if ( ! boolean ( ) ) { this . org.springframework.boot.devtools.restart.Log = DeferredLog . replay ( this . org.springframework.boot.devtools.restart.Log , LogFactory . getLog ( java.lang.Class<? extends org.springframework.boot.devtools.restart.Restarter> ( ) ) ) ; this . boolean = true ; } } }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { synchronized ( this . java.lang.Object ) { return this . boolean ; } }  <METHOD_END>
<METHOD_START> void void ( ConfigurableApplicationContext org.springframework.boot.devtools.restart.ConfigurableApplicationContext ) { if ( org.springframework.boot.devtools.restart.ConfigurableApplicationContext != null && org.springframework.boot.devtools.restart.ConfigurableApplicationContext . getParent ( ) != null ) { return; } if ( org.springframework.boot.devtools.restart.ConfigurableApplicationContext instanceof GenericApplicationContext ) { void ( ( GenericApplicationContext ) org.springframework.boot.devtools.restart.ConfigurableApplicationContext ) ; } this . java.util.List<org.springframework.boot.devtools.restart.ConfigurableApplicationContext> . add ( org.springframework.boot.devtools.restart.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> void void ( ConfigurableApplicationContext org.springframework.boot.devtools.restart.ConfigurableApplicationContext ) { if ( org.springframework.boot.devtools.restart.ConfigurableApplicationContext != null ) { this . java.util.List<org.springframework.boot.devtools.restart.ConfigurableApplicationContext> . remove ( org.springframework.boot.devtools.restart.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> private void void ( GenericApplicationContext org.springframework.boot.devtools.restart.GenericApplicationContext ) { ResourceLoader org.springframework.boot.devtools.restart.ResourceLoader = new ClassLoaderFilesResourcePatternResolver ( org.springframework.boot.devtools.restart.GenericApplicationContext , this . org.springframework.boot.devtools.restart.ClassLoaderFiles ) ; org.springframework.boot.devtools.restart.GenericApplicationContext . setResourceLoader ( org.springframework.boot.devtools.restart.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.restart.Restarter.LeakSafeThread org.springframework.boot.devtools.restart.Restarter.LeakSafeThread ( ) { try { return this . java.util.concurrent.BlockingDeque<org.springframework.boot.devtools.restart.Restarter.LeakSafeThread> . org.springframework.boot.devtools.restart.Restarter.LeakSafeThread ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( java.lang.InterruptedException ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( final java.lang.String java.lang.String , final ObjectFactory < ? > org.springframework.boot.devtools.restart.ObjectFactory<?> ) { synchronized ( this . java.util.Map<java.lang.String,java.lang.Object> ) { if ( ! this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.boot.devtools.restart.ObjectFactory<> . getObject ( ) ) ; } return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { synchronized ( this . java.util.Map<java.lang.String,java.lang.Object> ) { return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public java.net.URL [] java.net.URL[] ( ) { return this . java.net.URL[] ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { void ( java.lang.String[] , false , RestartInitializer . NONE ) ; org.springframework.boot.devtools.restart.Restarter ( ) . void ( false ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { void ( java.lang.String[] , false , new DefaultRestartInitializer ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] , RestartInitializer org.springframework.boot.devtools.restart.RestartInitializer ) { void ( java.lang.String[] , false , org.springframework.boot.devtools.restart.RestartInitializer , true ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] , boolean boolean ) { void ( java.lang.String[] , boolean , new DefaultRestartInitializer ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] , boolean boolean , RestartInitializer org.springframework.boot.devtools.restart.RestartInitializer ) { void ( java.lang.String[] , boolean , org.springframework.boot.devtools.restart.RestartInitializer , true ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] , boolean boolean , RestartInitializer org.springframework.boot.devtools.restart.RestartInitializer , boolean boolean ) { org.springframework.boot.devtools.restart.Restarter org.springframework.boot.devtools.restart.Restarter = null ; synchronized ( java.lang.Object ) { if ( org.springframework.boot.devtools.restart.Restarter == null ) { org.springframework.boot.devtools.restart.Restarter = new org.springframework.boot.devtools.restart.Restarter ( java.lang.Thread . java.lang.Thread ( ) , java.lang.String[] , boolean , org.springframework.boot.devtools.restart.RestartInitializer ) ; org.springframework.boot.devtools.restart.Restarter = org.springframework.boot.devtools.restart.Restarter ; } } if ( org.springframework.boot.devtools.restart.Restarter != null ) { org.springframework.boot.devtools.restart.Restarter . void ( boolean ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.devtools.restart.Restarter org.springframework.boot.devtools.restart.Restarter ( ) { synchronized ( java.lang.Object ) { Assert . state ( org.springframework.boot.devtools.restart.Restarter != null , STRING ) ; return org.springframework.boot.devtools.restart.Restarter ; } }  <METHOD_END>
<METHOD_START> final static void void ( org.springframework.boot.devtools.restart.Restarter org.springframework.boot.devtools.restart.Restarter ) { synchronized ( java.lang.Object ) { org.springframework.boot.devtools.restart.Restarter . org.springframework.boot.devtools.restart.Restarter = org.springframework.boot.devtools.restart.Restarter ; } }  <METHOD_END>
<METHOD_START> public static void void ( ) { synchronized ( java.lang.Object ) { org.springframework.boot.devtools.restart.Restarter = null ; } }  <METHOD_END>
<METHOD_START> void ( ) { void ( false ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Callable<?> < ? > java.util.concurrent.Callable<?> ) { this . java.util.concurrent.Callable<?> = java.util.concurrent.Callable<> ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < V > V V ( java.util.concurrent.Callable<V> < V > java.util.concurrent.Callable<V> ) { this . java.util.concurrent.Callable<?> = java.util.concurrent.Callable<V> ; void ( ) ; try { void ( ) ; return ( V ) this . java.lang.Object ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( java.lang.InterruptedException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { org.springframework.boot.devtools.restart.Restarter .this . java.util.concurrent.BlockingDeque<org.springframework.boot.devtools.restart.Restarter.LeakSafeThread> . void ( new org.springframework.boot.devtools.restart.Restarter.LeakSafeThread ( ) ) ; this . java.lang.Object = this . java.util.concurrent.Callable<> . call ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; java.lang.System . void ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Thread java.lang.Thread ( final java.lang.Runnable java.lang.Runnable ) { return org.springframework.boot.devtools.restart.Restarter.LeakSafeThread ( ) . java.lang.Thread ( new java.util.concurrent.Callable<java.lang.Thread> < java.lang.Thread > ( ) { @ java.lang.Override public java.lang.Thread java.lang.Thread ( ) java.lang.Exception { java.lang.Thread java.lang.Thread = new java.lang.Thread ( java.lang.Runnable ) ; java.lang.Thread . void ( org.springframework.boot.devtools.restart.Restarter .this . java.lang.ClassLoader ) ; return java.lang.Thread ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Thread java.lang.Thread ( ) java.lang.Exception { java.lang.Thread java.lang.Thread = new java.lang.Thread ( java.lang.Runnable ) ; java.lang.Thread . void ( org.springframework.boot.devtools.restart.Restarter .this . java.lang.ClassLoader ) ; return java.lang.Thread ; }  <METHOD_END>
