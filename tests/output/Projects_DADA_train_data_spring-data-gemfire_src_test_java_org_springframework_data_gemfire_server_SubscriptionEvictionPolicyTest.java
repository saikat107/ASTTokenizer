<METHOD_START> @ Test public void void ( ) { assertEquals ( ClientSubscriptionConfig . DEFAULT_EVICTION_POLICY . toLowerCase ( ) , SubscriptionEvictionPolicy . DEFAULT . name ( ) . toLowerCase ( ) ) ; assertSame ( SubscriptionEvictionPolicy . NONE , SubscriptionEvictionPolicy . DEFAULT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( SubscriptionEvictionPolicy . ENTRY , SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( SubscriptionEvictionPolicy . MEM , SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( SubscriptionEvictionPolicy . NONE , SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( SubscriptionEvictionPolicy . NONE , SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( SubscriptionEvictionPolicy . NONE , SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertNull ( SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertNull ( SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertNull ( SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertNull ( SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertNull ( SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertNull ( SubscriptionEvictionPolicy . valueOfIgnoreCase ( STRING ) ) ; assertNull ( SubscriptionEvictionPolicy . valueOfIgnoreCase ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientSubscriptionConfig org.springframework.data.gemfire.server.ClientSubscriptionConfig = mock ( ClientSubscriptionConfig .class , STRING ) ; ClientSubscriptionConfig org.springframework.data.gemfire.server.ClientSubscriptionConfig = SubscriptionEvictionPolicy . MEM . setEvictionPolicy ( org.springframework.data.gemfire.server.ClientSubscriptionConfig ) ; assertSame ( org.springframework.data.gemfire.server.ClientSubscriptionConfig , org.springframework.data.gemfire.server.ClientSubscriptionConfig ) ; verify ( org.springframework.data.gemfire.server.ClientSubscriptionConfig , times ( NUMBER ) ) . setEvictionPolicy ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( SubscriptionEvictionPolicy . ENTRY . setEvictionPolicy ( null ) ) ; }  <METHOD_END>
