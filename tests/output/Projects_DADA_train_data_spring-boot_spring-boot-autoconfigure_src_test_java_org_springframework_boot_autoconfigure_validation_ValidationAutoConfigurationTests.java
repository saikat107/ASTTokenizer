<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.SampleService .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.SampleService org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.SampleService = this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.SampleService .class ) ; org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.SampleService . void ( STRING ) ; this . org.springframework.boot.autoconfigure.validation.ExpectedException . expect ( ConstraintViolationException .class ) ; org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.SampleService . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.DefaultAnotherSampleService .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.DefaultAnotherSampleService org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.DefaultAnotherSampleService = this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.DefaultAnotherSampleService .class ) ; org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.DefaultAnotherSampleService . void ( NUMBER ) ; this . org.springframework.boot.autoconfigure.validation.ExpectedException . expect ( ConstraintViolationException .class ) ; org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.DefaultAnotherSampleService . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.validation.ValidationAutoConfigurationTests.SampleConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . getBeansOfType ( Validator .class ) ) . hasSize ( NUMBER ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . getBean ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . getBean ( MethodValidationPostProcessor .class ) ) . isSameAs ( java.lang.Object ) ; assertThat ( this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . getBeansOfType ( MethodValidationPostProcessor .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . getBean ( Validator .class ) ) . isNotSameAs ( new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; if ( java.lang.Class<> != null ) { org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; } org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . register ( ValidationAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.validation.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> public void void ( @ Size ( min = NUMBER , max = NUMBER ) java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> void void ( @ Min ( NUMBER ) java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Integer java.lang.Integer ) {		}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.validation.MethodValidationPostProcessor org.springframework.boot.autoconfigure.validation.MethodValidationPostProcessor ( ) { return new MethodValidationPostProcessor ( ) ; }  <METHOD_END>
