<METHOD_START> @ Before @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { org.springframework.data.repository.support.DomainClassConverter = new DomainClassConverter ( org.springframework.data.repository.support.DefaultConversionService ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.data.repository.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.data.repository.support.GenericApplicationContext . refresh ( ) ; org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.GenericApplicationContext ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.ApplicationContext ( ) ) ; when ( org.springframework.data.repository.support.DefaultConversionService . canConvert ( java.lang.String .class , java.lang.Long .class ) ) . thenReturn ( true ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.ApplicationContext ( ) ) ; when ( org.springframework.data.repository.support.DefaultConversionService . canConvert ( java.lang.String .class , java.lang.Long .class ) ) . thenReturn ( false ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertThat ( org.springframework.data.repository.support.DomainClassConverter . convert ( null , org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertThat ( org.springframework.data.repository.support.DomainClassConverter . convert ( STRING , org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { assertThat ( org.springframework.data.repository.support.DomainClassConverter . matches ( org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ) . isEqualTo ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.data.repository.support.ApplicationContext = org.springframework.data.repository.support.ApplicationContext ( ) ; org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.ApplicationContext ) ; doReturn ( NUMBER ) . when ( org.springframework.data.repository.support.DefaultConversionService ) . convert ( any ( ) , eq ( java.lang.Long .class ) ) ; org.springframework.data.repository.support.DomainClassConverter . convert ( STRING , org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ; org.springframework.data.repository.support.DomainClassConverterUnitTests.UserRepository org.springframework.data.repository.support.DomainClassConverterUnitTests.UserRepository = org.springframework.data.repository.support.ApplicationContext . getBean ( org.springframework.data.repository.support.DomainClassConverterUnitTests.UserRepository .class ) ; org.springframework.data.repository.support.DomainClassConverterUnitTests.UserRepository org.springframework.data.repository.support.DomainClassConverterUnitTests.UserRepository = ( org.springframework.data.repository.support.DomainClassConverterUnitTests.UserRepository ) ( ( Advised ) org.springframework.data.repository.support.DomainClassConverterUnitTests.UserRepository ) . getTargetSource ( ) . getTarget ( ) ; verify ( org.springframework.data.repository.support.DomainClassConverterUnitTests.UserRepository , times ( NUMBER ) ) . findOne ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.data.repository.support.ApplicationContext = org.springframework.data.repository.support.ApplicationContext ( ) ; GenericApplicationContext org.springframework.data.repository.support.GenericApplicationContext = new GenericApplicationContext ( org.springframework.data.repository.support.ApplicationContext ) ; org.springframework.data.repository.support.GenericApplicationContext . refresh ( ) ; when ( org.springframework.data.repository.support.DefaultConversionService . canConvert ( java.lang.String .class , java.lang.Long .class ) ) . thenReturn ( true ) ; org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.GenericApplicationContext ) ; assertThat ( org.springframework.data.repository.support.DomainClassConverter . matches ( org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.ApplicationContext ( ) ) ; assertThat ( org.springframework.data.repository.support.DomainClassConverter . matches ( org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ) . isFalse ( ) ; assertThat ( ( org.springframework.data.repository.support.DomainClassConverterUnitTests.User ) org.springframework.data.repository.support.DomainClassConverter . convert ( org.springframework.data.repository.support.DomainClassConverterUnitTests.User , org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ) . isEqualTo ( org.springframework.data.repository.support.DomainClassConverterUnitTests.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.ApplicationContext ( ) ) ; assertThat ( org.springframework.data.repository.support.DomainClassConverter . matches ( org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.ApplicationContext ( ) ) ; assertThat ( org.springframework.data.repository.support.DomainClassConverter . matches ( org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.ApplicationContext ( ) ) ; when ( org.springframework.data.repository.support.DefaultConversionService . canConvert ( java.lang.Long .class , java.lang.String .class ) ) . thenReturn ( true ) ; assertThat ( org.springframework.data.repository.support.DomainClassConverter . matches ( org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.ApplicationContext ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) DomainClassConverter . DomainClassConverter DomainClassConverter.ToIdConverter = ( ToIdConverter ) ReflectionTestUtils . getField ( org.springframework.data.repository.support.DomainClassConverter , STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.DomainClassConverterUnitTests.Wrapper .class . java.lang.reflect.Method ( STRING , org.springframework.data.repository.support.DomainClassConverterUnitTests.User .class ) ; TypeDescriptor org.springframework.data.repository.support.TypeDescriptor = TypeDescriptor . nested ( new MethodParameter ( java.lang.reflect.Method , NUMBER ) , NUMBER ) ; assertThat ( DomainClassConverter.ToIdConverter . matches ( org.springframework.data.repository.support.TypeDescriptor , org.springframework.data.repository.support.TypeDescriptor ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.support.ApplicationContext org.springframework.data.repository.support.ApplicationContext ( ) { BeanDefinitionBuilder org.springframework.data.repository.support.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( DummyRepositoryFactoryBean .class ) ; org.springframework.data.repository.support.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.data.repository.support.DomainClassConverterUnitTests.UserRepository .class ) ; DefaultListableBeanFactory org.springframework.data.repository.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.data.repository.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.data.repository.support.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; GenericApplicationContext org.springframework.data.repository.support.GenericApplicationContext = new GenericApplicationContext ( org.springframework.data.repository.support.DefaultListableBeanFactory ) ; org.springframework.data.repository.support.GenericApplicationContext . refresh ( ) ; return org.springframework.data.repository.support.GenericApplicationContext ; }  <METHOD_END>
<METHOD_START> void void ( @ ModelAttribute org.springframework.data.repository.support.DomainClassConverterUnitTests.User org.springframework.data.repository.support.DomainClassConverterUnitTests.User );  <METHOD_END>
