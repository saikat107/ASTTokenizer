<METHOD_START> public void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , MethodFilter org.springframework.expression.spel.support.MethodFilter ) { if ( this . java.util.Map<java.lang.Class<?>,org.springframework.expression.spel.support.MethodFilter> == null ) { this . java.util.Map<java.lang.Class<?>,org.springframework.expression.spel.support.MethodFilter> = new java.util.HashMap <> ( ) ; } if ( org.springframework.expression.spel.support.MethodFilter != null ) { this . java.util.Map<java.lang.Class<?>,org.springframework.expression.spel.support.MethodFilter> . put ( java.lang.Class<> , org.springframework.expression.spel.support.MethodFilter ) ; } else { this . java.util.Map<java.lang.Class<?>,org.springframework.expression.spel.support.MethodFilter> . remove ( java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.support.MethodExecutor org.springframework.expression.spel.support.MethodExecutor ( EvaluationContext org.springframework.expression.spel.support.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> ) throws org.springframework.expression.spel.support.AccessException { try { TypeConverter org.springframework.expression.spel.support.TypeConverter = org.springframework.expression.spel.support.EvaluationContext . getTypeConverter ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object instanceof java.lang.Class ? ( java.lang.Class<?> < ? > ) java.lang.Object : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method> <> ( java.util.Collection<java.lang.reflect.Method> ( java.lang.Class<> , java.lang.Object ) ) ; MethodFilter org.springframework.expression.spel.support.MethodFilter = ( this . java.util.Map<java.lang.Class<?>,org.springframework.expression.spel.support.MethodFilter> != null ? this . java.util.Map<java.lang.Class<?>,org.springframework.expression.spel.support.MethodFilter> . get ( java.lang.Class<> ) : null ) ; if ( org.springframework.expression.spel.support.MethodFilter != null ) { java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = org.springframework.expression.spel.support.MethodFilter . filter ( java.util.List<java.lang.reflect.Method> ) ; java.util.List<java.lang.reflect.Method> = ( java.util.List<java.lang.reflect.Method> instanceof java.util.ArrayList ? java.util.List<java.lang.reflect.Method> : new java.util.ArrayList<java.lang.reflect.Method> <> ( java.util.List<java.lang.reflect.Method> ) ) ; } if ( java.util.List<java.lang.reflect.Method> . int ( ) > NUMBER ) { java.util.Collections . void ( java.util.List<java.lang.reflect.Method> , new java.util.Comparator<java.lang.reflect.Method> < java.lang.reflect.Method > ( ) { @ java.lang.Override public int int ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.reflect.Method java.lang.reflect.Method ) { int int = java.lang.reflect.Method . int ( ) ; int int = java.lang.reflect.Method . int ( ) ; if ( int == int ) { if ( ! java.lang.reflect.Method . boolean ( ) && java.lang.reflect.Method . boolean ( ) ) { return - NUMBER ; } else if ( java.lang.reflect.Method . boolean ( ) && ! java.lang.reflect.Method . boolean ( ) ) { return NUMBER ; } else { return NUMBER ; } } return ( int < int ? - NUMBER : ( int > int ? NUMBER : NUMBER ) ) ; } } ) ; } for ( int int = NUMBER ; int < java.util.List<java.lang.reflect.Method> . int ( ) ; int ++ ) { java.util.List<java.lang.reflect.Method> . java.lang.reflect.Method ( int , BridgeMethodResolver . findBridgedMethod ( java.util.List<java.lang.reflect.Method> . java.lang.reflect.Method ( int ) ) ) ; } java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = new java.util.LinkedHashSet<java.lang.reflect.Method> <> ( java.util.List<java.lang.reflect.Method> ) ; java.lang.reflect.Method java.lang.reflect.Method = null ; int int = java.lang.Integer . int ; java.lang.reflect.Method java.lang.reflect.Method = null ; boolean boolean = false ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method> ) { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> = new java.util.ArrayList<org.springframework.expression.spel.support.TypeDescriptor> <> ( java.lang.Class<?>[] . int ) ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . add ( new TypeDescriptor ( new MethodParameter ( java.lang.reflect.Method , int ) ) ) ; } ReflectionHelper . ReflectionHelper ReflectionHelper.ArgumentsMatchInfo = null ; if ( java.lang.reflect.Method . boolean ( ) && java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) >= ( java.lang.Class<?>[] . int - NUMBER ) ) { ReflectionHelper.ArgumentsMatchInfo = ReflectionHelper . compareArgumentsVarargs ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> , java.util.List<org.springframework.expression.spel.support.TypeDescriptor> , org.springframework.expression.spel.support.TypeConverter ) ; } else if ( java.lang.Class<?>[] . int == java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . size ( ) ) { ReflectionHelper.ArgumentsMatchInfo = ReflectionHelper . compareArguments ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> , java.util.List<org.springframework.expression.spel.support.TypeDescriptor> , org.springframework.expression.spel.support.TypeConverter ) ; } if ( ReflectionHelper.ArgumentsMatchInfo != null ) { if ( ReflectionHelper.ArgumentsMatchInfo . isExactMatch ( ) ) { return new ReflectiveMethodExecutor ( java.lang.reflect.Method ) ; } else if ( ReflectionHelper.ArgumentsMatchInfo . isCloseMatch ( ) ) { if ( this . boolean ) { int int = ReflectionHelper . getTypeDifferenceWeight ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> , java.util.List<org.springframework.expression.spel.support.TypeDescriptor> ) ; if ( java.lang.reflect.Method == null || int < int ) { java.lang.reflect.Method = java.lang.reflect.Method ; int = int ; } } else { if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.reflect.Method ; } } } else if ( ReflectionHelper.ArgumentsMatchInfo . isMatchRequiringConversion ( ) ) { if ( java.lang.reflect.Method != null ) { boolean = true ; } java.lang.reflect.Method = java.lang.reflect.Method ; } } } } if ( java.lang.reflect.Method != null ) { return new ReflectiveMethodExecutor ( java.lang.reflect.Method ) ; } else if ( java.lang.reflect.Method != null ) { if ( boolean ) { throw new SpelEvaluationException ( SpelMessage . MULTIPLE_POSSIBLE_METHODS , java.lang.String ) ; } return new ReflectiveMethodExecutor ( java.lang.reflect.Method ) ; } else { return null ; } } catch ( EvaluationException org.springframework.expression.spel.support.EvaluationException ) { throw new AccessException ( STRING , org.springframework.expression.spel.support.EvaluationException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.reflect.Method java.lang.reflect.Method ) { int int = java.lang.reflect.Method . int ( ) ; int int = java.lang.reflect.Method . int ( ) ; if ( int == int ) { if ( ! java.lang.reflect.Method . boolean ( ) && java.lang.reflect.Method . boolean ( ) ) { return - NUMBER ; } else if ( java.lang.reflect.Method . boolean ( ) && ! java.lang.reflect.Method . boolean ( ) ) { return NUMBER ; } else { return NUMBER ; } } return ( int < int ? - NUMBER : ( int > int ? NUMBER : NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Collection<java.lang.reflect.Method> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Class ) { java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> = new java.util.LinkedHashSet<java.lang.reflect.Method> <> ( ) ; java.lang.reflect.Method [] java.lang.reflect.Method[] = java.lang.reflect.Method[] ( java.lang.Class<> ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { java.util.Set<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } } java.util.Set<java.lang.reflect.Method> . boolean ( java.util.Arrays . java.util.List<java.lang.reflect.Method> ( java.lang.reflect.Method[] ( java.lang.Class .class ) ) ) ; return java.util.Set<java.lang.reflect.Method> ; } else { return java.util.Arrays . java.util.List<java.lang.reflect.Method> ( java.lang.reflect.Method[] ( java.lang.Class<> ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.reflect.Method [] java.lang.reflect.Method[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . java.lang.reflect.Method[] ( ) ; }  <METHOD_END>
