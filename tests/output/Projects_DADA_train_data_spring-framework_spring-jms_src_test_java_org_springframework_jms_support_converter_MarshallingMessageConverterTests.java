<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.jms.support.converter.Marshaller = mock ( Marshaller .class ) ; org.springframework.jms.support.converter.Unmarshaller = mock ( Unmarshaller .class ) ; org.springframework.jms.support.converter.Session = mock ( Session .class ) ; org.springframework.jms.support.converter.MarshallingMessageConverter = new MarshallingMessageConverter ( org.springframework.jms.support.converter.Marshaller , org.springframework.jms.support.converter.Unmarshaller ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BytesMessage org.springframework.jms.support.converter.BytesMessage = mock ( BytesMessage .class ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; given ( org.springframework.jms.support.converter.Session . createBytesMessage ( ) ) . willReturn ( org.springframework.jms.support.converter.BytesMessage ) ; org.springframework.jms.support.converter.MarshallingMessageConverter . toMessage ( java.lang.Object , org.springframework.jms.support.converter.Session ) ; verify ( org.springframework.jms.support.converter.Marshaller ) . marshal ( eq ( java.lang.Object ) , isA ( javax.xml.transform.Result .class ) ) ; verify ( org.springframework.jms.support.converter.BytesMessage ) . writeBytes ( isA ( byte [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BytesMessage org.springframework.jms.support.converter.BytesMessage = mock ( BytesMessage .class ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; given ( org.springframework.jms.support.converter.BytesMessage . getBodyLength ( ) ) . willReturn ( NUMBER ) ; given ( org.springframework.jms.support.converter.BytesMessage . readBytes ( isA ( byte [] .class ) ) ) . willReturn ( NUMBER ) ; given ( org.springframework.jms.support.converter.Unmarshaller . unmarshal ( isA ( javax.xml.transform.Source .class ) ) ) . willReturn ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.jms.support.converter.MarshallingMessageConverter . fromMessage ( org.springframework.jms.support.converter.BytesMessage ) ; assertEquals ( STRING , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jms.support.converter.MarshallingMessageConverter . setTargetType ( MessageType . TEXT ) ; TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; given ( org.springframework.jms.support.converter.Session . createTextMessage ( isA ( java.lang.String .class ) ) ) . willReturn ( org.springframework.jms.support.converter.TextMessage ) ; org.springframework.jms.support.converter.MarshallingMessageConverter . toMessage ( java.lang.Object , org.springframework.jms.support.converter.Session ) ; verify ( org.springframework.jms.support.converter.Marshaller ) . marshal ( eq ( java.lang.Object ) , isA ( javax.xml.transform.Result .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.jms.support.converter.TextMessage = mock ( TextMessage .class ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.jms.support.converter.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.jms.support.converter.Unmarshaller . unmarshal ( isA ( javax.xml.transform.Source .class ) ) ) . willReturn ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.jms.support.converter.MarshallingMessageConverter . fromMessage ( org.springframework.jms.support.converter.TextMessage ) ; assertEquals ( STRING , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
