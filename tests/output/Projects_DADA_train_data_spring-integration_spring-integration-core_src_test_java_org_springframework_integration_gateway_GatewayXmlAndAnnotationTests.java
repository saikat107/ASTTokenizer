<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.gateway.GatewayProxyFactoryBean , STRING ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> < java.lang.reflect.Method , MessagingGatewaySupport > java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> = TestUtils . getPropertyValue ( org.springframework.integration.gateway.GatewayProxyFactoryBean , STRING , java.util.Map .class ) ; int int = NUMBER ; for ( java.util.Map.Entry<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> < java.lang.reflect.Method , MessagingGatewaySupport > java.util.Map.Entry<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> : java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> . entrySet ( ) ) { if ( java.util.Map.Entry<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> . getKey ( ) . getName ( ) . equals ( STRING ) ) { assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.util.Map.Entry<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> . getValue ( ) , STRING ) ) ; int ++ ; } else if ( java.util.Map.Entry<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> . getKey ( ) . getName ( ) . equals ( STRING ) ) { assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.util.Map.Entry<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> . getValue ( ) , STRING ) ) ; int ++ ; } else if ( java.util.Map.Entry<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> . getKey ( ) . getName ( ) . equals ( STRING ) ) { assertEquals ( - NUMBER , TestUtils . getPropertyValue ( java.util.Map.Entry<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> . getValue ( ) , STRING ) ) ; int ++ ; } else if ( java.util.Map.Entry<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> . getKey ( ) . getName ( ) . equals ( STRING ) ) { assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.util.Map.Entry<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> . getValue ( ) , STRING ) ) ; int ++ ; } } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Gateway java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Gateway ( replyTimeout = NUMBER ) java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Gateway ( replyTimeout = - NUMBER ) java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
