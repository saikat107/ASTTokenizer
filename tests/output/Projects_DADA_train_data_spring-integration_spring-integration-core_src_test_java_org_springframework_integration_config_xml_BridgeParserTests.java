<METHOD_START> @ Factory public static org.springframework.integration.config.xml.Matcher<org.springframework.integration.config.xml.Message<?>> < Message < ? > > org.springframework.integration.config.xml.Matcher<org.springframework.integration.config.xml.Message<?>> ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { return new MessageMatcher ( org.springframework.integration.config.xml.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.config.xml.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; this . org.springframework.integration.config.xml.PollableChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = this . org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.Matcher<org.springframework.integration.config.xml.Message<?>> ( org.springframework.integration.config.xml.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.config.xml.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = this . org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.Matcher<org.springframework.integration.config.xml.Message<?>> ( org.springframework.integration.config.xml.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.config.xml.PollableChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.xml.PollableChannel ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.config.xml.Message<> , org.springframework.integration.config.xml.Matcher<org.springframework.integration.config.xml.Message<?>> ( org.springframework.integration.config.xml.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BridgeHandler org.springframework.integration.config.xml.BridgeHandler = ( BridgeHandler ) new DirectFieldAccessor ( org.springframework.integration.config.xml.EventDrivenConsumer ) . getPropertyValue ( STRING ) ; MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = ( MessagingTemplate ) new DirectFieldAccessor ( org.springframework.integration.config.xml.BridgeHandler ) . getPropertyValue ( STRING ) ; assertEquals ( new java.lang.Long ( NUMBER ) , new DirectFieldAccessor ( org.springframework.integration.config.xml.MessagingTemplate ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
