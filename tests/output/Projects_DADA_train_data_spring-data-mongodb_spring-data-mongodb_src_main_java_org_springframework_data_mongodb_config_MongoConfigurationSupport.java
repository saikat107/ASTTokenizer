<METHOD_START> protected abstract java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { java.lang.Package java.lang.Package = java.lang.Class<? extends org.springframework.data.mongodb.config.MongoConfigurationSupport> ( ) . java.lang.Package ( ) ; return java.util.Collections . java.util.Set<java.lang.String> ( java.lang.Package == null ? null : java.lang.Package . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.mongodb.config.MongoMappingContext org.springframework.data.mongodb.config.MongoMappingContext ( ) java.lang.ClassNotFoundException { MongoMappingContext org.springframework.data.mongodb.config.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.config.MongoMappingContext . setInitialEntitySet ( java.util.Set<java.lang.Class<?>> ( ) ) ; org.springframework.data.mongodb.config.MongoMappingContext . setSimpleTypeHolder ( org.springframework.data.mongodb.config.CustomConversions ( ) . getSimpleTypeHolder ( ) ) ; org.springframework.data.mongodb.config.MongoMappingContext . setFieldNamingStrategy ( org.springframework.data.mongodb.config.FieldNamingStrategy ( ) ) ; return org.springframework.data.mongodb.config.MongoMappingContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.mongodb.config.IsNewStrategyFactory org.springframework.data.mongodb.config.IsNewStrategyFactory ( ) java.lang.ClassNotFoundException { return new CachingIsNewStrategyFactory ( new MappingContextIsNewStrategyFactory ( new PersistentEntities ( java.util.Arrays .< MappingContext < ? , ? > > java.util.List<org.springframework.data.mongodb.config.MappingContext<?,?>> ( new MappingContext [] { org.springframework.data.mongodb.config.MongoMappingContext ( ) } ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.mongodb.config.CustomConversions org.springframework.data.mongodb.config.CustomConversions ( ) { return new CustomConversions ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) java.lang.ClassNotFoundException { java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( ) ; for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ( ) ) { java.util.Set<java.lang.Class<?>> . boolean ( java.util.Set<java.lang.Class<?>> ( java.lang.String ) ) ; } return java.util.Set<java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { if ( ! StringUtils . hasText ( java.lang.String ) ) { return java.util.Collections . java.util.Set<java.lang.Class<?>> ( ) ; } java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { ClassPathScanningCandidateComponentProvider org.springframework.data.mongodb.config.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.data.mongodb.config.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Document .class ) ) ; org.springframework.data.mongodb.config.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Persistent .class ) ) ; for ( BeanDefinition org.springframework.data.mongodb.config.BeanDefinition : org.springframework.data.mongodb.config.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ) { java.util.Set<java.lang.Class<?>> . boolean ( ClassUtils . forName ( org.springframework.data.mongodb.config.BeanDefinition . getBeanClassName ( ) , org.springframework.data.mongodb.config.MongoConfigurationSupport .class . java.lang.ClassLoader ( ) ) ) ; } } return java.util.Set<java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.config.FieldNamingStrategy org.springframework.data.mongodb.config.FieldNamingStrategy ( ) { return boolean ( ) ? new CamelCaseAbbreviatingFieldNamingStrategy ( ) : PropertyNameFieldNamingStrategy . INSTANCE ; }  <METHOD_END>
