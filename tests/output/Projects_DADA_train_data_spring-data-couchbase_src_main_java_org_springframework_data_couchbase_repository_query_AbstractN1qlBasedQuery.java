<METHOD_START> protected void ( CouchbaseQueryMethod org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , CouchbaseOperations org.springframework.data.couchbase.repository.query.CouchbaseOperations ) { this . org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod = org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod ; this . org.springframework.data.couchbase.repository.query.CouchbaseOperations = org.springframework.data.couchbase.repository.query.CouchbaseOperations ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.couchbase.repository.query.Statement org.springframework.data.couchbase.repository.query.Statement ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor , java.lang.Object [] java.lang.Object[] );  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.couchbase.repository.query.Statement org.springframework.data.couchbase.repository.query.Statement ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor , java.lang.Object [] java.lang.Object[] , ReturnedType org.springframework.data.couchbase.repository.query.ReturnedType );  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.couchbase.repository.query.JsonValue org.springframework.data.couchbase.repository.query.JsonValue ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { ParametersParameterAccessor org.springframework.data.couchbase.repository.query.ParametersParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod . getParameters ( ) , java.lang.Object[] ) ; ResultProcessor org.springframework.data.couchbase.repository.query.ResultProcessor = this . org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod . getResultProcessor ( ) . withDynamicProjection ( org.springframework.data.couchbase.repository.query.ParametersParameterAccessor ) ; ReturnedType org.springframework.data.couchbase.repository.query.ReturnedType = org.springframework.data.couchbase.repository.query.ResultProcessor . getReturnedType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.couchbase.repository.query.ReturnedType . getTypeToRead ( ) ; java.lang.Class<?> = java.lang.Class<> == null ? org.springframework.data.couchbase.repository.query.ReturnedType . getDomainType ( ) : java.lang.Class<> ; Statement org.springframework.data.couchbase.repository.query.Statement = org.springframework.data.couchbase.repository.query.Statement ( org.springframework.data.couchbase.repository.query.ParametersParameterAccessor , java.lang.Object[] , org.springframework.data.couchbase.repository.query.ReturnedType ) ; JsonValue org.springframework.data.couchbase.repository.query.JsonValue = org.springframework.data.couchbase.repository.query.JsonValue ( org.springframework.data.couchbase.repository.query.ParametersParameterAccessor ) ; N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery = org.springframework.data.couchbase.repository.query.N1qlQuery ( org.springframework.data.couchbase.repository.query.Statement , org.springframework.data.couchbase.repository.query.JsonValue , org.springframework.data.couchbase.repository.query.CouchbaseOperations ( ) . getDefaultConsistency ( ) . n1qlConsistency ( ) ) ; Statement org.springframework.data.couchbase.repository.query.Statement = org.springframework.data.couchbase.repository.query.Statement ( org.springframework.data.couchbase.repository.query.ParametersParameterAccessor , java.lang.Object[] ) ; N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery = org.springframework.data.couchbase.repository.query.N1qlQuery ( org.springframework.data.couchbase.repository.query.Statement , org.springframework.data.couchbase.repository.query.JsonValue , org.springframework.data.couchbase.repository.query.CouchbaseOperations ( ) . getDefaultConsistency ( ) . n1qlConsistency ( ) ) ; return org.springframework.data.couchbase.repository.query.ResultProcessor . processResult ( java.lang.Object ( org.springframework.data.couchbase.repository.query.N1qlQuery , org.springframework.data.couchbase.repository.query.N1qlQuery , org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.query.ParametersParameterAccessor . getPageable ( ) , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.couchbase.repository.query.N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery ( Statement org.springframework.data.couchbase.repository.query.Statement , JsonValue org.springframework.data.couchbase.repository.query.JsonValue , ScanConsistency org.springframework.data.couchbase.repository.query.ScanConsistency ) { N1qlParams org.springframework.data.couchbase.repository.query.N1qlParams = N1qlParams . build ( ) . consistency ( org.springframework.data.couchbase.repository.query.ScanConsistency ) ; N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery ; if ( org.springframework.data.couchbase.repository.query.JsonValue instanceof JsonObject && ! ( ( JsonObject ) org.springframework.data.couchbase.repository.query.JsonValue ) . isEmpty ( ) ) { org.springframework.data.couchbase.repository.query.N1qlQuery = N1qlQuery . parameterized ( org.springframework.data.couchbase.repository.query.Statement , ( JsonObject ) org.springframework.data.couchbase.repository.query.JsonValue , org.springframework.data.couchbase.repository.query.N1qlParams ) ; } else if ( org.springframework.data.couchbase.repository.query.JsonValue instanceof JsonArray && ! ( ( JsonArray ) org.springframework.data.couchbase.repository.query.JsonValue ) . isEmpty ( ) ) { org.springframework.data.couchbase.repository.query.N1qlQuery = N1qlQuery . parameterized ( org.springframework.data.couchbase.repository.query.Statement , ( JsonArray ) org.springframework.data.couchbase.repository.query.JsonValue , org.springframework.data.couchbase.repository.query.N1qlParams ) ; } else { org.springframework.data.couchbase.repository.query.N1qlQuery = N1qlQuery . simple ( org.springframework.data.couchbase.repository.query.Statement , org.springframework.data.couchbase.repository.query.N1qlParams ) ; } return org.springframework.data.couchbase.repository.query.N1qlQuery ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery , N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery , QueryMethod org.springframework.data.couchbase.repository.query.QueryMethod , Pageable org.springframework.data.couchbase.repository.query.Pageable , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.data.couchbase.repository.query.QueryMethod . isModifyingQuery ( ) ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } if ( org.springframework.data.couchbase.repository.query.QueryMethod . isPageQuery ( ) ) { return java.lang.Object ( org.springframework.data.couchbase.repository.query.N1qlQuery , org.springframework.data.couchbase.repository.query.N1qlQuery , org.springframework.data.couchbase.repository.query.Pageable , java.lang.Class<> ) ; } else if ( org.springframework.data.couchbase.repository.query.QueryMethod . isSliceQuery ( ) ) { return java.lang.Object ( org.springframework.data.couchbase.repository.query.N1qlQuery , org.springframework.data.couchbase.repository.query.N1qlQuery , org.springframework.data.couchbase.repository.query.Pageable , java.lang.Class<> ) ; } else if ( org.springframework.data.couchbase.repository.query.QueryMethod . isCollectionQuery ( ) ) { return java.util.List<?> ( org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<> ) ; } else if ( org.springframework.data.couchbase.repository.query.QueryMethod . isStreamQuery ( ) ) { return java.lang.Object ( org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<> ) ; } else if ( org.springframework.data.couchbase.repository.query.QueryMethod . isQueryForEntity ( ) ) { return java.lang.Object ( org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<> ) ; } else if ( org.springframework.data.couchbase.repository.query.QueryMethod . getReturnedObjectType ( ) . isPrimitive ( ) && boolean ( ) ) { return java.lang.Object ( org.springframework.data.couchbase.repository.query.N1qlQuery ) ; } else { return java.lang.Object ( org.springframework.data.couchbase.repository.query.N1qlQuery ) ; } }  <METHOD_END>
<METHOD_START> private void void ( N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery ) { if ( org.springframework.data.couchbase.repository.query.Logger . isDebugEnabled ( ) ) { org.springframework.data.couchbase.repository.query.Logger . debug ( STRING + org.springframework.data.couchbase.repository.query.N1qlQuery . n1ql ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.List<?> < ? > java.util.List<?> ( N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<?> < ? > java.lang.Class<?> ) { void ( org.springframework.data.couchbase.repository.query.N1qlQuery ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.data.couchbase.repository.query.CouchbaseOperations . findByN1QL ( org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<> ) ; return java.util.List<> ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<?> < ? > java.lang.Class<?> ) { void ( org.springframework.data.couchbase.repository.query.N1qlQuery ) ; java.util.List<?> < ? > java.util.List<?> = java.util.List<?> ( org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<> ) ; return java.util.List<> . boolean ( ) ? null : java.util.List<> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<?> < ? > java.lang.Class<?> ) { void ( org.springframework.data.couchbase.repository.query.N1qlQuery ) ; return StreamUtils . createStreamFromIterator ( java.util.List<?> ( org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<> ) . iterator ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery , N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery , Pageable org.springframework.data.couchbase.repository.query.Pageable , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( org.springframework.data.couchbase.repository.query.Pageable , STRING ) ; long long = NUMBER ; void ( org.springframework.data.couchbase.repository.query.N1qlQuery ) ; java.util.List<org.springframework.data.couchbase.repository.query.CountFragment> < CountFragment > java.util.List<org.springframework.data.couchbase.repository.query.CountFragment> = org.springframework.data.couchbase.repository.query.CouchbaseOperations . findByN1QLProjection ( org.springframework.data.couchbase.repository.query.N1qlQuery , CountFragment .class ) ; if ( java.util.List<org.springframework.data.couchbase.repository.query.CountFragment> != null && ! java.util.List<org.springframework.data.couchbase.repository.query.CountFragment> . isEmpty ( ) ) { long = java.util.List<org.springframework.data.couchbase.repository.query.CountFragment> . get ( NUMBER ) . count ; } void ( org.springframework.data.couchbase.repository.query.N1qlQuery ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.data.couchbase.repository.query.CouchbaseOperations . findByN1QL ( org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<> ) ; return new PageImpl ( java.util.List<> , org.springframework.data.couchbase.repository.query.Pageable , long ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery , N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery , Pageable org.springframework.data.couchbase.repository.query.Pageable , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( org.springframework.data.couchbase.repository.query.Pageable , STRING ) ; void ( org.springframework.data.couchbase.repository.query.N1qlQuery ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.data.couchbase.repository.query.CouchbaseOperations . findByN1QL ( org.springframework.data.couchbase.repository.query.N1qlQuery , java.lang.Class<> ) ; int int = org.springframework.data.couchbase.repository.query.Pageable . getPageSize ( ) ; boolean boolean = java.util.List<> . int ( ) > int ; return new SliceImpl ( boolean ? java.util.List<> . java.util.List<> ( NUMBER , int ) : java.util.List<> , org.springframework.data.couchbase.repository.query.Pageable , boolean ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( N1qlQuery org.springframework.data.couchbase.repository.query.N1qlQuery ) { void ( org.springframework.data.couchbase.repository.query.N1qlQuery ) ; java.util.List<java.util.Map> < java.util.Map > java.util.List<java.util.Map> = org.springframework.data.couchbase.repository.query.CouchbaseOperations . findByN1QLProjection ( org.springframework.data.couchbase.repository.query.N1qlQuery , java.util.Map .class ) ; if ( java.util.List<java.util.Map> . int ( ) != NUMBER ) { throw new CouchbaseQueryExecutionException ( STRING + STRING + java.util.List<java.util.Map> . int ( ) ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.List<java.util.Map> . java.util.Map ( NUMBER ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . int ( ) != NUMBER ) { throw new CouchbaseQueryExecutionException ( STRING + STRING + java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; } java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> . java.util.Collection<java.lang.Object> ( ) ; if ( java.util.Collection<java.lang.Object> . int ( ) != NUMBER ) { throw new CouchbaseQueryExecutionException ( STRING + STRING + java.util.Collection<java.lang.Object> . int ( ) ) ; } return java.util.Collection<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) . java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod ( ) { return this . org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.couchbase.repository.query.CouchbaseOperations org.springframework.data.couchbase.repository.query.CouchbaseOperations ( ) { return this . org.springframework.data.couchbase.repository.query.CouchbaseOperations ; }  <METHOD_END>
