<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageSelector org.springframework.integration.channel.interceptor.MessageSelector = new org.springframework.integration.channel.interceptor.MessageSelectingInterceptorTests.TestMessageSelector ( true , java.util.concurrent.atomic.AtomicInteger ) ; MessageSelectingInterceptor org.springframework.integration.channel.interceptor.MessageSelectingInterceptor = new MessageSelectingInterceptor ( org.springframework.integration.channel.interceptor.MessageSelector ) ; QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.MessageSelectingInterceptor ) ; assertTrue ( org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageSelector org.springframework.integration.channel.interceptor.MessageSelector = new org.springframework.integration.channel.interceptor.MessageSelectingInterceptorTests.TestMessageSelector ( false , java.util.concurrent.atomic.AtomicInteger ) ; MessageSelectingInterceptor org.springframework.integration.channel.interceptor.MessageSelectingInterceptor = new MessageSelectingInterceptor ( org.springframework.integration.channel.interceptor.MessageSelector ) ; QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.MessageSelectingInterceptor ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageSelector org.springframework.integration.channel.interceptor.MessageSelector = new org.springframework.integration.channel.interceptor.MessageSelectingInterceptorTests.TestMessageSelector ( true , java.util.concurrent.atomic.AtomicInteger ) ; MessageSelector org.springframework.integration.channel.interceptor.MessageSelector = new org.springframework.integration.channel.interceptor.MessageSelectingInterceptorTests.TestMessageSelector ( true , java.util.concurrent.atomic.AtomicInteger ) ; MessageSelectingInterceptor org.springframework.integration.channel.interceptor.MessageSelectingInterceptor = new MessageSelectingInterceptor ( org.springframework.integration.channel.interceptor.MessageSelector , org.springframework.integration.channel.interceptor.MessageSelector ) ; QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.MessageSelectingInterceptor ) ; assertTrue ( org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { boolean boolean = false ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MessageSelector org.springframework.integration.channel.interceptor.MessageSelector = new org.springframework.integration.channel.interceptor.MessageSelectingInterceptorTests.TestMessageSelector ( true , java.util.concurrent.atomic.AtomicInteger ) ; MessageSelector org.springframework.integration.channel.interceptor.MessageSelector = new org.springframework.integration.channel.interceptor.MessageSelectingInterceptorTests.TestMessageSelector ( false , java.util.concurrent.atomic.AtomicInteger ) ; MessageSelector org.springframework.integration.channel.interceptor.MessageSelector = new org.springframework.integration.channel.interceptor.MessageSelectingInterceptorTests.TestMessageSelector ( false , java.util.concurrent.atomic.AtomicInteger ) ; MessageSelector org.springframework.integration.channel.interceptor.MessageSelector = new org.springframework.integration.channel.interceptor.MessageSelectingInterceptorTests.TestMessageSelector ( true , java.util.concurrent.atomic.AtomicInteger ) ; MessageSelectingInterceptor org.springframework.integration.channel.interceptor.MessageSelectingInterceptor = new MessageSelectingInterceptor ( org.springframework.integration.channel.interceptor.MessageSelector , org.springframework.integration.channel.interceptor.MessageSelector , org.springframework.integration.channel.interceptor.MessageSelector , org.springframework.integration.channel.interceptor.MessageSelector ) ; QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.MessageSelectingInterceptor ) ; try { org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( MessageDeliveryException org.springframework.integration.channel.interceptor.MessageDeliveryException ) { boolean = true ; } assertTrue ( boolean ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( boolean boolean , java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ) { this . boolean = boolean ; this . java.util.concurrent.atomic.AtomicInteger = java.util.concurrent.atomic.AtomicInteger ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; return this . boolean ; }  <METHOD_END>
