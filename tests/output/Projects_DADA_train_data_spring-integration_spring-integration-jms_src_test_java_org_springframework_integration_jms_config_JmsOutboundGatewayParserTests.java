<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jms.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; DirectFieldAccessor org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jms.config.EventDrivenConsumer ) ; JmsOutboundGateway org.springframework.integration.jms.config.JmsOutboundGateway = ( JmsOutboundGateway ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jms.config.JmsOutboundGateway ) ; int int = ( java.lang.Integer ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( DeliveryMode . PERSISTENT , int ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING , java.lang.Boolean .class ) ) ; DefaultMessageListenerContainer org.springframework.integration.jms.config.DefaultMessageListenerContainer = TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING , DefaultMessageListenerContainer .class ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer , STRING ) ) ; java.lang.Object java.lang.Object ; try { java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer , STRING ) ; } catch ( NotReadablePropertyException org.springframework.integration.jms.config.NotReadablePropertyException ) { java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer , STRING ) ; } assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer , STRING ) ) ; assertTrue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer . isSessionTransacted ( ) ) ; assertSame ( org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.jms.config.DefaultMessageListenerContainer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING ) ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jms.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; JmsOutboundGateway org.springframework.integration.jms.config.JmsOutboundGateway = TestUtils . getPropertyValue ( org.springframework.integration.jms.config.EventDrivenConsumer , STRING , JmsOutboundGateway .class ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.jms.config.JmsOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING ) ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; PollingConsumer org.springframework.integration.jms.config.PollingConsumer = ( PollingConsumer ) org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; DirectFieldAccessor org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jms.config.PollingConsumer ) ; JmsOutboundGateway org.springframework.integration.jms.config.JmsOutboundGateway = ( JmsOutboundGateway ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jms.config.JmsOutboundGateway ) ; MessageConverter org.springframework.integration.jms.config.MessageConverter = ( MessageConverter ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertTrue ( STRING , org.springframework.integration.jms.config.MessageConverter instanceof StubMessageConverter ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jms.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; DirectFieldAccessor org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.jms.config.EventDrivenConsumer ) . getPropertyValue ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jms.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; DirectFieldAccessor org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jms.config.EventDrivenConsumer ) ; JmsOutboundGateway org.springframework.integration.jms.config.JmsOutboundGateway = ( JmsOutboundGateway ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jms.config.JmsOutboundGateway ) ; assertSame ( org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) , org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jms.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; DirectFieldAccessor org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jms.config.EventDrivenConsumer ) ; JmsOutboundGateway org.springframework.integration.jms.config.JmsOutboundGateway = ( JmsOutboundGateway ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jms.config.JmsOutboundGateway ) ; assertEquals ( STRING , org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jms.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; DirectFieldAccessor org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jms.config.EventDrivenConsumer ) ; JmsOutboundGateway org.springframework.integration.jms.config.JmsOutboundGateway = ( JmsOutboundGateway ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; ExpressionEvaluatingMessageProcessor < ? > org.springframework.integration.jms.config.ExpressionEvaluatingMessageProcessor<?> = TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING , ExpressionEvaluatingMessageProcessor .class ) ; Expression org.springframework.integration.jms.config.Expression = TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING , Expression .class ) ; assertEquals ( STRING , org.springframework.integration.jms.config.Expression . getExpressionString ( ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.integration.jms.config.ExpressionEvaluatingMessageProcessor<> . processMessage ( org.springframework.integration.jms.config.Message<> ) ) ; java.lang.reflect.Method java.lang.reflect.Method = JmsOutboundGateway .class . java.lang.reflect.Method ( STRING , Message .class , Session .class ) ; java.lang.reflect.Method . void ( true ) ; Session org.springframework.integration.jms.config.Session = mock ( Session .class ) ; Queue org.springframework.integration.jms.config.Queue = mock ( Queue .class ) ; when ( org.springframework.integration.jms.config.Session . createQueue ( STRING ) ) . thenReturn ( org.springframework.integration.jms.config.Queue ) ; Destination org.springframework.integration.jms.config.Destination = ( Destination ) java.lang.reflect.Method . java.lang.Object ( org.springframework.integration.jms.config.JmsOutboundGateway , org.springframework.integration.jms.config.Message<> , org.springframework.integration.jms.config.Session ) ; assertSame ( org.springframework.integration.jms.config.Queue , org.springframework.integration.jms.config.Destination ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jms.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; DirectFieldAccessor org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jms.config.EventDrivenConsumer ) ; JmsOutboundGateway org.springframework.integration.jms.config.JmsOutboundGateway = ( JmsOutboundGateway ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; ExpressionEvaluatingMessageProcessor < ? > org.springframework.integration.jms.config.ExpressionEvaluatingMessageProcessor<?> = TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING , ExpressionEvaluatingMessageProcessor .class ) ; Expression org.springframework.integration.jms.config.Expression = TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING , Expression .class ) ; assertEquals ( STRING , org.springframework.integration.jms.config.Expression . getExpressionString ( ) ) ; assertSame ( org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) , org.springframework.integration.jms.config.ExpressionEvaluatingMessageProcessor<> . processMessage ( null ) ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.jms.config.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.jms.config.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; org.springframework.integration.jms.config.JmsOutboundGatewayParserTests.SampleGateway org.springframework.integration.jms.config.JmsOutboundGatewayParserTests.SampleGateway = org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , org.springframework.integration.jms.config.JmsOutboundGatewayParserTests.SampleGateway .class ) ; SubscribableChannel org.springframework.integration.jms.config.SubscribableChannel = org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , SubscribableChannel .class ) ; MessageHandler org.springframework.integration.jms.config.MessageHandler = message -> { MessageHistory history = MessageHistory . read ( message ) ; assertNotNull ( history ) ; Properties componentHistoryRecord = TestUtils . locateComponentInHistory ( history , STRING , NUMBER ) ; assertNotNull ( componentHistoryRecord ) ; assertEquals ( STRING , componentHistoryRecord . get ( STRING ) ) ; MessagingTemplate messagingTemplate = new MessagingTemplate ( ) ; messagingTemplate . setDefaultDestination ( ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ) ; messagingTemplate . send ( message ) ; } ; org.springframework.integration.jms.config.SubscribableChannel . subscribe ( org.springframework.integration.jms.config.MessageHandler ) ; java.lang.String java.lang.String = org.springframework.integration.jms.config.JmsOutboundGatewayParserTests.SampleGateway . java.lang.String ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; JmsOutboundGateway org.springframework.integration.jms.config.JmsOutboundGateway = org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , JmsOutboundGateway .class ) ; MessageChannel org.springframework.integration.jms.config.MessageChannel = TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING , MessageChannel .class ) ; assertThat ( org.springframework.integration.jms.config.MessageChannel . getClass ( ) . getSimpleName ( ) , equalTo ( STRING ) ) ; JmsOutboundGateway org.springframework.integration.jms.config.JmsOutboundGateway = org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , JmsOutboundGateway .class ) ; org.springframework.integration.jms.config.MessageChannel = TestUtils . getPropertyValue ( org.springframework.integration.jms.config.JmsOutboundGateway , STRING , MessageChannel .class ) ; assertThat ( org.springframework.integration.jms.config.MessageChannel . getClass ( ) . getName ( ) , containsString ( STRING ) ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jms.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; DirectFieldAccessor org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.jms.config.EventDrivenConsumer ) . getPropertyValue ( STRING ) ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.config.JmsOutboundGatewayParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.jms.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; DirectFieldAccessor org.springframework.integration.jms.config.DirectFieldAccessor = new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.jms.config.EventDrivenConsumer ) . getPropertyValue ( STRING ) ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.integration.jms.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.jms.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jms.config.Message<?> ) throws java.lang.Exception { int ++ ; return null ; }  <METHOD_END>
