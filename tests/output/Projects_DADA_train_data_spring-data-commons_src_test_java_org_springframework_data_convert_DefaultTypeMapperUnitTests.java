<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.convert.DefaultTypeMapper<java.util.Map<java.lang.String,java.lang.String>> = new DefaultTypeMapper <> ( org.springframework.data.convert.TypeAliasAccessor<java.util.Map<java.lang.String,java.lang.String>> , java.util.Collections . java.util.List ( org.springframework.data.convert.TypeInformationMapper ) ) ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map ( STRING , org.springframework.data.convert.Alias . toString ( ) ) ; doReturn ( org.springframework.data.convert.Alias ) . when ( org.springframework.data.convert.TypeAliasAccessor<java.util.Map<java.lang.String,java.lang.String>> ) . readAliasFrom ( java.util.Map<java.lang.String,java.lang.String> ) ; doReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.convert.TypeInformation<java.lang.String> ) ) . when ( org.springframework.data.convert.TypeInformationMapper ) . resolveTypeFrom ( org.springframework.data.convert.Alias ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Optional<org.springframework.data.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.convert.TypeInformation<?>> = org.springframework.data.convert.DefaultTypeMapper<java.util.Map<java.lang.String,java.lang.String>> . readType ( java.util.Map<java.lang.String,java.lang.String> ) ; assertThat ( java.util.Optional<org.springframework.data.convert.TypeInformation<?>> ) . hasValue ( org.springframework.data.convert.TypeInformation<java.lang.String> ) ; verify ( org.springframework.data.convert.TypeInformationMapper , times ( NUMBER ) ) . resolveTypeFrom ( org.springframework.data.convert.Alias ) ; org.springframework.data.convert.DefaultTypeMapper<java.util.Map<java.lang.String,java.lang.String>> . readType ( java.util.Map<java.lang.String,java.lang.String> ) ; verify ( org.springframework.data.convert.TypeInformationMapper , times ( NUMBER ) ) . resolveTypeFrom ( org.springframework.data.convert.Alias ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Alias org.springframework.data.convert.Alias = Alias . of ( STRING ) ; doReturn ( org.springframework.data.convert.Alias ) . when ( org.springframework.data.convert.TypeInformationMapper ) . createAliasFor ( org.springframework.data.convert.TypeInformation<java.lang.String> ) ; assertThat ( this . org.springframework.data.convert.DefaultTypeMapper<java.util.Map<java.lang.String,java.lang.String>> . getAliasFor ( org.springframework.data.convert.TypeInformation<java.lang.String> ) ) . isEqualTo ( org.springframework.data.convert.Alias ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassTypeInformation < org.springframework.data.convert.DefaultTypeMapperUnitTests.Foo > org.springframework.data.convert.ClassTypeInformation<org.springframework.data.convert.DefaultTypeMapperUnitTests.Foo> = ClassTypeInformation . from ( org.springframework.data.convert.DefaultTypeMapperUnitTests.Foo .class ) ; TypeInformation < ? > org.springframework.data.convert.TypeInformation<?> = org.springframework.data.convert.ClassTypeInformation<org.springframework.data.convert.DefaultTypeMapperUnitTests.Foo> . getProperty ( STRING ) . orElseThrow ( ( ) new IllegalStateException ( STRING ) ) ; TypeInformation < ? > org.springframework.data.convert.TypeInformation<?> = ClassTypeInformation . from ( org.springframework.data.convert.DefaultTypeMapperUnitTests.Bar .class ) ; doReturn ( Alias . of ( org.springframework.data.convert.TypeInformation<> ) ) . when ( org.springframework.data.convert.TypeAliasAccessor<java.util.Map<java.lang.String,java.lang.String>> ) . readAliasFrom ( java.util.Map<java.lang.String,java.lang.String> ) ; doReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.convert.TypeInformation<> ) ) . when ( org.springframework.data.convert.TypeInformationMapper ) . resolveTypeFrom ( Alias . of ( org.springframework.data.convert.TypeInformation<> ) ) ; TypeInformation < ? > org.springframework.data.convert.TypeInformation<?> = org.springframework.data.convert.DefaultTypeMapper<java.util.Map<java.lang.String,java.lang.String>> . readType ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.data.convert.TypeInformation<> ) ; assertThat ( org.springframework.data.convert.TypeInformation<> ) . isInstanceOf ( TypeInformation .class ) ; TypeInformation < ? > org.springframework.data.convert.TypeInformation<?> = TypeInformation .class . org.springframework.data.convert.TypeInformation ( org.springframework.data.convert.TypeInformation<> ) ; assertThat ( org.springframework.data.convert.TypeInformation<> . getType ( ) ) . isEqualTo ( org.springframework.data.convert.DefaultTypeMapperUnitTests.Bar .class ) ; assertThat ( org.springframework.data.convert.TypeInformation<> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Character .class ) ) ; }  <METHOD_END>
