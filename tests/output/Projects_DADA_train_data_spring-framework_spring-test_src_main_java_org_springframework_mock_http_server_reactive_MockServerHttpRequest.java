<METHOD_START> private void ( HttpMethod org.springframework.mock.http.server.reactive.HttpMethod , java.net.URI java.net.URI , java.lang.String java.lang.String , HttpHeaders org.springframework.mock.http.server.reactive.HttpHeaders , MultiValueMap < java.lang.String , HttpCookie > org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> , java.net.InetSocketAddress java.net.InetSocketAddress , Publisher < ? extends DataBuffer > org.springframework.mock.http.server.reactive.Publisher<? extends org.springframework.mock.http.server.reactive.DataBuffer> ) { super( java.net.URI , org.springframework.mock.http.server.reactive.HttpHeaders ); this . org.springframework.mock.http.server.reactive.HttpMethod = org.springframework.mock.http.server.reactive.HttpMethod ; this . java.lang.String = ( java.lang.String != null ? java.lang.String : STRING ) ; this . org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> = org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> ; this . java.net.InetSocketAddress = java.net.InetSocketAddress ; this . org.springframework.mock.http.server.reactive.Flux<org.springframework.mock.http.server.reactive.DataBuffer> = Flux . from ( org.springframework.mock.http.server.reactive.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.HttpMethod org.springframework.mock.http.server.reactive.HttpMethod ( ) { return this . org.springframework.mock.http.server.reactive.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.Optional<java.net.InetSocketAddress> ( ) { return java.util.Optional . java.util.Optional<java.net.InetSocketAddress> ( this . java.net.InetSocketAddress ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.Flux<org.springframework.mock.http.server.reactive.DataBuffer> < DataBuffer > org.springframework.mock.http.server.reactive.Flux<org.springframework.mock.http.server.reactive.DataBuffer> ( ) { return this . org.springframework.mock.http.server.reactive.Flux<org.springframework.mock.http.server.reactive.DataBuffer> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> < java.lang.String , HttpCookie > org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> ( ) { return this . org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> ; }  <METHOD_END>
<METHOD_START> public org.springframework.mock.http.server.reactive.MockServerWebExchange org.springframework.mock.http.server.reactive.MockServerWebExchange ( ) { return new MockServerWebExchange ( this ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( HttpMethod org.springframework.mock.http.server.reactive.HttpMethod , java.net.URI java.net.URI ) { return new org.springframework.mock.http.server.reactive.MockServerHttpRequest.DefaultBodyBuilder ( org.springframework.mock.http.server.reactive.HttpMethod , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( HttpMethod org.springframework.mock.http.server.reactive.HttpMethod , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { java.net.URI java.net.URI = UriComponentsBuilder . fromUriString ( java.lang.String ) . buildAndExpand ( java.lang.Object[] ) . encode ( ) . toUri ( ) ; return new org.springframework.mock.http.server.reactive.MockServerHttpRequest.DefaultBodyBuilder ( org.springframework.mock.http.server.reactive.HttpMethod , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.mock.http.server.reactive.MockServerHttpRequest.BaseBuilder<?> < ? > org.springframework.mock.http.server.reactive.MockServerHttpRequest.BaseBuilder<?> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( HttpMethod . GET , java.lang.String , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.mock.http.server.reactive.MockServerHttpRequest.BaseBuilder<?> < ? > org.springframework.mock.http.server.reactive.MockServerHttpRequest.BaseBuilder<?> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( HttpMethod . HEAD , java.lang.String , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( HttpMethod . POST , java.lang.String , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( HttpMethod . PUT , java.lang.String , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( HttpMethod . PATCH , java.lang.String , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.mock.http.server.reactive.MockServerHttpRequest.BaseBuilder<?> < ? > org.springframework.mock.http.server.reactive.MockServerHttpRequest.BaseBuilder<?> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( HttpMethod . DELETE , java.lang.String , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.mock.http.server.reactive.MockServerHttpRequest.BaseBuilder<?> < ? > org.springframework.mock.http.server.reactive.MockServerHttpRequest.BaseBuilder<?> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( HttpMethod . OPTIONS , java.lang.String , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> B B ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> B B ( java.net.InetSocketAddress java.net.InetSocketAddress );  <METHOD_END>
<METHOD_START> B B ( java.lang.String java.lang.String , HttpCookie ... org.springframework.mock.http.server.reactive.HttpCookie[] );  <METHOD_END>
<METHOD_START> B B ( MultiValueMap < java.lang.String , HttpCookie > org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> );  <METHOD_END>
<METHOD_START> B B ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] );  <METHOD_END>
<METHOD_START> B B ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> );  <METHOD_END>
<METHOD_START> B B ( MediaType ... org.springframework.mock.http.server.reactive.MediaType[] );  <METHOD_END>
<METHOD_START> B B ( java.nio.charset.Charset ... java.nio.charset.Charset[] );  <METHOD_END>
<METHOD_START> B B ( long long );  <METHOD_END>
<METHOD_START> B B ( long long );  <METHOD_END>
<METHOD_START> B B ( java.lang.String ... java.lang.String[] );  <METHOD_END>
<METHOD_START> B B ( HttpRange ... org.springframework.mock.http.server.reactive.HttpRange[] );  <METHOD_END>
<METHOD_START> org.springframework.mock.http.server.reactive.MockServerHttpRequest org.springframework.mock.http.server.reactive.MockServerHttpRequest ( )  <METHOD_END>
<METHOD_START> org.springframework.mock.http.server.reactive.MockServerWebExchange org.springframework.mock.http.server.reactive.MockServerWebExchange ( )  <METHOD_END>
<METHOD_START> org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( long long );  <METHOD_END>
<METHOD_START> org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( MediaType org.springframework.mock.http.server.reactive.MediaType );  <METHOD_END>
<METHOD_START> org.springframework.mock.http.server.reactive.MockServerHttpRequest org.springframework.mock.http.server.reactive.MockServerHttpRequest ( Publisher < ? extends DataBuffer > org.springframework.mock.http.server.reactive.Publisher<? extends org.springframework.mock.http.server.reactive.DataBuffer> );  <METHOD_END>
<METHOD_START> org.springframework.mock.http.server.reactive.MockServerHttpRequest org.springframework.mock.http.server.reactive.MockServerHttpRequest ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void ( HttpMethod org.springframework.mock.http.server.reactive.HttpMethod , java.net.URI java.net.URI ) { this . org.springframework.mock.http.server.reactive.HttpMethod = org.springframework.mock.http.server.reactive.HttpMethod ; this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( java.net.InetSocketAddress java.net.InetSocketAddress ) { this . java.net.InetSocketAddress = java.net.InetSocketAddress ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( java.lang.String java.lang.String , HttpCookie ... org.springframework.mock.http.server.reactive.HttpCookie[] ) { this . org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> . put ( java.lang.String , java.util.Arrays . java.util.List ( org.springframework.mock.http.server.reactive.HttpCookie[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( MultiValueMap < java.lang.String , HttpCookie > org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> ) { this . org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> . putAll ( org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . org.springframework.mock.http.server.reactive.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> ) { this . org.springframework.mock.http.server.reactive.HttpHeaders . putAll ( org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( MediaType ... org.springframework.mock.http.server.reactive.MediaType[] ) { this . org.springframework.mock.http.server.reactive.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( org.springframework.mock.http.server.reactive.MediaType[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( java.nio.charset.Charset ... java.nio.charset.Charset[] ) { this . org.springframework.mock.http.server.reactive.HttpHeaders . setAcceptCharset ( java.util.Arrays . java.util.List<java.nio.charset.Charset> ( java.nio.charset.Charset[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( long long ) { this . org.springframework.mock.http.server.reactive.HttpHeaders . setContentLength ( long ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( MediaType org.springframework.mock.http.server.reactive.MediaType ) { this . org.springframework.mock.http.server.reactive.HttpHeaders . setContentType ( org.springframework.mock.http.server.reactive.MediaType ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( long long ) { this . org.springframework.mock.http.server.reactive.HttpHeaders . setIfModifiedSince ( long ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( long long ) { this . org.springframework.mock.http.server.reactive.HttpHeaders . setIfUnmodifiedSince ( long ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( java.lang.String ... java.lang.String[] ) { this . org.springframework.mock.http.server.reactive.HttpHeaders . setIfNoneMatch ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder org.springframework.mock.http.server.reactive.MockServerHttpRequest.BodyBuilder ( HttpRange ... org.springframework.mock.http.server.reactive.HttpRange[] ) { this . org.springframework.mock.http.server.reactive.HttpHeaders . setRange ( java.util.Arrays . java.util.List ( org.springframework.mock.http.server.reactive.HttpRange[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest org.springframework.mock.http.server.reactive.MockServerHttpRequest ( Publisher < ? extends DataBuffer > org.springframework.mock.http.server.reactive.Publisher<? extends org.springframework.mock.http.server.reactive.DataBuffer> ) { return new org.springframework.mock.http.server.reactive.MockServerHttpRequest ( this . org.springframework.mock.http.server.reactive.HttpMethod , this . java.net.URI , this . java.lang.String , this . org.springframework.mock.http.server.reactive.HttpHeaders , this . org.springframework.mock.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.mock.http.server.reactive.HttpCookie> , this . java.net.InetSocketAddress , org.springframework.mock.http.server.reactive.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest org.springframework.mock.http.server.reactive.MockServerHttpRequest ( java.lang.String java.lang.String ) { java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset ( ) ; byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.Charset ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; DataBuffer org.springframework.mock.http.server.reactive.DataBuffer = new DefaultDataBufferFactory ( ) . wrap ( java.nio.ByteBuffer ) ; return org.springframework.mock.http.server.reactive.MockServerHttpRequest ( Flux . just ( org.springframework.mock.http.server.reactive.DataBuffer ) ) ; }  <METHOD_END>
<METHOD_START> private java.nio.charset.Charset java.nio.charset.Charset ( ) { MediaType org.springframework.mock.http.server.reactive.MediaType = this . org.springframework.mock.http.server.reactive.HttpHeaders . getContentType ( ) ; java.nio.charset.Charset java.nio.charset.Charset = ( org.springframework.mock.http.server.reactive.MediaType != null ? org.springframework.mock.http.server.reactive.MediaType . getCharset ( ) : null ) ; java.nio.charset.Charset = java.nio.charset.Charset != null ? java.nio.charset.Charset : java.nio.charset.StandardCharsets . java.nio.charset.Charset ; return java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerHttpRequest org.springframework.mock.http.server.reactive.MockServerHttpRequest ( ) { return org.springframework.mock.http.server.reactive.MockServerHttpRequest ( Flux . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.server.reactive.MockServerWebExchange org.springframework.mock.http.server.reactive.MockServerWebExchange ( ) { return org.springframework.mock.http.server.reactive.MockServerHttpRequest ( ) . org.springframework.mock.http.server.reactive.MockServerWebExchange ( ) ; }  <METHOD_END>
