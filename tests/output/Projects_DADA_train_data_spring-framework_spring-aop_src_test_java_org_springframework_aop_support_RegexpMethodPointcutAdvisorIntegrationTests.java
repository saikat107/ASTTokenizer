<METHOD_START> @ Test public void void ( ) java.lang.Throwable { DefaultListableBeanFactory org.springframework.aop.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.support.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.support.Resource ) ; ITestBean org.springframework.aop.support.ITestBean = ( ITestBean ) org.springframework.aop.support.DefaultListableBeanFactory . getBean ( STRING ) ; NopInterceptor org.springframework.aop.support.NopInterceptor = ( NopInterceptor ) org.springframework.aop.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; int int = NUMBER ; org.springframework.aop.support.ITestBean . exceptional ( null ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; org.springframework.aop.support.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.support.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { DefaultListableBeanFactory org.springframework.aop.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.support.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.support.Resource ) ; TestBean org.springframework.aop.support.TestBean = ( TestBean ) org.springframework.aop.support.DefaultListableBeanFactory . getBean ( STRING ) ; NopInterceptor org.springframework.aop.support.NopInterceptor = ( NopInterceptor ) org.springframework.aop.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; int int = NUMBER ; org.springframework.aop.support.TestBean . exceptional ( null ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; org.springframework.aop.support.TestBean . absquatulate ( ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; org.springframework.aop.support.TestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.support.TestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { DefaultListableBeanFactory org.springframework.aop.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.support.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.support.Resource ) ; Person org.springframework.aop.support.Person = ( Person ) org.springframework.aop.support.DefaultListableBeanFactory . getBean ( STRING ) ; NopInterceptor org.springframework.aop.support.NopInterceptor = ( NopInterceptor ) org.springframework.aop.support.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; int int = NUMBER ; assertEquals ( NUMBER , org.springframework.aop.support.Person . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; org.springframework.aop.support.Person . setAge ( int ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; org.springframework.aop.support.Person . setAge ( int ) ; assertEquals ( int , org.springframework.aop.support.Person . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; org.springframework.aop.support.Person = ( Person ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.support.Person ) ; assertEquals ( int , org.springframework.aop.support.Person . getAge ( ) ) ; org.springframework.aop.support.NopInterceptor = ( SerializableNopInterceptor ) ( ( Advised ) org.springframework.aop.support.Person ) . getAdvisors ( ) [ NUMBER ] . getAdvice ( ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; assertEquals ( STRING , org.springframework.aop.support.Person . getName ( ) ) ; org.springframework.aop.support.Person . setAge ( int + NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.support.NopInterceptor . getCount ( ) ) ; assertEquals ( int + NUMBER , org.springframework.aop.support.Person . getAge ( ) ) ; }  <METHOD_END>
