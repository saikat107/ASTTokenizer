<METHOD_START> public void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor , MessageGroupStore org.springframework.integration.aggregator.MessageGroupStore , CorrelationStrategy org.springframework.integration.aggregator.CorrelationStrategy , ReleaseStrategy org.springframework.integration.aggregator.ReleaseStrategy ) { super( org.springframework.integration.aggregator.MessageGroupProcessor , org.springframework.integration.aggregator.MessageGroupStore , org.springframework.integration.aggregator.CorrelationStrategy , org.springframework.integration.aggregator.ReleaseStrategy ); this . void ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor , MessageGroupStore org.springframework.integration.aggregator.MessageGroupStore ) { super( org.springframework.integration.aggregator.MessageGroupProcessor , org.springframework.integration.aggregator.MessageGroupStore ); this . void ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( MessageGroupProcessor org.springframework.integration.aggregator.MessageGroupProcessor ) { super( org.springframework.integration.aggregator.MessageGroupProcessor ); this . void ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( boolean boolean ) { super. setExpireGroupsUponTimeout ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MessageGroup org.springframework.integration.aggregator.MessageGroup , java.util.Collection<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.aggregator.Message<?>> ) { void ( org.springframework.integration.aggregator.MessageGroup , java.util.Collection<org.springframework.integration.aggregator.Message<?>> , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MessageGroup org.springframework.integration.aggregator.MessageGroup , java.util.Collection<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.aggregator.Message<?>> , boolean boolean ) { int int = org.springframework.integration.aggregator.MessageGroup . size ( ) ; int int = org.springframework.integration.aggregator.MessageGroup . getSequenceSize ( ) ; if ( int > NUMBER && int == int ) { remove ( org.springframework.integration.aggregator.MessageGroup ) ; } else { java.lang.Object java.lang.Object = org.springframework.integration.aggregator.MessageGroup . getGroupId ( ) ; MessageGroupStore org.springframework.integration.aggregator.MessageGroupStore = getMessageStore ( ) ; if ( java.util.Collection<org.springframework.integration.aggregator.Message<?>> != null ) { int int = findLastReleasedSequenceNumber ( java.lang.Object , java.util.Collection<org.springframework.integration.aggregator.Message<?>> ) ; org.springframework.integration.aggregator.MessageGroupStore . setLastReleasedSequenceNumberForGroup ( java.lang.Object , int ) ; if ( org.springframework.integration.aggregator.MessageGroupStore instanceof SimpleMessageStore && java.util.Collection<org.springframework.integration.aggregator.Message<?>> . size ( ) == org.springframework.integration.aggregator.MessageGroup . size ( ) ) { ( ( SimpleMessageStore ) org.springframework.integration.aggregator.MessageGroupStore ) . clearMessageGroup ( java.lang.Object ) ; } else { org.springframework.integration.aggregator.MessageGroupStore . removeMessagesFromGroup ( java.lang.Object , java.util.Collection<org.springframework.integration.aggregator.Message<?>> ) ; } } if ( boolean ) { org.springframework.integration.aggregator.MessageGroupStore . completeGroup ( java.lang.Object ) ; } } }  <METHOD_END>
