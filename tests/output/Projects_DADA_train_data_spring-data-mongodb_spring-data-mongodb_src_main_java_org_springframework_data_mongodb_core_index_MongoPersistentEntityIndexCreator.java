<METHOD_START> public void ( MongoMappingContext org.springframework.data.mongodb.core.index.MongoMappingContext , IndexOperationsProvider org.springframework.data.mongodb.core.index.IndexOperationsProvider ) { this( org.springframework.data.mongodb.core.index.MongoMappingContext , org.springframework.data.mongodb.core.index.IndexOperationsProvider , new MongoPersistentEntityIndexResolver ( org.springframework.data.mongodb.core.index.MongoMappingContext ) ); }  <METHOD_END>
<METHOD_START> public void ( MongoMappingContext org.springframework.data.mongodb.core.index.MongoMappingContext , IndexOperationsProvider org.springframework.data.mongodb.core.index.IndexOperationsProvider , IndexResolver org.springframework.data.mongodb.core.index.IndexResolver ) { Assert . notNull ( org.springframework.data.mongodb.core.index.MongoMappingContext , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.index.IndexOperationsProvider , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.index.IndexResolver , STRING ) ; this . org.springframework.data.mongodb.core.index.IndexOperationsProvider = org.springframework.data.mongodb.core.index.IndexOperationsProvider ; this . org.springframework.data.mongodb.core.index.MongoMappingContext = org.springframework.data.mongodb.core.index.MongoMappingContext ; this . org.springframework.data.mongodb.core.index.IndexResolver = org.springframework.data.mongodb.core.index.IndexResolver ; for ( MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> : org.springframework.data.mongodb.core.index.MongoMappingContext . getPersistentEntities ( ) ) { void ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( MappingContextEvent < ? , ? > org.springframework.data.mongodb.core.index.MappingContextEvent<?,?> ) { if ( ! org.springframework.data.mongodb.core.index.MappingContextEvent<,> . wasEmittedBy ( org.springframework.data.mongodb.core.index.MongoMappingContext ) ) { return; } PersistentEntity < ? , ? > org.springframework.data.mongodb.core.index.PersistentEntity<?,?> = org.springframework.data.mongodb.core.index.MappingContextEvent<,> . getPersistentEntity ( ) ; if ( org.springframework.data.mongodb.core.index.PersistentEntity<,> instanceof MongoPersistentEntity ) { void ( ( MongoPersistentEntity < ? > ) org.springframework.data.mongodb.core.index.PersistentEntity<,> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( final MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getType ( ) ; if ( ! java.util.Map<java.lang.Class<?>,java.lang.Boolean> . boolean ( java.lang.Class<> ) ) { this . java.util.Map<java.lang.Class<?>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> , java.lang.Boolean . java.lang.Boolean ) ; if ( org.springframework.data.mongodb.core.index.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.index.Logger . debug ( STRING + java.lang.Class<> + STRING ) ; } void ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> ) { if ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . findAnnotation ( Document .class ) . isPresent ( ) ) { for ( IndexDefinitionHolder org.springframework.data.mongodb.core.index.IndexDefinitionHolder : org.springframework.data.mongodb.core.index.IndexResolver . resolveIndexFor ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getTypeInformation ( ) ) ) { void ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder ) ; } } }  <METHOD_END>
<METHOD_START> void void ( IndexDefinitionHolder org.springframework.data.mongodb.core.index.IndexDefinitionHolder ) { try { IndexOperations org.springframework.data.mongodb.core.index.IndexOperations = org.springframework.data.mongodb.core.index.IndexOperationsProvider . indexOps ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getCollection ( ) ) ; org.springframework.data.mongodb.core.index.IndexOperations . ensureIndex ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder ) ; } catch ( UncategorizedMongoDbException org.springframework.data.mongodb.core.index.UncategorizedMongoDbException ) { if ( org.springframework.data.mongodb.core.index.UncategorizedMongoDbException . getCause ( ) instanceof MongoException && MongoDbErrorCodes . isDataIntegrityViolationCode ( ( ( MongoException ) org.springframework.data.mongodb.core.index.UncategorizedMongoDbException . getCause ( ) ) . getCode ( ) ) ) { IndexInfo org.springframework.data.mongodb.core.index.IndexInfo = org.springframework.data.mongodb.core.index.IndexInfo ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder ) ; java.lang.String java.lang.String = STRING ; if ( org.springframework.data.mongodb.core.index.IndexInfo != null ) { java.lang.String += STRING ; } throw new DataIntegrityViolationException ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getPath ( ) , org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getCollection ( ) , org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getIndexKeys ( ) , org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getIndexOptions ( ) , org.springframework.data.mongodb.core.index.IndexInfo ) , org.springframework.data.mongodb.core.index.UncategorizedMongoDbException . getCause ( ) ) ; } throw org.springframework.data.mongodb.core.index.UncategorizedMongoDbException ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( MappingContext < ? , ? > org.springframework.data.mongodb.core.index.MappingContext<?,?> ) { return this . org.springframework.data.mongodb.core.index.MongoMappingContext . equals ( org.springframework.data.mongodb.core.index.MappingContext<,> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.index.IndexInfo org.springframework.data.mongodb.core.index.IndexInfo ( IndexDefinitionHolder org.springframework.data.mongodb.core.index.IndexDefinitionHolder ) { if ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder == null ) { return null ; } try { IndexOperations org.springframework.data.mongodb.core.index.IndexOperations = org.springframework.data.mongodb.core.index.IndexOperationsProvider . indexOps ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getCollection ( ) ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getIndexOptions ( ) . get ( STRING ) ; java.util.List<org.springframework.data.mongodb.core.index.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.core.index.IndexInfo> = org.springframework.data.mongodb.core.index.IndexOperations . getIndexInfo ( ) ; return java.util.List<org.springframework.data.mongodb.core.index.IndexInfo> . stream ( ) . filter ( indexInfo -> ObjectUtils . nullSafeEquals ( indexNameToLookUp , indexInfo . getName ( ) ) ) . findFirst ( ) . orElse ( null ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.data.mongodb.core.index.Logger . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getCollection ( ) ) , java.lang.Exception ) ; } return null ; }  <METHOD_END>
