<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . setBeanFactory ( this . org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ) ; this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . setEnvironment ( this . org.springframework.boot.autoconfigure.Environment ) ; this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . setResourceLoader ( new DefaultResourceLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata = org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportFreeMarker .class ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . selectImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ; assertThat ( java.lang.String[] ) . containsExactly ( FreeMarkerAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata = org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportFreeMarkerUsingClassesAttribute .class ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . selectImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ; assertThat ( java.lang.String[] ) . containsExactly ( FreeMarkerAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata = org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportFreeMarker .class ) ; this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . selectImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ; verifyZeroInteractions ( this . org.springframework.boot.autoconfigure.Environment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata = org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.MultipleImports .class ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . selectImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ; assertThat ( java.lang.String[] ) . containsOnly ( FreeMarkerAutoConfiguration .class . java.lang.String ( ) , ThymeleafAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata = org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportWithSelfAnnotatingAnnotation .class ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . selectImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ; assertThat ( java.lang.String[] ) . containsOnly ( ThymeleafAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata = org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.MultipleImportsWithExclusion .class ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . selectImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ; assertThat ( java.lang.String[] ) . containsOnly ( FreeMarkerAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata = org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ExclusionWithoutImport .class ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . selectImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ; assertThat ( java.lang.String[] ) . containsOnly ( FreeMarkerAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata = org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportWithSelfAnnotatingAnnotationExclude .class ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . selectImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ; assertThat ( java.lang.String[] ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . determineImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportMetaAutoConfigurationWithUnrelatedOne .class ) ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . determineImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportMetaAutoConfigurationWithUnrelatedTwo .class ) ) ; assertThat ( java.util.Set<java.lang.Object> ) . isEqualTo ( java.util.Set<java.lang.Object> ) ; assertThat ( java.util.Set<java.lang.Object> . int ( ) ) . isEqualTo ( java.util.Set<java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . determineImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportAutoConfigurationWithUnrelatedOne .class ) ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . determineImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportAutoConfigurationWithUnrelatedTwo .class ) ) ; assertThat ( java.util.Set<java.lang.Object> ) . isEqualTo ( java.util.Set<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . determineImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportAutoConfigurationWithItemsOne .class ) ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . determineImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportAutoConfigurationWithItemsTwo .class ) ) ; assertThat ( java.util.Set<java.lang.Object> ) . isEqualTo ( java.util.Set<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . determineImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportMetaAutoConfigurationExcludeWithUnrelatedOne .class ) ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . determineImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportMetaAutoConfigurationExcludeWithUnrelatedTwo .class ) ) ; assertThat ( java.util.Set<java.lang.Object> ) . isEqualTo ( java.util.Set<java.lang.Object> ) ; assertThat ( java.util.Set<java.lang.Object> . int ( ) ) . isEqualTo ( java.util.Set<java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . determineImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportMetaAutoConfigurationExcludeWithUnrelatedOne .class ) ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector . determineImports ( org.springframework.boot.autoconfigure.AnnotationMetadata ( org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.ImportMetaAutoConfigurationWithUnrelatedTwo .class ) ) ; assertThat ( java.util.Set<java.lang.Object> ) . isNotEqualTo ( java.util.Set<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.io.IOException { return new SimpleMetadataReaderFactory ( ) . getMetadataReader ( java.lang.Class<> . java.lang.String ( ) ) . getAnnotationMetadata ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> == org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelectorTests.MetaImportAutoConfiguration .class ) { return java.util.Arrays . java.util.List<java.lang.String> ( ThymeleafAutoConfiguration .class . java.lang.String ( ) , FreeMarkerAutoConfiguration .class . java.lang.String ( ) ) ; } return super. loadFactoryNames ( java.lang.Class<> ) ; }  <METHOD_END>
