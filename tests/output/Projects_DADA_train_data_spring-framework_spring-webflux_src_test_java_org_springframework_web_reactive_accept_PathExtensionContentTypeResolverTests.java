<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; PathExtensionContentTypeResolver org.springframework.web.reactive.accept.PathExtensionContentTypeResolver = new PathExtensionContentTypeResolver ( ) ; java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> = org.springframework.web.reactive.accept.PathExtensionContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ; assertEquals ( java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , java.util.List<org.springframework.web.reactive.accept.MediaType> ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> = java.util.Collections . java.util.Map ( STRING , MediaType . APPLICATION_XHTML_XML ) ; org.springframework.web.reactive.accept.PathExtensionContentTypeResolver = new PathExtensionContentTypeResolver ( java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) ; java.util.List<org.springframework.web.reactive.accept.MediaType> = org.springframework.web.reactive.accept.PathExtensionContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ; assertEquals ( java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , java.util.List<org.springframework.web.reactive.accept.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; PathExtensionContentTypeResolver org.springframework.web.reactive.accept.PathExtensionContentTypeResolver = new PathExtensionContentTypeResolver ( ) ; java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> = org.springframework.web.reactive.accept.PathExtensionContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ; assertEquals ( java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , java.util.List<org.springframework.web.reactive.accept.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; PathExtensionContentTypeResolver org.springframework.web.reactive.accept.PathExtensionContentTypeResolver = new PathExtensionContentTypeResolver ( ) ; java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> = org.springframework.web.reactive.accept.PathExtensionContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ; assertEquals ( STRING , java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , java.util.List<org.springframework.web.reactive.accept.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; PathExtensionContentTypeResolver org.springframework.web.reactive.accept.PathExtensionContentTypeResolver = new PathExtensionContentTypeResolver ( ) ; java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> = org.springframework.web.reactive.accept.PathExtensionContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ; assertEquals ( java.util.Collections .< MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> ( ) , java.util.List<org.springframework.web.reactive.accept.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NotAcceptableStatusException .class ) public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; PathExtensionContentTypeResolver org.springframework.web.reactive.accept.PathExtensionContentTypeResolver = new PathExtensionContentTypeResolver ( ) ; org.springframework.web.reactive.accept.PathExtensionContentTypeResolver . setIgnoreUnknownExtensions ( false ) ; org.springframework.web.reactive.accept.PathExtensionContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ; }  <METHOD_END>
