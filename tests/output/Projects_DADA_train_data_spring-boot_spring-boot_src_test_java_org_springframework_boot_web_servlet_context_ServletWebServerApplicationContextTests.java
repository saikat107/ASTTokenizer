<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext = new ServletWebServerApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; MockServletWebServerFactory org.springframework.boot.web.servlet.context.MockServletWebServerFactory = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) ; assertThat ( this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . getServletContext ( ) ) . isEqualTo ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ) . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext ) ; assertThat ( this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . getBeanFactory ( ) . getRegisteredScope ( WebApplicationContext . SCOPE_SESSION ) ) . isInstanceOf ( SessionScope .class ) ; assertThat ( this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . containsBean ( WebApplicationContext . SERVLET_CONTEXT_BEAN_NAME ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractApplicationContext .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.Object java.lang.Object = java.lang.reflect.Field . java.lang.Object ( this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext ) ; assertThat ( java.lang.Object ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.MockListener .class ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; ServletWebServerInitializedEvent org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent = this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . getBean ( org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.MockListener .class ) . getEvent ( ) ; assertThat ( org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent ) . isNotNull ( ) ; assertThat ( org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent . getSource ( ) . getPort ( ) >= NUMBER ) . isTrue ( ) ; assertThat ( org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent . getApplicationContext ( ) ) . isEqualTo ( this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; new ServerPortInfoApplicationContextInitializer ( ) . initialize ( this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; ConfigurableEnvironment org.springframework.boot.web.servlet.context.ConfigurableEnvironment = this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . getEnvironment ( ) ; assertThat ( org.springframework.boot.web.servlet.context.ConfigurableEnvironment . containsProperty ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.web.servlet.context.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; MockServletWebServerFactory org.springframework.boot.web.servlet.context.MockServletWebServerFactory = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . close ( ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getWebServer ( ) ) . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; this . org.springframework.boot.web.servlet.context.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; ServletContextAware org.springframework.boot.web.servlet.context.ServletContextAware = mock ( ServletContextAware .class ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.ServletContextAware ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; verify ( org.springframework.boot.web.servlet.context.ServletContextAware ) . setServletContext ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) . getServletContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.context.ExpectedException . expect ( ApplicationContextException .class ) ; this . org.springframework.boot.web.servlet.context.ExpectedException . expectMessage ( STRING + STRING ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( MockServletWebServerFactory .class ) ) ; this . org.springframework.boot.web.servlet.context.ExpectedException . expect ( ApplicationContextException .class ) ; this . org.springframework.boot.web.servlet.context.ExpectedException . expectMessage ( STRING + STRING ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; Servlet org.springframework.boot.web.servlet.context.Servlet = mock ( Servlet .class ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Servlet ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; MockServletWebServerFactory org.springframework.boot.web.servlet.context.MockServletWebServerFactory = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ) . addServlet ( STRING , org.springframework.boot.web.servlet.context.Servlet ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getRegisteredServlet ( NUMBER ) . getRegistration ( ) ) . addMapping ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.OrderedFilter org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.OrderedFilter = new org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.OrderedFilter ( ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.OrderedFilter ) ) ; FilterRegistrationBean < Filter > org.springframework.boot.web.servlet.context.FilterRegistrationBean<org.springframework.boot.web.servlet.context.Filter> = new FilterRegistrationBean <> ( ) ; org.springframework.boot.web.servlet.context.FilterRegistrationBean<org.springframework.boot.web.servlet.context.Filter> . setFilter ( mock ( Filter .class ) ) ; org.springframework.boot.web.servlet.context.FilterRegistrationBean<org.springframework.boot.web.servlet.context.Filter> . setOrder ( NUMBER ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.FilterRegistrationBean<org.springframework.boot.web.servlet.context.Filter> ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; MockServletWebServerFactory org.springframework.boot.web.servlet.context.MockServletWebServerFactory = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ) . addFilter ( STRING , org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.OrderedFilter ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ) . addFilter ( STRING , org.springframework.boot.web.servlet.context.FilterRegistrationBean<org.springframework.boot.web.servlet.context.Filter> . getFilter ( ) ) ; assertThat ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getRegisteredFilter ( NUMBER ) . getFilter ( ) ) . isEqualTo ( org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.OrderedFilter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; Servlet org.springframework.boot.web.servlet.context.Servlet = mock ( Servlet .class , withSettings ( ) . extraInterfaces ( Ordered .class ) ) ; given ( ( ( Ordered ) org.springframework.boot.web.servlet.context.Servlet ) . getOrder ( ) ) . willReturn ( NUMBER ) ; Servlet org.springframework.boot.web.servlet.context.Servlet = mock ( Servlet .class , withSettings ( ) . extraInterfaces ( Ordered .class ) ) ; given ( ( ( Ordered ) org.springframework.boot.web.servlet.context.Servlet ) . getOrder ( ) ) . willReturn ( NUMBER ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Servlet ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Servlet ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; MockServletWebServerFactory org.springframework.boot.web.servlet.context.MockServletWebServerFactory = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ; InOrder org.springframework.boot.web.servlet.context.InOrder = inOrder ( org.springframework.boot.web.servlet.context.ServletContext ) ; org.springframework.boot.web.servlet.context.InOrder . verify ( org.springframework.boot.web.servlet.context.ServletContext ) . addServlet ( STRING , org.springframework.boot.web.servlet.context.Servlet ) ; org.springframework.boot.web.servlet.context.InOrder . verify ( org.springframework.boot.web.servlet.context.ServletContext ) . addServlet ( STRING , org.springframework.boot.web.servlet.context.Servlet ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getRegisteredServlet ( NUMBER ) . getRegistration ( ) ) . addMapping ( STRING ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getRegisteredServlet ( NUMBER ) . getRegistration ( ) ) . addMapping ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; Servlet org.springframework.boot.web.servlet.context.Servlet = mock ( Servlet .class , withSettings ( ) . extraInterfaces ( Ordered .class ) ) ; given ( ( ( Ordered ) org.springframework.boot.web.servlet.context.Servlet ) . getOrder ( ) ) . willReturn ( NUMBER ) ; Servlet org.springframework.boot.web.servlet.context.Servlet = mock ( Servlet .class , withSettings ( ) . extraInterfaces ( Ordered .class ) ) ; given ( ( ( Ordered ) org.springframework.boot.web.servlet.context.Servlet ) . getOrder ( ) ) . willReturn ( NUMBER ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Servlet ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Servlet ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; MockServletWebServerFactory org.springframework.boot.web.servlet.context.MockServletWebServerFactory = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ; InOrder org.springframework.boot.web.servlet.context.InOrder = inOrder ( org.springframework.boot.web.servlet.context.ServletContext ) ; org.springframework.boot.web.servlet.context.InOrder . verify ( org.springframework.boot.web.servlet.context.ServletContext ) . addServlet ( STRING , org.springframework.boot.web.servlet.context.Servlet ) ; org.springframework.boot.web.servlet.context.InOrder . verify ( org.springframework.boot.web.servlet.context.ServletContext ) . addServlet ( STRING , org.springframework.boot.web.servlet.context.Servlet ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getRegisteredServlet ( NUMBER ) . getRegistration ( ) ) . addMapping ( STRING ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getRegisteredServlet ( NUMBER ) . getRegistration ( ) ) . addMapping ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; Servlet org.springframework.boot.web.servlet.context.Servlet = mock ( Servlet .class ) ; Filter org.springframework.boot.web.servlet.context.Filter = mock ( Filter .class , withSettings ( ) . extraInterfaces ( Ordered .class ) ) ; given ( ( ( Ordered ) org.springframework.boot.web.servlet.context.Filter ) . getOrder ( ) ) . willReturn ( NUMBER ) ; Filter org.springframework.boot.web.servlet.context.Filter = mock ( Filter .class , withSettings ( ) . extraInterfaces ( Ordered .class ) ) ; given ( ( ( Ordered ) org.springframework.boot.web.servlet.context.Filter ) . getOrder ( ) ) . willReturn ( NUMBER ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Servlet ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Filter ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Filter ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; MockServletWebServerFactory org.springframework.boot.web.servlet.context.MockServletWebServerFactory = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ; InOrder org.springframework.boot.web.servlet.context.InOrder = inOrder ( org.springframework.boot.web.servlet.context.ServletContext ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ) . addServlet ( STRING , org.springframework.boot.web.servlet.context.Servlet ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getRegisteredServlet ( NUMBER ) . getRegistration ( ) ) . addMapping ( STRING ) ; org.springframework.boot.web.servlet.context.InOrder . verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ) . addFilter ( STRING , org.springframework.boot.web.servlet.context.Filter ) ; org.springframework.boot.web.servlet.context.InOrder . verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getServletContext ( ) ) . addFilter ( STRING , org.springframework.boot.web.servlet.context.Filter ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getRegisteredFilter ( NUMBER ) . getRegistration ( ) ) . addMappingForUrlPatterns ( java.util.EnumSet . java.util.EnumSet ( DispatcherType . REQUEST ) , false , STRING ) ; verify ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory . getRegisteredFilter ( NUMBER ) . getRegistration ( ) ) . addMappingForUrlPatterns ( java.util.EnumSet . java.util.EnumSet ( DispatcherType . REQUEST ) , false , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; ServletContextInitializer org.springframework.boot.web.servlet.context.ServletContextInitializer = mock ( ServletContextInitializer .class , withSettings ( ) . extraInterfaces ( Ordered .class ) ) ; given ( ( ( Ordered ) org.springframework.boot.web.servlet.context.ServletContextInitializer ) . getOrder ( ) ) . willReturn ( NUMBER ) ; ServletContextInitializer org.springframework.boot.web.servlet.context.ServletContextInitializer = mock ( ServletContextInitializer .class , withSettings ( ) . extraInterfaces ( Ordered .class ) ) ; given ( ( ( Ordered ) org.springframework.boot.web.servlet.context.ServletContextInitializer ) . getOrder ( ) ) . willReturn ( NUMBER ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.ServletContextInitializer ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.ServletContextInitializer ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) . getServletContext ( ) ; InOrder org.springframework.boot.web.servlet.context.InOrder = inOrder ( org.springframework.boot.web.servlet.context.ServletContextInitializer , org.springframework.boot.web.servlet.context.ServletContextInitializer ) ; org.springframework.boot.web.servlet.context.InOrder . verify ( org.springframework.boot.web.servlet.context.ServletContextInitializer ) . onStartup ( org.springframework.boot.web.servlet.context.ServletContext ) ; org.springframework.boot.web.servlet.context.InOrder . verify ( org.springframework.boot.web.servlet.context.ServletContextInitializer ) . onStartup ( org.springframework.boot.web.servlet.context.ServletContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; ServletContextListener org.springframework.boot.web.servlet.context.ServletContextListener = mock ( ServletContextListener .class ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.ServletContextListener ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) . getServletContext ( ) ; verify ( org.springframework.boot.web.servlet.context.ServletContext ) . addListener ( org.springframework.boot.web.servlet.context.ServletContextListener ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; ServletContextInitializer org.springframework.boot.web.servlet.context.ServletContextInitializer = mock ( ServletContextInitializer .class ) ; ServletContextInitializer org.springframework.boot.web.servlet.context.ServletContextInitializer = mock ( ServletContextInitializer .class ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.ServletContextInitializer ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.ServletContextInitializer ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) . getServletContext ( ) ; verify ( org.springframework.boot.web.servlet.context.ServletContextInitializer ) . onStartup ( org.springframework.boot.web.servlet.context.ServletContext ) ; verify ( org.springframework.boot.web.servlet.context.ServletContextInitializer ) . onStartup ( org.springframework.boot.web.servlet.context.ServletContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; ServletContextInitializer org.springframework.boot.web.servlet.context.ServletContextInitializer = mock ( ServletContextInitializer .class ) ; Servlet org.springframework.boot.web.servlet.context.Servlet = mock ( Servlet .class ) ; Filter org.springframework.boot.web.servlet.context.Filter = mock ( Filter .class ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.ServletContextInitializer ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Servlet ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Filter ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) . getServletContext ( ) ; verify ( org.springframework.boot.web.servlet.context.ServletContextInitializer ) . onStartup ( org.springframework.boot.web.servlet.context.ServletContext ) ; verify ( org.springframework.boot.web.servlet.context.ServletContext ) . addServlet ( anyString ( ) , ( Servlet ) any ( ) ) ; verify ( org.springframework.boot.web.servlet.context.ServletContext ) . addFilter ( anyString ( ) , ( Filter ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; Servlet org.springframework.boot.web.servlet.context.Servlet = mock ( Servlet .class ) ; Filter org.springframework.boot.web.servlet.context.Filter = mock ( Filter .class ) ; ServletRegistrationBean < Servlet > org.springframework.boot.web.servlet.context.ServletRegistrationBean<org.springframework.boot.web.servlet.context.Servlet> = new ServletRegistrationBean <> ( org.springframework.boot.web.servlet.context.Servlet , STRING ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.ServletRegistrationBean<org.springframework.boot.web.servlet.context.Servlet> ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Servlet ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Filter ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) . getServletContext ( ) ; verify ( org.springframework.boot.web.servlet.context.ServletContext , atMost ( NUMBER ) ) . addServlet ( anyString ( ) , ( Servlet ) any ( ) ) ; verify ( org.springframework.boot.web.servlet.context.ServletContext , atMost ( NUMBER ) ) . addFilter ( anyString ( ) , ( Filter ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; Filter org.springframework.boot.web.servlet.context.Filter = mock ( Filter .class ) ; FilterRegistrationBean < Filter > org.springframework.boot.web.servlet.context.FilterRegistrationBean<org.springframework.boot.web.servlet.context.Filter> = new FilterRegistrationBean <> ( org.springframework.boot.web.servlet.context.Filter ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.FilterRegistrationBean<org.springframework.boot.web.servlet.context.Filter> ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.Filter ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) . getServletContext ( ) ; verify ( org.springframework.boot.web.servlet.context.ServletContext , atMost ( NUMBER ) ) . addFilter ( anyString ( ) , ( Filter ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; DelegatingFilterProxyRegistrationBean org.springframework.boot.web.servlet.context.DelegatingFilterProxyRegistrationBean = new DelegatingFilterProxyRegistrationBean ( STRING ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.DelegatingFilterProxyRegistrationBean ) ) ; BeanDefinition org.springframework.boot.web.servlet.context.BeanDefinition = org.springframework.boot.web.servlet.context.BeanDefinition ( new java.lang.IllegalStateException ( STRING ) ) ; org.springframework.boot.web.servlet.context.BeanDefinition . setLazyInit ( true ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; ServletContext org.springframework.boot.web.servlet.context.ServletContext = org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) . getServletContext ( ) ; verify ( org.springframework.boot.web.servlet.context.ServletContext , atMost ( NUMBER ) ) . addFilter ( anyString ( ) , this . org.springframework.boot.web.servlet.context.ArgumentCaptor<org.springframework.boot.web.servlet.context.Filter> . capture ( ) ) ; this . org.springframework.boot.web.servlet.context.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.web.servlet.context.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.web.servlet.context.ArgumentCaptor<org.springframework.boot.web.servlet.context.Filter> . getValue ( ) . init ( new MockFilterConfig ( ) ) ; this . org.springframework.boot.web.servlet.context.ArgumentCaptor<org.springframework.boot.web.servlet.context.Filter> . getValue ( ) . doFilter ( new MockHttpServletRequest ( ) , new MockHttpServletResponse ( ) , new MockFilterChain ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RootBeanDefinition org.springframework.boot.web.servlet.context.RootBeanDefinition = new RootBeanDefinition ( MockServletWebServerFactory .class ) ; MutablePropertyValues org.springframework.boot.web.servlet.context.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.boot.web.servlet.context.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.boot.web.servlet.context.RootBeanDefinition . setPropertyValues ( org.springframework.boot.web.servlet.context.MutablePropertyValues ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.RootBeanDefinition ) ; PropertySourcesPlaceholderConfigurer org.springframework.boot.web.servlet.context.PropertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , NUMBER ) ; org.springframework.boot.web.servlet.context.PropertySourcesPlaceholderConfigurer . setProperties ( java.util.Properties ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.web.servlet.context.BeanDefinition ( org.springframework.boot.web.servlet.context.PropertySourcesPlaceholderConfigurer ) ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) . getWebServer ( ) . getPort ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Scope org.springframework.boot.web.servlet.context.Scope = mock ( Scope .class ) ; ConfigurableListableBeanFactory org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory = this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . getBeanFactory ( ) ; org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory . registerScope ( WebApplicationContext . SCOPE_REQUEST , org.springframework.boot.web.servlet.context.Scope ) ; org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory . registerScope ( WebApplicationContext . SCOPE_SESSION , org.springframework.boot.web.servlet.context.Scope ) ; void ( ) ; this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory . getRegisteredScope ( WebApplicationContext . SCOPE_REQUEST ) ) . isSameAs ( org.springframework.boot.web.servlet.context.Scope ) ; assertThat ( org.springframework.boot.web.servlet.context.ConfigurableListableBeanFactory . getRegisteredScope ( WebApplicationContext . SCOPE_SESSION ) ) . isSameAs ( org.springframework.boot.web.servlet.context.Scope ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( MockServletWebServerFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.servlet.context.MockServletWebServerFactory org.springframework.boot.web.servlet.context.MockServletWebServerFactory ( ) { return this . org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext . getBean ( MockServletWebServerFactory .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.servlet.context.BeanDefinition org.springframework.boot.web.servlet.context.BeanDefinition ( java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.boot.web.servlet.context.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.boot.web.servlet.context.RootBeanDefinition . setBeanClass ( java.lang.Class<? extends org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests> ( ) ) ; org.springframework.boot.web.servlet.context.RootBeanDefinition . setFactoryMethodName ( STRING ) ; ConstructorArgumentValues org.springframework.boot.web.servlet.context.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.boot.web.servlet.context.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.Object ) ; org.springframework.boot.web.servlet.context.RootBeanDefinition . setConstructorArgumentValues ( org.springframework.boot.web.servlet.context.ConstructorArgumentValues ) ; return org.springframework.boot.web.servlet.context.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> public static < T > T T ( T T ) { if ( T instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) T ; } return T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletWebServerInitializedEvent org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent ) { this . org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent = org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent ( ) { return this . org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.context.ServletRequest , ServletResponse org.springframework.boot.web.servlet.context.ServletResponse , FilterChain org.springframework.boot.web.servlet.context.FilterChain ) throws java.io.IOException , org.springframework.boot.web.servlet.context.ServletException {		}  <METHOD_END>
