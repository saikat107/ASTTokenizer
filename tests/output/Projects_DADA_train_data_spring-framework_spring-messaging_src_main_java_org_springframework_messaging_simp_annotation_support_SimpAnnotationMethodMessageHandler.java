<METHOD_START> public void ( SubscribableChannel org.springframework.messaging.simp.annotation.support.SubscribableChannel , MessageChannel org.springframework.messaging.simp.annotation.support.MessageChannel , SimpMessageSendingOperations org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations ) { Assert . notNull ( org.springframework.messaging.simp.annotation.support.SubscribableChannel , STRING ) ; Assert . notNull ( org.springframework.messaging.simp.annotation.support.MessageChannel , STRING ) ; Assert . notNull ( org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations , STRING ) ; this . org.springframework.messaging.simp.annotation.support.SubscribableChannel = org.springframework.messaging.simp.annotation.support.SubscribableChannel ; this . org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations = new SimpMessagingTemplate ( org.springframework.messaging.simp.annotation.support.MessageChannel ) ; this . org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations = org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations ; java.util.Collection<org.springframework.messaging.simp.annotation.support.MessageConverter> < MessageConverter > java.util.Collection<org.springframework.messaging.simp.annotation.support.MessageConverter> = new java.util.ArrayList<org.springframework.messaging.simp.annotation.support.MessageConverter> <> ( ) ; java.util.Collection<org.springframework.messaging.simp.annotation.support.MessageConverter> . add ( new StringMessageConverter ( ) ) ; java.util.Collection<org.springframework.messaging.simp.annotation.support.MessageConverter> . add ( new ByteArrayMessageConverter ( ) ) ; this . org.springframework.messaging.simp.annotation.support.MessageConverter = new CompositeMessageConverter ( java.util.Collection<org.springframework.messaging.simp.annotation.support.MessageConverter> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { super. setDestinationPrefixes ( java.util.Collection<java.lang.String> ( java.util.Collection<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { if ( CollectionUtils . isEmpty ( java.util.Collection<java.lang.String> ) ) { return java.util.Collection<java.lang.String> ; } java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.util.Collection<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String + STRING ; } java.util.Collection<java.lang.String> . boolean ( java.lang.String ) ; } return java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.messaging.simp.annotation.support.MessageConverter ) { this . org.springframework.messaging.simp.annotation.support.MessageConverter = org.springframework.messaging.simp.annotation.support.MessageConverter ; if ( org.springframework.messaging.simp.annotation.support.MessageConverter != null ) { ( ( AbstractMessageSendingTemplate < ? > ) this . org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations ) . setMessageConverter ( org.springframework.messaging.simp.annotation.support.MessageConverter ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.annotation.support.MessageConverter org.springframework.messaging.simp.annotation.support.MessageConverter ( ) { return this . org.springframework.messaging.simp.annotation.support.MessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( ConversionService org.springframework.messaging.simp.annotation.support.ConversionService ) { this . org.springframework.messaging.simp.annotation.support.ConversionService = org.springframework.messaging.simp.annotation.support.ConversionService ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.annotation.support.ConversionService org.springframework.messaging.simp.annotation.support.ConversionService ( ) { return this . org.springframework.messaging.simp.annotation.support.ConversionService ; }  <METHOD_END>
<METHOD_START> public void void ( PathMatcher org.springframework.messaging.simp.annotation.support.PathMatcher ) { Assert . notNull ( org.springframework.messaging.simp.annotation.support.PathMatcher , STRING ) ; this . org.springframework.messaging.simp.annotation.support.PathMatcher = org.springframework.messaging.simp.annotation.support.PathMatcher ; this . boolean = this . org.springframework.messaging.simp.annotation.support.PathMatcher . combine ( STRING , STRING ) . equals ( STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.annotation.support.PathMatcher org.springframework.messaging.simp.annotation.support.PathMatcher ( ) { return this . org.springframework.messaging.simp.annotation.support.PathMatcher ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.annotation.support.Validator org.springframework.messaging.simp.annotation.support.Validator ( ) { return this . org.springframework.messaging.simp.annotation.support.Validator ; }  <METHOD_END>
<METHOD_START> public void void ( Validator org.springframework.messaging.simp.annotation.support.Validator ) { this . org.springframework.messaging.simp.annotation.support.Validator = org.springframework.messaging.simp.annotation.support.Validator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StringValueResolver org.springframework.messaging.simp.annotation.support.StringValueResolver ) { this . org.springframework.messaging.simp.annotation.support.StringValueResolver = org.springframework.messaging.simp.annotation.support.StringValueResolver ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHeaderInitializer org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ) { this . org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer = org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ( ) { return this . org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Integer . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { synchronized ( this . java.lang.Object ) { this . org.springframework.messaging.simp.annotation.support.SubscribableChannel . subscribe ( this ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { synchronized ( this . java.lang.Object ) { this . boolean = false ; this . org.springframework.messaging.simp.annotation.support.SubscribableChannel . unsubscribe ( this ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( java.lang.Runnable java.lang.Runnable ) { synchronized ( this . java.lang.Object ) { void ( ) ; java.lang.Runnable . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( ) { synchronized ( this . java.lang.Object ) { return this . boolean ; } }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> ( ) { ConfigurableBeanFactory org.springframework.messaging.simp.annotation.support.ConfigurableBeanFactory = ( getApplicationContext ( ) instanceof ConfigurableApplicationContext ? ( ( ConfigurableApplicationContext ) getApplicationContext ( ) ) . getBeanFactory ( ) : null ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> = new java.util.ArrayList<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> <> ( ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> . add ( new HeaderMethodArgumentResolver ( this . org.springframework.messaging.simp.annotation.support.ConversionService , org.springframework.messaging.simp.annotation.support.ConfigurableBeanFactory ) ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> . add ( new HeadersMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> . add ( new DestinationVariableMethodArgumentResolver ( this . org.springframework.messaging.simp.annotation.support.ConversionService ) ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> . add ( new PrincipalMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> . add ( new MessageMethodArgumentResolver ( this . org.springframework.messaging.simp.annotation.support.MessageConverter ) ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> . addAll ( getCustomArgumentResolvers ( ) ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> . add ( new PayloadArgumentResolver ( this . org.springframework.messaging.simp.annotation.support.MessageConverter , this . org.springframework.messaging.simp.annotation.support.Validator ) ) ; return java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<? extends org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> < ? extends HandlerMethodReturnValueHandler > java.util.List<? extends org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> ( ) { java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> = new java.util.ArrayList<org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> <> ( ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> . add ( new ListenableFutureReturnValueHandler ( ) ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> . add ( new CompletableFutureReturnValueHandler ( ) ) ; SendToMethodReturnValueHandler org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler = new SendToMethodReturnValueHandler ( this . org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations , true ) ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . setHeaderInitializer ( this . org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> . add ( org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler ) ; SubscriptionMethodReturnValueHandler org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler = new SubscriptionMethodReturnValueHandler ( this . org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations ) ; org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler . setHeaderInitializer ( this . org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> . add ( org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> . addAll ( getCustomReturnValueHandlers ( ) ) ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler = new SendToMethodReturnValueHandler ( this . org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations , false ) ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . setHeaderInitializer ( this . org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ) ; java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> . add ( org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler ) ; return java.util.List<org.springframework.messaging.simp.annotation.support.HandlerMethodReturnValueHandler> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return AnnotatedElementUtils . hasAnnotation ( java.lang.Class<> , Controller .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { MessageMapping org.springframework.messaging.simp.annotation.support.MessageMapping = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , MessageMapping .class ) ; if ( org.springframework.messaging.simp.annotation.support.MessageMapping != null ) { MessageMapping org.springframework.messaging.simp.annotation.support.MessageMapping = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , MessageMapping .class ) ; if ( org.springframework.messaging.simp.annotation.support.MessageMapping . value ( ) . length > NUMBER || ( org.springframework.messaging.simp.annotation.support.MessageMapping != null && org.springframework.messaging.simp.annotation.support.MessageMapping . value ( ) . length > NUMBER ) ) { SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo = org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ( org.springframework.messaging.simp.annotation.support.MessageMapping . value ( ) ) ; if ( org.springframework.messaging.simp.annotation.support.MessageMapping != null ) { org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo = org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ( org.springframework.messaging.simp.annotation.support.MessageMapping . value ( ) ) . combine ( org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ) ; } return org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ; } } SubscribeMapping org.springframework.messaging.simp.annotation.support.SubscribeMapping = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , SubscribeMapping .class ) ; if ( org.springframework.messaging.simp.annotation.support.SubscribeMapping != null ) { MessageMapping org.springframework.messaging.simp.annotation.support.MessageMapping = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , MessageMapping .class ) ; if ( org.springframework.messaging.simp.annotation.support.SubscribeMapping . value ( ) . length > NUMBER || ( org.springframework.messaging.simp.annotation.support.MessageMapping != null && org.springframework.messaging.simp.annotation.support.MessageMapping . value ( ) . length > NUMBER ) ) { SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo = org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ( org.springframework.messaging.simp.annotation.support.SubscribeMapping . value ( ) ) ; if ( org.springframework.messaging.simp.annotation.support.MessageMapping != null ) { org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo = org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ( org.springframework.messaging.simp.annotation.support.MessageMapping . value ( ) ) . combine ( org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ) ; } return org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ; } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ( java.lang.String [] java.lang.String[] ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.String[] ) ; return new SimpMessageMappingInfo ( SimpMessageTypeMessageCondition . MESSAGE , new DestinationPatternsMessageCondition ( java.lang.String[] , this . org.springframework.messaging.simp.annotation.support.PathMatcher ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ( java.lang.String [] java.lang.String[] ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.String[] ) ; return new SimpMessageMappingInfo ( SimpMessageTypeMessageCondition . SUBSCRIBE , new DestinationPatternsMessageCondition ( java.lang.String[] , this . org.springframework.messaging.simp.annotation.support.PathMatcher ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( java.lang.String [] java.lang.String[] ) { if ( this . org.springframework.messaging.simp.annotation.support.StringValueResolver == null ) { return java.lang.String[] ; } java.lang.String [] java.lang.String[] = new java.lang.String [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String[] [ int ] = this . org.springframework.messaging.simp.annotation.support.StringValueResolver . resolveStringValue ( java.lang.String[] [ int ] ) ; } return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo . getDestinationConditions ( ) . getPatterns ( ) ) { if ( ! this . org.springframework.messaging.simp.annotation.support.PathMatcher . isPattern ( java.lang.String ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> ) { return SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.annotation.support.Message<> . getHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( java.lang.String == null ) { return null ; } if ( CollectionUtils . isEmpty ( getDestinationPrefixes ( ) ) ) { return java.lang.String ; } for ( java.lang.String java.lang.String : getDestinationPrefixes ( ) ) { if ( java.lang.String . boolean ( java.lang.String ) ) { if ( this . boolean ) { return java.lang.String . java.lang.String ( java.lang.String . int ( ) - NUMBER ) ; } else { return java.lang.String . java.lang.String ( java.lang.String . int ( ) ) ; } } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ( SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo , Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> ) { return org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo . getMatchingCondition ( org.springframework.messaging.simp.annotation.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Comparator<org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo> < SimpMessageMappingInfo > java.util.Comparator<org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo> ( final Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> ) { return new java.util.Comparator<org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo> < SimpMessageMappingInfo > ( ) { @ java.lang.Override public int int ( SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo , SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ) { return org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo . compareTo ( org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo , org.springframework.messaging.simp.annotation.support.Message<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo , SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo ) { return org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo . compareTo ( org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo , org.springframework.messaging.simp.annotation.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( SimpMessageMappingInfo org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo , HandlerMethod org.springframework.messaging.simp.annotation.support.HandlerMethod , java.lang.String java.lang.String , Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo . getDestinationConditions ( ) . getPatterns ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.Set<java.lang.String> ) ) { java.lang.String java.lang.String = java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.messaging.simp.annotation.support.PathMatcher ( ) . extractUriTemplateVariables ( java.lang.String , java.lang.String ) ; if ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.String> ) ) { MessageHeaderAccessor org.springframework.messaging.simp.annotation.support.MessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.simp.annotation.support.Message<> , MessageHeaderAccessor .class ) ; Assert . state ( org.springframework.messaging.simp.annotation.support.MessageHeaderAccessor != null && org.springframework.messaging.simp.annotation.support.MessageHeaderAccessor . isMutable ( ) , STRING ) ; org.springframework.messaging.simp.annotation.support.MessageHeaderAccessor . setHeader ( DestinationVariableMethodArgumentResolver . DESTINATION_TEMPLATE_VARIABLES_HEADER , java.util.Map<java.lang.String,java.lang.String> ) ; } } try { SimpAttributesContextHolder . setAttributesFromMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; super. handleMatch ( org.springframework.messaging.simp.annotation.support.SimpMessageMappingInfo , org.springframework.messaging.simp.annotation.support.HandlerMethod , java.lang.String , org.springframework.messaging.simp.annotation.support.Message<> ) ; } finally { SimpAttributesContextHolder . resetAttributes ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.simp.annotation.support.AbstractExceptionHandlerMethodResolver org.springframework.messaging.simp.annotation.support.AbstractExceptionHandlerMethodResolver ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new AnnotationExceptionHandlerMethodResolver ( java.lang.Class<> ) ; }  <METHOD_END>
