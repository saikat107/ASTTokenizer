<METHOD_START> void ( java.lang.Thread.UncaughtExceptionHandler java.lang.Thread.UncaughtExceptionHandler ) { this . java.lang.Thread.UncaughtExceptionHandler = java.lang.Thread.UncaughtExceptionHandler ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Throwable java.lang.Throwable ) { this . java.util.List<java.lang.Throwable> . boolean ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Thread java.lang.Thread , java.lang.Throwable java.lang.Throwable ) { try { if ( boolean ( java.lang.Throwable ) && this . java.lang.Thread.UncaughtExceptionHandler != null ) { this . java.lang.Thread.UncaughtExceptionHandler . void ( java.lang.Thread , java.lang.Throwable ) ; } } finally { this . java.util.List<java.lang.Throwable> . void ( ) ; if ( this . int != NUMBER ) { java.lang.System . void ( this . int ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Throwable java.lang.Throwable ) { return boolean ( java.lang.Throwable ) || ! boolean ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Throwable java.lang.Throwable ) { java.lang.String java.lang.String = java.lang.Throwable . java.lang.String ( ) ; if ( java.lang.String != null ) { for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Throwable java.lang.Throwable ) { if ( this . java.util.List<java.lang.Throwable> . boolean ( java.lang.Throwable ) ) { return true ; } if ( java.lang.Throwable instanceof java.lang.reflect.InvocationTargetException ) { return boolean ( java.lang.Throwable . java.lang.Throwable ( ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> static org.springframework.boot.SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler ( ) { return org.springframework.boot.SpringBootExceptionHandler.LoggedExceptionHandlerThreadLocal . org.springframework.boot.SpringBootExceptionHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler ( ) { org.springframework.boot.SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler = new org.springframework.boot.SpringBootExceptionHandler ( java.lang.Thread . java.lang.Thread ( ) . java.lang.Thread.UncaughtExceptionHandler ( ) ) ; java.lang.Thread . java.lang.Thread ( ) . void ( org.springframework.boot.SpringBootExceptionHandler ) ; return org.springframework.boot.SpringBootExceptionHandler ; }  <METHOD_END>
