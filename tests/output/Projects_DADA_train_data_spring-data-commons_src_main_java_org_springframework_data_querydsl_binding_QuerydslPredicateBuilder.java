<METHOD_START> public void ( ConversionService org.springframework.data.querydsl.binding.ConversionService , EntityPathResolver org.springframework.data.querydsl.binding.EntityPathResolver ) { Assert . notNull ( org.springframework.data.querydsl.binding.ConversionService , STRING ) ; this . org.springframework.data.querydsl.binding.MultiValueBinding<org.springframework.data.querydsl.binding.Path<? extends java.lang.Object>,java.lang.Object> = new QuerydslDefaultBinding ( ) ; this . org.springframework.data.querydsl.binding.ConversionService = org.springframework.data.querydsl.binding.ConversionService ; this . java.util.Map<org.springframework.data.querydsl.binding.PathInformation,org.springframework.data.querydsl.binding.Path<?>> = new java.util.HashMap <> ( ) ; this . org.springframework.data.querydsl.binding.EntityPathResolver = org.springframework.data.querydsl.binding.EntityPathResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.querydsl.binding.Predicate org.springframework.data.querydsl.binding.Predicate ( TypeInformation < ? > org.springframework.data.querydsl.binding.TypeInformation<?> , MultiValueMap < java.lang.String , java.lang.String > org.springframework.data.querydsl.binding.MultiValueMap<java.lang.String,java.lang.String> , QuerydslBindings org.springframework.data.querydsl.binding.QuerydslBindings ) { Assert . notNull ( org.springframework.data.querydsl.binding.QuerydslBindings , STRING ) ; BooleanBuilder org.springframework.data.querydsl.binding.BooleanBuilder = new BooleanBuilder ( ) ; if ( org.springframework.data.querydsl.binding.MultiValueMap<java.lang.String,java.lang.String> . isEmpty ( ) ) { return org.springframework.data.querydsl.binding.BooleanBuilder . getValue ( ) ; } for ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.data.querydsl.binding.MultiValueMap<java.lang.String,java.lang.String> . entrySet ( ) ) { if ( boolean ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) ) { continue; } java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ; if ( ! org.springframework.data.querydsl.binding.QuerydslBindings . isPathAvailable ( java.lang.String , org.springframework.data.querydsl.binding.TypeInformation<> ) ) { continue; } PathInformation org.springframework.data.querydsl.binding.PathInformation = org.springframework.data.querydsl.binding.QuerydslBindings . getPropertyPath ( java.lang.String , org.springframework.data.querydsl.binding.TypeInformation<> ) ; if ( org.springframework.data.querydsl.binding.PathInformation == null ) { continue; } java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) , org.springframework.data.querydsl.binding.PathInformation ) ; java.util.Optional<org.springframework.data.querydsl.binding.Predicate> < Predicate > java.util.Optional<org.springframework.data.querydsl.binding.Predicate> = java.util.Optional<org.springframework.data.querydsl.binding.Predicate> ( org.springframework.data.querydsl.binding.PathInformation , org.springframework.data.querydsl.binding.QuerydslBindings , java.util.Collection<java.lang.Object> ) ; java.util.Optional<org.springframework.data.querydsl.binding.Predicate> . ifPresent ( org.springframework.data.querydsl.binding.BooleanBuilder :: and ) ; } return org.springframework.data.querydsl.binding.BooleanBuilder . getValue ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<org.springframework.data.querydsl.binding.Predicate> < Predicate > java.util.Optional<org.springframework.data.querydsl.binding.Predicate> ( PathInformation org.springframework.data.querydsl.binding.PathInformation , QuerydslBindings org.springframework.data.querydsl.binding.QuerydslBindings , java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ) { Path < ? > org.springframework.data.querydsl.binding.Path<?> = org.springframework.data.querydsl.binding.Path<?> ( org.springframework.data.querydsl.binding.PathInformation , org.springframework.data.querydsl.binding.QuerydslBindings ) ; return org.springframework.data.querydsl.binding.QuerydslBindings . getBindingForPath ( org.springframework.data.querydsl.binding.PathInformation ) . orElse ( org.springframework.data.querydsl.binding.MultiValueBinding<org.springframework.data.querydsl.binding.Path<? extends java.lang.Object>,java.lang.Object> ) . bind ( org.springframework.data.querydsl.binding.Path<> , java.util.Collection<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.querydsl.binding.Path<?> < ? > org.springframework.data.querydsl.binding.Path<?> ( PathInformation org.springframework.data.querydsl.binding.PathInformation , QuerydslBindings org.springframework.data.querydsl.binding.QuerydslBindings ) { java.util.Optional<org.springframework.data.querydsl.binding.Path<?>> < Path < ? > > java.util.Optional<org.springframework.data.querydsl.binding.Path<?>> = org.springframework.data.querydsl.binding.QuerydslBindings . getExistingPath ( org.springframework.data.querydsl.binding.PathInformation ) ; return java.util.Optional<org.springframework.data.querydsl.binding.Path<?>> . orElseGet ( ( ) paths . computeIfAbsent ( path , it -> it . reifyPath ( resolver ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , PathInformation org.springframework.data.querydsl.binding.PathInformation ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.querydsl.binding.PathInformation . getLeafType ( ) ; if ( java.util.List<java.lang.String> . boolean ( ) || boolean ( java.util.List<java.lang.String> ) ) { return java.util.Collections . java.util.List<java.lang.Object> ( ) ; } java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( java.util.List<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.Collection<java.lang.Object> . boolean ( org.springframework.data.querydsl.binding.ConversionService . canConvert ( java.lang.String .class , java.lang.Class<> ) ? org.springframework.data.querydsl.binding.ConversionService . convert ( java.lang.String , TypeDescriptor . forObject ( java.lang.String ) , org.springframework.data.querydsl.binding.TypeDescriptor ( org.springframework.data.querydsl.binding.PathInformation ) ) : java.lang.String ) ; } return java.util.Collection<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.querydsl.binding.TypeDescriptor org.springframework.data.querydsl.binding.TypeDescriptor ( PathInformation org.springframework.data.querydsl.binding.PathInformation ) { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = org.springframework.data.querydsl.binding.PathInformation . getLeafPropertyDescriptor ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.querydsl.binding.PathInformation . getLeafParentType ( ) ; java.lang.String java.lang.String = org.springframework.data.querydsl.binding.PathInformation . getLeafProperty ( ) ; if ( java.beans.PropertyDescriptor == null ) { return TypeDescriptor . nested ( ReflectionUtils . findField ( java.lang.Class<> , java.lang.String ) , NUMBER ) ; } return TypeDescriptor . nested ( new Property ( java.lang.Class<> , java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) , java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) , java.lang.String ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . int ( ) == NUMBER && ! StringUtils . hasText ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
