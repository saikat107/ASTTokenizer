<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static java.util.List<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> < java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > > java.util.List<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; java.lang.Class<org.springframework.test.context.support.ContextConfiguration> < ContextConfiguration > java.lang.Class<org.springframework.test.context.support.ContextConfiguration> = ContextConfiguration .class ; java.lang.Class<org.springframework.test.context.support.ContextHierarchy> < ContextHierarchy > java.lang.Class<org.springframework.test.context.support.ContextHierarchy> = ContextHierarchy .class ; java.util.List<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> < java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > > java.util.List<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> = new java.util.ArrayList<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> <> ( ) ; UntypedAnnotationDescriptor org.springframework.test.context.support.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( java.lang.Class<> , java.lang.Class<org.springframework.test.context.support.ContextConfiguration> , java.lang.Class<org.springframework.test.context.support.ContextHierarchy> ) ; Assert . notNull ( org.springframework.test.context.support.UntypedAnnotationDescriptor , ( ) String . format ( STRING , contextConfigType . getName ( ) , contextHierarchyType . getName ( ) , testClass . getName ( ) ) ) ; while ( org.springframework.test.context.support.UntypedAnnotationDescriptor != null ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.UntypedAnnotationDescriptor . getDeclaringClass ( ) ; boolean boolean = isAnnotationDeclaredLocally ( java.lang.Class<org.springframework.test.context.support.ContextConfiguration> , java.lang.Class<> ) ; boolean boolean = isAnnotationDeclaredLocally ( java.lang.Class<org.springframework.test.context.support.ContextHierarchy> , java.lang.Class<> ) ; if ( boolean && boolean ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING + STRING , java.lang.Class<> . java.lang.String ( ) ) ; org.springframework.test.context.support.Log . error ( java.lang.String ) ; throw new java.lang.IllegalStateException ( java.lang.String ) ; } java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> = new java.util.ArrayList<org.springframework.test.context.support.ContextConfigurationAttributes> <> ( ) ; if ( boolean ) { ContextConfiguration org.springframework.test.context.support.ContextConfiguration = AnnotationUtils . synthesizeAnnotation ( org.springframework.test.context.support.UntypedAnnotationDescriptor . getAnnotationAttributes ( ) , ContextConfiguration .class , org.springframework.test.context.support.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; void ( org.springframework.test.context.support.ContextConfiguration , java.lang.Class<> , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ; } else if ( boolean ) { ContextHierarchy org.springframework.test.context.support.ContextHierarchy = getAnnotation ( java.lang.Class<> , java.lang.Class<org.springframework.test.context.support.ContextHierarchy> ) ; for ( ContextConfiguration org.springframework.test.context.support.ContextConfiguration : org.springframework.test.context.support.ContextHierarchy . value ( ) ) { void ( org.springframework.test.context.support.ContextConfiguration , java.lang.Class<> , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ; } } else { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , java.lang.Class<> . java.lang.String ( ) ) ; org.springframework.test.context.support.Log . error ( java.lang.String ) ; throw new java.lang.IllegalStateException ( java.lang.String ) ; } java.util.List<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> . add ( NUMBER , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ; org.springframework.test.context.support.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( java.lang.Class<> . java.lang.Class<? super > ( ) , java.lang.Class<org.springframework.test.context.support.ContextConfiguration> , java.lang.Class<org.springframework.test.context.support.ContextHierarchy> ) ; } return java.util.List<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> ; }  <METHOD_END>
<METHOD_START> static java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> < java.lang.String , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > > java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { final java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> < java.lang.String , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > > java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> <> ( ) ; int int = NUMBER ; for ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> : java.util.List<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> ( java.lang.Class<> ) ) { for ( ContextConfigurationAttributes org.springframework.test.context.support.ContextConfigurationAttributes : java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) { java.lang.String java.lang.String = org.springframework.test.context.support.ContextConfigurationAttributes . getName ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = java.lang.String + int ; } if ( ! java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> . containsKey ( java.lang.String ) ) { int ++ ; java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> . put ( java.lang.String , new java.util.ArrayList <> ( ) ) ; } java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> . get ( java.lang.String ) . add ( org.springframework.test.context.support.ContextConfigurationAttributes ) ; } } java.util.Set<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> < java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > > java.util.Set<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> = new java.util.HashSet <> ( java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> . values ( ) ) ; if ( java.util.Set<java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> . size ( ) != java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> . size ( ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , java.lang.Class<> . java.lang.String ( ) ) ; org.springframework.test.context.support.Log . error ( java.lang.String ) ; throw new java.lang.IllegalStateException ( java.lang.String ) ; } return java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> ; }  <METHOD_END>
<METHOD_START> static java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> = new java.util.ArrayList<org.springframework.test.context.support.ContextConfigurationAttributes> <> ( ) ; java.lang.Class<org.springframework.test.context.support.ContextConfiguration> < ContextConfiguration > java.lang.Class<org.springframework.test.context.support.ContextConfiguration> = ContextConfiguration .class ; AnnotationDescriptor < ContextConfiguration > org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ContextConfiguration> = findAnnotationDescriptor ( java.lang.Class<> , java.lang.Class<org.springframework.test.context.support.ContextConfiguration> ) ; Assert . notNull ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ContextConfiguration> , ( ) String . format ( STRING , annotationType . getName ( ) , testClass . getName ( ) ) ) ; while ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ContextConfiguration> != null ) { void ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ContextConfiguration> . synthesizeAnnotation ( ) , org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ContextConfiguration> . getRootDeclaringClass ( ) , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ; org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ContextConfiguration> = findAnnotationDescriptor ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.ContextConfiguration> . getRootDeclaringClass ( ) . getSuperclass ( ) , java.lang.Class<org.springframework.test.context.support.ContextConfiguration> ) ; } return java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ; }  <METHOD_END>
<METHOD_START> private static void void ( ContextConfiguration org.springframework.test.context.support.ContextConfiguration , java.lang.Class<?> < ? > java.lang.Class<?> , final java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) { if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( java.lang.String . java.lang.String ( STRING , org.springframework.test.context.support.ContextConfiguration , java.lang.Class<> . java.lang.String ( ) ) ) ; } ContextConfigurationAttributes org.springframework.test.context.support.ContextConfigurationAttributes = new ContextConfigurationAttributes ( java.lang.Class<> , org.springframework.test.context.support.ContextConfiguration ) ; if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( STRING + org.springframework.test.context.support.ContextConfigurationAttributes ) ; } java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> . add ( org.springframework.test.context.support.ContextConfigurationAttributes ) ; }  <METHOD_END>
