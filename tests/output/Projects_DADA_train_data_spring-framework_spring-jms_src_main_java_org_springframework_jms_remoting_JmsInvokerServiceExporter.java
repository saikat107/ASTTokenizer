<METHOD_START> public void void ( MessageConverter org.springframework.jms.remoting.MessageConverter ) { this . org.springframework.jms.remoting.MessageConverter = ( org.springframework.jms.remoting.MessageConverter != null ? org.springframework.jms.remoting.MessageConverter : new SimpleMessageConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.lang.Object = getProxyForService ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.remoting.Message , Session org.springframework.jms.remoting.Session ) throws org.springframework.jms.remoting.JMSException { RemoteInvocation org.springframework.jms.remoting.RemoteInvocation = org.springframework.jms.remoting.RemoteInvocation ( org.springframework.jms.remoting.Message ) ; if ( org.springframework.jms.remoting.RemoteInvocation != null ) { RemoteInvocationResult org.springframework.jms.remoting.RemoteInvocationResult = invokeAndCreateResult ( org.springframework.jms.remoting.RemoteInvocation , this . java.lang.Object ) ; void ( org.springframework.jms.remoting.Message , org.springframework.jms.remoting.Session , org.springframework.jms.remoting.RemoteInvocationResult ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.RemoteInvocation org.springframework.jms.remoting.RemoteInvocation ( Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException { java.lang.Object java.lang.Object = this . org.springframework.jms.remoting.MessageConverter . fromMessage ( org.springframework.jms.remoting.Message ) ; if ( java.lang.Object instanceof RemoteInvocation ) { return ( RemoteInvocation ) java.lang.Object ; } return org.springframework.jms.remoting.RemoteInvocation ( org.springframework.jms.remoting.Message ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Message org.springframework.jms.remoting.Message , Session org.springframework.jms.remoting.Session , RemoteInvocationResult org.springframework.jms.remoting.RemoteInvocationResult ) throws org.springframework.jms.remoting.JMSException { Message org.springframework.jms.remoting.Message = org.springframework.jms.remoting.Message ( org.springframework.jms.remoting.Message , org.springframework.jms.remoting.Session , org.springframework.jms.remoting.RemoteInvocationResult ) ; MessageProducer org.springframework.jms.remoting.MessageProducer = org.springframework.jms.remoting.Session . createProducer ( org.springframework.jms.remoting.Message . getJMSReplyTo ( ) ) ; try { org.springframework.jms.remoting.MessageProducer . send ( org.springframework.jms.remoting.Message ) ; } finally { JmsUtils . closeMessageProducer ( org.springframework.jms.remoting.MessageProducer ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.Message org.springframework.jms.remoting.Message ( Message org.springframework.jms.remoting.Message , Session org.springframework.jms.remoting.Session , RemoteInvocationResult org.springframework.jms.remoting.RemoteInvocationResult )			throws org.springframework.jms.remoting.JMSException { Message org.springframework.jms.remoting.Message = this . org.springframework.jms.remoting.MessageConverter . toMessage ( org.springframework.jms.remoting.RemoteInvocationResult , org.springframework.jms.remoting.Session ) ; java.lang.String java.lang.String = org.springframework.jms.remoting.Message . getJMSCorrelationID ( ) ; if ( java.lang.String == null ) { java.lang.String = org.springframework.jms.remoting.Message . getJMSMessageID ( ) ; } org.springframework.jms.remoting.Message . setJMSCorrelationID ( java.lang.String ) ; return org.springframework.jms.remoting.Message ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.RemoteInvocation org.springframework.jms.remoting.RemoteInvocation ( Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException { if ( this . boolean ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.jms.remoting.Message ) ; } return null ; } else { throw new MessageFormatException ( STRING + org.springframework.jms.remoting.Message ) ; } }  <METHOD_END>
