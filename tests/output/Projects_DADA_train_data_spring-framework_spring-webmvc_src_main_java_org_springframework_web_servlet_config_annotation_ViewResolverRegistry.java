<METHOD_START> protected void void ( ContentNegotiationManager org.springframework.web.servlet.config.annotation.ContentNegotiationManager ) { this . org.springframework.web.servlet.config.annotation.ContentNegotiationManager = org.springframework.web.servlet.config.annotation.ContentNegotiationManager ; }  <METHOD_END>
<METHOD_START> protected void void ( ApplicationContext org.springframework.web.servlet.config.annotation.ApplicationContext ) { this . org.springframework.web.servlet.config.annotation.ApplicationContext = org.springframework.web.servlet.config.annotation.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver != null || ! this . java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( View ... org.springframework.web.servlet.config.annotation.View[] ) { void ( org.springframework.web.servlet.config.annotation.View[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean , View ... org.springframework.web.servlet.config.annotation.View[] ) { void ( org.springframework.web.servlet.config.annotation.View[] ) ; this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver . setUseNotAcceptableStatusCode ( boolean ) ; }  <METHOD_END>
<METHOD_START> private void void ( View [] org.springframework.web.servlet.config.annotation.View[] ) { this . java.lang.Integer = ( this . java.lang.Integer != null ? this . java.lang.Integer : Ordered . HIGHEST_PRECEDENCE ) ; if ( this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver != null ) { if ( ! ObjectUtils . isEmpty ( org.springframework.web.servlet.config.annotation.View[] ) ) { if ( ! CollectionUtils . isEmpty ( this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver . getDefaultViews ( ) ) ) { java.util.List<org.springframework.web.servlet.config.annotation.View> < View > java.util.List<org.springframework.web.servlet.config.annotation.View> = new java.util.ArrayList <> ( this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver . getDefaultViews ( ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.View> . addAll ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.config.annotation.View[] ) ) ; this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver . setDefaultViews ( java.util.List<org.springframework.web.servlet.config.annotation.View> ) ; } } } else { this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver = new ContentNegotiatingViewResolver ( ) ; this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver . setDefaultViews ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.config.annotation.View[] ) ) ; this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver . setViewResolvers ( this . java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> ) ; this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver . setContentNegotiationManager ( this . org.springframework.web.servlet.config.annotation.ContentNegotiationManager ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration ( ) { return org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { InternalResourceViewResolver org.springframework.web.servlet.config.annotation.InternalResourceViewResolver = new InternalResourceViewResolver ( ) ; org.springframework.web.servlet.config.annotation.InternalResourceViewResolver . setPrefix ( java.lang.String ) ; org.springframework.web.servlet.config.annotation.InternalResourceViewResolver . setSuffix ( java.lang.String ) ; this . java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . add ( org.springframework.web.servlet.config.annotation.InternalResourceViewResolver ) ; return new UrlBasedViewResolverRegistration ( org.springframework.web.servlet.config.annotation.InternalResourceViewResolver ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration ( ) { if ( this . org.springframework.web.servlet.config.annotation.ApplicationContext != null && ! boolean ( TilesConfigurer .class ) ) { throw new BeanInitializationException ( STRING + STRING + STRING ) ; } org.springframework.web.servlet.config.annotation.ViewResolverRegistry.TilesRegistration org.springframework.web.servlet.config.annotation.ViewResolverRegistry.TilesRegistration = new org.springframework.web.servlet.config.annotation.ViewResolverRegistry.TilesRegistration ( ) ; this . java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . add ( org.springframework.web.servlet.config.annotation.ViewResolverRegistry.TilesRegistration . getViewResolver ( ) ) ; return org.springframework.web.servlet.config.annotation.ViewResolverRegistry.TilesRegistration ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration ( ) { if ( this . org.springframework.web.servlet.config.annotation.ApplicationContext != null && ! boolean ( FreeMarkerConfigurer .class ) ) { throw new BeanInitializationException ( STRING + STRING + STRING + STRING ) ; } org.springframework.web.servlet.config.annotation.ViewResolverRegistry.FreeMarkerRegistration org.springframework.web.servlet.config.annotation.ViewResolverRegistry.FreeMarkerRegistration = new org.springframework.web.servlet.config.annotation.ViewResolverRegistry.FreeMarkerRegistration ( ) ; this . java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . add ( org.springframework.web.servlet.config.annotation.ViewResolverRegistry.FreeMarkerRegistration . getViewResolver ( ) ) ; return org.springframework.web.servlet.config.annotation.ViewResolverRegistry.FreeMarkerRegistration ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration ( ) { if ( this . org.springframework.web.servlet.config.annotation.ApplicationContext != null && ! boolean ( GroovyMarkupConfigurer .class ) ) { throw new BeanInitializationException ( STRING + STRING + STRING + STRING ) ; } org.springframework.web.servlet.config.annotation.ViewResolverRegistry.GroovyMarkupRegistration org.springframework.web.servlet.config.annotation.ViewResolverRegistry.GroovyMarkupRegistration = new org.springframework.web.servlet.config.annotation.ViewResolverRegistry.GroovyMarkupRegistration ( ) ; this . java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . add ( org.springframework.web.servlet.config.annotation.ViewResolverRegistry.GroovyMarkupRegistration . getViewResolver ( ) ) ; return org.springframework.web.servlet.config.annotation.ViewResolverRegistry.GroovyMarkupRegistration ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration ( ) { if ( this . org.springframework.web.servlet.config.annotation.ApplicationContext != null && ! boolean ( ScriptTemplateConfigurer .class ) ) { throw new BeanInitializationException ( STRING + STRING + STRING + STRING ) ; } org.springframework.web.servlet.config.annotation.ViewResolverRegistry.ScriptRegistration org.springframework.web.servlet.config.annotation.ViewResolverRegistry.ScriptRegistration = new org.springframework.web.servlet.config.annotation.ViewResolverRegistry.ScriptRegistration ( ) ; this . java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . add ( org.springframework.web.servlet.config.annotation.ViewResolverRegistry.ScriptRegistration . getViewResolver ( ) ) ; return org.springframework.web.servlet.config.annotation.ViewResolverRegistry.ScriptRegistration ; }  <METHOD_END>
<METHOD_START> public void void ( ) { BeanNameViewResolver org.springframework.web.servlet.config.annotation.BeanNameViewResolver = new BeanNameViewResolver ( ) ; this . java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . add ( org.springframework.web.servlet.config.annotation.BeanNameViewResolver ) ; }  <METHOD_END>
<METHOD_START> public void void ( ViewResolver org.springframework.web.servlet.config.annotation.ViewResolver ) { if ( org.springframework.web.servlet.config.annotation.ViewResolver instanceof ContentNegotiatingViewResolver ) { throw new BeanInitializationException ( STRING + STRING ) ; } this . java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . add ( org.springframework.web.servlet.config.annotation.ViewResolver ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ! ObjectUtils . isEmpty ( BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( this . org.springframework.web.servlet.config.annotation.ApplicationContext , java.lang.Class<> , false , false ) ) ; }  <METHOD_END>
<METHOD_START> protected int int ( ) { return ( this . java.lang.Integer != null ? this . java.lang.Integer : Ordered . LOWEST_PRECEDENCE ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> ( ) { if ( this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver != null ) { return java.util.Collections .< ViewResolver > java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> ( this . org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver ) ; } else { return this . java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> ; } }  <METHOD_END>
<METHOD_START> public void ( ) { super( new TilesViewResolver ( ) ); }  <METHOD_END>
<METHOD_START> public void ( ) { super( new FreeMarkerViewResolver ( ) ); getViewResolver ( ) . setSuffix ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( new GroovyMarkupViewResolver ( ) ); getViewResolver ( ) . setSuffix ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( new ScriptTemplateViewResolver ( ) ); getViewResolver ( ) ; }  <METHOD_END>
