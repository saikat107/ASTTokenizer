<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable , java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> , java.lang.String java.lang.String ) { void ( java.lang.Throwable , java.lang.Class<> , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable , java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> , java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { assertThat ( java.lang.Throwable ) . isNotNull ( ) ; assertThat ( java.lang.Throwable ) . isInstanceOf ( java.lang.Class<> ) ; assertThat ( java.lang.Throwable ) . hasMessage ( java.lang.String ) ; assertThat ( java.lang.Throwable ) . hasCause ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( newIllegalArgumentException ( STRING ) , java.lang.IllegalArgumentException .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( newIllegalArgumentException ( java.lang.Throwable , STRING , STRING , STRING ) , java.lang.IllegalArgumentException .class , STRING , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( newIllegalStateException ( STRING ) , java.lang.IllegalStateException .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( newIllegalStateException ( java.lang.Throwable , STRING , STRING , STRING ) , java.lang.IllegalStateException .class , STRING , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( newRuntimeException ( STRING ) , java.lang.RuntimeException .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( newRuntimeException ( java.lang.Throwable , STRING , STRING , STRING ) , java.lang.RuntimeException .class , STRING , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( newUnsupportedOperationException ( STRING ) , java.lang.UnsupportedOperationException .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( newUnsupportedOperationException ( java.lang.Throwable , STRING , STRING , STRING ) , java.lang.UnsupportedOperationException .class , STRING , java.lang.Throwable ) ; }  <METHOD_END>
