<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.scripting.config.jsr223.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.scripting.config.jsr223.QueueChannel . setBeanName ( STRING ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { Message < ? > org.springframework.integration.scripting.config.jsr223.Message<?> = MessageBuilder . withPayload ( STRING + int ) . setReplyChannel ( org.springframework.integration.scripting.config.jsr223.QueueChannel ) . build ( ) ; this . org.springframework.integration.scripting.config.jsr223.MessageChannel . send ( org.springframework.integration.scripting.config.jsr223.Message<> ) ; java.lang.Thread . void ( NUMBER ) ; } java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER , java.lang.String . int ( STRING ) ) . boolean ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER , java.lang.String . int ( STRING ) ) ) ) ; assertFalse ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER , java.lang.String . int ( STRING ) ) . boolean ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) ) ) ) ; assertFalse ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER , java.lang.String . int ( STRING ) ) . boolean ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER , java.lang.String . int ( STRING ) ) ) ) ; assertFalse ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER ) . boolean ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER ) ) ) ; assertFalse ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER ) . boolean ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER ) ) ) ; assertNull ( org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.scripting.config.jsr223.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.scripting.config.jsr223.QueueChannel . setBeanName ( STRING ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { Message < ? > org.springframework.integration.scripting.config.jsr223.Message<?> = MessageBuilder . withPayload ( STRING + int ) . setReplyChannel ( org.springframework.integration.scripting.config.jsr223.QueueChannel ) . build ( ) ; this . org.springframework.integration.scripting.config.jsr223.MessageChannel . send ( org.springframework.integration.scripting.config.jsr223.Message<> ) ; java.lang.Thread . void ( NUMBER ) ; } java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertFalse ( java.lang.String . java.lang.String ( NUMBER ) . boolean ( java.lang.String . java.lang.String ( NUMBER ) ) ) ; assertFalse ( java.lang.String . java.lang.String ( NUMBER ) . boolean ( java.lang.String . java.lang.String ( NUMBER ) ) ) ; assertNull ( org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.scripting.config.jsr223.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.scripting.config.jsr223.QueueChannel . setBeanName ( STRING ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { Message < ? > org.springframework.integration.scripting.config.jsr223.Message<?> = MessageBuilder . withPayload ( STRING + int ) . setReplyChannel ( org.springframework.integration.scripting.config.jsr223.QueueChannel ) . build ( ) ; this . org.springframework.integration.scripting.config.jsr223.MessageChannel . send ( org.springframework.integration.scripting.config.jsr223.Message<> ) ; } java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; assertThat ( java.lang.String , startsWith ( STRING ) ) ; java.lang.String = ( java.lang.String ) org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; assertThat ( java.lang.String , startsWith ( STRING ) ) ; java.lang.String = ( java.lang.String ) org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ; assertThat ( java.lang.String , startsWith ( STRING ) ) ; assertTrue ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER ) . boolean ( STRING ) ) ; assertNull ( org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.scripting.config.jsr223.Jsr223ServiceActivatorTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.integration.scripting.config.jsr223.BeansException ) { assertThat ( org.springframework.integration.scripting.config.jsr223.BeansException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.scripting.config.jsr223.Jsr223ServiceActivatorTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.integration.scripting.config.jsr223.BeansException ) { assertThat ( org.springframework.integration.scripting.config.jsr223.BeansException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Message < ? > org.springframework.integration.scripting.config.jsr223.Message<?> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.Date ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.scripting.config.jsr223.Message<> . getPayload ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.scripting.config.jsr223.Message<> . getHeaders ( ) ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
