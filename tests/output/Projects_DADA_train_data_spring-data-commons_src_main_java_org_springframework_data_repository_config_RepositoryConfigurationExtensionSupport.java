<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return StringUtils . capitalize ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T extends org.springframework.data.repository.config.RepositoryConfigurationSource > java.util.Collection<org.springframework.data.repository.config.RepositoryConfiguration<T>> < RepositoryConfiguration < T > > java.util.Collection<org.springframework.data.repository.config.RepositoryConfiguration<T>> ( T T , ResourceLoader org.springframework.data.repository.config.ResourceLoader ) { return java.util.Collection ( T , org.springframework.data.repository.config.ResourceLoader , false ) ; }  <METHOD_END>
<METHOD_START> public < T extends org.springframework.data.repository.config.RepositoryConfigurationSource > java.util.Collection<org.springframework.data.repository.config.RepositoryConfiguration<T>> < RepositoryConfiguration < T > > java.util.Collection<org.springframework.data.repository.config.RepositoryConfiguration<T>> ( T T , ResourceLoader org.springframework.data.repository.config.ResourceLoader , boolean boolean ) { Assert . notNull ( T , STRING ) ; Assert . notNull ( org.springframework.data.repository.config.ResourceLoader , STRING ) ; java.util.Set<org.springframework.data.repository.config.RepositoryConfiguration<T>> < RepositoryConfiguration < T > > java.util.Set<org.springframework.data.repository.config.RepositoryConfiguration<T>> = new java.util.HashSet<org.springframework.data.repository.config.RepositoryConfiguration<T>> <> ( ) ; for ( BeanDefinition org.springframework.data.repository.config.BeanDefinition : T . getCandidates ( org.springframework.data.repository.config.ResourceLoader ) ) { RepositoryConfiguration < T > org.springframework.data.repository.config.RepositoryConfiguration<T> = org.springframework.data.repository.config.RepositoryConfiguration ( org.springframework.data.repository.config.BeanDefinition , T ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.data.repository.config.RepositoryConfiguration<T> , org.springframework.data.repository.config.ResourceLoader ) ; if ( java.lang.Class<> == null ) { java.util.Set<org.springframework.data.repository.config.RepositoryConfiguration<T>> . add ( org.springframework.data.repository.config.RepositoryConfiguration<T> ) ; continue; } RepositoryMetadata org.springframework.data.repository.config.RepositoryMetadata = AbstractRepositoryMetadata . getMetadata ( java.lang.Class<> ) ; if ( ! boolean ( org.springframework.data.repository.config.RepositoryMetadata ) ) { continue; } if ( ! boolean || T . usesExplicitFilters ( ) ) { java.util.Set<org.springframework.data.repository.config.RepositoryConfiguration<T>> . add ( org.springframework.data.repository.config.RepositoryConfiguration<T> ) ; continue; } if ( boolean ( org.springframework.data.repository.config.RepositoryMetadata ) ) { java.util.Set<org.springframework.data.repository.config.RepositoryConfiguration<T>> . add ( org.springframework.data.repository.config.RepositoryConfiguration<T> ) ; } } return java.util.Set<org.springframework.data.repository.config.RepositoryConfiguration<T>> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( BeanDefinitionRegistry org.springframework.data.repository.config.BeanDefinitionRegistry , RepositoryConfigurationSource org.springframework.data.repository.config.RepositoryConfigurationSource ) {}  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> public void void ( BeanDefinitionBuilder org.springframework.data.repository.config.BeanDefinitionBuilder , RepositoryConfigurationSource org.springframework.data.repository.config.RepositoryConfigurationSource ) {}  <METHOD_END>
<METHOD_START> public void void ( BeanDefinitionBuilder org.springframework.data.repository.config.BeanDefinitionBuilder , AnnotationRepositoryConfigurationSource org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource ) {}  <METHOD_END>
<METHOD_START> public void void ( BeanDefinitionBuilder org.springframework.data.repository.config.BeanDefinitionBuilder , XmlRepositoryConfigurationSource org.springframework.data.repository.config.XmlRepositoryConfigurationSource ) {}  <METHOD_END>
<METHOD_START> protected java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<?>> ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( BeanDefinitionRegistry org.springframework.data.repository.config.BeanDefinitionRegistry , AbstractBeanDefinition org.springframework.data.repository.config.AbstractBeanDefinition , java.lang.Object java.lang.Object ) { org.springframework.data.repository.config.AbstractBeanDefinition . setSource ( java.lang.Object ) ; java.lang.String java.lang.String = generateBeanName ( org.springframework.data.repository.config.AbstractBeanDefinition , org.springframework.data.repository.config.BeanDefinitionRegistry ) ; org.springframework.data.repository.config.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.data.repository.config.AbstractBeanDefinition ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> public static void void ( AbstractBeanDefinition org.springframework.data.repository.config.AbstractBeanDefinition , BeanDefinitionRegistry org.springframework.data.repository.config.BeanDefinitionRegistry , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( org.springframework.data.repository.config.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { return; } org.springframework.data.repository.config.AbstractBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.data.repository.config.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.data.repository.config.AbstractBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , BeanDefinitionRegistry org.springframework.data.repository.config.BeanDefinitionRegistry ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , GENERATED_BEAN_NAME_SEPARATOR ) ; return org.springframework.data.repository.config.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected < T extends org.springframework.data.repository.config.RepositoryConfigurationSource > org.springframework.data.repository.config.RepositoryConfiguration<T> < T > org.springframework.data.repository.config.RepositoryConfiguration<T> ( BeanDefinition org.springframework.data.repository.config.BeanDefinition , T T ) { return new DefaultRepositoryConfiguration <> ( T , org.springframework.data.repository.config.BeanDefinition , this ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( RepositoryMetadata org.springframework.data.repository.config.RepositoryMetadata ) { java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> = java.util.Collection<java.lang.Class<?>> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.config.RepositoryMetadata . getRepositoryInterface ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Collection<java.lang.Class<?>> ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return true ; } } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.config.RepositoryMetadata . getDomainType ( ) ; java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> = java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) ; if ( java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> . boolean ( ) ) { return true ; } for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> ) { if ( AnnotationUtils . findAnnotation ( java.lang.Class<> , java.lang.Class<> ) != null ) { return true ; } } org.springframework.data.repository.config.Logger . info ( java.lang.String , java.lang.String ( ) , java.lang.Class<> ) ; return false ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( RepositoryMetadata org.springframework.data.repository.config.RepositoryMetadata ) { return true ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( RepositoryConfiguration < ? > org.springframework.data.repository.config.RepositoryConfiguration<?> , ResourceLoader org.springframework.data.repository.config.ResourceLoader ) { java.lang.String java.lang.String = org.springframework.data.repository.config.RepositoryConfiguration<> . getRepositoryInterface ( ) ; java.lang.ClassLoader java.lang.ClassLoader = org.springframework.data.repository.config.ResourceLoader . getClassLoader ( ) ; try { return org . springframework . util . ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ; } catch ( java.lang.ClassNotFoundException | java.lang.LinkageError java.lang.Throwable ) { org.springframework.data.repository.config.Logger . warn ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String ( ) , java.lang.String , java.lang.ClassLoader ) , java.lang.Throwable ) ; } return null ; }  <METHOD_END>
