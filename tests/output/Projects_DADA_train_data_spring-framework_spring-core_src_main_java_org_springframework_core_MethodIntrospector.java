<METHOD_START> public static < T > java.util.Map<java.lang.reflect.Method,T> < java.lang.reflect.Method , T > java.util.Map<java.lang.reflect.Method,T> ( java.lang.Class<?> < ? > java.lang.Class<?> , final org.springframework.core.MethodIntrospector.MetadataLookup<T> < T > org.springframework.core.MethodIntrospector.MetadataLookup<T> ) { final java.util.Map<java.lang.reflect.Method,T> < java.lang.reflect.Method , T > java.util.Map<java.lang.reflect.Method,T> = new java.util.LinkedHashMap<java.lang.reflect.Method,T> <> ( ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>> <> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; if ( ! java.lang.reflect.Proxy . boolean ( java.lang.Class<> ) ) { java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; java.lang.Class<?> = java.lang.Class<> ; } java.util.Set<java.lang.Class<?>> . boolean ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<> . java.lang.Class<?>[] ( ) ) ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ) { final java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<> != null ? java.lang.Class<> : java.lang.Class<> ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , new ReflectionUtils . ReflectionUtils ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; T T = org.springframework.core.MethodIntrospector.MetadataLookup<T> . T ( java.lang.reflect.Method ) ; if ( T != null ) { java.lang.reflect.Method java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; if ( java.lang.reflect.Method == java.lang.reflect.Method || org.springframework.core.MethodIntrospector.MetadataLookup<T> . T ( java.lang.reflect.Method ) == null ) { java.util.Map<java.lang.reflect.Method,T> . T ( java.lang.reflect.Method , T ) ; } } } } , ReflectionUtils . USER_DECLARED_METHODS ) ; } return java.util.Map<java.lang.reflect.Method,T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; T T = org.springframework.core.MethodIntrospector.MetadataLookup<T> . T ( java.lang.reflect.Method ) ; if ( T != null ) { java.lang.reflect.Method java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; if ( java.lang.reflect.Method == java.lang.reflect.Method || org.springframework.core.MethodIntrospector.MetadataLookup<T> . T ( java.lang.reflect.Method ) == null ) { java.util.Map<java.lang.reflect.Method,T> . T ( java.lang.reflect.Method , T ) ; } } }  <METHOD_END>
<METHOD_START> public static java.util.Set<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Set<java.lang.reflect.Method> ( java.lang.Class<?> < ? > java.lang.Class<?> , final ReflectionUtils . ReflectionUtils ReflectionUtils.MethodFilter ) { return java.util.Map<java.lang.reflect.Method,java.lang.Boolean> ( java.lang.Class<> , new org.springframework.core.MethodIntrospector.MetadataLookup<java.lang.Boolean> < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( ReflectionUtils.MethodFilter . matches ( java.lang.reflect.Method ) ? java.lang.Boolean . java.lang.Boolean : null ) ; } } ) . java.util.Set<java.lang.reflect.Method> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( ReflectionUtils.MethodFilter . matches ( java.lang.reflect.Method ) ? java.lang.Boolean . java.lang.Boolean : null ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.Class<> ) ) { return java.lang.reflect.Method ; } try { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { try { return java.lang.Class<> . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } } return java.lang.Class<> . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING + STRING + STRING + STRING , java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> T T ( java.lang.reflect.Method java.lang.reflect.Method );  <METHOD_END>
