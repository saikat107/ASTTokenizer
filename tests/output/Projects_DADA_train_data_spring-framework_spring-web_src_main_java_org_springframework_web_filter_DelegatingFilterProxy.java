<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( Filter org.springframework.web.filter.Filter ) { Assert . notNull ( org.springframework.web.filter.Filter , STRING ) ; this . org.springframework.web.filter.Filter = org.springframework.web.filter.Filter ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , WebApplicationContext org.springframework.web.filter.WebApplicationContext ) { Assert . hasText ( java.lang.String , STRING ) ; this . void ( java.lang.String ) ; this . org.springframework.web.filter.WebApplicationContext = org.springframework.web.filter.WebApplicationContext ; if ( org.springframework.web.filter.WebApplicationContext != null ) { this . setEnvironment ( org.springframework.web.filter.WebApplicationContext . getEnvironment ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.web.filter.ServletException { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.web.filter.Filter == null ) { if ( this . java.lang.String == null ) { this . java.lang.String = getFilterName ( ) ; } WebApplicationContext org.springframework.web.filter.WebApplicationContext = org.springframework.web.filter.WebApplicationContext ( ) ; if ( org.springframework.web.filter.WebApplicationContext != null ) { this . org.springframework.web.filter.Filter = org.springframework.web.filter.Filter ( org.springframework.web.filter.WebApplicationContext ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.web.filter.ServletRequest , ServletResponse org.springframework.web.filter.ServletResponse , FilterChain org.springframework.web.filter.FilterChain )			throws org.springframework.web.filter.ServletException , java.io.IOException { Filter org.springframework.web.filter.Filter = this . org.springframework.web.filter.Filter ; if ( org.springframework.web.filter.Filter == null ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.web.filter.Filter == null ) { WebApplicationContext org.springframework.web.filter.WebApplicationContext = org.springframework.web.filter.WebApplicationContext ( ) ; if ( org.springframework.web.filter.WebApplicationContext == null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } this . org.springframework.web.filter.Filter = org.springframework.web.filter.Filter ( org.springframework.web.filter.WebApplicationContext ) ; } org.springframework.web.filter.Filter = this . org.springframework.web.filter.Filter ; } } void ( org.springframework.web.filter.Filter , org.springframework.web.filter.ServletRequest , org.springframework.web.filter.ServletResponse , org.springframework.web.filter.FilterChain ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Filter org.springframework.web.filter.Filter = this . org.springframework.web.filter.Filter ; if ( org.springframework.web.filter.Filter != null ) { void ( org.springframework.web.filter.Filter ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.filter.WebApplicationContext org.springframework.web.filter.WebApplicationContext ( ) { if ( this . org.springframework.web.filter.WebApplicationContext != null ) { if ( this . org.springframework.web.filter.WebApplicationContext instanceof ConfigurableApplicationContext ) { ConfigurableApplicationContext org.springframework.web.filter.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) this . org.springframework.web.filter.WebApplicationContext ; if ( ! org.springframework.web.filter.ConfigurableApplicationContext . isActive ( ) ) { org.springframework.web.filter.ConfigurableApplicationContext . refresh ( ) ; } } return this . org.springframework.web.filter.WebApplicationContext ; } java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.String != null ) { return WebApplicationContextUtils . getWebApplicationContext ( getServletContext ( ) , java.lang.String ) ; } else { return WebApplicationContextUtils . findWebApplicationContext ( getServletContext ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.filter.Filter org.springframework.web.filter.Filter ( WebApplicationContext org.springframework.web.filter.WebApplicationContext ) throws org.springframework.web.filter.ServletException { Filter org.springframework.web.filter.Filter = org.springframework.web.filter.WebApplicationContext . getBean ( java.lang.String ( ) , Filter .class ) ; if ( boolean ( ) ) { org.springframework.web.filter.Filter . init ( getFilterConfig ( ) ) ; } return org.springframework.web.filter.Filter ; }  <METHOD_END>
<METHOD_START> protected void void ( Filter org.springframework.web.filter.Filter , ServletRequest org.springframework.web.filter.ServletRequest , ServletResponse org.springframework.web.filter.ServletResponse , FilterChain org.springframework.web.filter.FilterChain )			throws org.springframework.web.filter.ServletException , java.io.IOException { org.springframework.web.filter.Filter . doFilter ( org.springframework.web.filter.ServletRequest , org.springframework.web.filter.ServletResponse , org.springframework.web.filter.FilterChain ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Filter org.springframework.web.filter.Filter ) { if ( boolean ( ) ) { org.springframework.web.filter.Filter . destroy ( ) ; } }  <METHOD_END>
