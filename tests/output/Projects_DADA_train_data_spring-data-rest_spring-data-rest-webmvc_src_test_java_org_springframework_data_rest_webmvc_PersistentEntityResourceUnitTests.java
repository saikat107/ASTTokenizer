<METHOD_START> @ Before public void void ( ) { EmbeddedWrappers org.springframework.data.rest.webmvc.EmbeddedWrappers = new EmbeddedWrappers ( false ) ; EmbeddedWrapper org.springframework.data.rest.webmvc.EmbeddedWrapper = org.springframework.data.rest.webmvc.EmbeddedWrappers . wrap ( STRING , STRING ) ; this . org.springframework.data.rest.webmvc.Resources<org.springframework.data.rest.webmvc.EmbeddedWrapper> = new Resources < EmbeddedWrapper > ( java.util.Collections . java.util.Set ( org.springframework.data.rest.webmvc.EmbeddedWrapper ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { PersistentEntityResource . build ( null , org.springframework.data.rest.webmvc.PersistentEntity<,> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { PersistentEntityResource . build ( java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentEntityResource org.springframework.data.rest.webmvc.PersistentEntityResource = PersistentEntityResource . build ( java.lang.Object , org.springframework.data.rest.webmvc.PersistentEntity<,> ) . build ( ) ; assertThat ( org.springframework.data.rest.webmvc.PersistentEntityResource . getEmbeddeds ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.PersistentEntityResource . getEmbeddeds ( ) ) . isEmpty ( ) ; }  <METHOD_END>
