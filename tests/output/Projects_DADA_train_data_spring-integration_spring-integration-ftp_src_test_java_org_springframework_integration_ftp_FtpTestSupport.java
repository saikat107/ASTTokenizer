<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { FtpServerFactory org.springframework.integration.ftp.FtpServerFactory = new FtpServerFactory ( ) ; org.springframework.integration.ftp.FtpServerFactory . setUserManager ( new org.springframework.integration.ftp.FtpTestSupport.TestUserManager ( remoteTemporaryFolder . getRoot ( ) . getAbsolutePath ( ) ) ) ; ListenerFactory org.springframework.integration.ftp.ListenerFactory = new ListenerFactory ( ) ; org.springframework.integration.ftp.ListenerFactory . setPort ( NUMBER ) ; org.springframework.integration.ftp.FtpServerFactory . addListener ( STRING , org.springframework.integration.ftp.ListenerFactory . createListener ( ) ) ; org.springframework.integration.ftp.FtpServer = org.springframework.integration.ftp.FtpServerFactory . createServer ( ) ; org.springframework.integration.ftp.FtpServer . start ( ) ; Listener org.springframework.integration.ftp.Listener = org.springframework.integration.ftp.FtpServerFactory . getListeners ( ) . values ( ) . iterator ( ) . next ( ) ; port = org.springframework.integration.ftp.Listener . getPort ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { org.springframework.integration.ftp.FtpServer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.ftp.SessionFactory<org.springframework.integration.ftp.FTPFile> < FTPFile > org.springframework.integration.ftp.SessionFactory<org.springframework.integration.ftp.FTPFile> ( ) { DefaultFtpSessionFactory org.springframework.integration.ftp.DefaultFtpSessionFactory = new DefaultFtpSessionFactory ( ) ; org.springframework.integration.ftp.DefaultFtpSessionFactory . setHost ( STRING ) ; org.springframework.integration.ftp.DefaultFtpSessionFactory . setPort ( port ) ; org.springframework.integration.ftp.DefaultFtpSessionFactory . setUsername ( STRING ) ; org.springframework.integration.ftp.DefaultFtpSessionFactory . setPassword ( STRING ) ; return new CachingSessionFactory < FTPFile > ( org.springframework.integration.ftp.DefaultFtpSessionFactory ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { this . org.springframework.integration.ftp.BaseUser = new BaseUser ( ) ; this . org.springframework.integration.ftp.BaseUser . setAuthorities ( java.util.Arrays . java.util.List ( new ConcurrentLoginPermission ( NUMBER , NUMBER ) , new WritePermission ( ) , new TransferRatePermission ( NUMBER , NUMBER ) ) ) ; this . org.springframework.integration.ftp.BaseUser . setHomeDirectory ( java.lang.String ) ; this . org.springframework.integration.ftp.BaseUser . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ftp.User org.springframework.integration.ftp.User ( java.lang.String java.lang.String ) throws org.springframework.integration.ftp.FtpException { return this . org.springframework.integration.ftp.BaseUser ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) org.springframework.integration.ftp.FtpException { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.integration.ftp.FtpException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( User org.springframework.integration.ftp.User ) throws org.springframework.integration.ftp.FtpException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws org.springframework.integration.ftp.FtpException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ftp.User org.springframework.integration.ftp.User ( Authentication org.springframework.integration.ftp.Authentication ) throws org.springframework.integration.ftp.AuthenticationFailedException { return this . org.springframework.integration.ftp.BaseUser ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.integration.ftp.FtpException { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws org.springframework.integration.ftp.FtpException { return java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
