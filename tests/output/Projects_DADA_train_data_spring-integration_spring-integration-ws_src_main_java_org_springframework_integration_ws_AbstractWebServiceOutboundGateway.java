<METHOD_START> public void ( final java.lang.String java.lang.String , WebServiceMessageFactory org.springframework.integration.ws.WebServiceMessageFactory ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.ws.WebServiceTemplate = new WebServiceTemplate ( org.springframework.integration.ws.WebServiceMessageFactory ) ; this . org.springframework.integration.ws.DestinationProvider = null ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( DestinationProvider org.springframework.integration.ws.DestinationProvider , WebServiceMessageFactory org.springframework.integration.ws.WebServiceMessageFactory ) { Assert . notNull ( org.springframework.integration.ws.DestinationProvider , STRING ) ; this . org.springframework.integration.ws.WebServiceTemplate = new WebServiceTemplate ( org.springframework.integration.ws.WebServiceMessageFactory ) ; this . org.springframework.integration.ws.DestinationProvider = org.springframework.integration.ws.DestinationProvider ; this . org.springframework.integration.ws.WebServiceTemplate . setDestinationProvider ( org.springframework.integration.ws.DestinationProvider ) ; this . java.lang.String = null ; }  <METHOD_END>
<METHOD_START> public void void ( SoapHeaderMapper org.springframework.integration.ws.SoapHeaderMapper ) { this . org.springframework.integration.ws.SoapHeaderMapper = org.springframework.integration.ws.SoapHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.integration.ws.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.ws.Expression> ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.ws.Expression> ) { this . java.util.Map<java.lang.String,org.springframework.integration.ws.Expression> . clear ( ) ; this . java.util.Map<java.lang.String,org.springframework.integration.ws.Expression> . putAll ( java.util.Map<java.lang.String,org.springframework.integration.ws.Expression> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.ws.MessageChannel ) { this . setOutputChannel ( org.springframework.integration.ws.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( WebServiceTemplate org.springframework.integration.ws.WebServiceTemplate ) { void ( org.springframework.integration.ws.WebServiceTemplate ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( WebServiceTemplate org.springframework.integration.ws.WebServiceTemplate ) { Assert . notNull ( org.springframework.integration.ws.WebServiceTemplate , STRING ) ; this . org.springframework.integration.ws.WebServiceTemplate = org.springframework.integration.ws.WebServiceTemplate ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( WebServiceMessageFactory org.springframework.integration.ws.WebServiceMessageFactory ) { Assert . state ( ! this . boolean , ( ) STRING + this . webServiceTemplate ) ; this . org.springframework.integration.ws.WebServiceTemplate . setMessageFactory ( org.springframework.integration.ws.WebServiceMessageFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( WebServiceMessageCallback org.springframework.integration.ws.WebServiceMessageCallback ) { this . org.springframework.integration.ws.WebServiceMessageCallback = org.springframework.integration.ws.WebServiceMessageCallback ; }  <METHOD_END>
<METHOD_START> public void void ( FaultMessageResolver org.springframework.integration.ws.FaultMessageResolver ) { Assert . state ( ! this . boolean , ( ) STRING + this . webServiceTemplate ) ; this . org.springframework.integration.ws.WebServiceTemplate . setFaultMessageResolver ( org.springframework.integration.ws.FaultMessageResolver ) ; }  <METHOD_END>
<METHOD_START> public void void ( WebServiceMessageSender org.springframework.integration.ws.WebServiceMessageSender ) { Assert . state ( ! this . boolean , ( ) STRING + this . webServiceTemplate ) ; this . org.springframework.integration.ws.WebServiceTemplate . setMessageSender ( org.springframework.integration.ws.WebServiceMessageSender ) ; }  <METHOD_END>
<METHOD_START> public void void ( WebServiceMessageSender ... org.springframework.integration.ws.WebServiceMessageSender[] ) { Assert . state ( ! this . boolean , ( ) STRING + this . webServiceTemplate ) ; this . org.springframework.integration.ws.WebServiceTemplate . setMessageSenders ( org.springframework.integration.ws.WebServiceMessageSender[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( ClientInterceptor ... org.springframework.integration.ws.ClientInterceptor[] ) { Assert . state ( ! this . boolean , ( ) STRING + this . webServiceTemplate ) ; this . org.springframework.integration.ws.WebServiceTemplate . setInterceptors ( org.springframework.integration.ws.ClientInterceptor[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.ws.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . getBeanFactory ( ) ) ; Assert . state ( this . org.springframework.integration.ws.DestinationProvider == null || CollectionUtils . isEmpty ( this . java.util.Map<java.lang.String,org.springframework.integration.ws.Expression> ) , STRING ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ws.WebServiceTemplate org.springframework.integration.ws.WebServiceTemplate ( ) { return this . org.springframework.integration.ws.WebServiceTemplate ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.ws.Message<?> ) { java.net.URI java.net.URI = null ; try { java.net.URI = this . java.net.URI ( org.springframework.integration.ws.Message<> ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalArgumentException ( java.net.URISyntaxException ) ; } if ( java.net.URI == null ) { throw new MessageDeliveryException ( org.springframework.integration.ws.Message<> , STRING + STRING + this . getComponentName ( ) ) ; } java.lang.Object java.lang.Object = this . java.lang.Object ( java.net.URI . java.lang.String ( ) , org.springframework.integration.ws.Message<> , this . org.springframework.integration.ws.WebServiceMessageCallback ) ; if ( java.lang.Object != null ) { boolean boolean = ( this . boolean && java.lang.Object instanceof java.lang.String && ! StringUtils . hasText ( ( java.lang.String ) java.lang.Object ) ) ; if ( ! boolean ) { return java.lang.Object ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.net.URI java.net.URI ( Message < ? > org.springframework.integration.ws.Message<?> ) throws java.net.URISyntaxException { if ( this . org.springframework.integration.ws.DestinationProvider != null ) { return this . org.springframework.integration.ws.DestinationProvider . getDestination ( ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ExpressionEvalMap . from ( this . java.util.Map<java.lang.String,org.springframework.integration.ws.Expression> ) . usingEvaluationContext ( this . org.springframework.integration.ws.StandardEvaluationContext ) . withRoot ( org.springframework.integration.ws.Message<> ) . build ( ) ; UriComponents org.springframework.integration.ws.UriComponents = UriComponentsBuilder . fromUriString ( this . java.lang.String ) . buildAndExpand ( java.util.Map<java.lang.String,java.lang.Object> ) ; return this . boolean ? org.springframework.integration.ws.UriComponents . toUri ( ) : new java.net.URI ( org.springframework.integration.ws.UriComponents . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( java.lang.String java.lang.String , Message < ? > org.springframework.integration.ws.Message<?> , WebServiceMessageCallback org.springframework.integration.ws.WebServiceMessageCallback );  <METHOD_END>
<METHOD_START> public void ( WebServiceMessageCallback org.springframework.integration.ws.WebServiceMessageCallback , Message < ? > org.springframework.integration.ws.Message<?> ) { this . org.springframework.integration.ws.WebServiceMessageCallback = org.springframework.integration.ws.WebServiceMessageCallback ; this . org.springframework.integration.ws.Message<?> = org.springframework.integration.ws.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebServiceMessage org.springframework.integration.ws.WebServiceMessage ) throws java.io.IOException , javax.xml.transform.TransformerException { java.lang.Object java.lang.Object = this . org.springframework.integration.ws.Message<> . getPayload ( ) ; if ( org.springframework.integration.ws.WebServiceMessage instanceof SoapMessage ) { this . void ( org.springframework.integration.ws.WebServiceMessage , java.lang.Object ) ; org.springframework.integration.ws.AbstractWebServiceOutboundGateway .this . org.springframework.integration.ws.SoapHeaderMapper . fromHeadersToRequest ( this . org.springframework.integration.ws.Message<> . getHeaders ( ) , ( SoapMessage ) org.springframework.integration.ws.WebServiceMessage ) ; if ( this . org.springframework.integration.ws.WebServiceMessageCallback != null ) { this . org.springframework.integration.ws.WebServiceMessageCallback . doWithMessage ( org.springframework.integration.ws.WebServiceMessage ) ; } } }  <METHOD_END>
<METHOD_START> public abstract void void ( WebServiceMessage org.springframework.integration.ws.WebServiceMessage , java.lang.Object java.lang.Object )				throws java.io.IOException , javax.xml.transform.TransformerException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( WebServiceMessage org.springframework.integration.ws.WebServiceMessage )				throws java.io.IOException , javax.xml.transform.TransformerException { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.ws.WebServiceMessage ) ; if ( java.lang.Object != null && org.springframework.integration.ws.WebServiceMessage instanceof SoapMessage ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.ws.AbstractWebServiceOutboundGateway .this . org.springframework.integration.ws.SoapHeaderMapper . toHeadersFromReply ( ( SoapMessage ) org.springframework.integration.ws.WebServiceMessage ) ; return org.springframework.integration.ws.AbstractWebServiceOutboundGateway .this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; } else { return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> public abstract java.lang.Object java.lang.Object ( WebServiceMessage org.springframework.integration.ws.WebServiceMessage ) throws java.io.IOException , javax.xml.transform.TransformerException ;  <METHOD_END>
