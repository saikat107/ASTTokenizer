<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> = new ClientRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . destroy ( ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> = null ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; ClientRegionFactory org.springframework.data.gemfire.client.ClientRegionFactory = mock ( ClientRegionFactory .class ) ; Region org.springframework.data.gemfire.client.Region = mock ( Region .class ) ; when ( org.springframework.data.gemfire.client.ClientCache . createClientRegionFactory ( eq ( ClientRegionShortcut . LOCAL ) ) ) . thenReturn ( org.springframework.data.gemfire.client.ClientRegionFactory ) ; when ( org.springframework.data.gemfire.client.ClientRegionFactory . create ( eq ( java.lang.String ) ) ) . thenReturn ( org.springframework.data.gemfire.client.Region ) ; RegionAttributes org.springframework.data.gemfire.client.RegionAttributes = mock ( RegionAttributes .class ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getCloningEnabled ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getCompressor ( ) ) . thenReturn ( mock ( Compressor .class ) ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getConcurrencyChecksEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getConcurrencyLevel ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getCustomEntryIdleTimeout ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getCustomEntryTimeToLive ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getDiskStoreName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . isDiskSynchronous ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getEntryIdleTimeout ( ) ) . thenReturn ( mock ( ExpirationAttributes .class ) ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getEntryTimeToLive ( ) ) . thenReturn ( mock ( ExpirationAttributes .class ) ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getEvictionAttributes ( ) ) . thenReturn ( mock ( EvictionAttributes .class ) ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getInitialCapacity ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getKeyConstraint ( ) ) . thenReturn ( java.lang.Long .class ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getLoadFactor ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getPoolName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getRegionIdleTimeout ( ) ) . thenReturn ( mock ( ExpirationAttributes .class ) ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getRegionTimeToLive ( ) ) . thenReturn ( mock ( ExpirationAttributes .class ) ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getStatisticsEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.RegionAttributes . getValueConstraint ( ) ) . thenReturn ( java.lang.Number .class ) ; BeanFactory org.springframework.data.gemfire.client.BeanFactory = mock ( BeanFactory .class ) ; Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; Resource org.springframework.data.gemfire.client.Resource = mock ( Resource .class , STRING ) ; when ( org.springframework.data.gemfire.client.BeanFactory . isTypeMatch ( eq ( STRING ) , eq ( Pool .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.BeanFactory . getBean ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.client.Pool ) ; when ( org.springframework.data.gemfire.client.Pool . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.client.Resource . getInputStream ( ) ) . thenReturn ( mock ( java.io.InputStream .class ) ) ; EvictionAttributes org.springframework.data.gemfire.client.EvictionAttributes = EvictionAttributes . createLRUEntryAttributes ( ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setAttributes ( org.springframework.data.gemfire.client.RegionAttributes ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setBeanFactory ( org.springframework.data.gemfire.client.BeanFactory ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDiskStoreName ( STRING ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setEvictionAttributes ( org.springframework.data.gemfire.client.EvictionAttributes ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPoolName ( STRING ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setSnapshot ( org.springframework.data.gemfire.client.Resource ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( null ) ; Region org.springframework.data.gemfire.client.Region = org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . lookupRegion ( org.springframework.data.gemfire.client.ClientCache , java.lang.String ) ; assertSame ( org.springframework.data.gemfire.client.Region , org.springframework.data.gemfire.client.Region ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . createClientRegionFactory ( eq ( ClientRegionShortcut . LOCAL ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setCloningEnabled ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setCompressor ( any ( Compressor .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setConcurrencyChecksEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setConcurrencyLevel ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setCustomEntryIdleTimeout ( null ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setCustomEntryTimeToLive ( null ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setDiskStoreName ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setDiskSynchronous ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setEntryIdleTimeout ( any ( ExpirationAttributes .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setEntryTimeToLive ( any ( ExpirationAttributes .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setEvictionAttributes ( eq ( org.springframework.data.gemfire.client.EvictionAttributes ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setInitialCapacity ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setKeyConstraint ( eq ( java.lang.Long .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setLoadFactor ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setPoolName ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setRegionIdleTimeout ( any ( ExpirationAttributes .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setRegionTimeToLive ( any ( ExpirationAttributes .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setStatisticsEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setValueConstraint ( eq ( java.lang.Number .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setPoolName ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . setDiskStoreName ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory , times ( NUMBER ) ) . create ( eq ( java.lang.String ) ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . loadSnapshot ( any ( java.io.InputStream .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; ClientRegionFactory < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> = mock ( ClientRegionFactory .class ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> = mock ( Region .class ) ; when ( org.springframework.data.gemfire.client.ClientCache . createClientRegionFactory ( eq ( ClientRegionShortcut . LOCAL_PERSISTENT ) ) ) . thenReturn ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> . create ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) ; BeanFactory org.springframework.data.gemfire.client.BeanFactory = mock ( BeanFactory .class ) ; when ( org.springframework.data.gemfire.client.BeanFactory . isTypeMatch ( eq ( STRING ) , eq ( Pool .class ) ) ) . thenReturn ( false ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setAttributes ( null ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setBeanFactory ( org.springframework.data.gemfire.client.BeanFactory ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( true ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPoolName ( STRING ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( null ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . lookupRegion ( org.springframework.data.gemfire.client.ClientCache , STRING ) ; assertSame ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> , org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . createClientRegionFactory ( eq ( ClientRegionShortcut . LOCAL_PERSISTENT ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . setPoolName ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . create ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.BeanFactory , never ( ) ) . getBean ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> , never ( ) ) . loadSnapshot ( any ( java.io.InputStream .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { BeanFactory org.springframework.data.gemfire.client.BeanFactory = mock ( BeanFactory .class ) ; ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; ClientRegionFactory < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> = mock ( ClientRegionFactory .class ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> = mock ( Region .class ) ; when ( org.springframework.data.gemfire.client.BeanFactory . containsBean ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.ClientCache . createClientRegionFactory ( eq ( ClientRegionShortcut . CACHING_PROXY ) ) ) . thenReturn ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> . create ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setAttributes ( null ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setBeanFactory ( org.springframework.data.gemfire.client.BeanFactory ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( ClientRegionShortcut . CACHING_PROXY ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . lookupRegion ( org.springframework.data.gemfire.client.ClientCache , STRING ) ; assertSame ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> , org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) ; verify ( org.springframework.data.gemfire.client.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . createClientRegionFactory ( eq ( ClientRegionShortcut . CACHING_PROXY ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . create ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { BeanFactory org.springframework.data.gemfire.client.BeanFactory = mock ( BeanFactory .class ) ; ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; ClientRegionFactory < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> = mock ( ClientRegionFactory .class ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> = mock ( Region .class , STRING ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> = mock ( Region .class , STRING ) ; when ( org.springframework.data.gemfire.client.BeanFactory . containsBean ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.ClientCache . createClientRegionFactory ( eq ( ClientRegionShortcut . PROXY ) ) ) . thenReturn ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> . createSubregion ( eq ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setAttributes ( null ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setBeanFactory ( org.springframework.data.gemfire.client.BeanFactory ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setParent ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( ClientRegionShortcut . PROXY ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . lookupRegion ( org.springframework.data.gemfire.client.ClientCache , STRING ) ; assertSame ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> , org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) ; verify ( org.springframework.data.gemfire.client.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . createClientRegionFactory ( eq ( ClientRegionShortcut . PROXY ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . createSubregion ( eq ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { BeanFactory org.springframework.data.gemfire.client.BeanFactory = mock ( BeanFactory .class ) ; ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; ClientRegionFactory < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> = mock ( ClientRegionFactory .class ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> = mock ( Region .class ) ; when ( org.springframework.data.gemfire.client.BeanFactory . containsBean ( anyString ( ) ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.client.ClientCache . createClientRegionFactory ( eq ( ClientRegionShortcut . LOCAL_HEAP_LRU ) ) ) . thenReturn ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> . create ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setAttributes ( null ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setBeanFactory ( org.springframework.data.gemfire.client.BeanFactory ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( ClientRegionShortcut . LOCAL_HEAP_LRU ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . lookupRegion ( org.springframework.data.gemfire.client.ClientCache , STRING ) ; assertSame ( org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> , org.springframework.data.gemfire.client.Region<java.lang.Object,java.lang.Object> ) ; verify ( org.springframework.data.gemfire.client.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . createClientRegionFactory ( eq ( ClientRegionShortcut . LOCAL_HEAP_LRU ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . create ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientRegionFactory<java.lang.Object,java.lang.Object> , never ( ) ) . setPoolName ( any ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicyName ( STRING ) ; assertEquals ( DataPolicy . NORMAL , TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { try { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicyName ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } finally { assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistent ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistent ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( true ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistentUnspecified ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( true ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistent ( ) ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistentUnspecified ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isNotPersistent ( ) ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistentUnspecified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isNotPersistent ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( true ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isNotPersistent ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isNotPersistent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final ClientRegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> = new ClientRegionFactoryBean <> ( ) ; assertNotNull ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isClose ( ) ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isDestroy ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setClose ( false ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isClose ( ) ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isDestroy ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setClose ( true ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isClose ( ) ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isDestroy ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDestroy ( false ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isClose ( ) ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isDestroy ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDestroy ( true ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isClose ( ) ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isDestroy ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setClose ( false ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isClose ( ) ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isDestroy ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDestroy ( false ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isClose ( ) ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isDestroy ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDestroy ( true ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isClose ( ) ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isDestroy ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setClose ( true ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isClose ( ) ) ; assertFalse ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isDestroy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertEquals ( ClientRegionShortcut . LOCAL , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isNotPersistent ( ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertEquals ( ClientRegionShortcut . LOCAL , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( true ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistent ( ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertEquals ( ClientRegionShortcut . LOCAL_PERSISTENT , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( ClientRegionShortcut . CACHING_PROXY_OVERFLOW ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertEquals ( ClientRegionShortcut . CACHING_PROXY_OVERFLOW , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( ClientRegionShortcut . CACHING_PROXY_HEAP_LRU ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isNotPersistent ( ) ) ; assertEquals ( ClientRegionShortcut . CACHING_PROXY_HEAP_LRU , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( true ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( ClientRegionShortcut . CACHING_PROXY ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistent ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( ClientRegionShortcut . LOCAL_PERSISTENT ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertEquals ( ClientRegionShortcut . LOCAL_PERSISTENT , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( ClientRegionShortcut . LOCAL_PERSISTENT ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isNotPersistent ( ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( true ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setShortcut ( ClientRegionShortcut . LOCAL_PERSISTENT_OVERFLOW ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistent ( ) ) ; assertEquals ( ClientRegionShortcut . LOCAL_PERSISTENT_OVERFLOW , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . EMPTY ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertEquals ( ClientRegionShortcut . PROXY , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . NORMAL ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isNotPersistent ( ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertEquals ( ClientRegionShortcut . CACHING_PROXY , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . NORMAL ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( true ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistent ( ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . PERSISTENT_REPLICATE ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertEquals ( ClientRegionShortcut . LOCAL_PERSISTENT , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . PERSISTENT_REPLICATE ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isNotPersistent ( ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . PERSISTENT_REPLICATE ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( true ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> ) ) ; assertTrue ( org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . isPersistent ( ) ) ; assertEquals ( ClientRegionShortcut . LOCAL_PERSISTENT , org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Object,java.lang.Object> . resolveClientRegionShortcut ( ) ) ; }  <METHOD_END>
<METHOD_START> protected < K > org.springframework.data.gemfire.client.Interest<K> < K > org.springframework.data.gemfire.client.Interest<K> ( K K ) { return new Interest < K > ( K ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final Region org.springframework.data.gemfire.client.Region = mock ( Region .class , STRING ) ; RegionService org.springframework.data.gemfire.client.RegionService = mock ( RegionService .class , STRING ) ; when ( org.springframework.data.gemfire.client.Region . getRegionService ( ) ) . thenReturn ( org.springframework.data.gemfire.client.RegionService ) ; when ( org.springframework.data.gemfire.client.RegionService . isClosed ( ) ) . thenReturn ( false ) ; ClientRegionFactoryBean org.springframework.data.gemfire.client.ClientRegionFactoryBean = new ClientRegionFactoryBean ( ) { @ java.lang.Override public org.springframework.data.gemfire.client.Region org.springframework.data.gemfire.client.Region ( ) java.lang.Exception { return org.springframework.data.gemfire.client.Region ; } } ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . setClose ( true ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . setInterests ( ArrayUtils . asArray ( org.springframework.data.gemfire.client.Interest<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . isClose ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . isDestroy ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . getInterests ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . getInterests ( ) . length , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . destroy ( ) ; verify ( org.springframework.data.gemfire.client.Region , times ( NUMBER ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.client.RegionService , times ( NUMBER ) ) . isClosed ( ) ; verify ( org.springframework.data.gemfire.client.Region , times ( NUMBER ) ) . close ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . destroyRegion ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . unregisterInterest ( any ( ) ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . unregisterInterestRegex ( anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.client.Region org.springframework.data.gemfire.client.Region ( ) java.lang.Exception { return org.springframework.data.gemfire.client.Region ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final Region org.springframework.data.gemfire.client.Region = mock ( Region .class , STRING ) ; RegionService org.springframework.data.gemfire.client.RegionService = mock ( RegionService .class , STRING ) ; when ( org.springframework.data.gemfire.client.Region . getRegionService ( ) ) . thenReturn ( org.springframework.data.gemfire.client.RegionService ) ; when ( org.springframework.data.gemfire.client.RegionService . isClosed ( ) ) . thenReturn ( false ) ; ClientRegionFactoryBean org.springframework.data.gemfire.client.ClientRegionFactoryBean = new ClientRegionFactoryBean ( ) { @ java.lang.Override public org.springframework.data.gemfire.client.Region org.springframework.data.gemfire.client.Region ( ) java.lang.Exception { return org.springframework.data.gemfire.client.Region ; } } ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . setClose ( false ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . setDestroy ( true ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . setInterests ( ArrayUtils . asArray ( org.springframework.data.gemfire.client.Interest<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . isClose ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . isDestroy ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . getInterests ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . getInterests ( ) . length , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . destroy ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.client.RegionService , never ( ) ) . isClosed ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . close ( ) ; verify ( org.springframework.data.gemfire.client.Region , times ( NUMBER ) ) . destroyRegion ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . unregisterInterest ( any ( ) ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . unregisterInterestRegex ( anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.client.Region org.springframework.data.gemfire.client.Region ( ) java.lang.Exception { return org.springframework.data.gemfire.client.Region ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final Region org.springframework.data.gemfire.client.Region = mock ( Region .class , STRING ) ; RegionService org.springframework.data.gemfire.client.RegionService = mock ( RegionService .class , STRING ) ; when ( org.springframework.data.gemfire.client.Region . getRegionService ( ) ) . thenReturn ( org.springframework.data.gemfire.client.RegionService ) ; when ( org.springframework.data.gemfire.client.RegionService . isClosed ( ) ) . thenReturn ( true ) ; ClientRegionFactoryBean org.springframework.data.gemfire.client.ClientRegionFactoryBean = new ClientRegionFactoryBean ( ) { @ java.lang.Override public org.springframework.data.gemfire.client.Region org.springframework.data.gemfire.client.Region ( ) java.lang.Exception { return org.springframework.data.gemfire.client.Region ; } } ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . setClose ( true ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . setInterests ( ArrayUtils . asArray ( org.springframework.data.gemfire.client.Interest<java.lang.String> ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . isClose ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . isDestroy ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . getInterests ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientRegionFactoryBean . getInterests ( ) . length , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . destroy ( ) ; verify ( org.springframework.data.gemfire.client.Region , times ( NUMBER ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.client.RegionService , times ( NUMBER ) ) . isClosed ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . close ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . destroyRegion ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . unregisterInterest ( any ( ) ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . unregisterInterestRegex ( anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.client.Region org.springframework.data.gemfire.client.Region ( ) java.lang.Exception { return org.springframework.data.gemfire.client.Region ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final Region org.springframework.data.gemfire.client.Region = mock ( Region .class , STRING ) ; ClientRegionFactoryBean org.springframework.data.gemfire.client.ClientRegionFactoryBean = new ClientRegionFactoryBean ( ) { @ java.lang.Override public org.springframework.data.gemfire.client.Region org.springframework.data.gemfire.client.Region ( ) java.lang.Exception { return org.springframework.data.gemfire.client.Region ; } } ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . destroy ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . close ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . destroyRegion ( ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . unregisterInterest ( any ( ) ) ; verify ( org.springframework.data.gemfire.client.Region , never ( ) ) . unregisterInterestRegex ( anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.client.Region org.springframework.data.gemfire.client.Region ( ) java.lang.Exception { return org.springframework.data.gemfire.client.Region ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClientRegionFactoryBean org.springframework.data.gemfire.client.ClientRegionFactoryBean = new ClientRegionFactoryBean ( ) { @ java.lang.Override public org.springframework.data.gemfire.client.Region org.springframework.data.gemfire.client.Region ( ) java.lang.Exception { return null ; } } ; org.springframework.data.gemfire.client.ClientRegionFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.client.Region org.springframework.data.gemfire.client.Region ( ) java.lang.Exception { return null ; }  <METHOD_END>
