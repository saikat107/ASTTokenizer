<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.ImportResourceTests.ImportXmlConfig .class ) ; assertTrue ( STRING , org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; assertTrue ( STRING , org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) ; assertEquals ( STRING , org.springframework.context.annotation.configuration.TestBean . getName ( ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.ImportResourceTests.FirstLevelSubConfig .class ) ; assertTrue ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.ImportResourceTests.SecondLevelSubConfig .class ) ; assertTrue ( STRING , org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; assertTrue ( STRING , org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.ImportResourceTests.ImportXmlWithAopNamespaceConfig .class ) ; java.lang.Object java.lang.Object = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( java.lang.Object ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.ImportResourceTests.ImportXmlWithConfigurationClass .class ) ; assertTrue ( STRING , org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; assertTrue ( STRING , org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) ; assertEquals ( STRING , org.springframework.context.annotation.configuration.TestBean . getName ( ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; PropertySource < ? > org.springframework.context.annotation.configuration.PropertySource<?> = new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( org.springframework.context.annotation.configuration.PropertySource<> ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ImportResourceTests.ImportXmlConfig .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; assertTrue ( STRING , org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.ImportResourceTests.ImportXmlAutowiredConfig .class ) ; java.lang.String java.lang.String = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , java.lang.String .class ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.ImportResourceTests.ImportNonXmlResourceConfig .class ) ; assertTrue ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { }  <METHOD_END>
<METHOD_START> public @ Bean java.lang.String java.lang.String ( ) { return org.springframework.context.annotation.configuration.TestBean . getName ( ) ; }  <METHOD_END>
