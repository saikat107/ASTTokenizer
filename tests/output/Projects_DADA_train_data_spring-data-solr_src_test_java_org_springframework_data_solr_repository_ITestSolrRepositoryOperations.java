<METHOD_START> @ Before public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; org.springframework.data.solr.repository.ProductRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.solr.repository.ProductBean , org.springframework.data.solr.repository.ProductBean , org.springframework.data.solr.repository.ProductBean , org.springframework.data.solr.repository.ProductBean ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductRepository . findOne ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) . get ( ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , org.springframework.data.solr.repository.ProductBean . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertFalse ( org.springframework.data.solr.repository.ProductRepository . findOne ( org.springframework.data.solr.repository.ProductBean . getId ( ) . concat ( STRING ) ) . isPresent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertTrue ( org.springframework.data.solr.repository.ProductRepository . exists ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertFalse ( org.springframework.data.solr.repository.ProductRepository . exists ( org.springframework.data.solr.repository.ProductBean . getId ( ) . concat ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.ProductRepository . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductRepository . findByNameAndAvailableTrue ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , org.springframework.data.solr.repository.ProductBean . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNamedQuery ( NUMBER ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByName ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameNot ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true , STRING ) ; org.springframework.data.solr.repository.ProductBean . setName ( null ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameIsNull ( ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true , STRING ) ; org.springframework.data.solr.repository.ProductBean . setName ( null ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameIsNotNull ( ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : java.util.List<org.springframework.data.solr.repository.ProductBean> ) { Assert . assertFalse ( org.springframework.data.solr.repository.ProductBean . getId ( ) . equals ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductRepository . findById ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.ProductBean ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , org.springframework.data.solr.repository.ProductBean . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableTrue ( ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableFalse ( ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableUsingQueryAnnotation ( true ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setLastModified ( new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) . toDate ( ) ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setLastModified ( new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) . toDate ( ) ) ; org.springframework.data.solr.repository.ProductRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.solr.repository.ProductBean , org.springframework.data.solr.repository.ProductBean ) ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByLastModifiedBefore ( new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) . toDate ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByPopularityLessThan ( NUMBER ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByPopularityLessThanEqual ( NUMBER ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setLastModified ( new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) . toDate ( ) ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setLastModified ( new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) . toDate ( ) ) ; org.springframework.data.solr.repository.ProductRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.solr.repository.ProductBean , org.springframework.data.solr.repository.ProductBean ) ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByLastModifiedAfter ( new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) . toDate ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByPopularityGreaterThan ( NUMBER ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByPopularityGreaterThanEqual ( NUMBER ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameLike ( org.springframework.data.solr.repository.ProductBean . getName ( ) . substring ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameStartsWith ( org.springframework.data.solr.repository.ProductBean . getName ( ) . substring ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByPopularityIn ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByPopularityNotIn ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByPopularityAndAvailableTrue ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByPopularityOrAvailableFalse ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setLocation ( STRING ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setLocation ( STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.solr.repository.ProductBean , org.springframework.data.solr.repository.ProductBean ) ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByLocationWithin ( new Point ( NUMBER , - NUMBER ) , new Distance ( NUMBER ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setLocation ( STRING ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setLocation ( STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.solr.repository.ProductBean , org.springframework.data.solr.repository.ProductBean ) ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByLocationNear ( new Point ( NUMBER , - NUMBER ) , new Distance ( NUMBER ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setLocation ( STRING ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setLocation ( STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.solr.repository.ProductBean , org.springframework.data.solr.repository.ProductBean ) ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByLocationNear ( new Box ( new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , - NUMBER ) ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = new java.util.ArrayList<org.springframework.data.solr.repository.ProductBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.solr.repository.ProductBean> . add ( org.springframework.data.solr.repository.ProductBean ( java.lang.Integer . java.lang.String ( int ) , int , true ) ) ; } org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableTrueOrderByPopularityAsc ( ) ; ProductBean org.springframework.data.solr.repository.ProductBean = java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) ; for ( int int = NUMBER ; int < java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ; int ++ ) { ProductBean org.springframework.data.solr.repository.ProductBean = java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( int ) ; Assert . assertTrue ( java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) > java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) ) ; org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = new java.util.ArrayList<org.springframework.data.solr.repository.ProductBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.solr.repository.ProductBean> . add ( org.springframework.data.solr.repository.ProductBean ( java.lang.Integer . java.lang.String ( int ) , int , true ) ) ; } org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableTrueOrderByPopularityDesc ( ) ; ProductBean org.springframework.data.solr.repository.ProductBean = java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) ; for ( int int = NUMBER ; int < java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ; int ++ ) { ProductBean org.springframework.data.solr.repository.ProductBean = java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( int ) ; Assert . assertTrue ( java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) < java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) ) ; org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = new java.util.ArrayList<org.springframework.data.solr.repository.ProductBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.solr.repository.ProductBean> . add ( org.springframework.data.solr.repository.ProductBean ( java.lang.Integer . java.lang.String ( int ) , int , true ) ) ; } org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableWithAnnotatedQueryUsingSort ( true , new Sort ( Direction . DESC , STRING ) ) ; ProductBean org.springframework.data.solr.repository.ProductBean = java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) ; for ( int int = NUMBER ; int < java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ; int ++ ) { ProductBean org.springframework.data.solr.repository.ProductBean = java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( int ) ; Assert . assertTrue ( java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) < java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) ) ; org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = new java.util.ArrayList<org.springframework.data.solr.repository.ProductBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.solr.repository.ProductBean> . add ( org.springframework.data.solr.repository.ProductBean ( java.lang.Integer . java.lang.String ( int ) , int , true ) ) ; } org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ) ; Page < ProductBean > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableWithAnnotatedQueryUsingSortInPageable ( true , new PageRequest ( NUMBER , NUMBER , new Sort ( Direction . DESC , STRING ) ) ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getContent ( ) . get ( NUMBER ) ; for ( int int = NUMBER ; int < org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getContent ( ) . size ( ) ; int ++ ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getContent ( ) . get ( int ) ; Assert . assertTrue ( java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) < java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) ) ; org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = new java.util.ArrayList<org.springframework.data.solr.repository.ProductBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.solr.repository.ProductBean> . add ( org.springframework.data.solr.repository.ProductBean ( java.lang.Integer . java.lang.String ( int ) , int , true ) ) ; } org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableWithSort ( true , new Sort ( Direction . DESC , STRING ) ) ; ProductBean org.springframework.data.solr.repository.ProductBean = java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) ; for ( int int = NUMBER ; int < java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ; int ++ ) { ProductBean org.springframework.data.solr.repository.ProductBean = java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( int ) ; Assert . assertTrue ( java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) < java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) ) ; org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = new java.util.ArrayList<org.springframework.data.solr.repository.ProductBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.solr.repository.ProductBean> . add ( org.springframework.data.solr.repository.ProductBean ( java.lang.Integer . java.lang.String ( int ) , int , true ) ) ; } org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ) ; Page < ProductBean > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableWithSort ( true , new PageRequest ( NUMBER , NUMBER , new Sort ( Direction . DESC , STRING ) ) ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getContent ( ) . get ( NUMBER ) ; for ( int int = NUMBER ; int < org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getContent ( ) . size ( ) ; int ++ ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getContent ( ) . get ( int ) ; Assert . assertTrue ( java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) < java.lang.Long . java.lang.Long ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) ) ; org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameRegex ( STRING ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : java.util.List<org.springframework.data.solr.repository.ProductBean> ) { Assert . assertTrue ( org.springframework.data.solr.repository.ProductBean . getName ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pageable org.springframework.data.solr.repository.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < ProductBean > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameStartingWith ( STRING , org.springframework.data.solr.repository.Pageable ) ; Assert . assertEquals ( org.springframework.data.solr.repository.Pageable . getPageSize ( ) , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . hasNext ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getTotalElements ( ) ) ; org.springframework.data.solr.repository.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < ProductBean > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameStartingWith ( STRING , org.springframework.data.solr.repository.Pageable ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; Assert . assertFalse ( org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . hasNext ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getTotalElements ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pageable org.springframework.data.solr.repository.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < ProductBean > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameStartingWith ( STRING , org.springframework.data.solr.repository.Pageable ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getContent ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameStartsWithProjectionOnNameAndId ( STRING ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : java.util.List<org.springframework.data.solr.repository.ProductBean> ) { Assert . assertNotNull ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) ; Assert . assertNull ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameStartingWith ( STRING ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : java.util.List<org.springframework.data.solr.repository.ProductBean> ) { Assert . assertNotNull ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) ; Assert . assertNull ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetPage < ProductBean > org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllFacetOnPopularity ( new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) ) ; Page < FacetFieldEntry > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> = org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetResultPage ( org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . iterator ( ) . next ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . size ( ) ) ; for ( FacetFieldEntry org.springframework.data.solr.repository.FacetFieldEntry : org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.FacetFieldEntry . getField ( ) . getName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetPage < ProductBean > org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllFacetOnPopularityAndAvailable ( new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) ) ; Page < FacetFieldEntry > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> = org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetResultPage ( new SimpleField ( STRING ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . size ( ) ) ; for ( FacetFieldEntry org.springframework.data.solr.repository.FacetFieldEntry : org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.FacetFieldEntry . getField ( ) . getName ( ) ) ; } Page < FacetFieldEntry > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> = org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetResultPage ( new SimpleField ( STRING ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . size ( ) ) ; for ( FacetFieldEntry org.springframework.data.solr.repository.FacetFieldEntry : org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.FacetFieldEntry . getField ( ) . getName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetPage < ProductBean > org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllFacetQueryPopularity ( new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) ) ; Page < FacetQueryEntry > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> = org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetQueryResult ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValueCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetPage < ProductBean > org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllFacetQueryPopularity ( NUMBER , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) ) ; Page < FacetQueryEntry > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> = org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetQueryResult ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValueCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetPage < ProductBean > org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllFacetQueryAvailableTrueAndAvailableFalse ( new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) ) ; Page < FacetQueryEntry > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> = org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetQueryResult ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValueCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetPage < ProductBean > org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllFacetOnNameWithStaticPrefix ( new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) ) ; Page < FacetFieldEntry > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> = org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetResultPage ( STRING ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . get ( NUMBER ) . getField ( ) . getName ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . get ( NUMBER ) . getValueCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetPage < ProductBean > org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllFacetOnNameWithDynamicPrefix ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) ) ; Page < FacetFieldEntry > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> = org.springframework.data.solr.repository.FacetPage<org.springframework.data.solr.repository.ProductBean> . getFacetResultPage ( STRING ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . get ( NUMBER ) . getField ( ) . getName ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.FacetFieldEntry> . getContent ( ) . get ( NUMBER ) . getValueCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetAndHighlightPage < ProductBean > org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameFacetOnNameHighlightAll ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) > NUMBER ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> ) { java.util.List<org.springframework.data.solr.repository.Highlight> < Highlight > java.util.List<org.springframework.data.solr.repository.Highlight> = org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getHighlights ( org.springframework.data.solr.repository.ProductBean ) ; Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.Highlight> , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( Highlight org.springframework.data.solr.repository.Highlight : java.util.List<org.springframework.data.solr.repository.Highlight> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Highlight . getField ( ) . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Highlight . getSnipplets ( ) , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.Highlight . getSnipplets ( ) ) { Assert . assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetAndHighlightPage < ProductBean > org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameFacetOnInStockHighlightAllWithPreAndPostfix ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) > NUMBER ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> ) { java.util.List<org.springframework.data.solr.repository.Highlight> < Highlight > java.util.List<org.springframework.data.solr.repository.Highlight> = org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getHighlights ( org.springframework.data.solr.repository.ProductBean ) ; Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.Highlight> , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( Highlight org.springframework.data.solr.repository.Highlight : java.util.List<org.springframework.data.solr.repository.Highlight> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Highlight . getField ( ) . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Highlight . getSnipplets ( ) , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.Highlight . getSnipplets ( ) ) { Assert . assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setDescription ( STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; FacetAndHighlightPage < ProductBean > org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameFacetOnNameHighlightAllLimitToFields ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) > NUMBER ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> ) { java.util.List<org.springframework.data.solr.repository.Highlight> < Highlight > java.util.List<org.springframework.data.solr.repository.Highlight> = org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getHighlights ( org.springframework.data.solr.repository.ProductBean ) ; if ( ! org.springframework.data.solr.repository.ProductBean . getId ( ) . equals ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) ) { Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.Highlight> , IsEmptyCollection . empty ( ) ) ; } else { Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.Highlight> , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( Highlight org.springframework.data.solr.repository.Highlight : java.util.List<org.springframework.data.solr.repository.Highlight> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Highlight . getField ( ) . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Highlight . getSnipplets ( ) , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.Highlight . getSnipplets ( ) ) { Assert . assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; } } } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setDescription ( STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; FacetAndHighlightPage < ProductBean > org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameFacetOnNameHighlightAllLimitToFields ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) > NUMBER ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> ) { java.util.List<org.springframework.data.solr.repository.Highlight> < Highlight > java.util.List<org.springframework.data.solr.repository.Highlight> = org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getHighlights ( org.springframework.data.solr.repository.ProductBean ) ; if ( ! org.springframework.data.solr.repository.ProductBean . getId ( ) . equals ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) ) { Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.Highlight> , IsEmptyCollection . empty ( ) ) ; } else { Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.Highlight> , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( Highlight org.springframework.data.solr.repository.Highlight : java.util.List<org.springframework.data.solr.repository.Highlight> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Highlight . getField ( ) . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Highlight . getSnipplets ( ) , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.Highlight . getSnipplets ( ) ) { Assert . assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; } } } } Assert . assertEquals ( STRING , org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getFacetResultPage ( STRING ) . getContent ( ) . get ( NUMBER ) . getKey ( ) . getName ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getFacetResultPage ( STRING ) . getContent ( ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getFacetResultPage ( STRING ) . getContent ( ) . get ( NUMBER ) . getValueCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setDescription ( STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; FacetAndHighlightPage < ProductBean > org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameFacetOnStoreHighlightWihtQueryOverride ( STRING , STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getFacetFields ( ) . size ( ) > NUMBER ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> ) { java.util.List<org.springframework.data.solr.repository.Highlight> < Highlight > java.util.List<org.springframework.data.solr.repository.Highlight> = org.springframework.data.solr.repository.FacetAndHighlightPage<org.springframework.data.solr.repository.ProductBean> . getHighlights ( org.springframework.data.solr.repository.ProductBean ) ; for ( Highlight org.springframework.data.solr.repository.Highlight : java.util.List<org.springframework.data.solr.repository.Highlight> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Highlight . getField ( ) . getName ( ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.Highlight . getSnipplets ( ) ) { Assert . assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllFilterAvailableTrue ( ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : java.util.List<org.springframework.data.solr.repository.ProductBean> ) { Assert . assertTrue ( org.springframework.data.solr.repository.ProductBean . isAvailable ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByPopularityLessThan ( NUMBER , true ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllFilterAvailableTrueAndPopularityLessThanEqual3 ( ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : java.util.List<org.springframework.data.solr.repository.ProductBean> ) { Assert . assertTrue ( org.springframework.data.solr.repository.ProductBean . isAvailable ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.repository.ProductBean . getPopularity ( ) <= NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableIn ( java.util.Collections . java.util.List<java.lang.Boolean> ( java.lang.Boolean . java.lang.Boolean ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableIn ( java.util.Arrays . java.util.List<java.lang.Boolean> ( java.lang.Boolean . java.lang.Boolean , java.lang.Boolean . java.lang.Boolean ) ) ; Assert . assertTrue ( java.util.List<org.springframework.data.solr.repository.ProductBean> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableInWithOrOperator ( java.util.Collections . java.util.List<java.lang.Boolean> ( java.lang.Boolean . java.lang.Boolean ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByAvailableInWithOrOperator ( java.util.Arrays . java.util.List<java.lang.Boolean> ( java.lang.Boolean . java.lang.Boolean , java.lang.Boolean . java.lang.Boolean ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllWithExecutiontimeRestriction ( ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . deleteAll ( ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true , STRING ) ; org.springframework.data.solr.repository.ProductBean . setTitle ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true , STRING ) ; org.springframework.data.solr.repository.ProductBean . setTitle ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.data.solr.repository.ProductRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.solr.repository.ProductBean , org.springframework.data.solr.repository.ProductBean ) ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameStartsWithOrTitleStartsWith ( STRING , STRING ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true , STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameIn ( java.util.Arrays . java.util.List ( org.springframework.data.solr.repository.ProductBean . getName ( ) , org.springframework.data.solr.repository.ProductBean . getName ( ) ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.ProductBean> , Matchers . containsInAnyOrder ( org.springframework.data.solr.repository.ProductBean , org.springframework.data.solr.repository.ProductBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setDescription ( STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , false ) ; org.springframework.data.solr.repository.ProductBean . setDescription ( STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByDescription ( STRING ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.repository.ProductBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.repository.ProductBean . getId ( ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HighlightPage < ProductBean > org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameHighlightAll ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> ) { java.util.List<org.springframework.data.solr.repository.Highlight> < Highlight > java.util.List<org.springframework.data.solr.repository.Highlight> = org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> . getHighlights ( org.springframework.data.solr.repository.ProductBean ) ; Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.Highlight> , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( Highlight org.springframework.data.solr.repository.Highlight : java.util.List<org.springframework.data.solr.repository.Highlight> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Highlight . getField ( ) . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Highlight . getSnipplets ( ) , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.Highlight . getSnipplets ( ) ) { Assert . assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HighlightPage < ProductBean > org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameHighlightAllWithPreAndPostfix ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> ) { java.util.List<org.springframework.data.solr.repository.Highlight> < Highlight > java.util.List<org.springframework.data.solr.repository.Highlight> = org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> . getHighlights ( org.springframework.data.solr.repository.ProductBean ) ; Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.Highlight> , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( Highlight org.springframework.data.solr.repository.Highlight : java.util.List<org.springframework.data.solr.repository.Highlight> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Highlight . getField ( ) . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Highlight . getSnipplets ( ) , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.Highlight . getSnipplets ( ) ) { Assert . assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setDescription ( STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; HighlightPage < ProductBean > org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameHighlightAllLimitToFields ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> ) { java.util.List<org.springframework.data.solr.repository.Highlight> < Highlight > java.util.List<org.springframework.data.solr.repository.Highlight> = org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> . getHighlights ( org.springframework.data.solr.repository.ProductBean ) ; if ( ! org.springframework.data.solr.repository.ProductBean . getId ( ) . equals ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) ) { Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.Highlight> , IsEmptyCollection . empty ( ) ) ; } else { Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.Highlight> , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( Highlight org.springframework.data.solr.repository.Highlight : java.util.List<org.springframework.data.solr.repository.Highlight> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Highlight . getField ( ) . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Highlight . getSnipplets ( ) , IsNot . not ( IsEmptyCollection . empty ( ) ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.Highlight . getSnipplets ( ) ) { Assert . assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; } } } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setDescription ( STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; HighlightPage < ProductBean > org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByNameHighlightWihtQueryOverride ( STRING , STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) ) ; for ( ProductBean org.springframework.data.solr.repository.ProductBean : org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> ) { java.util.List<org.springframework.data.solr.repository.Highlight> < Highlight > java.util.List<org.springframework.data.solr.repository.Highlight> = org.springframework.data.solr.repository.HighlightPage<org.springframework.data.solr.repository.ProductBean> . getHighlights ( org.springframework.data.solr.repository.ProductBean ) ; for ( Highlight org.springframework.data.solr.repository.Highlight : java.util.List<org.springframework.data.solr.repository.Highlight> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.repository.Highlight . getField ( ) . getName ( ) ) ; for ( java.lang.String java.lang.String : org.springframework.data.solr.repository.Highlight . getSnipplets ( ) ) { Assert . assertTrue ( STRING + java.lang.String + STRING , java.lang.String . boolean ( STRING ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.repository.ProductRepository . countProductBeanByName ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) , Is . is ( NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.ProductRepository . countByName ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) , Is . is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = org.springframework.data.solr.repository.ProductRepository . count ( ) ; org.springframework.data.solr.repository.ProductRepository . deleteByName ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.ProductRepository . exists ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) , Is . is ( false ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.ProductRepository . count ( ) , Is . is ( long - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = org.springframework.data.solr.repository.ProductRepository . count ( ) ; long long = org.springframework.data.solr.repository.ProductRepository . deleteProductBeanByName ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.ProductRepository . exists ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) , Is . is ( false ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.ProductRepository . count ( ) , Is . is ( long - long ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . removeByName ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.ProductRepository . exists ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) , Is . is ( false ) ) ; Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.ProductBean> , IsCollectionWithSize . hasSize ( NUMBER ) ) ; Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) . getId ( ) , IsEqual . equalTo ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = org.springframework.data.solr.repository.ProductRepository . count ( ) ; org.springframework.data.solr.repository.ProductRepository . removeUsingAnnotatedQuery ( org.springframework.data.solr.repository.ProductBean . getName ( ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.ProductRepository . exists ( org.springframework.data.solr.repository.ProductBean . getId ( ) ) , Is . is ( false ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.ProductRepository . count ( ) , Is . is ( long - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findTop2ByNameStartingWith ( STRING ) ; Assert . assertThat ( java.util.List<org.springframework.data.solr.repository.ProductBean> , IsCollectionWithSize . hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = java.util.List<org.springframework.data.solr.repository.ProductBean> ( NUMBER , STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ) ; Page < ProductBean > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findTop3ByNameStartsWith ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) , IsEqual . equalTo ( NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getContent ( ) , IsCollectionContaining . hasItems ( java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) , java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = java.util.List<org.springframework.data.solr.repository.ProductBean> ( NUMBER , STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ) ; Page < ProductBean > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findTop3ByNameStartsWith ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) , IsEqual . equalTo ( NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getContent ( ) , IsCollectionContaining . hasItems ( java.util.List<org.springframework.data.solr.repository.ProductBean> . get ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ( NUMBER , STRING ) ) ; Page < ProductBean > org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findTop3ByNameStartsWith ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) , IsEqual . equalTo ( NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Page<org.springframework.data.solr.repository.ProductBean> . hasNext ( ) , IsEqual . equalTo ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ( NUMBER , STRING ) ) ; Slice < ProductBean > org.springframework.data.solr.repository.Slice<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findProductBeanByName ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Slice<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) , Is . is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ( NUMBER , STRING ) ) ; Slice < ProductBean > org.springframework.data.solr.repository.Slice<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findProductBeanByName ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Slice<org.springframework.data.solr.repository.ProductBean> . getNumberOfElements ( ) , Is . is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.repository.ProductRepository . save ( java.util.List<org.springframework.data.solr.repository.ProductBean> ( NUMBER , STRING ) ) ; Slice < ProductBean > org.springframework.data.solr.repository.Slice<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findProductBeanByName ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.Slice<org.springframework.data.solr.repository.ProductBean> . hasContent ( ) , Is . is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true ) ; org.springframework.data.solr.repository.ProductBean . setPrice ( NUMBER ) ; org.springframework.data.solr.repository.ProductBean . setAvailable ( true ) ; org.springframework.data.solr.repository.ProductBean . setLastModified ( new java.util.Date ( ) ) ; org.springframework.data.solr.repository.ProductBean . setWeight ( NUMBER ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; StatsPage < ProductBean > org.springframework.data.solr.repository.StatsPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findAllWithStats ( new SolrPageRequest ( NUMBER , NUMBER ) ) ; FieldStatsResult org.springframework.data.solr.repository.FieldStatsResult = org.springframework.data.solr.repository.StatsPage<org.springframework.data.solr.repository.ProductBean> . getFieldStatsResult ( STRING ) ; FieldStatsResult org.springframework.data.solr.repository.FieldStatsResult = org.springframework.data.solr.repository.StatsPage<org.springframework.data.solr.repository.ProductBean> . getFieldStatsResult ( STRING ) ; FieldStatsResult org.springframework.data.solr.repository.FieldStatsResult = org.springframework.data.solr.repository.StatsPage<org.springframework.data.solr.repository.ProductBean> . getFieldStatsResult ( STRING ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.FieldStatsResult ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.FieldStatsResult ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.FieldStatsResult . getFacetStatsResult ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.FieldStatsResult . getFacetStatsResult ( STRING ) ) ; Assert . assertNull ( org.springframework.data.solr.repository.FieldStatsResult . getFacetStatsResult ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.FieldStatsResult . getFacetStatsResult ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.FieldStatsResult . getFacetStatsResult ( STRING ) ) ; Assert . assertNull ( org.springframework.data.solr.repository.FieldStatsResult . getFacetStatsResult ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.FieldStatsResult ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.FieldStatsResult . getFacetStatsResult ( STRING ) ) ; Assert . assertNull ( org.springframework.data.solr.repository.FieldStatsResult . getFacetStatsResult ( STRING ) ) ; Assert . assertNull ( org.springframework.data.solr.repository.FieldStatsResult . getFacetStatsResult ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProductBean org.springframework.data.solr.repository.ProductBean = org.springframework.data.solr.repository.ProductBean ( STRING , NUMBER , true , STRING ) ; org.springframework.data.solr.repository.ProductRepository . save ( org.springframework.data.solr.repository.ProductBean ) ; SpellcheckedPage < ProductBean > org.springframework.data.solr.repository.SpellcheckedPage<org.springframework.data.solr.repository.ProductBean> = org.springframework.data.solr.repository.ProductRepository . findByName ( STRING , new PageRequest ( NUMBER , NUMBER ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.SpellcheckedPage<org.springframework.data.solr.repository.ProductBean> . hasContent ( ) , Is . is ( false ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.SpellcheckedPage<org.springframework.data.solr.repository.ProductBean> . getSuggestions ( ) . size ( ) , Is . is ( Matchers . greaterThan ( NUMBER ) ) ) ; Assert . assertThat ( org.springframework.data.solr.repository.SpellcheckedPage<org.springframework.data.solr.repository.ProductBean> . getSuggestions ( ) , Matchers . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> ( int int , java.lang.String java.lang.String ) { java.util.List<org.springframework.data.solr.repository.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.ProductBean> = new java.util.ArrayList<org.springframework.data.solr.repository.ProductBean> <> ( int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.String java.lang.String = StringUtils . hasText ( java.lang.String ) ? ( java.lang.String + STRING + int ) : java.lang.Integer . java.lang.String ( int ) ; java.util.List<org.springframework.data.solr.repository.ProductBean> . add ( org.springframework.data.solr.repository.ProductBean ( java.lang.String , NUMBER , true , java.lang.String ) ) ; } return java.util.List<org.springframework.data.solr.repository.ProductBean> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.solr.repository.ProductBean org.springframework.data.solr.repository.ProductBean ( java.lang.String java.lang.String , int int , boolean boolean ) { return org.springframework.data.solr.repository.ProductBean ( java.lang.String , int , boolean , STRING ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.solr.repository.ProductBean org.springframework.data.solr.repository.ProductBean ( java.lang.String java.lang.String , int int , boolean boolean , java.lang.String java.lang.String ) { ProductBean org.springframework.data.solr.repository.ProductBean = new ProductBean ( ) ; org.springframework.data.solr.repository.ProductBean . setId ( java.lang.String ) ; org.springframework.data.solr.repository.ProductBean . setAvailable ( boolean ) ; org.springframework.data.solr.repository.ProductBean . setPopularity ( int ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.solr.repository.ProductBean . setName ( java.lang.String ) ; } else { org.springframework.data.solr.repository.ProductBean . setName ( STRING + java.lang.String ) ; } return org.springframework.data.solr.repository.ProductBean ; }  <METHOD_END>
