<METHOD_START> @ Before public void void ( ) { EmbeddedDatabaseBuilder org.springframework.integration.jdbc.EmbeddedDatabaseBuilder = new EmbeddedDatabaseBuilder ( ) ; org.springframework.integration.jdbc.EmbeddedDatabaseBuilder . setType ( EmbeddedDatabaseType . DERBY ) . addScript ( STRING ) ; this . org.springframework.integration.jdbc.EmbeddedDatabase = org.springframework.integration.jdbc.EmbeddedDatabaseBuilder . build ( ) ; this . org.springframework.integration.jdbc.JdbcTemplate = new JdbcTemplate ( this . org.springframework.integration.jdbc.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.integration.jdbc.EmbeddedDatabase . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcPollingChannelAdapter org.springframework.integration.jdbc.JdbcPollingChannelAdapter = new JdbcPollingChannelAdapter ( this . org.springframework.integration.jdbc.EmbeddedDatabase , STRING ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; Message < java.lang.Object > org.springframework.integration.jdbc.Message<java.lang.Object> = org.springframework.integration.jdbc.JdbcPollingChannelAdapter . receive ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.Message<java.lang.Object> . getPayload ( ) ; assertTrue ( STRING , java.lang.Object instanceof java.util.List<?> < ? > ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( STRING , NUMBER , java.util.List<> . int ( ) ) ; assertTrue ( STRING , java.util.List<> . get ( NUMBER ) instanceof java.util.Map<?,?> < ? , ? > ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) java.util.List<> . get ( NUMBER ) ; assertEquals ( STRING , NUMBER , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcPollingChannelAdapter org.springframework.integration.jdbc.JdbcPollingChannelAdapter = new JdbcPollingChannelAdapter ( this . org.springframework.integration.jdbc.EmbeddedDatabase , STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setSelectSqlParameterSource ( new SqlParameterSource ( ) { @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return STRING . boolean ( java.lang.String ) ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { return NUMBER ; } @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return null ; } @ java.lang.Override public int int ( java.lang.String java.lang.String ) { return java.sql.Types . int ; } } ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; Message < java.lang.Object > org.springframework.integration.jdbc.Message<java.lang.Object> = org.springframework.integration.jdbc.JdbcPollingChannelAdapter . receive ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.Message<java.lang.Object> . getPayload ( ) ; assertTrue ( STRING , java.lang.Object instanceof java.util.List<?> < ? > ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( STRING , NUMBER , java.util.List<> . int ( ) ) ; assertTrue ( STRING , java.util.List<> . get ( NUMBER ) instanceof java.util.Map<?,?> < ? , ? > ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) java.util.List<> . get ( NUMBER ) ; assertEquals ( STRING , NUMBER , java.util.Map<,> . get ( STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return STRING . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.String java.lang.String ) { return java.sql.Types . int ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcPollingChannelAdapter org.springframework.integration.jdbc.JdbcPollingChannelAdapter = new JdbcPollingChannelAdapter ( this . org.springframework.integration.jdbc.EmbeddedDatabase , STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setRowMapper ( new org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.ItemRowMapper ( ) ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; Message < java.lang.Object > org.springframework.integration.jdbc.Message<java.lang.Object> = org.springframework.integration.jdbc.JdbcPollingChannelAdapter . receive ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.Message<java.lang.Object> . getPayload ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( STRING , NUMBER , java.util.List<> . int ( ) ) ; assertTrue ( STRING , java.util.List<> . get ( NUMBER ) instanceof org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item = ( org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) java.util.List<> . get ( NUMBER ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcPollingChannelAdapter org.springframework.integration.jdbc.JdbcPollingChannelAdapter = new JdbcPollingChannelAdapter ( this . org.springframework.integration.jdbc.EmbeddedDatabase , STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setUpdateSql ( STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setRowMapper ( new org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.ItemRowMapper ( ) ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . afterPropertiesSet ( ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; Message < java.lang.Object > org.springframework.integration.jdbc.Message<java.lang.Object> = org.springframework.integration.jdbc.JdbcPollingChannelAdapter . receive ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.Message<java.lang.Object> . getPayload ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( STRING , NUMBER , java.util.List<> . int ( ) ) ; assertTrue ( STRING , java.util.List<> . get ( NUMBER ) instanceof org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item = ( org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) java.util.List<> . get ( NUMBER ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . int ( ) ) ; int int = this . org.springframework.integration.jdbc.JdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , int ) ; int int = this . org.springframework.integration.jdbc.JdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcPollingChannelAdapter org.springframework.integration.jdbc.JdbcPollingChannelAdapter = new JdbcPollingChannelAdapter ( this . org.springframework.integration.jdbc.EmbeddedDatabase , STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setUpdateSql ( STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setUpdatePerRow ( true ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setRowMapper ( new org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.ItemRowMapper ( ) ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . afterPropertiesSet ( ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; Message < java.lang.Object > org.springframework.integration.jdbc.Message<java.lang.Object> = org.springframework.integration.jdbc.JdbcPollingChannelAdapter . receive ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.Message<java.lang.Object> . getPayload ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( STRING , NUMBER , java.util.List<> . int ( ) ) ; assertTrue ( STRING , java.util.List<> . get ( NUMBER ) instanceof org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item = ( org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) java.util.List<> . get ( NUMBER ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . int ( ) ) ; int int = this . org.springframework.integration.jdbc.JdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , int ) ; int int = this . org.springframework.integration.jdbc.JdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcPollingChannelAdapter org.springframework.integration.jdbc.JdbcPollingChannelAdapter = new JdbcPollingChannelAdapter ( this . org.springframework.integration.jdbc.EmbeddedDatabase , STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setUpdateSql ( STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setUpdatePerRow ( true ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setMaxRowsPerPoll ( NUMBER ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setRowMapper ( new org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.ItemRowMapper ( ) ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . afterPropertiesSet ( ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; org.springframework.integration.jdbc.Log . debug ( org.springframework.integration.jdbc.JdbcPollingChannelAdapter . receive ( ) ) ; Message < java.lang.Object > org.springframework.integration.jdbc.Message<java.lang.Object> = org.springframework.integration.jdbc.JdbcPollingChannelAdapter . receive ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.Message<java.lang.Object> . getPayload ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( STRING , NUMBER , java.util.List<> . int ( ) ) ; assertTrue ( STRING , java.util.List<> . get ( NUMBER ) instanceof org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item = ( org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) java.util.List<> . get ( NUMBER ) ; org.springframework.integration.jdbc.Log . debug ( org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . int ( ) ) ; int int = this . org.springframework.integration.jdbc.JdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , int ) ; int int = this . org.springframework.integration.jdbc.JdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcPollingChannelAdapter org.springframework.integration.jdbc.JdbcPollingChannelAdapter = new JdbcPollingChannelAdapter ( this . org.springframework.integration.jdbc.EmbeddedDatabase , STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setUpdateSql ( STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setUpdatePerRow ( true ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setMaxRowsPerPoll ( NUMBER ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setRowMapper ( new org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.ItemRowMapper ( ) ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . afterPropertiesSet ( ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; this . org.springframework.integration.jdbc.JdbcTemplate . update ( STRING ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapter . receive ( ) ; Message < java.lang.Object > org.springframework.integration.jdbc.Message<java.lang.Object> = org.springframework.integration.jdbc.JdbcPollingChannelAdapter . receive ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.Message<java.lang.Object> . getPayload ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( STRING , NUMBER , java.util.List<> . int ( ) ) ; assertTrue ( STRING , java.util.List<> . get ( NUMBER ) instanceof org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item = ( org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ) java.util.List<> . get ( NUMBER ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . int ( ) ) ; int int = this . org.springframework.integration.jdbc.JdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , int ) ; int int = this . org.springframework.integration.jdbc.JdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcPollingChannelAdapter org.springframework.integration.jdbc.JdbcPollingChannelAdapter = new JdbcPollingChannelAdapter ( this . org.springframework.integration.jdbc.EmbeddedDatabase , STRING ) ; Message < java.lang.Object > org.springframework.integration.jdbc.Message<java.lang.Object> = org.springframework.integration.jdbc.JdbcPollingChannelAdapter . receive ( ) ; assertNull ( STRING , org.springframework.integration.jdbc.Message<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + int + STRING + int + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item = new org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ( ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . void ( java.sql.ResultSet . int ( NUMBER ) ) ; org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item . void ( java.sql.ResultSet . int ( NUMBER ) ) ; return org.springframework.integration.jdbc.JdbcPollingChannelAdapterIntegrationTests.Item ; }  <METHOD_END>
