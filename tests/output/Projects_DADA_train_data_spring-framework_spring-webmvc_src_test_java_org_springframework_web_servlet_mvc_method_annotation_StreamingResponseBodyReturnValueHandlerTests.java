<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler = new StreamingResponseBodyReturnValueHandler ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; AsyncWebRequest org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest = new StandardServletAsyncWebRequest ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . setAsyncWebRequest ( org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAsyncSupported ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests.TestController .class , STRING ) ) ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests.TestController .class , STRING ) ) ) ; assertFalse ( this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests.TestController .class , STRING ) ) ) ; assertFalse ( this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests.TestController .class , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests.TestController .class , STRING ) ; StreamingResponseBody org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody = outputStream -> { outputStream . write ( STRING . getBytes ( StandardCharsets . UTF_8 ) ) ; latch . countDown ( ) ; } ; this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . isAsyncStarted ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests.TestController .class , STRING ) ; ResponseEntity < StreamingResponseBody > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody> = ResponseEntity . ok ( ) . header ( STRING , STRING ) . body ( outputStream -> { outputStream . write ( STRING . getBytes ( StandardCharsets . UTF_8 ) ) ; latch . countDown ( ) ; } ) ; this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . isAsyncStarted ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests.TestController .class , STRING ) ; ResponseEntity < ? > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<?> = ResponseEntity . noContent ( ) . build ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertFalse ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . isAsyncStarted ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < ? > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<?> = ResponseEntity . noContent ( ) . header ( STRING , STRING ) . build ( ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests.TestController .class , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeaders ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) throws java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.String ) ; return new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody ( ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody> < StreamingResponseBody > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody> ( ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.util.concurrent.atomic.AtomicReference<java.lang.String>> < java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.util.concurrent.atomic.AtomicReference<java.lang.String>> ( ) { return null ; }  <METHOD_END>
