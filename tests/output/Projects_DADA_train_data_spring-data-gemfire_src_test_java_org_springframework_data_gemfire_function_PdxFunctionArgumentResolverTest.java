<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.data.gemfire.function.Cache = new CacheFactory ( ) . setPdxSerializer ( new org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.PersonPdxSerializer ( ) ) . setPdxReadSerialized ( true ) . set ( STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest .class . java.lang.String ( ) ) . set ( STRING , STRING ) . set ( STRING , STRING ) . create ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.data.gemfire.function.Cache . close ( ) ; org.springframework.data.gemfire.function.Cache = null ; }  <METHOD_END>
<METHOD_START> protected java.lang.reflect.Method java.lang.reflect.Method ( final java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.String java.lang.String , final java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { try { return java.lang.Class<> . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.RuntimeException ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Object ( java.lang.String , java.lang.Class<?>[] ) , java.lang.Class<> . java.lang.Class<? extends java.lang.Class> ( ) . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( final java.lang.String java.lang.String , final java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; int int = NUMBER ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; for ( java.lang.Class java.lang.Class : java.lang.Class<?>[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( int ++ > NUMBER ? STRING : STRING ) . java.lang.StringBuilder ( java.lang.Class . java.lang.String ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final java.lang.Object [] java.lang.Object[] , final java.lang.Object [] java.lang.Object[] ) { assertNotNull ( java.lang.Object[] ) ; assertNotSame ( java.lang.Object[] , java.lang.Object[] ) ; assertEquals ( java.lang.Object[] . int , java.lang.Object[] . int ) ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { assertEquals ( java.lang.Object[] [ int ] , java.lang.Object[] [ int ] ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ) { return new org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ( java.lang.String , java.lang.String , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.function.PdxInstance org.springframework.data.gemfire.function.PdxInstance ( final org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ) { PdxInstanceFactory org.springframework.data.gemfire.function.PdxInstanceFactory = org.springframework.data.gemfire.function.Cache . createPdxInstanceFactory ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person . java.lang.Class<? extends org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person> ( ) . java.lang.String ( ) ) ; org.springframework.data.gemfire.function.PdxInstanceFactory . writeString ( STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person . java.lang.String ( ) ) ; org.springframework.data.gemfire.function.PdxInstanceFactory . writeString ( STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person . java.lang.String ( ) ) ; org.springframework.data.gemfire.function.PdxInstanceFactory . writeObject ( STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ( ) ) ; return org.springframework.data.gemfire.function.PdxInstanceFactory . create ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.function.PdxInstance org.springframework.data.gemfire.function.PdxInstance ( final java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { PdxInstanceFactory org.springframework.data.gemfire.function.PdxInstanceFactory = org.springframework.data.gemfire.function.Cache . createPdxInstanceFactory ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) . java.lang.String ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { if ( ! STRING . boolean ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ) { org.springframework.data.gemfire.function.PdxInstanceFactory . writeObject ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } return org.springframework.data.gemfire.function.PdxInstanceFactory . create ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.function.PdxInstance org.springframework.data.gemfire.function.PdxInstance ( final java.lang.Enum java.lang.Enum ) { return PdxInstanceFactoryImpl . createPdxEnum ( java.lang.Enum . java.lang.Class<? extends java.lang.Enum> ( ) . java.lang.String ( ) , java.lang.Enum . java.lang.String ( ) , java.lang.Enum . int ( ) , ( GemFireCacheImpl ) org.springframework.data.gemfire.function.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.function.PdxFunctionArgumentResolver = new PdxFunctionArgumentResolver ( ) { @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.FunctionExecutions .class , STRING , java.lang.Boolean .class , java.lang.Character .class , java.lang.Integer .class , java.lang.Double .class , java.lang.String .class ) ; } } ; java.lang.Object [] java.lang.Object[] = { java.lang.Boolean . java.lang.Boolean , 'C' , NUMBER , java.lang.Math . double , STRING } ; FunctionContext org.springframework.data.gemfire.function.FunctionContext = mock ( FunctionContext .class , STRING ) ; when ( org.springframework.data.gemfire.function.FunctionContext . getArguments ( ) ) . thenReturn ( java.lang.Object[] ) ; java.lang.Object [] java.lang.Object[] = org.springframework.data.gemfire.function.PdxFunctionArgumentResolver . resolveFunctionArguments ( org.springframework.data.gemfire.function.FunctionContext ) ; void ( java.lang.Object[] , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.FunctionExecutions .class , STRING , java.lang.Boolean .class , java.lang.Character .class , java.lang.Integer .class , java.lang.Double .class , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.function.PdxFunctionArgumentResolver = new PdxFunctionArgumentResolver ( ) { @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.FunctionExecutions .class , STRING , java.lang.Boolean .class , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person .class , java.lang.Character .class , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person .class , java.lang.Integer .class , java.lang.Double .class , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender .class , java.lang.String .class ) ; } } ; java.lang.Object [] java.lang.Object[] = { java.lang.Boolean . java.lang.Boolean , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ( STRING , STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ) , 'C' , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ( STRING , STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ) , NUMBER , java.lang.Math . double , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender , STRING } ; FunctionContext org.springframework.data.gemfire.function.FunctionContext = mock ( FunctionContext .class , STRING ) ; when ( org.springframework.data.gemfire.function.FunctionContext . getArguments ( ) ) . thenReturn ( java.lang.Object[] ) ; java.lang.Object [] java.lang.Object[] = org.springframework.data.gemfire.function.PdxFunctionArgumentResolver . resolveFunctionArguments ( org.springframework.data.gemfire.function.FunctionContext ) ; void ( java.lang.Object[] , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.FunctionExecutions .class , STRING , java.lang.Boolean .class , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person .class , java.lang.Character .class , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person .class , java.lang.Integer .class , java.lang.Double .class , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender .class , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.function.PdxFunctionArgumentResolver = new PdxFunctionArgumentResolver ( ) { @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.FunctionExecutions .class , STRING , java.lang.Boolean .class , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person .class , java.lang.String .class , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender .class ) ; } } ; org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person = org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ( STRING , STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ) ; java.lang.Object [] java.lang.Object[] = { java.lang.Boolean . java.lang.Boolean , org.springframework.data.gemfire.function.PdxInstance ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ) , STRING , org.springframework.data.gemfire.function.PdxInstance ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ) } ; java.lang.Object [] java.lang.Object[] = { java.lang.Boolean . java.lang.Boolean , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person , STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender } ; FunctionContext org.springframework.data.gemfire.function.FunctionContext = mock ( FunctionContext .class , STRING ) ; when ( org.springframework.data.gemfire.function.FunctionContext . getArguments ( ) ) . thenReturn ( java.lang.Object[] ) ; java.lang.Object [] java.lang.Object[] = org.springframework.data.gemfire.function.PdxFunctionArgumentResolver . resolveFunctionArguments ( org.springframework.data.gemfire.function.FunctionContext ) ; void ( java.lang.Object[] , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.FunctionExecutions .class , STRING , java.lang.Boolean .class , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person .class , java.lang.String .class , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.function.PdxFunctionArgumentResolver = new PdxFunctionArgumentResolver ( ) { @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.FunctionExecutions .class , STRING , java.lang.Boolean .class , java.lang.Object .class , java.lang.String .class , PdxInstanceEnum .class ) ; } } ; org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person = org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ( STRING , STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ) ; java.lang.Object [] java.lang.Object[] = { java.lang.Boolean . java.lang.Boolean , org.springframework.data.gemfire.function.PdxInstance ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ) , STRING , org.springframework.data.gemfire.function.PdxInstance ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ) } ; FunctionContext org.springframework.data.gemfire.function.FunctionContext = mock ( FunctionContext .class , STRING ) ; when ( org.springframework.data.gemfire.function.FunctionContext . getArguments ( ) ) . thenReturn ( java.lang.Object[] ) ; java.lang.Object [] java.lang.Object[] = org.springframework.data.gemfire.function.PdxFunctionArgumentResolver . resolveFunctionArguments ( org.springframework.data.gemfire.function.FunctionContext ) ; void ( java.lang.Object[] , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.FunctionExecutions .class , STRING , java.lang.Boolean .class , java.lang.Object .class , java.lang.String .class , PdxInstanceEnum .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.function.PdxFunctionArgumentResolver = new PdxFunctionArgumentResolver ( ) { @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.FunctionExecutions .class , STRING , java.lang.String .class , java.lang.Object .class ) ; } } ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.lang.Object [] java.lang.Object[] = { STRING , org.springframework.data.gemfire.function.PdxInstance ( java.util.Map<java.lang.String,java.lang.Object> ) } ; FunctionContext org.springframework.data.gemfire.function.FunctionContext = mock ( FunctionContext .class , STRING ) ; when ( org.springframework.data.gemfire.function.FunctionContext . getArguments ( ) ) . thenReturn ( java.lang.Object[] ) ; java.lang.Object [] java.lang.Object[] = org.springframework.data.gemfire.function.PdxFunctionArgumentResolver . resolveFunctionArguments ( org.springframework.data.gemfire.function.FunctionContext ) ; void ( java.lang.Object[] , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.FunctionExecutions .class , STRING , java.lang.String .class , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.Boolean java.lang.Boolean , java.lang.Character java.lang.Character , java.lang.Integer java.lang.Integer , java.lang.Double java.lang.Double , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.Boolean java.lang.Boolean , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person , java.lang.Character java.lang.Character , java.lang.Integer java.lang.Integer , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person , java.lang.Double java.lang.Double , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.Boolean java.lang.Boolean , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person , java.lang.String java.lang.String , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender );  <METHOD_END>
<METHOD_START> void void ( java.lang.Boolean java.lang.Boolean , java.lang.Object java.lang.Object , java.lang.String java.lang.String , PdxInstanceEnum org.springframework.data.gemfire.function.PdxInstanceEnum );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> public void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender = org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ( ) { return org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ) ) { return false ; } org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person = ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( this . java.lang.String ( ) , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person . java.lang.String ( ) ) && ObjectUtils . nullSafeEquals ( this . java.lang.String ( ) , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person . java.lang.String ( ) ) && ObjectUtils . nullSafeEquals ( this . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ( ) , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; int = NUMBER * int + ObjectUtils . nullSafeHashCode ( java.lang.String ( ) ) ; int = NUMBER * int + ObjectUtils . nullSafeHashCode ( java.lang.String ( ) ) ; int = NUMBER * int + ObjectUtils . nullSafeHashCode ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.String ( ) , java.lang.String ( ) , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final java.lang.Object java.lang.Object , final PdxWriter org.springframework.data.gemfire.function.PdxWriter ) { if ( java.lang.Object instanceof org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ) { org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person = ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ) java.lang.Object ; org.springframework.data.gemfire.function.PdxWriter . writeString ( STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person . java.lang.String ( ) ) ; org.springframework.data.gemfire.function.PdxWriter . writeString ( STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person . java.lang.String ( ) ) ; org.springframework.data.gemfire.function.PdxWriter . writeObject ( STRING , org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person . org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ( ) ) ; return true ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final java.lang.Class<?> < ? > java.lang.Class<?> , final PdxReader org.springframework.data.gemfire.function.PdxReader ) { if ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person .class . boolean ( java.lang.Class<> ) ) { return new org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Person ( org.springframework.data.gemfire.function.PdxReader . readString ( STRING ) , org.springframework.data.gemfire.function.PdxReader . readString ( STRING ) , ( org.springframework.data.gemfire.function.PdxFunctionArgumentResolverTest.Gender ) org.springframework.data.gemfire.function.PdxReader . readObject ( STRING ) ) ; } return null ; }  <METHOD_END>
