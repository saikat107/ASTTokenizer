<METHOD_START> public void ( java.net.URI java.net.URI ) { this( new ValueExpression < java.net.URI > ( java.net.URI ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , null ); }  <METHOD_END>
<METHOD_START> public void ( Expression org.springframework.integration.http.outbound.Expression ) { this( org.springframework.integration.http.outbound.Expression , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , RestTemplate org.springframework.integration.http.outbound.RestTemplate ) { this( new LiteralExpression ( java.lang.String ) , org.springframework.integration.http.outbound.RestTemplate ); Assert . hasText ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( Expression org.springframework.integration.http.outbound.Expression , RestTemplate org.springframework.integration.http.outbound.RestTemplate ) { super( org.springframework.integration.http.outbound.Expression ); this . org.springframework.integration.http.outbound.RestTemplate = ( org.springframework.integration.http.outbound.RestTemplate == null ? new RestTemplate ( ) : org.springframework.integration.http.outbound.RestTemplate ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . isExpectReply ( ) ? STRING : STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ResponseErrorHandler org.springframework.integration.http.outbound.ResponseErrorHandler ) { this . org.springframework.integration.http.outbound.RestTemplate . setErrorHandler ( org.springframework.integration.http.outbound.ResponseErrorHandler ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> ) { this . org.springframework.integration.http.outbound.RestTemplate . setMessageConverters ( java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ClientHttpRequestFactory org.springframework.integration.http.outbound.ClientHttpRequestFactory ) { this . org.springframework.integration.http.outbound.RestTemplate . setRequestFactory ( org.springframework.integration.http.outbound.ClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.util.function.Supplier<java.net.URI> < java.net.URI > java.util.function.Supplier<java.net.URI> , HttpMethod org.springframework.integration.http.outbound.HttpMethod , HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.http.outbound.Message<?> ) { java.net.URI java.net.URI = java.util.function.Supplier<java.net.URI> . java.net.URI ( ) ; ResponseEntity < ? > org.springframework.integration.http.outbound.ResponseEntity<?> ; try { if ( java.lang.Object instanceof ParameterizedTypeReference < ? > ) { org.springframework.integration.http.outbound.ResponseEntity<?> = this . org.springframework.integration.http.outbound.RestTemplate . exchange ( java.net.URI , org.springframework.integration.http.outbound.HttpMethod , org.springframework.integration.http.outbound.HttpEntity<> , ( ParameterizedTypeReference < ? > ) java.lang.Object ) ; } else { org.springframework.integration.http.outbound.ResponseEntity<?> = this . org.springframework.integration.http.outbound.RestTemplate . exchange ( java.net.URI , org.springframework.integration.http.outbound.HttpMethod , org.springframework.integration.http.outbound.HttpEntity<> , ( java.lang.Class<?> < ? > ) java.lang.Object ) ; } return getReply ( org.springframework.integration.http.outbound.ResponseEntity<> ) ; } catch ( RestClientException org.springframework.integration.http.outbound.RestClientException ) { throw new MessageHandlingException ( org.springframework.integration.http.outbound.Message<> , STRING + java.net.URI + STRING , org.springframework.integration.http.outbound.RestClientException ) ; } }  <METHOD_END>
