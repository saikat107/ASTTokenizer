<METHOD_START> @ Test public void void ( ) { JmsTemplate org.springframework.integration.jms.JmsTemplate = new JmsTemplate ( connectionFactory ) ; org.springframework.integration.jms.JmsTemplate . convertAndSend ( STRING , STRING ) ; org.springframework.integration.jms.JmsTemplate . setReceiveTimeout ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.JmsTemplate . receive ( STRING ) ) ; this . org.springframework.integration.jms.JmsOutboundChannelAdapterTests.Aborter . boolean = true ; org.springframework.integration.jms.JmsTemplate . convertAndSend ( STRING , STRING ) ; org.springframework.integration.jms.JmsTemplate . setReceiveTimeout ( NUMBER ) ; assertNull ( org.springframework.integration.jms.JmsTemplate . receive ( STRING ) ) ; org.springframework.integration.jms.JmsMessageDrivenEndpoint . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.ConnectionFactory org.springframework.integration.jms.ConnectionFactory ( ) { return connectionFactory ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( boolean ) { throw new java.lang.RuntimeException ( STRING ) ; } }  <METHOD_END>
