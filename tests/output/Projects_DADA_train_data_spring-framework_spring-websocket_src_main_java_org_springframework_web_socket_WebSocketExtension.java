<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { Assert . hasLength ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; if ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.String> ) ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new LinkedCaseInsensitiveMap <> ( java.util.Map<java.lang.String,java.lang.String> . int ( ) , java.util.Locale . java.util.Locale ) ; java.util.Map<java.lang.String,java.lang.String> . void ( java.util.Map<java.lang.String,java.lang.String> ) ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( java.util.Map<java.lang.String,java.lang.String> ) ; } else { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return this . java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.web.socket.WebSocketExtension> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.web.socket.WebSocketExtension org.springframework.web.socket.WebSocketExtension = ( org.springframework.web.socket.WebSocketExtension ) java.lang.Object ; return ( this . java.lang.String . boolean ( org.springframework.web.socket.WebSocketExtension . java.lang.String ) && this . java.util.Map<java.lang.String,java.lang.String> . boolean ( org.springframework.web.socket.WebSocketExtension . java.util.Map<java.lang.String,java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String . int ( ) * NUMBER + this . java.util.Map<java.lang.String,java.lang.String> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.String ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : this . java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( ';' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '=' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.web.socket.WebSocketExtension> < org.springframework.web.socket.WebSocketExtension > java.util.List<org.springframework.web.socket.WebSocketExtension> ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; java.util.List<org.springframework.web.socket.WebSocketExtension> < org.springframework.web.socket.WebSocketExtension > java.util.List<org.springframework.web.socket.WebSocketExtension> = new java.util.ArrayList<org.springframework.web.socket.WebSocketExtension> < org.springframework.web.socket.WebSocketExtension > ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.web.socket.WebSocketExtension> . boolean ( org.springframework.web.socket.WebSocketExtension ( java.lang.String ) ) ; } return java.util.List<org.springframework.web.socket.WebSocketExtension> ; } else { return java.util.Collections . java.util.List<org.springframework.web.socket.WebSocketExtension> ( ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.web.socket.WebSocketExtension org.springframework.web.socket.WebSocketExtension ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] . java.lang.String ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = null ; if ( java.lang.String[] . int > NUMBER ) { java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( java.lang.String[] . int - NUMBER ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String java.lang.String = java.lang.String[] [ int ] ; int int = java.lang.String . int ( '=' ) ; if ( int != - NUMBER ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } } } return new org.springframework.web.socket.WebSocketExtension ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
