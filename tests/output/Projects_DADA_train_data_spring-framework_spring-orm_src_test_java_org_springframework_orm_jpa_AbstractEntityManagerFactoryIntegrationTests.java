<METHOD_START> @ Autowired public void void ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { this . org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ; this . org.springframework.orm.jpa.EntityManager = SharedEntityManagerCreator . createSharedEntityManager ( this . org.springframework.orm.jpa.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( PlatformTransactionManager org.springframework.orm.jpa.PlatformTransactionManager ) { this . org.springframework.orm.jpa.PlatformTransactionManager = org.springframework.orm.jpa.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( javax.sql.DataSource javax.sql.DataSource ) { this . org.springframework.orm.jpa.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { if ( org.springframework.orm.jpa.ConfigurableApplicationContext == null ) { org.springframework.orm.jpa.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String[] ( ) ) ; } org.springframework.orm.jpa.ConfigurableApplicationContext . getAutowireCapableBeanFactory ( ) . autowireBean ( this ) ; if ( this . org.springframework.orm.jpa.PlatformTransactionManager != null && this . org.springframework.orm.jpa.TransactionDefinition != null ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { if ( this . org.springframework.orm.jpa.TransactionStatus != null && ! this . org.springframework.orm.jpa.TransactionStatus . isCompleted ( ) ) { void ( ) ; } assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { if ( org.springframework.orm.jpa.ConfigurableApplicationContext != null ) { org.springframework.orm.jpa.ConfigurableApplicationContext . close ( ) ; org.springframework.orm.jpa.ConfigurableApplicationContext = null ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( ) { return ExtendedEntityManagerCreator . createContainerManagedEntityManager ( this . org.springframework.orm.jpa.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . org.springframework.orm.jpa.PlatformTransactionManager == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { final boolean boolean = this . boolean ; if ( this . org.springframework.orm.jpa.TransactionStatus != null ) { try { if ( boolean ) { this . org.springframework.orm.jpa.PlatformTransactionManager . commit ( this . org.springframework.orm.jpa.TransactionStatus ) ; } else { this . org.springframework.orm.jpa.PlatformTransactionManager . rollback ( this . org.springframework.orm.jpa.TransactionStatus ) ; } } finally { this . org.springframework.orm.jpa.TransactionStatus = null ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ) org.springframework.orm.jpa.TransactionException { this . org.springframework.orm.jpa.TransactionStatus = this . org.springframework.orm.jpa.PlatformTransactionManager . getTransaction ( this . org.springframework.orm.jpa.TransactionDefinition ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . org.springframework.orm.jpa.JdbcTemplate . update ( STRING + java.lang.String ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> protected int int ( EntityManager org.springframework.orm.jpa.EntityManager , java.lang.String java.lang.String ) { Query org.springframework.orm.jpa.Query = org.springframework.orm.jpa.EntityManager . createNativeQuery ( STRING + java.lang.String ) ; return ( ( java.lang.Number ) org.springframework.orm.jpa.Query . getSingleResult ( ) ) . int ( ) ; }  <METHOD_END>
<METHOD_START> protected int int ( java.lang.String java.lang.String ) { return this . org.springframework.orm.jpa.JdbcTemplate . queryForObject ( STRING + java.lang.String , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) throws org.springframework.orm.jpa.DataAccessException { Resource org.springframework.orm.jpa.Resource = org.springframework.orm.jpa.ConfigurableApplicationContext . getResource ( java.lang.String ) ; new ResourceDatabasePopulator ( org.springframework.orm.jpa.Resource ) . execute ( this . org.springframework.orm.jpa.JdbcTemplate . getDataSource ( ) ) ; }  <METHOD_END>
