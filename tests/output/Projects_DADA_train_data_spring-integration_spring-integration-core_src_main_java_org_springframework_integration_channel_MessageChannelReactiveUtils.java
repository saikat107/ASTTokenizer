<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > org.springframework.integration.channel.Publisher<org.springframework.integration.channel.Message<T>> < Message < T > > org.springframework.integration.channel.Publisher<org.springframework.integration.channel.Message<T>> ( MessageChannel org.springframework.integration.channel.MessageChannel ) { if ( org.springframework.integration.channel.MessageChannel instanceof Publisher ) { return ( Publisher < Message < T > > ) org.springframework.integration.channel.MessageChannel ; } else if ( org.springframework.integration.channel.MessageChannel instanceof SubscribableChannel ) { return org.springframework.integration.channel.Publisher<org.springframework.integration.channel.Message<T>> ( ( SubscribableChannel ) org.springframework.integration.channel.MessageChannel ) ; } else if ( org.springframework.integration.channel.MessageChannel instanceof PollableChannel ) { return org.springframework.integration.channel.Publisher<org.springframework.integration.channel.Message<T>> ( ( PollableChannel ) org.springframework.integration.channel.MessageChannel ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + STRING + org.springframework.integration.channel.MessageChannel ) ; } }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.integration.channel.Publisher<org.springframework.integration.channel.Message<T>> < Message < T > > org.springframework.integration.channel.Publisher<org.springframework.integration.channel.Message<T>> ( SubscribableChannel org.springframework.integration.channel.SubscribableChannel ) { return new org.springframework.integration.channel.MessageChannelReactiveUtils.SubscribableChannelPublisherAdapter <> ( org.springframework.integration.channel.SubscribableChannel ) ; }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.integration.channel.Publisher<org.springframework.integration.channel.Message<T>> < Message < T > > org.springframework.integration.channel.Publisher<org.springframework.integration.channel.Message<T>> ( PollableChannel org.springframework.integration.channel.PollableChannel ) { return new org.springframework.integration.channel.MessageChannelReactiveUtils.PollableChannelPublisherAdapter <> ( org.springframework.integration.channel.PollableChannel ) ; }  <METHOD_END>
<METHOD_START> void ( SubscribableChannel org.springframework.integration.channel.SubscribableChannel ) { this . org.springframework.integration.channel.SubscribableChannel = org.springframework.integration.channel.SubscribableChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( Subscriber < ? super Message < T > > org.springframework.integration.channel.Subscriber<? super org.springframework.integration.channel.Message<T>> ) { Flux .					< Message < ? > > create ( emitter -> { MessageHandler messageHandler = emitter :: next ; this . channel . subscribe ( messageHandler ) ; emitter . onCancel ( ( ) this . channel . unsubscribe ( messageHandler ) ) ; } , FluxSink . OverflowStrategy . IGNORE ) . subscribe ( ( Subscriber < ? super Message < ? > > ) org.springframework.integration.channel.Subscriber<> ) ; }  <METHOD_END>
<METHOD_START> void ( final PollableChannel org.springframework.integration.channel.PollableChannel ) { this . org.springframework.integration.channel.PollableChannel = org.springframework.integration.channel.PollableChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( Subscriber < ? super Message < T > > org.springframework.integration.channel.Subscriber<? super org.springframework.integration.channel.Message<T>> ) { java.util.Iterator<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.Iterator<org.springframework.integration.channel.Message<?>> = new java.util.Iterator<org.springframework.integration.channel.Message<?>> < Message < ? > > ( ) { private org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> = null ; @ java.lang.Override public org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> ( ) { Message < ? > org.springframework.integration.channel.Message<?> = this . org.springframework.integration.channel.Message<> ; this . org.springframework.integration.channel.Message<?> = null ; return org.springframework.integration.channel.Message<> ; } @ java.lang.Override public boolean boolean ( ) { if ( this . org.springframework.integration.channel.Message<> == null ) { this . org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.MessageChannelReactiveUtils.PollableChannelPublisherAdapter .this . org.springframework.integration.channel.PollableChannel . receive ( NUMBER ) ; } return this . org.springframework.integration.channel.Message<> != null ; } } ; Mono .< Message < ? > > delay ( java.time.Duration . java.time.Duration ( NUMBER ) ) . repeat ( ) . concatMap ( value -> Flux . fromIterable ( ( ) messageIterator ) ) . subscribe ( ( Subscriber < ? super Message < ? > > ) org.springframework.integration.channel.Subscriber<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> ( ) { Message < ? > org.springframework.integration.channel.Message<?> = this . org.springframework.integration.channel.Message<> ; this . org.springframework.integration.channel.Message<?> = null ; return org.springframework.integration.channel.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( this . org.springframework.integration.channel.Message<> == null ) { this . org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.MessageChannelReactiveUtils.PollableChannelPublisherAdapter .this . org.springframework.integration.channel.PollableChannel . receive ( NUMBER ) ; } return this . org.springframework.integration.channel.Message<> != null ; }  <METHOD_END>
