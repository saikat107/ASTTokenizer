<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.cache.Cache org.springframework.data.gemfire.cache.Cache ( Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.cache.Region<java.lang.Object,java.lang.Object> ) { return new GemfireCache ( org.springframework.data.gemfire.cache.Region<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.cache.Region<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.cache.Region<java.lang.Object,java.lang.Object> ( ) java.lang.Exception { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org . org.apache . org.apache . org.apache . org.apache org.apache.geode.cache.Cache = GemfireUtils . getCache ( ) ; org.apache.geode.cache.Cache = ( org.apache.geode.cache.Cache != null ? org.apache.geode.cache.Cache : new CacheFactory ( java.util.Properties ) . create ( ) ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.cache.Region<java.lang.Object,java.lang.Object> = org.apache.geode.cache.Cache . getRegion ( CACHE_NAME ) ; org.springframework.data.gemfire.cache.Region<java.lang.Object,java.lang.Object> = ( org.springframework.data.gemfire.cache.Region<java.lang.Object,java.lang.Object> != null ? org.springframework.data.gemfire.cache.Region<java.lang.Object,java.lang.Object> : org.apache.geode.cache.Cache . createRegionFactory ( ) . create ( CACHE_NAME ) ) ; return org.springframework.data.gemfire.cache.Region<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.cache.Cache = org.springframework.data.gemfire.cache.Cache ( ) ; org.springframework.data.gemfire.cache.Cache . put ( STRING , STRING ) ; assertThat ( org.springframework.data.gemfire.cache.Cache . get ( STRING , java.lang.String .class ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.cache.Cache = org.springframework.data.gemfire.cache.Cache ( ) ; org.springframework.data.gemfire.cache.Cache . put ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.cache.Cache . get ( STRING , ( java.lang.Class<?> < ? > ) null ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.cache.Cache = org.springframework.data.gemfire.cache.Cache ( ) ; org.springframework.data.gemfire.cache.Cache . put ( STRING , STRING ) ; org.springframework.data.gemfire.cache.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( java.lang.Integer .class . java.lang.String ( ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( java.lang.String . java.lang.String ( STRING , java.lang.Integer .class . java.lang.String ( ) ) ) ; org.springframework.data.gemfire.cache.Cache . get ( STRING , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GemfireCache org.springframework.data.gemfire.cache.GemfireCache = org.springframework.data.gemfire.cache.Cache ( ) ; org.springframework.data.gemfire.cache.GemfireCache . put ( STRING , STRING ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCache . get ( STRING , org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader . org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.Object> ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader . org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.Object> . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { GemfireCache org.springframework.data.gemfire.cache.GemfireCache = org.springframework.data.gemfire.cache.Cache ( ) ; org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> < java.lang.String > org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> = new org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> < java.lang.String > ( STRING ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCache . get ( STRING , org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> . boolean ( ) ) . isTrue ( ) ; assertThat ( ( ( Region < java.lang.Object , java.lang.String > ) org.springframework.data.gemfire.cache.GemfireCache . getNativeCache ( ) ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { GemfireCache org.springframework.data.gemfire.cache.GemfireCache = org.springframework.data.gemfire.cache.Cache ( ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCache . get ( STRING , org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader . org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.Object> ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader . org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.Object> . boolean ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCache . getNativeCache ( ) . containsKey ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { GemfireCache org.springframework.data.gemfire.cache.GemfireCache = org.springframework.data.gemfire.cache.Cache ( ) ; try { org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.Exception> < java.lang.Exception > org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.Exception> = new org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.Exception> < java.lang.Exception > ( new java.lang.IllegalStateException ( STRING ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expect ( Cache . Cache .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( is ( java.lang.IllegalStateException .class ) ) ; org.springframework.data.gemfire.cache.GemfireCache . get ( STRING , org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.Exception> ) ; } finally { assertThat ( org.springframework.data.gemfire.cache.GemfireCache . getNativeCache ( ) . containsKey ( STRING ) ) . isFalse ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestFramework . runOnce ( new org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.CacheGetWithValueLoaderIsThreadSafe ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. initialize ( ) ; org.springframework.data.gemfire.cache.GemfireCache = org.springframework.data.gemfire.cache.Cache ( ) ; org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> = new org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> < java.lang.String > ( STRING ) { @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { waitForTick ( NUMBER ) ; return super. java.lang.String ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { waitForTick ( NUMBER ) ; return super. java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> < T extends org.springframework.data.gemfire.cache.Cache > T T ( ) { try { return org.springframework.data.gemfire.cache.Cache ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { assertTick ( NUMBER ) ; java.lang.Thread . java.lang.Thread ( ) . void ( STRING ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.cache.GemfireCache . get ( STRING , org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> ) ; assertTick ( NUMBER ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { waitForTick ( NUMBER ) ; java.lang.Thread . java.lang.Thread ( ) . void ( STRING ) ; org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> < java.lang.String > org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> = new org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> < java.lang.String > ( STRING ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.cache.GemfireCache . get ( STRING , org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> ) ; assertTick ( NUMBER ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheIntegrationTests.TestValueLoader<java.lang.String> . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( T T ) { this . T = T ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return java.util.concurrent.atomic.AtomicBoolean . boolean ( true , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) java.lang.Exception { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; if ( T instanceof java.lang.Exception ) { throw ( java.lang.Exception ) T ; } return T ; }  <METHOD_END>
