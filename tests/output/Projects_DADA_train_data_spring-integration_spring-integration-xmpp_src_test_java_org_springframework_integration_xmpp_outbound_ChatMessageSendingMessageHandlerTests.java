<METHOD_START> @ Test public void void ( ) java.lang.Exception { XMPPConnection org.springframework.integration.xmpp.outbound.XMPPConnection = mock ( XMPPConnection .class ) ; ChatMessageSendingMessageHandler org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler = new ChatMessageSendingMessageHandler ( org.springframework.integration.xmpp.outbound.XMPPConnection ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.xmpp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( XmppHeaders . TO , STRING ) . build ( ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . handleMessage ( org.springframework.integration.xmpp.outbound.Message<> ) ; verify ( org.springframework.integration.xmpp.outbound.XMPPConnection , times ( NUMBER ) ) . sendStanza ( Mockito . argThat ( ( org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware smackMessage ) -> { boolean bodyMatches = smackMessage . getBody ( ) . equals ( STRING ) ; boolean toMatches = smackMessage . getTo ( ) . equals ( STRING ) ; return bodyMatches & toMatches ; } ) ) ; org.springframework.integration.xmpp.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( XmppHeaders . TO , STRING ) . setHeader ( XmppHeaders . THREAD , STRING ) . build ( ) ; reset ( org.springframework.integration.xmpp.outbound.XMPPConnection ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . handleMessage ( org.springframework.integration.xmpp.outbound.Message<> ) ; verify ( org.springframework.integration.xmpp.outbound.XMPPConnection , times ( NUMBER ) ) . sendStanza ( Mockito . argThat ( ( org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware smackMessage ) -> { boolean bodyMatches = smackMessage . getBody ( ) . equals ( STRING ) ; boolean toMatches = smackMessage . getTo ( ) . equals ( STRING ) ; boolean threadIdMatches = smackMessage . getThread ( ) . equals ( STRING ) ; return bodyMatches & toMatches & threadIdMatches ; } ) ) ; reset ( org.springframework.integration.xmpp.outbound.XMPPConnection ) ; final java.lang.String java.lang.String = STRING ; org.springframework.integration.xmpp.outbound.Message<?> = MessageBuilder . withPayload ( new GcmPacketExtension ( java.lang.String ) ) . setHeader ( XmppHeaders . TO , STRING ) . build ( ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . handleMessage ( org.springframework.integration.xmpp.outbound.Message<> ) ; verify ( org.springframework.integration.xmpp.outbound.XMPPConnection , times ( NUMBER ) ) . sendStanza ( Mockito . argThat ( ( org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware smackMessage ) -> { boolean bodyMatches = smackMessage . getBody ( ) == null ; boolean toMatches = smackMessage . getTo ( ) . equals ( STRING ) ; GcmPacketExtension gcmPacketExtension = GcmPacketExtension . from ( smackMessage ) ; boolean jsonMatches = gcmPacketExtension != null && gcmPacketExtension . getJson ( ) . equals ( json ) ; return bodyMatches & toMatches & jsonMatches ; } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XMPPConnection org.springframework.integration.xmpp.outbound.XMPPConnection = mock ( XMPPConnection .class ) ; ChatMessageSendingMessageHandler org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler = new ChatMessageSendingMessageHandler ( org.springframework.integration.xmpp.outbound.XMPPConnection ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . afterPropertiesSet ( ) ; org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware org.jivesoftware.smack.packet.Message = new org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware ( STRING ) ; org.jivesoftware.smack.packet.Message . setBody ( STRING ) ; Message < ? > org.springframework.integration.xmpp.outbound.Message<?> = MessageBuilder . withPayload ( org.jivesoftware.smack.packet.Message ) . build ( ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . handleMessage ( org.springframework.integration.xmpp.outbound.Message<> ) ; verify ( org.springframework.integration.xmpp.outbound.XMPPConnection , times ( NUMBER ) ) . sendStanza ( org.jivesoftware.smack.packet.Message ) ; org.jivesoftware.smack.packet.Message = new org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware ( STRING ) ; org.jivesoftware.smack.packet.Message . setBody ( STRING ) ; org.jivesoftware.smack.packet.Message . setThread ( STRING ) ; org.springframework.integration.xmpp.outbound.Message<?> = MessageBuilder . withPayload ( org.jivesoftware.smack.packet.Message ) . build ( ) ; reset ( org.springframework.integration.xmpp.outbound.XMPPConnection ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . handleMessage ( org.springframework.integration.xmpp.outbound.Message<> ) ; verify ( org.springframework.integration.xmpp.outbound.XMPPConnection , times ( NUMBER ) ) . sendStanza ( org.jivesoftware.smack.packet.Message ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XMPPConnection org.springframework.integration.xmpp.outbound.XMPPConnection = mock ( XMPPConnection .class ) ; ChatMessageSendingMessageHandler org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler = new ChatMessageSendingMessageHandler ( org.springframework.integration.xmpp.outbound.XMPPConnection ) ; GcmExtensionProvider org.springframework.integration.xmpp.outbound.GcmExtensionProvider = spy ( new GcmExtensionProvider ( ) ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . setExtensionProvider ( org.springframework.integration.xmpp.outbound.GcmExtensionProvider ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . afterPropertiesSet ( ) ; final java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.xmpp.outbound.Message<?> = MessageBuilder . withPayload ( STRING + java.lang.String + STRING ) . setHeader ( XmppHeaders . TO , STRING ) . build ( ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . handleMessage ( org.springframework.integration.xmpp.outbound.Message<> ) ; ArgumentCaptor < org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware > org.springframework.integration.xmpp.outbound.ArgumentCaptor<org.jivesoftware.smack.packet.Message> = ArgumentCaptor . forClass ( org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware .class ) ; verify ( org.springframework.integration.xmpp.outbound.XMPPConnection ) . sendStanza ( org.springframework.integration.xmpp.outbound.ArgumentCaptor<org.jivesoftware.smack.packet.Message> . capture ( ) ) ; org . org.jivesoftware . org.jivesoftware . org.jivesoftware . org.jivesoftware org.jivesoftware.smack.packet.Message = org.springframework.integration.xmpp.outbound.ArgumentCaptor<org.jivesoftware.smack.packet.Message> . getValue ( ) ; assertNull ( org.jivesoftware.smack.packet.Message . getBody ( ) ) ; assertEquals ( STRING , org.jivesoftware.smack.packet.Message . getTo ( ) ) ; GcmPacketExtension org.springframework.integration.xmpp.outbound.GcmPacketExtension = GcmPacketExtension . from ( org.jivesoftware.smack.packet.Message ) ; assertNotNull ( org.springframework.integration.xmpp.outbound.GcmPacketExtension ) ; assertEquals ( java.lang.String , org.springframework.integration.xmpp.outbound.GcmPacketExtension . getJson ( ) ) ; verify ( org.springframework.integration.xmpp.outbound.GcmExtensionProvider ) . from ( eq ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { ChatMessageSendingMessageHandler org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler = new ChatMessageSendingMessageHandler ( mock ( XMPPConnection .class ) ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { ChatMessageSendingMessageHandler org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler = new ChatMessageSendingMessageHandler ( mock ( XMPPConnection .class ) ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . handleMessage ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.integration.xmpp.outbound.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.xmpp.outbound.DefaultListableBeanFactory . registerSingleton ( XmppContextUtils . XMPP_CONNECTION_BEAN_NAME , mock ( XMPPConnection .class ) ) ; ChatMessageSendingMessageHandler org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler = new ChatMessageSendingMessageHandler ( ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . setBeanFactory ( org.springframework.integration.xmpp.outbound.DefaultListableBeanFactory ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . afterPropertiesSet ( ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ChatMessageSendingMessageHandler org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler = new ChatMessageSendingMessageHandler ( ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.outbound.ChatMessageSendingMessageHandler . afterPropertiesSet ( ) ; }  <METHOD_END>
