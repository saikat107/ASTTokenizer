<METHOD_START> @ Before public void void ( ) java.io.IOException { this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler = new org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitter = new SseEmitter ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitter . initialize ( this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.SseEmitter . send ( STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.SseEmitter . send ( STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , MediaType . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.SseEmitter . send ( event ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.SseEmitter . send ( event ( ) . data ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.SseEmitter . send ( event ( ) . data ( STRING ) . data ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.SseEmitter . send ( event ( ) . comment ( STRING ) . name ( STRING ) . reconnectTime ( NUMBER ) . id ( STRING ) . data ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.SseEmitter . send ( event ( ) . comment ( STRING ) . data ( STRING ) . data ( STRING ) . name ( STRING ) . reconnectTime ( NUMBER ) . id ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests.TestHandler . void ( NUMBER , STRING , SseEmitter . TEXT_PLAIN ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { assertEquals ( int , this . java.util.List<java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , java.lang.Object java.lang.Object ) { void ( int , java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , java.lang.Object java.lang.Object , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ) { assertTrue ( int <= this . java.util.List<java.lang.Object> . int ( ) ) ; assertEquals ( java.lang.Object , this . java.util.List<java.lang.Object> . java.lang.Object ( int ) ) ; assertEquals ( org.springframework.web.servlet.mvc.method.annotation.MediaType , this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> . get ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ) throws java.io.IOException { this . java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> . add ( org.springframework.web.servlet.mvc.method.annotation.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) {		}  <METHOD_END>
