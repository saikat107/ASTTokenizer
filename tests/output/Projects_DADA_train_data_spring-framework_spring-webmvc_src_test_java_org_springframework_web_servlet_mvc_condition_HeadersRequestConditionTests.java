<METHOD_START> @ Test public void void ( ) { assertEquals ( new HeadersRequestCondition ( STRING ) , new HeadersRequestCondition ( STRING ) ) ; assertEquals ( new HeadersRequestCondition ( STRING ) , new HeadersRequestCondition ( STRING ) ) ; assertFalse ( new HeadersRequestCondition ( STRING ) . equals ( new HeadersRequestCondition ( STRING ) ) ) ; assertEquals ( new HeadersRequestCondition ( STRING ) , new HeadersRequestCondition ( STRING ) ) ; assertEquals ( new HeadersRequestCondition ( STRING ) , new HeadersRequestCondition ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertNotNull ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertNull ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; assertNotNull ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertNotNull ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertNull ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertNull ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertNotNull ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertNull ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING , STRING , STRING ) ; HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING , STRING ) ; int int = org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . compareTo ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition , org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . compareTo ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition , org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertTrue ( STRING + int , int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . combine ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition ) ; java.util.Collection<org.springframework.web.servlet.mvc.condition.HeaderExpression> < HeaderExpression > java.util.Collection<org.springframework.web.servlet.mvc.condition.HeaderExpression> = org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getContent ( ) ; assertEquals ( NUMBER , java.util.Collection<org.springframework.web.servlet.mvc.condition.HeaderExpression> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; HeadersRequestCondition org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertEquals ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition , org.springframework.web.servlet.mvc.condition.HeadersRequestCondition ) ; org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; org.springframework.web.servlet.mvc.condition.HeadersRequestCondition = org.springframework.web.servlet.mvc.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.mvc.condition.HeadersRequestCondition ) ; }  <METHOD_END>
