<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return java.lang.String ; } else if ( java.lang.Object instanceof java.lang.String ) { return STRING + java.lang.Object + STRING ; } else if ( java.lang.Object instanceof java.lang.Class ) { return ClassUtils . getShortName ( ( java.lang.Class<?> < ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.reflect.Method ) { java.lang.reflect.Method java.lang.reflect.Method = ( java.lang.reflect.Method ) java.lang.Object ; return java.lang.reflect.Method . java.lang.String ( ) + STRING + ClassUtils . getShortName ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; } else if ( java.lang.Object instanceof java.util.Map ) { return java.lang.String ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Map . java.util.Map.Entry ) { return java.lang.String ( ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { return java.lang.String ( ( java.util.Collection<?> < ? > ) java.lang.Object ) ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { return java.lang.String ( ObjectUtils . toObjectArray ( java.lang.Object ) ) ; } else { return java.lang.String . java.lang.String ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private < K , V > java.lang.String java.lang.String ( java.util.Map<K,V> < K , V > java.util.Map<K,V> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.util.Map<K,V> . int ( ) * NUMBER + NUMBER ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String + STRING ) ; for ( java.util.Iterator<java.util.Map.Entry<K,V>> < java.util.Map . java.util.Map.Entry<K,V> < K , V > > java.util.Iterator<java.util.Map.Entry<K,V>> = java.util.Map<K,V> . java.util.Set<java.util.Map.Entry<K,V>> ( ) . java.util.Iterator<java.util.Map.Entry<K,V>> ( ) ; java.util.Iterator<java.util.Map.Entry<K,V>> . boolean ( ) ;) { java.util.Map . java.util.Map.Entry<K,V> < K , V > java.util.Map.Entry<K,V> = java.util.Iterator<java.util.Map.Entry<K,V>> . java.util.Map.Entry<K,V> ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.util.Map.Entry<K,V> ) ) ; if ( java.util.Iterator<java.util.Map.Entry<K,V>> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( ',' ) . java.lang.StringBuilder ( ' ' ) ; } } if ( java.util.Map<K,V> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> ) { return java.lang.String ( java.util.Map.Entry<,> . getKey ( ) ) + STRING + java.lang.String ( java.util.Map.Entry<,> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.Collection<?> < ? > java.util.Collection<?> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.util.Collection<> . int ( ) * NUMBER + NUMBER ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.util.Collection<> ) ) . java.lang.StringBuilder ( '[' ) ; for ( java.util.Iterator<?> < ? > java.util.Iterator<?> = java.util.Collection<> . java.util.Iterator<> ( ) ; java.util.Iterator<> . boolean ( ) ;) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.util.Iterator<> . next ( ) ) ) ; if ( java.util.Iterator<> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( ',' ) . java.lang.StringBuilder ( ' ' ) ; } } if ( java.util.Collection<> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.Collection<?> < ? > java.util.Collection<?> ) { if ( java.util.Collection<> instanceof java.util.List ) { return java.lang.String ; } else if ( java.util.Collection<> instanceof java.util.Set ) { return java.lang.String ; } else { return java.lang.String ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object [] java.lang.Object[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.Object[] . int * NUMBER + NUMBER ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String + STRING ) . java.lang.StringBuilder ( ClassUtils . getShortName ( java.lang.Object[] . java.lang.Class<? extends java.lang.Object[]> ( ) . java.lang.Class<?> ( ) ) ) . append ( STRING ) ; for ( int int = NUMBER ; int < java.lang.Object[] . int - NUMBER ; int ++ ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.Object[] [ int ] ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ',' ) . java.lang.StringBuilder ( ' ' ) ; } if ( java.lang.Object[] . int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.Object[] [ java.lang.Object[] . int - NUMBER ] ) ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
