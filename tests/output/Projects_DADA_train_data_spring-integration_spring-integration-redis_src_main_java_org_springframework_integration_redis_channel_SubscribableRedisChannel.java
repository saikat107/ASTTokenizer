<METHOD_START> public void ( RedisConnectionFactory org.springframework.integration.redis.channel.RedisConnectionFactory , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.integration.redis.channel.RedisConnectionFactory , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.redis.channel.RedisConnectionFactory = org.springframework.integration.redis.channel.RedisConnectionFactory ; this . org.springframework.integration.redis.channel.RedisTemplate = new StringRedisTemplate ( org.springframework.integration.redis.channel.RedisConnectionFactory ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { Assert . notNull ( java.util.concurrent.Executor , STRING ) ; this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageConverter org.springframework.integration.redis.channel.MessageConverter ) { Assert . notNull ( org.springframework.integration.redis.channel.MessageConverter , STRING ) ; this . org.springframework.integration.redis.channel.MessageConverter = org.springframework.integration.redis.channel.MessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( RedisSerializer < ? > org.springframework.integration.redis.channel.RedisSerializer<?> ) { Assert . notNull ( org.springframework.integration.redis.channel.RedisSerializer<> , STRING ) ; this . org.springframework.integration.redis.channel.RedisSerializer<?> = org.springframework.integration.redis.channel.RedisSerializer<> ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; this . org.springframework.integration.redis.channel.BroadcastingDispatcher . setMaxSubscribers ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageHandler org.springframework.integration.redis.channel.MessageHandler ) { return this . org.springframework.integration.redis.channel.BroadcastingDispatcher . addHandler ( org.springframework.integration.redis.channel.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageHandler org.springframework.integration.redis.channel.MessageHandler ) { return this . org.springframework.integration.redis.channel.BroadcastingDispatcher . removeHandler ( org.springframework.integration.redis.channel.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.redis.channel.Message<?> , long long ) { this . org.springframework.integration.redis.channel.RedisTemplate . convertAndSend ( this . java.lang.String , this . org.springframework.integration.redis.channel.MessageConverter . fromMessage ( org.springframework.integration.redis.channel.Message<> , java.lang.Object .class ) ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . boolean ) { return; } super. onInit ( ) ; if ( this . java.lang.Integer == null ) { java.lang.Integer java.lang.Integer = getIntegrationProperty ( IntegrationProperties . CHANNELS_MAX_BROADCAST_SUBSCRIBERS , java.lang.Integer .class ) ; this . void ( java.lang.Integer ) ; } if ( this . org.springframework.integration.redis.channel.MessageConverter == null ) { this . org.springframework.integration.redis.channel.MessageConverter = new SimpleMessageConverter ( ) ; } if ( this . org.springframework.integration.redis.channel.MessageConverter instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) this . org.springframework.integration.redis.channel.MessageConverter ) . setBeanFactory ( this . getBeanFactory ( ) ) ; } this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . setConnectionFactory ( this . org.springframework.integration.redis.channel.RedisConnectionFactory ) ; if ( ! ( this . java.util.concurrent.Executor instanceof ErrorHandlingTaskExecutor ) ) { ErrorHandler org.springframework.integration.redis.channel.ErrorHandler = new MessagePublishingErrorHandler ( new BeanFactoryChannelResolver ( this . getBeanFactory ( ) ) ) ; this . java.util.concurrent.Executor = new ErrorHandlingTaskExecutor ( this . java.util.concurrent.Executor , org.springframework.integration.redis.channel.ErrorHandler ) ; } this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . setTaskExecutor ( this . java.util.concurrent.Executor ) ; MessageListenerAdapter org.springframework.integration.redis.channel.MessageListenerAdapter = new MessageListenerAdapter ( new org.springframework.integration.redis.channel.SubscribableRedisChannel.MessageListenerDelegate ( ) ) ; org.springframework.integration.redis.channel.MessageListenerAdapter . setSerializer ( this . org.springframework.integration.redis.channel.RedisSerializer<> ) ; org.springframework.integration.redis.channel.MessageListenerAdapter . afterPropertiesSet ( ) ; this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . addMessageListener ( org.springframework.integration.redis.channel.MessageListenerAdapter , new ChannelTopic ( this . java.lang.String ) ) ; this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . afterPropertiesSet ( ) ; this . org.springframework.integration.redis.channel.BroadcastingDispatcher . setBeanFactory ( this . getBeanFactory ( ) ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.integration.redis.channel.RedisMessageListenerContainer != null ) && this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . isAutoStartup ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . org.springframework.integration.redis.channel.RedisMessageListenerContainer != null ) ? this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . getPhase ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.integration.redis.channel.RedisMessageListenerContainer != null ) && this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.redis.channel.RedisMessageListenerContainer != null ) { this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.redis.channel.RedisMessageListenerContainer != null ) { this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { if ( this . org.springframework.integration.redis.channel.RedisMessageListenerContainer != null ) { this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . stop ( java.lang.Runnable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . org.springframework.integration.redis.channel.RedisMessageListenerContainer != null ) { this . org.springframework.integration.redis.channel.RedisMessageListenerContainer . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) public void void ( java.lang.Object java.lang.Object ) { Message < ? > org.springframework.integration.redis.channel.Message<?> = org.springframework.integration.redis.channel.SubscribableRedisChannel .this . org.springframework.integration.redis.channel.MessageConverter . toMessage ( java.lang.Object , null ) ; try { org.springframework.integration.redis.channel.SubscribableRedisChannel .this . org.springframework.integration.redis.channel.BroadcastingDispatcher . dispatch ( org.springframework.integration.redis.channel.Message<> ) ; } catch ( MessageDispatchingException org.springframework.integration.redis.channel.MessageDispatchingException ) { java.lang.String java.lang.String = org.springframework.integration.redis.channel.SubscribableRedisChannel .this . java.lang.String ; java.lang.String = StringUtils . hasText ( java.lang.String ) ? java.lang.String : STRING ; throw new MessageDeliveryException ( org.springframework.integration.redis.channel.Message<> , org.springframework.integration.redis.channel.MessageDispatchingException . getMessage ( ) + STRING + java.lang.String + STRING + org.springframework.integration.redis.channel.SubscribableRedisChannel .this . getFullChannelName ( ) + STRING , org.springframework.integration.redis.channel.MessageDispatchingException ) ; } }  <METHOD_END>
