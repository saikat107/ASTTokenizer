<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . setInitialEntitySet ( java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.SampleClass>> ( org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.SampleClass .class ) ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . initialize ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MongoMappingContext . getPersistentEntity ( DBRef .class ) , is ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MongoMappingContext . getPersistentEntity ( java.util.AbstractMap .class ) , is ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . setApplicationContext ( org.springframework.data.mongodb.core.mapping.ApplicationContext ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . setFieldNamingStrategy ( new FieldNamingStrategy ( ) { public java.lang.String java.lang.String ( PersistentProperty < ? > org.springframework.data.mongodb.core.mapping.PersistentProperty<?> ) { return org.springframework.data.mongodb.core.mapping.PersistentProperty<> . getName ( ) . toUpperCase ( java.util.Locale . java.util.Locale ) ; } } ) ; MongoPersistentEntity < ? > org.springframework.data.mongodb.core.mapping.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.mapping.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.Person .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.MongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) . getFieldName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( PersistentProperty < ? > org.springframework.data.mongodb.core.mapping.PersistentProperty<?> ) { return org.springframework.data.mongodb.core.mapping.PersistentProperty<> . getName ( ) . toUpperCase ( java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.ExpectedException . expect ( MappingException .class ) ; org.springframework.data.mongodb.core.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.mapping.ExpectedException . expectMessage ( STRING ) ; MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . setApplicationContext ( org.springframework.data.mongodb.core.mapping.ApplicationContext ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.InvalidPerson .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . setApplicationContext ( org.springframework.data.mongodb.core.mapping.ApplicationContext ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.Child .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; BasicMongoPersistentEntity < ? > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<?> = org.springframework.data.mongodb.core.mapping.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.ClassWithImplicitId .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<> , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<> . isIdProperty ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; BasicMongoPersistentEntity < ? > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<?> = org.springframework.data.mongodb.core.mapping.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.ClassWithExplicitId .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<> , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<> . isIdProperty ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; BasicMongoPersistentEntity < ? > org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<?> = org.springframework.data.mongodb.core.mapping.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.ClassWithExplicitIdAndImplicitId .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity<> , is ( not ( nullValue ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MappingException .class ) public void void ( ) { MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.ClassWithMultipleExplicitIds .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MappingException .class ) public void void ( ) { MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.ClassWithMultipleImplicitIds .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.ExpectedException . expect ( MappingException .class ) ; org.springframework.data.mongodb.core.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.mapping.ExpectedException . expectMessage ( STRING ) ; MongoMappingContext org.springframework.data.mongodb.core.mapping.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.mapping.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.mapping.MongoMappingContextUnitTests.ClassWithInvalidTextScoreProperty .class ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return super. java.lang.String ( ) ; }  <METHOD_END>
