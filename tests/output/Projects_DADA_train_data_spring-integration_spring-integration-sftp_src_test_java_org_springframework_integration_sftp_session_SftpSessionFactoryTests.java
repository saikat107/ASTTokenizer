<METHOD_START> @ Test public void void ( ) java.lang.Exception { SshServer org.springframework.integration.sftp.session.SshServer = SshServer . setUpDefaultServer ( ) ; try { org.springframework.integration.sftp.session.SshServer . setPasswordAuthenticator ( ( arg0 , arg1 , arg2 ) -> true ) ; org.springframework.integration.sftp.session.SshServer . setPort ( NUMBER ) ; org.springframework.integration.sftp.session.SshServer . setKeyPairProvider ( new SimpleGeneratorHostKeyProvider ( new java.io.File ( STRING ) ) ) ; org.springframework.integration.sftp.session.SshServer . start ( ) ; DefaultSftpSessionFactory org.springframework.integration.sftp.session.DefaultSftpSessionFactory = new DefaultSftpSessionFactory ( ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setHost ( STRING ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setPort ( org.springframework.integration.sftp.session.SshServer . getPort ( ) ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setUser ( STRING ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setPassword ( STRING ) ; int int = NUMBER ; while ( true ) { try { org.springframework.integration.sftp.session.DefaultSftpSessionFactory . getSession ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof java.lang.IllegalStateException && STRING . boolean ( java.lang.Exception . java.lang.String ( ) ) ) { if ( java.lang.Exception . java.lang.Throwable ( ) instanceof java.lang.IllegalStateException ) { if ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) instanceof JSchException ) { if ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) . java.lang.Throwable ( ) instanceof java.net.ConnectException ) { assertTrue ( STRING , int ++ < NUMBER ) ; java.lang.Thread . void ( NUMBER ) ; continue; } } } } assertThat ( java.lang.Exception , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) , equalTo ( STRING ) ) ; break; } } int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.sftp.session.SshServer . getActiveSessions ( ) . size ( ) > NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertEquals ( NUMBER , org.springframework.integration.sftp.session.SshServer . getActiveSessions ( ) . size ( ) ) ; } finally { org.springframework.integration.sftp.session.SshServer . stop ( true ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultSftpSessionFactory org.springframework.integration.sftp.session.DefaultSftpSessionFactory = new DefaultSftpSessionFactory ( ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setUser ( STRING ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setAllowUnknownKeys ( true ) ; UserInfo org.springframework.integration.sftp.session.UserInfo = mock ( UserInfo .class ) ; when ( org.springframework.integration.sftp.session.UserInfo . getPassword ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.sftp.session.UserInfo . getPassphrase ( ) ) . thenReturn ( STRING ) . thenReturn ( null ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setUserInfo ( org.springframework.integration.sftp.session.UserInfo ) ; UserInfo org.springframework.integration.sftp.session.UserInfo = TestUtils . getPropertyValue ( org.springframework.integration.sftp.session.DefaultSftpSessionFactory , STRING , UserInfo .class ) ; assertEquals ( STRING , org.springframework.integration.sftp.session.UserInfo . getPassword ( ) ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setPassword ( STRING ) ; try { org.springframework.integration.sftp.session.UserInfo . getPassword ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , startsWith ( STRING ) ) ; } assertEquals ( STRING , org.springframework.integration.sftp.session.UserInfo . getPassphrase ( ) ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setPrivateKeyPassphrase ( STRING ) ; try { org.springframework.integration.sftp.session.UserInfo . getPassphrase ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , startsWith ( STRING ) ) ; } org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setUserInfo ( null ) ; assertEquals ( STRING , org.springframework.integration.sftp.session.UserInfo . getPassword ( ) ) ; assertEquals ( STRING , org.springframework.integration.sftp.session.UserInfo . getPassphrase ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SshServer org.springframework.integration.sftp.session.SshServer = SshServer . setUpDefaultServer ( ) ; try { DefaultSftpSessionFactory org.springframework.integration.sftp.session.DefaultSftpSessionFactory = org.springframework.integration.sftp.session.DefaultSftpSessionFactory ( org.springframework.integration.sftp.session.SshServer ) ; void ( org.springframework.integration.sftp.session.DefaultSftpSessionFactory ) ; } finally { org.springframework.integration.sftp.session.SshServer . stop ( true ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SshServer org.springframework.integration.sftp.session.SshServer = SshServer . setUpDefaultServer ( ) ; try { DefaultSftpSessionFactory org.springframework.integration.sftp.session.DefaultSftpSessionFactory = org.springframework.integration.sftp.session.DefaultSftpSessionFactory ( org.springframework.integration.sftp.session.SshServer ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setAllowUnknownKeys ( true ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . getSession ( ) . close ( ) ; } finally { org.springframework.integration.sftp.session.SshServer . stop ( true ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SshServer org.springframework.integration.sftp.session.SshServer = SshServer . setUpDefaultServer ( ) ; try { DefaultSftpSessionFactory org.springframework.integration.sftp.session.DefaultSftpSessionFactory = org.springframework.integration.sftp.session.DefaultSftpSessionFactory ( org.springframework.integration.sftp.session.SshServer ) ; UserInfo org.springframework.integration.sftp.session.UserInfo = mock ( UserInfo .class ) ; when ( org.springframework.integration.sftp.session.UserInfo . promptYesNo ( anyString ( ) ) ) . thenReturn ( false ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setUserInfo ( org.springframework.integration.sftp.session.UserInfo ) ; void ( org.springframework.integration.sftp.session.DefaultSftpSessionFactory ) ; } finally { org.springframework.integration.sftp.session.SshServer . stop ( true ) ; } }  <METHOD_END>
<METHOD_START> private void void ( DefaultSftpSessionFactory org.springframework.integration.sftp.session.DefaultSftpSessionFactory ) { try { org.springframework.integration.sftp.session.DefaultSftpSessionFactory . getSession ( ) . close ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) , instanceOf ( JSchException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) . java.lang.String ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SshServer org.springframework.integration.sftp.session.SshServer = SshServer . setUpDefaultServer ( ) ; try { DefaultSftpSessionFactory org.springframework.integration.sftp.session.DefaultSftpSessionFactory = org.springframework.integration.sftp.session.DefaultSftpSessionFactory ( org.springframework.integration.sftp.session.SshServer ) ; UserInfo org.springframework.integration.sftp.session.UserInfo = mock ( UserInfo .class ) ; when ( org.springframework.integration.sftp.session.UserInfo . promptYesNo ( anyString ( ) ) ) . thenReturn ( true ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setUserInfo ( org.springframework.integration.sftp.session.UserInfo ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . getSession ( ) . close ( ) ; } finally { org.springframework.integration.sftp.session.SshServer . stop ( true ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.sftp.session.DefaultSftpSessionFactory org.springframework.integration.sftp.session.DefaultSftpSessionFactory ( SshServer org.springframework.integration.sftp.session.SshServer ) throws java.io.IOException { org.springframework.integration.sftp.session.SshServer . setPublickeyAuthenticator ( ( username , key , session ) -> true ) ; org.springframework.integration.sftp.session.SshServer . setPort ( NUMBER ) ; org.springframework.integration.sftp.session.SshServer . setSubsystemFactories ( java.util.Collections .< NamedFactory < Command > > java.util.List<org.springframework.integration.sftp.session.NamedFactory<org.springframework.integration.sftp.session.Command>> ( new SftpSubsystemFactory ( ) ) ) ; org.springframework.integration.sftp.session.SshServer . setKeyPairProvider ( new SimpleGeneratorHostKeyProvider ( new java.io.File ( STRING ) ) ) ; org.springframework.integration.sftp.session.SshServer . start ( ) ; DefaultSftpSessionFactory org.springframework.integration.sftp.session.DefaultSftpSessionFactory = new DefaultSftpSessionFactory ( ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setHost ( STRING ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setPort ( org.springframework.integration.sftp.session.SshServer . getPort ( ) ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setUser ( STRING ) ; Resource org.springframework.integration.sftp.session.Resource = new ClassPathResource ( STRING ) ; org.springframework.integration.sftp.session.DefaultSftpSessionFactory . setPrivateKey ( org.springframework.integration.sftp.session.Resource ) ; return org.springframework.integration.sftp.session.DefaultSftpSessionFactory ; }  <METHOD_END>
