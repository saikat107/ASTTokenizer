<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyResolver org.springframework.boot.logging.PropertyResolver = org.springframework.boot.logging.PropertyResolver ( null , null ) ; LogFile org.springframework.boot.logging.LogFile = LogFile . get ( org.springframework.boot.logging.PropertyResolver ) ; assertThat ( org.springframework.boot.logging.LogFile ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyResolver org.springframework.boot.logging.PropertyResolver = org.springframework.boot.logging.PropertyResolver ( STRING , null ) ; LogFile org.springframework.boot.logging.LogFile = LogFile . get ( org.springframework.boot.logging.PropertyResolver ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; org.springframework.boot.logging.LogFile . applyTo ( java.util.Properties ) ; assertThat ( org.springframework.boot.logging.LogFile . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyResolver org.springframework.boot.logging.PropertyResolver = org.springframework.boot.logging.PropertyResolver ( null , STRING ) ; LogFile org.springframework.boot.logging.LogFile = LogFile . get ( org.springframework.boot.logging.PropertyResolver ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; org.springframework.boot.logging.LogFile . applyTo ( java.util.Properties ) ; assertThat ( org.springframework.boot.logging.LogFile . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyResolver org.springframework.boot.logging.PropertyResolver = org.springframework.boot.logging.PropertyResolver ( STRING , STRING ) ; LogFile org.springframework.boot.logging.LogFile = LogFile . get ( org.springframework.boot.logging.PropertyResolver ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; org.springframework.boot.logging.LogFile . applyTo ( java.util.Properties ) ; assertThat ( org.springframework.boot.logging.LogFile . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.logging.PropertyResolver org.springframework.boot.logging.PropertyResolver ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; PropertySource < ? > org.springframework.boot.logging.PropertySource<?> = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; MutablePropertySources org.springframework.boot.logging.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.logging.MutablePropertySources . addFirst ( org.springframework.boot.logging.PropertySource<> ) ; return new PropertySourcesPropertyResolver ( org.springframework.boot.logging.MutablePropertySources ) ; }  <METHOD_END>
