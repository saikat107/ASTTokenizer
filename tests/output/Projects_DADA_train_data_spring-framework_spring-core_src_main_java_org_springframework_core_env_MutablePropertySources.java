<METHOD_START> public void ( ) { this . org.springframework.core.env.Log = LogFactory . getLog ( java.lang.Class<? extends org.springframework.core.env.MutablePropertySources> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( PropertySources org.springframework.core.env.PropertySources ) { this(); for ( PropertySource < ? > org.springframework.core.env.PropertySource<?> : org.springframework.core.env.PropertySources ) { void ( org.springframework.core.env.PropertySource<> ) ; } }  <METHOD_END>
<METHOD_START> void ( Log org.springframework.core.env.Log ) { this . org.springframework.core.env.Log = org.springframework.core.env.Log ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return this . java.util.List<org.springframework.core.env.PropertySource<?>> . contains ( PropertySource . named ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.env.PropertySource<?> < ? > org.springframework.core.env.PropertySource<?> ( java.lang.String java.lang.String ) { int int = this . java.util.List<org.springframework.core.env.PropertySource<?>> . indexOf ( PropertySource . named ( java.lang.String ) ) ; return ( int != - NUMBER ? this . java.util.List<org.springframework.core.env.PropertySource<?>> . get ( int ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.core.env.PropertySource<?>> < PropertySource < ? > > java.util.Iterator<org.springframework.core.env.PropertySource<?>> ( ) { return this . java.util.List<org.springframework.core.env.PropertySource<?>> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( PropertySource < ? > org.springframework.core.env.PropertySource<?> ) { if ( org.springframework.core.env.Log . isDebugEnabled ( ) ) { org.springframework.core.env.Log . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.core.env.PropertySource<> . getName ( ) ) ) ; } void ( org.springframework.core.env.PropertySource<> ) ; this . java.util.List<org.springframework.core.env.PropertySource<?>> . add ( NUMBER , org.springframework.core.env.PropertySource<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( PropertySource < ? > org.springframework.core.env.PropertySource<?> ) { if ( org.springframework.core.env.Log . isDebugEnabled ( ) ) { org.springframework.core.env.Log . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.core.env.PropertySource<> . getName ( ) ) ) ; } void ( org.springframework.core.env.PropertySource<> ) ; this . java.util.List<org.springframework.core.env.PropertySource<?>> . add ( org.springframework.core.env.PropertySource<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , PropertySource < ? > org.springframework.core.env.PropertySource<?> ) { if ( org.springframework.core.env.Log . isDebugEnabled ( ) ) { org.springframework.core.env.Log . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.core.env.PropertySource<> . getName ( ) , java.lang.String ) ) ; } void ( java.lang.String , org.springframework.core.env.PropertySource<> ) ; void ( org.springframework.core.env.PropertySource<> ) ; int int = int ( java.lang.String ) ; void ( int , org.springframework.core.env.PropertySource<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , PropertySource < ? > org.springframework.core.env.PropertySource<?> ) { if ( org.springframework.core.env.Log . isDebugEnabled ( ) ) { org.springframework.core.env.Log . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.core.env.PropertySource<> . getName ( ) , java.lang.String ) ) ; } void ( java.lang.String , org.springframework.core.env.PropertySource<> ) ; void ( org.springframework.core.env.PropertySource<> ) ; int int = int ( java.lang.String ) ; void ( int + NUMBER , org.springframework.core.env.PropertySource<> ) ; }  <METHOD_END>
<METHOD_START> public int int ( PropertySource < ? > org.springframework.core.env.PropertySource<?> ) { return this . java.util.List<org.springframework.core.env.PropertySource<?>> . indexOf ( org.springframework.core.env.PropertySource<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.env.PropertySource<?> < ? > org.springframework.core.env.PropertySource<?> ( java.lang.String java.lang.String ) { if ( org.springframework.core.env.Log . isDebugEnabled ( ) ) { org.springframework.core.env.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } int int = this . java.util.List<org.springframework.core.env.PropertySource<?>> . indexOf ( PropertySource . named ( java.lang.String ) ) ; return ( int != - NUMBER ? this . java.util.List<org.springframework.core.env.PropertySource<?>> . remove ( int ) : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , PropertySource < ? > org.springframework.core.env.PropertySource<?> ) { if ( org.springframework.core.env.Log . isDebugEnabled ( ) ) { org.springframework.core.env.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.core.env.PropertySource<> . getName ( ) ) ) ; } int int = int ( java.lang.String ) ; this . java.util.List<org.springframework.core.env.PropertySource<?>> . set ( int , org.springframework.core.env.PropertySource<> ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.List<org.springframework.core.env.PropertySource<?>> . size ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [ this . int ( ) ] ; for ( int int = NUMBER ; int < int ( ) ; int ++ ) { java.lang.String[] [ int ] = this . java.util.List<org.springframework.core.env.PropertySource<?>> . get ( int ) . getName ( ) ; } return java.lang.String . java.lang.String ( STRING , StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , PropertySource < ? > org.springframework.core.env.PropertySource<?> ) { java.lang.String java.lang.String = org.springframework.core.env.PropertySource<> . getName ( ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( PropertySource < ? > org.springframework.core.env.PropertySource<?> ) { this . java.util.List<org.springframework.core.env.PropertySource<?>> . remove ( org.springframework.core.env.PropertySource<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , PropertySource < ? > org.springframework.core.env.PropertySource<?> ) { void ( org.springframework.core.env.PropertySource<> ) ; this . java.util.List<org.springframework.core.env.PropertySource<?>> . add ( int , org.springframework.core.env.PropertySource<> ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String ) { int int = this . java.util.List<org.springframework.core.env.PropertySource<?>> . indexOf ( PropertySource . named ( java.lang.String ) ) ; if ( int == - NUMBER ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } return int ; }  <METHOD_END>
