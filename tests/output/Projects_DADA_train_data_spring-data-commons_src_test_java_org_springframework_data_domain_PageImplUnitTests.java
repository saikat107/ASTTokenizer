<METHOD_START> @ Test public void void ( ) java.lang.Exception { PageImpl < java.lang.String > org.springframework.data.domain.PageImpl<java.lang.String> = new PageImpl <> ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; assertEqualsAndHashcode ( org.springframework.data.domain.PageImpl<java.lang.String> , org.springframework.data.domain.PageImpl<java.lang.String> ) ; assertEqualsAndHashcode ( org.springframework.data.domain.PageImpl<java.lang.String> , new PageImpl <> ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Pageable org.springframework.data.domain.Pageable = PageRequest . of ( NUMBER , NUMBER ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; PageImpl < java.lang.String > org.springframework.data.domain.PageImpl<java.lang.String> = new PageImpl <> ( java.util.List<java.lang.String> , org.springframework.data.domain.Pageable , NUMBER ) ; assertEqualsAndHashcode ( org.springframework.data.domain.PageImpl<java.lang.String> , org.springframework.data.domain.PageImpl<java.lang.String> ) ; assertEqualsAndHashcode ( org.springframework.data.domain.PageImpl<java.lang.String> , new PageImpl <> ( java.util.List<java.lang.String> , org.springframework.data.domain.Pageable , NUMBER ) ) ; assertNotEqualsAndHashcode ( org.springframework.data.domain.PageImpl<java.lang.String> , new PageImpl <> ( java.util.List<java.lang.String> , org.springframework.data.domain.Pageable , NUMBER ) ) ; assertNotEqualsAndHashcode ( org.springframework.data.domain.PageImpl<java.lang.String> , new PageImpl <> ( java.util.List<java.lang.String> , PageRequest . of ( NUMBER , NUMBER ) , NUMBER ) ) ; assertNotEqualsAndHashcode ( org.springframework.data.domain.PageImpl<java.lang.String> , new PageImpl <> ( java.util.List<java.lang.String> , PageRequest . of ( NUMBER , NUMBER ) , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new PageImpl <> ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new PageImpl <> ( null , null , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Page < java.lang.Object > org.springframework.data.domain.Page<java.lang.Object> = new PageImpl <> ( java.util.Collections . java.util.List<java.lang.Object> ( new java.lang.Object ( ) ) , PageRequest . of ( NUMBER , NUMBER ) , NUMBER ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . isFirst ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . hasPrevious ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . previousPageable ( ) . isPaged ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . isLast ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . hasNext ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . nextPageable ( ) ) . isEqualTo ( ( Pageable ) PageRequest . of ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Page < java.lang.Object > org.springframework.data.domain.Page<java.lang.Object> = new PageImpl <> ( java.util.Collections . java.util.List<java.lang.Object> ( new java.lang.Object ( ) ) , PageRequest . of ( NUMBER , NUMBER ) , NUMBER ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . isFirst ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . hasPrevious ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . previousPageable ( ) ) . isEqualTo ( ( Pageable ) PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . isLast ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Object> . nextPageable ( ) . isPaged ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( ) ; Page < java.lang.String > org.springframework.data.domain.Page<java.lang.String> = new PageImpl <> ( java.util.List<java.lang.String> ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . getContent ( ) ) . isEqualTo ( java.util.List<java.lang.String> ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . getNumber ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . getNumberOfElements ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . getSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . getSort ( ) ) . isEqualTo ( Sort . unsorted ( ) ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . getTotalPages ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . hasPrevious ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . isFirst ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . isLast ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . hasContent ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Page < java.lang.String > org.springframework.data.domain.Page<java.lang.String> = new PageImpl <> ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . getTotalPages ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.domain.Page<java.lang.String> . hasPrevious ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Page < java.lang.Integer > org.springframework.data.domain.Page<java.lang.Integer> = new PageImpl <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , PageRequest . of ( NUMBER , NUMBER ) , NUMBER ) . map ( java.lang.String :: int ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Integer> . getContent ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.domain.Page<java.lang.Integer> . getContent ( ) ) . contains ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new PageImpl <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , PageRequest . of ( NUMBER , NUMBER ) , NUMBER ) . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new PageImpl <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , PageRequest . of ( NUMBER , NUMBER ) , NUMBER ) . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new PageImpl <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , PageRequest . of ( NUMBER , NUMBER ) , NUMBER ) . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new PageImpl <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , PageRequest . of ( NUMBER , NUMBER ) , NUMBER ) . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new PageImpl <> ( java.util.Collections .< java.lang.String > java.util.List<java.lang.String> ( ) , PageRequest . of ( NUMBER , NUMBER ) , NUMBER ) . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
