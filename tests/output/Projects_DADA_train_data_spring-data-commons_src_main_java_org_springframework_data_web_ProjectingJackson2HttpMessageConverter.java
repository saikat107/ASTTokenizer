<METHOD_START> public void ( ) { this . org.springframework.data.web.SpelAwareProxyProjectionFactory = org.springframework.data.web.SpelAwareProxyProjectionFactory ( getObjectMapper ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ObjectMapper org.springframework.data.web.ObjectMapper ) { super( org.springframework.data.web.ObjectMapper ); this . org.springframework.data.web.SpelAwareProxyProjectionFactory = org.springframework.data.web.SpelAwareProxyProjectionFactory ( org.springframework.data.web.ObjectMapper ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.SpelAwareProxyProjectionFactory org.springframework.data.web.SpelAwareProxyProjectionFactory ( ObjectMapper org.springframework.data.web.ObjectMapper ) { Assert . notNull ( org.springframework.data.web.ObjectMapper , STRING ) ; SpelAwareProxyProjectionFactory org.springframework.data.web.SpelAwareProxyProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; org.springframework.data.web.SpelAwareProxyProjectionFactory . registerMethodInvokerFactory ( new JsonProjectingMethodInterceptorFactory ( new JacksonMappingProvider ( org.springframework.data.web.ObjectMapper ) ) ) ; return org.springframework.data.web.SpelAwareProxyProjectionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { org.springframework.data.web.SpelAwareProxyProjectionFactory . setBeanClassLoader ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.web.BeanFactory ) throws org.springframework.data.web.BeansException { org.springframework.data.web.SpelAwareProxyProjectionFactory . setBeanFactory ( org.springframework.data.web.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.data.web.MediaType ) { if ( ! boolean ( org.springframework.data.web.MediaType ) ) { return false ; } ResolvableType org.springframework.data.web.ResolvableType = java.lang.Class<> == null ? null : ResolvableType . forClass ( java.lang.Class<> ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ResolvableType . forType ( java.lang.reflect.Type , org.springframework.data.web.ResolvableType ) . resolve ( java.lang.Object .class ) ; java.lang.Boolean java.lang.Boolean = java.util.Map<java.lang.Class<?>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> ) ; if ( java.lang.Boolean != null ) { return java.lang.Boolean ; } java.lang.Boolean = java.lang.Class<> . boolean ( ) && AnnotationUtils . findAnnotation ( java.lang.Class<> , ProjectedPayload .class ) != null ; java.util.Map<java.lang.Class<?>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> , java.lang.Boolean ) ; return java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.data.web.MediaType ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> , HttpInputMessage org.springframework.data.web.HttpInputMessage )			throws java.io.IOException , org.springframework.data.web.HttpMessageNotReadableException { return org.springframework.data.web.SpelAwareProxyProjectionFactory . createProjection ( ResolvableType . forType ( java.lang.reflect.Type ) . getRawClass ( ) , org.springframework.data.web.HttpInputMessage . getBody ( ) ) ; }  <METHOD_END>
