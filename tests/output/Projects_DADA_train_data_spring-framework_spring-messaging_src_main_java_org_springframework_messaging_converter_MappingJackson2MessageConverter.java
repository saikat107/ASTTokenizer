<METHOD_START> public void ( ) { super( new MimeType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ); void ( ) ; }  <METHOD_END>
<METHOD_START> public void ( MimeType ... org.springframework.messaging.converter.MimeType[] ) { super( java.util.Arrays . java.util.List ( org.springframework.messaging.converter.MimeType[] ) ); void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . org.springframework.messaging.converter.ObjectMapper = new ObjectMapper ( ) ; this . org.springframework.messaging.converter.ObjectMapper . configure ( MapperFeature . DEFAULT_VIEW_INCLUSION , false ) ; this . org.springframework.messaging.converter.ObjectMapper . configure ( DeserializationFeature . FAIL_ON_UNKNOWN_PROPERTIES , false ) ; }  <METHOD_END>
<METHOD_START> public void void ( ObjectMapper org.springframework.messaging.converter.ObjectMapper ) { Assert . notNull ( org.springframework.messaging.converter.ObjectMapper , STRING ) ; this . org.springframework.messaging.converter.ObjectMapper = org.springframework.messaging.converter.ObjectMapper ; void ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.converter.ObjectMapper org.springframework.messaging.converter.ObjectMapper ( ) { return this . org.springframework.messaging.converter.ObjectMapper ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . java.lang.Boolean != null ) { this . org.springframework.messaging.converter.ObjectMapper . configure ( SerializationFeature . INDENT_OUTPUT , this . java.lang.Boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.messaging.converter.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> == null || ! supportsMimeType ( org.springframework.messaging.converter.Message<> . getHeaders ( ) ) ) { return false ; } JavaType org.springframework.messaging.converter.JavaType = this . org.springframework.messaging.converter.ObjectMapper . constructType ( java.lang.Class<> ) ; if ( ! logger . isWarnEnabled ( ) ) { return this . org.springframework.messaging.converter.ObjectMapper . canDeserialize ( org.springframework.messaging.converter.JavaType ) ; } java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> = new java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> <> ( ) ; if ( this . org.springframework.messaging.converter.ObjectMapper . canDeserialize ( org.springframework.messaging.converter.JavaType , java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> ) ) { return true ; } void ( org.springframework.messaging.converter.JavaType , java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> . java.lang.Throwable ( ) ) ; return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.messaging.converter.MessageHeaders ) { if ( java.lang.Object == null || ! supportsMimeType ( org.springframework.messaging.converter.MessageHeaders ) ) { return false ; } if ( ! logger . isWarnEnabled ( ) ) { return this . org.springframework.messaging.converter.ObjectMapper . canSerialize ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> = new java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> <> ( ) ; if ( this . org.springframework.messaging.converter.ObjectMapper . canSerialize ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> ) ) { return true ; } void ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> . java.lang.Throwable ( ) ) ; return false ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable != null && ! ( java.lang.Throwable instanceof JsonMappingException && java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ) { java.lang.String java.lang.String = STRING + ( java.lang.reflect.Type instanceof JavaType ? STRING : STRING ) + STRING + java.lang.reflect.Type + STRING ; if ( logger . isDebugEnabled ( ) ) { logger . warn ( java.lang.String , java.lang.Throwable ) ; } else { logger . warn ( java.lang.String + STRING + java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.messaging.converter.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object ) { JavaType org.springframework.messaging.converter.JavaType = this . org.springframework.messaging.converter.ObjectMapper . constructType ( java.lang.Class<> ) ; java.lang.Object java.lang.Object = org.springframework.messaging.converter.Message<> . getPayload ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.Object ) ; try { if ( java.lang.Object instanceof byte [] ) { if ( java.lang.Class<> != null ) { return this . org.springframework.messaging.converter.ObjectMapper . readerWithView ( java.lang.Class<> ) . forType ( org.springframework.messaging.converter.JavaType ) . readValue ( ( byte [] ) java.lang.Object ) ; } else { return this . org.springframework.messaging.converter.ObjectMapper . readValue ( ( byte [] ) java.lang.Object , org.springframework.messaging.converter.JavaType ) ; } } else { if ( java.lang.Class<> != null ) { return this . org.springframework.messaging.converter.ObjectMapper . readerWithView ( java.lang.Class<> ) . forType ( org.springframework.messaging.converter.JavaType ) . readValue ( java.lang.Object . java.lang.String ( ) ) ; } else { return this . org.springframework.messaging.converter.ObjectMapper . readValue ( java.lang.Object . java.lang.String ( ) , org.springframework.messaging.converter.JavaType ) ; } } } catch ( java.io.IOException java.io.IOException ) { throw new MessageConversionException ( org.springframework.messaging.converter.Message<> , STRING + java.io.IOException . java.lang.String ( ) , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.messaging.converter.MessageHeaders , java.lang.Object java.lang.Object ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.Object ) ; if ( byte [] .class == getSerializedPayloadClass ( ) ) { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( NUMBER ) ; JsonEncoding org.springframework.messaging.converter.JsonEncoding = org.springframework.messaging.converter.JsonEncoding ( getMimeType ( org.springframework.messaging.converter.MessageHeaders ) ) ; JsonGenerator org.springframework.messaging.converter.JsonGenerator = this . org.springframework.messaging.converter.ObjectMapper . getFactory ( ) . createGenerator ( java.io.ByteArrayOutputStream , org.springframework.messaging.converter.JsonEncoding ) ; if ( java.lang.Class<> != null ) { this . org.springframework.messaging.converter.ObjectMapper . writerWithView ( java.lang.Class<> ) . writeValue ( org.springframework.messaging.converter.JsonGenerator , java.lang.Object ) ; } else { this . org.springframework.messaging.converter.ObjectMapper . writeValue ( org.springframework.messaging.converter.JsonGenerator , java.lang.Object ) ; } java.lang.Object = java.io.ByteArrayOutputStream . byte[] ( ) ; } else { java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; if ( java.lang.Class<> != null ) { this . org.springframework.messaging.converter.ObjectMapper . writerWithView ( java.lang.Class<> ) . writeValue ( java.io.Writer , java.lang.Object ) ; } else { this . org.springframework.messaging.converter.ObjectMapper . writeValue ( java.io.Writer , java.lang.Object ) ; } java.lang.Object = java.io.Writer . java.lang.String ( ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new MessageConversionException ( STRING + java.io.IOException . java.lang.String ( ) , java.io.IOException ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof MethodParameter ) { MethodParameter org.springframework.messaging.converter.MethodParameter = ( MethodParameter ) java.lang.Object ; JsonView org.springframework.messaging.converter.JsonView = ( org.springframework.messaging.converter.MethodParameter . getParameterIndex ( ) >= NUMBER ? org.springframework.messaging.converter.MethodParameter . getParameterAnnotation ( JsonView .class ) : org.springframework.messaging.converter.MethodParameter . getMethodAnnotation ( JsonView .class ) ) ; if ( org.springframework.messaging.converter.JsonView != null ) { return java.lang.Class<?> ( org.springframework.messaging.converter.JsonView , java.lang.Object ) ; } } else if ( java.lang.Object instanceof JsonView ) { return java.lang.Class<?> ( ( JsonView ) java.lang.Object , java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Class ) { return ( java.lang.Class<?> < ? > ) java.lang.Object ; } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( JsonView org.springframework.messaging.converter.JsonView , java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.messaging.converter.JsonView . value ( ) ; if ( java.lang.Class<?>[] . int != NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object ) ; } return java.lang.Class<?>[] [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> protected org.springframework.messaging.converter.JsonEncoding org.springframework.messaging.converter.JsonEncoding ( MimeType org.springframework.messaging.converter.MimeType ) { if ( ( org.springframework.messaging.converter.MimeType != null ) && ( org.springframework.messaging.converter.MimeType . getCharset ( ) != null ) ) { java.nio.charset.Charset java.nio.charset.Charset = org.springframework.messaging.converter.MimeType . getCharset ( ) ; for ( JsonEncoding org.springframework.messaging.converter.JsonEncoding : JsonEncoding . values ( ) ) { if ( java.nio.charset.Charset . java.lang.String ( ) . boolean ( org.springframework.messaging.converter.JsonEncoding . getJavaName ( ) ) ) { return org.springframework.messaging.converter.JsonEncoding ; } } } return JsonEncoding . UTF8 ; }  <METHOD_END>
