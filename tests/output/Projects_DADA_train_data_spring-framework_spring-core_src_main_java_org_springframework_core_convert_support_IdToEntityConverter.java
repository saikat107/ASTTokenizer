<METHOD_START> public void ( ConversionService org.springframework.core.convert.support.ConversionService ) { this . org.springframework.core.convert.support.ConversionService = org.springframework.core.convert.support.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return java.util.Collections . java.util.Set ( new ConvertiblePair ( java.lang.Object .class , java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.core.convert.support.TypeDescriptor . getType ( ) ) ; return ( java.lang.reflect.Method != null && this . org.springframework.core.convert.support.ConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor . valueOf ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( java.lang.Object == null ) { return null ; } java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.core.convert.support.TypeDescriptor . getType ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.core.convert.support.ConversionService . convert ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor . valueOf ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] ) ) ; return ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = STRING + java.lang.String ( java.lang.Class<> ) ; java.lang.reflect.Method [] java.lang.reflect.Method[] ; boolean boolean ; try { java.lang.reflect.Method[] = java.lang.Class<> . java.lang.reflect.Method[] ( ) ; boolean = true ; } catch ( java.lang.SecurityException java.lang.SecurityException ) { java.lang.reflect.Method[] = java.lang.Class<> . java.lang.reflect.Method[] ( ) ; boolean = false ; } for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) && java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) && java.lang.reflect.Method . int ( ) == NUMBER && java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.Class<> ) && ( boolean || java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.Class<> ) ) ) { return java.lang.reflect.Method ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = ClassUtils . getShortName ( java.lang.Class<> ) ; int int = java.lang.String . int ( '.' ) ; if ( int != - NUMBER ) { return java.lang.String . java.lang.String ( int + NUMBER ) ; } else { return java.lang.String ; } }  <METHOD_END>
