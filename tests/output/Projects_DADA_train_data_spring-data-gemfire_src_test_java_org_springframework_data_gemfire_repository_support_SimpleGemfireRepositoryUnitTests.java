<METHOD_START> protected java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> < java.lang.Long , Animal > java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ( java.lang.Iterable<org.springframework.data.gemfire.repository.support.Animal> < Animal > java.lang.Iterable<org.springframework.data.gemfire.repository.support.Animal> ) { java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> < java.lang.Long , Animal > java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = new java.util.HashMap<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> <> ( ) ; for ( Animal org.springframework.data.gemfire.repository.support.Animal : java.lang.Iterable<org.springframework.data.gemfire.repository.support.Animal> ) { java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . put ( org.springframework.data.gemfire.repository.support.Animal . getId ( ) , org.springframework.data.gemfire.repository.support.Animal ) ; } return java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.support.Animal org.springframework.data.gemfire.repository.support.Animal ( java.lang.String java.lang.String ) { Animal org.springframework.data.gemfire.repository.support.Animal = new Animal ( ) ; org.springframework.data.gemfire.repository.support.Animal . setName ( java.lang.String ) ; return org.springframework.data.gemfire.repository.support.Animal ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.support.Animal org.springframework.data.gemfire.repository.support.Animal ( java.lang.Long java.lang.Long , java.lang.String java.lang.String ) { Animal org.springframework.data.gemfire.repository.support.Animal = org.springframework.data.gemfire.repository.support.Animal ( java.lang.String ) ; org.springframework.data.gemfire.repository.support.Animal . setId ( java.lang.Long ) ; return org.springframework.data.gemfire.repository.support.Animal ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.support.GemfireTemplate org.springframework.data.gemfire.repository.support.GemfireTemplate ( Region < ? , ? > org.springframework.data.gemfire.repository.support.Region<?,?> ) { return new GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<,> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.support.Cache org.springframework.data.gemfire.repository.support.Cache ( java.lang.String java.lang.String , boolean boolean ) { Cache org.springframework.data.gemfire.repository.support.Cache = mock ( Cache .class , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; CacheTransactionManager org.springframework.data.gemfire.repository.support.CacheTransactionManager = mock ( CacheTransactionManager .class , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; when ( org.springframework.data.gemfire.repository.support.Cache . getCacheTransactionManager ( ) ) . thenReturn ( org.springframework.data.gemfire.repository.support.CacheTransactionManager ) ; when ( org.springframework.data.gemfire.repository.support.CacheTransactionManager . exists ( ) ) . thenReturn ( boolean ) ; return org.springframework.data.gemfire.repository.support.Cache ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) { EntityInformation < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = mock ( EntityInformation .class ) ; doAnswer ( new Answer < java.util.Optional<java.lang.Long> < java.lang.Long > > ( ) { private final java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = new java.util.concurrent.atomic.AtomicLong ( NUMBER ) ; @ java.lang.Override public java.util.Optional<java.lang.Long> < java.lang.Long > java.util.Optional<java.lang.Long> ( InvocationOnMock org.springframework.data.gemfire.repository.support.InvocationOnMock ) throws java.lang.Throwable { Animal org.springframework.data.gemfire.repository.support.Animal = org.springframework.data.gemfire.repository.support.InvocationOnMock . getArgument ( NUMBER ) ; org.springframework.data.gemfire.repository.support.Animal . setId ( java.lang.Long ( org.springframework.data.gemfire.repository.support.Animal . getId ( ) ) ) ; return java.util.Optional . java.util.Optional ( org.springframework.data.gemfire.repository.support.Animal . getId ( ) ) ; } private java.lang.Long java.lang.Long ( java.lang.Long java.lang.Long ) { return ( java.lang.Long != null ? java.lang.Long : java.util.concurrent.atomic.AtomicLong . long ( ) ) ; } } ) . when ( org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ) . getId ( any ( Animal .class ) ) ; return org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Long> < java.lang.Long > java.util.Optional<java.lang.Long> ( InvocationOnMock org.springframework.data.gemfire.repository.support.InvocationOnMock ) throws java.lang.Throwable { Animal org.springframework.data.gemfire.repository.support.Animal = org.springframework.data.gemfire.repository.support.InvocationOnMock . getArgument ( NUMBER ) ; org.springframework.data.gemfire.repository.support.Animal . setId ( java.lang.Long ( org.springframework.data.gemfire.repository.support.Animal . getId ( ) ) ) ; return java.util.Optional . java.util.Optional ( org.springframework.data.gemfire.repository.support.Animal . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Long java.lang.Long ( java.lang.Long java.lang.Long ) { return ( java.lang.Long != null ? java.lang.Long : java.util.concurrent.atomic.AtomicLong . long ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.support.Region org.springframework.data.gemfire.repository.support.Region ( ) { return org.springframework.data.gemfire.repository.support.Region ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.support.Region org.springframework.data.gemfire.repository.support.Region ( java.lang.String java.lang.String ) { Region org.springframework.data.gemfire.repository.support.Region = mock ( Region .class , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; when ( org.springframework.data.gemfire.repository.support.Region . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.repository.support.Region . getFullPath ( ) ) . thenReturn ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) ) ; return org.springframework.data.gemfire.repository.support.Region ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.support.Region org.springframework.data.gemfire.repository.support.Region ( java.lang.String java.lang.String , Cache org.springframework.data.gemfire.repository.support.Cache , DataPolicy org.springframework.data.gemfire.repository.support.DataPolicy ) { Region org.springframework.data.gemfire.repository.support.Region = org.springframework.data.gemfire.repository.support.Region ( java.lang.String ) ; when ( org.springframework.data.gemfire.repository.support.Region . getRegionService ( ) ) . thenReturn ( org.springframework.data.gemfire.repository.support.Cache ) ; RegionAttributes org.springframework.data.gemfire.repository.support.RegionAttributes = mock ( RegionAttributes .class , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; when ( org.springframework.data.gemfire.repository.support.Region . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.repository.support.RegionAttributes ) ; when ( org.springframework.data.gemfire.repository.support.RegionAttributes . getDataPolicy ( ) ) . thenReturn ( org.springframework.data.gemfire.repository.support.DataPolicy ) ; return org.springframework.data.gemfire.repository.support.Region ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.repository.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectMessage ( STRING ) ; new SimpleGemfireRepository <> ( null , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.repository.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectMessage ( STRING ) ; new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region ( ) ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; Animal org.springframework.data.gemfire.repository.support.Animal = org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . save ( org.springframework.data.gemfire.repository.support.Animal ( STRING ) ) ; assertThat ( org.springframework.data.gemfire.repository.support.Animal ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.repository.support.Animal . getId ( ) . longValue ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.repository.support.Animal . getName ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . put ( eq ( NUMBER ) , eq ( org.springframework.data.gemfire.repository.support.Animal ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.repository.support.Animal> < Animal > java.util.List<org.springframework.data.gemfire.repository.support.Animal> = new java.util.ArrayList<org.springframework.data.gemfire.repository.support.Animal> <> ( NUMBER ) ; java.util.List<org.springframework.data.gemfire.repository.support.Animal> . add ( org.springframework.data.gemfire.repository.support.Animal ( STRING ) ) ; java.util.List<org.springframework.data.gemfire.repository.support.Animal> . add ( org.springframework.data.gemfire.repository.support.Animal ( STRING ) ) ; java.util.List<org.springframework.data.gemfire.repository.support.Animal> . add ( org.springframework.data.gemfire.repository.support.Animal ( STRING ) ) ; Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; java.lang.Iterable<org.springframework.data.gemfire.repository.support.Animal> < Animal > java.lang.Iterable<org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . save ( java.util.List<org.springframework.data.gemfire.repository.support.Animal> ) ; assertThat ( java.lang.Iterable<org.springframework.data.gemfire.repository.support.Animal> ) . isNotNull ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . putAll ( eq ( java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ( java.lang.Iterable<org.springframework.data.gemfire.repository.support.Animal> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Animal org.springframework.data.gemfire.repository.support.Animal = org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) ; Wrapper org.springframework.data.gemfire.repository.support.Wrapper = new Wrapper ( org.springframework.data.gemfire.repository.support.Animal , org.springframework.data.gemfire.repository.support.Animal . getId ( ) ) ; Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . save ( org.springframework.data.gemfire.repository.support.Wrapper ) ) . isEqualTo ( org.springframework.data.gemfire.repository.support.Animal ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . put ( eq ( org.springframework.data.gemfire.repository.support.Animal . getId ( ) ) , eq ( org.springframework.data.gemfire.repository.support.Animal ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.repository.support.Region = org.springframework.data.gemfire.repository.support.Region ( STRING ) ; GemfireTemplate org.springframework.data.gemfire.repository.support.GemfireTemplate = spy ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region ) ) ; SelectResults org.springframework.data.gemfire.repository.support.SelectResults = mock ( SelectResults .class ) ; doReturn ( org.springframework.data.gemfire.repository.support.SelectResults ) . when ( org.springframework.data.gemfire.repository.support.GemfireTemplate ) . find ( eq ( STRING ) ) ; when ( org.springframework.data.gemfire.repository.support.SelectResults . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Integer> ( NUMBER ) . java.util.Iterator<java.lang.Integer> ( ) ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . count ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.repository.support.Region , times ( NUMBER ) ) . getFullPath ( ) ; verify ( org.springframework.data.gemfire.repository.support.GemfireTemplate , times ( NUMBER ) ) . find ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.repository.support.SelectResults , times ( NUMBER ) ) . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Animal org.springframework.data.gemfire.repository.support.Animal = org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) ; Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; when ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . get ( any ( java.lang.Long .class ) ) ) . then ( invocation -> ( dog . getId ( ) . equals ( invocation . getArguments ( ) [ NUMBER ] ) ? dog : null ) ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . exists ( NUMBER ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . exists ( NUMBER ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Animal org.springframework.data.gemfire.repository.support.Animal = org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) ; Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; when ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . get ( any ( java.lang.Long .class ) ) ) . then ( invocation -> ( dog . getId ( ) . equals ( invocation . getArguments ( ) [ NUMBER ] ) ? dog : null ) ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . findOne ( NUMBER ) . orElse ( null ) ) . isEqualTo ( org.springframework.data.gemfire.repository.support.Animal ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . findOne ( NUMBER ) . isPresent ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> < java.lang.Long , Animal > java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = java.util.stream.Stream . java.util.stream.Stream ( org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) , org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) , org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector ( Animal :: getId , java.util.function.Function . java.util.function.Function<java.lang.Object,java.lang.Object> ( ) ) ) ; Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; when ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . getAll ( any ( java.util.Collection .class ) ) ) . then ( invocation -> { Collection < Long > keys = invocation . getArgument ( NUMBER ) ; return animals . values ( ) . stream ( ) . filter ( ( animal -> keys . contains ( animal . getId ( ) ) ) ) . collect ( Collectors . toMap ( Animal :: getId , Function . identity ( ) ) ) ; } ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> < Animal > java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . findAll ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER ) ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> ) . contains ( java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . get ( NUMBER ) , java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . get ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getAll ( eq ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; when ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . getAll ( any ( java.util.Collection .class ) ) ) . then ( invocation -> { Collection < Long > keys = invocation . getArgument ( NUMBER ) ; Map < Long , Animal > result = new HashMap <> ( keys . size ( ) ) ; for ( Long key : keys ) { result . put ( key , null ) ; } return result ; } ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> < Animal > java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . findAll ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER , NUMBER ) ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> ) . isEmpty ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getAll ( eq ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> < java.lang.Long , Animal > java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = java.util.stream.Stream . java.util.stream.Stream ( org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) , org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) , org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector ( Animal :: getId , java.util.function.Function . java.util.function.Function<java.lang.Object,java.lang.Object> ( ) ) ) ; Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; when ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . getAll ( any ( java.util.Collection .class ) ) ) . then ( invocation -> { Collection < Long > keys = invocation . getArgument ( NUMBER ) ; Map < Long , Animal > result = new HashMap <> ( keys . size ( ) ) ; for ( Long key : keys ) { result . put ( key , animals . get ( key ) ) ; } return result ; } ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> < Animal > java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . findAll ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER , NUMBER , NUMBER ) ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Animal> ) . contains ( java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . get ( NUMBER ) , java.util.Map<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . get ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getAll ( eq ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER , NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . delete ( NUMBER ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . remove ( eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . delete ( org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . remove ( eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . delete ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) , org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) , org.springframework.data.gemfire.repository.support.Animal ( NUMBER , STRING ) ) ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . remove ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . remove ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . remove ( eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.repository.support.Cache = org.springframework.data.gemfire.repository.support.Cache ( STRING , false ) ; Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( STRING , org.springframework.data.gemfire.repository.support.Cache , DataPolicy . REPLICATE ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . deleteAll ( ) ; verify ( org.springframework.data.gemfire.repository.support.Cache , times ( NUMBER ) ) . getCacheTransactionManager ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getAttributes ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.repository.support.Cache = org.springframework.data.gemfire.repository.support.Cache ( STRING , false ) ; Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( STRING , org.springframework.data.gemfire.repository.support.Cache , DataPolicy . PERSISTENT_REPLICATE ) ; java.util.Set<java.lang.Long> < java.lang.Long > java.util.Set<java.lang.Long> = new java.util.HashSet<java.lang.Long> <> ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER , NUMBER ) ) ; doThrow ( new java.lang.UnsupportedOperationException ( STRING ) ) . when ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) . clear ( ) ; when ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . keySet ( ) ) . thenReturn ( java.util.Set<java.lang.Long> ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . deleteAll ( ) ; verify ( org.springframework.data.gemfire.repository.support.Cache , times ( NUMBER ) ) . getCacheTransactionManager ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getAttributes ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . clear ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . removeAll ( eq ( java.util.Set<java.lang.Long> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.repository.support.Cache = org.springframework.data.gemfire.repository.support.Cache ( STRING , false ) ; Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( STRING , org.springframework.data.gemfire.repository.support.Cache , DataPolicy . PERSISTENT_PARTITION ) ; java.util.Set<java.lang.Long> < java.lang.Long > java.util.Set<java.lang.Long> = new java.util.HashSet<java.lang.Long> <> ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER , NUMBER ) ) ; when ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . keySet ( ) ) . thenReturn ( java.util.Set<java.lang.Long> ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . deleteAll ( ) ; verify ( org.springframework.data.gemfire.repository.support.Cache , times ( NUMBER ) ) . getCacheTransactionManager ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getAttributes ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . clear ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . removeAll ( eq ( java.util.Set<java.lang.Long> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.repository.support.Cache = org.springframework.data.gemfire.repository.support.Cache ( STRING , true ) ; Region < java.lang.Long , Animal > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> = org.springframework.data.gemfire.repository.support.Region ( STRING , org.springframework.data.gemfire.repository.support.Cache , DataPolicy . REPLICATE ) ; java.util.Set<java.lang.Long> < java.lang.Long > java.util.Set<java.lang.Long> = new java.util.HashSet<java.lang.Long> <> ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER , NUMBER ) ) ; when ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> . keySet ( ) ) . thenReturn ( java.util.Set<java.lang.Long> ) ; SimpleGemfireRepository < Animal , java.lang.Long > org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> ) , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> ( ) ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Animal,java.lang.Long> . deleteAll ( ) ; verify ( org.springframework.data.gemfire.repository.support.Cache , times ( NUMBER ) ) . getCacheTransactionManager ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getAttributes ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . clear ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Animal> , times ( NUMBER ) ) . removeAll ( eq ( java.util.Set<java.lang.Long> ) ) ; }  <METHOD_END>
