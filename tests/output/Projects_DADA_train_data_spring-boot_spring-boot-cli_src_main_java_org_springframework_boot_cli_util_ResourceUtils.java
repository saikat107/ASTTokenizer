<METHOD_START> public static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { if ( java.lang.ClassLoader == null ) { java.lang.ClassLoader = ClassUtils . getDefaultClassLoader ( ) ; } java.lang.String = StringUtils . cleanPath ( java.lang.String ) ; try { return java.util.List<java.lang.String> ( java.lang.String , java.lang.ClassLoader ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) throws java.io.IOException { if ( java.lang.String . boolean ( STRING ) ) { return java.util.List<java.lang.String> ( java.lang.String , java.lang.ClassLoader ) ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; try { java.util.Set<java.lang.String> . boolean ( java.util.List<java.lang.String> ( java.lang.String + java.lang.String , java.lang.ClassLoader ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } java.lang.String = java.lang.String ( java.lang.String ) ; java.util.Set<java.lang.String> . boolean ( java.util.List<java.lang.String> ( java.lang.String + java.lang.String , java.lang.ClassLoader ) ) ; return new java.util.ArrayList<java.lang.String> <> ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) throws java.io.IOException { Resource [] org.springframework.boot.cli.util.Resource[] = new PathMatchingResourcePatternResolver ( new org.springframework.boot.cli.util.ResourceUtils.FileSearchResourceLoader ( java.lang.ClassLoader ) ) . getResources ( java.lang.String ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( Resource org.springframework.boot.cli.util.Resource : org.springframework.boot.cli.util.Resource[] ) { if ( org.springframework.boot.cli.util.Resource . exists ( ) ) { if ( org.springframework.boot.cli.util.Resource . getURI ( ) . getScheme ( ) . equals ( STRING ) ) { if ( org.springframework.boot.cli.util.Resource . getFile ( ) . isDirectory ( ) ) { java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ( org.springframework.boot.cli.util.Resource ) ) ; continue; } } java.util.List<java.lang.String> . boolean ( java.lang.String ( org.springframework.boot.cli.util.Resource ) ) ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( Resource org.springframework.boot.cli.util.Resource ) throws java.io.IOException { Resource [] org.springframework.boot.cli.util.Resource[] = new PathMatchingResourcePatternResolver ( ) . getResources ( org.springframework.boot.cli.util.Resource . getURL ( ) + STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( Resource org.springframework.boot.cli.util.Resource : org.springframework.boot.cli.util.Resource[] ) { if ( ! org.springframework.boot.cli.util.Resource . getFile ( ) . isDirectory ( ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ( org.springframework.boot.cli.util.Resource ) ) ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( Resource org.springframework.boot.cli.util.Resource ) throws java.io.IOException { if ( ! org.springframework.boot.cli.util.Resource . getURI ( ) . getScheme ( ) . equals ( STRING ) ) { return org.springframework.boot.cli.util.Resource . getURL ( ) . toExternalForm ( ) ; } return org.springframework.boot.cli.util.Resource . getFile ( ) . getAbsoluteFile ( ) . toURI ( ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { while ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); this . org.springframework.boot.cli.util.FileSystemResourceLoader = new FileSystemResourceLoader ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.util.Resource org.springframework.boot.cli.util.Resource ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { return new ClassPathResource ( java.lang.String . java.lang.String ( java.lang.String . int ( ) ) , getClassLoader ( ) ) ; } else { if ( java.lang.String . boolean ( java.lang.String ) ) { Resource org.springframework.boot.cli.util.Resource = this . org.springframework.boot.cli.util.FileSystemResourceLoader . getResource ( java.lang.String ) ; return org.springframework.boot.cli.util.Resource ; } try { java.net.URL java.net.URL = new java.net.URL ( java.lang.String ) ; return new UrlResource ( java.net.URL ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { return getResourceByPath ( java.lang.String ) ; } } }  <METHOD_END>
