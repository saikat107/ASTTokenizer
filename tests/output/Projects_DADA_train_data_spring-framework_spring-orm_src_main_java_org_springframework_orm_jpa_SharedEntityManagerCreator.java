<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManagerFactory , null , true ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<,> , true ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , boolean boolean ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( org.springframework.orm.jpa.EntityManagerFactory instanceof EntityManagerFactoryInfo ? ( ( EntityManagerFactoryInfo ) org.springframework.orm.jpa.EntityManagerFactory ) . getEntityManagerInterface ( ) : EntityManager .class ) ; return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<,> , boolean , ( java.lang.Class<> == null ? java.lang.Class<?>[] : new java.lang.Class<?> < ? > [] { java.lang.Class<> } ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<,> , true , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , boolean boolean , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.ClassLoader java.lang.ClassLoader = null ; if ( org.springframework.orm.jpa.EntityManagerFactory instanceof EntityManagerFactoryInfo ) { java.lang.ClassLoader = ( ( EntityManagerFactoryInfo ) org.springframework.orm.jpa.EntityManagerFactory ) . getBeanClassLoader ( ) ; } java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ java.lang.Class<?>[] . int + NUMBER ] ; java.lang.System . void ( java.lang.Class<?>[] , NUMBER , java.lang.Class<?>[] , NUMBER , java.lang.Class<?>[] . int ) ; java.lang.Class<?>[] [ java.lang.Class<?>[] . int ] = EntityManagerProxy .class ; return ( EntityManager ) java.lang.reflect.Proxy . java.lang.Object ( ( java.lang.ClassLoader != null ? java.lang.ClassLoader : org.springframework.orm.jpa.SharedEntityManagerCreator .class . java.lang.ClassLoader ( ) ) , java.lang.Class<?>[] , new org.springframework.orm.jpa.SharedEntityManagerCreator.SharedEntityManagerInvocationHandler ( org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<,> , boolean ) ) ; }  <METHOD_END>
<METHOD_START> public void ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , boolean boolean ) { this . org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ; this . java.util.Map<?,?> = java.util.Map<,> ; this . boolean = boolean ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . org.springframework.orm.jpa.EntityManagerFactory instanceof EntityManagerFactoryInfo ) { this . java.lang.ClassLoader = ( ( EntityManagerFactoryInfo ) this . org.springframework.orm.jpa.EntityManagerFactory ) . getBeanClassLoader ( ) ; } else { this . java.lang.ClassLoader = this . org.springframework.orm.jpa.EntityManagerFactory . getClass ( ) . getClassLoader ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return int ( ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return STRING + this . org.springframework.orm.jpa.EntityManagerFactory + STRING ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return this . org.springframework.orm.jpa.EntityManagerFactory ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) || java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { try { return EntityManagerFactory .class . java.lang.reflect.Method ( java.lang.reflect.Method . java.lang.String ( ) ) . java.lang.Object ( this . org.springframework.orm.jpa.EntityManagerFactory ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ; if ( java.lang.Class<> != null && java.lang.Class<> . boolean ( java.lang.Object ) ) { return java.lang.Object ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return true ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } EntityManager org.springframework.orm.jpa.EntityManager = EntityManagerFactoryUtils . doGetTransactionalEntityManager ( this . org.springframework.orm.jpa.EntityManagerFactory , this . java.util.Map<,> , this . boolean ) ; if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( org.springframework.orm.jpa.EntityManager == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } return org.springframework.orm.jpa.EntityManager ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ; if ( java.lang.Class<> == null ) { return ( org.springframework.orm.jpa.EntityManager != null ? org.springframework.orm.jpa.EntityManager : java.lang.Object ) ; } if ( org.springframework.orm.jpa.EntityManager == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } } else if ( java.util.Set<java.lang.String> . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { if ( org.springframework.orm.jpa.EntityManager == null || ( ! TransactionSynchronizationManager . isActualTransactionActive ( ) && ! org.springframework.orm.jpa.EntityManager . getTransaction ( ) . isActive ( ) ) ) { throw new TransactionRequiredException ( STRING + STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING ) ; } } boolean boolean = false ; if ( org.springframework.orm.jpa.EntityManager == null ) { org.springframework.orm.jpa.Log . debug ( STRING ) ; org.springframework.orm.jpa.EntityManager = ( ! CollectionUtils . isEmpty ( this . java.util.Map<,> ) ? this . org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( this . java.util.Map<,> ) : this . org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) ; boolean = true ; } try { java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( org.springframework.orm.jpa.EntityManager , java.lang.Object[] ) ; if ( java.lang.Object instanceof Query ) { Query org.springframework.orm.jpa.Query = ( Query ) java.lang.Object ; if ( boolean ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ClassUtils . getAllInterfacesForClass ( org.springframework.orm.jpa.Query . getClass ( ) , this . java.lang.ClassLoader ) ; java.lang.Object = java.lang.reflect.Proxy . java.lang.Object ( this . java.lang.ClassLoader , java.lang.Class<?>[] , new org.springframework.orm.jpa.SharedEntityManagerCreator.DeferredQueryInvocationHandler ( org.springframework.orm.jpa.Query , org.springframework.orm.jpa.EntityManager ) ) ; boolean = false ; } else { EntityManagerFactoryUtils . applyTransactionTimeout ( org.springframework.orm.jpa.Query , this . org.springframework.orm.jpa.EntityManagerFactory ) ; } } return java.lang.Object ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } finally { if ( boolean ) { EntityManagerFactoryUtils . closeEntityManager ( org.springframework.orm.jpa.EntityManager ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void ( Query org.springframework.orm.jpa.Query , EntityManager org.springframework.orm.jpa.EntityManager ) { this . org.springframework.orm.jpa.Query = org.springframework.orm.jpa.Query ; this . org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.EntityManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return int ( ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ; if ( java.lang.Class<> == null ) { return this . org.springframework.orm.jpa.Query ; } else if ( java.lang.Class<> . boolean ( java.lang.Object ) ) { return java.lang.Object ; } } try { java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( this . org.springframework.orm.jpa.Query , java.lang.Object[] ) ; return ( java.lang.Object == this . org.springframework.orm.jpa.Query ? java.lang.Object : java.lang.Object ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } finally { if ( java.util.Set<java.lang.String> . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { EntityManagerFactoryUtils . closeEntityManager ( this . org.springframework.orm.jpa.EntityManager ) ; this . org.springframework.orm.jpa.EntityManager = null ; } } }  <METHOD_END>
