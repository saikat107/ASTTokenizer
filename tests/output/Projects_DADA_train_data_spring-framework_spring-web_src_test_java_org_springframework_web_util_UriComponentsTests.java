<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromPath ( STRING ) . build ( ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponents . encode ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertEquals ( new java.net.URI ( STRING ) , org.springframework.web.util.UriComponents . encode ( ) . toUri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertEquals ( new java.net.URI ( STRING ) , org.springframework.web.util.UriComponents . toUri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( true ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponents . encode ( ) ; assertEquals ( new java.net.URI ( STRING ) , org.springframework.web.util.UriComponents . toUri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( true ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponents . encode ( ) ; assertEquals ( new java.net.URI ( STRING ) , org.springframework.web.util.UriComponents . toUri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . path ( STRING ) . build ( ) ; org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponents . expand ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( java.lang.String ) . build ( ) ; org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponents . expand ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = fromUriString ( STRING ) . build ( ) ; UriComponents org.springframework.web.util.UriComponents = fromUriString ( STRING ) . port ( NUMBER ) . build ( ) ; UriComponents org.springframework.web.util.UriComponents = fromUriString ( STRING ) . port ( STRING ) . build ( ) . expand ( NUMBER ) ; UriComponents org.springframework.web.util.UriComponents = fromUriString ( STRING ) . port ( STRING ) . build ( ) . expand ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; assertEquals ( NUMBER , org.springframework.web.util.UriComponents . getPort ( ) ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { UriComponentsBuilder . fromPath ( STRING ) . build ( ) . encode ( ) . expand ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { UriComponentsBuilder . fromPath ( STRING ) . build ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { UriComponentsBuilder . fromPath ( STRING ) . build ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . normalize ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . path ( STRING ) . query ( STRING ) . build ( ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( org.springframework.web.util.UriComponents ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; UriComponents org.springframework.web.util.UriComponents = ( UriComponents ) java.io.ObjectInputStream . java.lang.Object ( ) ; assertThat ( org.springframework.web.util.UriComponents . toString ( ) , equalTo ( org.springframework.web.util.UriComponents . toString ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromPath ( STRING ) . pathSegment ( STRING ) . build ( ) ; UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) ; org.springframework.web.util.UriComponents . copyToUriComponentsBuilder ( org.springframework.web.util.UriComponentsBuilder ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) . encode ( ) ; assertEquals ( STRING , org.springframework.web.util.UriComponents . getPath ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.util.UriComponents . getPathSegments ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . path ( STRING ) . query ( STRING ) . build ( ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . path ( STRING ) . query ( STRING ) . build ( ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . path ( STRING ) . query ( STRING ) . build ( ) ; assertThat ( org.springframework.web.util.UriComponents , instanceOf ( HierarchicalUriComponents .class ) ) ; assertThat ( org.springframework.web.util.UriComponents , equalTo ( org.springframework.web.util.UriComponents ) ) ; assertThat ( org.springframework.web.util.UriComponents , equalTo ( org.springframework.web.util.UriComponents ) ) ; assertThat ( org.springframework.web.util.UriComponents , not ( equalTo ( org.springframework.web.util.UriComponents ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; assertThat ( org.springframework.web.util.UriComponents , instanceOf ( OpaqueUriComponents .class ) ) ; assertThat ( org.springframework.web.util.UriComponents , equalTo ( org.springframework.web.util.UriComponents ) ) ; assertThat ( org.springframework.web.util.UriComponents , equalTo ( org.springframework.web.util.UriComponents ) ) ; assertThat ( org.springframework.web.util.UriComponents , not ( equalTo ( org.springframework.web.util.UriComponents ) ) ) ; }  <METHOD_END>
