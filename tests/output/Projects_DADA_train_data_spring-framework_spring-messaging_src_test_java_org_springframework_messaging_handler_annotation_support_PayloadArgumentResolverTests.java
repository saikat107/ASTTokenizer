<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver = new PayloadArgumentResolver ( new StringMessageConverter ( ) , org.springframework.messaging.handler.annotation.support.Validator ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.messaging.handler.annotation.support.PayloadArgumentResolverTests .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class , java.util.Locale .class , java.lang.String .class , java.lang.String .class , java.lang.String .class , java.lang.String .class ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . supportsParameter ( this . org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . supportsParameter ( this . org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; PayloadArgumentResolver org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver = new PayloadArgumentResolver ( new StringMessageConverter ( ) , org.springframework.messaging.handler.annotation.support.Validator ( ) , false ) ; assertTrue ( org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . supportsParameter ( this . org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; assertFalse ( org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . supportsParameter ( this . org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; java.lang.Object java.lang.Object = this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.messaging.handler.annotation.support.ExpectedException . expect ( MethodArgumentNotValidException .class ) ; this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.messaging.handler.annotation.support.ExpectedException . expect ( MethodArgumentNotValidException .class ) ; this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( new byte [ NUMBER ] ) . build ( ) ; assertNull ( this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ) ; Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; assertNull ( this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ) ; Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; assertEquals ( STRING , this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; org.springframework.messaging.handler.annotation.support.ExpectedException . expect ( MessageConversionException .class ) ; org.springframework.messaging.handler.annotation.support.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; org.springframework.messaging.handler.annotation.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; org.springframework.messaging.handler.annotation.support.ExpectedException . expect ( MethodArgumentNotValidException .class ) ; this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.messaging.handler.annotation.support.ExpectedException . expect ( MethodArgumentNotValidException .class ) ; this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; assertEquals ( STRING , this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ) ; Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.messaging.handler.annotation.support.ExpectedException . expect ( MethodArgumentNotValidException .class ) ; this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; org.springframework.messaging.handler.annotation.support.ExpectedException . expect ( MethodArgumentNotValidException .class ) ; org.springframework.messaging.handler.annotation.support.ExpectedException . expectMessage ( STRING ) ; assertEquals ( STRING , this . org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.handler.annotation.support.Validator org.springframework.messaging.handler.annotation.support.Validator ( ) { return new Validator ( ) { @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String .class . boolean ( java.lang.Class<> ) ; } @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.messaging.handler.annotation.support.Errors ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.messaging.handler.annotation.support.Errors . reject ( STRING ) ; } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.messaging.handler.annotation.support.Errors ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.messaging.handler.annotation.support.Errors . reject ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( @ Payload java.lang.String java.lang.String , @ Payload ( required = false ) java.lang.String java.lang.String , @ Payload ( required = true ) java.util.Locale java.util.Locale , @ Payload ( STRING ) java.lang.String java.lang.String , @ org.springframework.messaging.handler.annotation.support.PayloadArgumentResolverTests.MyValid @ Payload java.lang.String java.lang.String , @ Validated java.lang.String java.lang.String , java.lang.String java.lang.String ) {	}  <METHOD_END>
