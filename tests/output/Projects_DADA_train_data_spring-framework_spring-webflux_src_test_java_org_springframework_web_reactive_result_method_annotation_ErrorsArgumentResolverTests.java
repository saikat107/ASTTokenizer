<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver = new ErrorsMethodArgumentResolver ( new ReactiveAdapterRegistry ( ) ) ; org.springframework.web.reactive.result.method.annotation.ErrorsArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.ErrorsArgumentResolverTests.Foo = new org.springframework.web.reactive.result.method.annotation.ErrorsArgumentResolverTests.Foo ( ) ; WebExchangeDataBinder org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder = this . org.springframework.web.reactive.result.method.annotation.BindingContext . createDataBinder ( this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.ErrorsArgumentResolverTests.Foo , STRING ) ; this . org.springframework.web.reactive.result.method.annotation.BindingResult = org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder . getBindingResult ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( Errors .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( BindingResult .class ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( java.lang.String .class ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; try { org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( ResolvableType . forClassWithGenerics ( Mono .class , Errors .class ) ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver . supportsParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.IllegalStateException . java.lang.String ( ) , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( this . org.springframework.web.reactive.result.method.annotation.BindingResult ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MonoProcessor < BindingResult > org.springframework.web.reactive.result.method.annotation.MonoProcessor<org.springframework.web.reactive.result.method.annotation.BindingResult> = MonoProcessor . create ( ) ; org.springframework.web.reactive.result.method.annotation.MonoProcessor<org.springframework.web.reactive.result.method.annotation.BindingResult> . onNext ( this . org.springframework.web.reactive.result.method.annotation.BindingResult ) ; void ( org.springframework.web.reactive.result.method.annotation.MonoProcessor<org.springframework.web.reactive.result.method.annotation.BindingResult> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( BindingResult .class ) ; this . org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { java.lang.String java.lang.String = BindingResult . MODEL_KEY_PREFIX + STRING ; this . org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) . put ( java.lang.String , java.lang.Object ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( Errors .class ) ; java.lang.Object java.lang.Object = this . org.springframework.web.reactive.result.method.annotation.ErrorsMethodArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , this . org.springframework.web.reactive.result.method.annotation.BindingContext , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertSame ( this . org.springframework.web.reactive.result.method.annotation.BindingResult , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( @ ModelAttribute org.springframework.web.reactive.result.method.annotation.ErrorsArgumentResolverTests.Foo org.springframework.web.reactive.result.method.annotation.ErrorsArgumentResolverTests.Foo , Errors org.springframework.web.reactive.result.method.annotation.Errors , @ ModelAttribute Mono < org.springframework.web.reactive.result.method.annotation.ErrorsArgumentResolverTests.Foo > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.ErrorsArgumentResolverTests.Foo> , BindingResult org.springframework.web.reactive.result.method.annotation.BindingResult , Mono < Errors > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.Errors> , java.lang.String java.lang.String ) {}  <METHOD_END>
