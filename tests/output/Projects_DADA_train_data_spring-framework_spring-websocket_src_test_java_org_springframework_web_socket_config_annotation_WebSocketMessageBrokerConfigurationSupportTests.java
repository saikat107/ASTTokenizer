<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.socket.config.annotation.ApplicationContext = org.springframework.web.socket.config.annotation.ApplicationContext ( org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannelConfig .class , org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestConfigurer .class ) ; SimpleUrlHandlerMapping org.springframework.web.socket.config.annotation.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( HandlerMapping .class ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.SimpleUrlHandlerMapping . getOrder ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.web.socket.config.annotation.SimpleUrlHandlerMapping . getHandlerMap ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.socket.config.annotation.ApplicationContext = org.springframework.web.socket.config.annotation.ApplicationContext ( org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannelConfig .class , org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestConfigurer .class ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel = org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( STRING , org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel .class ) ; SubProtocolWebSocketHandler org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler = org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( SubProtocolWebSocketHandler .class ) ; java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> = org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel . getInterceptors ( ) ; assertEquals ( ImmutableMessageChannelInterceptor .class , java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> . get ( java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> . size ( ) - NUMBER ) . getClass ( ) ) ; TestWebSocketSession org.springframework.web.socket.config.annotation.TestWebSocketSession = new TestWebSocketSession ( STRING ) ; org.springframework.web.socket.config.annotation.TestWebSocketSession . setOpen ( true ) ; org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.config.annotation.TestWebSocketSession ) ; TextMessage org.springframework.web.socket.config.annotation.TextMessage = StompTextMessageBuilder . create ( StompCommand . SEND ) . headers ( STRING ) . build ( ) ; org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler . handleMessage ( org.springframework.web.socket.config.annotation.TestWebSocketSession , org.springframework.web.socket.config.annotation.TextMessage ) ; Message < ? > org.springframework.web.socket.config.annotation.Message<?> = org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel . java.util.List<org.springframework.web.socket.config.annotation.Message<?>> . get ( NUMBER ) ; StompHeaderAccessor org.springframework.web.socket.config.annotation.StompHeaderAccessor = StompHeaderAccessor . getAccessor ( org.springframework.web.socket.config.annotation.Message<> , StompHeaderAccessor .class ) ; assertNotNull ( org.springframework.web.socket.config.annotation.StompHeaderAccessor ) ; assertFalse ( org.springframework.web.socket.config.annotation.StompHeaderAccessor . isMutable ( ) ) ; assertEquals ( SimpMessageType . MESSAGE , org.springframework.web.socket.config.annotation.StompHeaderAccessor . getMessageType ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.config.annotation.StompHeaderAccessor . getDestination ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.socket.config.annotation.ApplicationContext = org.springframework.web.socket.config.annotation.ApplicationContext ( org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannelConfig .class , org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestConfigurer .class ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel = org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( STRING , org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel .class ) ; java.util.Set<org.springframework.web.socket.config.annotation.MessageHandler> < MessageHandler > java.util.Set<org.springframework.web.socket.config.annotation.MessageHandler> = org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel . getSubscribers ( ) ; java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> = org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel . getInterceptors ( ) ; assertEquals ( ImmutableMessageChannelInterceptor .class , java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> . get ( java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> . size ( ) - NUMBER ) . getClass ( ) ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.web.socket.config.annotation.MessageHandler> . size ( ) ) ; assertTrue ( java.util.Set<org.springframework.web.socket.config.annotation.MessageHandler> . contains ( org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( SubProtocolWebSocketHandler .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.socket.config.annotation.ApplicationContext = org.springframework.web.socket.config.annotation.ApplicationContext ( org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannelConfig .class , org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestConfigurer .class ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel = org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( STRING , org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel .class ) ; java.util.Set<org.springframework.web.socket.config.annotation.MessageHandler> < MessageHandler > java.util.Set<org.springframework.web.socket.config.annotation.MessageHandler> = org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel . getSubscribers ( ) ; java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> = org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel . getInterceptors ( ) ; assertEquals ( ImmutableMessageChannelInterceptor .class , java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> . get ( java.util.List<org.springframework.web.socket.config.annotation.ChannelInterceptor> . size ( ) - NUMBER ) . getClass ( ) ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.web.socket.config.annotation.MessageHandler> . size ( ) ) ; assertTrue ( java.util.Set<org.springframework.web.socket.config.annotation.MessageHandler> . contains ( org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( SimpleBrokerMessageHandler .class ) ) ) ; assertTrue ( java.util.Set<org.springframework.web.socket.config.annotation.MessageHandler> . contains ( org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( UserDestinationMessageHandler .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.socket.config.annotation.ApplicationContext = org.springframework.web.socket.config.annotation.ApplicationContext ( org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannelConfig .class , org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestConfigurer .class ) ; SubProtocolWebSocketHandler org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler = org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( SubProtocolWebSocketHandler .class ) ; assertEquals ( NUMBER * NUMBER , org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler . getSendBufferSizeLimit ( ) ) ; assertEquals ( NUMBER * NUMBER , org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler . getSendTimeLimit ( ) ) ; java.util.Map<java.lang.String,org.springframework.web.socket.config.annotation.SubProtocolHandler> < java.lang.String , SubProtocolHandler > java.util.Map<java.lang.String,org.springframework.web.socket.config.annotation.SubProtocolHandler> = org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler . getProtocolHandlerMap ( ) ; StompSubProtocolHandler org.springframework.web.socket.config.annotation.StompSubProtocolHandler = ( StompSubProtocolHandler ) java.util.Map<java.lang.String,org.springframework.web.socket.config.annotation.SubProtocolHandler> . get ( STRING ) ; assertEquals ( NUMBER * NUMBER , org.springframework.web.socket.config.annotation.StompSubProtocolHandler . getMessageSizeLimit ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.socket.config.annotation.ApplicationContext = org.springframework.web.socket.config.annotation.ApplicationContext ( org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannelConfig .class , org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestConfigurer .class ) ; java.lang.String java.lang.String = STRING ; ThreadPoolTaskScheduler org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler = org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( java.lang.String , ThreadPoolTaskScheduler .class ) ; java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledThreadPoolExecutor = org.springframework.web.socket.config.annotation.ThreadPoolTaskScheduler . getScheduledThreadPoolExecutor ( ) ; assertEquals ( java.lang.Runtime . java.lang.Runtime ( ) . int ( ) , java.util.concurrent.ScheduledThreadPoolExecutor . int ( ) ) ; assertTrue ( java.util.concurrent.ScheduledThreadPoolExecutor . boolean ( ) ) ; SimpleBrokerMessageHandler org.springframework.web.socket.config.annotation.SimpleBrokerMessageHandler = org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( SimpleBrokerMessageHandler .class ) ; assertNotNull ( org.springframework.web.socket.config.annotation.SimpleBrokerMessageHandler . getTaskScheduler ( ) ) ; assertArrayEquals ( new long [] { NUMBER , NUMBER } , org.springframework.web.socket.config.annotation.SimpleBrokerMessageHandler . getHeartbeatValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.web.socket.config.annotation.ApplicationContext = org.springframework.web.socket.config.annotation.ApplicationContext ( org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannelConfig .class , org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestConfigurer .class ) ; java.lang.String java.lang.String = STRING ; WebSocketMessageBrokerStats org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats = org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( java.lang.String , WebSocketMessageBrokerStats .class ) ; java.lang.String java.lang.String = org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats . toString ( ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING ; assertTrue ( STRING + java.lang.String . java.lang.String ( STRING , STRING ) + STRING + java.lang.String , java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.web.socket.config.annotation.ApplicationContext = org.springframework.web.socket.config.annotation.ApplicationContext ( org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.WebSocketHandlerDecoratorConfig .class ) ; WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler = org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( SubProtocolWebSocketHandler .class ) ; assertNotNull ( org.springframework.web.socket.config.annotation.WebSocketHandler ) ; SimpleUrlHandlerMapping org.springframework.web.socket.config.annotation.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) org.springframework.web.socket.config.annotation.ApplicationContext . getBean ( STRING ) ; WebSocketHttpRequestHandler org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler = ( WebSocketHttpRequestHandler ) org.springframework.web.socket.config.annotation.SimpleUrlHandlerMapping . getHandlerMap ( ) . get ( STRING ) ; org.springframework.web.socket.config.annotation.WebSocketHandler = org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . getWebSocketHandler ( ) ; WebSocketSession org.springframework.web.socket.config.annotation.WebSocketSession = new TestWebSocketSession ( STRING ) ; org.springframework.web.socket.config.annotation.WebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.config.annotation.WebSocketSession ) ; assertEquals ( true , org.springframework.web.socket.config.annotation.WebSocketSession . getAttributes ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.annotation.ApplicationContext org.springframework.web.socket.config.annotation.ApplicationContext ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { AnnotationConfigApplicationContext org.springframework.web.socket.config.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.socket.config.annotation.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.web.socket.config.annotation.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.web.socket.config.annotation.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ SubscribeMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) @ SendTo ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestController org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestController ( ) { return new org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestController ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompEndpointRegistry org.springframework.web.socket.config.annotation.StompEndpointRegistry ) { org.springframework.web.socket.config.annotation.StompEndpointRegistry . addEndpoint ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketTransportRegistration org.springframework.web.socket.config.annotation.WebSocketTransportRegistration ) { org.springframework.web.socket.config.annotation.WebSocketTransportRegistration . setMessageSizeLimit ( NUMBER * NUMBER ) ; org.springframework.web.socket.config.annotation.WebSocketTransportRegistration . setSendTimeLimit ( NUMBER * NUMBER ) ; org.springframework.web.socket.config.annotation.WebSocketTransportRegistration . setSendBufferSizeLimit ( NUMBER * NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageBrokerRegistry org.springframework.web.socket.config.annotation.MessageBrokerRegistry ) { org.springframework.web.socket.config.annotation.MessageBrokerRegistry . enableSimpleBroker ( ) . setTaskScheduler ( mock ( TaskScheduler .class ) ) . setHeartbeatValue ( new long [] { NUMBER , NUMBER } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.web.socket.config.annotation.AbstractSubscribableChannel org.springframework.web.socket.config.annotation.AbstractSubscribableChannel ( ) { org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel = new org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel ( ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel . setInterceptors ( super. clientInboundChannel ( ) . getInterceptors ( ) ) ; return org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.web.socket.config.annotation.AbstractSubscribableChannel org.springframework.web.socket.config.annotation.AbstractSubscribableChannel ( ) { org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel = new org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel ( ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel . setInterceptors ( super. clientOutboundChannel ( ) . getInterceptors ( ) ) ; return org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.AbstractSubscribableChannel org.springframework.web.socket.config.annotation.AbstractSubscribableChannel ( ) { org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel = new org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel ( ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel . setInterceptors ( super. brokerChannel ( ) . getInterceptors ( ) ) ; return org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupportTests.TestChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( StompEndpointRegistry org.springframework.web.socket.config.annotation.StompEndpointRegistry ) { org.springframework.web.socket.config.annotation.StompEndpointRegistry . addEndpoint ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketTransportRegistration org.springframework.web.socket.config.annotation.WebSocketTransportRegistration ) { org.springframework.web.socket.config.annotation.WebSocketTransportRegistration . addDecoratorFactory ( new WebSocketHandlerDecoratorFactory ( ) { @ java.lang.Override public org.springframework.web.socket.config.annotation.WebSocketHandlerDecorator org.springframework.web.socket.config.annotation.WebSocketHandlerDecorator ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler ) { return new WebSocketHandlerDecorator ( org.springframework.web.socket.config.annotation.WebSocketHandler ) { @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.config.annotation.WebSocketSession ) throws java.lang.Exception { org.springframework.web.socket.config.annotation.WebSocketSession . getAttributes ( ) . put ( STRING , true ) ; super. afterConnectionEstablished ( org.springframework.web.socket.config.annotation.WebSocketSession ) ; } } ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.WebSocketHandlerDecorator org.springframework.web.socket.config.annotation.WebSocketHandlerDecorator ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler ) { return new WebSocketHandlerDecorator ( org.springframework.web.socket.config.annotation.WebSocketHandler ) { @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.config.annotation.WebSocketSession ) throws java.lang.Exception { org.springframework.web.socket.config.annotation.WebSocketSession . getAttributes ( ) . put ( STRING , true ) ; super. afterConnectionEstablished ( org.springframework.web.socket.config.annotation.WebSocketSession ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.config.annotation.WebSocketSession ) throws java.lang.Exception { org.springframework.web.socket.config.annotation.WebSocketSession . getAttributes ( ) . put ( STRING , true ) ; super. afterConnectionEstablished ( org.springframework.web.socket.config.annotation.WebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.web.socket.config.annotation.Message<?> , long long ) { this . java.util.List<org.springframework.web.socket.config.annotation.Message<?>> . add ( org.springframework.web.socket.config.annotation.Message<> ) ; return true ; }  <METHOD_END>
