<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource ); }  <METHOD_END>
<METHOD_START> public void ( JdbcTemplate org.springframework.jdbc.core.simple.JdbcTemplate ) { super( org.springframework.jdbc.core.simple.JdbcTemplate ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.simple.SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall ( java.lang.String java.lang.String ) { setProcedureName ( java.lang.String ) ; setFunction ( false ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.simple.SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall ( java.lang.String java.lang.String ) { setProcedureName ( java.lang.String ) ; setFunction ( true ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.simple.SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall ( java.lang.String java.lang.String ) { setSchemaName ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.simple.SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall ( java.lang.String java.lang.String ) { setCatalogName ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.simple.SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall ( ) { setReturnValueRequired ( true ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.simple.SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall ( SqlParameter ... org.springframework.jdbc.core.simple.SqlParameter[] ) { for ( SqlParameter org.springframework.jdbc.core.simple.SqlParameter : org.springframework.jdbc.core.simple.SqlParameter[] ) { if ( org.springframework.jdbc.core.simple.SqlParameter != null ) { addDeclaredParameter ( org.springframework.jdbc.core.simple.SqlParameter ) ; } } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.simple.SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall ( java.lang.String ... java.lang.String[] ) { setInParameterNames ( new java.util.LinkedHashSet <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.simple.SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall ( java.lang.String java.lang.String , RowMapper < ? > org.springframework.jdbc.core.simple.RowMapper<?> ) { addDeclaredRowMapper ( java.lang.String , org.springframework.jdbc.core.simple.RowMapper<> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.simple.SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall ( ) { setAccessCallParameterMetaData ( false ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.simple.SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall ( ) { setNamedBinding ( true ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) { return ( T ) doExecute ( java.lang.Object[] ) . get ( getScalarOutParameterName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return ( T ) doExecute ( java.util.Map<java.lang.String,> ) . get ( getScalarOutParameterName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , SqlParameterSource org.springframework.jdbc.core.simple.SqlParameterSource ) { return ( T ) doExecute ( org.springframework.jdbc.core.simple.SqlParameterSource ) . get ( getScalarOutParameterName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) { return ( T ) doExecute ( java.lang.Object[] ) . get ( getScalarOutParameterName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return ( T ) doExecute ( java.util.Map<java.lang.String,> ) . get ( getScalarOutParameterName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , SqlParameterSource org.springframework.jdbc.core.simple.SqlParameterSource ) { return ( T ) doExecute ( org.springframework.jdbc.core.simple.SqlParameterSource ) . get ( getScalarOutParameterName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Object ... java.lang.Object[] ) { return doExecute ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return doExecute ( java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( SqlParameterSource org.springframework.jdbc.core.simple.SqlParameterSource ) { return doExecute ( org.springframework.jdbc.core.simple.SqlParameterSource ) ; }  <METHOD_END>
