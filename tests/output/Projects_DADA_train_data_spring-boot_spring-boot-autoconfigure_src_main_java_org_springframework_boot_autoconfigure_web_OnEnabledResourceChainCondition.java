<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.ConditionOutcome org.springframework.boot.autoconfigure.web.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.web.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.web.AnnotatedTypeMetadata ) { ConfigurableEnvironment org.springframework.boot.autoconfigure.web.ConfigurableEnvironment = ( ConfigurableEnvironment ) org.springframework.boot.autoconfigure.web.ConditionContext . getEnvironment ( ) ; boolean boolean = java.lang.Boolean ( org.springframework.boot.autoconfigure.web.ConfigurableEnvironment , STRING , false ) ; boolean boolean = java.lang.Boolean ( org.springframework.boot.autoconfigure.web.ConfigurableEnvironment , STRING , false ) ; java.lang.Boolean java.lang.Boolean = java.lang.Boolean ( org.springframework.boot.autoconfigure.web.ConfigurableEnvironment , STRING , null ) ; java.lang.Boolean java.lang.Boolean = ResourceProperties . Chain . getEnabled ( boolean , boolean , java.lang.Boolean ) ; ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( ConditionalOnEnabledResourceChain .class ) ; if ( java.lang.Boolean == null ) { if ( ClassUtils . isPresent ( java.lang.String , java.lang.Class<? extends org.springframework.boot.autoconfigure.web.OnEnabledResourceChainCondition> ( ) . java.lang.ClassLoader ( ) ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . found ( STRING ) . items ( java.lang.String ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . items ( java.lang.String ) ) ; } if ( java.lang.Boolean ) { return ConditionOutcome . match ( ConditionMessage.Builder . because ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . because ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Boolean java.lang.Boolean ( ConfigurableEnvironment org.springframework.boot.autoconfigure.web.ConfigurableEnvironment , java.lang.String java.lang.String , java.lang.Boolean java.lang.Boolean ) { PropertyResolver org.springframework.boot.autoconfigure.web.PropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.web.ConfigurableEnvironment , STRING + java.lang.String ) ; return org.springframework.boot.autoconfigure.web.PropertyResolver . getProperty ( STRING , java.lang.Boolean .class , java.lang.Boolean ) ; }  <METHOD_END>
