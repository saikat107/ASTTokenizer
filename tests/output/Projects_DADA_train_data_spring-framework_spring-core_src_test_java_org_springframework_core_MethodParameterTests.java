<METHOD_START> @ Before public void void ( ) java.lang.NoSuchMethodException { java.lang.reflect.Method = java.lang.Class<? extends org.springframework.core.MethodParameterTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Long . java.lang.Class<java.lang.Long> ) ; org.springframework.core.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.core.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.core.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { assertEquals ( org.springframework.core.MethodParameter , org.springframework.core.MethodParameter ) ; assertEquals ( org.springframework.core.MethodParameter , org.springframework.core.MethodParameter ) ; assertEquals ( org.springframework.core.MethodParameter , org.springframework.core.MethodParameter ) ; assertFalse ( org.springframework.core.MethodParameter . equals ( org.springframework.core.MethodParameter ) ) ; assertFalse ( org.springframework.core.MethodParameter . equals ( org.springframework.core.MethodParameter ) ) ; assertFalse ( org.springframework.core.MethodParameter . equals ( org.springframework.core.MethodParameter ) ) ; assertFalse ( org.springframework.core.MethodParameter . equals ( org.springframework.core.MethodParameter ) ) ; assertFalse ( org.springframework.core.MethodParameter . equals ( org.springframework.core.MethodParameter ) ) ; assertFalse ( org.springframework.core.MethodParameter . equals ( org.springframework.core.MethodParameter ) ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.core.MethodParameterTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Long . java.lang.Class<java.lang.Long> ) ; MethodParameter org.springframework.core.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertEquals ( org.springframework.core.MethodParameter , org.springframework.core.MethodParameter ) ; assertEquals ( org.springframework.core.MethodParameter , org.springframework.core.MethodParameter ) ; assertNotEquals ( org.springframework.core.MethodParameter , org.springframework.core.MethodParameter ) ; assertNotEquals ( org.springframework.core.MethodParameter , org.springframework.core.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { assertEquals ( org.springframework.core.MethodParameter . hashCode ( ) , org.springframework.core.MethodParameter . hashCode ( ) ) ; assertEquals ( org.springframework.core.MethodParameter . hashCode ( ) , org.springframework.core.MethodParameter . hashCode ( ) ) ; assertEquals ( org.springframework.core.MethodParameter . hashCode ( ) , org.springframework.core.MethodParameter . hashCode ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.core.MethodParameterTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Long . java.lang.Class<java.lang.Long> ) ; MethodParameter org.springframework.core.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertEquals ( org.springframework.core.MethodParameter . hashCode ( ) , org.springframework.core.MethodParameter . hashCode ( ) ) ; assertNotEquals ( org.springframework.core.MethodParameter . hashCode ( ) , org.springframework.core.MethodParameter . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { assertEquals ( org.springframework.core.MethodParameter , MethodParameter . forMethodOrConstructor ( java.lang.reflect.Method , NUMBER ) ) ; assertEquals ( org.springframework.core.MethodParameter , MethodParameter . forMethodOrConstructor ( java.lang.reflect.Method , NUMBER ) ) ; assertEquals ( org.springframework.core.MethodParameter , MethodParameter . forExecutable ( java.lang.reflect.Method , NUMBER ) ) ; assertEquals ( org.springframework.core.MethodParameter , MethodParameter . forExecutable ( java.lang.reflect.Method , NUMBER ) ) ; assertEquals ( org.springframework.core.MethodParameter , MethodParameter . forParameter ( java.lang.reflect.Method . java.lang.reflect.Parameter[] ( ) [ NUMBER ] ) ) ; assertEquals ( org.springframework.core.MethodParameter , MethodParameter . forParameter ( java.lang.reflect.Method . java.lang.reflect.Parameter[] ( ) [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String , long long ) { return NUMBER ; }  <METHOD_END>
