<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = null ; try { ConfigurableApplicationContext sample.session.redis.ConfigurableApplicationContext = new SpringApplicationBuilder ( ) . sources ( SampleSessionRedisApplication .class ) . properties ( STRING ) . initializers ( new ServerPortInfoApplicationContextInitializer ( ) ) . run ( ) ; java.lang.String = sample.session.redis.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( ! boolean ( java.lang.RuntimeException ) ) { return; } throw java.lang.RuntimeException ; } java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING + java.lang.String + STRING ) ; RestTemplate sample.session.redis.RestTemplate = new RestTemplate ( ) ; ResponseEntity < java.lang.String > sample.session.redis.ResponseEntity<java.lang.String> = sample.session.redis.RestTemplate . getForEntity ( java.net.URI , java.lang.String .class ) ; java.lang.String java.lang.String = sample.session.redis.ResponseEntity<java.lang.String> . getBody ( ) ; HttpHeaders sample.session.redis.HttpHeaders = new HttpHeaders ( ) ; sample.session.redis.HttpHeaders . set ( STRING , sample.session.redis.ResponseEntity<java.lang.String> . getHeaders ( ) . getFirst ( STRING ) ) ; RequestEntity < java.lang.Void > sample.session.redis.RequestEntity<java.lang.Void> = new RequestEntity <> ( sample.session.redis.HttpHeaders , HttpMethod . GET , java.net.URI ) ; java.lang.String java.lang.String = sample.session.redis.RestTemplate . exchange ( sample.session.redis.RequestEntity<java.lang.Void> , java.lang.String .class ) . getBody ( ) ; assertThat ( java.lang.String ) . isEqualTo ( java.lang.String ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.String java.lang.String = sample.session.redis.RestTemplate . exchange ( sample.session.redis.RequestEntity<java.lang.Void> , java.lang.String .class ) . getBody ( ) ; assertThat ( java.lang.String ) . isNotEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof RedisConnectionFailureException ) { return false ; } return ( java.lang.Throwable . java.lang.Throwable ( ) == null || boolean ( java.lang.Throwable . java.lang.Throwable ( ) ) ) ; }  <METHOD_END>
