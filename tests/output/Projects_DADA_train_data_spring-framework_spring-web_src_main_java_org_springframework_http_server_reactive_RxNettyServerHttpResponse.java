<METHOD_START> public void ( HttpServerResponse < ByteBuf > org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> , NettyDataBufferFactory org.springframework.http.server.reactive.NettyDataBufferFactory ) { super( org.springframework.http.server.reactive.NettyDataBufferFactory ); Assert . notNull ( org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> , STRING ) ; this . org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> = org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.HttpServerResponse<?> < ? > org.springframework.http.server.reactive.HttpServerResponse<?> ( ) { return this . org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { HttpStatus org.springframework.http.server.reactive.HttpStatus = this . getStatusCode ( ) ; if ( org.springframework.http.server.reactive.HttpStatus != null ) { this . org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> . setStatus ( HttpResponseStatus . valueOf ( org.springframework.http.server.reactive.HttpStatus . value ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends DataBuffer > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer> ) { Observable < ByteBuf > org.springframework.http.server.reactive.Observable<org.springframework.http.server.reactive.ByteBuf> = RxReactiveStreams . toObservable ( org.springframework.http.server.reactive.Publisher<> ) . map ( NettyDataBufferFactory :: toByteBuf ) ; return Flux . from ( RxReactiveStreams . toPublisher ( this . org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> . write ( org.springframework.http.server.reactive.Observable<org.springframework.http.server.reactive.ByteBuf> , new org.springframework.http.server.reactive.RxNettyServerHttpResponse.FlushSelector ( long ) ) ) ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends Publisher < ? extends DataBuffer > > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>> ) { Flux < ByteBuf > org.springframework.http.server.reactive.Flux<org.springframework.http.server.reactive.ByteBuf> = Flux . from ( org.springframework.http.server.reactive.Publisher<> ) . flatMap ( publisher -> Flux . from ( publisher ) . map ( NettyDataBufferFactory :: toByteBuf ) . concatWith ( Mono . just ( FLUSH_SIGNAL ) ) ) ; Observable < ByteBuf > org.springframework.http.server.reactive.Observable<org.springframework.http.server.reactive.ByteBuf> = RxReactiveStreams . toObservable ( org.springframework.http.server.reactive.Flux<org.springframework.http.server.reactive.ByteBuf> ) ; ResponseContentWriter < ByteBuf > org.springframework.http.server.reactive.ResponseContentWriter<org.springframework.http.server.reactive.ByteBuf> = this . org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> . write ( org.springframework.http.server.reactive.Observable<org.springframework.http.server.reactive.ByteBuf> , bb -> bb == FLUSH_SIGNAL ) ; return Flux . from ( RxReactiveStreams . toPublisher ( org.springframework.http.server.reactive.ResponseContentWriter<org.springframework.http.server.reactive.ByteBuf> ) ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { for ( java.lang.String java.lang.String : getHeaders ( ) . keySet ( ) ) { for ( java.lang.String java.lang.String : getHeaders ( ) . get ( java.lang.String ) ) { this . org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> . addHeader ( java.lang.String , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { for ( java.lang.String java.lang.String : getCookies ( ) . keySet ( ) ) { for ( ResponseCookie org.springframework.http.server.reactive.ResponseCookie : getCookies ( ) . get ( java.lang.String ) ) { Cookie org.springframework.http.server.reactive.Cookie = new DefaultCookie ( java.lang.String , org.springframework.http.server.reactive.ResponseCookie . getValue ( ) ) ; if ( ! org.springframework.http.server.reactive.ResponseCookie . getMaxAge ( ) . isNegative ( ) ) { org.springframework.http.server.reactive.Cookie . setMaxAge ( org.springframework.http.server.reactive.ResponseCookie . getMaxAge ( ) . getSeconds ( ) ) ; } org.springframework.http.server.reactive.ResponseCookie . getDomain ( ) . ifPresent ( org.springframework.http.server.reactive.Cookie :: setDomain ) ; org.springframework.http.server.reactive.ResponseCookie . getPath ( ) . ifPresent ( org.springframework.http.server.reactive.Cookie :: setPath ) ; org.springframework.http.server.reactive.Cookie . setSecure ( org.springframework.http.server.reactive.ResponseCookie . isSecure ( ) ) ; org.springframework.http.server.reactive.Cookie . setHttpOnly ( org.springframework.http.server.reactive.ResponseCookie . isHttpOnly ( ) ) ; this . org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> . addCookie ( org.springframework.http.server.reactive.Cookie ) ; } } }  <METHOD_END>
<METHOD_START> public void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ByteBuf org.springframework.http.server.reactive.ByteBuf ) { this . long += org.springframework.http.server.reactive.ByteBuf . readableBytes ( ) ; if ( this . long >= this . long ) { this . long = NUMBER ; return true ; } return false ; }  <METHOD_END>
