<METHOD_START> @ Test public void void ( ) { Assert . assertNull ( DateTimeConverters . JodaDateTimeConverter . INSTANCE . convert ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DateTime org.springframework.data.solr.core.convert.DateTime = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) ; Assert . assertEquals ( STRING , DateTimeConverters . JodaDateTimeConverter . INSTANCE . convert ( org.springframework.data.solr.core.convert.DateTime ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; DateTime org.springframework.data.solr.core.convert.DateTime = DateTimeConverters . StringToJodaDateTimeConverter . INSTANCE . convert ( java.lang.String ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.DateTime , IsEqual . equalTo ( new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertNull ( DateTimeConverters . DateToJodaDateTimeConverter . INSTANCE . convert ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertNull ( DateTimeConverters . DateToLocalDateTimeConverter . INSTANCE . convert ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertNull ( DateTimeConverters . StringToJodaDateTimeConverter . INSTANCE . convert ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertNull ( DateTimeConverters . JodaLocalDateTimeConverter . INSTANCE . convert ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LocalDateTime org.springframework.data.solr.core.convert.LocalDateTime = new LocalDateTime ( new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) . getMillis ( ) , DateTimeZone . UTC ) ; Assert . assertEquals ( STRING , DateTimeConverters . JodaLocalDateTimeConverter . INSTANCE . convert ( org.springframework.data.solr.core.convert.LocalDateTime ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertNull ( DateTimeConverters . JavaDateConverter . INSTANCE . convert ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DateTime org.springframework.data.solr.core.convert.DateTime = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar . void ( org.springframework.data.solr.core.convert.DateTime . getMillis ( ) ) ; Assert . assertEquals ( STRING , DateTimeConverters . JavaDateConverter . INSTANCE . convert ( java.util.Calendar . java.util.Date ( ) ) ) ; }  <METHOD_END>
