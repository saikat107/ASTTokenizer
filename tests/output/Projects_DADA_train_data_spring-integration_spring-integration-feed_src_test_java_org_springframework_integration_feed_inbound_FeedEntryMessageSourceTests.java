<METHOD_START> @ Before public void void ( ) { java.io.File java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) + STRING , STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new ClassPathResource ( STRING ) . getURL ( ) ; FeedEntryMessageSource org.springframework.integration.feed.inbound.FeedEntryMessageSource = new FeedEntryMessageSource ( java.net.URL , STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new ClassPathResource ( STRING ) . getURL ( ) ; FeedEntryMessageSource org.springframework.integration.feed.inbound.FeedEntryMessageSource = new FeedEntryMessageSource ( java.net.URL , STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanName ( STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . afterPropertiesSet ( ) ; assertNull ( org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathResource org.springframework.integration.feed.inbound.ClassPathResource = new ClassPathResource ( STRING ) ; FeedEntryMessageSource org.springframework.integration.feed.inbound.FeedEntryMessageSource = new FeedEntryMessageSource ( org.springframework.integration.feed.inbound.ClassPathResource , STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setComponentName ( STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . afterPropertiesSet ( ) ; Message < SyndEntry > org.springframework.integration.feed.inbound.Message<org.springframework.integration.feed.inbound.SyndEntry> = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ; Message < SyndEntry > org.springframework.integration.feed.inbound.Message<org.springframework.integration.feed.inbound.SyndEntry> = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ; Message < SyndEntry > org.springframework.integration.feed.inbound.Message<org.springframework.integration.feed.inbound.SyndEntry> = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ; long long = org.springframework.integration.feed.inbound.Message<org.springframework.integration.feed.inbound.SyndEntry> . getPayload ( ) . getPublishedDate ( ) . getTime ( ) ; long long = org.springframework.integration.feed.inbound.Message<org.springframework.integration.feed.inbound.SyndEntry> . getPayload ( ) . getPublishedDate ( ) . getTime ( ) ; long long = org.springframework.integration.feed.inbound.Message<org.springframework.integration.feed.inbound.SyndEntry> . getPayload ( ) . getPublishedDate ( ) . getTime ( ) ; assertTrue ( long < long ) ; assertTrue ( long < long ) ; assertNull ( org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathResource org.springframework.integration.feed.inbound.ClassPathResource = new ClassPathResource ( STRING ) ; FeedEntryMessageSource org.springframework.integration.feed.inbound.FeedEntryMessageSource = new FeedEntryMessageSource ( org.springframework.integration.feed.inbound.ClassPathResource , STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanName ( STRING ) ; PropertiesPersistingMetadataStore org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore = new PropertiesPersistingMetadataStore ( ) ; org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore . afterPropertiesSet ( ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setMetadataStore ( org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . afterPropertiesSet ( ) ; SyndEntry org.springframework.integration.feed.inbound.SyndEntry = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) . getPayload ( ) ; assertNull ( org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ) ; assertEquals ( STRING , org.springframework.integration.feed.inbound.SyndEntry . getTitle ( ) . trim ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getPublishedDate ( ) . getTime ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getUpdatedDate ( ) . getTime ( ) ) ; org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore . destroy ( ) ; org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore . afterPropertiesSet ( ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource = new FeedEntryMessageSource ( org.springframework.integration.feed.inbound.ClassPathResource , STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanName ( STRING ) ; org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore = new PropertiesPersistingMetadataStore ( ) ; org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore . afterPropertiesSet ( ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setMetadataStore ( org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . afterPropertiesSet ( ) ; assertNull ( org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathResource org.springframework.integration.feed.inbound.ClassPathResource = new ClassPathResource ( STRING ) ; FeedEntryMessageSource org.springframework.integration.feed.inbound.FeedEntryMessageSource = new FeedEntryMessageSource ( org.springframework.integration.feed.inbound.ClassPathResource , STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanName ( STRING ) ; PropertiesPersistingMetadataStore org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore = new PropertiesPersistingMetadataStore ( ) ; org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore . afterPropertiesSet ( ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setMetadataStore ( org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . afterPropertiesSet ( ) ; SyndEntry org.springframework.integration.feed.inbound.SyndEntry = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) . getPayload ( ) ; SyndEntry org.springframework.integration.feed.inbound.SyndEntry = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) . getPayload ( ) ; SyndEntry org.springframework.integration.feed.inbound.SyndEntry = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) . getPayload ( ) ; assertNull ( org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ) ; assertEquals ( STRING , org.springframework.integration.feed.inbound.SyndEntry . getTitle ( ) . trim ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getPublishedDate ( ) . getTime ( ) ) ; assertEquals ( STRING , org.springframework.integration.feed.inbound.SyndEntry . getTitle ( ) . trim ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getPublishedDate ( ) . getTime ( ) ) ; assertEquals ( STRING , org.springframework.integration.feed.inbound.SyndEntry . getTitle ( ) . trim ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getPublishedDate ( ) . getTime ( ) ) ; org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore . destroy ( ) ; org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore . afterPropertiesSet ( ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource = new FeedEntryMessageSource ( org.springframework.integration.feed.inbound.ClassPathResource , STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanName ( STRING ) ; org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore = new PropertiesPersistingMetadataStore ( ) ; org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore . afterPropertiesSet ( ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setMetadataStore ( org.springframework.integration.feed.inbound.PropertiesPersistingMetadataStore ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . afterPropertiesSet ( ) ; assertNull ( org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ) ; assertNull ( org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ) ; assertNull ( org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathResource org.springframework.integration.feed.inbound.ClassPathResource = new ClassPathResource ( STRING ) ; FeedEntryMessageSource org.springframework.integration.feed.inbound.FeedEntryMessageSource = new FeedEntryMessageSource ( org.springframework.integration.feed.inbound.ClassPathResource , STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanName ( STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . afterPropertiesSet ( ) ; SyndEntry org.springframework.integration.feed.inbound.SyndEntry = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) . getPayload ( ) ; SyndEntry org.springframework.integration.feed.inbound.SyndEntry = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) . getPayload ( ) ; SyndEntry org.springframework.integration.feed.inbound.SyndEntry = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) . getPayload ( ) ; assertNull ( org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ) ; assertEquals ( STRING , org.springframework.integration.feed.inbound.SyndEntry . getTitle ( ) . trim ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getPublishedDate ( ) . getTime ( ) ) ; assertEquals ( STRING , org.springframework.integration.feed.inbound.SyndEntry . getTitle ( ) . trim ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getPublishedDate ( ) . getTime ( ) ) ; assertEquals ( STRING , org.springframework.integration.feed.inbound.SyndEntry . getTitle ( ) . trim ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getPublishedDate ( ) . getTime ( ) ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource = new FeedEntryMessageSource ( org.springframework.integration.feed.inbound.ClassPathResource , STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanName ( STRING ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.feed.inbound.FeedEntryMessageSource . afterPropertiesSet ( ) ; org.springframework.integration.feed.inbound.SyndEntry = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) . getPayload ( ) ; org.springframework.integration.feed.inbound.SyndEntry = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) . getPayload ( ) ; org.springframework.integration.feed.inbound.SyndEntry = org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) . getPayload ( ) ; assertNull ( org.springframework.integration.feed.inbound.FeedEntryMessageSource . receive ( ) ) ; assertEquals ( STRING , org.springframework.integration.feed.inbound.SyndEntry . getTitle ( ) . trim ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getPublishedDate ( ) . getTime ( ) ) ; assertEquals ( STRING , org.springframework.integration.feed.inbound.SyndEntry . getTitle ( ) . trim ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getPublishedDate ( ) . getTime ( ) ) ; assertEquals ( STRING , org.springframework.integration.feed.inbound.SyndEntry . getTitle ( ) . trim ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.feed.inbound.SyndEntry . getPublishedDate ( ) . getTime ( ) ) ; }  <METHOD_END>
