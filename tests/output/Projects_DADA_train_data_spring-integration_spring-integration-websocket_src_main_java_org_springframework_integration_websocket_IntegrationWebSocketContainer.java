<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( WebSocketListener org.springframework.integration.websocket.WebSocketListener ) { Assert . state ( this . org.springframework.integration.websocket.WebSocketListener == null || this . org.springframework.integration.websocket.WebSocketListener == org.springframework.integration.websocket.WebSocketListener , STRING ) ; this . org.springframework.integration.websocket.WebSocketListener = org.springframework.integration.websocket.WebSocketListener ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.util.List<java.lang.String> . void ( ) ; void ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; if ( this . org.springframework.integration.websocket.WebSocketListener != null ) { java.util.List<java.lang.String> . boolean ( this . org.springframework.integration.websocket.WebSocketListener . getSubProtocols ( ) ) ; } java.util.List<java.lang.String> . boolean ( this . java.util.List<java.lang.String> ) ; return java.util.Collections . java.util.List<java.lang.String> ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> < java.lang.String , WebSocketSession > java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> ( ) { return java.util.Collections . java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> ( this . java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.WebSocketSession org.springframework.integration.websocket.WebSocketSession ( java.lang.String java.lang.String ) { WebSocketSession org.springframework.integration.websocket.WebSocketSession = this . java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> . get ( java.lang.String ) ; Assert . notNull ( org.springframework.integration.websocket.WebSocketSession , STRING + java.lang.String + STRING ) ; return org.springframework.integration.websocket.WebSocketSession ; }  <METHOD_END>
<METHOD_START> public void void ( WebSocketSession org.springframework.integration.websocket.WebSocketSession , CloseStatus org.springframework.integration.websocket.CloseStatus ) throws java.lang.Exception { org.springframework.integration.websocket.WebSocketSession . close ( org.springframework.integration.websocket.CloseStatus ) ; this . org.springframework.integration.websocket.WebSocketHandler . afterConnectionClosed ( org.springframework.integration.websocket.WebSocketSession , org.springframework.integration.websocket.CloseStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { try { for ( WebSocketSession org.springframework.integration.websocket.WebSocketSession : this . java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> . values ( ) ) { try { org.springframework.integration.websocket.WebSocketSession . close ( CloseStatus . GOING_AWAY ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.integration.websocket.Log . error ( STRING + org.springframework.integration.websocket.WebSocketSession . getId ( ) + STRING + java.lang.Exception . java.lang.String ( ) ) ; } } } finally { this . java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> . clear ( ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return org.springframework.integration.websocket.IntegrationWebSocketContainer .this . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.WebSocketSession ) throws java.lang.Exception { org.springframework.integration.websocket.WebSocketSession = new ConcurrentWebSocketSessionDecorator ( org.springframework.integration.websocket.WebSocketSession , org.springframework.integration.websocket.IntegrationWebSocketContainer .this . int , org.springframework.integration.websocket.IntegrationWebSocketContainer .this . int ) ; org.springframework.integration.websocket.IntegrationWebSocketContainer .this . java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> . put ( org.springframework.integration.websocket.WebSocketSession . getId ( ) , org.springframework.integration.websocket.WebSocketSession ) ; if ( org.springframework.integration.websocket.IntegrationWebSocketContainer .this . org.springframework.integration.websocket.Log . isDebugEnabled ( ) ) { org.springframework.integration.websocket.IntegrationWebSocketContainer .this . org.springframework.integration.websocket.Log . debug ( STRING + org.springframework.integration.websocket.WebSocketSession . getId ( ) + STRING + org.springframework.integration.websocket.IntegrationWebSocketContainer .this . java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> . size ( ) ) ; } if ( org.springframework.integration.websocket.IntegrationWebSocketContainer .this . org.springframework.integration.websocket.WebSocketListener != null ) { org.springframework.integration.websocket.IntegrationWebSocketContainer .this . org.springframework.integration.websocket.WebSocketListener . afterSessionStarted ( org.springframework.integration.websocket.WebSocketSession ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.WebSocketSession , CloseStatus org.springframework.integration.websocket.CloseStatus ) throws java.lang.Exception { WebSocketSession org.springframework.integration.websocket.WebSocketSession = org.springframework.integration.websocket.IntegrationWebSocketContainer .this . java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> . remove ( org.springframework.integration.websocket.WebSocketSession . getId ( ) ) ; if ( org.springframework.integration.websocket.WebSocketSession != null ) { if ( org.springframework.integration.websocket.IntegrationWebSocketContainer .this . org.springframework.integration.websocket.WebSocketListener != null ) { org.springframework.integration.websocket.IntegrationWebSocketContainer .this . org.springframework.integration.websocket.WebSocketListener . afterSessionEnded ( org.springframework.integration.websocket.WebSocketSession , org.springframework.integration.websocket.CloseStatus ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.WebSocketSession , java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { org.springframework.integration.websocket.IntegrationWebSocketContainer .this . java.util.Map<java.lang.String,org.springframework.integration.websocket.WebSocketSession> . remove ( org.springframework.integration.websocket.WebSocketSession . getId ( ) ) ; throw new java.lang.Exception ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.WebSocketSession , WebSocketMessage < ? > org.springframework.integration.websocket.WebSocketMessage<?> ) throws java.lang.Exception { if ( org.springframework.integration.websocket.IntegrationWebSocketContainer .this . org.springframework.integration.websocket.WebSocketListener != null ) { org.springframework.integration.websocket.IntegrationWebSocketContainer .this . org.springframework.integration.websocket.WebSocketListener . onMessage ( org.springframework.integration.websocket.WebSocketSession , org.springframework.integration.websocket.WebSocketMessage<> ) ; } else if ( org.springframework.integration.websocket.IntegrationWebSocketContainer .this . org.springframework.integration.websocket.Log . isInfoEnabled ( ) ) { org.springframework.integration.websocket.IntegrationWebSocketContainer .this . org.springframework.integration.websocket.Log . info ( STRING + STRING + org.springframework.integration.websocket.WebSocketMessage<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
