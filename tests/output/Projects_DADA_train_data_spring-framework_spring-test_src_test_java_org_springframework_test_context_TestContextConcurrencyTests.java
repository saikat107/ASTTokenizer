<METHOD_START> @ Test public void void ( ) { TestContextManager org.springframework.test.context.TestContextManager = new TestContextManager ( org.springframework.test.context.TestContextConcurrencyTests.TestCase .class ) ; java.util.stream.IntStream . java.util.stream.IntStream ( NUMBER , NUMBER ) . void ( int -> { java.util.Set<java.lang.String> . void ( ) ; java.util.stream.Stream<java.lang.reflect.Method> ( org.springframework.test.context.TestContextConcurrencyTests.TestCase .class . java.lang.reflect.Method[] ( ) ) . java.util.stream.Stream<java.lang.reflect.Method> ( ) . void ( java.lang.reflect.Method -> { try { org.springframework.test.context.TestContextManager . beforeTestClass ( ) ; org.springframework.test.context.TestContextManager . beforeTestMethod ( org.springframework.test.context.TestContextConcurrencyTests.TestCase , java.lang.reflect.Method ) ; org.springframework.test.context.TestContextManager . afterTestMethod ( org.springframework.test.context.TestContextConcurrencyTests.TestCase , java.lang.reflect.Method , null ) ; org.springframework.test.context.TestContextManager . afterTestClass ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } } ) ; assertThat ( java.util.Set<java.lang.String> , equalTo ( java.util.Set<java.lang.String> ) ) ; } ) ; assertEquals ( NUMBER , org.springframework.test.context.TestContextManager . getTestContext ( ) . attributeNames ( ) . length ) ; }  <METHOD_END>
<METHOD_START> void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestContext org.springframework.test.context.TestContext ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.test.context.TestContext . getTestMethod ( ) . getName ( ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; org.springframework.test.context.TestContext . setAttribute ( STRING , java.lang.String ) ; this . java.lang.ThreadLocal<java.lang.String> . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TestContext org.springframework.test.context.TestContext ) throws java.lang.Exception { assertEquals ( this . java.lang.ThreadLocal<java.lang.String> . java.lang.String ( ) , org.springframework.test.context.TestContext . getAttribute ( STRING ) ) ; }  <METHOD_END>
