<METHOD_START> @ Before public void void ( ) { when ( org.springframework.integration.aggregator.MessageChannel . send ( isA ( Message .class ) ) ) . thenReturn ( true ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.MessageChannel ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . setSendTimeout ( - NUMBER ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel ) . send ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.aggregator.AggregatingMessageHandler . setReleaseStrategy ( new MessageCountReleaseStrategy ( ) ) ; MessageChannel org.springframework.integration.aggregator.MessageChannel = mock ( MessageChannel .class ) ; when ( org.springframework.integration.aggregator.MessageChannel . send ( any ( Message .class ) ) ) . thenReturn ( true ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.MessageChannel ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel ) . send ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel , never ( ) ) . send ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel ) . send ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.aggregator.AggregatingMessageHandler . setReleaseStrategy ( new MessageCountReleaseStrategy ( NUMBER ) ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setCorrelationId ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setCorrelationId ( STRING ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setCorrelationId ( STRING ) . build ( ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel , never ( ) ) . send ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel ) . send ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel , never ( ) ) . send ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel , never ( ) ) . send ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel , never ( ) ) . send ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel ) . send ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel ) . send ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel , never ( ) ) . send ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel , never ( ) ) . send ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel ) . send ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel ) . send ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel , never ( ) ) . send ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel ) . send ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageChannel ) . send ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.aggregator.Message<?> < ? > org.springframework.integration.aggregator.Message<?> ( java.lang.Object java.lang.Object , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer ) { return MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.Object ) . setSequenceNumber ( java.lang.Integer ) . setSequenceSize ( java.lang.Integer ) . build ( ) ; }  <METHOD_END>
