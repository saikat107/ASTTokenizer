<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.test.web.reactive.ConfigurableApplicationContext , MergedContextConfiguration org.springframework.boot.test.web.reactive.MergedContextConfiguration ) { SpringBootTest org.springframework.boot.test.web.reactive.SpringBootTest = AnnotatedElementUtils . getMergedAnnotation ( org.springframework.boot.test.web.reactive.MergedContextConfiguration . getTestClass ( ) , SpringBootTest .class ) ; if ( org.springframework.boot.test.web.reactive.SpringBootTest . webEnvironment ( ) . isEmbedded ( ) ) { void ( org.springframework.boot.test.web.reactive.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.boot.test.web.reactive.ConfigurableApplicationContext ) { ConfigurableListableBeanFactory org.springframework.boot.test.web.reactive.ConfigurableListableBeanFactory = org.springframework.boot.test.web.reactive.ConfigurableApplicationContext . getBeanFactory ( ) ; if ( org.springframework.boot.test.web.reactive.ConfigurableListableBeanFactory instanceof BeanDefinitionRegistry ) { void ( org.springframework.boot.test.web.reactive.ConfigurableApplicationContext , ( BeanDefinitionRegistry ) org.springframework.boot.test.web.reactive.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.boot.test.web.reactive.ConfigurableApplicationContext , BeanDefinitionRegistry org.springframework.boot.test.web.reactive.BeanDefinitionRegistry ) { org.springframework.boot.test.web.reactive.BeanDefinitionRegistry . registerBeanDefinition ( WebTestClient .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.boot.test.web.reactive.WebTestClientContextCustomizer.WebTestClientFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Class<? extends org.springframework.boot.test.web.reactive.WebTestClientContextCustomizer> ( ) . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null || java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) != java.lang.Class<? extends org.springframework.boot.test.web.reactive.WebTestClientContextCustomizer> ( ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.boot.test.web.reactive.ApplicationContext )				throws org.springframework.boot.test.web.reactive.BeansException { this . org.springframework.boot.test.web.reactive.ApplicationContext = org.springframework.boot.test.web.reactive.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return WebTestClient .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.web.reactive.WebTestClient org.springframework.boot.test.web.reactive.WebTestClient ( ) java.lang.Exception { if ( this . org.springframework.boot.test.web.reactive.WebTestClient == null ) { this . org.springframework.boot.test.web.reactive.WebTestClient = org.springframework.boot.test.web.reactive.WebTestClient ( ) ; } return this . org.springframework.boot.test.web.reactive.WebTestClient ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.web.reactive.WebTestClient org.springframework.boot.test.web.reactive.WebTestClient ( ) { boolean boolean = boolean ( this . org.springframework.boot.test.web.reactive.ApplicationContext ) ; java.lang.String java.lang.String = this . org.springframework.boot.test.web.reactive.ApplicationContext . getEnvironment ( ) . getProperty ( STRING , STRING ) ; java.lang.String java.lang.String = ( boolean ? STRING : STRING ) + STRING + java.lang.String ; return WebTestClient . bindToServer ( ) . baseUrl ( java.lang.String ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ApplicationContext org.springframework.boot.test.web.reactive.ApplicationContext ) { try { AbstractReactiveWebServerFactory org.springframework.boot.test.web.reactive.AbstractReactiveWebServerFactory = org.springframework.boot.test.web.reactive.ApplicationContext . getBean ( AbstractReactiveWebServerFactory .class ) ; return org.springframework.boot.test.web.reactive.AbstractReactiveWebServerFactory . getSsl ( ) != null && org.springframework.boot.test.web.reactive.AbstractReactiveWebServerFactory . getSsl ( ) . isEnabled ( ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.test.web.reactive.NoSuchBeanDefinitionException ) { return false ; } }  <METHOD_END>
