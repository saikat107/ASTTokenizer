<METHOD_START> @ After public void void ( ) { this . org.springframework.transaction.annotation.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean = org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean ( ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.transaction.annotation.ConfigurableApplicationContext . getBeansWithAnnotation ( Service .class ) ; assertTrue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean = org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean ( ) ; CallCountingTransactionManager org.springframework.transaction.annotation.CallCountingTransactionManager = ( CallCountingTransactionManager ) org.springframework.transaction.annotation.ConfigurableApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , NUMBER , ptm . begun ) ; org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean . java.util.Collection<?> ( ) ; assertEquals ( STRING , NUMBER , ptm . begun ) ; assertEquals ( STRING , NUMBER , ptm . commits ) ; org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean . java.lang.String ( ) ; assertEquals ( STRING , NUMBER , ptm . begun ) ; try { org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean . void ( new java.lang.IllegalArgumentException ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { assertEquals ( STRING , NUMBER , ptm . begun ) ; assertEquals ( STRING , NUMBER , ptm . rollbacks ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean = org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean ( ) ; CallCountingTransactionManager org.springframework.transaction.annotation.CallCountingTransactionManager = ( CallCountingTransactionManager ) org.springframework.transaction.annotation.ConfigurableApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , NUMBER , ptm . begun ) ; org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean . void ( ) ; assertEquals ( STRING , NUMBER , ptm . begun ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.management.MBeanServer javax.management.MBeanServer = java.lang.management.ManagementFactory . javax.management.MBeanServer ( ) ; assertEquals ( STRING , javax.management.MBeanServer . java.lang.Object ( javax.management.ObjectName . javax.management.ObjectName ( STRING ) , STRING , new java.lang.Object [ NUMBER ] , new java.lang.String [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.transaction.annotation.ConfigurableApplicationContext . containsBean ( TransactionManagementConfigUtils . TRANSACTIONAL_EVENT_LISTENER_FACTORY_BEAN_NAME ) ) ; assertEquals ( NUMBER , this . org.springframework.transaction.annotation.ConfigurableApplicationContext . getBeansOfType ( TransactionalEventListenerFactory .class ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean ( ) { return ( org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests.TransactionalTestBean ) org.springframework.transaction.annotation.ConfigurableApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Transactional ( readOnly = true ) public java.util.Collection<?> < ? > java.util.Collection<?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Transactional ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Transactional ( transactionManager = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Transactional public void void ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Throwable { throw java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> @ ManagedOperation public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Transactional protected void void ( ) {		}  <METHOD_END>
