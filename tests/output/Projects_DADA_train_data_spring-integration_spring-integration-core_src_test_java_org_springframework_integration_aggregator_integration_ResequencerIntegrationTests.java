<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.aggregator.integration.MessageChannel = org.springframework.integration.aggregator.integration.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = org.springframework.integration.aggregator.integration.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; EventDrivenConsumer org.springframework.integration.aggregator.integration.EventDrivenConsumer = org.springframework.integration.aggregator.integration.ApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; ResequencingMessageHandler org.springframework.integration.aggregator.integration.ResequencingMessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.aggregator.integration.EventDrivenConsumer , STRING , ResequencingMessageHandler .class ) ; MessageGroupStore org.springframework.integration.aggregator.integration.MessageGroupStore = TestUtils . getPropertyValue ( org.springframework.integration.aggregator.integration.ResequencingMessageHandler , STRING , MessageGroupStore .class ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . build ( ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( org.springframework.integration.aggregator.integration.Message<> ) ; assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( org.springframework.integration.aggregator.integration.Message<> ) ; org.springframework.integration.aggregator.integration.Message<?> = org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertEquals ( ( java.lang.Integer ) NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.integration.Message<> ) . getSequenceNumber ( ) ) ; assertFalse ( org.springframework.integration.aggregator.integration.Message<> . getHeaders ( ) . containsKey ( STRING ) ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( org.springframework.integration.aggregator.integration.Message<> ) ; org.springframework.integration.aggregator.integration.Message<?> = org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; org.springframework.integration.aggregator.integration.Message<?> = org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertEquals ( ( java.lang.Integer ) NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.integration.Message<> ) . getSequenceNumber ( ) ) ; assertTrue ( org.springframework.integration.aggregator.integration.Message<> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( ( java.lang.Integer ) NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.integration.Message<> ) . getSequenceNumber ( ) ) ; assertFalse ( org.springframework.integration.aggregator.integration.Message<> . getHeaders ( ) . containsKey ( STRING ) ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( org.springframework.integration.aggregator.integration.Message<> ) ; assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( org.springframework.integration.aggregator.integration.Message<> ) ; assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( org.springframework.integration.aggregator.integration.Message<> ) ; org.springframework.integration.aggregator.integration.Message<?> = org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; org.springframework.integration.aggregator.integration.Message<?> = org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; org.springframework.integration.aggregator.integration.Message<?> = org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertEquals ( ( java.lang.Integer ) NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.integration.Message<> ) . getSequenceNumber ( ) ) ; assertTrue ( org.springframework.integration.aggregator.integration.Message<> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( ( java.lang.Integer ) NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.integration.Message<> ) . getSequenceNumber ( ) ) ; assertFalse ( org.springframework.integration.aggregator.integration.Message<> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( ( java.lang.Integer ) NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.integration.Message<> ) . getSequenceNumber ( ) ) ; assertFalse ( org.springframework.integration.aggregator.integration.Message<> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.integration.MessageGroupStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.aggregator.integration.MessageChannel = org.springframework.integration.aggregator.integration.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = org.springframework.integration.aggregator.integration.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; EventDrivenConsumer org.springframework.integration.aggregator.integration.EventDrivenConsumer = org.springframework.integration.aggregator.integration.ApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; ResequencingMessageHandler org.springframework.integration.aggregator.integration.ResequencingMessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.aggregator.integration.EventDrivenConsumer , STRING , ResequencingMessageHandler .class ) ; MessageGroupStore org.springframework.integration.aggregator.integration.MessageGroupStore = TestUtils . getPropertyValue ( org.springframework.integration.aggregator.integration.ResequencingMessageHandler , STRING , MessageGroupStore .class ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . build ( ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( org.springframework.integration.aggregator.integration.Message<> ) ; assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( org.springframework.integration.aggregator.integration.Message<> ) ; assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( org.springframework.integration.aggregator.integration.Message<> ) ; assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.integration.MessageGroupStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.aggregator.integration.MessageChannel = org.springframework.integration.aggregator.integration.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = org.springframework.integration.aggregator.integration.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.aggregator.integration.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . build ( ) ; org.springframework.integration.aggregator.integration.MessageChannel . send ( org.springframework.integration.aggregator.integration.Message<> ) ; org.springframework.integration.aggregator.integration.Message<?> = org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.integration.Message<> ) ; assertEquals ( ( java.lang.Integer ) NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.aggregator.integration.Message<> ) . getSequenceNumber ( ) ) ; }  <METHOD_END>
