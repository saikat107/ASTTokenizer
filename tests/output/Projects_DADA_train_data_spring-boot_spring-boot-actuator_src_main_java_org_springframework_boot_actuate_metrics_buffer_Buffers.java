<METHOD_START> public void void ( final java.util.function.Predicate<java.lang.String> < java.lang.String > java.util.function.Predicate<java.lang.String> , final java.util.function.BiConsumer<java.lang.String,B> < java.lang.String , B > java.util.function.BiConsumer<java.lang.String,B> ) { this . java.util.concurrent.ConcurrentHashMap<java.lang.String,B> . void ( new java.util.function.BiConsumer<java.lang.String,B> < java.lang.String , B > ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String , B B ) { if ( java.util.function.Predicate<java.lang.String> . boolean ( java.lang.String ) ) { java.util.function.BiConsumer<java.lang.String,B> . void ( java.lang.String , B ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , B B ) { if ( java.util.function.Predicate<java.lang.String> . boolean ( java.lang.String ) ) { java.util.function.BiConsumer<java.lang.String,B> . void ( java.lang.String , B ) ; } }  <METHOD_END>
<METHOD_START> public B B ( final java.lang.String java.lang.String ) { return this . java.util.concurrent.ConcurrentHashMap<java.lang.String,B> . B ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.concurrent.ConcurrentHashMap<java.lang.String,B> . int ( ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( final java.lang.String java.lang.String , final java.util.function.Consumer<B> < B > java.util.function.Consumer<B> ) { B B = this . java.util.concurrent.ConcurrentHashMap<java.lang.String,B> . B ( java.lang.String ) ; if ( B == null ) { B = this . java.util.concurrent.ConcurrentHashMap<java.lang.String,B> . B ( java.lang.String , new java.util.function.Function<java.lang.String,B> < java.lang.String , B > ( ) { @ java.lang.Override public B B ( java.lang.String java.lang.String ) { return B ( ) ; } } ) ; } java.util.function.Consumer<B> . void ( B ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public B B ( java.lang.String java.lang.String ) { return B ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract B B ( )  <METHOD_END>
