<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , WebMvcAutoConfiguration .class , JacksonAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class , EndpointAutoConfiguration .class , EndpointWebMvcAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class , RestTemplateAutoConfiguration .class , EndpointWebMvcManagementContextConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; EndpointHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( STRING , EndpointHandlerMapping .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping . getPrefix ( ) ) . isEmpty ( ) ; MvcEndpointSecurityInterceptor org.springframework.boot.actuate.autoconfigure.MvcEndpointSecurityInterceptor = ( MvcEndpointSecurityInterceptor ) ReflectionTestUtils . getField ( org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping , STRING ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.boot.actuate.autoconfigure.MvcEndpointSecurityInterceptor , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.boot.actuate.autoconfigure.MvcEndpointSecurityInterceptor ) ; assertThat ( java.lang.Object ) . isEqualTo ( false ) ; assertThat ( java.util.List<java.lang.String> ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( MvcEndpointSecurityInterceptor org.springframework.boot.actuate.autoconfigure.MvcEndpointSecurityInterceptor ) { return ( java.util.List<java.lang.String> < java.lang.String > ) ReflectionTestUtils . getField ( org.springframework.boot.actuate.autoconfigure.MvcEndpointSecurityInterceptor , STRING ) ; }  <METHOD_END>
