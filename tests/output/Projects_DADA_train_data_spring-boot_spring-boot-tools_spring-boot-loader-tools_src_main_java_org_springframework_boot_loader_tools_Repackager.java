<METHOD_START> public void ( java.io.File java.io.File ) { this( java.io.File , null ); }  <METHOD_END>
<METHOD_START> public void ( java.io.File java.io.File , LayoutFactory org.springframework.boot.loader.tools.LayoutFactory ) { if ( java.io.File == null || ! java.io.File . boolean ( ) || ! java.io.File . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.io.File = java.io.File . java.io.File ( ) ; this . org.springframework.boot.loader.tools.LayoutFactory = org.springframework.boot.loader.tools.LayoutFactory ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.boot.loader.tools.Repackager.MainClassTimeoutWarningListener org.springframework.boot.loader.tools.Repackager.MainClassTimeoutWarningListener ) { this . java.util.List<org.springframework.boot.loader.tools.Repackager.MainClassTimeoutWarningListener> . boolean ( org.springframework.boot.loader.tools.Repackager.MainClassTimeoutWarningListener ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( Layout org.springframework.boot.loader.tools.Layout ) { if ( org.springframework.boot.loader.tools.Layout == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . org.springframework.boot.loader.tools.Layout = org.springframework.boot.loader.tools.Layout ; }  <METHOD_END>
<METHOD_START> public void void ( LayoutFactory org.springframework.boot.loader.tools.LayoutFactory ) { this . org.springframework.boot.loader.tools.LayoutFactory = org.springframework.boot.loader.tools.LayoutFactory ; }  <METHOD_END>
<METHOD_START> public void void ( Libraries org.springframework.boot.loader.tools.Libraries ) throws java.io.IOException { void ( this . java.io.File , org.springframework.boot.loader.tools.Libraries ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File , Libraries org.springframework.boot.loader.tools.Libraries ) throws java.io.IOException { void ( java.io.File , org.springframework.boot.loader.tools.Libraries , null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File , Libraries org.springframework.boot.loader.tools.Libraries , LaunchScript org.springframework.boot.loader.tools.LaunchScript ) throws java.io.IOException { if ( java.io.File == null || java.io.File . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( org.springframework.boot.loader.tools.Libraries == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . org.springframework.boot.loader.tools.Layout == null ) { this . org.springframework.boot.loader.tools.Layout = org.springframework.boot.loader.tools.LayoutFactory ( ) . getLayout ( this . java.io.File ) ; } if ( boolean ( ) ) { return; } java.io.File = java.io.File . java.io.File ( ) ; java.io.File java.io.File = this . java.io.File ; if ( this . java.io.File . boolean ( java.io.File ) ) { java.io.File = java.io.File ( ) ; java.io.File . boolean ( ) ; void ( this . java.io.File , java.io.File ) ; } java.io.File . boolean ( ) ; try { java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; try { void ( java.util.jar.JarFile , java.io.File , org.springframework.boot.loader.tools.Libraries , org.springframework.boot.loader.tools.LaunchScript ) ; } finally { java.util.jar.JarFile . void ( ) ; } } finally { if ( ! this . boolean && ! this . java.io.File . boolean ( java.io.File ) ) { void ( java.io.File ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.loader.tools.LayoutFactory org.springframework.boot.loader.tools.LayoutFactory ( ) { if ( this . org.springframework.boot.loader.tools.LayoutFactory != null ) { return this . org.springframework.boot.loader.tools.LayoutFactory ; } java.util.List<org.springframework.boot.loader.tools.LayoutFactory> < LayoutFactory > java.util.List<org.springframework.boot.loader.tools.LayoutFactory> = SpringFactoriesLoader . loadFactories ( LayoutFactory .class , null ) ; if ( java.util.List<org.springframework.boot.loader.tools.LayoutFactory> . isEmpty ( ) ) { return new DefaultLayoutFactory ( ) ; } Assert . state ( java.util.List<org.springframework.boot.loader.tools.LayoutFactory> . size ( ) == NUMBER , STRING ) ; return java.util.List<org.springframework.boot.loader.tools.LayoutFactory> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public final java.io.File java.io.File ( ) { return new java.io.File ( this . java.io.File . java.io.File ( ) , this . java.io.File . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) java.io.IOException { java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . java.io.File ) ; try { java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.JarFile . java.util.jar.Manifest ( ) ; return ( java.util.jar.Manifest != null && java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.lang.String ) != null ) ; } finally { java.util.jar.JarFile . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.jar.JarFile java.util.jar.JarFile , java.io.File java.io.File , Libraries org.springframework.boot.loader.tools.Libraries , LaunchScript org.springframework.boot.loader.tools.LaunchScript ) throws java.io.IOException { JarWriter org.springframework.boot.loader.tools.JarWriter = new JarWriter ( java.io.File , org.springframework.boot.loader.tools.LaunchScript ) ; try { final java.util.List<org.springframework.boot.loader.tools.Library> < Library > java.util.List<org.springframework.boot.loader.tools.Library> = new java.util.ArrayList<org.springframework.boot.loader.tools.Library> <> ( ) ; final java.util.List<org.springframework.boot.loader.tools.Library> < Library > java.util.List<org.springframework.boot.loader.tools.Library> = new java.util.ArrayList<org.springframework.boot.loader.tools.Library> <> ( ) ; org.springframework.boot.loader.tools.Libraries . doWithLibraries ( new LibraryCallback ( ) { @ java.lang.Override public void void ( Library org.springframework.boot.loader.tools.Library ) throws java.io.IOException { java.io.File java.io.File = org.springframework.boot.loader.tools.Library . getFile ( ) ; if ( boolean ( java.io.File ) ) { if ( org.springframework.boot.loader.tools.Library . isUnpackRequired ( ) ) { java.util.List<org.springframework.boot.loader.tools.Library> . add ( org.springframework.boot.loader.tools.Library ) ; } else { java.util.List<org.springframework.boot.loader.tools.Library> . add ( org.springframework.boot.loader.tools.Library ) ; } } } } ) ; void ( java.util.jar.JarFile , org.springframework.boot.loader.tools.JarWriter , java.util.List<org.springframework.boot.loader.tools.Library> , java.util.List<org.springframework.boot.loader.tools.Library> ) ; } finally { try { org.springframework.boot.loader.tools.JarWriter . close ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Library org.springframework.boot.loader.tools.Library ) throws java.io.IOException { java.io.File java.io.File = org.springframework.boot.loader.tools.Library . getFile ( ) ; if ( boolean ( java.io.File ) ) { if ( org.springframework.boot.loader.tools.Library . isUnpackRequired ( ) ) { java.util.List<org.springframework.boot.loader.tools.Library> . add ( org.springframework.boot.loader.tools.Library ) ; } else { java.util.List<org.springframework.boot.loader.tools.Library> . add ( org.springframework.boot.loader.tools.Library ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.jar.JarFile java.util.jar.JarFile , JarWriter org.springframework.boot.loader.tools.JarWriter , final java.util.List<org.springframework.boot.loader.tools.Library> < Library > java.util.List<org.springframework.boot.loader.tools.Library> , final java.util.List<org.springframework.boot.loader.tools.Library> < Library > java.util.List<org.springframework.boot.loader.tools.Library> )					throws java.io.IOException { org.springframework.boot.loader.tools.JarWriter . writeManifest ( java.util.jar.Manifest ( java.util.jar.JarFile ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; void ( java.util.List<org.springframework.boot.loader.tools.Library> , java.util.Set<java.lang.String> , org.springframework.boot.loader.tools.JarWriter ) ; if ( this . org.springframework.boot.loader.tools.Layout instanceof RepackagingLayout ) { org.springframework.boot.loader.tools.JarWriter . writeEntries ( java.util.jar.JarFile , new org.springframework.boot.loader.tools.Repackager.RenamingEntryTransformer ( ( ( RepackagingLayout ) this . org.springframework.boot.loader.tools.Layout ) . getRepackagedClassesLocation ( ) ) ) ; } else { org.springframework.boot.loader.tools.JarWriter . writeEntries ( java.util.jar.JarFile ) ; } void ( java.util.List<org.springframework.boot.loader.tools.Library> , java.util.Set<java.lang.String> , org.springframework.boot.loader.tools.JarWriter ) ; void ( org.springframework.boot.loader.tools.JarWriter ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.boot.loader.tools.Library> < Library > java.util.List<org.springframework.boot.loader.tools.Library> , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , JarWriter org.springframework.boot.loader.tools.JarWriter ) throws java.io.IOException { for ( Library org.springframework.boot.loader.tools.Library : java.util.List<org.springframework.boot.loader.tools.Library> ) { java.lang.String java.lang.String = org.springframework.boot.loader.tools.Repackager .this . org.springframework.boot.loader.tools.Layout . getLibraryDestination ( org.springframework.boot.loader.tools.Library . getName ( ) , org.springframework.boot.loader.tools.Library . getScope ( ) ) ; if ( java.lang.String != null ) { if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String + org.springframework.boot.loader.tools.Library . getName ( ) ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.boot.loader.tools.Library . getName ( ) ) ; } org.springframework.boot.loader.tools.JarWriter . writeNestedLibrary ( java.lang.String , org.springframework.boot.loader.tools.Library ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( JarWriter org.springframework.boot.loader.tools.JarWriter ) throws java.io.IOException { if ( this . org.springframework.boot.loader.tools.Layout instanceof CustomLoaderLayout ) { ( ( CustomLoaderLayout ) this . org.springframework.boot.loader.tools.Layout ) . writeLoadedClasses ( org.springframework.boot.loader.tools.JarWriter ) ; } else if ( this . org.springframework.boot.loader.tools.Layout . isExecutable ( ) ) { org.springframework.boot.loader.tools.JarWriter . writeLoaderClasses ( ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.io.File java.io.File ) { try { java.io.FileInputStream java.io.FileInputStream = new java.io.FileInputStream ( java.io.File ) ; try { return boolean ( java.io.FileInputStream ) ; } finally { java.io.FileInputStream . void ( ) ; } } catch ( java.io.IOException java.io.IOException ) { return false ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { for ( int int = NUMBER ; int < byte[] . int ; int ++ ) { if ( java.io.InputStream . int ( ) != byte[] [ int ] ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> private java.util.jar.Manifest java.util.jar.Manifest ( java.util.jar.JarFile java.util.jar.JarFile ) throws java.io.IOException { java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.JarFile . java.util.jar.Manifest ( ) ; if ( java.util.jar.Manifest == null ) { java.util.jar.Manifest = new java.util.jar.Manifest ( ) ; java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING , STRING ) ; } java.util.jar.Manifest = new java.util.jar.Manifest ( java.util.jar.Manifest ) ; java.lang.String java.lang.String = this . java.lang.String ; if ( java.lang.String == null ) { java.lang.String = java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.lang.String ) ; } if ( java.lang.String == null ) { java.lang.String = java.lang.String ( java.util.jar.JarFile ) ; } java.lang.String java.lang.String = this . org.springframework.boot.loader.tools.Layout . getLauncherClassName ( ) ; if ( java.lang.String != null ) { java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.lang.String , java.lang.String ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.lang.String , java.lang.String ) ; } else if ( java.lang.String != null ) { java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.lang.String , java.lang.String ) ; } java.lang.String java.lang.String = java.lang.Class<? extends org.springframework.boot.loader.tools.Repackager> ( ) . java.lang.Package ( ) . java.lang.String ( ) ; java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.lang.String , java.lang.String ) ; java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.lang.String , ( this . org.springframework.boot.loader.tools.Layout instanceof RepackagingLayout ) ? ( ( RepackagingLayout ) this . org.springframework.boot.loader.tools.Layout ) . getRepackagedClassesLocation ( ) : this . org.springframework.boot.loader.tools.Layout . getClassesLocation ( ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.loader.tools.Layout . getLibraryDestination ( STRING , LibraryScope . COMPILE ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.lang.String , java.lang.String ) ; } return java.util.jar.Manifest ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.jar.JarFile java.util.jar.JarFile ) throws java.io.IOException { long long = java.lang.System . long ( ) ; java.lang.String java.lang.String = java.lang.String ( java.util.jar.JarFile ) ; long long = java.lang.System . long ( ) - long ; if ( long > long ) { for ( org.springframework.boot.loader.tools.Repackager.MainClassTimeoutWarningListener org.springframework.boot.loader.tools.Repackager.MainClassTimeoutWarningListener : this . java.util.List<org.springframework.boot.loader.tools.Repackager.MainClassTimeoutWarningListener> ) { org.springframework.boot.loader.tools.Repackager.MainClassTimeoutWarningListener . void ( long , java.lang.String ) ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.jar.JarFile java.util.jar.JarFile ) throws java.io.IOException { return MainClassFinder . findSingleMainClass ( java.util.jar.JarFile , this . org.springframework.boot.loader.tools.Layout . getClassesLocation ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , java.io.File java.io.File ) { if ( ! java.io.File . boolean ( java.io.File ) ) { throw new java.lang.IllegalStateException ( STRING + java.io.File + STRING + java.io.File + STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File ) { if ( ! java.io.File . boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + java.io.File + STRING ) ; } }  <METHOD_END>
<METHOD_START> void void ( long long , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.jar.JarEntry java.util.jar.JarEntry ( java.util.jar.JarEntry java.util.jar.JarEntry ) { if ( java.util.jar.JarEntry . java.lang.String ( ) . boolean ( STRING ) ) { return null ; } if ( ( java.util.jar.JarEntry . java.lang.String ( ) . boolean ( STRING ) && ! java.util.jar.JarEntry . java.lang.String ( ) . boolean ( STRING ) ) || java.util.jar.JarEntry . java.lang.String ( ) . boolean ( STRING ) ) { return java.util.jar.JarEntry ; } java.util.jar.JarEntry java.util.jar.JarEntry = new java.util.jar.JarEntry ( this . java.lang.String + java.util.jar.JarEntry . java.lang.String ( ) ) ; java.util.jar.JarEntry . void ( java.util.jar.JarEntry . long ( ) ) ; java.util.jar.JarEntry . void ( java.util.jar.JarEntry . long ( ) ) ; java.util.jar.JarEntry . void ( java.util.jar.JarEntry . int ( ) ) ; if ( java.util.jar.JarEntry . java.lang.String ( ) != null ) { java.util.jar.JarEntry . void ( java.util.jar.JarEntry . java.lang.String ( ) ) ; } java.util.jar.JarEntry . void ( java.util.jar.JarEntry . long ( ) ) ; java.util.jar.JarEntry . void ( java.util.jar.JarEntry . long ( ) ) ; if ( java.util.jar.JarEntry . java.nio.file.attribute.FileTime ( ) != null ) { java.util.jar.JarEntry . java.util.zip.ZipEntry ( java.util.jar.JarEntry . java.nio.file.attribute.FileTime ( ) ) ; } if ( java.util.jar.JarEntry . byte[] ( ) != null ) { java.util.jar.JarEntry . void ( java.util.jar.JarEntry . byte[] ( ) ) ; } if ( java.util.jar.JarEntry . java.nio.file.attribute.FileTime ( ) != null ) { java.util.jar.JarEntry . java.util.zip.ZipEntry ( java.util.jar.JarEntry . java.nio.file.attribute.FileTime ( ) ) ; } if ( java.util.jar.JarEntry . java.nio.file.attribute.FileTime ( ) != null ) { java.util.jar.JarEntry . java.util.zip.ZipEntry ( java.util.jar.JarEntry . java.nio.file.attribute.FileTime ( ) ) ; } return java.util.jar.JarEntry ; }  <METHOD_END>
