<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new LikeParameterBinding ( null , Type . CONTAINING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new LikeParameterBinding ( STRING , Type . CONTAINING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new LikeParameterBinding ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new LikeParameterBinding ( STRING , Type . SIMPLE_PROPERTY ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new LikeParameterBinding ( NUMBER , Type . CONTAINING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LikeParameterBinding org.springframework.data.jpa.repository.query.LikeParameterBinding = new LikeParameterBinding ( STRING , Type . CONTAINING ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . hasName ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . hasName ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . hasName ( null ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . hasPosition ( NUMBER ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . getType ( ) , is ( Type . CONTAINING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LikeParameterBinding org.springframework.data.jpa.repository.query.LikeParameterBinding = new LikeParameterBinding ( NUMBER , Type . CONTAINING ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . hasName ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . hasName ( null ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . hasPosition ( NUMBER ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . hasPosition ( NUMBER ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . getType ( ) , is ( Type . CONTAINING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( Type . CONTAINING , STRING ) ; void ( Type . ENDING_WITH , STRING ) ; void ( Type . STARTING_WITH , STRING ) ; assertThat ( new LikeParameterBinding ( NUMBER , Type . CONTAINING ) . prepare ( null ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( Type org.springframework.data.jpa.repository.query.Type , java.lang.Object java.lang.Object ) { LikeParameterBinding org.springframework.data.jpa.repository.query.LikeParameterBinding = new LikeParameterBinding ( STRING , org.springframework.data.jpa.repository.query.Type ) ; assertThat ( org.springframework.data.jpa.repository.query.LikeParameterBinding . prepare ( STRING ) , is ( java.lang.Object ) ) ; }  <METHOD_END>
