<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( null ) ; assertThat ( java.lang.String[] ) . isNotNull ( ) ; assertThat ( java.lang.String[] . int ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( STRING ) ; assertThat ( java.lang.String[] ) . isNotNull ( ) ; assertThat ( java.lang.String[] . int ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( STRING ) ; assertThat ( java.lang.String[] . int ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.String[] [ NUMBER ] ) . isEqualTo ( STRING ) ; assertThat ( java.lang.String[] [ NUMBER ] ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( STRING ) ; assertThat ( java.lang.String[] . int ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.String[] [ NUMBER ] ) . isEqualTo ( STRING ) ; assertThat ( java.lang.String[] [ NUMBER ] ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( STRING + STRING ) ; assertThat ( java.lang.String[] . int ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.String[] [ NUMBER ] ) . isEqualTo ( STRING ) ; assertThat ( java.lang.String[] [ NUMBER ] ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( STRING ) ; assertThat ( java.lang.String[] . int ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.String[] [ NUMBER ] ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return new RunArguments ( java.lang.String ) . asArray ( ) ; }  <METHOD_END>
