<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.cassandra.core.DefaultBridgedReactiveSession = new DefaultBridgedReactiveSession ( org.springframework.cassandra.core.Session , Schedulers . immediate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleStatement org.springframework.cassandra.core.SimpleStatement = new SimpleStatement ( STRING ) ; org.springframework.cassandra.core.DefaultBridgedReactiveSession . execute ( org.springframework.cassandra.core.SimpleStatement ) . subscribe ( ) ; verify ( org.springframework.cassandra.core.Session ) . executeAsync ( org.springframework.cassandra.core.SimpleStatement ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.DefaultBridgedReactiveSession . execute ( STRING ) . subscribe ( ) ; verify ( org.springframework.cassandra.core.Session ) . executeAsync ( org.springframework.cassandra.core.Statement ( new SimpleStatement ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.DefaultBridgedReactiveSession . execute ( STRING , STRING , STRING ) . subscribe ( ) ; verify ( org.springframework.cassandra.core.Session ) . executeAsync ( org.springframework.cassandra.core.Statement ( new SimpleStatement ( STRING , STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.DefaultBridgedReactiveSession . execute ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . subscribe ( ) ; verify ( org.springframework.cassandra.core.Session ) . executeAsync ( org.springframework.cassandra.core.Statement ( new SimpleStatement ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.DefaultBridgedReactiveSession . prepare ( STRING ) . subscribe ( ) ; verify ( org.springframework.cassandra.core.Session ) . prepareAsync ( org.springframework.cassandra.core.Statement ( new SimpleStatement ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleStatement org.springframework.cassandra.core.SimpleStatement = new SimpleStatement ( STRING ) ; org.springframework.cassandra.core.DefaultBridgedReactiveSession . prepare ( org.springframework.cassandra.core.SimpleStatement ) . subscribe ( ) ; verify ( org.springframework.cassandra.core.Session ) . prepareAsync ( org.springframework.cassandra.core.SimpleStatement ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.DefaultBridgedReactiveSession . close ( ) ; verify ( org.springframework.cassandra.core.Session ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.cassandra.core.DefaultBridgedReactiveSession . isClosed ( ) ) . thenReturn ( true ) ; boolean boolean = org.springframework.cassandra.core.DefaultBridgedReactiveSession . isClosed ( ) ; assertThat ( boolean ) . isTrue ( ) ; verify ( org.springframework.cassandra.core.Session ) . isClosed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cluster org.springframework.cassandra.core.Cluster = mock ( Cluster .class ) ; when ( org.springframework.cassandra.core.Session . getCluster ( ) ) . thenReturn ( org.springframework.cassandra.core.Cluster ) ; Cluster org.springframework.cassandra.core.Cluster = org.springframework.cassandra.core.DefaultBridgedReactiveSession . getCluster ( ) ; assertThat ( org.springframework.cassandra.core.Cluster ) . isSameAs ( org.springframework.cassandra.core.Cluster ) ; }  <METHOD_END>
<METHOD_START> private static < T extends org.springframework.cassandra.core.Statement > T T ( T T ) { return ArgumentMatchers . argThat ( argument -> argument instanceof Statement ? value . toString ( ) . equals ( argument . toString ( ) ) : value . equals ( argument ) ) ; }  <METHOD_END>
