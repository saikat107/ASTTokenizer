<METHOD_START> private java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.String java.lang.String ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass .class , java.lang.String , java.lang.Object .class , java.lang.Object .class ) ; return this . org.springframework.cache.interceptor.AnnotationCacheOperationSource . getCacheOperations ( java.lang.reflect.Method , org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( STRING ) ; assertEquals ( NUMBER , java.util.Collection<org.springframework.cache.interceptor.CacheOperation> . size ( ) ) ; java.util.Iterator<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Iterator<org.springframework.cache.interceptor.CacheOperation> = java.util.Collection<org.springframework.cache.interceptor.CacheOperation> . iterator ( ) ; CacheOperation org.springframework.cache.interceptor.CacheOperation = java.util.Iterator<org.springframework.cache.interceptor.CacheOperation> . next ( ) ; assertTrue ( org.springframework.cache.interceptor.CacheOperation instanceof CacheableOperation ) ; assertTrue ( org.springframework.cache.interceptor.CacheOperation . getCacheNames ( ) . contains ( STRING ) ) ; assertEquals ( STRING , org.springframework.cache.interceptor.CacheOperation . getKey ( ) ) ; org.springframework.cache.interceptor.CacheOperation = java.util.Iterator<org.springframework.cache.interceptor.CacheOperation> . next ( ) ; assertTrue ( org.springframework.cache.interceptor.CacheOperation instanceof CacheableOperation ) ; assertTrue ( org.springframework.cache.interceptor.CacheOperation . getCacheNames ( ) . contains ( STRING ) ) ; assertEquals ( STRING , org.springframework.cache.interceptor.CacheOperation . getKey ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass = new org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass ( ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass .class , STRING , java.lang.Object .class , java.lang.Object .class ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { new java.lang.Object ( ) , new java.lang.Object ( ) } ; java.util.Collection<org.springframework.cache.interceptor.ConcurrentMapCache> < ConcurrentMapCache > java.util.Collection<org.springframework.cache.interceptor.ConcurrentMapCache> = java.util.Collections . java.util.Set ( new ConcurrentMapCache ( STRING ) ) ; EvaluationContext org.springframework.cache.interceptor.EvaluationContext = this . org.springframework.cache.interceptor.CacheOperationExpressionEvaluator . createEvaluationContext ( java.util.Collection<org.springframework.cache.interceptor.ConcurrentMapCache> , java.lang.reflect.Method , java.lang.Object[] , org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass , org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass . java.lang.Class<? extends org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass> ( ) , null ) ; java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( STRING ) ; java.util.Iterator<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Iterator<org.springframework.cache.interceptor.CacheOperation> = java.util.Collection<org.springframework.cache.interceptor.CacheOperation> . iterator ( ) ; AnnotatedElementKey org.springframework.cache.interceptor.AnnotatedElementKey = new AnnotatedElementKey ( java.lang.reflect.Method , org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass .class ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.interceptor.CacheOperationExpressionEvaluator . key ( java.util.Iterator<org.springframework.cache.interceptor.CacheOperation> . next ( ) . getKey ( ) , org.springframework.cache.interceptor.AnnotatedElementKey , org.springframework.cache.interceptor.EvaluationContext ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.interceptor.CacheOperationExpressionEvaluator . key ( java.util.Iterator<org.springframework.cache.interceptor.CacheOperation> . next ( ) . getKey ( ) , org.springframework.cache.interceptor.AnnotatedElementKey , org.springframework.cache.interceptor.EvaluationContext ) ; assertEquals ( java.lang.Object[] [ NUMBER ] , java.lang.Object ) ; assertEquals ( java.lang.Object[] [ NUMBER ] , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvaluationContext org.springframework.cache.interceptor.EvaluationContext = org.springframework.cache.interceptor.EvaluationContext ( STRING ) ; java.lang.Object java.lang.Object = new SpelExpressionParser ( ) . parseExpression ( STRING ) . getValue ( org.springframework.cache.interceptor.EvaluationContext ) ; assertThat ( java.lang.Object , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvaluationContext org.springframework.cache.interceptor.EvaluationContext = org.springframework.cache.interceptor.EvaluationContext ( null ) ; java.lang.Object java.lang.Object = new SpelExpressionParser ( ) . parseExpression ( STRING ) . getValue ( org.springframework.cache.interceptor.EvaluationContext ) ; assertThat ( java.lang.Object , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvaluationContext org.springframework.cache.interceptor.EvaluationContext = org.springframework.cache.interceptor.EvaluationContext ( CacheOperationExpressionEvaluator . NO_RESULT ) ; java.lang.Object java.lang.Object = new SpelExpressionParser ( ) . parseExpression ( STRING ) . getValue ( org.springframework.cache.interceptor.EvaluationContext ) ; assertThat ( java.lang.Object , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvaluationContext org.springframework.cache.interceptor.EvaluationContext = org.springframework.cache.interceptor.EvaluationContext ( CacheOperationExpressionEvaluator . RESULT_UNAVAILABLE ) ; try { new SpelExpressionParser ( ) . parseExpression ( STRING ) . getValue ( org.springframework.cache.interceptor.EvaluationContext ) ; fail ( STRING ) ; } catch ( VariableNotAvailableException org.springframework.cache.interceptor.VariableNotAvailableException ) { assertEquals ( STRING , STRING , org.springframework.cache.interceptor.VariableNotAvailableException . getName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.cache.interceptor.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinition org.springframework.cache.interceptor.BeanDefinition = new RootBeanDefinition ( java.lang.String .class ) ; org.springframework.cache.interceptor.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.cache.interceptor.BeanDefinition ) ; org.springframework.cache.interceptor.StaticApplicationContext . refresh ( ) ; EvaluationContext org.springframework.cache.interceptor.EvaluationContext = org.springframework.cache.interceptor.EvaluationContext ( CacheOperationExpressionEvaluator . NO_RESULT , org.springframework.cache.interceptor.StaticApplicationContext ) ; java.lang.Object java.lang.Object = new SpelExpressionParser ( ) . parseExpression ( STRING ) . getValue ( org.springframework.cache.interceptor.EvaluationContext ) ; assertThat ( java.lang.Object , is ( java.lang.String .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.interceptor.EvaluationContext org.springframework.cache.interceptor.EvaluationContext ( java.lang.Object java.lang.Object ) { return org.springframework.cache.interceptor.EvaluationContext ( java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.interceptor.EvaluationContext org.springframework.cache.interceptor.EvaluationContext ( java.lang.Object java.lang.Object , BeanFactory org.springframework.cache.interceptor.BeanFactory ) { org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass = new org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass ( ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass .class , STRING , java.lang.Object .class , java.lang.Object .class ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { new java.lang.Object ( ) , new java.lang.Object ( ) } ; java.util.Collection<org.springframework.cache.interceptor.ConcurrentMapCache> < ConcurrentMapCache > java.util.Collection<org.springframework.cache.interceptor.ConcurrentMapCache> = java.util.Collections . java.util.Set ( new ConcurrentMapCache ( STRING ) ) ; return this . org.springframework.cache.interceptor.CacheOperationExpressionEvaluator . createEvaluationContext ( java.util.Collection<org.springframework.cache.interceptor.ConcurrentMapCache> , java.lang.reflect.Method , java.lang.Object[] , org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass , org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass . java.lang.Class<? extends org.springframework.cache.interceptor.ExpressionEvaluatorTests.AnnotatedClass> ( ) , java.lang.Object , org.springframework.cache.interceptor.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Caching ( cacheable = { @ Cacheable ( value = STRING , key = STRING ) , @ Cacheable ( value = STRING , key = STRING ) } ) public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) {		}  <METHOD_END>
