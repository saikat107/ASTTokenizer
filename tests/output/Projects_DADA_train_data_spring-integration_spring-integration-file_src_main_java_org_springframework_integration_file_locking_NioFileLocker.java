<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { java.nio.channels.FileLock java.nio.channels.FileLock = this . java.util.concurrent.ConcurrentMap<java.io.File,java.nio.channels.FileLock> . java.nio.channels.FileLock ( java.io.File ) ; if ( java.nio.channels.FileLock == null ) { java.nio.channels.FileLock java.nio.channels.FileLock = null ; try { java.nio.channels.FileLock = FileChannelCache . tryLockFor ( java.io.File ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessagingException ( STRING + java.io.File , java.io.IOException ) ; } if ( java.nio.channels.FileLock != null ) { java.nio.channels.FileLock java.nio.channels.FileLock = this . java.util.concurrent.ConcurrentMap<java.io.File,java.nio.channels.FileLock> . java.nio.channels.FileLock ( java.io.File , java.nio.channels.FileLock ) ; java.nio.channels.FileLock = java.nio.channels.FileLock != null ? java.nio.channels.FileLock : java.nio.channels.FileLock ; } } return java.nio.channels.FileLock != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { return this . java.util.concurrent.ConcurrentMap<java.io.File,java.nio.channels.FileLock> . boolean ( java.io.File ) || ! FileChannelCache . isLocked ( java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.File java.io.File ) { java.nio.channels.FileLock java.nio.channels.FileLock = this . java.util.concurrent.ConcurrentMap<java.io.File,java.nio.channels.FileLock> . java.nio.channels.FileLock ( java.io.File ) ; try { if ( java.nio.channels.FileLock != null ) { java.nio.channels.FileLock . void ( ) ; } FileChannelCache . closeChannelFor ( java.io.File ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessagingException ( STRING + java.io.File , java.io.IOException ) ; } }  <METHOD_END>
