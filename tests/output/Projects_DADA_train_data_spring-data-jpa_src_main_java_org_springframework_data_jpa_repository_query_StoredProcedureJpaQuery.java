<METHOD_START> public void ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager ) { super( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ); this . org.springframework.data.jpa.repository.query.StoredProcedureAttributes = org.springframework.data.jpa.repository.query.JpaQueryMethod . getProcedureAttributes ( ) ; this . boolean = boolean ( org.springframework.data.jpa.repository.query.JpaQueryMethod ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( QueryMethod org.springframework.data.jpa.repository.query.QueryMethod ) { for ( Parameter org.springframework.data.jpa.repository.query.Parameter : org.springframework.data.jpa.repository.query.QueryMethod . getParameters ( ) ) { if ( org.springframework.data.jpa.repository.query.Parameter . isNamedParameter ( ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.StoredProcedureQuery org.springframework.data.jpa.repository.query.StoredProcedureQuery ( java.lang.Object [] java.lang.Object[] ) { return applyHints ( org.springframework.data.jpa.repository.query.StoredProcedureQuery ( java.lang.Object[] ) , getQueryMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.StoredProcedureQuery org.springframework.data.jpa.repository.query.StoredProcedureQuery ( java.lang.Object [] java.lang.Object[] ) { return createBinder ( java.lang.Object[] ) . bind ( org.springframework.data.jpa.repository.query.StoredProcedureQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> < java.lang.Long > org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> ( java.lang.Object [] java.lang.Object[] ) { return null ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( StoredProcedureQuery org.springframework.data.jpa.repository.query.StoredProcedureQuery ) { Assert . notNull ( org.springframework.data.jpa.repository.query.StoredProcedureQuery , STRING ) ; if ( ! org.springframework.data.jpa.repository.query.StoredProcedureAttributes . hasReturnValue ( ) ) { return null ; } java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterName ( ) ; JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = getQueryMethod ( ) . getParameters ( ) ; return boolean && StringUtils . hasText ( java.lang.String ) ? org.springframework.data.jpa.repository.query.StoredProcedureQuery . getOutputParameterValue ( java.lang.String ) : org.springframework.data.jpa.repository.query.StoredProcedureQuery . getOutputParameterValue ( org.springframework.data.jpa.repository.query.JpaParameters . getNumberOfParameters ( ) + NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.StoredProcedureQuery org.springframework.data.jpa.repository.query.StoredProcedureQuery ( ) { return org.springframework.data.jpa.repository.query.StoredProcedureAttributes . isNamedStoredProcedure ( ) ? org.springframework.data.jpa.repository.query.StoredProcedureQuery ( ) : org.springframework.data.jpa.repository.query.StoredProcedureQuery ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.StoredProcedureQuery org.springframework.data.jpa.repository.query.StoredProcedureQuery ( ) { return getEntityManager ( ) . createNamedStoredProcedureQuery ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getProcedureName ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.StoredProcedureQuery org.springframework.data.jpa.repository.query.StoredProcedureQuery ( ) { JpaParameters org.springframework.data.jpa.repository.query.JpaParameters = getQueryMethod ( ) . getParameters ( ) ; java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getProcedureName ( ) ; StoredProcedureQuery org.springframework.data.jpa.repository.query.StoredProcedureQuery = getEntityManager ( ) . createStoredProcedureQuery ( java.lang.String ) ; for ( JpaParameter org.springframework.data.jpa.repository.query.JpaParameter : org.springframework.data.jpa.repository.query.JpaParameters ) { if ( ! org.springframework.data.jpa.repository.query.JpaParameter . isBindable ( ) ) { continue; } if ( boolean ) { org.springframework.data.jpa.repository.query.StoredProcedureQuery . registerStoredProcedureParameter ( org.springframework.data.jpa.repository.query.JpaParameter . getName ( ) . orElseThrow ( ( ) new IllegalArgumentException ( STRING ) ) , org.springframework.data.jpa.repository.query.JpaParameter . getType ( ) , ParameterMode . IN ) ; } else { org.springframework.data.jpa.repository.query.StoredProcedureQuery . registerStoredProcedureParameter ( org.springframework.data.jpa.repository.query.JpaParameter . getIndex ( ) + NUMBER , org.springframework.data.jpa.repository.query.JpaParameter . getType ( ) , ParameterMode . IN ) ; } } if ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . hasReturnValue ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterType ( ) ; ParameterMode org.springframework.data.jpa.repository.query.ParameterMode = ParameterMode . OUT ; if ( boolean ) { java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterName ( ) ; org.springframework.data.jpa.repository.query.StoredProcedureQuery . registerStoredProcedureParameter ( java.lang.String , java.lang.Class<> , org.springframework.data.jpa.repository.query.ParameterMode ) ; } else { org.springframework.data.jpa.repository.query.StoredProcedureQuery . registerStoredProcedureParameter ( org.springframework.data.jpa.repository.query.JpaParameters . getNumberOfParameters ( ) + NUMBER , java.lang.Class<> , org.springframework.data.jpa.repository.query.ParameterMode ) ; } } return org.springframework.data.jpa.repository.query.StoredProcedureQuery ; }  <METHOD_END>
