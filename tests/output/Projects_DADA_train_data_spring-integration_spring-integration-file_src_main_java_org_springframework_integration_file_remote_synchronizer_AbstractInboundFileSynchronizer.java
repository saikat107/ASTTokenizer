<METHOD_START> public void ( SessionFactory < F > org.springframework.integration.file.remote.synchronizer.SessionFactory<F> ) { Assert . notNull ( org.springframework.integration.file.remote.synchronizer.SessionFactory<F> , STRING ) ; this . org.springframework.integration.file.remote.synchronizer.RemoteFileTemplate<F> = new RemoteFileTemplate < F > ( org.springframework.integration.file.remote.synchronizer.SessionFactory<F> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.file.remote.synchronizer.Expression ) { Assert . notNull ( org.springframework.integration.file.remote.synchronizer.Expression , STRING ) ; this . org.springframework.integration.file.remote.synchronizer.Expression = org.springframework.integration.file.remote.synchronizer.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.integration.file.remote.synchronizer.Expression = new LiteralExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.file.remote.synchronizer.Expression ) { void ( org.springframework.integration.file.remote.synchronizer.Expression ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( Expression org.springframework.integration.file.remote.synchronizer.Expression ) { Assert . notNull ( org.springframework.integration.file.remote.synchronizer.Expression , STRING ) ; this . org.springframework.integration.file.remote.synchronizer.Expression = org.springframework.integration.file.remote.synchronizer.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( FileListFilter < F > org.springframework.integration.file.remote.synchronizer.FileListFilter<F> ) { void ( org.springframework.integration.file.remote.synchronizer.FileListFilter<F> ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( FileListFilter < F > org.springframework.integration.file.remote.synchronizer.FileListFilter<F> ) { this . org.springframework.integration.file.remote.synchronizer.FileListFilter<F> = org.springframework.integration.file.remote.synchronizer.FileListFilter<F> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.file.remote.synchronizer.BeanFactory ) throws org.springframework.integration.file.remote.synchronizer.BeansException { this . org.springframework.integration.file.remote.synchronizer.BeanFactory = org.springframework.integration.file.remote.synchronizer.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { Assert . state ( this . org.springframework.integration.file.remote.synchronizer.Expression != null , STRING ) ; if ( this . org.springframework.integration.file.remote.synchronizer.EvaluationContext == null ) { this . org.springframework.integration.file.remote.synchronizer.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . org.springframework.integration.file.remote.synchronizer.BeanFactory ) ; } void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> protected final java.util.List<F> < F > java.util.List<F> ( F [] F[] ) { return ( this . org.springframework.integration.file.remote.synchronizer.FileListFilter<F> != null ) ? this . org.springframework.integration.file.remote.synchronizer.FileListFilter<F> . filterFiles ( F[] ) : java.util.Arrays . java.util.List<F> ( F[] ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { if ( this . org.springframework.integration.file.remote.synchronizer.FileListFilter<F> instanceof java.io.Closeable ) { ( ( java.io.Closeable ) this . org.springframework.integration.file.remote.synchronizer.FileListFilter<F> ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.io.File java.io.File ) { void ( java.io.File , java.lang.Integer . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.io.File java.io.File , final int int ) { if ( int == NUMBER ) { if ( this . org.springframework.integration.file.remote.synchronizer.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.file.remote.synchronizer.Log . debug ( STRING + java.io.File . java.lang.String ( ) + STRING ) ; } return; } final java.lang.String java.lang.String = this . org.springframework.integration.file.remote.synchronizer.Expression . getValue ( this . org.springframework.integration.file.remote.synchronizer.EvaluationContext , java.lang.String .class ) ; try { int int = this . org.springframework.integration.file.remote.synchronizer.RemoteFileTemplate<F> . execute ( session -> { F [] files = session . list ( remoteDirectory ) ; if ( ! ObjectUtils . isEmpty ( files ) ) { List < F > filteredFiles = filterFiles ( files ) ; if ( maxFetchSize >= NUMBER && filteredFiles . size ( ) > maxFetchSize ) { rollbackFromFileToListEnd ( filteredFiles , filteredFiles . get ( maxFetchSize ) ) ; List < F > newList = new ArrayList <> ( maxFetchSize ) ; for ( int i = NUMBER ; i < maxFetchSize ; i ++ ) { newList . add ( filteredFiles . get ( i ) ) ; } filteredFiles = newList ; } for ( F file : filteredFiles ) { try { if ( file != null ) { copyFileToLocalDirectory ( remoteDirectory , file , localDirectory , session ) ; } } catch ( RuntimeException e1 ) { rollbackFromFileToListEnd ( filteredFiles , file ) ; throw e1 ; } catch ( IOException e2 ) { rollbackFromFileToListEnd ( filteredFiles , file ) ; throw e2 ; } } return filteredFiles . size ( ) ; } else { return NUMBER ; } } ) ; if ( this . org.springframework.integration.file.remote.synchronizer.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.file.remote.synchronizer.Log . debug ( int + STRING ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<F> < F > java.util.List<F> , F F ) { if ( this . org.springframework.integration.file.remote.synchronizer.FileListFilter<F> instanceof ReversibleFileListFilter ) { ( ( ReversibleFileListFilter < F > ) this . org.springframework.integration.file.remote.synchronizer.FileListFilter<F> ) . rollback ( F , java.util.List<F> ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , F F , java.io.File java.io.File , Session < F > org.springframework.integration.file.remote.synchronizer.Session<F> ) throws java.io.IOException { java.lang.String java.lang.String = this . java.lang.String ( F ) ; java.lang.String java.lang.String = this . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String != null ? ( java.lang.String + this . java.lang.String + java.lang.String ) : java.lang.String ; if ( ! this . boolean ( F ) ) { if ( this . org.springframework.integration.file.remote.synchronizer.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.file.remote.synchronizer.Log . debug ( STRING + java.lang.String ) ; } return; } long long = long ( F ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.lang.String ) ; boolean boolean = java.io.File . boolean ( ) ; if ( ! boolean || ( this . boolean && long != java.io.File . long ( ) ) ) { if ( ! boolean && java.lang.String . java.lang.String ( STRING , java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) ) . boolean ( java.io.File . java.lang.String ) ) { java.io.File . java.io.File ( ) . boolean ( ) ; } java.lang.String java.lang.String = java.io.File . java.lang.String ( ) + this . java.lang.String ; java.io.File java.io.File = new java.io.File ( java.lang.String ) ; java.io.OutputStream java.io.OutputStream = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( java.io.File ) ) ; try { org.springframework.integration.file.remote.synchronizer.Session<F> . read ( java.lang.String , java.io.OutputStream ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Exception ; } else { throw new MessagingException ( STRING , java.lang.Exception ) ; } } finally { try { java.io.OutputStream . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) {				} } if ( java.io.File . boolean ( java.io.File ) ) { if ( this . boolean ) { org.springframework.integration.file.remote.synchronizer.Session<F> . remove ( java.lang.String ) ; if ( this . org.springframework.integration.file.remote.synchronizer.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.file.remote.synchronizer.Log . debug ( STRING + java.lang.String ) ; } } } if ( this . boolean ) { java.io.File . boolean ( long ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( this . org.springframework.integration.file.remote.synchronizer.Expression != null ) { return this . org.springframework.integration.file.remote.synchronizer.Expression . getValue ( this . org.springframework.integration.file.remote.synchronizer.EvaluationContext , java.lang.String , java.lang.String .class ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( F F );  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( F F );  <METHOD_END>
<METHOD_START> protected abstract long long ( F F );  <METHOD_END>
