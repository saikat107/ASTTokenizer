<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , FormatHelper . formatClassNameForMessage ( java.lang.String .class ) ) ; assertEquals ( STRING , FormatHelper . formatClassNameForMessage ( new java.lang.String [ NUMBER ] . java.lang.Class<? extends java.lang.String[]> ( ) ) ) ; assertEquals ( STRING , FormatHelper . formatClassNameForMessage ( new java.lang.String [ [ NUMBER ][ NUMBER ] . java.lang.Class<? extends java.lang.String[][]> ( ) ) ) ; assertEquals ( STRING , FormatHelper . formatClassNameForMessage ( new int [ NUMBER ] . java.lang.Class<? extends int[]> ( ) ) ) ; assertEquals ( STRING , FormatHelper . formatClassNameForMessage ( new int [ [ NUMBER ][ NUMBER ] . java.lang.Class<? extends int[][]> ( ) ) ) ; assertEquals ( STRING , FormatHelper . formatClassNameForMessage ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.support.ParseException { SpelExpression org.springframework.expression.spel.support.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.PrintStream java.io.PrintStream = new java.io.PrintStream ( java.io.ByteArrayOutputStream ) ; SpelUtilities . printAbstractSyntaxTree ( java.io.PrintStream , org.springframework.expression.spel.support.SpelExpression ) ; java.io.PrintStream . void ( ) ; java.lang.String java.lang.String = java.io.ByteArrayOutputStream . java.lang.String ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypedValue org.springframework.expression.spel.support.TypedValue = new TypedValue ( STRING ) ; TypedValue org.springframework.expression.spel.support.TypedValue = new TypedValue ( STRING ) ; TypedValue org.springframework.expression.spel.support.TypedValue = new TypedValue ( STRING ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.support.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.TypedValue . toString ( ) ) ; assertEquals ( org.springframework.expression.spel.support.TypedValue , org.springframework.expression.spel.support.TypedValue ) ; assertEquals ( org.springframework.expression.spel.support.TypedValue , org.springframework.expression.spel.support.TypedValue ) ; assertNotEquals ( org.springframework.expression.spel.support.TypedValue , org.springframework.expression.spel.support.TypedValue ) ; assertNotEquals ( org.springframework.expression.spel.support.TypedValue , org.springframework.expression.spel.support.TypedValue ) ; assertNotEquals ( org.springframework.expression.spel.support.TypedValue , org.springframework.expression.spel.support.TypedValue ) ; assertNotEquals ( org.springframework.expression.spel.support.TypedValue , org.springframework.expression.spel.support.TypedValue ) ; assertEquals ( org.springframework.expression.spel.support.TypedValue . hashCode ( ) , org.springframework.expression.spel.support.TypedValue . hashCode ( ) ) ; assertNotEquals ( org.springframework.expression.spel.support.TypedValue . hashCode ( ) , org.springframework.expression.spel.support.TypedValue . hashCode ( ) ) ; assertNotEquals ( org.springframework.expression.spel.support.TypedValue . hashCode ( ) , org.springframework.expression.spel.support.TypedValue . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardTypeConverter org.springframework.expression.spel.support.StandardTypeConverter = new StandardTypeConverter ( ) ; void ( new java.lang.Class [] { java.lang.String .class } , new java.lang.Class [] { java.lang.String .class } , org.springframework.expression.spel.support.StandardTypeConverter , ReflectionHelper . ArgumentsMatchKind . EXACT ) ; void ( new java.lang.Class [] { java.lang.String .class , java.lang.Integer .class } , new java.lang.Class [] { java.lang.String .class , java.lang.Integer .class } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . EXACT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardTypeConverter org.springframework.expression.spel.support.StandardTypeConverter = new StandardTypeConverter ( ) ; void ( new java.lang.Class [] { java.util.ArrayList .class } , new java.lang.Class [] { java.util.List .class } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . CLOSE ) ; void ( new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Sub .class , java.lang.String .class } , new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Super .class , java.lang.String .class } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . CLOSE ) ; void ( new java.lang.Class [] { java.lang.String .class , org.springframework.expression.spel.support.ReflectionHelperTests.Sub .class } , new java.lang.Class [] { java.lang.String .class , org.springframework.expression.spel.support.ReflectionHelperTests.Super .class } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . CLOSE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardTypeConverter org.springframework.expression.spel.support.StandardTypeConverter = new StandardTypeConverter ( ) ; void ( new java.lang.Class [] { java.lang.String .class , java.lang.Integer . java.lang.Class<java.lang.Integer> } , new java.lang.Class [] { java.lang.String .class , java.lang.Integer .class } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . CLOSE ) ; void ( new java.lang.Class [] { java.lang.Integer . java.lang.Class<java.lang.Integer> , java.lang.String .class } , new java.lang.Class [] { java.lang.Integer .class , java.lang.String .class } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . CLOSE ) ; void ( new java.lang.Class [] { java.lang.Integer . java.lang.Class<java.lang.Integer> , org.springframework.expression.spel.support.ReflectionHelperTests.Sub .class } , new java.lang.Class [] { java.lang.Integer .class , org.springframework.expression.spel.support.ReflectionHelperTests.Super .class } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . CLOSE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardTypeConverter org.springframework.expression.spel.support.StandardTypeConverter = new StandardTypeConverter ( ) ; void ( new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Super .class , java.lang.String .class } , new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Sub .class , java.lang.String .class } , org.springframework.expression.spel.support.StandardTypeConverter , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardTypeConverter org.springframework.expression.spel.support.StandardTypeConverter = new StandardTypeConverter ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = new java.lang.String [ NUMBER ] . java.lang.Class<? extends java.lang.String[]> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = new java.lang.Integer [ NUMBER ] . java.lang.Class<? extends java.lang.Integer[]> ( ) ; void ( new java.lang.Class [] { java.lang.Class<> } , new java.lang.Class [] { java.lang.Class<> } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . EXACT ) ; void ( new java.lang.Class [] { java.lang.Integer .class , java.lang.Class<> } , new java.lang.Class [] { java.lang.Integer .class , java.lang.Class<> } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . EXACT ) ; void ( new java.lang.Class [] { java.lang.String .class , java.lang.Integer .class , java.lang.Class<> } , new java.lang.Class [] { java.lang.String .class , java.lang.Integer .class , java.lang.Class<> } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . EXACT ) ; void ( new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Sub .class , java.lang.Class<> } , new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Super .class , java.lang.Class<> } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . CLOSE ) ; void ( new java.lang.Class [] { java.lang.Integer .class , java.lang.Class<> } , new java.lang.Class [] { java.lang.String .class , java.lang.Class<> } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . REQUIRES_CONVERSION ) ; void ( new java.lang.Class [] { java.lang.Integer .class , org.springframework.expression.spel.support.ReflectionHelperTests.Sub .class , java.lang.String [] .class } , new java.lang.Class [] { java.lang.String .class , org.springframework.expression.spel.support.ReflectionHelperTests.Super .class , java.lang.String [] .class } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . REQUIRES_CONVERSION ) ; void ( new java.lang.Class [] { java.lang.String .class } , new java.lang.Class [] { java.lang.Class<> } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . EXACT ) ; void ( new java.lang.Class [] { java.lang.Integer .class , java.lang.String .class } , new java.lang.Class [] { java.lang.Integer .class , java.lang.Class<> } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . EXACT ) ; void ( new java.lang.Class [] { java.lang.String .class } , new java.lang.Class [] { java.lang.Class<> } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . REQUIRES_CONVERSION ) ; void ( new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Sub .class } , new java.lang.Class [] { new org.springframework.expression.spel.support.ReflectionHelperTests.Super [ NUMBER ] . java.lang.Class<? extends org.springframework.expression.spel.support.ReflectionHelperTests.Super[]> ( ) } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . CLOSE ) ; void ( new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Super .class } , new java.lang.Class [] { new org.springframework.expression.spel.support.ReflectionHelperTests.Sub [ NUMBER ] . java.lang.Class<? extends org.springframework.expression.spel.support.ReflectionHelperTests.Sub[]> ( ) } , org.springframework.expression.spel.support.StandardTypeConverter , null ) ; void ( new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Unconvertable .class , java.lang.String .class } , new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Sub .class , org.springframework.expression.spel.support.ReflectionHelperTests.Super [] .class } , org.springframework.expression.spel.support.StandardTypeConverter , null ) ; void ( new java.lang.Class [] { java.lang.Integer .class , java.lang.Integer .class , java.lang.String .class } , new java.lang.Class [] { java.lang.String .class , java.lang.String .class , org.springframework.expression.spel.support.ReflectionHelperTests.Super [] .class } , org.springframework.expression.spel.support.StandardTypeConverter , null ) ; void ( new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Unconvertable .class , java.lang.String .class } , new java.lang.Class [] { org.springframework.expression.spel.support.ReflectionHelperTests.Sub .class , org.springframework.expression.spel.support.ReflectionHelperTests.Super [] .class } , org.springframework.expression.spel.support.StandardTypeConverter , null ) ; void ( new java.lang.Class [] { java.lang.Integer .class , java.lang.Integer .class , java.lang.String .class } , new java.lang.Class [] { java.lang.String .class , java.lang.String .class , org.springframework.expression.spel.support.ReflectionHelperTests.Super [] .class } , org.springframework.expression.spel.support.StandardTypeConverter , null ) ; void ( new java.lang.Class [] { java.lang.Integer .class , java.lang.Integer .class , org.springframework.expression.spel.support.ReflectionHelperTests.Sub .class } , new java.lang.Class [] { java.lang.String .class , java.lang.String .class , org.springframework.expression.spel.support.ReflectionHelperTests.Super [] .class } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . REQUIRES_CONVERSION ) ; void ( new java.lang.Class [] { java.lang.Integer .class , java.lang.Integer .class , java.lang.Integer .class } , new java.lang.Class [] { java.lang.Integer .class , java.lang.String [] .class } , org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind . REQUIRES_CONVERSION ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardTypeConverter org.springframework.expression.spel.support.StandardTypeConverter = new StandardTypeConverter ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.expression.spel.support.ReflectionHelperTests.TestInterface .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.expression.spel.support.ReflectionHelperTests.TestInterface .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String [] .class ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { NUMBER } ; ReflectionHelper . convertArguments ( org.springframework.expression.spel.support.StandardTypeConverter , java.lang.Object[] , java.lang.reflect.Method , null ) ; void ( java.lang.Object[] , STRING ) ; java.lang.Object[] = new java.lang.Object [] { NUMBER } ; ReflectionHelper . convertArguments ( org.springframework.expression.spel.support.StandardTypeConverter , java.lang.Object[] , java.lang.reflect.Method , NUMBER ) ; void ( java.lang.Object[] , STRING ) ; java.lang.Object[] = new java.lang.Object [] { NUMBER , STRING , STRING } ; ReflectionHelper . convertArguments ( org.springframework.expression.spel.support.StandardTypeConverter , java.lang.Object[] , java.lang.reflect.Method , NUMBER ) ; void ( java.lang.Object[] , STRING , STRING , STRING ) ; java.lang.Object[] = new java.lang.Object [] { NUMBER , false , NUMBER } ; ReflectionHelper . convertArguments ( org.springframework.expression.spel.support.StandardTypeConverter , java.lang.Object[] , java.lang.reflect.Method , NUMBER ) ; void ( java.lang.Object[] , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardTypeConverter org.springframework.expression.spel.support.StandardTypeConverter = new StandardTypeConverter ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.expression.spel.support.ReflectionHelperTests.TestInterface .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.expression.spel.support.ReflectionHelperTests.TestInterface .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String [] .class ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { NUMBER } ; ReflectionHelper . convertAllArguments ( org.springframework.expression.spel.support.StandardTypeConverter , java.lang.Object[] , java.lang.reflect.Method ) ; void ( java.lang.Object[] , STRING ) ; java.lang.Object[] = new java.lang.Object [] { NUMBER , false , NUMBER } ; ReflectionHelper . convertAllArguments ( org.springframework.expression.spel.support.StandardTypeConverter , java.lang.Object[] , java.lang.reflect.Method ) ; void ( java.lang.Object[] , STRING , STRING , STRING ) ; java.lang.Object[] = new java.lang.Object [] { NUMBER } ; ReflectionHelper . convertAllArguments ( org.springframework.expression.spel.support.StandardTypeConverter , java.lang.Object[] , java.lang.reflect.Method ) ; void ( java.lang.Object[] , STRING ) ; java.lang.Object[] = new java.lang.Object [] { NUMBER , null , NUMBER } ; ReflectionHelper . convertAllArguments ( org.springframework.expression.spel.support.StandardTypeConverter , java.lang.Object[] , java.lang.reflect.Method ) ; void ( java.lang.Object[] , STRING , null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = ReflectionHelper . setupArgumentsForVarargsInvocation ( new java.lang.Class [] { new java.lang.String [ NUMBER ] . java.lang.Class<? extends java.lang.String[]> ( ) } , STRING , STRING , STRING ) ; assertEquals ( NUMBER , java.lang.Object[] . int ) ; java.lang.Object java.lang.Object = java.lang.Object[] [ NUMBER ] ; assertEquals ( java.lang.String .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<?> ( ) ) ; java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) java.lang.Object ; assertEquals ( NUMBER , java.lang.Object[] . int ) ; assertEquals ( STRING , java.lang.Object[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.Object[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.Object[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReflectivePropertyAccessor org.springframework.expression.spel.support.ReflectivePropertyAccessor = new ReflectivePropertyAccessor ( ) ; org.springframework.expression.spel.support.ReflectionHelperTests.Tester org.springframework.expression.spel.support.ReflectionHelperTests.Tester = new org.springframework.expression.spel.support.ReflectionHelperTests.Tester ( ) ; org.springframework.expression.spel.support.ReflectionHelperTests.Tester . void ( STRING ) ; EvaluationContext org.springframework.expression.spel.support.EvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.support.ReflectionHelperTests.Tester ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canWrite ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; org.springframework.expression.spel.support.ReflectivePropertyAccessor . write ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING , STRING ) ; org.springframework.expression.spel.support.ReflectivePropertyAccessor . write ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING , STRING ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canWrite ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; org.springframework.expression.spel.support.ReflectivePropertyAccessor . write ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING , NUMBER ) ; org.springframework.expression.spel.support.ReflectivePropertyAccessor . write ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING , NUMBER ) ; org.springframework.expression.spel.support.ReflectivePropertyAccessor . write ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING , NUMBER ) ; org.springframework.expression.spel.support.ReflectivePropertyAccessor . write ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertEquals ( false , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertTrue ( org.springframework.expression.spel.support.ReflectivePropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; org.springframework.expression.spel.support.ReflectivePropertyAccessor . write ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.support.ReflectivePropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReflectivePropertyAccessor org.springframework.expression.spel.support.ReflectivePropertyAccessor = new ReflectivePropertyAccessor ( ) ; org.springframework.expression.spel.support.ReflectionHelperTests.Tester org.springframework.expression.spel.support.ReflectionHelperTests.Tester = new org.springframework.expression.spel.support.ReflectionHelperTests.Tester ( ) ; org.springframework.expression.spel.support.ReflectionHelperTests.Tester . void ( STRING ) ; EvaluationContext org.springframework.expression.spel.support.EvaluationContext = new StandardEvaluationContext ( org.springframework.expression.spel.support.ReflectionHelperTests.Tester ) ; PropertyAccessor org.springframework.expression.spel.support.PropertyAccessor = org.springframework.expression.spel.support.ReflectivePropertyAccessor . createOptimalAccessor ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ; assertTrue ( org.springframework.expression.spel.support.PropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; assertFalse ( org.springframework.expression.spel.support.PropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; try { org.springframework.expression.spel.support.PropertyAccessor . canWrite ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } try { org.springframework.expression.spel.support.PropertyAccessor . canWrite ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } assertEquals ( STRING , org.springframework.expression.spel.support.PropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.support.PropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; try { org.springframework.expression.spel.support.PropertyAccessor . getSpecificTargetClasses ( ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } try { org.springframework.expression.spel.support.PropertyAccessor . write ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING , null ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } org.springframework.expression.spel.support.PropertyAccessor = org.springframework.expression.spel.support.ReflectivePropertyAccessor . createOptimalAccessor ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ; assertTrue ( org.springframework.expression.spel.support.PropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; assertFalse ( org.springframework.expression.spel.support.PropertyAccessor . canRead ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ) ; try { org.springframework.expression.spel.support.PropertyAccessor . canWrite ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } try { org.springframework.expression.spel.support.PropertyAccessor . canWrite ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } assertEquals ( NUMBER , org.springframework.expression.spel.support.PropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.support.PropertyAccessor . read ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING ) . getValue ( ) ) ; try { org.springframework.expression.spel.support.PropertyAccessor . getSpecificTargetClasses ( ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } try { org.springframework.expression.spel.support.PropertyAccessor . write ( org.springframework.expression.spel.support.EvaluationContext , org.springframework.expression.spel.support.ReflectionHelperTests.Tester , STRING , null ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , StandardTypeConverter org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind org.springframework.expression.spel.support.ArgumentsMatchKind ) { ReflectionHelper . ReflectionHelper ReflectionHelper.ArgumentsMatchInfo = ReflectionHelper . compareArguments ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> ( java.lang.Class<?>[] ) , java.util.List<org.springframework.expression.spel.support.TypeDescriptor> ( java.lang.Class<?>[] ) , org.springframework.expression.spel.support.StandardTypeConverter ) ; if ( org.springframework.expression.spel.support.ArgumentsMatchKind == null ) { assertNull ( STRING , ReflectionHelper.ArgumentsMatchInfo ) ; } else { assertNotNull ( STRING , ReflectionHelper.ArgumentsMatchInfo ) ; } if ( org.springframework.expression.spel.support.ArgumentsMatchKind == ArgumentsMatchKind . EXACT ) { assertTrue ( ReflectionHelper.ArgumentsMatchInfo . isExactMatch ( ) ) ; } else if ( org.springframework.expression.spel.support.ArgumentsMatchKind == ArgumentsMatchKind . CLOSE ) { assertTrue ( ReflectionHelper.ArgumentsMatchInfo . isCloseMatch ( ) ) ; } else if ( org.springframework.expression.spel.support.ArgumentsMatchKind == ArgumentsMatchKind . REQUIRES_CONVERSION ) { assertTrue ( STRING + ReflectionHelper.ArgumentsMatchInfo , ReflectionHelper.ArgumentsMatchInfo . isMatchRequiringConversion ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , StandardTypeConverter org.springframework.expression.spel.support.StandardTypeConverter , ArgumentsMatchKind org.springframework.expression.spel.support.ArgumentsMatchKind ) { ReflectionHelper . ReflectionHelper ReflectionHelper.ArgumentsMatchInfo = ReflectionHelper . compareArgumentsVarargs ( java.util.List<org.springframework.expression.spel.support.TypeDescriptor> ( java.lang.Class<?>[] ) , java.util.List<org.springframework.expression.spel.support.TypeDescriptor> ( java.lang.Class<?>[] ) , org.springframework.expression.spel.support.StandardTypeConverter ) ; if ( org.springframework.expression.spel.support.ArgumentsMatchKind == null ) { assertNull ( STRING + ReflectionHelper.ArgumentsMatchInfo , ReflectionHelper.ArgumentsMatchInfo ) ; } else { assertNotNull ( STRING , ReflectionHelper.ArgumentsMatchInfo ) ; } if ( org.springframework.expression.spel.support.ArgumentsMatchKind == ArgumentsMatchKind . EXACT ) { assertTrue ( ReflectionHelper.ArgumentsMatchInfo . isExactMatch ( ) ) ; } else if ( org.springframework.expression.spel.support.ArgumentsMatchKind == ArgumentsMatchKind . CLOSE ) { assertTrue ( ReflectionHelper.ArgumentsMatchInfo . isCloseMatch ( ) ) ; } else if ( org.springframework.expression.spel.support.ArgumentsMatchKind == ArgumentsMatchKind . REQUIRES_CONVERSION ) { assertTrue ( STRING + ReflectionHelper.ArgumentsMatchInfo , ReflectionHelper.ArgumentsMatchInfo . isMatchRequiringConversion ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object [] java.lang.Object[] , java.lang.Object ... java.lang.Object[] ) { assertEquals ( java.lang.Object[] . int , java.lang.Object[] . int ) ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { void ( java.lang.Object[] [ int ] , java.lang.Object[] [ int ] ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { assertEquals ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.util.List<org.springframework.expression.spel.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.support.TypeDescriptor> = new java.util.ArrayList<org.springframework.expression.spel.support.TypeDescriptor> <> ( java.lang.Class<?>[] . int ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.List<org.springframework.expression.spel.support.TypeDescriptor> . add ( TypeDescriptor . valueOf ( java.lang.Class<> ) ) ; } return java.util.List<org.springframework.expression.spel.support.TypeDescriptor> ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] );  <METHOD_END>
