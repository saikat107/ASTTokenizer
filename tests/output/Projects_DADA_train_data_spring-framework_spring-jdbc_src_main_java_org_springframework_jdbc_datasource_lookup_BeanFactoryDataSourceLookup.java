<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.jdbc.datasource.lookup.BeanFactory ) { Assert . notNull ( org.springframework.jdbc.datasource.lookup.BeanFactory , STRING ) ; this . org.springframework.jdbc.datasource.lookup.BeanFactory = org.springframework.jdbc.datasource.lookup.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.jdbc.datasource.lookup.BeanFactory ) { this . org.springframework.jdbc.datasource.lookup.BeanFactory = org.springframework.jdbc.datasource.lookup.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.sql.DataSource javax.sql.DataSource ( java.lang.String java.lang.String ) throws org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException { Assert . state ( this . org.springframework.jdbc.datasource.lookup.BeanFactory != null , STRING ) ; try { return this . org.springframework.jdbc.datasource.lookup.BeanFactory . getBean ( java.lang.String , javax.sql.DataSource .class ) ; } catch ( BeansException org.springframework.jdbc.datasource.lookup.BeansException ) { throw new DataSourceLookupFailureException ( STRING + java.lang.String + STRING , org.springframework.jdbc.datasource.lookup.BeansException ) ; } }  <METHOD_END>
