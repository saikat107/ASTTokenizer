<METHOD_START> public void ( AsyncRabbitTemplate org.springframework.integration.amqp.outbound.AsyncRabbitTemplate ) { Assert . notNull ( org.springframework.integration.amqp.outbound.AsyncRabbitTemplate , STRING ) ; this . org.springframework.integration.amqp.outbound.AsyncRabbitTemplate = org.springframework.integration.amqp.outbound.AsyncRabbitTemplate ; this . org.springframework.integration.amqp.outbound.MessageConverter = org.springframework.integration.amqp.outbound.AsyncRabbitTemplate . getMessageConverter ( ) ; Assert . notNull ( this . org.springframework.integration.amqp.outbound.MessageConverter , STRING ) ; setConnectionFactory ( this . org.springframework.integration.amqp.outbound.AsyncRabbitTemplate . getConnectionFactory ( ) ) ; setAsync ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doStart ( ) ; this . org.springframework.integration.amqp.outbound.AsyncRabbitTemplate . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.amqp.outbound.AsyncRabbitTemplate . stop ( ) ; super. doStop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.amqp.outbound.Message<?> ) { org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message = MappingUtils . mapMessage ( org.springframework.integration.amqp.outbound.Message<> , this . org.springframework.integration.amqp.outbound.MessageConverter , getHeaderMapper ( ) , getDefaultDeliveryMode ( ) , isHeadersMappedLast ( ) ) ; addDelayProperty ( org.springframework.integration.amqp.outbound.Message<> , org.springframework.amqp.core.Message ) ; RabbitMessageFuture org.springframework.integration.amqp.outbound.RabbitMessageFuture = this . org.springframework.integration.amqp.outbound.AsyncRabbitTemplate . sendAndReceive ( generateExchangeName ( org.springframework.integration.amqp.outbound.Message<> ) , generateRoutingKey ( org.springframework.integration.amqp.outbound.Message<> ) , org.springframework.amqp.core.Message ) ; org.springframework.integration.amqp.outbound.RabbitMessageFuture . addCallback ( new org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway.FutureCallback ( org.springframework.integration.amqp.outbound.Message<> ) ) ; CorrelationData org.springframework.integration.amqp.outbound.CorrelationData = generateCorrelationData ( org.springframework.integration.amqp.outbound.Message<> ) ; if ( org.springframework.integration.amqp.outbound.CorrelationData != null && org.springframework.integration.amqp.outbound.RabbitMessageFuture . getConfirm ( ) != null ) { org.springframework.integration.amqp.outbound.RabbitMessageFuture . getConfirm ( ) . addCallback ( new org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway.CorrelationCallback ( org.springframework.integration.amqp.outbound.CorrelationData , org.springframework.integration.amqp.outbound.RabbitMessageFuture ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> void ( Message < ? > org.springframework.integration.amqp.outbound.Message<?> ) { this . org.springframework.integration.amqp.outbound.Message<?> = org.springframework.integration.amqp.outbound.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message ) { AbstractIntegrationMessageBuilder < ? > org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<?> = null ; try { org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<?> = buildReply ( org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway .this . org.springframework.integration.amqp.outbound.MessageConverter , org.springframework.amqp.core.Message ) ; sendOutputs ( org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<> , this . org.springframework.integration.amqp.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception java.lang.Exception = java.lang.Exception ; if ( ! ( java.lang.Exception instanceof MessagingException ) ) { java.lang.Exception = new MessageHandlingException ( this . org.springframework.integration.amqp.outbound.Message<> , java.lang.Exception ) ; if ( org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<> != null ) { java.lang.Exception = new MessagingException ( org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<> . build ( ) , java.lang.Exception ) ; } } logger . error ( STRING + org.springframework.amqp.core.Message . toString ( ) , java.lang.Exception ) ; sendErrorMessage ( this . org.springframework.integration.amqp.outbound.Message<> , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { java.lang.Throwable java.lang.Throwable = java.lang.Throwable ; if ( java.lang.Throwable instanceof AmqpReplyTimeoutException ) { if ( getRequiresReply ( ) ) { java.lang.Throwable = new ReplyRequiredException ( this . org.springframework.integration.amqp.outbound.Message<> , STRING , java.lang.Throwable ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . org.springframework.integration.amqp.outbound.Message<> ) ; } return; } } if ( java.lang.Throwable instanceof AmqpMessageReturnedException ) { if ( getReturnChannel ( ) == null ) { logger . error ( STRING + ( ( AmqpMessageReturnedException ) java.lang.Throwable ) . getReturnedMessage ( ) ) ; } else { AmqpMessageReturnedException org.springframework.integration.amqp.outbound.AmqpMessageReturnedException = ( AmqpMessageReturnedException ) java.lang.Throwable ; Message < ? > org.springframework.integration.amqp.outbound.Message<?> = buildReturnedMessage ( org.springframework.integration.amqp.outbound.AmqpMessageReturnedException . getReturnedMessage ( ) , org.springframework.integration.amqp.outbound.AmqpMessageReturnedException . getReplyCode ( ) , org.springframework.integration.amqp.outbound.AmqpMessageReturnedException . getReplyText ( ) , org.springframework.integration.amqp.outbound.AmqpMessageReturnedException . getExchange ( ) , org.springframework.integration.amqp.outbound.AmqpMessageReturnedException . getRoutingKey ( ) , org.springframework.integration.amqp.outbound.AsyncAmqpOutboundGateway .this . org.springframework.integration.amqp.outbound.MessageConverter ) ; sendOutput ( org.springframework.integration.amqp.outbound.Message<> , getReturnChannel ( ) , true ) ; } } else { sendErrorMessage ( this . org.springframework.integration.amqp.outbound.Message<> , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> void ( CorrelationData org.springframework.integration.amqp.outbound.CorrelationData , RabbitMessageFuture org.springframework.integration.amqp.outbound.RabbitMessageFuture ) { this . org.springframework.integration.amqp.outbound.CorrelationData = org.springframework.integration.amqp.outbound.CorrelationData ; this . org.springframework.integration.amqp.outbound.RabbitMessageFuture = org.springframework.integration.amqp.outbound.RabbitMessageFuture ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Boolean java.lang.Boolean ) { try { handleConfirm ( this . org.springframework.integration.amqp.outbound.CorrelationData , java.lang.Boolean , this . org.springframework.integration.amqp.outbound.RabbitMessageFuture . getNackCause ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) {		}  <METHOD_END>
