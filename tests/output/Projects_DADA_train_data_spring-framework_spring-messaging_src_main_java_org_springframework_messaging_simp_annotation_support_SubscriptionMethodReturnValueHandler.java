<METHOD_START> public void ( MessageSendingOperations < java.lang.String > org.springframework.messaging.simp.annotation.support.MessageSendingOperations<java.lang.String> ) { Assert . notNull ( org.springframework.messaging.simp.annotation.support.MessageSendingOperations<java.lang.String> , STRING ) ; this . org.springframework.messaging.simp.annotation.support.MessageSendingOperations<java.lang.String> = org.springframework.messaging.simp.annotation.support.MessageSendingOperations<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHeaderInitializer org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ) { this . org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer = org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ( ) { return this . org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.messaging.simp.annotation.support.MethodParameter ) { return ( org.springframework.messaging.simp.annotation.support.MethodParameter . hasMethodAnnotation ( SubscribeMapping .class ) && ! org.springframework.messaging.simp.annotation.support.MethodParameter . hasMethodAnnotation ( SendTo .class ) && ! org.springframework.messaging.simp.annotation.support.MethodParameter . hasMethodAnnotation ( SendToUser .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.messaging.simp.annotation.support.MethodParameter , Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> )			throws java.lang.Exception { if ( java.lang.Object == null ) { return; } MessageHeaders org.springframework.messaging.simp.annotation.support.MessageHeaders = org.springframework.messaging.simp.annotation.support.Message<> . getHeaders ( ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.annotation.support.MessageHeaders ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getSessionId ( org.springframework.messaging.simp.annotation.support.MessageHeaders ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getSubscriptionId ( org.springframework.messaging.simp.annotation.support.MessageHeaders ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.messaging.simp.annotation.support.Message<> + STRING + org.springframework.messaging.simp.annotation.support.MethodParameter . getMethod ( ) ) ; } if ( org.springframework.messaging.simp.annotation.support.Log . isDebugEnabled ( ) ) { org.springframework.messaging.simp.annotation.support.Log . debug ( STRING + java.lang.Object ) ; } MessageHeaders org.springframework.messaging.simp.annotation.support.MessageHeaders = org.springframework.messaging.simp.annotation.support.MessageHeaders ( java.lang.String , java.lang.String , org.springframework.messaging.simp.annotation.support.MethodParameter ) ; this . org.springframework.messaging.simp.annotation.support.MessageSendingOperations<java.lang.String> . convertAndSend ( java.lang.String , java.lang.Object , org.springframework.messaging.simp.annotation.support.MessageHeaders ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.annotation.support.MessageHeaders org.springframework.messaging.simp.annotation.support.MessageHeaders ( java.lang.String java.lang.String , java.lang.String java.lang.String , MethodParameter org.springframework.messaging.simp.annotation.support.MethodParameter ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . MESSAGE ) ; if ( org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ( ) != null ) { org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ( ) . initHeaders ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ) ; } org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSubscriptionId ( java.lang.String ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setHeader ( SimpMessagingTemplate . CONVERSION_HINT_HEADER , org.springframework.messaging.simp.annotation.support.MethodParameter ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setLeaveMutable ( true ) ; return org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getMessageHeaders ( ) ; }  <METHOD_END>
