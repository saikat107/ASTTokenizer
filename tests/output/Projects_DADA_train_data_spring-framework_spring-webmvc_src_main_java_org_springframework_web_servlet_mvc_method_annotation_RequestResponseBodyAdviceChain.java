<METHOD_START> public void ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { void ( java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { if ( java.util.List<java.lang.Object> == null ) { return; } for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object instanceof ControllerAdviceBean ? ( ( ControllerAdviceBean ) java.lang.Object ) . getBeanType ( ) : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( RequestBodyAdvice .class . boolean ( java.lang.Class<> ) ) { this . java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } else if ( ResponseBodyAdvice .class . boolean ( java.lang.Class<> ) ) { this . java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( RequestBodyAdvice .class == java.lang.Class<> ) { return this . java.util.List<java.lang.Object> ; } else if ( ResponseBodyAdvice .class == java.lang.Class<> ) { return this . java.util.List<java.lang.Object> ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { for ( RequestBodyAdvice org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice : java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , RequestBodyAdvice .class ) ) { if ( org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice . supports ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type , java.lang.Class<> ) ) { java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice . handleEmptyBody ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type , java.lang.Class<> ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage ( HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) throws java.io.IOException { for ( RequestBodyAdvice org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice : java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , RequestBodyAdvice .class ) ) { if ( org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice . supports ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type , java.lang.Class<> ) ) { org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage = org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice . beforeBodyRead ( org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type , java.lang.Class<> ) ; } } return org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { for ( RequestBodyAdvice org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice : java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , RequestBodyAdvice .class ) ) { if ( org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice . supports ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type , java.lang.Class<> ) ) { java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice . afterBodyRead ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type , java.lang.Class<> ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , ServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServerHttpRequest , ServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) { return java.lang.Object ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.MediaType , java.lang.Class<> , org.springframework.web.servlet.mvc.method.annotation.ServerHttpRequest , org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType , java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < ? extends HttpMessageConverter < ? > > java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , ServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServerHttpRequest , ServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) { for ( ResponseBodyAdvice < ? > org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<?> : java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ResponseBodyAdvice .class ) ) { if ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<> . supports ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.Class<> ) ) { java.lang.Object = ( ( ResponseBodyAdvice < T > ) org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<> ) . beforeBodyWrite ( ( T ) java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.MediaType , java.lang.Class<> , org.springframework.web.servlet.mvc.method.annotation.ServerHttpRequest , org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < A > java.util.List<A> < A > java.util.List<A> ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.Class<? extends A> < ? extends A > java.lang.Class<? extends A> ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( java.lang.Class<> ) ; if ( CollectionUtils . isEmpty ( java.util.List<java.lang.Object> ) ) { return java.util.Collections . java.util.List<A> ( ) ; } java.util.List<A> < A > java.util.List<A> = new java.util.ArrayList<A> <> ( java.util.List<java.lang.Object> . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { if ( java.lang.Object instanceof ControllerAdviceBean ) { ControllerAdviceBean org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean = ( ControllerAdviceBean ) java.lang.Object ; if ( ! org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean . isApplicableToBeanType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getContainingClass ( ) ) ) { continue; } java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean . resolveBean ( ) ; } if ( java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.util.List<A> . boolean ( ( A ) java.lang.Object ) ; } } return java.util.List<A> ; }  <METHOD_END>
