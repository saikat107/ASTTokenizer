<METHOD_START> @ Test public void void ( ) { assertThat ( TestGroup . parse ( null ) , equalTo ( java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( TestGroup . parse ( STRING ) , equalTo ( java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( TestGroup . parse ( STRING ) , equalTo ( java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( TestGroup . parse ( STRING ) , equalTo ( java.util.EnumSet . java.util.EnumSet ( TestGroup . PERFORMANCE ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( TestGroup . parse ( STRING ) , equalTo ( java.util.EnumSet . java.util.EnumSet ( TestGroup . PERFORMANCE ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.tests.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.tests.ExpectedException . expectMessage ( STRING + STRING + STRING ) ; TestGroup . parse ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( TestGroup . parse ( STRING ) , equalTo ( java.util.EnumSet . java.util.EnumSet<E> ( TestGroup .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<org.springframework.tests.TestGroup> < TestGroup > java.util.Set<org.springframework.tests.TestGroup> = java.util.EnumSet . java.util.EnumSet<E> ( TestGroup .class ) ; java.util.Set<org.springframework.tests.TestGroup> . remove ( TestGroup . PERFORMANCE ) ; assertThat ( TestGroup . parse ( STRING ) , equalTo ( java.util.Set<org.springframework.tests.TestGroup> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.tests.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.tests.ExpectedException . expectMessage ( STRING + STRING + STRING ) ; TestGroup . parse ( STRING ) ; }  <METHOD_END>
