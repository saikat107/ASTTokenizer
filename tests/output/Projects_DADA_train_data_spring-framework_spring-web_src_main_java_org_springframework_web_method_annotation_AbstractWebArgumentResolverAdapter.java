<METHOD_START> public void ( WebArgumentResolver org.springframework.web.method.annotation.WebArgumentResolver ) { Assert . notNull ( org.springframework.web.method.annotation.WebArgumentResolver , STRING ) ; this . org.springframework.web.method.annotation.WebArgumentResolver = org.springframework.web.method.annotation.WebArgumentResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.method.annotation.MethodParameter ) { try { NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest = org.springframework.web.method.annotation.NativeWebRequest ( ) ; java.lang.Object java.lang.Object = this . org.springframework.web.method.annotation.WebArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , org.springframework.web.method.annotation.NativeWebRequest ) ; if ( java.lang.Object == WebArgumentResolver . UNRESOLVED ) { return false ; } else { return ClassUtils . isAssignableValue ( org.springframework.web.method.annotation.MethodParameter . getParameterType ( ) , java.lang.Object ) ; } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.web.method.annotation.Log . debug ( STRING + org.springframework.web.method.annotation.MethodParameter + STRING + java.lang.Exception . java.lang.String ( ) ) ; return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.method.annotation.MethodParameter . getParameterType ( ) ; java.lang.Object java.lang.Object = this . org.springframework.web.method.annotation.WebArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , org.springframework.web.method.annotation.NativeWebRequest ) ; if ( java.lang.Object == WebArgumentResolver . UNRESOLVED || ! ClassUtils . isAssignableValue ( java.lang.Class<> , java.lang.Object ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + org.springframework.web.method.annotation.MethodParameter . getMethod ( ) + STRING + ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ) + STRING ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.method.annotation.NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest ( )  <METHOD_END>
