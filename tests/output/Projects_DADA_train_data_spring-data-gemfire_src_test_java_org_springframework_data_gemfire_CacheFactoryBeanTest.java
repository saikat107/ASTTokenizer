<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.Properties java.util.Properties = new java.util.Properties ( ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) { @ java.lang.Override protected void void ( java.util.Properties java.util.Properties ) { assertThat ( java.util.Properties , is ( sameInstance ( java.util.Properties ) ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } } ; org.springframework.data.gemfire.CacheFactoryBean . setProperties ( java.util.Properties ) ; org.springframework.data.gemfire.CacheFactoryBean . afterPropertiesSet ( ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Properties java.util.Properties ) { assertThat ( java.util.Properties , is ( sameInstance ( java.util.Properties ) ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeTrue ( GemfireUtils . isGemfireVersion8OrAbove ( ) ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; new CacheFactoryBean ( ) . postProcessBeforeCacheInitialization ( java.util.Properties ) ; assertThat ( java.util.Properties . int ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.Properties . boolean ( STRING ) , is ( true ) ) ; assertThat ( java.util.Properties . boolean ( STRING ) , is ( true ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeTrue ( GemfireUtils . isGemfireVersion8OrAbove ( ) ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setEnableAutoReconnect ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setUseClusterConfiguration ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . postProcessBeforeCacheInitialization ( java.util.Properties ) ; assertThat ( java.util.Properties . int ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.Properties . boolean ( STRING ) , is ( true ) ) ; assertThat ( java.util.Properties . boolean ( STRING ) , is ( true ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeTrue ( GemfireUtils . isGemfireVersion8OrAbove ( ) ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setEnableAutoReconnect ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setUseClusterConfiguration ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . postProcessBeforeCacheInitialization ( java.util.Properties ) ; assertThat ( java.util.Properties . int ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.Properties . boolean ( STRING ) , is ( true ) ) ; assertThat ( java.util.Properties . boolean ( STRING ) , is ( true ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeTrue ( GemfireUtils . isGemfireVersion8OrAbove ( ) ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setEnableAutoReconnect ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setUseClusterConfiguration ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . postProcessBeforeCacheInitialization ( java.util.Properties ) ; assertThat ( java.util.Properties . int ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.Properties . boolean ( STRING ) , is ( true ) ) ; assertThat ( java.util.Properties . boolean ( STRING ) , is ( true ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) { @ java.lang.Override org.springframework.data.gemfire.Cache org.springframework.data.gemfire.Cache ( ) java.lang.Exception { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.data.gemfire.Cache ; } } ; assertThat ( org.springframework.data.gemfire.CacheFactoryBean . getObject ( ) , is ( sameInstance ( org.springframework.data.gemfire.Cache ) ) ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( true ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.Cache ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.Cache org.springframework.data.gemfire.Cache ( ) java.lang.Exception { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.data.gemfire.Cache ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; assertThat ( org.springframework.data.gemfire.CacheFactoryBean . getObject ( ) , is ( sameInstance ( org.springframework.data.gemfire.Cache ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.data.gemfire.BeanFactory = mock ( BeanFactory .class ) ; Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; CacheTransactionManager org.springframework.data.gemfire.CacheTransactionManager = mock ( CacheTransactionManager .class ) ; DistributedMember org.springframework.data.gemfire.DistributedMember = mock ( DistributedMember .class ) ; DistributedSystem org.springframework.data.gemfire.DistributedSystem = mock ( DistributedSystem .class ) ; GatewayConflictResolver org.springframework.data.gemfire.GatewayConflictResolver = mock ( GatewayConflictResolver .class ) ; PdxSerializer org.springframework.data.gemfire.PdxSerializer = mock ( PdxSerializer .class ) ; Resource org.springframework.data.gemfire.Resource = mock ( Resource .class ) ; ResourceManager org.springframework.data.gemfire.ResourceManager = mock ( ResourceManager .class ) ; TransactionListener org.springframework.data.gemfire.TransactionListener = mock ( TransactionListener .class ) ; TransactionWriter org.springframework.data.gemfire.TransactionWriter = mock ( TransactionWriter .class ) ; final CacheFactory org.springframework.data.gemfire.CacheFactory = mock ( CacheFactory .class ) ; when ( org.springframework.data.gemfire.BeanFactory . getAliases ( anyString ( ) ) ) . thenReturn ( new java.lang.String [ NUMBER ] ) ; when ( org.springframework.data.gemfire.CacheFactory . create ( ) ) . thenReturn ( org.springframework.data.gemfire.Cache ) ; when ( org.springframework.data.gemfire.Cache . getCacheTransactionManager ( ) ) . thenReturn ( org.springframework.data.gemfire.CacheTransactionManager ) ; when ( org.springframework.data.gemfire.Cache . getDistributedSystem ( ) ) . thenReturn ( org.springframework.data.gemfire.DistributedSystem ) ; when ( org.springframework.data.gemfire.Cache . getResourceManager ( ) ) . thenReturn ( org.springframework.data.gemfire.ResourceManager ) ; when ( org.springframework.data.gemfire.Resource . getInputStream ( ) ) . thenReturn ( mock ( java.io.InputStream .class ) ) ; when ( org.springframework.data.gemfire.DistributedSystem . getDistributedMember ( ) ) . thenReturn ( org.springframework.data.gemfire.DistributedMember ) ; when ( org.springframework.data.gemfire.DistributedSystem . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.DistributedMember . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.DistributedMember . getGroups ( ) ) . thenReturn ( java.util.Collections .< java.lang.String > java.util.List<java.lang.String> ( ) ) ; when ( org.springframework.data.gemfire.DistributedMember . getRoles ( ) ) . thenReturn ( java.util.Collections .< Role > java.util.Set<org.springframework.data.gemfire.Role> ( ) ) ; when ( org.springframework.data.gemfire.DistributedMember . getHost ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.DistributedMember . getProcessId ( ) ) . thenReturn ( NUMBER ) ; final java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; final java.util.Properties java.util.Properties = new java.util.Properties ( ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( final java.util.Properties java.util.Properties ) { assertThat ( java.util.Properties , is ( equalTo ( java.util.Properties ) ) ) ; assertThat ( getBeanClassLoader ( ) , is ( equalTo ( java.lang.ClassLoader . java.lang.ClassLoader ( ) ) ) ) ; return org.springframework.data.gemfire.CacheFactory ; } } ; org.springframework.data.gemfire.CacheFactoryBean . setBeanClassLoader ( java.lang.ClassLoader . java.lang.ClassLoader ( ) ) ; org.springframework.data.gemfire.CacheFactoryBean . setBeanFactory ( org.springframework.data.gemfire.BeanFactory ) ; org.springframework.data.gemfire.CacheFactoryBean . setBeanName ( STRING ) ; org.springframework.data.gemfire.CacheFactoryBean . setCacheXml ( org.springframework.data.gemfire.Resource ) ; org.springframework.data.gemfire.CacheFactoryBean . setCopyOnRead ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setCriticalHeapPercentage ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setDynamicRegionSupport ( null ) ; org.springframework.data.gemfire.CacheFactoryBean . setEnableAutoReconnect ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setEvictionHeapPercentage ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setGatewayConflictResolver ( org.springframework.data.gemfire.GatewayConflictResolver ) ; org.springframework.data.gemfire.CacheFactoryBean . setJndiDataSources ( null ) ; org.springframework.data.gemfire.CacheFactoryBean . setLockLease ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setLockTimeout ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setMessageSyncInterval ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxDiskStoreName ( STRING ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxIgnoreUnreadFields ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxPersistent ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxReadSerialized ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxSerializer ( org.springframework.data.gemfire.PdxSerializer ) ; org.springframework.data.gemfire.CacheFactoryBean . setProperties ( java.util.Properties ) ; org.springframework.data.gemfire.CacheFactoryBean . setSearchTimeout ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setTransactionListeners ( java.util.Collections . java.util.List ( org.springframework.data.gemfire.TransactionListener ) ) ; org.springframework.data.gemfire.CacheFactoryBean . setTransactionWriter ( org.springframework.data.gemfire.TransactionWriter ) ; org.springframework.data.gemfire.CacheFactoryBean . setUseBeanFactoryLocator ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . afterPropertiesSet ( ) ; org.springframework.data.gemfire.CacheFactoryBean . init ( ) ; assertThat ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) , is ( sameInstance ( java.lang.ClassLoader ) ) ) ; GemfireBeanFactoryLocator org.springframework.data.gemfire.GemfireBeanFactoryLocator = org.springframework.data.gemfire.CacheFactoryBean . getBeanFactoryLocator ( ) ; assertThat ( org.springframework.data.gemfire.GemfireBeanFactoryLocator , is ( notNullValue ( ) ) ) ; BeanFactory org.springframework.data.gemfire.BeanFactory = org.springframework.data.gemfire.GemfireBeanFactoryLocator . useBeanFactory ( STRING ) ; assertThat ( org.springframework.data.gemfire.BeanFactory , is ( sameInstance ( org.springframework.data.gemfire.BeanFactory ) ) ) ; verify ( org.springframework.data.gemfire.BeanFactory , times ( NUMBER ) ) . getAliases ( anyString ( ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxDiskStore ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxIgnoreUnreadFields ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxPersistent ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxReadSerialized ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxSerializer ( eq ( org.springframework.data.gemfire.PdxSerializer ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . create ( ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . getCacheTransactionManager ( ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . loadCacheXml ( any ( java.io.InputStream .class ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . setCopyOnRead ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . setGatewayConflictResolver ( same ( org.springframework.data.gemfire.GatewayConflictResolver ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . setLockLease ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . setLockTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . setMessageSyncInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . getResourceManager ( ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . setSearchTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.ResourceManager , times ( NUMBER ) ) . setCriticalHeapPercentage ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.ResourceManager , times ( NUMBER ) ) . setEvictionHeapPercentage ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.CacheTransactionManager , times ( NUMBER ) ) . addListener ( same ( org.springframework.data.gemfire.TransactionListener ) ) ; verify ( org.springframework.data.gemfire.CacheTransactionManager , times ( NUMBER ) ) . setWriter ( same ( org.springframework.data.gemfire.TransactionWriter ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( final java.util.Properties java.util.Properties ) { assertThat ( java.util.Properties , is ( equalTo ( java.util.Properties ) ) ) ; assertThat ( getBeanClassLoader ( ) , is ( equalTo ( java.lang.ClassLoader . java.lang.ClassLoader ( ) ) ) ) ; return org.springframework.data.gemfire.CacheFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected < T extends org.springframework.data.gemfire.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.Cache ; } } ; assertThat ( org.springframework.data.gemfire.CacheFactoryBean . resolveCache ( ) , is ( sameInstance ( org.springframework.data.gemfire.Cache ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.Cache ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected < T extends org.springframework.data.gemfire.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.Cache ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; final CacheFactory org.springframework.data.gemfire.CacheFactory = mock ( CacheFactory .class ) ; when ( org.springframework.data.gemfire.CacheFactory . create ( ) ) . thenReturn ( org.springframework.data.gemfire.Cache ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) { @ java.lang.Override protected < T extends org.springframework.data.gemfire.GemFireCache > T T ( ) { throw new CacheClosedException ( STRING ) ; } @ java.lang.Override protected java.lang.Object java.lang.Object ( final java.util.Properties java.util.Properties ) { assertThat ( java.util.Properties , is ( sameInstance ( getProperties ( ) ) ) ) ; return org.springframework.data.gemfire.CacheFactory ; } } ; assertThat ( org.springframework.data.gemfire.CacheFactoryBean . resolveCache ( ) , is ( equalTo ( org.springframework.data.gemfire.Cache ) ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . create ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.Cache ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.GemFireCache > T T ( ) { throw new CacheClosedException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( final java.util.Properties java.util.Properties ) { assertThat ( java.util.Properties , is ( sameInstance ( getProperties ( ) ) ) ) ; return org.springframework.data.gemfire.CacheFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; Cache org.springframework.data.gemfire.Cache = org.springframework.data.gemfire.CacheFactoryBean . fetchCache ( ) ; assertThat ( org.springframework.data.gemfire.Cache , is ( sameInstance ( org.springframework.data.gemfire.Cache ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setProperties ( java.util.Properties ) ; assertThat ( org.springframework.data.gemfire.CacheFactoryBean . resolveProperties ( ) , is ( sameInstance ( java.util.Properties ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setProperties ( null ) ; java.util.Properties java.util.Properties = org.springframework.data.gemfire.CacheFactoryBean . resolveProperties ( ) ; assertThat ( java.util.Properties , is ( notNullValue ( ) ) ) ; assertThat ( java.util.Properties . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.lang.Object java.lang.Object = new CacheFactoryBean ( ) . createFactory ( java.util.Properties ) ; assertThat ( java.lang.Object , is ( instanceOf ( CacheFactory .class ) ) ) ; assertThat ( java.util.Properties . boolean ( ) , is ( true ) ) ; CacheFactory org.springframework.data.gemfire.CacheFactory = ( CacheFactory ) java.lang.Object ; org.springframework.data.gemfire.CacheFactory . set ( STRING , STRING ) ; assertThat ( java.util.Properties . boolean ( STRING ) , is ( true ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheFactory org.springframework.data.gemfire.CacheFactory = mock ( CacheFactory .class ) ; assertThat ( ( CacheFactory ) new CacheFactoryBean ( ) . prepareFactory ( org.springframework.data.gemfire.CacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.CacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxDiskStore ( any ( java.lang.String .class ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxIgnoreUnreadFields ( any ( java.lang.Boolean .class ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxPersistent ( any ( java.lang.Boolean .class ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxReadSerialized ( any ( java.lang.Boolean .class ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxSerializer ( any ( PdxSerializer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxSerializer ( mock ( PdxSerializer .class ) ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxReadSerialized ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxIgnoreUnreadFields ( false ) ; CacheFactory org.springframework.data.gemfire.CacheFactory = mock ( CacheFactory .class ) ; assertThat ( ( CacheFactory ) org.springframework.data.gemfire.CacheFactoryBean . prepareFactory ( org.springframework.data.gemfire.CacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.CacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxDiskStore ( any ( java.lang.String .class ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxIgnoreUnreadFields ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxPersistent ( any ( java.lang.Boolean .class ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxReadSerialized ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxSerializer ( any ( PdxSerializer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxDiskStoreName ( STRING ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxIgnoreUnreadFields ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxPersistent ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxReadSerialized ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxSerializer ( mock ( PdxSerializer .class ) ) ; CacheFactory org.springframework.data.gemfire.CacheFactory = mock ( CacheFactory .class ) ; assertThat ( ( CacheFactory ) org.springframework.data.gemfire.CacheFactoryBean . prepareFactory ( org.springframework.data.gemfire.CacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.CacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxDiskStore ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxIgnoreUnreadFields ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxPersistent ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxReadSerialized ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . setPdxSerializer ( any ( PdxSerializer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheFactory org.springframework.data.gemfire.CacheFactory = mock ( CacheFactory .class ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; try { CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxSerializer ( java.lang.Object ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxIgnoreUnreadFields ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxReadSerialized ( true ) ; org.springframework.data.gemfire.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.ExpectedException . expectMessage ( containsString ( java.lang.String . java.lang.String ( STRING , java.lang.Object ) ) ) ; org.springframework.data.gemfire.CacheFactoryBean . prepareFactory ( org.springframework.data.gemfire.CacheFactory ) ; } finally { verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxSerializer ( any ( PdxSerializer .class ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxDiskStore ( any ( java.lang.String .class ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxIgnoreUnreadFields ( any ( java.lang.Boolean .class ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxPersistent ( any ( java.lang.Boolean .class ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , never ( ) ) . setPdxReadSerialized ( any ( java.lang.Boolean .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; Cache org.springframework.data.gemfire.Cache = org.springframework.data.gemfire.CacheFactoryBean . createCache ( null ) ; assertThat ( org.springframework.data.gemfire.Cache , is ( sameInstance ( org.springframework.data.gemfire.Cache ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; CacheFactory org.springframework.data.gemfire.CacheFactory = mock ( CacheFactory .class ) ; when ( org.springframework.data.gemfire.CacheFactory . create ( ) ) . thenReturn ( org.springframework.data.gemfire.Cache ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; Cache org.springframework.data.gemfire.Cache = org.springframework.data.gemfire.CacheFactoryBean . createCache ( org.springframework.data.gemfire.CacheFactory ) ; assertThat ( org.springframework.data.gemfire.Cache , is ( equalTo ( org.springframework.data.gemfire.Cache ) ) ) ; verify ( org.springframework.data.gemfire.CacheFactory , times ( NUMBER ) ) . create ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setCriticalHeapPercentage ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . postProcess ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setEvictionHeapPercentage ( - NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . postProcess ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { assertThat ( ( java.lang.Class<org.springframework.data.gemfire.Cache> < Cache > ) new CacheFactoryBean ( ) . getObjectType ( ) , is ( equalTo ( Cache .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.Cache = mock ( Cache .class ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; assertThat ( org.springframework.data.gemfire.CacheFactoryBean . getObjectType ( ) , is ( equalTo ( ( java.lang.Class ) org.springframework.data.gemfire.Cache . getClass ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( new CacheFactoryBean ( ) . isSingleton ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final Cache org.springframework.data.gemfire.Cache = mock ( Cache .class , STRING ) ; GemfireBeanFactoryLocator org.springframework.data.gemfire.GemfireBeanFactoryLocator = mock ( GemfireBeanFactoryLocator .class ) ; when ( org.springframework.data.gemfire.Cache . isClosed ( ) ) . thenReturn ( false ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) { @ java.lang.Override protected org.springframework.data.gemfire.GemFireCache org.springframework.data.gemfire.GemFireCache ( ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.data.gemfire.Cache ; } } ; ReflectionUtils . setField ( CacheFactoryBean .class . java.lang.reflect.Field ( STRING ) , org.springframework.data.gemfire.CacheFactoryBean , org.springframework.data.gemfire.GemfireBeanFactoryLocator ) ; org.springframework.data.gemfire.CacheFactoryBean . setClose ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setUseBeanFactoryLocator ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . destroy ( ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . isClosed ( ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . close ( ) ; verify ( org.springframework.data.gemfire.GemfireBeanFactoryLocator , times ( NUMBER ) ) . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.GemFireCache org.springframework.data.gemfire.GemFireCache ( ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.data.gemfire.Cache ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) { @ java.lang.Override protected org.springframework.data.gemfire.GemFireCache org.springframework.data.gemfire.GemFireCache ( ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return null ; } } ; org.springframework.data.gemfire.CacheFactoryBean . setClose ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setUseBeanFactoryLocator ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . destroy ( ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.GemFireCache org.springframework.data.gemfire.GemFireCache ( ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final Cache org.springframework.data.gemfire.Cache = mock ( Cache .class , STRING ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) { @ java.lang.Override protected org.springframework.data.gemfire.GemFireCache org.springframework.data.gemfire.GemFireCache ( ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.data.gemfire.Cache ; } } ; org.springframework.data.gemfire.CacheFactoryBean . setClose ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setUseBeanFactoryLocator ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . destroy ( ) ; verify ( org.springframework.data.gemfire.Cache , never ( ) ) . isClosed ( ) ; verify ( org.springframework.data.gemfire.Cache , never ( ) ) . close ( ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.GemFireCache org.springframework.data.gemfire.GemFireCache ( ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.data.gemfire.Cache ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemFireCache org.springframework.data.gemfire.GemFireCache = mock ( GemFireCache .class , STRING ) ; new CacheFactoryBean ( ) . close ( org.springframework.data.gemfire.GemFireCache ) ; verify ( org.springframework.data.gemfire.GemFireCache , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.data.gemfire.BeanFactory = mock ( BeanFactory .class , STRING ) ; GatewayConflictResolver org.springframework.data.gemfire.GatewayConflictResolver = mock ( GatewayConflictResolver .class , STRING ) ; PdxSerializer org.springframework.data.gemfire.PdxSerializer = mock ( PdxSerializer .class , STRING ) ; Resource org.springframework.data.gemfire.Resource = mock ( Resource .class , STRING ) ; TransactionListener org.springframework.data.gemfire.TransactionListener = mock ( TransactionListener .class , STRING ) ; TransactionWriter org.springframework.data.gemfire.TransactionWriter = mock ( TransactionWriter .class , STRING ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; CacheFactoryBean org.springframework.data.gemfire.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.CacheFactoryBean . setBeanClassLoader ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.data.gemfire.CacheFactoryBean . setBeanFactory ( org.springframework.data.gemfire.BeanFactory ) ; org.springframework.data.gemfire.CacheFactoryBean . setBeanName ( STRING ) ; org.springframework.data.gemfire.CacheFactoryBean . setCacheXml ( org.springframework.data.gemfire.Resource ) ; org.springframework.data.gemfire.CacheFactoryBean . setProperties ( java.util.Properties ) ; org.springframework.data.gemfire.CacheFactoryBean . setUseBeanFactoryLocator ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setClose ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setCopyOnRead ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setDynamicRegionSupport ( new CacheFactoryBean . CacheFactoryBean ( ) ) ; org.springframework.data.gemfire.CacheFactoryBean . setEnableAutoReconnect ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setCriticalHeapPercentage ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setEvictionHeapPercentage ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setGatewayConflictResolver ( org.springframework.data.gemfire.GatewayConflictResolver ) ; org.springframework.data.gemfire.CacheFactoryBean . setJndiDataSources ( java.util.Collections . java.util.List ( new CacheFactoryBean . CacheFactoryBean ( ) ) ) ; org.springframework.data.gemfire.CacheFactoryBean . setLockLease ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setLockTimeout ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setMessageSyncInterval ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxSerializer ( org.springframework.data.gemfire.PdxSerializer ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxReadSerialized ( false ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxPersistent ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxIgnoreUnreadFields ( true ) ; org.springframework.data.gemfire.CacheFactoryBean . setPdxDiskStoreName ( STRING ) ; org.springframework.data.gemfire.CacheFactoryBean . setSearchTimeout ( NUMBER ) ; org.springframework.data.gemfire.CacheFactoryBean . setTransactionListeners ( java.util.Collections . java.util.List ( org.springframework.data.gemfire.TransactionListener ) ) ; org.springframework.data.gemfire.CacheFactoryBean . setTransactionWriter ( org.springframework.data.gemfire.TransactionWriter ) ; org.springframework.data.gemfire.CacheFactoryBean . setUseClusterConfiguration ( true ) ; assertEquals ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) , org.springframework.data.gemfire.CacheFactoryBean . getBeanClassLoader ( ) ) ; assertSame ( org.springframework.data.gemfire.BeanFactory , org.springframework.data.gemfire.CacheFactoryBean . getBeanFactory ( ) ) ; assertNull ( org.springframework.data.gemfire.CacheFactoryBean . getBeanFactoryLocator ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.CacheFactoryBean . getBeanName ( ) ) ; assertSame ( org.springframework.data.gemfire.Resource , org.springframework.data.gemfire.CacheFactoryBean . getCacheXml ( ) ) ; assertSame ( java.util.Properties , org.springframework.data.gemfire.CacheFactoryBean . getProperties ( ) ) ; assertTrue ( java.lang.Boolean . java.lang.Boolean . boolean ( TestUtils . readField ( STRING , org.springframework.data.gemfire.CacheFactoryBean ) ) ) ; assertTrue ( java.lang.Boolean . java.lang.Boolean . boolean ( TestUtils . readField ( STRING , org.springframework.data.gemfire.CacheFactoryBean ) ) ) ; assertTrue ( org.springframework.data.gemfire.CacheFactoryBean . getCopyOnRead ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.CacheFactoryBean . getCriticalHeapPercentage ( ) . floatValue ( ) , NUMBER ) ; assertNotNull ( org.springframework.data.gemfire.CacheFactoryBean . getDynamicRegionSupport ( ) ) ; assertTrue ( org.springframework.data.gemfire.CacheFactoryBean . getEnableAutoReconnect ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.CacheFactoryBean . getEvictionHeapPercentage ( ) . floatValue ( ) , NUMBER ) ; assertSame ( org.springframework.data.gemfire.GatewayConflictResolver , org.springframework.data.gemfire.CacheFactoryBean . getGatewayConflictResolver ( ) ) ; assertNotNull ( org.springframework.data.gemfire.CacheFactoryBean . getJndiDataSources ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.CacheFactoryBean . getJndiDataSources ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.CacheFactoryBean . getLockLease ( ) . intValue ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.CacheFactoryBean . getLockTimeout ( ) . intValue ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.CacheFactoryBean . getMessageSyncInterval ( ) . intValue ( ) ) ; assertSame ( org.springframework.data.gemfire.PdxSerializer , org.springframework.data.gemfire.CacheFactoryBean . getPdxSerializer ( ) ) ; assertFalse ( org.springframework.data.gemfire.CacheFactoryBean . getPdxReadSerialized ( ) ) ; assertTrue ( org.springframework.data.gemfire.CacheFactoryBean . getPdxPersistent ( ) ) ; assertTrue ( org.springframework.data.gemfire.CacheFactoryBean . getPdxIgnoreUnreadFields ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.CacheFactoryBean . getPdxDiskStoreName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.CacheFactoryBean . getSearchTimeout ( ) . intValue ( ) ) ; assertNotNull ( org.springframework.data.gemfire.CacheFactoryBean . getTransactionListeners ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.CacheFactoryBean . getTransactionListeners ( ) . size ( ) ) ; assertSame ( org.springframework.data.gemfire.TransactionListener , org.springframework.data.gemfire.CacheFactoryBean . getTransactionListeners ( ) . get ( NUMBER ) ) ; assertSame ( org.springframework.data.gemfire.TransactionWriter , org.springframework.data.gemfire.CacheFactoryBean . getTransactionWriter ( ) ) ; assertTrue ( org.springframework.data.gemfire.CacheFactoryBean . getUseClusterConfiguration ( ) ) ; }  <METHOD_END>
