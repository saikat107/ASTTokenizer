<METHOD_START> public static org.springframework.data.neo4j.transaction.Session org.springframework.data.neo4j.transaction.Session ( SessionFactory org.springframework.data.neo4j.transaction.SessionFactory ) { return ( Session ) java.lang.reflect.Proxy . java.lang.Object ( org.springframework.data.neo4j.transaction.SharedSessionCreator .class . java.lang.ClassLoader ( ) , new java.lang.Class<?> < ? > [] { Session .class } , new org.springframework.data.neo4j.transaction.SharedSessionCreator.SharedSessionInvocationHandler ( org.springframework.data.neo4j.transaction.SessionFactory ) ) ; }  <METHOD_END>
<METHOD_START> public void ( SessionFactory org.springframework.data.neo4j.transaction.SessionFactory ) { this . org.springframework.data.neo4j.transaction.SessionFactory = org.springframework.data.neo4j.transaction.SessionFactory ; this . java.lang.ClassLoader = this . org.springframework.data.neo4j.transaction.SessionFactory . getClass ( ) . getClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return int ( ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return STRING + org.springframework.data.neo4j.transaction.SessionFactory + STRING ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } Session org.springframework.data.neo4j.transaction.Session = SessionFactoryUtils . getSession ( this . org.springframework.data.neo4j.transaction.SessionFactory ) ; if ( java.util.Set<java.lang.String> . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { if ( org.springframework.data.neo4j.transaction.Session == null || ( ! TransactionSynchronizationManager . isActualTransactionActive ( ) && org.springframework.data.neo4j.transaction.Session . getTransaction ( ) != null && java.util.EnumSet . java.util.EnumSet ( CLOSED , COMMITTED , ROLLEDBACK ) . contains ( org.springframework.data.neo4j.transaction.Session . getTransaction ( ) . status ( ) ) ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING ) ; } } boolean boolean = false ; if ( org.springframework.data.neo4j.transaction.Session == null ) { org.springframework.data.neo4j.transaction.Logger . debug ( STRING ) ; org.springframework.data.neo4j.transaction.Session = this . org.springframework.data.neo4j.transaction.SessionFactory . openSession ( ) ; boolean = true ; } try { return java.lang.reflect.Method . java.lang.Object ( org.springframework.data.neo4j.transaction.Session , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } finally { if ( boolean ) { SessionFactoryUtils . closeSession ( org.springframework.data.neo4j.transaction.Session ) ; } } }  <METHOD_END>
