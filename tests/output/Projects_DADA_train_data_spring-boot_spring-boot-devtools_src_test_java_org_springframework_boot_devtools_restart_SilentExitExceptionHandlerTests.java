<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread = new org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread ( ) { @ java.lang.Override public void void ( ) { SilentExitExceptionHandler . exitCurrentThread ( ) ; fail ( STRING ) ; } } ; SilentExitExceptionHandler . setup ( org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread ) ; org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread . void ( ) ; assertThat ( org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread . java.lang.Throwable ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { SilentExitExceptionHandler . exitCurrentThread ( ) ; fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread = new org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread ( ) { @ java.lang.Override public void void ( ) { throw new java.lang.IllegalStateException ( STRING ) ; } } ; SilentExitExceptionHandler . setup ( org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread ) ; org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread . void ( ) ; assertThat ( org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread . java.lang.Throwable ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { SilentExitExceptionHandler . exitCurrentThread ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestSilentExitExceptionHandler org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestSilentExitExceptionHandler = new org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestSilentExitExceptionHandler ( ) ; org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestSilentExitExceptionHandler . uncaughtException ( java.lang.Thread . java.lang.Thread ( ) , java.lang.Exception ) ; try { assertThat ( org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestSilentExitExceptionHandler . boolean ) . isTrue ( ) ; } finally { org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestSilentExitExceptionHandler . void ( ) ; } } }  <METHOD_END>
<METHOD_START> void ( ) { void ( new java.lang.Thread.UncaughtExceptionHandler ( ) { @ java.lang.Override public void void ( java.lang.Thread java.lang.Thread , java.lang.Throwable java.lang.Throwable ) { org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread .this . java.lang.Throwable = java.lang.Throwable ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Thread java.lang.Thread , java.lang.Throwable java.lang.Throwable ) { org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestThread .this . java.lang.Throwable = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> public java.lang.Throwable java.lang.Throwable ( ) { return this . java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.InterruptedException { void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( null ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Thread [] java.lang.Thread[] ( ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { synchronized ( org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestSilentExitExceptionHandler .this . java.lang.Object ) { java.util.concurrent.CountDownLatch . void ( ) ; try { org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestSilentExitExceptionHandler .this . java.lang.Object . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } } } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; try { java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } return new java.lang.Thread [] { java.lang.Thread . java.lang.Thread ( ) , java.lang.Thread } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestSilentExitExceptionHandler .this . java.lang.Object ) { java.util.concurrent.CountDownLatch . void ( ) ; try { org.springframework.boot.devtools.restart.SilentExitExceptionHandlerTests.TestSilentExitExceptionHandler .this . java.lang.Object . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { synchronized ( this . java.lang.Object ) { this . java.lang.Object . void ( ) ; } }  <METHOD_END>
