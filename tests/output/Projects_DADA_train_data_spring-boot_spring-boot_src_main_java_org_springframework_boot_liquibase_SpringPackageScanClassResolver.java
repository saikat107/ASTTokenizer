<METHOD_START> public void ( Log org.springframework.boot.liquibase.Log ) { this . org.springframework.boot.liquibase.Log = org.springframework.boot.liquibase.Log ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { MetadataReaderFactory org.springframework.boot.liquibase.MetadataReaderFactory = new CachingMetadataReaderFactory ( java.lang.ClassLoader ) ; try { Resource [] org.springframework.boot.liquibase.Resource[] = org.springframework.boot.liquibase.Resource[] ( java.lang.ClassLoader , java.lang.String ) ; for ( Resource org.springframework.boot.liquibase.Resource : org.springframework.boot.liquibase.Resource[] ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.ClassLoader , org.springframework.boot.liquibase.MetadataReaderFactory , org.springframework.boot.liquibase.Resource ) ; if ( java.lang.Class<> != null ) { addFoundClass ( java.lang.Class<> ) ; } } } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.liquibase.Resource [] org.springframework.boot.liquibase.Resource[] ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String ) throws java.io.IOException { ResourcePatternResolver org.springframework.boot.liquibase.ResourcePatternResolver = new PathMatchingResourcePatternResolver ( java.lang.ClassLoader ) ; java.lang.String java.lang.String = ResourcePatternResolver . CLASSPATH_ALL_URL_PREFIX + ClassUtils . convertClassNameToResourcePath ( java.lang.String ) + STRING STRING ; Resource [] org.springframework.boot.liquibase.Resource[] = org.springframework.boot.liquibase.ResourcePatternResolver . getResources ( java.lang.String ) ; return org.springframework.boot.liquibase.Resource[] ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.ClassLoader java.lang.ClassLoader , MetadataReaderFactory org.springframework.boot.liquibase.MetadataReaderFactory , Resource org.springframework.boot.liquibase.Resource ) { try { MetadataReader org.springframework.boot.liquibase.MetadataReader = org.springframework.boot.liquibase.MetadataReaderFactory . getMetadataReader ( org.springframework.boot.liquibase.Resource ) ; return ClassUtils . forName ( org.springframework.boot.liquibase.MetadataReader . getClassMetadata ( ) . getClassName ( ) , java.lang.ClassLoader ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { void ( org.springframework.boot.liquibase.Resource , java.lang.ClassNotFoundException ) ; return null ; } catch ( java.lang.LinkageError java.lang.LinkageError ) { void ( org.springframework.boot.liquibase.Resource , java.lang.LinkageError ) ; return null ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.boot.liquibase.Log . isWarnEnabled ( ) ) { this . org.springframework.boot.liquibase.Log . warn ( STRING + org.springframework.boot.liquibase.Resource , java.lang.Throwable ) ; } return null ; } }  <METHOD_END>
<METHOD_START> private void void ( Resource org.springframework.boot.liquibase.Resource , java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.boot.liquibase.Log . isDebugEnabled ( ) ) { this . org.springframework.boot.liquibase.Log . debug ( STRING + org.springframework.boot.liquibase.Resource + STRING + java.lang.Throwable ) ; } }  <METHOD_END>
