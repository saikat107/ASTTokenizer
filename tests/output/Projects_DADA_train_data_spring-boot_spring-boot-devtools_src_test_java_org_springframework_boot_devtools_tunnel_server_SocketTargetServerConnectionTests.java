<METHOD_START> @ Before public void void ( ) java.io.IOException { this . int = SocketUtils . findAvailableTcpPort ( ) ; this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer = new org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer ( this . int ) ; StaticPortProvider org.springframework.boot.devtools.tunnel.server.StaticPortProvider = new StaticPortProvider ( this . int ) ; this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnection = new SocketTargetServerConnection ( org.springframework.boot.devtools.tunnel.server.StaticPortProvider ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer . void ( STRING . byte[] ( ) ) ; this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer . void ( ) ; java.nio.channels.ByteChannel java.nio.channels.ByteChannel = this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnection . open ( int ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER ) ; java.nio.channels.ByteChannel . int ( java.nio.ByteBuffer ) ; assertThat ( java.nio.ByteBuffer . byte[] ( ) ) . isEqualTo ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer . void ( STRING . byte[] ( ) ) ; this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer . void ( ) ; java.nio.channels.ByteChannel java.nio.channels.ByteChannel = this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnection . open ( int ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( ) ) ; java.nio.channels.ByteChannel . int ( java.nio.ByteBuffer ) ; this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer . void ( NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer . void ( ) ; java.nio.channels.ByteChannel java.nio.channels.ByteChannel = this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnection . open ( NUMBER ) ; long long = java.lang.System . long ( ) ; try { java.nio.channels.ByteChannel . int ( java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER ) ) ; fail ( STRING ) ; } catch ( java.net.SocketTimeoutException java.net.SocketTimeoutException ) { long long = java.lang.System . long ( ) - long ; assertThat ( long ) . isGreaterThanOrEqualTo ( NUMBER ) ; assertThat ( long ) . isLessThan ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> void ( int int ) throws java.io.IOException { this . java.nio.channels.ServerSocketChannel = java.nio.channels.ServerSocketChannel . java.nio.channels.ServerSocketChannel ( ) ; this . java.nio.channels.ServerSocketChannel . java.nio.channels.ServerSocketChannel ( new java.net.InetSocketAddress ( int ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer.ServerThread = new org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer.ServerThread ( ) ; this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer.ServerThread . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.InterruptedException { void ( ) ; assertThat ( this . java.nio.ByteBuffer . byte[] ( ) ) . isEqualTo ( this . byte[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.InterruptedException { while ( this . org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer.ServerThread . boolean ( ) ) { java.lang.Thread . void ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.nio.channels.SocketChannel java.nio.channels.SocketChannel = org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer .this . java.nio.channels.ServerSocketChannel . java.nio.channels.SocketChannel ( ) ; java.lang.Thread . void ( org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer .this . int ) ; if ( org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer .this . byte[] != null ) { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer .this . byte[] ) ; while ( java.nio.ByteBuffer . boolean ( ) ) { java.nio.channels.SocketChannel . int ( java.nio.ByteBuffer ) ; } } if ( org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer .this . byte[] != null ) { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer .this . byte[] . int ) ; while ( java.nio.ByteBuffer . boolean ( ) ) { java.nio.channels.SocketChannel . int ( java.nio.ByteBuffer ) ; } org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnectionTests.MockServer .this . java.nio.ByteBuffer = java.nio.ByteBuffer ; } java.nio.channels.SocketChannel . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; fail ( ) ; } }  <METHOD_END>
