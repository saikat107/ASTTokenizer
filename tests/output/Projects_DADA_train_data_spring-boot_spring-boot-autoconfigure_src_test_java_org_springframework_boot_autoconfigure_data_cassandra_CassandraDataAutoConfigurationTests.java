<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfigurationTests.TestExcludeConfiguration .class , org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfigurationTests.TestConfiguration .class , PropertyPlaceholderAutoConfiguration .class , CassandraAutoConfiguration .class , CassandraDataAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . getBeanNamesForType ( CassandraTemplate .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfigurationTests.TestConfiguration .class , org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfigurationTests.EntityScanConfig .class , PropertyPlaceholderAutoConfiguration .class , CassandraAutoConfiguration .class , CassandraDataAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . refresh ( ) ; CassandraMappingContext org.springframework.boot.autoconfigure.data.cassandra.CassandraMappingContext = this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . getBean ( CassandraMappingContext .class ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = ( java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.data.cassandra.CassandraMappingContext , STRING ) ; assertThat ( java.util.Set<java.lang.Class<?>> ) . containsOnly ( City .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfigurationTests.TestConfiguration .class , PropertyPlaceholderAutoConfiguration .class , CassandraAutoConfiguration .class , CassandraDataAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . refresh ( ) ; CassandraMappingContext org.springframework.boot.autoconfigure.data.cassandra.CassandraMappingContext = this . org.springframework.boot.autoconfigure.data.cassandra.AnnotationConfigApplicationContext . getBean ( CassandraMappingContext .class ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.data.cassandra.CassandraMappingContext , STRING ) ) . isInstanceOf ( SimpleUserTypeResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.data.cassandra.Session org.springframework.boot.autoconfigure.data.cassandra.Session ( ) { return mock ( Session .class ) ; }  <METHOD_END>
