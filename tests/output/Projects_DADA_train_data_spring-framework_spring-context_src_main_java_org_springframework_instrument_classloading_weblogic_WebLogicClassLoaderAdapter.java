<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.Class<?> < ? > java.lang.Class<?> ; try { java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ; this . java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ) ; this . java.lang.reflect.Method = java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) . java.lang.reflect.Method ( STRING , this . java.lang.Class<> ) ; this . java.lang.reflect.Method = java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) . java.lang.reflect.Method ( STRING ) ; this . java.lang.reflect.Method = java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) . java.lang.reflect.Method ( STRING ) ; this . java.lang.reflect.Constructor<?> = java.lang.Class<> . java.lang.reflect.Constructor<> ( this . java.lang.reflect.Method . java.lang.Class<?> ( ) , java.lang.ClassLoader .class ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } if ( ! java.lang.Class<> . boolean ( java.lang.ClassLoader ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.ClassLoader ) ; } this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.instrument.ClassFileTransformer java.lang.instrument.ClassFileTransformer ) { Assert . notNull ( java.lang.instrument.ClassFileTransformer , STRING ) ; try { java.lang.reflect.InvocationHandler java.lang.reflect.InvocationHandler = new WebLogicClassPreProcessorAdapter ( java.lang.instrument.ClassFileTransformer , this . java.lang.ClassLoader ) ; java.lang.Object java.lang.Object = java.lang.reflect.Proxy . java.lang.Object ( this . java.lang.Class<> . java.lang.ClassLoader ( ) , new java.lang.Class<?> < ? > [] { this . java.lang.Class<> } , java.lang.reflect.InvocationHandler ) ; this . java.lang.reflect.Method . java.lang.Object ( this . java.lang.ClassLoader , java.lang.Object ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new java.lang.IllegalStateException ( STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public java.lang.ClassLoader java.lang.ClassLoader ( ) { try { java.lang.Object java.lang.Object = this . java.lang.reflect.Method . java.lang.Object ( this . java.lang.ClassLoader ) ; java.lang.Object java.lang.Object = this . java.lang.reflect.Method . java.lang.Object ( this . java.lang.ClassLoader ) ; return ( java.lang.ClassLoader ) this . java.lang.reflect.Constructor<> . newInstance ( java.lang.Object , java.lang.Object ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new java.lang.IllegalStateException ( STRING , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
