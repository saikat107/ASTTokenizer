<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = this . org.springframework.data.mongodb.core.MongoOperations . getCollection ( java.lang.String ) ; this . org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . deleteMany ( new Document ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultBulkOperations ( null , null , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultBulkOperations ( org.springframework.data.mongodb.core.MongoOperations , null , null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultBulkOperations ( org.springframework.data.mongodb.core.MongoOperations , null , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.BaseDoc> < BaseDoc > java.util.List<org.springframework.data.mongodb.core.BaseDoc> = java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.BaseDoc ( STRING ) , org.springframework.data.mongodb.core.BaseDoc ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.BulkOperations ( BulkMode . ORDERED ) . insert ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> ) . execute ( ) . getInsertedCount ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.BaseDoc> < BaseDoc > java.util.List<org.springframework.data.mongodb.core.BaseDoc> = java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.BaseDoc ( STRING ) , org.springframework.data.mongodb.core.BaseDoc ( STRING ) , org.springframework.data.mongodb.core.BaseDoc ( STRING ) ) ; try { org.springframework.data.mongodb.core.BulkOperations ( BulkMode . ORDERED ) . insert ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> ) . execute ( ) ; fail ( ) ; } catch ( MongoBulkWriteException org.springframework.data.mongodb.core.MongoBulkWriteException ) { assertThat ( org.springframework.data.mongodb.core.MongoBulkWriteException . getWriteResult ( ) . getInsertedCount ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoBulkWriteException . getWriteErrors ( ) , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoBulkWriteException . getWriteErrors ( ) . size ( ) , is ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.BaseDoc> < BaseDoc > java.util.List<org.springframework.data.mongodb.core.BaseDoc> = java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.BaseDoc ( STRING ) , org.springframework.data.mongodb.core.BaseDoc ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.BulkOperations ( BulkMode . UNORDERED ) . insert ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> ) . execute ( ) . getInsertedCount ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.BaseDoc> < BaseDoc > java.util.List<org.springframework.data.mongodb.core.BaseDoc> = java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.BaseDoc ( STRING ) , org.springframework.data.mongodb.core.BaseDoc ( STRING ) , org.springframework.data.mongodb.core.BaseDoc ( STRING ) ) ; try { org.springframework.data.mongodb.core.BulkOperations ( BulkMode . UNORDERED ) . insert ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> ) . execute ( ) ; fail ( ) ; } catch ( MongoBulkWriteException org.springframework.data.mongodb.core.MongoBulkWriteException ) { assertThat ( org.springframework.data.mongodb.core.MongoBulkWriteException . getWriteResult ( ) . getInsertedCount ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoBulkWriteException . getWriteErrors ( ) , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.MongoBulkWriteException . getWriteErrors ( ) . size ( ) , is ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; com . com.mongodb . com.mongodb . com.mongodb com.mongodb.bulk.BulkWriteResult = org.springframework.data.mongodb.core.BulkOperations ( BulkMode . ORDERED ) . upsert ( org.springframework.data.mongodb.core.Query ( STRING , STRING ) , org.springframework.data.mongodb.core.Update ( STRING , STRING ) ) . execute ( ) ; assertThat ( com.mongodb.bulk.BulkWriteResult , notNullValue ( ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getMatchedCount ( ) , is ( NUMBER ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getModifiedCount ( ) , is ( NUMBER ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getInsertedCount ( ) , is ( NUMBER ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getUpserts ( ) , is ( notNullValue ( ) ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getUpserts ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { com . com.mongodb . com.mongodb . com.mongodb com.mongodb.bulk.BulkWriteResult = org.springframework.data.mongodb.core.BulkOperations ( BulkMode . ORDERED ) . upsert ( org.springframework.data.mongodb.core.Query ( STRING , STRING ) , org.springframework.data.mongodb.core.Update ( STRING , STRING ) ) . execute ( ) ; assertThat ( com.mongodb.bulk.BulkWriteResult , notNullValue ( ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getMatchedCount ( ) , is ( NUMBER ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getModifiedCount ( ) , is ( NUMBER ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getUpserts ( ) , is ( notNullValue ( ) ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getUpserts ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( BulkMode . ORDERED , false , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( BulkMode . ORDERED , true , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( BulkMode . UNORDERED , false , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( BulkMode . UNORDERED , true , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( BulkMode . ORDERED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( BulkMode . UNORDERED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { com . com.mongodb . com.mongodb . com.mongodb com.mongodb.bulk.BulkWriteResult = org.springframework.data.mongodb.core.BulkOperations ( BulkMode . ORDERED ) . insert ( org.springframework.data.mongodb.core.BaseDoc ( STRING , STRING ) ) . updateOne ( org.springframework.data.mongodb.core.Query ( STRING , STRING ) , org.springframework.data.mongodb.core.Update ( STRING , STRING ) ) . remove ( org.springframework.data.mongodb.core.Query ( STRING , STRING ) ) . execute ( ) ; assertThat ( com.mongodb.bulk.BulkWriteResult , notNullValue ( ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getInsertedCount ( ) , is ( NUMBER ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getModifiedCount ( ) , is ( NUMBER ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getDeletedCount ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.List<org.springframework.data.mongodb.core.BaseDoc> < BaseDoc > java.util.List<org.springframework.data.mongodb.core.BaseDoc> = java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.BaseDoc ( STRING , STRING ) , org.springframework.data.mongodb.core.BaseDoc ( STRING , STRING ) , org.springframework.data.mongodb.core.BaseDoc ( STRING , STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> < Pair < Query , Update > > java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> = java.util.Arrays . java.util.List ( Pair . of ( org.springframework.data.mongodb.core.Query ( STRING , STRING ) , org.springframework.data.mongodb.core.Update ( STRING , STRING ) ) ) ; java.util.List<org.springframework.data.mongodb.core.Query> < Query > java.util.List<org.springframework.data.mongodb.core.Query> = java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.Query ( STRING , STRING ) ) ; com . com.mongodb . com.mongodb . com.mongodb com.mongodb.bulk.BulkWriteResult = org.springframework.data.mongodb.core.BulkOperations ( BulkMode . ORDERED ) . insert ( java.util.List<org.springframework.data.mongodb.core.BaseDoc> ) . updateMulti ( java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> ) . remove ( java.util.List<org.springframework.data.mongodb.core.Query> ) . execute ( ) ; assertThat ( com.mongodb.bulk.BulkWriteResult , notNullValue ( ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getInsertedCount ( ) , is ( NUMBER ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getModifiedCount ( ) , is ( NUMBER ) ) ; assertThat ( com.mongodb.bulk.BulkWriteResult . getDeletedCount ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpecialDoc org.springframework.data.mongodb.core.SpecialDoc = new SpecialDoc ( ) ; specialDoc . id = STRING ; specialDoc . value = STRING ; specialDoc . specialValue = STRING ; org.springframework.data.mongodb.core.BulkOperations ( BulkMode . ORDERED ) . insert ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.SpecialDoc ) ) . execute ( ) ; BaseDoc org.springframework.data.mongodb.core.BaseDoc = org.springframework.data.mongodb.core.MongoOperations . findOne ( org.springframework.data.mongodb.core.Query ( STRING , specialDoc . id ) , BaseDoc .class , java.lang.String ) ; assertThat ( org.springframework.data.mongodb.core.BaseDoc , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.BaseDoc , instanceOf ( SpecialDoc .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( BulkMode org.springframework.data.mongodb.core.BulkMode , boolean boolean , int int ) { BulkOperations org.springframework.data.mongodb.core.BulkOperations = org.springframework.data.mongodb.core.BulkOperations ( org.springframework.data.mongodb.core.BulkMode ) ; void ( ) ; java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> < Pair < Query , Update > > java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> = new java.util.ArrayList<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> < Pair < Query , Update > > ( ) ; java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> . add ( Pair . of ( org.springframework.data.mongodb.core.Query ( STRING , STRING ) , org.springframework.data.mongodb.core.Update ( STRING , STRING ) ) ) ; java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> . add ( Pair . of ( org.springframework.data.mongodb.core.Query ( STRING , STRING ) , org.springframework.data.mongodb.core.Update ( STRING , STRING ) ) ) ; int int = boolean ? org.springframework.data.mongodb.core.BulkOperations . updateMulti ( java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> ) . execute ( ) . getModifiedCount ( ) : org.springframework.data.mongodb.core.BulkOperations . updateOne ( java.util.List<org.springframework.data.mongodb.core.Pair<org.springframework.data.mongodb.core.Query,org.springframework.data.mongodb.core.Update>> ) . execute ( ) . getModifiedCount ( ) ; assertThat ( int , is ( int ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( BulkMode org.springframework.data.mongodb.core.BulkMode ) { void ( ) ; java.util.List<org.springframework.data.mongodb.core.Query> < Query > java.util.List<org.springframework.data.mongodb.core.Query> = java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.Query ( STRING , STRING ) , org.springframework.data.mongodb.core.Query ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.BulkOperations ( org.springframework.data.mongodb.core.BulkMode ) . remove ( java.util.List<org.springframework.data.mongodb.core.Query> ) . execute ( ) . getDeletedCount ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.BulkOperations org.springframework.data.mongodb.core.BulkOperations ( BulkMode org.springframework.data.mongodb.core.BulkMode ) { DefaultBulkOperations org.springframework.data.mongodb.core.DefaultBulkOperations = new DefaultBulkOperations ( this . org.springframework.data.mongodb.core.MongoOperations , org.springframework.data.mongodb.core.BulkMode , java.lang.String , null ) ; org.springframework.data.mongodb.core.DefaultBulkOperations . setDefaultWriteConcern ( WriteConcern . ACKNOWLEDGED ) ; return org.springframework.data.mongodb.core.DefaultBulkOperations ; }  <METHOD_END>
<METHOD_START> private void void ( ) { final MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.MongoOperations . getCollection ( java.lang.String ) ; org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . insertOne ( org.springframework.data.mongodb.core.Document ( STRING , STRING ) ) ; org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . insertOne ( org.springframework.data.mongodb.core.Document ( STRING , STRING ) ) ; org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . insertOne ( org.springframework.data.mongodb.core.Document ( STRING , STRING ) ) ; org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . insertOne ( org.springframework.data.mongodb.core.Document ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.BaseDoc org.springframework.data.mongodb.core.BaseDoc ( java.lang.String java.lang.String ) { BaseDoc org.springframework.data.mongodb.core.BaseDoc = new BaseDoc ( ) ; doc . id = java.lang.String ; return org.springframework.data.mongodb.core.BaseDoc ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.BaseDoc org.springframework.data.mongodb.core.BaseDoc ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { BaseDoc org.springframework.data.mongodb.core.BaseDoc = org.springframework.data.mongodb.core.BaseDoc ( java.lang.String ) ; doc . value = java.lang.String ; return org.springframework.data.mongodb.core.BaseDoc ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.Query org.springframework.data.mongodb.core.Query ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new Query ( ) . addCriteria ( Criteria . where ( java.lang.String ) . is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.Update org.springframework.data.mongodb.core.Update ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new Update ( ) . set ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.Document org.springframework.data.mongodb.core.Document ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new Document ( STRING , java.lang.String ) . append ( STRING , java.lang.String ) ; }  <METHOD_END>
