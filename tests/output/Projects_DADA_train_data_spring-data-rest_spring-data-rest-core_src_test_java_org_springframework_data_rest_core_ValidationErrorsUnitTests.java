<METHOD_START> @ Before public void void ( ) { KeyValueMappingContext < ? , ? > org.springframework.data.rest.core.KeyValueMappingContext<?,?> = new KeyValueMappingContext <> ( ) ; org.springframework.data.rest.core.KeyValueMappingContext<,> . getPersistentEntity ( org.springframework.data.rest.core.ValidationErrorsUnitTests.Foo .class ) ; this . org.springframework.data.rest.core.PersistentEntities = new PersistentEntities ( java.util.Arrays . java.util.List ( org.springframework.data.rest.core.KeyValueMappingContext<,> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ValidationErrors org.springframework.data.rest.core.ValidationErrors = new ValidationErrors ( new org.springframework.data.rest.core.ValidationErrorsUnitTests.Foo ( ) , org.springframework.data.rest.core.PersistentEntities ) ; org.springframework.data.rest.core.ValidationErrors . pushNestedPath ( STRING ) ; org.springframework.data.rest.core.ValidationErrors . rejectValue ( STRING , STRING ) ; org.springframework.data.rest.core.ValidationErrors . popNestedPath ( ) ; assertThat ( org.springframework.data.rest.core.ValidationErrors . getFieldError ( ) . getField ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new ValidationErrors ( new org.springframework.data.rest.core.ValidationErrorsUnitTests.Foo ( ) , org.springframework.data.rest.core.PersistentEntities ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( Errors org.springframework.data.rest.core.Errors ) { assertThat ( org.springframework.data.rest.core.Errors . getFieldValue ( STRING ) ) . isNotNull ( ) ; org.springframework.data.rest.core.Errors . pushNestedPath ( STRING ) ; try { org.springframework.data.rest.core.Errors . getFieldValue ( STRING ) ; fail ( STRING ) ; } catch ( NotReadablePropertyException org.springframework.data.rest.core.NotReadablePropertyException ) {} assertThat ( org.springframework.data.rest.core.Errors . getFieldValue ( STRING ) ) . isEqualTo ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
