<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> < java.lang.String , MockHttpSession > java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> , WebClient org.springframework.test.web.servlet.htmlunit.WebClient , WebRequest org.springframework.test.web.servlet.htmlunit.WebRequest ) { Assert . notNull ( java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> , STRING ) ; Assert . notNull ( org.springframework.test.web.servlet.htmlunit.WebClient , STRING ) ; Assert . notNull ( org.springframework.test.web.servlet.htmlunit.WebRequest , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> = java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> ; this . org.springframework.test.web.servlet.htmlunit.WebClient = org.springframework.test.web.servlet.htmlunit.WebClient ; this . org.springframework.test.web.servlet.htmlunit.WebRequest = org.springframework.test.web.servlet.htmlunit.WebRequest ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ( ServletContext org.springframework.test.web.servlet.htmlunit.ServletContext ) { java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset ( ) ; java.lang.String java.lang.String = this . org.springframework.test.web.servlet.htmlunit.WebRequest . getHttpMethod ( ) . name ( ) ; UriComponents org.springframework.test.web.servlet.htmlunit.UriComponents = org.springframework.test.web.servlet.htmlunit.UriComponents ( ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = new org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.HtmlUnitMockHttpServletRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext , java.lang.String , org.springframework.test.web.servlet.htmlunit.UriComponents . getPath ( ) ) ; void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , this . org.springframework.test.web.servlet.htmlunit.RequestBuilder ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setServerName ( org.springframework.test.web.servlet.htmlunit.UriComponents . getHost ( ) ) ; void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setCharacterEncoding ( java.nio.charset.Charset . java.lang.String ( ) ) ; void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.nio.charset.Charset ) ; void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , org.springframework.test.web.servlet.htmlunit.UriComponents ) ; void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) ; void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) ; void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) ; void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) ; void ( org.springframework.test.web.servlet.htmlunit.UriComponents , org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) ; void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , org.springframework.test.web.servlet.htmlunit.UriComponents ) ; void ( org.springframework.test.web.servlet.htmlunit.UriComponents , org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setProtocol ( STRING ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setQueryString ( org.springframework.test.web.servlet.htmlunit.UriComponents . getQuery ( ) ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setScheme ( org.springframework.test.web.servlet.htmlunit.UriComponents . getScheme ( ) ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setPathInfo ( null ) ; return org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> private java.nio.charset.Charset java.nio.charset.Charset ( ) { java.nio.charset.Charset java.nio.charset.Charset = this . org.springframework.test.web.servlet.htmlunit.WebRequest . getCharset ( ) ; return ( java.nio.charset.Charset != null ? java.nio.charset.Charset : java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) { if ( this . org.springframework.test.web.servlet.htmlunit.SmartRequestBuilder != null ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = this . org.springframework.test.web.servlet.htmlunit.SmartRequestBuilder . postProcessRequest ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) ; } if ( this . org.springframework.test.web.servlet.htmlunit.RequestPostProcessor != null ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = this . org.springframework.test.web.servlet.htmlunit.RequestPostProcessor . postProcessRequest ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) ; } return org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , RequestBuilder org.springframework.test.web.servlet.htmlunit.RequestBuilder ) { if ( org.springframework.test.web.servlet.htmlunit.RequestBuilder == null ) { return; } MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.RequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getServletContext ( ) ) ; HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( false ) ; if ( org.springframework.test.web.servlet.htmlunit.HttpSession != null ) { java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.test.web.servlet.htmlunit.HttpSession . getAttributeNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; java.lang.Object java.lang.Object = org.springframework.test.web.servlet.htmlunit.HttpSession . getAttribute ( java.lang.String ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) . setAttribute ( java.lang.String , java.lang.Object ) ; } } java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getHeaderNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getHeaders ( java.lang.String ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String ) ; } } java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map.Entry<java.lang.String,java.lang.String[]> : java.util.Map<java.lang.String,java.lang.String[]> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String[]>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String ( ) ; java.lang.String [] java.lang.String[] = java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String[] ( ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . addParameter ( java.lang.String , java.lang.String[] ) ; } Cookie [] org.springframework.test.web.servlet.htmlunit.Cookie[] = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getCookies ( ) ; if ( ! ObjectUtils . isEmpty ( org.springframework.test.web.servlet.htmlunit.Cookie[] ) ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setCookies ( org.springframework.test.web.servlet.htmlunit.Cookie[] ) ; } java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getAttributeNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setAttribute ( java.lang.String , org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getAttribute ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { MockMvcWebConnection . validateContextPath ( java.lang.String ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( RequestPostProcessor org.springframework.test.web.servlet.htmlunit.RequestPostProcessor ) { this . org.springframework.test.web.servlet.htmlunit.RequestPostProcessor = org.springframework.test.web.servlet.htmlunit.RequestPostProcessor ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) { java.lang.String java.lang.String = java.lang.String ( STRING ) ; java.lang.String [] java.lang.String[] = StringUtils . split ( java.lang.String , STRING ) ; if ( java.lang.String[] != null ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setAuthType ( java.lang.String[] [ NUMBER ] ) ; } }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.nio.charset.Charset java.nio.charset.Charset ) { java.lang.String java.lang.String = this . org.springframework.test.web.servlet.htmlunit.WebRequest . getRequestBody ( ) ; if ( java.lang.String == null ) { return; } org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) { java.lang.String java.lang.String = java.lang.String ( STRING ) ; if ( java.lang.String == null ) { FormEncodingType org.springframework.test.web.servlet.htmlunit.FormEncodingType = this . org.springframework.test.web.servlet.htmlunit.WebRequest . getEncodingType ( ) ; if ( org.springframework.test.web.servlet.htmlunit.FormEncodingType != null ) { java.lang.String = org.springframework.test.web.servlet.htmlunit.FormEncodingType . getName ( ) ; } } org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setContentType ( java.lang.String != null ? java.lang.String : MediaType . ALL_VALUE ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , UriComponents org.springframework.test.web.servlet.htmlunit.UriComponents ) { if ( this . java.lang.String == null ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.test.web.servlet.htmlunit.UriComponents . getPathSegments ( ) ; if ( java.util.List<java.lang.String> . boolean ( ) ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setContextPath ( STRING ) ; } else { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setContextPath ( STRING + java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; } } else { Assert . isTrue ( org.springframework.test.web.servlet.htmlunit.UriComponents . getPath ( ) . startsWith ( this . java.lang.String ) , ( ) STRING + uriComponents . getPath ( ) + STRING + this . contextPath + STRING ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setContextPath ( this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) { java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> < Cookie > java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> = new java.util.ArrayList<org.springframework.test.web.servlet.htmlunit.Cookie> <> ( ) ; java.lang.String java.lang.String = java.lang.String ( STRING ) ; if ( java.lang.String != null ) { java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer ( java.lang.String , STRING ) ; while ( java.util.StringTokenizer . boolean ( ) ) { java.lang.String java.lang.String = java.util.StringTokenizer . java.lang.String ( ) . java.lang.String ( ) ; Assert . isTrue ( java.util.StringTokenizer . boolean ( ) , ( ) STRING + cookieName + STRING + cookieHeaderValue + STRING ) ; java.lang.String java.lang.String = java.util.StringTokenizer . java.lang.String ( ) . java.lang.String ( ) ; void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> , new Cookie ( java.lang.String , java.lang.String ) ) ; } } java.util.Set<com.gargoylesoftware.htmlunit.util.Cookie> < com . com.gargoylesoftware . com.gargoylesoftware . com.gargoylesoftware . com.gargoylesoftware > java.util.Set<com.gargoylesoftware.htmlunit.util.Cookie> = this . org.springframework.test.web.servlet.htmlunit.WebClient . getCookies ( this . org.springframework.test.web.servlet.htmlunit.WebRequest . getUrl ( ) ) ; for ( com . com.gargoylesoftware . com.gargoylesoftware . com.gargoylesoftware . com.gargoylesoftware com.gargoylesoftware.htmlunit.util.Cookie : java.util.Set<com.gargoylesoftware.htmlunit.util.Cookie> ) { void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> , new Cookie ( com.gargoylesoftware.htmlunit.util.Cookie . getName ( ) , com.gargoylesoftware.htmlunit.util.Cookie . getValue ( ) ) ) ; } Cookie [] org.springframework.test.web.servlet.htmlunit.Cookie[] = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getCookies ( ) ; if ( org.springframework.test.web.servlet.htmlunit.Cookie[] != null ) { for ( Cookie org.springframework.test.web.servlet.htmlunit.Cookie : org.springframework.test.web.servlet.htmlunit.Cookie[] ) { java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> . add ( org.springframework.test.web.servlet.htmlunit.Cookie ) ; } } if ( ! ObjectUtils . isEmpty ( java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> ) ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setCookies ( java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> . toArray ( new Cookie [ java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> . size ( ) ] ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> < Cookie > java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> , Cookie org.springframework.test.web.servlet.htmlunit.Cookie ) { java.util.List<org.springframework.test.web.servlet.htmlunit.Cookie> . add ( org.springframework.test.web.servlet.htmlunit.Cookie ) ; if ( STRING . boolean ( org.springframework.test.web.servlet.htmlunit.Cookie . getName ( ) ) ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setRequestedSessionId ( org.springframework.test.web.servlet.htmlunit.Cookie . getValue ( ) ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setSession ( org.springframework.test.web.servlet.htmlunit.MockHttpSession ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , org.springframework.test.web.servlet.htmlunit.Cookie . getValue ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . org.springframework.test.web.servlet.htmlunit.WebRequest . getAdditionalHeaders ( ) . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) { for ( java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : this . org.springframework.test.web.servlet.htmlunit.WebRequest . getAdditionalHeaders ( ) . entrySet ( ) ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . addHeader ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.htmlunit.MockHttpSession org.springframework.test.web.servlet.htmlunit.MockHttpSession ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , final java.lang.String java.lang.String ) { MockHttpSession org.springframework.test.web.servlet.htmlunit.MockHttpSession ; synchronized ( this . java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> ) { org.springframework.test.web.servlet.htmlunit.MockHttpSession = this . java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> . get ( java.lang.String ) ; if ( org.springframework.test.web.servlet.htmlunit.MockHttpSession == null ) { org.springframework.test.web.servlet.htmlunit.MockHttpSession = new org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.HtmlUnitMockHttpSession ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.lang.String ) ; org.springframework.test.web.servlet.htmlunit.MockHttpSession . setNew ( true ) ; synchronized ( this . java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> ) { this . java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> . put ( java.lang.String , org.springframework.test.web.servlet.htmlunit.MockHttpSession ) ; } void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.lang.String ) ; } else { org.springframework.test.web.servlet.htmlunit.MockHttpSession . setNew ( false ) ; } } return org.springframework.test.web.servlet.htmlunit.MockHttpSession ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.lang.String java.lang.String ) { org.springframework.test.web.servlet.htmlunit.CookieManager ( ) . addCookie ( com.gargoylesoftware.htmlunit.util.Cookie ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.lang.String java.lang.String ) { org.springframework.test.web.servlet.htmlunit.CookieManager ( ) . removeCookie ( com.gargoylesoftware.htmlunit.util.Cookie ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private com . com.gargoylesoftware . com.gargoylesoftware . com.gargoylesoftware . com.gargoylesoftware.htmlunit.util.Cookie com.gargoylesoftware.htmlunit.util.Cookie ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.lang.String java.lang.String ) { return new com . com.gargoylesoftware . com.gargoylesoftware . com.gargoylesoftware . com.gargoylesoftware ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getServerName ( ) , STRING , java.lang.String , org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getContextPath ( ) + STRING , null , org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . isSecure ( ) , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) { java.lang.String java.lang.String = java.lang.String ( STRING ) ; if ( java.lang.String == null ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . addPreferredLocale ( java.util.Locale . java.util.Locale ( ) ) ; } else { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; for ( int int = java.lang.String[] . int - NUMBER ; int >= NUMBER ; int -- ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . addPreferredLocale ( java.util.Locale ( java.lang.String[] [ int ] ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , UriComponents org.springframework.test.web.servlet.htmlunit.UriComponents ) { for ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.test.web.servlet.htmlunit.UriComponents . getQueryParams ( ) . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) { java.lang.String = ( java.lang.String != null ? java.lang.String ( java.lang.String ) : STRING ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . addParameter ( java.lang.String , java.lang.String ) ; } } for ( NameValuePair org.springframework.test.web.servlet.htmlunit.NameValuePair : this . org.springframework.test.web.servlet.htmlunit.WebRequest . getRequestParameters ( ) ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . addParameter ( org.springframework.test.web.servlet.htmlunit.NameValuePair . getName ( ) , org.springframework.test.web.servlet.htmlunit.NameValuePair . getValue ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { return java.net.URLDecoder . java.lang.String ( java.lang.String , STRING ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalStateException ( java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Locale java.util.Locale ( java.lang.String java.lang.String ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; Assert . isTrue ( java.util.regex.Matcher . boolean ( ) , ( ) STRING + locale + STRING ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; if ( java.lang.String == null ) { java.lang.String = STRING ; } java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; if ( java.lang.String == null ) { java.lang.String = STRING ; } return new java.util.Locale ( java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getContextPath ( ) . length ( ) ) ; if ( STRING . boolean ( java.lang.String ) ) { java.lang.String = null ; } org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setServletPath ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( UriComponents org.springframework.test.web.servlet.htmlunit.UriComponents , MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) { if ( STRING . boolean ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getPathInfo ( ) ) ) { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setPathInfo ( null ) ; } void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , org.springframework.test.web.servlet.htmlunit.UriComponents . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( UriComponents org.springframework.test.web.servlet.htmlunit.UriComponents , MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) { int int = org.springframework.test.web.servlet.htmlunit.UriComponents . getPort ( ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setServerPort ( int ) ; if ( int == - NUMBER ) { int int = this . org.springframework.test.web.servlet.htmlunit.WebRequest . getUrl ( ) . getDefaultPort ( ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setLocalPort ( int ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setRemotePort ( int ) ; } else { org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . setRemotePort ( int ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.htmlunit.UriComponents org.springframework.test.web.servlet.htmlunit.UriComponents ( ) { java.net.URL java.net.URL = this . org.springframework.test.web.servlet.htmlunit.WebRequest . getUrl ( ) ; return UriComponentsBuilder . fromUriString ( java.net.URL . java.lang.String ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof RequestBuilder ) { if ( java.lang.Object instanceof MockHttpServletRequestBuilder ) { MockHttpServletRequestBuilder org.springframework.test.web.servlet.htmlunit.MockHttpServletRequestBuilder = MockMvcRequestBuilders . get ( STRING ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequestBuilder . merge ( java.lang.Object ) ; this . org.springframework.test.web.servlet.htmlunit.RequestBuilder = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequestBuilder ; } else { this . org.springframework.test.web.servlet.htmlunit.RequestBuilder = ( RequestBuilder ) java.lang.Object ; } if ( java.lang.Object instanceof SmartRequestBuilder ) { this . org.springframework.test.web.servlet.htmlunit.SmartRequestBuilder = ( SmartRequestBuilder ) java.lang.Object ; } } return this ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.htmlunit.CookieManager org.springframework.test.web.servlet.htmlunit.CookieManager ( ) { return this . org.springframework.test.web.servlet.htmlunit.WebClient . getCookieManager ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ServletContext org.springframework.test.web.servlet.htmlunit.ServletContext , java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( org.springframework.test.web.servlet.htmlunit.ServletContext , java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.htmlunit.HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession ( boolean boolean ) { HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession = super. getSession ( false ) ; if ( org.springframework.test.web.servlet.htmlunit.HttpSession == null && boolean ) { org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.HtmlUnitMockHttpSession org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.HtmlUnitMockHttpSession = new org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.HtmlUnitMockHttpSession ( this ) ; void ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.HtmlUnitMockHttpSession ) ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.HtmlUnitMockHttpSession . setNew ( true ) ; java.lang.String java.lang.String = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.HtmlUnitMockHttpSession . getId ( ) ; synchronized ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder .this . java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> ) { org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder .this . java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> . put ( java.lang.String , org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.HtmlUnitMockHttpSession ) ; } void ( this , java.lang.String ) ; org.springframework.test.web.servlet.htmlunit.HttpSession = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.HtmlUnitMockHttpSession ; } return org.springframework.test.web.servlet.htmlunit.HttpSession ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.htmlunit.HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession ( ) { return super. getSession ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession ) { super. setSession ( org.springframework.test.web.servlet.htmlunit.HttpSession ) ; }  <METHOD_END>
<METHOD_START> public void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ) { super( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getServletContext ( ) ); this . org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ; }  <METHOD_END>
<METHOD_START> private void ( MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , java.lang.String java.lang.String ) { super( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getServletContext ( ) , java.lang.String ); this . org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest ; }  <METHOD_END>
<METHOD_START> public void void ( ) { super. invalidate ( ) ; synchronized ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder .this . java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> ) { org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder .this . java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> . remove ( getId ( ) ) ; } void ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest , getId ( ) ) ; }  <METHOD_END>
