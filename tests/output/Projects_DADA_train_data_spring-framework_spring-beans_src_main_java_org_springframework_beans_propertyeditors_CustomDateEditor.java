<METHOD_START> public void ( java.text.DateFormat java.text.DateFormat , boolean boolean ) { this . java.text.DateFormat = java.text.DateFormat ; this . boolean = boolean ; this . int = - NUMBER ; }  <METHOD_END>
<METHOD_START> public void ( java.text.DateFormat java.text.DateFormat , boolean boolean , int int ) { this . java.text.DateFormat = java.text.DateFormat ; this . boolean = boolean ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( this . boolean && ! StringUtils . hasText ( java.lang.String ) ) { void ( null ) ; } else if ( java.lang.String != null && this . int >= NUMBER && java.lang.String . int ( ) != this . int ) { throw new java.lang.IllegalArgumentException ( STRING + this . int + STRING ) ; } else { try { void ( this . java.text.DateFormat . java.util.Date ( java.lang.String ) ) ; } catch ( java.text.ParseException java.text.ParseException ) { throw new java.lang.IllegalArgumentException ( STRING + java.text.ParseException . java.lang.String ( ) , java.text.ParseException ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.util.Date java.util.Date = ( java.util.Date ) java.lang.Object ( ) ; return ( java.util.Date != null ? this . java.text.DateFormat . java.lang.String ( java.util.Date ) : STRING ) ; }  <METHOD_END>
