<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; java.lang.String java.lang.String = STRING ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( java.lang.String ) ; AssignableTypeFilter org.springframework.core.type.AssignableTypeFilter = new AssignableTypeFilter ( org.springframework.core.type.AssignableTypeFilterTests.TestNonInheritingClass .class ) ; AssignableTypeFilter org.springframework.core.type.AssignableTypeFilter = new AssignableTypeFilter ( org.springframework.core.type.AssignableTypeFilterTests.TestInterface .class ) ; assertFalse ( org.springframework.core.type.AssignableTypeFilter . match ( org.springframework.core.type.MetadataReader , org.springframework.core.type.MetadataReaderFactory ) ) ; assertTrue ( org.springframework.core.type.AssignableTypeFilter . match ( org.springframework.core.type.MetadataReader , org.springframework.core.type.MetadataReaderFactory ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; java.lang.String java.lang.String = STRING ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( java.lang.String ) ; AssignableTypeFilter org.springframework.core.type.AssignableTypeFilter = new AssignableTypeFilter ( org.springframework.core.type.AssignableTypeFilterTests.TestInterface .class ) ; assertTrue ( org.springframework.core.type.AssignableTypeFilter . match ( org.springframework.core.type.MetadataReader , org.springframework.core.type.MetadataReaderFactory ) ) ; ClassloadingAssertions . assertClassNotLoaded ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; java.lang.String java.lang.String = STRING ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( java.lang.String ) ; AssignableTypeFilter org.springframework.core.type.AssignableTypeFilter = new AssignableTypeFilter ( org.springframework.core.type.AssignableTypeFilterTests.SimpleJdbcDaoSupport .class ) ; assertTrue ( org.springframework.core.type.AssignableTypeFilter . match ( org.springframework.core.type.MetadataReader , org.springframework.core.type.MetadataReaderFactory ) ) ; ClassloadingAssertions . assertClassNotLoaded ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MetadataReaderFactory org.springframework.core.type.MetadataReaderFactory = new SimpleMetadataReaderFactory ( ) ; java.lang.String java.lang.String = STRING ; MetadataReader org.springframework.core.type.MetadataReader = org.springframework.core.type.MetadataReaderFactory . getMetadataReader ( java.lang.String ) ; AssignableTypeFilter org.springframework.core.type.AssignableTypeFilter = new AssignableTypeFilter ( org.springframework.core.type.AssignableTypeFilterTests.JdbcDaoSupport .class ) ; assertTrue ( org.springframework.core.type.AssignableTypeFilter . match ( org.springframework.core.type.MetadataReader , org.springframework.core.type.MetadataReaderFactory ) ) ; ClassloadingAssertions . assertClassNotLoaded ( java.lang.String ) ; }  <METHOD_END>
