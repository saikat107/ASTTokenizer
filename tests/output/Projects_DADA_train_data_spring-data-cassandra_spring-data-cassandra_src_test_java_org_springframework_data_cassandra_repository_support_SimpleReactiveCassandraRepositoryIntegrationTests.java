<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { Person .class . java.lang.Package ( ) . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader == null ? org . springframework . util . ClassUtils . getDefaultClassLoader ( ) : java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.cassandra.repository.support.BeanFactory ) throws org.springframework.data.cassandra.repository.support.BeansException { this . org.springframework.data.cassandra.repository.support.BeanFactory = org.springframework.data.cassandra.repository.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactory = new ReactiveCassandraRepositoryFactory ( org.springframework.data.cassandra.repository.support.ReactiveCassandraOperations ) ; org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactory . setRepositoryBaseClass ( SimpleReactiveCassandraRepository .class ) ; org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactory . setBeanClassLoader ( java.lang.ClassLoader ) ; org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactory . setBeanFactory ( org.springframework.data.cassandra.repository.support.BeanFactory ) ; org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactory . setEvaluationContextProvider ( DefaultEvaluationContextProvider . INSTANCE ) ; org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory = org.springframework.data.cassandra.repository.support.ReactiveCassandraRepositoryFactory . getRepository ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory .class ) ; void ( ) ; org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . save ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . deleteAll ( ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . exists ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . expectNext ( true ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . exists ( STRING ) ) . expectNext ( false ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . exists ( Mono . just ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) ) . expectNext ( true ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . exists ( Mono . empty ( ) ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . expectNext ( org.springframework.data.cassandra.repository.support.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( STRING ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( Mono . just ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) ) . expectNext ( org.springframework.data.cassandra.repository.support.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( Mono . empty ( ) ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person . getId ( ) , org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( Flux . just ( org.springframework.data.cassandra.repository.support.Person . getId ( ) , org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( Flux . empty ( ) ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . count ( ) ) . expectNext ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . insert ( org.springframework.data.cassandra.repository.support.Person ) ) . expectNext ( org.springframework.data.cassandra.repository.support.Person ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . insert ( org.springframework.data.cassandra.repository.support.Person ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . insert ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . insert ( Flux . just ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.support.Person . setFirstname ( STRING ) ; org.springframework.data.cassandra.repository.support.Person . setLastname ( STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . save ( org.springframework.data.cassandra.repository.support.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . consumeNextWith ( actual -> { assertThat ( actual . getFirstname ( ) ) . isEqualTo ( dave . getFirstname ( ) ) ; assertThat ( actual . getLastname ( ) ) . isEqualTo ( dave . getLastname ( ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . save ( org.springframework.data.cassandra.repository.support.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . expectNext ( org.springframework.data.cassandra.repository.support.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . save ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.Person . setFirstname ( STRING ) ; org.springframework.data.cassandra.repository.support.Person . setLastname ( STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . save ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . expectNext ( org.springframework.data.cassandra.repository.support.Person ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . expectNext ( org.springframework.data.cassandra.repository.support.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . save ( Flux . just ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . deleteAll ( ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . delete ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . delete ( org.springframework.data.cassandra.repository.support.Person ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . delete ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . delete ( Flux . just ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.support.SimpleReactiveCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
