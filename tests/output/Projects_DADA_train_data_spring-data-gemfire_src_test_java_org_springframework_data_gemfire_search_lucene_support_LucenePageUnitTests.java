<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < K , V > org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<K,V> < K , V > org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<K,V> ( K K , V V ) { LuceneResultStruct < K , V > org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<K,V> = mock ( LuceneResultStruct .class , java.lang.String . java.lang.String ( STRING , K ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<K,V> . getValue ( ) ) . thenReturn ( V ) ; return org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<K,V> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> < LuceneResultStruct < java.lang.Long , java.lang.String > > java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) { java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = new java.util.concurrent.atomic.AtomicLong ( NUMBER ) ; return java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> . java.util.stream.Stream<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ( ) . java.util.stream.Stream<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person -> org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String> ( java.util.concurrent.atomic.AtomicLong . long ( ) , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . java.lang.String ( ) ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> < LuceneResultStruct < java.lang.Long , java.lang.String > > java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ( PageableLuceneQueryResults < java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person ... org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person[] ) { return java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , java.util.Arrays . java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person[] ) , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person[] . int ) . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> < LuceneResultStruct < java.lang.Long , java.lang.String > > java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ( PageableLuceneQueryResults < java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , java.lang.Iterable<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > java.lang.Iterable<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) { return java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , java.lang.Iterable<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> , int ( java.lang.Iterable<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) ) . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> < java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> < LuceneResultStruct < java.lang.Long , java.lang.String > > > java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> ( PageableLuceneQueryResults < java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , java.lang.Iterable<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > java.lang.Iterable<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> , int int ) { java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> < java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > > java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> = java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> ( java.lang.Iterable<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> , int ) ; java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> < java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> < LuceneResultStruct < java.lang.Long , java.lang.String > > > java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> = java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> . java.util.stream.Stream<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> ( ) . java.util.stream.Stream<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> ( this :: java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; java.util.Iterator java.util.Iterator = java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> . iterator ( ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . hasNext ( ) ) . thenAnswer ( invocation -> iterator . hasNext ( ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . next ( ) ) . thenAnswer ( invocation -> iterator . next ( ) ) ; return java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> < java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > > java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> ( java.lang.Iterable<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > java.lang.Iterable<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> , int int ) { java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> < java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > > java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> = new java.util.ArrayList<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> <> ( ) ; java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> = new java.util.ArrayList<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> <> ( int ) ; for ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person : java.lang.Iterable<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) { if ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> . int ( ) == int ) { java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> . boolean ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) ; java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> = new java.util.ArrayList<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> <> ( int ) ; } java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> . boolean ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person ) ; } java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> . boolean ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) ; return java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person>> ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.lang.Iterable<> ) { int ++ ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ( ProjectingLuceneAccessor org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) { when ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor . project ( isA ( java.util.List .class ) , eq ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ) ) . thenAnswer ( invocation -> { List < LuceneResultStruct < Long , String > > results = invocation . getArgument ( NUMBER ) ; assertThat ( invocation .< Class > getArgument ( NUMBER ) ) . isEqualTo ( Person .class ) ; return results . stream ( ) . map ( result -> Person . parse ( result . getValue ( ) ) ) . collect ( Collectors . toList ( ) ) ; } ) ; return org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> = java.util.Collections . java.util.List ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) ) ; java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> < LuceneResultStruct < java.lang.Long , java.lang.String > > java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> = java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getContent ( ) ) . isEqualTo ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPageSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPrevious ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getProjectionType ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getQueryResults ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getTemplate ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . hasPrevious ( ) ) . isFalse ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . hasNext ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . next ( ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> ) ; verify ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , times ( NUMBER ) ) . project ( eq ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ) , eq ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> = java.util.Arrays . java.util.List ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) ) ; java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> < java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> < LuceneResultStruct < java.lang.Long , java.lang.String > > > java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> = java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> , NUMBER ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class , org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getContent ( ) ) . isEqualTo ( java.util.Collections . java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> . org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPageSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPrevious ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getProjectionType ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getQueryResults ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getTemplate ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . hasPrevious ( ) ) . isTrue ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . hasNext ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . next ( ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> ) ; verify ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , times ( NUMBER ) ) . project ( eq ( java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> . get ( NUMBER ) ) , eq ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ) ; verify ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , times ( NUMBER ) ) . project ( eq ( java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> . get ( NUMBER ) ) , eq ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { newLucenePage ( null , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException ) . hasMessage ( STRING ) ; assertThat ( java.lang.IllegalArgumentException ) . hasNoCause ( ) ; throw java.lang.IllegalArgumentException ; } finally { verifyZeroInteractions ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , null , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException ) . hasMessage ( STRING ) ; assertThat ( java.lang.IllegalArgumentException ) . hasNoCause ( ) ; throw java.lang.IllegalArgumentException ; } finally { verifyZeroInteractions ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . hasNext ( ) ) . thenReturn ( false ) ; newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException ) . hasMessage ( STRING ) ; assertThat ( java.lang.IllegalArgumentException ) . hasNoCause ( ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . hasNext ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> = java.util.Arrays . java.util.List ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) ) ; java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> < java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> < LuceneResultStruct < java.lang.Long , java.lang.String > > > java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> = java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> , NUMBER ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getContent ( ) ) . isEqualTo ( java.util.Collections . java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> . org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person ( NUMBER ) ) ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getNext ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getContent ( ) ) . isEqualTo ( java.util.Collections . java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> . org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person ( NUMBER ) ) ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . hasNext ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . next ( ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> ) ; verify ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , times ( NUMBER ) ) . project ( eq ( java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> . get ( NUMBER ) ) , eq ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ) ; verify ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , times ( NUMBER ) ) . project ( eq ( java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> . get ( NUMBER ) ) , eq ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { try { java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPrevious ( ) ) . isNull ( ) ; org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getNext ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException ) . hasMessage ( STRING ) ; assertThat ( java.lang.IllegalStateException ) . hasNoCause ( ) ; throw java.lang.IllegalStateException ; } finally { verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . hasNext ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . next ( ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> ) ; verify ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , times ( NUMBER ) ) . project ( isA ( java.util.List .class ) , eq ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPrevious ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getNumber ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , java.util.Arrays . java.util.List ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) ) , NUMBER ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class , org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPrevious ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getNumber ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.List<java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , java.util.Arrays . java.util.List ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) ) , NUMBER ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class , org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class , org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPrevious ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPrevious ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPrevious ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getNumber ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . hasNext ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . next ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getNumberOfElements ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPageSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getSize ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getNumberOfElements ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPageSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getSize ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> = mock ( java.util.List .class ) ; when ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> . int ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . hasNext ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . next ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor . project ( isA ( java.util.List .class ) , eq ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ) ) . thenReturn ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getNumberOfElements ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getPageSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getSize ( ) ) . isEqualTo ( NUMBER ) ; verify ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> , times ( NUMBER ) ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . hasNext ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . next ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . size ( ) ) . thenReturn ( NUMBER ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . hasNext ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . next ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . size ( ) ) . thenReturn ( NUMBER ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getTotalPages ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . hasNext ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . next ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . size ( ) ) . thenReturn ( NUMBER ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getTotalPages ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . hasNext ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . next ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . size ( ) ) . thenReturn ( NUMBER ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getTotalPages ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . hasNext ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . next ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . size ( ) ) . thenReturn ( NUMBER ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getTotalPages ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . hasNext ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . next ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> . size ( ) ) . thenReturn ( NUMBER ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getTotalPages ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , times ( NUMBER ) ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person > java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> = java.util.Arrays . java.util.List ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . newPerson ( STRING , STRING ) ) ; java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<java.lang.Long,java.lang.String>> ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) ; LucenePage < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person , java.lang.Long , java.lang.String > org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> = newLucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ) , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<java.lang.Long,java.lang.String> , NUMBER , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . getNumberOfElements ( ) ) . isEqualTo ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> . int ( ) ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> ) . containsAll ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> ) ; Page < org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User > org.springframework.data.gemfire.search.lucene.support.Page<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User> = org.springframework.data.gemfire.search.lucene.support.LucenePage<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person,java.lang.Long,java.lang.String> . map ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User :: org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.Page<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.Page<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User> . getNumberOfElements ( ) ) . isEqualTo ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person> . int ( ) ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.Page<org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User> ) . contains ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User . newUser ( STRING ) , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User . newUser ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; return newPerson ( java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , getFirstName ( ) , getLastName ( ) ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.User ( org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person ) { return newUser ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . getFirstName ( ) . toLowerCase ( ) , org.springframework.data.gemfire.search.lucene.support.LucenePageUnitTests.Person . getLastName ( ) ) ) ; }  <METHOD_END>
