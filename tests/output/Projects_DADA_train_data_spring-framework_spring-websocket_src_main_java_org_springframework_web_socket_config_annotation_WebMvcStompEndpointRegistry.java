<METHOD_START> public void ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , WebSocketTransportRegistration org.springframework.web.socket.config.annotation.WebSocketTransportRegistration , TaskScheduler org.springframework.web.socket.config.annotation.TaskScheduler ) { Assert . notNull ( org.springframework.web.socket.config.annotation.WebSocketHandler , STRING ) ; Assert . notNull ( org.springframework.web.socket.config.annotation.WebSocketTransportRegistration , STRING ) ; this . org.springframework.web.socket.config.annotation.WebSocketHandler = org.springframework.web.socket.config.annotation.WebSocketHandler ; this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler = org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler ) ; if ( org.springframework.web.socket.config.annotation.WebSocketTransportRegistration . getSendTimeLimit ( ) != null ) { this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler . setSendTimeLimit ( org.springframework.web.socket.config.annotation.WebSocketTransportRegistration . getSendTimeLimit ( ) ) ; } if ( org.springframework.web.socket.config.annotation.WebSocketTransportRegistration . getSendBufferSizeLimit ( ) != null ) { this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler . setSendBufferSizeLimit ( org.springframework.web.socket.config.annotation.WebSocketTransportRegistration . getSendBufferSizeLimit ( ) ) ; } this . org.springframework.web.socket.config.annotation.StompSubProtocolHandler = new StompSubProtocolHandler ( ) ; if ( org.springframework.web.socket.config.annotation.WebSocketTransportRegistration . getMessageSizeLimit ( ) != null ) { this . org.springframework.web.socket.config.annotation.StompSubProtocolHandler . setMessageSizeLimit ( org.springframework.web.socket.config.annotation.WebSocketTransportRegistration . getMessageSizeLimit ( ) ) ; } this . org.springframework.web.socket.config.annotation.TaskScheduler = org.springframework.web.socket.config.annotation.TaskScheduler ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler ) { WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler = WebSocketHandlerDecorator . unwrap ( org.springframework.web.socket.config.annotation.WebSocketHandler ) ; if ( ! ( org.springframework.web.socket.config.annotation.WebSocketHandler instanceof SubProtocolWebSocketHandler ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.web.socket.config.annotation.WebSocketHandler ) ; } ; return ( SubProtocolWebSocketHandler ) org.springframework.web.socket.config.annotation.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration ( java.lang.String ... java.lang.String[] ) { this . org.springframework.web.socket.config.annotation.SubProtocolWebSocketHandler . addProtocolHandler ( this . org.springframework.web.socket.config.annotation.StompSubProtocolHandler ) ; WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration = new WebMvcStompWebSocketEndpointRegistration ( java.lang.String[] , this . org.springframework.web.socket.config.annotation.WebSocketHandler , this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; this . java.util.List<org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration> . add ( org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration ) ; return org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> protected int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( UrlPathHelper org.springframework.web.socket.config.annotation.UrlPathHelper ) { this . org.springframework.web.socket.config.annotation.UrlPathHelper = org.springframework.web.socket.config.annotation.UrlPathHelper ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.config.annotation.UrlPathHelper org.springframework.web.socket.config.annotation.UrlPathHelper ( ) { return this . org.springframework.web.socket.config.annotation.UrlPathHelper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry ( StompSubProtocolErrorHandler org.springframework.web.socket.config.annotation.StompSubProtocolErrorHandler ) { this . org.springframework.web.socket.config.annotation.StompSubProtocolHandler . setErrorHandler ( org.springframework.web.socket.config.annotation.StompSubProtocolErrorHandler ) ; return this ; }  <METHOD_END>
<METHOD_START> protected void void ( ApplicationContext org.springframework.web.socket.config.annotation.ApplicationContext ) { this . org.springframework.web.socket.config.annotation.StompSubProtocolHandler . setApplicationEventPublisher ( org.springframework.web.socket.config.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.config.annotation.AbstractHandlerMapping org.springframework.web.socket.config.annotation.AbstractHandlerMapping ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; for ( WebMvcStompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration : this . java.util.List<org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration> ) { MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration . getMappings ( ) ; for ( HttpRequestHandler org.springframework.web.socket.config.annotation.HttpRequestHandler : org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . keySet ( ) ) { for ( java.lang.String java.lang.String : org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . get ( org.springframework.web.socket.config.annotation.HttpRequestHandler ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.web.socket.config.annotation.HttpRequestHandler ) ; } } } WebSocketHandlerMapping org.springframework.web.socket.config.annotation.WebSocketHandlerMapping = new WebSocketHandlerMapping ( ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerMapping . setUrlMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerMapping . setOrder ( this . int ) ; if ( this . org.springframework.web.socket.config.annotation.UrlPathHelper != null ) { org.springframework.web.socket.config.annotation.WebSocketHandlerMapping . setUrlPathHelper ( this . org.springframework.web.socket.config.annotation.UrlPathHelper ) ; } return org.springframework.web.socket.config.annotation.WebSocketHandlerMapping ; }  <METHOD_END>
