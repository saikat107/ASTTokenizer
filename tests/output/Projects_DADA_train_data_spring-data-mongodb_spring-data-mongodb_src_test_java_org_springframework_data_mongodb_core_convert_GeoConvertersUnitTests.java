<METHOD_START> @ Test public void void ( ) { Box org.springframework.data.mongodb.core.convert.Box = new Box ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; Document org.springframework.data.mongodb.core.convert.Document = BoxToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Box ) ; Box org.springframework.data.mongodb.core.convert.Box = DocumentToBoxConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.Box , is ( org.springframework.data.mongodb.core.convert.Box ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Box . getClass ( ) . equals ( Box .class ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Circle org.springframework.data.mongodb.core.convert.Circle = new Circle ( new Point ( NUMBER , NUMBER ) , NUMBER ) ; Document org.springframework.data.mongodb.core.convert.Document = CircleToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Circle ) ; Circle org.springframework.data.mongodb.core.convert.Circle = DocumentToCircleConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.Circle , is ( org.springframework.data.mongodb.core.convert.Circle ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Distance org.springframework.data.mongodb.core.convert.Distance = new Distance ( NUMBER , Metrics . MILES ) ; Circle org.springframework.data.mongodb.core.convert.Circle = new Circle ( new Point ( NUMBER , NUMBER ) , org.springframework.data.mongodb.core.convert.Distance ) ; Document org.springframework.data.mongodb.core.convert.Document = CircleToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Circle ) ; Circle org.springframework.data.mongodb.core.convert.Circle = DocumentToCircleConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.Circle , is ( org.springframework.data.mongodb.core.convert.Circle ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Circle . getRadius ( ) , is ( org.springframework.data.mongodb.core.convert.Distance ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Polygon org.springframework.data.mongodb.core.convert.Polygon = new Polygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; Document org.springframework.data.mongodb.core.convert.Document = PolygonToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Polygon ) ; Polygon org.springframework.data.mongodb.core.convert.Polygon = DocumentToPolygonConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.Polygon , is ( org.springframework.data.mongodb.core.convert.Polygon ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Polygon . getClass ( ) . equals ( Polygon .class ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sphere org.springframework.data.mongodb.core.convert.Sphere = new Sphere ( new Point ( NUMBER , NUMBER ) , NUMBER ) ; Document org.springframework.data.mongodb.core.convert.Document = SphereToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Sphere ) ; Sphere org.springframework.data.mongodb.core.convert.Sphere = DocumentToSphereConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.Sphere , is ( org.springframework.data.mongodb.core.convert.Sphere ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Sphere . getClass ( ) . equals ( Sphere .class ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Distance org.springframework.data.mongodb.core.convert.Distance = new Distance ( NUMBER , Metrics . KILOMETERS ) ; Sphere org.springframework.data.mongodb.core.convert.Sphere = new Sphere ( new Point ( NUMBER , NUMBER ) , org.springframework.data.mongodb.core.convert.Distance ) ; Document org.springframework.data.mongodb.core.convert.Document = SphereToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Sphere ) ; Sphere org.springframework.data.mongodb.core.convert.Sphere = DocumentToSphereConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.Sphere , is ( org.springframework.data.mongodb.core.convert.Sphere ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Sphere . getRadius ( ) , is ( org.springframework.data.mongodb.core.convert.Distance ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Sphere . getClass ( ) . equals ( org . springframework . data . mongodb . core . org.springframework.data.mongodb.core.geo . org.springframework.data.mongodb.core.geo .class ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.core.convert.Point = new Point ( NUMBER , NUMBER ) ; Document org.springframework.data.mongodb.core.convert.Document = PointToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Point ) ; Point org.springframework.data.mongodb.core.convert.Point = DocumentToPointConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.Point , is ( org.springframework.data.mongodb.core.convert.Point ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Point . getClass ( ) . equals ( Point .class ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Box org.springframework.data.mongodb.core.convert.Box = new Box ( new double [] { NUMBER , NUMBER } , new double [] { NUMBER , NUMBER } ) ; GeoCommand org.springframework.data.mongodb.core.convert.GeoCommand = new GeoCommand ( org.springframework.data.mongodb.core.convert.Box ) ; Document org.springframework.data.mongodb.core.convert.Document = GeoCommandToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.GeoCommand ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document , is ( notNullValue ( ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ; assertThat ( java.util.List<java.lang.Object> , is ( ( java.lang.Object ) java.util.Arrays . java.util.List ( GeoConverters . toList ( org.springframework.data.mongodb.core.convert.Box . getFirst ( ) ) , GeoConverters . toList ( org.springframework.data.mongodb.core.convert.Box . getSecond ( ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( DocumentToPointConverter . INSTANCE . convert ( new Document ( ) . append ( STRING , NUMBER ) . append ( STRING , NUMBER ) ) , is ( new Point ( NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.Document . put ( STRING , new Document ( ) . append ( STRING , NUMBER ) . append ( STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.convert.Document . put ( STRING , NUMBER ) ; assertThat ( DocumentToCircleConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) , is ( new Circle ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.Document . put ( STRING , new Document ( ) . append ( STRING , NUMBER ) . append ( STRING , NUMBER ) ) ; org.springframework.data.mongodb.core.convert.Document . put ( STRING , NUMBER ) ; assertThat ( DocumentToSphereConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) , is ( new Sphere ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ) ) ; }  <METHOD_END>
