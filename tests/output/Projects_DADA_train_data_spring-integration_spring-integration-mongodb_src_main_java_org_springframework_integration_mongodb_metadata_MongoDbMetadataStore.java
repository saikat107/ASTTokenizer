<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.metadata.MongoDbFactory ) { this( org.springframework.integration.mongodb.metadata.MongoDbFactory , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.metadata.MongoDbFactory , java.lang.String java.lang.String ) { this( new MongoTemplate ( org.springframework.integration.mongodb.metadata.MongoDbFactory ) , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( MongoTemplate org.springframework.integration.mongodb.metadata.MongoTemplate ) { this( org.springframework.integration.mongodb.metadata.MongoTemplate , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( MongoTemplate org.springframework.integration.mongodb.metadata.MongoTemplate , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.integration.mongodb.metadata.MongoTemplate , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.mongodb.metadata.MongoTemplate = org.springframework.integration.mongodb.metadata.MongoTemplate ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; final java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; this . org.springframework.integration.mongodb.metadata.MongoTemplate . save ( new Document ( java.util.Map<java.lang.String,java.lang.Object> ) , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; Query org.springframework.integration.mongodb.metadata.Query = new Query ( Criteria . where ( java.lang.String ) . is ( java.lang.String ) ) ; org.springframework.integration.mongodb.metadata.Query . fields ( ) . exclude ( java.lang.String ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = this . org.springframework.integration.mongodb.metadata.MongoTemplate . findOne ( org.springframework.integration.mongodb.metadata.Query , java.util.Map .class , this . java.lang.String ) ; return java.util.Map<java.lang.String,java.lang.String> == null ? null : java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; Query org.springframework.integration.mongodb.metadata.Query = new Query ( Criteria . where ( java.lang.String ) . is ( java.lang.String ) ) ; org.springframework.integration.mongodb.metadata.Query . fields ( ) . exclude ( java.lang.String ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = this . org.springframework.integration.mongodb.metadata.MongoTemplate . findAndRemove ( org.springframework.integration.mongodb.metadata.Query , java.util.Map .class , this . java.lang.String ) ; return java.util.Map<java.lang.String,java.lang.String> == null ? null : java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; Query org.springframework.integration.mongodb.metadata.Query = new Query ( Criteria . where ( java.lang.String ) . is ( java.lang.String ) ) ; org.springframework.integration.mongodb.metadata.Query . fields ( ) . exclude ( java.lang.String ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = this . org.springframework.integration.mongodb.metadata.MongoTemplate . findAndModify ( org.springframework.integration.mongodb.metadata.Query , new Update ( ) . setOnInsert ( java.lang.String , java.lang.String ) , new FindAndModifyOptions ( ) . upsert ( true ) , java.util.Map .class , this . java.lang.String ) ; return java.util.Map<java.lang.String,java.lang.String> == null ? null : java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; Query org.springframework.integration.mongodb.metadata.Query = new Query ( Criteria . where ( java.lang.String ) . is ( java.lang.String ) . and ( java.lang.String ) . is ( java.lang.String ) ) ; return this . org.springframework.integration.mongodb.metadata.MongoTemplate . updateFirst ( org.springframework.integration.mongodb.metadata.Query , Update . update ( java.lang.String , java.lang.String ) , this . java.lang.String ) . getModifiedCount ( ) > NUMBER ; }  <METHOD_END>
