<METHOD_START> public void ( ) { java.lang.String [] java.lang.String[] = javax.imageio.ImageIO . java.lang.String[] ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( StringUtils . hasText ( java.lang.String ) ) { this . java.util.List<org.springframework.http.converter.MediaType> . add ( MediaType . parseMediaType ( java.lang.String ) ) ; } } java.lang.String [] java.lang.String[] = javax.imageio.ImageIO . java.lang.String[] ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( StringUtils . hasText ( java.lang.String ) ) { this . org.springframework.http.converter.MediaType = MediaType . parseMediaType ( java.lang.String ) ; break; } } }  <METHOD_END>
<METHOD_START> public void void ( MediaType org.springframework.http.converter.MediaType ) { Assert . notNull ( org.springframework.http.converter.MediaType , STRING ) ; java.util.Iterator<javax.imageio.ImageWriter> < javax.imageio.ImageWriter > java.util.Iterator<javax.imageio.ImageWriter> = javax.imageio.ImageIO . java.util.Iterator<javax.imageio.ImageWriter> ( org.springframework.http.converter.MediaType . toString ( ) ) ; if ( ! java.util.Iterator<javax.imageio.ImageWriter> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.http.converter.MediaType + STRING ) ; } this . org.springframework.http.converter.MediaType = org.springframework.http.converter.MediaType ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.converter.MediaType org.springframework.http.converter.MediaType ( ) { return this . org.springframework.http.converter.MediaType ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { Assert . notNull ( java.io.File , STRING ) ; Assert . isTrue ( java.io.File . boolean ( ) , STRING ) ; this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return ( java.awt.image.BufferedImage .class == java.lang.Class<> && boolean ( org.springframework.http.converter.MediaType ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MediaType org.springframework.http.converter.MediaType ) { if ( org.springframework.http.converter.MediaType == null ) { return true ; } java.util.Iterator<javax.imageio.ImageReader> < javax.imageio.ImageReader > java.util.Iterator<javax.imageio.ImageReader> = javax.imageio.ImageIO . java.util.Iterator<javax.imageio.ImageReader> ( org.springframework.http.converter.MediaType . toString ( ) ) ; return java.util.Iterator<javax.imageio.ImageReader> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return ( java.awt.image.BufferedImage .class == java.lang.Class<> && boolean ( org.springframework.http.converter.MediaType ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MediaType org.springframework.http.converter.MediaType ) { if ( org.springframework.http.converter.MediaType == null || MediaType . ALL . equals ( org.springframework.http.converter.MediaType ) ) { return true ; } java.util.Iterator<javax.imageio.ImageWriter> < javax.imageio.ImageWriter > java.util.Iterator<javax.imageio.ImageWriter> = javax.imageio.ImageIO . java.util.Iterator<javax.imageio.ImageWriter> ( org.springframework.http.converter.MediaType . toString ( ) ) ; return java.util.Iterator<javax.imageio.ImageWriter> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.http.converter.MediaType> < MediaType > java.util.List<org.springframework.http.converter.MediaType> ( ) { return java.util.Collections . java.util.List<org.springframework.http.converter.MediaType> ( this . java.util.List<org.springframework.http.converter.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.awt.image.BufferedImage java.awt.image.BufferedImage ( java.lang.Class<? extends java.awt.image.BufferedImage> < ? extends java.awt.image.BufferedImage > java.lang.Class<? extends java.awt.image.BufferedImage> , HttpInputMessage org.springframework.http.converter.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotReadableException { javax.imageio.stream.ImageInputStream javax.imageio.stream.ImageInputStream = null ; javax.imageio.ImageReader javax.imageio.ImageReader = null ; try { javax.imageio.stream.ImageInputStream = javax.imageio.stream.ImageInputStream ( org.springframework.http.converter.HttpInputMessage . getBody ( ) ) ; MediaType org.springframework.http.converter.MediaType = org.springframework.http.converter.HttpInputMessage . getHeaders ( ) . getContentType ( ) ; java.util.Iterator<javax.imageio.ImageReader> < javax.imageio.ImageReader > java.util.Iterator<javax.imageio.ImageReader> = javax.imageio.ImageIO . java.util.Iterator<javax.imageio.ImageReader> ( org.springframework.http.converter.MediaType . toString ( ) ) ; if ( java.util.Iterator<javax.imageio.ImageReader> . boolean ( ) ) { javax.imageio.ImageReader = java.util.Iterator<javax.imageio.ImageReader> . javax.imageio.ImageReader ( ) ; javax.imageio.ImageReadParam javax.imageio.ImageReadParam = javax.imageio.ImageReader . javax.imageio.ImageReadParam ( ) ; void ( javax.imageio.ImageReadParam ) ; javax.imageio.ImageReader . void ( javax.imageio.stream.ImageInputStream , true ) ; return javax.imageio.ImageReader . java.awt.image.BufferedImage ( NUMBER , javax.imageio.ImageReadParam ) ; } else { throw new HttpMessageNotReadableException ( STRING + org.springframework.http.converter.MediaType + STRING ) ; } } finally { if ( javax.imageio.ImageReader != null ) { javax.imageio.ImageReader . void ( ) ; } if ( javax.imageio.stream.ImageInputStream != null ) { try { javax.imageio.stream.ImageInputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } }  <METHOD_END>
<METHOD_START> private javax.imageio.stream.ImageInputStream javax.imageio.stream.ImageInputStream ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { if ( this . java.io.File != null ) { return new javax.imageio.stream.FileCacheImageInputStream ( java.io.InputStream , java.io.File ) ; } else { return new javax.imageio.stream.MemoryCacheImageInputStream ( java.io.InputStream ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.awt.image.BufferedImage java.awt.image.BufferedImage , final MediaType org.springframework.http.converter.MediaType , final HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException { final MediaType org.springframework.http.converter.MediaType = org.springframework.http.converter.MediaType ( org.springframework.http.converter.MediaType ) ; org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) . setContentType ( org.springframework.http.converter.MediaType ) ; if ( org.springframework.http.converter.HttpOutputMessage instanceof StreamingHttpOutputMessage ) { StreamingHttpOutputMessage org.springframework.http.converter.StreamingHttpOutputMessage = ( StreamingHttpOutputMessage ) org.springframework.http.converter.HttpOutputMessage ; org.springframework.http.converter.StreamingHttpOutputMessage . setBody ( new StreamingHttpOutputMessage . StreamingHttpOutputMessage ( ) { @ java.lang.Override public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { void ( java.awt.image.BufferedImage , org.springframework.http.converter.MediaType , java.io.OutputStream ) ; } } ) ; } else { void ( java.awt.image.BufferedImage , org.springframework.http.converter.MediaType , org.springframework.http.converter.HttpOutputMessage . getBody ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { void ( java.awt.image.BufferedImage , org.springframework.http.converter.MediaType , java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.converter.MediaType org.springframework.http.converter.MediaType ( MediaType org.springframework.http.converter.MediaType ) { if ( org.springframework.http.converter.MediaType == null || org.springframework.http.converter.MediaType . isWildcardType ( ) || org.springframework.http.converter.MediaType . isWildcardSubtype ( ) ) { org.springframework.http.converter.MediaType = org.springframework.http.converter.MediaType ( ) ; } Assert . notNull ( org.springframework.http.converter.MediaType , STRING + STRING ) ; return org.springframework.http.converter.MediaType ; }  <METHOD_END>
<METHOD_START> private void void ( java.awt.image.BufferedImage java.awt.image.BufferedImage , MediaType org.springframework.http.converter.MediaType , java.io.OutputStream java.io.OutputStream )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException { javax.imageio.stream.ImageOutputStream javax.imageio.stream.ImageOutputStream = null ; javax.imageio.ImageWriter javax.imageio.ImageWriter = null ; try { java.util.Iterator<javax.imageio.ImageWriter> < javax.imageio.ImageWriter > java.util.Iterator<javax.imageio.ImageWriter> = javax.imageio.ImageIO . java.util.Iterator<javax.imageio.ImageWriter> ( org.springframework.http.converter.MediaType . toString ( ) ) ; if ( java.util.Iterator<javax.imageio.ImageWriter> . boolean ( ) ) { javax.imageio.ImageWriter = java.util.Iterator<javax.imageio.ImageWriter> . javax.imageio.ImageWriter ( ) ; javax.imageio.ImageWriteParam javax.imageio.ImageWriteParam = javax.imageio.ImageWriter . javax.imageio.ImageWriteParam ( ) ; void ( javax.imageio.ImageWriteParam ) ; javax.imageio.stream.ImageOutputStream = javax.imageio.stream.ImageOutputStream ( java.io.OutputStream ) ; javax.imageio.ImageWriter . void ( javax.imageio.stream.ImageOutputStream ) ; javax.imageio.ImageWriter . void ( null , new javax.imageio.IIOImage ( java.awt.image.BufferedImage , null , null ) , javax.imageio.ImageWriteParam ) ; } else { throw new HttpMessageNotWritableException ( STRING + org.springframework.http.converter.MediaType + STRING ) ; } } finally { if ( javax.imageio.ImageWriter != null ) { javax.imageio.ImageWriter . void ( ) ; } if ( javax.imageio.stream.ImageOutputStream != null ) { try { javax.imageio.stream.ImageOutputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } } }  <METHOD_END>
<METHOD_START> private javax.imageio.stream.ImageOutputStream javax.imageio.stream.ImageOutputStream ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { if ( this . java.io.File != null ) { return new javax.imageio.stream.FileCacheImageOutputStream ( java.io.OutputStream , this . java.io.File ) ; } else { return new javax.imageio.stream.MemoryCacheImageOutputStream ( java.io.OutputStream ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( javax.imageio.ImageReadParam javax.imageio.ImageReadParam ) {	}  <METHOD_END>
<METHOD_START> protected void void ( javax.imageio.ImageWriteParam javax.imageio.ImageWriteParam ) {	}  <METHOD_END>
