<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentPropertyUnitTests.Timeline .class , STRING ) . getColumnName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentPropertyUnitTests.Timeline .class , STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isIdProperty ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentPropertyUnitTests.Timeline .class , STRING ) . getColumnName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentPropertyUnitTests.TypeWithComposedColumnAnnotation .class , STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnName ( ) ) . isEqualTo ( CqlIdentifier . cqlId ( STRING , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentPropertyUnitTests.TypeWithComposedPrimaryKeyAnnotation .class , STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnName ( ) ) . isEqualTo ( CqlIdentifier . cqlId ( STRING , true ) ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isIdProperty ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentPropertyUnitTests.TypeWithComposedPrimaryKeyColumnAnnotation .class , STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnName ( ) ) . isEqualTo ( CqlIdentifier . cqlId ( STRING , true ) ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( org.springframework.data.cassandra.mapping.BasicCassandraPersistentPropertyUnitTests.TypeWithComposedCassandraTypeAnnotation .class , STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getDataType ( ) . getName ( ) ) . isEqualTo ( Name . COUNTER ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . findAnnotation ( CassandraType .class ) ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.mapping.CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Class<> , java.lang.String ) ; return new BasicCassandraPersistentProperty ( Property . of ( java.lang.reflect.Field ) , org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<> ( java.lang.Class<> ) , new CassandraSimpleTypeHolder ( ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<T> < T > org.springframework.data.cassandra.mapping.BasicCassandraPersistentEntity<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new BasicCassandraPersistentEntity <> ( ClassTypeInformation . from ( java.lang.Class<T> ) ) ; }  <METHOD_END>
