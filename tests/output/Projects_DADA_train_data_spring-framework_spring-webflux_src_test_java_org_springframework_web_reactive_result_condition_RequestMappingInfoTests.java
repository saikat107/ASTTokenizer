<METHOD_START> @ Test public void void ( ) { RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( ) . build ( ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.RequestMappingInfo . getPatternsCondition ( ) . getPatterns ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.RequestMappingInfo . getMethodsCondition ( ) . getMethods ( ) . size ( ) ) ; assertEquals ( true , org.springframework.web.reactive.result.condition.RequestMappingInfo . getConsumesCondition ( ) . isEmpty ( ) ) ; assertEquals ( true , org.springframework.web.reactive.result.condition.RequestMappingInfo . getProducesCondition ( ) . isEmpty ( ) ) ; assertNotNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo . getParamsCondition ( ) ) ; assertNotNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo . getHeadersCondition ( ) ) ; assertNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo . getCustomCondition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING , STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . build ( ) ; assertEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo , org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING , STRING , STRING ) . build ( ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING , STRING , STRING ) . build ( ) ; assertEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo , org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . params ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . params ( STRING ) . build ( ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . headers ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . headers ( STRING ) . build ( ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . post ( STRING ) . contentType ( MediaType . TEXT_PLAIN ) . toExchange ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . consumes ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . consumes ( STRING ) . build ( ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . accept ( MediaType . TEXT_PLAIN ) . toExchange ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . produces ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . produces ( STRING ) . build ( ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . params ( STRING ) . build ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . params ( STRING ) . customCondition ( new ParamsRequestCondition ( STRING ) ) . build ( ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( ) . build ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( ) . methods ( RequestMethod . GET ) . build ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( ) . methods ( RequestMethod . GET ) . params ( STRING ) . build ( ) ; ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; java.util.Comparator<org.springframework.web.reactive.result.condition.RequestMappingInfo> < RequestMappingInfo > java.util.Comparator<org.springframework.web.reactive.result.condition.RequestMappingInfo> = ( org.springframework.web.reactive.result.condition.RequestMappingInfo , org.springframework.web.reactive.result.condition.RequestMappingInfo ) -> org.springframework.web.reactive.result.condition.RequestMappingInfo . compareTo ( org.springframework.web.reactive.result.condition.RequestMappingInfo , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; java.util.List<org.springframework.web.reactive.result.condition.RequestMappingInfo> < RequestMappingInfo > java.util.List<org.springframework.web.reactive.result.condition.RequestMappingInfo> = java.util.List ( org.springframework.web.reactive.result.condition.RequestMappingInfo , org.springframework.web.reactive.result.condition.RequestMappingInfo , org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; java.util.Collections . void ( java.util.List<org.springframework.web.reactive.result.condition.RequestMappingInfo> ) ; java.util.List<org.springframework.web.reactive.result.condition.RequestMappingInfo> . sort ( java.util.Comparator<org.springframework.web.reactive.result.condition.RequestMappingInfo> ) ; assertEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo , java.util.List<org.springframework.web.reactive.result.condition.RequestMappingInfo> . get ( NUMBER ) ) ; assertEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo , java.util.List<org.springframework.web.reactive.result.condition.RequestMappingInfo> . get ( NUMBER ) ) ; assertEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo , java.util.List<org.springframework.web.reactive.result.condition.RequestMappingInfo> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . GET ) . params ( STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . customCondition ( new ParamsRequestCondition ( STRING ) ) . build ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . GET ) . params ( STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . customCondition ( new ParamsRequestCondition ( STRING ) ) . build ( ) ; assertEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo , org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; assertEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) , org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING , STRING ) . methods ( RequestMethod . GET ) . params ( STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . customCondition ( new ParamsRequestCondition ( STRING ) ) . build ( ) ; assertFalse ( org.springframework.web.reactive.result.condition.RequestMappingInfo . equals ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) , org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . GET , RequestMethod . POST ) . params ( STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . customCondition ( new ParamsRequestCondition ( STRING ) ) . build ( ) ; assertFalse ( org.springframework.web.reactive.result.condition.RequestMappingInfo . equals ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) , org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . GET ) . params ( STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . customCondition ( new ParamsRequestCondition ( STRING ) ) . build ( ) ; assertFalse ( org.springframework.web.reactive.result.condition.RequestMappingInfo . equals ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) , org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . GET ) . params ( STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . customCondition ( new ParamsRequestCondition ( STRING ) ) . build ( ) ; assertFalse ( org.springframework.web.reactive.result.condition.RequestMappingInfo . equals ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) , org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . GET ) . params ( STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . customCondition ( new ParamsRequestCondition ( STRING ) ) . build ( ) ; assertFalse ( org.springframework.web.reactive.result.condition.RequestMappingInfo . equals ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) , org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . GET ) . params ( STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . customCondition ( new ParamsRequestCondition ( STRING ) ) . build ( ) ; assertFalse ( org.springframework.web.reactive.result.condition.RequestMappingInfo . equals ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) , org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . GET ) . params ( STRING ) . headers ( STRING ) . consumes ( STRING ) . produces ( STRING ) . customCondition ( new ParamsRequestCondition ( STRING ) ) . build ( ) ; assertFalse ( org.springframework.web.reactive.result.condition.RequestMappingInfo . equals ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ) ; assertNotEquals ( org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) , org.springframework.web.reactive.result.condition.RequestMappingInfo . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . options ( STRING ) . header ( STRING , STRING ) . header ( HttpHeaders . ACCESS_CONTROL_REQUEST_HEADERS , STRING ) . toExchange ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . POST ) . build ( ) ; RequestMappingInfo org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = paths ( STRING ) . methods ( RequestMethod . OPTIONS ) . build ( ) ; org.springframework.web.reactive.result.condition.RequestMappingInfo = org.springframework.web.reactive.result.condition.RequestMappingInfo . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNull ( STRING , org.springframework.web.reactive.result.condition.RequestMappingInfo ) ; }  <METHOD_END>
