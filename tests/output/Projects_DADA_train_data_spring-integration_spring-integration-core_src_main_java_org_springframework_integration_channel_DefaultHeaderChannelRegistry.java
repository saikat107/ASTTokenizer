<METHOD_START> public void ( ) { this( int ); }  <METHOD_END>
<METHOD_START> public void ( long long ) { this . void ( long ) ; }  <METHOD_END>
<METHOD_START> public final void void ( long long ) { Assert . isTrue ( long > NUMBER , STRING ) ; this . long = long ; }  <METHOD_END>
<METHOD_START> public final long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TaskScheduler org.springframework.integration.channel.TaskScheduler ) { super. setTaskScheduler ( org.springframework.integration.channel.TaskScheduler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final int int ( ) { return this . java.util.Map<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; Assert . notNull ( this . getTaskScheduler ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { if ( ! this . boolean ) { Assert . notNull ( this . getTaskScheduler ( ) , STRING ) ; this . java.util.concurrent.ScheduledFuture<?> = this . getTaskScheduler ( ) . schedule ( this , new java.util.Date ( java.lang.System . long ( ) + this . long ) ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { this . boolean = false ; if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; this . java.util.concurrent.ScheduledFuture<?> = null ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Runnable java.lang.Runnable ) { this . void ( ) ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ( java.lang.Object , this . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , long long ) { if ( ! this . boolean && ! this . boolean && this . getTaskScheduler ( ) != null ) { void ( ) ; } if ( java.lang.Object != null && java.lang.Object instanceof MessageChannel ) { java.lang.String java.lang.String = this . java.lang.String + org.springframework.integration.channel.DefaultHeaderChannelRegistry . java.util.concurrent.atomic.AtomicLong . long ( ) ; this . java.util.Map<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> . org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper ( java.lang.String , new org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper ( ( MessageChannel ) java.lang.Object , java.lang.System . long ( ) + long ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Object + STRING + java.lang.String ) ; } return java.lang.String ; } else { return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.MessageChannel org.springframework.integration.channel.MessageChannel ( java.lang.String java.lang.String ) { if ( java.lang.String != null ) { org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper ; if ( this . boolean ) { org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper = this . java.util.Map<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> . org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper ( java.lang.String ) ; } else { org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper = this . java.util.Map<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> . org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper ( java.lang.String ) ; } if ( logger . isDebugEnabled ( ) && org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper != null ) { logger . debug ( STRING + org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper . org.springframework.integration.channel.MessageChannel ( ) + STRING + java.lang.String ) ; } return org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper == null ? null : org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper . org.springframework.integration.channel.MessageChannel ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; this . java.util.concurrent.ScheduledFuture<?> = null ; } this . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + this . java.util.Map<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> . int ( ) ) ; } java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper>> < java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> < java.lang.String , org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper>> = this . java.util.Map<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper>> ( ) ; long long = java.lang.System . long ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper>> . boolean ( ) ) { java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> < java.lang.String , org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper > java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper>> . java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> ( ) ; if ( java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> . org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper ( ) . long ( ) < long ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> . java.lang.String ( ) + STRING + java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> . org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper ( ) . org.springframework.integration.channel.MessageChannel ( ) + STRING ) ; } java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper>> . void ( ) ; } } this . java.util.concurrent.ScheduledFuture<?> = this . getTaskScheduler ( ) . schedule ( this , new java.util.Date ( java.lang.System . long ( ) + this . long ) ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + this . java.util.Map<java.lang.String,org.springframework.integration.channel.DefaultHeaderChannelRegistry.MessageChannelWrapper> . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> void ( MessageChannel org.springframework.integration.channel.MessageChannel , long long ) { this . org.springframework.integration.channel.MessageChannel = org.springframework.integration.channel.MessageChannel ; this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.channel.MessageChannel org.springframework.integration.channel.MessageChannel ( ) { return this . org.springframework.integration.channel.MessageChannel ; }  <METHOD_END>
