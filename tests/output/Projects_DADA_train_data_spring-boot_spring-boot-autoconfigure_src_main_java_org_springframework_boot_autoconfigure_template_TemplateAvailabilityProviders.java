<METHOD_START> @ java.lang.Override protected boolean boolean ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> < java.lang.String , TemplateAvailabilityProvider > java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> ) { if ( int ( ) > int ) { org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders .this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> . remove ( java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> . getKey ( ) ) ; return true ; } return false ; }  <METHOD_END>
<METHOD_START> public void ( ApplicationContext org.springframework.boot.autoconfigure.template.ApplicationContext ) { this( org.springframework.boot.autoconfigure.template.ApplicationContext == null ? null : org.springframework.boot.autoconfigure.template.ApplicationContext . getClassLoader ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.ClassLoader , STRING ) ; this . java.util.List<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> = SpringFactoriesLoader . loadFactories ( TemplateAvailabilityProvider .class , java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> protected void ( java.util.Collection<? extends org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> < ? extends TemplateAvailabilityProvider > java.util.Collection<? extends org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> ) { Assert . notNull ( java.util.Collection<> , STRING ) ; this . java.util.List<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> = new java.util.ArrayList <> ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> < TemplateAvailabilityProvider > java.util.List<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> ( ) { return this . java.util.List<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ( java.lang.String java.lang.String , ApplicationContext org.springframework.boot.autoconfigure.template.ApplicationContext ) { Assert . notNull ( org.springframework.boot.autoconfigure.template.ApplicationContext , STRING ) ; return org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ( java.lang.String , org.springframework.boot.autoconfigure.template.ApplicationContext . getEnvironment ( ) , org.springframework.boot.autoconfigure.template.ApplicationContext . getClassLoader ( ) , org.springframework.boot.autoconfigure.template.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ( java.lang.String java.lang.String , Environment org.springframework.boot.autoconfigure.template.Environment , java.lang.ClassLoader java.lang.ClassLoader , ResourceLoader org.springframework.boot.autoconfigure.template.ResourceLoader ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.boot.autoconfigure.template.Environment , STRING ) ; Assert . notNull ( java.lang.ClassLoader , STRING ) ; Assert . notNull ( org.springframework.boot.autoconfigure.template.ResourceLoader , STRING ) ; RelaxedPropertyResolver org.springframework.boot.autoconfigure.template.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.template.Environment , STRING ) ; if ( ! org.springframework.boot.autoconfigure.template.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Boolean .class , true ) ) { return org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ( java.lang.String , org.springframework.boot.autoconfigure.template.Environment , java.lang.ClassLoader , org.springframework.boot.autoconfigure.template.ResourceLoader ) ; } TemplateAvailabilityProvider org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider = this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> . get ( java.lang.String ) ; if ( org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider == null ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> ) { org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider = org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ( java.lang.String , org.springframework.boot.autoconfigure.template.Environment , java.lang.ClassLoader , org.springframework.boot.autoconfigure.template.ResourceLoader ) ; org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider = ( org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider == null ? org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider : org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) ; this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> . put ( java.lang.String , org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) ; this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> . put ( java.lang.String , org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) ; } } return ( org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider == org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ? null : org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ( java.lang.String java.lang.String , Environment org.springframework.boot.autoconfigure.template.Environment , java.lang.ClassLoader java.lang.ClassLoader , ResourceLoader org.springframework.boot.autoconfigure.template.ResourceLoader ) { for ( TemplateAvailabilityProvider org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider : this . java.util.List<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> ) { if ( org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider . isTemplateAvailable ( java.lang.String , org.springframework.boot.autoconfigure.template.Environment , java.lang.ClassLoader , org.springframework.boot.autoconfigure.template.ResourceLoader ) ) { return org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , Environment org.springframework.boot.autoconfigure.template.Environment , java.lang.ClassLoader java.lang.ClassLoader , ResourceLoader org.springframework.boot.autoconfigure.template.ResourceLoader ) { return false ; }  <METHOD_END>
