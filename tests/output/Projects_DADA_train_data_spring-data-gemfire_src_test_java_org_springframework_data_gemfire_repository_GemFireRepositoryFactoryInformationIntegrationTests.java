<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.RepositoryFactoryInformation> < java.lang.String , RepositoryFactoryInformation > java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.RepositoryFactoryInformation> = org.springframework.data.gemfire.repository.ApplicationContext . getBeansOfType ( RepositoryFactoryInformation .class ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.RepositoryFactoryInformation> , is ( notNullValue ( java.util.Map .class ) ) ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.RepositoryFactoryInformation> . size ( ) , is ( greaterThan ( NUMBER ) ) ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.RepositoryFactoryInformation> . keySet ( ) , hasItem ( STRING ) ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.data.gemfire.repository.RepositoryFactoryInformation> . get ( STRING ) , is ( instanceOf ( GemfireRepositoryFactoryBean .class ) ) ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.repository.ApplicationContext . getBeanNamesForType ( PersonRepository .class ) ) , hasItem ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return org.springframework.data.gemfire.repository.GemFireRepositoryFactoryInformationIntegrationTests .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> java.util.Properties java.util.Properties ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.repository.CacheFactoryBean org.springframework.data.gemfire.repository.CacheFactoryBean ( ) { CacheFactoryBean org.springframework.data.gemfire.repository.CacheFactoryBean = new CacheFactoryBean ( ) ; org.springframework.data.gemfire.repository.CacheFactoryBean . setClose ( true ) ; org.springframework.data.gemfire.repository.CacheFactoryBean . setProperties ( java.util.Properties ( ) ) ; return org.springframework.data.gemfire.repository.CacheFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.repository.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.Person> < java.lang.Long , Person > org.springframework.data.gemfire.repository.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.Person> ( Cache org.springframework.data.gemfire.repository.Cache , RegionAttributes < java.lang.Long , Person > org.springframework.data.gemfire.repository.RegionAttributes<java.lang.Long,org.springframework.data.gemfire.repository.Person> ) { LocalRegionFactoryBean < java.lang.Long , Person > org.springframework.data.gemfire.repository.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.Person> = new LocalRegionFactoryBean < java.lang.Long , Person > ( ) ; org.springframework.data.gemfire.repository.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.Person> . setAttributes ( org.springframework.data.gemfire.repository.RegionAttributes<java.lang.Long,org.springframework.data.gemfire.repository.Person> ) ; org.springframework.data.gemfire.repository.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.Person> . setCache ( org.springframework.data.gemfire.repository.Cache ) ; org.springframework.data.gemfire.repository.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.Person> . setClose ( false ) ; org.springframework.data.gemfire.repository.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.Person> . setPersistent ( false ) ; return org.springframework.data.gemfire.repository.LocalRegionFactoryBean<java.lang.Long,org.springframework.data.gemfire.repository.Person> ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.repository.RegionAttributesFactoryBean org.springframework.data.gemfire.repository.RegionAttributesFactoryBean ( ) { RegionAttributesFactoryBean org.springframework.data.gemfire.repository.RegionAttributesFactoryBean = new RegionAttributesFactoryBean ( ) ; org.springframework.data.gemfire.repository.RegionAttributesFactoryBean . setKeyConstraint ( java.lang.Long .class ) ; org.springframework.data.gemfire.repository.RegionAttributesFactoryBean . setValueConstraint ( Person .class ) ; return org.springframework.data.gemfire.repository.RegionAttributesFactoryBean ; }  <METHOD_END>
