<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { AbstractApplicationContext org.springframework.integration.mongodb.store.AbstractApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , this . java.lang.Class<? extends org.springframework.integration.mongodb.store.DelayerHandlerRescheduleIntegrationTests> ( ) ) ; MessageChannel org.springframework.integration.mongodb.store.MessageChannel = org.springframework.integration.mongodb.store.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; MessageGroupStore org.springframework.integration.mongodb.store.MessageGroupStore = org.springframework.integration.mongodb.store.AbstractApplicationContext . getBean ( STRING , MessageGroupStore .class ) ; java.lang.String java.lang.String = java.lang.String + STRING ; org.springframework.integration.mongodb.store.MessageGroupStore . removeMessageGroup ( java.lang.String ) ; Message < java.lang.String > org.springframework.integration.mongodb.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.mongodb.store.MessageChannel . send ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ; org.springframework.integration.mongodb.store.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; ThreadPoolTaskScheduler org.springframework.integration.mongodb.store.ThreadPoolTaskScheduler = ( ThreadPoolTaskScheduler ) IntegrationContextUtils . getTaskScheduler ( org.springframework.integration.mongodb.store.AbstractApplicationContext ) ; org.springframework.integration.mongodb.store.ThreadPoolTaskScheduler . shutdown ( ) ; org.springframework.integration.mongodb.store.ThreadPoolTaskScheduler . getScheduledExecutor ( ) . awaitTermination ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; MessageGroup org.springframework.integration.mongodb.store.MessageGroup = org.springframework.integration.mongodb.store.MessageGroupStore . getMessageGroup ( java.lang.String ) ; java.util.Iterator<org.springframework.integration.mongodb.store.Message<?>> < Message < ? > > java.util.Iterator<org.springframework.integration.mongodb.store.Message<?>> = org.springframework.integration.mongodb.store.MessageGroup . getMessages ( ) . iterator ( ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = java.util.Iterator<org.springframework.integration.mongodb.store.Message<?>> . next ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ; assertTrue ( java.lang.Object instanceof DelayHandler . DelayHandler ) ; Message < java.lang.String > org.springframework.integration.mongodb.store.Message<java.lang.String> = ( Message < java.lang.String > ) ( ( DelayHandler . DelayHandler ) java.lang.Object ) . getOriginal ( ) ; org.springframework.integration.mongodb.store.Message<?> = java.util.Iterator<org.springframework.integration.mongodb.store.Message<?>> . next ( ) ; Message < java.lang.String > org.springframework.integration.mongodb.store.Message<java.lang.String> = ( Message < java.lang.String > ) ( ( DelayHandler . DelayHandler ) org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ) . getOriginal ( ) ; assertThat ( org.springframework.integration.mongodb.store.Message<java.lang.String> , Matchers . anyOf ( Matchers . is ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) , Matchers . is ( org.springframework.integration.mongodb.store.Message<java.lang.String> ) ) ) ; org.springframework.integration.mongodb.store.AbstractApplicationContext . destroy ( ) ; org.springframework.integration.mongodb.store.AbstractApplicationContext . refresh ( ) ; PollableChannel org.springframework.integration.mongodb.store.PollableChannel = org.springframework.integration.mongodb.store.AbstractApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ; org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mongodb.store.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.store.Message<> . getPayload ( ) ; assertNotSame ( java.lang.Object , java.lang.Object ) ; org.springframework.integration.mongodb.store.MessageGroupStore = org.springframework.integration.mongodb.store.AbstractApplicationContext . getBean ( STRING , MessageGroupStore .class ) ; assertEquals ( NUMBER , org.springframework.integration.mongodb.store.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; org.springframework.integration.mongodb.store.AbstractApplicationContext . destroy ( ) ; }  <METHOD_END>
