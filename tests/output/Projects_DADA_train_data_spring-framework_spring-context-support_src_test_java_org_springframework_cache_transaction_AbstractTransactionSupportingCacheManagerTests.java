<METHOD_START> protected abstract T T ( boolean boolean );  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class<? extends org.springframework.cache.transaction.Cache> < ? extends Cache > java.lang.Class<? extends org.springframework.cache.transaction.Cache> ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( T ( false ) . getCache ( java.lang.String ) , is ( instanceOf ( java.lang.Class<? extends org.springframework.cache.transaction.Cache> ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T T = T ( false ) ; java.lang.String java.lang.String = org.springframework.cache.transaction.TestName . getMethodName ( ) ; void ( java.lang.String ) ; assertFalse ( T . getCacheNames ( ) . contains ( java.lang.String ) ) ; try { assertThat ( T . getCache ( java.lang.String ) , is ( instanceOf ( java.lang.Class<? extends org.springframework.cache.transaction.Cache> ( ) ) ) ) ; assertTrue ( T . getCacheNames ( ) . contains ( java.lang.String ) ) ; } finally { void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { T T = T ( false ) ; java.lang.String java.lang.String = org.springframework.cache.transaction.TestName . getMethodName ( ) ; assertFalse ( T . getCacheNames ( ) . contains ( java.lang.String ) ) ; assertThat ( T . getCache ( java.lang.String ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( T ( true ) . getCache ( java.lang.String ) , is ( instanceOf ( TransactionAwareCacheDecorator .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.transaction.TestName . getMethodName ( ) ; T T = T ( true ) ; assertFalse ( T . getCacheNames ( ) . contains ( java.lang.String ) ) ; void ( java.lang.String ) ; try { assertThat ( T . getCache ( java.lang.String ) , is ( instanceOf ( TransactionAwareCacheDecorator .class ) ) ) ; assertTrue ( T . getCacheNames ( ) . contains ( java.lang.String ) ) ; } finally { void ( java.lang.String ) ; } }  <METHOD_END>
