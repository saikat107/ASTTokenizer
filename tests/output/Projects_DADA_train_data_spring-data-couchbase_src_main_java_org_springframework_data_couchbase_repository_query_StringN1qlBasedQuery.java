<METHOD_START> protected java.lang.String java.lang.String ( ) { return getCouchbaseOperations ( ) . getConverter ( ) . getTypeKey ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return getQueryMethod ( ) . getEntityInformation ( ) . getJavaType ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , CouchbaseQueryMethod org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , CouchbaseOperations org.springframework.data.couchbase.repository.query.CouchbaseOperations , SpelExpressionParser org.springframework.data.couchbase.repository.query.SpelExpressionParser , final EvaluationContextProvider org.springframework.data.couchbase.repository.query.EvaluationContextProvider ) { super( org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.query.CouchbaseOperations ); this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser = new StringBasedN1qlQueryParser ( java.lang.String , org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod , getCouchbaseOperations ( ) . getCouchbaseBucket ( ) . name ( ) , java.lang.String ( ) , java.lang.Class<?> ( ) ) ; this . org.springframework.data.couchbase.repository.query.SpelExpressionParser = org.springframework.data.couchbase.repository.query.SpelExpressionParser ; this . org.springframework.data.couchbase.repository.query.EvaluationContextProvider = org.springframework.data.couchbase.repository.query.EvaluationContextProvider ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.JsonValue org.springframework.data.couchbase.repository.query.JsonValue ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor ) { return this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser . getPlaceholderValues ( org.springframework.data.couchbase.repository.query.ParameterAccessor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.query.Statement org.springframework.data.couchbase.repository.query.Statement ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor , java.lang.Object [] java.lang.Object[] , ReturnedType org.springframework.data.couchbase.repository.query.ReturnedType ) { EvaluationContext org.springframework.data.couchbase.repository.query.EvaluationContext = org.springframework.data.couchbase.repository.query.EvaluationContextProvider . getEvaluationContext ( getQueryMethod ( ) . getParameters ( ) , java.lang.Object[] ) ; java.lang.String java.lang.String = this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser . doParse ( org.springframework.data.couchbase.repository.query.SpelExpressionParser , org.springframework.data.couchbase.repository.query.EvaluationContext , false ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Sort org.springframework.data.couchbase.repository.query.Sort = org.springframework.data.couchbase.repository.query.ParameterAccessor . getSort ( ) ; if ( org.springframework.data.couchbase.repository.query.Sort . isSorted ( ) ) { com . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase [] com.couchbase.client.java.query.dsl.Sort[] = N1qlUtils . createSort ( org.springframework.data.couchbase.repository.query.Sort , getCouchbaseOperations ( ) . getConverter ( ) ) ; java.lang.String = STRING + new DefaultOrderByPath ( null ) . orderBy ( com.couchbase.client.java.query.dsl.Sort[] ) . toString ( ) ; } if ( queryMethod . isPageQuery ( ) ) { Pageable org.springframework.data.couchbase.repository.query.Pageable = org.springframework.data.couchbase.repository.query.ParameterAccessor . getPageable ( ) ; Assert . notNull ( org.springframework.data.couchbase.repository.query.Pageable , STRING ) ; java.lang.String = STRING + new DefaultLimitPath ( null ) . limit ( org.springframework.data.couchbase.repository.query.Pageable . getPageSize ( ) ) . offset ( java.lang.Math . int ( org.springframework.data.couchbase.repository.query.Pageable . getOffset ( ) ) ) . toString ( ) ; } else if ( queryMethod . isSliceQuery ( ) ) { Pageable org.springframework.data.couchbase.repository.query.Pageable = org.springframework.data.couchbase.repository.query.ParameterAccessor . getPageable ( ) ; Assert . notNull ( org.springframework.data.couchbase.repository.query.Pageable , STRING ) ; java.lang.String = STRING + new DefaultLimitPath ( null ) . limit ( org.springframework.data.couchbase.repository.query.Pageable . getPageSize ( ) + NUMBER ) . offset ( java.lang.Math . int ( org.springframework.data.couchbase.repository.query.Pageable . getOffset ( ) ) ) . toString ( ) ; } return N1qlQuery . simple ( java.lang.String + java.lang.String + java.lang.String ) . statement ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.Statement org.springframework.data.couchbase.repository.query.Statement ( ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor , java.lang.Object [] java.lang.Object[] ) { EvaluationContext org.springframework.data.couchbase.repository.query.EvaluationContext = org.springframework.data.couchbase.repository.query.EvaluationContextProvider . getEvaluationContext ( getQueryMethod ( ) . getParameters ( ) , java.lang.Object[] ) ; java.lang.String java.lang.String = this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser . doParse ( org.springframework.data.couchbase.repository.query.SpelExpressionParser , org.springframework.data.couchbase.repository.query.EvaluationContext , true ) ; return N1qlQuery . simple ( java.lang.String ) . statement ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . org.springframework.data.couchbase.repository.query.StringBasedN1qlQueryParser . useGeneratedCountQuery ( ) ; }  <METHOD_END>
