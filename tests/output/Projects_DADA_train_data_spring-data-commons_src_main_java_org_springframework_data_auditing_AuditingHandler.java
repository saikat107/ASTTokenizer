<METHOD_START> @ java.lang.Deprecated public void ( MappingContext < ? extends PersistentEntity < ? , ? > , ? extends PersistentProperty < ? > > org.springframework.data.auditing.MappingContext<? extends org.springframework.data.auditing.PersistentEntity<?,?>,? extends org.springframework.data.auditing.PersistentProperty<?>> ) { this( new PersistentEntities ( java.util.Collections . java.util.List ( org.springframework.data.auditing.MappingContext<,> ) ) ); }  <METHOD_END>
<METHOD_START> public void ( PersistentEntities org.springframework.data.auditing.PersistentEntities ) { Assert . notNull ( org.springframework.data.auditing.PersistentEntities , STRING ) ; this . org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory = new MappingAuditableBeanWrapperFactory ( org.springframework.data.auditing.PersistentEntities ) ; this . java.util.Optional<org.springframework.data.auditing.AuditorAware<?>> = java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( AuditorAware < ? > org.springframework.data.auditing.AuditorAware<?> ) { Assert . notNull ( org.springframework.data.auditing.AuditorAware<> , STRING ) ; this . java.util.Optional<org.springframework.data.auditing.AuditorAware<?>> = java.util.Optional . java.util.Optional ( org.springframework.data.auditing.AuditorAware<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( DateTimeProvider org.springframework.data.auditing.DateTimeProvider ) { this . org.springframework.data.auditing.DateTimeProvider = org.springframework.data.auditing.DateTimeProvider == null ? CurrentDateTimeProvider . INSTANCE : org.springframework.data.auditing.DateTimeProvider ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; void ( java.lang.Object , true ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; void ( java.lang.Object , false ) ; }  <METHOD_END>
<METHOD_START> protected final boolean boolean ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; return org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory . getBeanWrapperFor ( java.lang.Object ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , boolean boolean ) { org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory . getBeanWrapperFor ( java.lang.Object ) . ifPresent ( it -> { Optional < Object > auditor = touchAuditor ( it , isNew ) ; Optional < TemporalAccessor > now = dateTimeForNow ? touchDate ( it , isNew ) : Optional . empty ( ) ; if ( LOGGER . isDebugEnabled ( ) ) { Object defaultedNow = now . map ( Object :: toString ) . orElse ( STRING ) ; Object defaultedAuditor = auditor . map ( Object :: toString ) . orElse ( STRING ) ; LOGGER . debug ( STRING , new Object [] { target , defaultedNow , defaultedAuditor } ) ; } } ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( AuditableBeanWrapper org.springframework.data.auditing.AuditableBeanWrapper , boolean boolean ) { Assert . notNull ( org.springframework.data.auditing.AuditableBeanWrapper , STRING ) ; return java.util.Optional<org.springframework.data.auditing.AuditorAware<?>> . map ( it -> { Optional < ? > auditor = it . getCurrentAuditor ( ) ; Assert . notNull ( auditor , ( ) String . format ( STRING , AopUtils . getTargetClass ( it ) ) ) ; auditor . filter ( __ -> isNew ) . ifPresent ( foo -> wrapper . setCreatedBy ( foo ) ) ; auditor . filter ( __ -> ! isNew || modifyOnCreation ) . ifPresent ( foo -> wrapper . setLastModifiedBy ( foo ) ) ; return auditor ; } ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.time.temporal.TemporalAccessor> < java.time.temporal.TemporalAccessor > java.util.Optional<java.time.temporal.TemporalAccessor> ( AuditableBeanWrapper org.springframework.data.auditing.AuditableBeanWrapper , boolean boolean ) { Assert . notNull ( org.springframework.data.auditing.AuditableBeanWrapper , STRING ) ; java.util.Optional<java.time.temporal.TemporalAccessor> < java.time.temporal.TemporalAccessor > java.util.Optional<java.time.temporal.TemporalAccessor> = org.springframework.data.auditing.DateTimeProvider . getNow ( ) ; Assert . notNull ( java.util.Optional<java.time.temporal.TemporalAccessor> , ( ) String . format ( STRING , dateTimeProvider . getClass ( ) ) ) ; java.util.Optional<java.time.temporal.TemporalAccessor> . java.util.Optional<java.time.temporal.TemporalAccessor> ( java.time.temporal.TemporalAccessor -> boolean ) . void ( java.time.temporal.TemporalAccessor -> org.springframework.data.auditing.AuditableBeanWrapper . setCreatedDate ( java.time.temporal.TemporalAccessor ) ) ; java.util.Optional<java.time.temporal.TemporalAccessor> . java.util.Optional<java.time.temporal.TemporalAccessor> ( java.time.temporal.TemporalAccessor -> ! boolean || boolean ) . void ( java.time.temporal.TemporalAccessor -> org.springframework.data.auditing.AuditableBeanWrapper . setLastModifiedDate ( java.time.temporal.TemporalAccessor ) ) ; return java.util.Optional<java.time.temporal.TemporalAccessor> ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( java.util.Optional<org.springframework.data.auditing.AuditorAware<?>> == null ) { org.springframework.data.auditing.Logger . debug ( STRING ) ; } }  <METHOD_END>
