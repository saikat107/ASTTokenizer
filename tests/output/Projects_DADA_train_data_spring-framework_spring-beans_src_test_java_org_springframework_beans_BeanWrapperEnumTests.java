<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( CustomEnum . VALUE_1 , org.springframework.beans.GenericBean<> . getCustomEnum ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , null ) ; assertEquals ( null , org.springframework.beans.GenericBean<> . getCustomEnum ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( null , org.springframework.beans.GenericBean<> . getCustomEnum ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getCustomEnumArray ( ) . length ) ; assertEquals ( CustomEnum . VALUE_1 , org.springframework.beans.GenericBean<> . getCustomEnumArray ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getCustomEnumArray ( ) . length ) ; assertEquals ( CustomEnum . VALUE_1 , org.springframework.beans.GenericBean<> . getCustomEnumArray ( ) [ NUMBER ] ) ; assertEquals ( CustomEnum . VALUE_2 , org.springframework.beans.GenericBean<> . getCustomEnumArray ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getCustomEnumArray ( ) . length ) ; assertEquals ( CustomEnum . VALUE_1 , org.springframework.beans.GenericBean<> . getCustomEnumArray ( ) [ NUMBER ] ) ; assertEquals ( CustomEnum . VALUE_2 , org.springframework.beans.GenericBean<> . getCustomEnumArray ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . contains ( CustomEnum . VALUE_1 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . contains ( CustomEnum . VALUE_1 ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . contains ( CustomEnum . VALUE_2 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . contains ( CustomEnum . VALUE_1 ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . contains ( CustomEnum . VALUE_2 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . contains ( CustomEnum . VALUE_1 ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getCustomEnumSet ( ) . contains ( CustomEnum . VALUE_2 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setConversionService ( new DefaultConversionService ( ) ) ; assertNull ( org.springframework.beans.GenericBean<> . getStandardEnumSet ( ) ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getStandardEnumSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getStandardEnumSet ( ) . contains ( CustomEnum . VALUE_1 ) ) ; assertTrue ( org.springframework.beans.GenericBean<> . getStandardEnumSet ( ) . contains ( CustomEnum . VALUE_2 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setAutoGrowNestedPaths ( true ) ; assertNull ( org.springframework.beans.GenericBean<> . getStandardEnumSet ( ) ) ; org.springframework.beans.BeanWrapper . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getStandardEnumSet ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setConversionService ( new DefaultConversionService ( ) ) ; assertNull ( org.springframework.beans.GenericBean<> . getStandardEnumMap ( ) ) ; java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.LinkedHashMap<java.lang.String,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Integer> ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getStandardEnumMap ( ) . size ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<> . getStandardEnumMap ( ) . get ( CustomEnum . VALUE_1 ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<> . getStandardEnumMap ( ) . get ( CustomEnum . VALUE_2 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericBean < ? > org.springframework.beans.GenericBean<?> = new GenericBean <> ( ) ; BeanWrapper org.springframework.beans.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.GenericBean<> ) ; org.springframework.beans.BeanWrapper . setAutoGrowNestedPaths ( true ) ; assertNull ( org.springframework.beans.GenericBean<> . getStandardEnumMap ( ) ) ; org.springframework.beans.BeanWrapper . setPropertyValue ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.beans.GenericBean<> . getStandardEnumMap ( ) . size ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.GenericBean<> . getStandardEnumMap ( ) . get ( CustomEnum . VALUE_1 ) ) ; }  <METHOD_END>
