<METHOD_START> @ Test ( expected = MessageTimeoutException .class ) public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.RequestReplyScenariosWithCachedConsumersTests> ( ) ) ; try { RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , RequestReplyExchanger .class ) ; CachingConnectionFactory org.springframework.integration.jms.request_reply.CachingConnectionFactory = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( CachingConnectionFactory .class ) ; final JmsTemplate org.springframework.integration.jms.request_reply.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.request_reply.CachingConnectionFactory ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; new java.lang.Thread ( ( ) { final Message org.springframework.integration.jms.request_reply.Message = org.springframework.integration.jms.request_reply.JmsTemplate . receive ( org.springframework.integration.jms.request_reply.Destination ) ; org.springframework.integration.jms.request_reply.JmsTemplate . send ( org.springframework.integration.jms.request_reply.Destination , ( MessageCreator ) session -> { TextMessage message = session . createTextMessage ( ) ; message . setText ( STRING ) ; message . setJMSCorrelationID ( requestMessage . getJMSMessageID ( ) ) ; return message ; } ) ; } ) . void ( ) ; org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) ; } finally { org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.RequestReplyScenariosWithCachedConsumersTests> ( ) ) ; try { RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , RequestReplyExchanger .class ) ; CachingConnectionFactory org.springframework.integration.jms.request_reply.CachingConnectionFactory = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( CachingConnectionFactory .class ) ; final JmsTemplate org.springframework.integration.jms.request_reply.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.request_reply.CachingConnectionFactory ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; new java.lang.Thread ( ( ) { final Message org.springframework.integration.jms.request_reply.Message = org.springframework.integration.jms.request_reply.JmsTemplate . receive ( org.springframework.integration.jms.request_reply.Destination ) ; org.springframework.integration.jms.request_reply.JmsTemplate . send ( org.springframework.integration.jms.request_reply.Destination , ( MessageCreator ) session -> { TextMessage message = session . createTextMessage ( ) ; message . setText ( STRING ) ; message . setJMSCorrelationID ( requestMessage . getJMSMessageID ( ) ) ; return message ; } ) ; } ) . void ( ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > siReplyMessage = org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , siReplyMessage . getPayload ( ) ) ; } finally { org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.RequestReplyScenariosWithCachedConsumersTests> ( ) ) ; try { RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , RequestReplyExchanger .class ) ; CachingConnectionFactory org.springframework.integration.jms.request_reply.CachingConnectionFactory = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( CachingConnectionFactory .class ) ; final JmsTemplate org.springframework.integration.jms.request_reply.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.request_reply.CachingConnectionFactory ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; new java.lang.Thread ( ( ) { final Message org.springframework.integration.jms.request_reply.Message = org.springframework.integration.jms.request_reply.JmsTemplate . receive ( org.springframework.integration.jms.request_reply.Destination ) ; org.springframework.integration.jms.request_reply.JmsTemplate . send ( org.springframework.integration.jms.request_reply.Destination , ( MessageCreator ) session -> { TextMessage message = session . createTextMessage ( ) ; message . setText ( STRING ) ; message . setJMSCorrelationID ( requestMessage . getJMSCorrelationID ( ) ) ; return message ; } ) ; } ) . void ( ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > siReplyMessage = org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , siReplyMessage . getPayload ( ) ) ; } finally { org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageTimeoutException .class ) public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.RequestReplyScenariosWithCachedConsumersTests> ( ) ) ; try { RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , RequestReplyExchanger .class ) ; CachingConnectionFactory org.springframework.integration.jms.request_reply.CachingConnectionFactory = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( CachingConnectionFactory .class ) ; final JmsTemplate org.springframework.integration.jms.request_reply.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.request_reply.CachingConnectionFactory ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; new java.lang.Thread ( ( ) { final Message org.springframework.integration.jms.request_reply.Message = org.springframework.integration.jms.request_reply.JmsTemplate . receive ( org.springframework.integration.jms.request_reply.Destination ) ; org.springframework.integration.jms.request_reply.JmsTemplate . send ( org.springframework.integration.jms.request_reply.Destination , ( MessageCreator ) session -> { TextMessage message = session . createTextMessage ( ) ; message . setText ( STRING ) ; message . setJMSCorrelationID ( requestMessage . getJMSCorrelationID ( ) ) ; return message ; } ) ; } ) . void ( ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > siReplyMessage = org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , siReplyMessage . getPayload ( ) ) ; } finally { org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ActiveMqTestUtils . prepare ( ) ; ClassPathXmlApplicationContext org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.jms.request_reply.RequestReplyScenariosWithCachedConsumersTests> ( ) ) ; try { RequestReplyExchanger org.springframework.integration.jms.request_reply.RequestReplyExchanger = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , RequestReplyExchanger .class ) ; final ConnectionFactory org.springframework.integration.jms.request_reply.ConnectionFactory = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , ConnectionFactory .class ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; final Destination org.springframework.integration.jms.request_reply.Destination = org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { try { org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; new java.lang.Thread ( ( ) { DefaultMessageListenerContainer org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer = new DefaultMessageListenerContainer ( ) ; org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer . setConnectionFactory ( org.springframework.integration.jms.request_reply.ConnectionFactory ) ; org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer . setDestination ( org.springframework.integration.jms.request_reply.Destination ) ; org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer . setMessageListener ( ( SessionAwareMessageListener < Message > ) ( message , session ) -> { String requestPayload = ( String ) extractPayload ( message ) ; try { TextMessage replyMessage = session . createTextMessage ( ) ; replyMessage . setText ( requestPayload ) ; replyMessage . setJMSCorrelationID ( message . getJMSCorrelationID ( ) ) ; MessageProducer producer = session . createProducer ( replyDestination ) ; producer . send ( replyMessage ) ; } catch ( Exception e ) { } } ) ; org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer . afterPropertiesSet ( ) ; org.springframework.integration.jms.request_reply.DefaultMessageListenerContainer . start ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; TestUtils . getPropertyValue ( org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . getBean ( STRING ) , STRING , JmsOutboundGateway .class ) . setReceiveTimeout ( NUMBER ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.jms.request_reply.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) . getPayload ( ) ) ; } finally { org.springframework.integration.jms.request_reply.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message org.springframework.integration.jms.request_reply.Message ) { try { return org.springframework.integration.jms.request_reply.SimpleMessageConverter . fromMessage ( org.springframework.integration.jms.request_reply.Message ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; fail ( ) ; } return null ; }  <METHOD_END>
