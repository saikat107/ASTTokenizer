<METHOD_START> @ Before public void void ( ) { org.springframework.data.jpa.repository.support.User = new User ( STRING , STRING , STRING ) ; org.springframework.data.jpa.repository.support.EntityManager . persist ( org.springframework.data.jpa.repository.support.User ) ; org.springframework.data.jpa.repository.support.User = new User ( STRING , STRING , STRING ) ; org.springframework.data.jpa.repository.support.EntityManager . persist ( org.springframework.data.jpa.repository.support.User ) ; org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepositoryImpl org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepositoryImpl = new org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepositoryImpl ( ) ; org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepositoryImpl . void ( org.springframework.data.jpa.repository.support.EntityManager ) ; org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepositoryImpl . validate ( ) ; this . org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepository = org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepositoryImpl ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.jpa.repository.support.User> < User > java.util.List<org.springframework.data.jpa.repository.support.User> = org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepository . java.util.List<org.springframework.data.jpa.repository.support.User> ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.support.User ) ) ; java.util.List<org.springframework.data.jpa.repository.support.User> = org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepository . java.util.List<org.springframework.data.jpa.repository.support.User> ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.support.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepository . long ( STRING ) ; assertThat ( long , is ( NUMBER ) ) ; java.util.List<org.springframework.data.jpa.repository.support.User> < User > java.util.List<org.springframework.data.jpa.repository.support.User> = org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepository . java.util.List<org.springframework.data.jpa.repository.support.User> ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> . size ( ) , is ( NUMBER ) ) ; java.util.List<org.springframework.data.jpa.repository.support.User> = org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepository . java.util.List<org.springframework.data.jpa.repository.support.User> ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> . size ( ) , is ( NUMBER ) ) ; java.util.List<org.springframework.data.jpa.repository.support.User> = org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepository . java.util.List<org.springframework.data.jpa.repository.support.User> ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> , hasItems ( org.springframework.data.jpa.repository.support.User , org.springframework.data.jpa.repository.support.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepository . long ( STRING ) ; assertThat ( long , is ( NUMBER ) ) ; java.util.List<org.springframework.data.jpa.repository.support.User> < User > java.util.List<org.springframework.data.jpa.repository.support.User> = org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepository . java.util.List<org.springframework.data.jpa.repository.support.User> ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> . size ( ) , is ( NUMBER ) ) ; java.util.List<org.springframework.data.jpa.repository.support.User> = org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepository . java.util.List<org.springframework.data.jpa.repository.support.User> ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.support.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.support.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepositoryImpl org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepositoryImpl = new org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepositoryImpl ( ) ; org.springframework.data.jpa.repository.support.QuerydslRepositorySupportTests.UserRepositoryImpl . validate ( ) ; }  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.jpa.repository.support.User> < User > java.util.List<org.springframework.data.jpa.repository.support.User> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> long long ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> long long ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void ( ) { super( User .class ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ PersistenceContext ( unitName = STRING ) public void void ( EntityManager org.springframework.data.jpa.repository.support.EntityManager ) { super. setEntityManager ( org.springframework.data.jpa.repository.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.jpa.repository.support.User> < User > java.util.List<org.springframework.data.jpa.repository.support.User> ( java.lang.String java.lang.String ) { return from ( org.springframework.data.jpa.repository.support.QUser ) . where ( org.springframework.data.jpa.repository.support.QUser . lastname . eq ( java.lang.String ) ) . fetch ( ) ; }  <METHOD_END>
<METHOD_START> public long long ( java.lang.String java.lang.String ) { return update ( org.springframework.data.jpa.repository.support.QUser ) . set ( org.springframework.data.jpa.repository.support.QUser . lastname , java.lang.String ) . execute ( ) ; }  <METHOD_END>
<METHOD_START> public long long ( java.lang.String java.lang.String ) { return delete ( org.springframework.data.jpa.repository.support.QUser ) . where ( org.springframework.data.jpa.repository.support.QUser . lastname . eq ( java.lang.String ) ) . execute ( ) ; }  <METHOD_END>
