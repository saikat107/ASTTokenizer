<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.data.jpa.repository.support.EntityManagerFactory = org.springframework.data.jpa.repository.support.EntityManagerFactory ( STRING ) ; org.springframework.data.jpa.repository.support.EntityManagerFactory = org.springframework.data.jpa.repository.support.EntityManagerFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.jpa.repository.support.EntityManager = org.springframework.data.jpa.repository.support.EntityManagerFactory . createEntityManager ( ) ; this . org.springframework.data.jpa.repository.support.EntityManager = org.springframework.data.jpa.repository.support.EntityManagerFactory . createEntityManager ( ) ; this . org.springframework.data.jpa.repository.support.JpaContext = new DefaultJpaContext ( new java.util.HashSet<org.springframework.data.jpa.repository.support.EntityManager> < EntityManager > ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.support.EntityManager , org.springframework.data.jpa.repository.support.EntityManager ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.jpa.repository.support.ExpectedException . expectMessage ( java.lang.Object .class . java.lang.String ( ) ) ; org.springframework.data.jpa.repository.support.JpaContext . getEntityManagerByManagedType ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.repository.support.JpaContext . getEntityManagerByManagedType ( Category .class ) , is ( org.springframework.data.jpa.repository.support.EntityManager ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.jpa.repository.support.ExpectedException . expectMessage ( User .class . java.lang.String ( ) ) ; org.springframework.data.jpa.repository.support.JpaContext . getEntityManagerByManagedType ( User .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.jpa.repository.support.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.data.jpa.repository.support.DefaultJpaContextIntegrationTests.Config .class ) ; org.springframework.data.jpa.repository.support.DefaultJpaContextIntegrationTests.ApplicationComponent org.springframework.data.jpa.repository.support.DefaultJpaContextIntegrationTests.ApplicationComponent = org.springframework.data.jpa.repository.support.ConfigurableApplicationContext . getBean ( org.springframework.data.jpa.repository.support.DefaultJpaContextIntegrationTests.ApplicationComponent .class ) ; assertThat ( org.springframework.data.jpa.repository.support.DefaultJpaContextIntegrationTests.ApplicationComponent . org.springframework.data.jpa.repository.support.JpaContext , is ( notNullValue ( ) ) ) ; org.springframework.data.jpa.repository.support.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleNamingContextBuilder org.springframework.data.jpa.repository.support.SimpleNamingContextBuilder = SimpleNamingContextBuilder . emptyActivatedContextBuilder ( ) ; org.springframework.data.jpa.repository.support.SimpleNamingContextBuilder . bind ( STRING , org.springframework.data.jpa.repository.support.EntityManagerFactory ( STRING ) ) ; org.springframework.data.jpa.repository.support.SimpleNamingContextBuilder . bind ( STRING , new java.lang.Object ( ) ) ; ConfigurableApplicationContext org.springframework.data.jpa.repository.support.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; org.springframework.data.jpa.repository.support.DefaultJpaContextIntegrationTests.ApplicationComponent org.springframework.data.jpa.repository.support.DefaultJpaContextIntegrationTests.ApplicationComponent = org.springframework.data.jpa.repository.support.ConfigurableApplicationContext . getBean ( org.springframework.data.jpa.repository.support.DefaultJpaContextIntegrationTests.ApplicationComponent .class ) ; assertThat ( org.springframework.data.jpa.repository.support.DefaultJpaContextIntegrationTests.ApplicationComponent . org.springframework.data.jpa.repository.support.JpaContext , is ( notNullValue ( ) ) ) ; org.springframework.data.jpa.repository.support.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> private static final org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean ( java.lang.String java.lang.String ) { LocalContainerEntityManagerFactoryBean org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean ( ) ; org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean . setPersistenceProvider ( HibernateTestUtils . getPersistenceProvider ( ) ) ; org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean . setDataSource ( new EmbeddedDatabaseBuilder ( ) . setType ( EmbeddedDatabaseType . HSQL ) . build ( ) ) ; org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean . setPersistenceUnitName ( java.lang.String ) ; return org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean ; }  <METHOD_END>
<METHOD_START> private static final org.springframework.data.jpa.repository.support.EntityManagerFactory org.springframework.data.jpa.repository.support.EntityManagerFactory ( java.lang.String java.lang.String ) { LocalContainerEntityManagerFactoryBean org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean = org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean ( java.lang.String ) ; org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean . afterPropertiesSet ( ) ; return org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean ( ) { return org.springframework.data.jpa.repository.support.LocalContainerEntityManagerFactoryBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.jpa.repository.support.JndiObjectFactoryBean org.springframework.data.jpa.repository.support.JndiObjectFactoryBean ( ) javax.naming.NamingException { JndiObjectFactoryBean org.springframework.data.jpa.repository.support.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; org.springframework.data.jpa.repository.support.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.data.jpa.repository.support.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , mock ( javax.sql.DataSource .class ) ) ) ; org.springframework.data.jpa.repository.support.JndiObjectFactoryBean . setExpectedType ( javax.sql.DataSource .class ) ; return org.springframework.data.jpa.repository.support.JndiObjectFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( JpaContext org.springframework.data.jpa.repository.support.JpaContext ) { this . org.springframework.data.jpa.repository.support.JpaContext = org.springframework.data.jpa.repository.support.JpaContext ; }  <METHOD_END>
