<METHOD_START> @ Test ( expected = java.lang.NullPointerException .class ) public void void ( ) { assertNull ( org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Integer> . get ( STRING ) ) ; assertFalse ( org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Integer> . containsKey ( STRING ) ) ; org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Integer> . put ( STRING , NUMBER ) ; assertTrue ( org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Integer> . containsKey ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . java.lang.Integer ( STRING ) . int ( ) ) ; assertFalse ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . boolean ( ) ) ; try { org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Integer> . put ( STRING , null ) ; } finally { assertTrue ( org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Integer> . containsKey ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Integer> . get ( STRING ) . intValue ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . java.lang.Integer ( STRING ) . int ( ) ) ; assertFalse ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . boolean ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . java.lang.Integer ( STRING ) . int ( ) ) ; assertTrue ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . java.lang.Integer ( STRING ) . int ( ) ) ; assertFalse ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . java.lang.Integer ( STRING ) . int ( ) ) ; assertTrue ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . java.lang.Integer ( STRING ) . int ( ) ) ; assertFalse ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . boolean ( ) ) ; assertNull ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . java.lang.Integer ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . boolean ( ) ) ; assertNull ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . java.lang.Integer ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersService . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> public final void void ( final org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository ) { Assert . notNull ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository , STRING ) ; this . org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository = org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository ( ) { Assert . state ( org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository != null , STRING ) ; return org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( STRING ) public java.lang.Integer java.lang.Integer ( final java.lang.String java.lang.String ) { return org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository ( ) . java.lang.Integer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.gemfire.cache.CachingWithGemFireIntegrationTest.NamedNumbersInMemoryRepository ( ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { java.util.Map<java.lang.String,java.lang.Integer> ( ) ; }  <METHOD_END>
<METHOD_START> public final void void ( final java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ) { Assert . notNull ( java.util.Map<java.lang.String,java.lang.Integer> , STRING ) ; this . java.util.Map<java.lang.String,java.lang.Integer> = java.util.Map<java.lang.String,java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ( ) { Assert . state ( java.util.Map<java.lang.String,java.lang.Integer> != null , STRING ) ; return java.util.Map<java.lang.String,java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( final java.lang.String java.lang.String ) { this . boolean = true ; return java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { boolean boolean = this . boolean ; this . boolean = false ; return boolean ; }  <METHOD_END>
