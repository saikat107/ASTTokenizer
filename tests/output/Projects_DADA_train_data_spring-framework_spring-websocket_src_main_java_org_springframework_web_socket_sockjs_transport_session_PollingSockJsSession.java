<METHOD_START> public void ( java.lang.String java.lang.String , SockJsServiceConfig org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig , WebSocketHandler org.springframework.web.socket.sockjs.transport.session.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super( java.lang.String , org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig , org.springframework.web.socket.sockjs.transport.session.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.session.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.transport.session.ServerHttpResponse , boolean boolean ) throws java.io.IOException { if ( boolean ) { void ( SockJsFrame . openFrame ( ) ) ; } else if ( ! getMessageCache ( ) . isEmpty ( ) ) { void ( ) ; } else { scheduleHeartbeat ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.web.socket.sockjs.transport.session.SockJsTransportFailureException { java.lang.String [] java.lang.String[] = new java.lang.String [ getMessageCache ( ) . size ( ) ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String[] [ int ] = getMessageCache ( ) . poll ( ) ; } SockJsMessageCodec org.springframework.web.socket.sockjs.transport.session.SockJsMessageCodec = getSockJsServiceConfig ( ) . getMessageCodec ( ) ; SockJsFrame org.springframework.web.socket.sockjs.transport.session.SockJsFrame = SockJsFrame . messageFrame ( org.springframework.web.socket.sockjs.transport.session.SockJsMessageCodec , java.lang.String[] ) ; void ( org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( SockJsFrame org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) throws org.springframework.web.socket.sockjs.transport.session.SockJsTransportFailureException { super. writeFrame ( org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) ; resetRequest ( ) ; }  <METHOD_END>
