<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( DirectChannel .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( EventDrivenConsumer .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; MessageHandler org.springframework.integration.amqp.config.MessageHandler = TestUtils . getPropertyValue ( java.lang.Object , STRING , MessageHandler .class ) ; assertTrue ( org.springframework.integration.amqp.config.MessageHandler instanceof NamedComponent ) ; assertEquals ( STRING , ( ( NamedComponent ) org.springframework.integration.amqp.config.MessageHandler ) . getComponentType ( ) ) ; org.springframework.integration.amqp.config.MessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.MessageHandler , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; AmqpOutboundEndpoint org.springframework.integration.amqp.config.AmqpOutboundEndpoint = TestUtils . getPropertyValue ( java.lang.Object , STRING , AmqpOutboundEndpoint .class ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , java.lang.Boolean .class ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , org . springframework . org.springframework.expression . org.springframework.expression .class ) . getExpressionString ( ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , java.lang.Boolean .class ) ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( AmqpOutboundEndpoint .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; RabbitTemplate org.springframework.integration.amqp.config.RabbitTemplate = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , RabbitTemplate .class ) ; org.springframework.integration.amqp.config.RabbitTemplate = Mockito . spy ( org.springframework.integration.amqp.config.RabbitTemplate ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; Mockito . doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; org . springframework . amqp . core . Message amqpMessage = ( org . springframework . amqp . core . Message ) args [ NUMBER ] ; MessageProperties properties = amqpMessage . getMessageProperties ( ) ; assertEquals ( STRING , properties . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , properties . getHeaders ( ) . get ( STRING ) ) ; assertNull ( properties . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( shouldBePersistent . get ( ) ? MessageDeliveryMode . PERSISTENT : MessageDeliveryMode . NON_PERSISTENT , properties . getDeliveryMode ( ) ) ; return null ; } ) . when ( org.springframework.integration.amqp.config.RabbitTemplate ) . send ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , Mockito . any ( CorrelationData .class ) ) ; ReflectionUtils . setField ( java.lang.reflect.Field , org.springframework.integration.amqp.config.AmqpOutboundEndpoint , org.springframework.integration.amqp.config.RabbitTemplate ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.amqp.config.MessageChannel . send ( org.springframework.integration.amqp.config.Message<> ) ; Mockito . verify ( org.springframework.integration.amqp.config.RabbitTemplate , Mockito . times ( NUMBER ) ) . send ( anyString ( ) , isNull ( ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; org.springframework.integration.amqp.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . setHeader ( AmqpHeaders . DELIVERY_MODE , MessageDeliveryMode . PERSISTENT ) . build ( ) ; org.springframework.integration.amqp.config.MessageChannel . send ( org.springframework.integration.amqp.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; AmqpOutboundEndpoint org.springframework.integration.amqp.config.AmqpOutboundEndpoint = TestUtils . getPropertyValue ( java.lang.Object , STRING , AmqpOutboundEndpoint .class ) ; NullChannel org.springframework.integration.amqp.config.NullChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( NullChannel .class ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; assertSame ( org.springframework.integration.amqp.config.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING ) ) ; assertSame ( org.springframework.integration.amqp.config.NullChannel , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; java.util.List java.util.List = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.List .class ) ; AmqpOutboundEndpoint org.springframework.integration.amqp.config.AmqpOutboundEndpoint = ( AmqpOutboundEndpoint ) java.util.List . java.lang.Object ( NUMBER ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING ) ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( AmqpOutboundEndpoint .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; RabbitTemplate org.springframework.integration.amqp.config.RabbitTemplate = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , RabbitTemplate .class ) ; org.springframework.integration.amqp.config.RabbitTemplate = Mockito . spy ( org.springframework.integration.amqp.config.RabbitTemplate ) ; Mockito . doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; org . springframework . amqp . core . Message amqpMessage = ( org . springframework . amqp . core . Message ) args [ NUMBER ] ; MessageProperties properties = amqpMessage . getMessageProperties ( ) ; assertEquals ( STRING , new String ( amqpMessage . getBody ( ) ) ) ; assertEquals ( MessageDeliveryMode . PERSISTENT , properties . getDeliveryMode ( ) ) ; return null ; } ) . when ( org.springframework.integration.amqp.config.RabbitTemplate ) . send ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , Mockito . any ( CorrelationData .class ) ) ; ReflectionUtils . setField ( java.lang.reflect.Field , org.springframework.integration.amqp.config.AmqpOutboundEndpoint , org.springframework.integration.amqp.config.RabbitTemplate ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.amqp.config.MessageChannel . send ( org.springframework.integration.amqp.config.Message<> ) ; Mockito . verify ( org.springframework.integration.amqp.config.RabbitTemplate , Mockito . times ( NUMBER ) ) . send ( Mockito . any ( java.lang.String .class ) , isNull ( ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.amqp.config.AmqpOutboundChannelAdapterParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.integration.amqp.config.BeansException ) { assertTrue ( org.springframework.integration.amqp.config.BeansException instanceof BeanDefinitionParsingException ) ; assertTrue ( org.springframework.integration.amqp.config.BeansException . getMessage ( ) . contains ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ConnectionFactory org.springframework.integration.amqp.config.ConnectionFactory = org.springframework.integration.amqp.config.ApplicationContext . getBean ( ConnectionFactory .class ) ; Connection org.springframework.integration.amqp.config.Connection = mock ( Connection .class ) ; Channel org.springframework.integration.amqp.config.Channel = mock ( Channel .class ) ; when ( org.springframework.integration.amqp.config.ConnectionFactory . createConnection ( ) ) . thenReturn ( org.springframework.integration.amqp.config.Connection ) ; PublisherCallbackChannelImpl org.springframework.integration.amqp.config.PublisherCallbackChannelImpl = new PublisherCallbackChannelImpl ( org.springframework.integration.amqp.config.Channel ) ; when ( org.springframework.integration.amqp.config.Connection . createChannel ( false ) ) . thenReturn ( org.springframework.integration.amqp.config.PublisherCallbackChannelImpl ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.amqp.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Mockito . verify ( org.springframework.integration.amqp.config.Channel , Mockito . times ( NUMBER ) ) . basicPublish ( Mockito . eq ( STRING ) , Mockito . eq ( STRING ) , Mockito . anyBoolean ( ) , Mockito . any ( BasicProperties .class ) , Mockito . any ( byte [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ConnectionFactory org.springframework.integration.amqp.config.ConnectionFactory = org.springframework.integration.amqp.config.ApplicationContext . getBean ( ConnectionFactory .class ) ; Connection org.springframework.integration.amqp.config.Connection = mock ( Connection .class ) ; Channel org.springframework.integration.amqp.config.Channel = mock ( Channel .class ) ; when ( org.springframework.integration.amqp.config.ConnectionFactory . createConnection ( ) ) . thenReturn ( org.springframework.integration.amqp.config.Connection ) ; PublisherCallbackChannelImpl org.springframework.integration.amqp.config.PublisherCallbackChannelImpl = new PublisherCallbackChannelImpl ( org.springframework.integration.amqp.config.Channel ) ; when ( org.springframework.integration.amqp.config.Connection . createChannel ( false ) ) . thenReturn ( org.springframework.integration.amqp.config.PublisherCallbackChannelImpl ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.amqp.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Mockito . verify ( org.springframework.integration.amqp.config.Channel , Mockito . times ( NUMBER ) ) . basicPublish ( Mockito . eq ( STRING ) , Mockito . eq ( STRING ) , Mockito . anyBoolean ( ) , Mockito . any ( BasicProperties .class ) , Mockito . any ( byte [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ConnectionFactory org.springframework.integration.amqp.config.ConnectionFactory = org.springframework.integration.amqp.config.ApplicationContext . getBean ( ConnectionFactory .class ) ; Connection org.springframework.integration.amqp.config.Connection = mock ( Connection .class ) ; Channel org.springframework.integration.amqp.config.Channel = mock ( Channel .class ) ; when ( org.springframework.integration.amqp.config.ConnectionFactory . createConnection ( ) ) . thenReturn ( org.springframework.integration.amqp.config.Connection ) ; PublisherCallbackChannelImpl org.springframework.integration.amqp.config.PublisherCallbackChannelImpl = new PublisherCallbackChannelImpl ( org.springframework.integration.amqp.config.Channel ) ; when ( org.springframework.integration.amqp.config.Connection . createChannel ( false ) ) . thenReturn ( org.springframework.integration.amqp.config.PublisherCallbackChannelImpl ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.amqp.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Mockito . verify ( org.springframework.integration.amqp.config.Channel , Mockito . times ( NUMBER ) ) . basicPublish ( Mockito . eq ( STRING ) , Mockito . eq ( STRING ) , Mockito . anyBoolean ( ) , Mockito . any ( BasicProperties .class ) , Mockito . any ( byte [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.amqp.config.AmqpOutboundChannelAdapterParserTests> ( ) ) . close ( ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.amqp.config.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.amqp.config.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AmqpHeaderMapper org.springframework.integration.amqp.config.AmqpHeaderMapper = TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.config.MessageHandler , STRING , AmqpHeaderMapper .class ) ; assertSame ( this . org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) , org.springframework.integration.amqp.config.AmqpHeaderMapper ) ; assertTrue ( TestUtils . getPropertyValue ( this . org.springframework.integration.amqp.config.MessageHandler , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RabbitTemplate org.springframework.integration.amqp.config.RabbitTemplate = spy ( new RabbitTemplate ( ) ) ; ConnectionFactory org.springframework.integration.amqp.config.ConnectionFactory = mock ( ConnectionFactory .class ) ; java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( STRING ) ; doThrow ( java.lang.RuntimeException ) . when ( org.springframework.integration.amqp.config.ConnectionFactory ) . createConnection ( ) ; when ( org.springframework.integration.amqp.config.RabbitTemplate . getConnectionFactory ( ) ) . thenReturn ( org.springframework.integration.amqp.config.ConnectionFactory ) ; AmqpOutboundEndpoint org.springframework.integration.amqp.config.AmqpOutboundEndpoint = new AmqpOutboundEndpoint ( org.springframework.integration.amqp.config.RabbitTemplate ) ; Log org.springframework.integration.amqp.config.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , Log .class ) ) ; new DirectFieldAccessor ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint ) . setPropertyValue ( STRING , org.springframework.integration.amqp.config.Log ) ; doAnswer ( new DoesNothing ( ) ) . when ( org.springframework.integration.amqp.config.Log ) . error ( STRING , java.lang.RuntimeException ) ; ApplicationContext org.springframework.integration.amqp.config.ApplicationContext = mock ( ApplicationContext .class ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . setApplicationContext ( org.springframework.integration.amqp.config.ApplicationContext ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . setBeanFactory ( org.springframework.integration.amqp.config.ApplicationContext ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . afterPropertiesSet ( ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . start ( ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . stop ( ) ; verify ( org.springframework.integration.amqp.config.Log , never ( ) ) . error ( anyString ( ) , any ( java.lang.RuntimeException .class ) ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . setLazyConnect ( false ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . start ( ) ; verify ( org.springframework.integration.amqp.config.Log ) . error ( STRING , java.lang.RuntimeException ) ; org.springframework.integration.amqp.config.AmqpOutboundEndpoint . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.amqp.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.amqp.config.Message<?> ) throws java.lang.Exception { int ++ ; return null ; }  <METHOD_END>
