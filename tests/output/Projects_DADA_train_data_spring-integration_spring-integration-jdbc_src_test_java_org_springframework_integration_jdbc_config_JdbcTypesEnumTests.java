<METHOD_START> @ Test public void void ( ) { JdbcTypesEnum org.springframework.integration.jdbc.config.JdbcTypesEnum = JdbcTypesEnum . convertToJdbcTypesEnum ( STRING ) ; assertNotNull ( STRING , org.springframework.integration.jdbc.config.JdbcTypesEnum ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( java.sql.Types . int ) , java.lang.Integer . java.lang.Integer ( org.springframework.integration.jdbc.config.JdbcTypesEnum . getCode ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcTypesEnum org.springframework.integration.jdbc.config.JdbcTypesEnum = JdbcTypesEnum . convertToJdbcTypesEnum ( STRING ) ; assertNull ( STRING , org.springframework.integration.jdbc.config.JdbcTypesEnum ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { JdbcTypesEnum . convertToJdbcTypesEnum ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { JdbcTypesEnum . convertToJdbcTypesEnum ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
