<METHOD_START> @ Before public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( java.lang.String ) ; org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( java.lang.String ) ; org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.core.env.ConfigurableApplicationContext = new GenericApplicationContext ( org.springframework.core.env.DefaultListableBeanFactory ( ) ) ; org.springframework.core.env.ConfigurableApplicationContext . refresh ( ) ; void ( org.springframework.core.env.ConfigurableApplicationContext ) ; void ( org.springframework.core.env.ConfigurableApplicationContext ) ; void ( org.springframework.core.env.ConfigurableApplicationContext , org.springframework.core.env.ConfigurableApplicationContext . getEnvironment ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.core.env.GenericApplicationContext = new GenericApplicationContext ( org.springframework.core.env.DefaultListableBeanFactory ( ) ) ; org.springframework.core.env.GenericApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.GenericApplicationContext . refresh ( ) ; void ( org.springframework.core.env.GenericApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; void ( org.springframework.core.env.GenericApplicationContext ) ; void ( org.springframework.core.env.GenericApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.core.env.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.core.env.GenericApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; new XmlBeanDefinitionReader ( org.springframework.core.env.GenericApplicationContext ) . loadBeanDefinitions ( java.lang.String ) ; org.springframework.core.env.GenericApplicationContext . refresh ( ) ; assertThat ( org.springframework.core.env.GenericApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( org.springframework.core.env.GenericApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.core.env.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.core.env.GenericApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; new AnnotatedBeanDefinitionReader ( org.springframework.core.env.GenericApplicationContext ) . register ( org.springframework.core.env.EnvironmentSystemIntegrationTests.Config .class ) ; org.springframework.core.env.GenericApplicationContext . refresh ( ) ; assertThat ( org.springframework.core.env.GenericApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( org.springframework.core.env.GenericApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.core.env.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.core.env.GenericApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; ClassPathBeanDefinitionScanner org.springframework.core.env.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.core.env.GenericApplicationContext ) ; org.springframework.core.env.ClassPathBeanDefinitionScanner . scan ( STRING ) ; org.springframework.core.env.GenericApplicationContext . refresh ( ) ; assertThat ( org.springframework.core.env.GenericApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( org.springframework.core.env.GenericApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.core.env.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.core.env.GenericApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; ClassPathBeanDefinitionScanner org.springframework.core.env.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.core.env.GenericApplicationContext ) ; org.springframework.core.env.ClassPathBeanDefinitionScanner . scan ( STRING ) ; org.springframework.core.env.GenericApplicationContext . refresh ( ) ; assertThat ( org.springframework.core.env.ClassPathBeanDefinitionScanner . getEnvironment ( ) , is ( ( Environment ) org.springframework.core.env.GenericApplicationContext . getEnvironment ( ) ) ) ; assertThat ( org.springframework.core.env.GenericApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( org.springframework.core.env.GenericApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericXmlApplicationContext org.springframework.core.env.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; void ( org.springframework.core.env.GenericXmlApplicationContext ) ; org.springframework.core.env.GenericXmlApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.GenericXmlApplicationContext . load ( java.lang.String ) ; org.springframework.core.env.GenericXmlApplicationContext . refresh ( ) ; void ( org.springframework.core.env.GenericXmlApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; void ( org.springframework.core.env.GenericXmlApplicationContext ) ; void ( org.springframework.core.env.GenericXmlApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; assertThat ( org.springframework.core.env.GenericXmlApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( org.springframework.core.env.GenericXmlApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.core.env.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; org.springframework.core.env.ConfigurableApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.ConfigurableApplicationContext . refresh ( ) ; void ( org.springframework.core.env.ConfigurableApplicationContext ) ; void ( org.springframework.core.env.ConfigurableApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; void ( org.springframework.core.env.ConfigurableApplicationContext , org.springframework.core.env.ConfigurableApplicationContext . getEnvironment ( ) ) ; assertThat ( org.springframework.core.env.ConfigurableApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( org.springframework.core.env.ConfigurableApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ClassPathResource org.springframework.core.env.ClassPathResource = new ClassPathResource ( java.lang.String ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; FileCopyUtils . copy ( org.springframework.core.env.ClassPathResource . getFile ( ) , java.io.File ) ; ConfigurableApplicationContext org.springframework.core.env.ConfigurableApplicationContext = new FileSystemXmlApplicationContext ( new java.lang.String [] { STRING + java.io.File . java.lang.String ( ) } , false ) ; org.springframework.core.env.ConfigurableApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.ConfigurableApplicationContext . refresh ( ) ; void ( org.springframework.core.env.ConfigurableApplicationContext ) ; void ( org.springframework.core.env.ConfigurableApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; void ( org.springframework.core.env.ConfigurableApplicationContext , org.springframework.core.env.ConfigurableApplicationContext . getEnvironment ( ) ) ; assertThat ( org.springframework.core.env.ConfigurableApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( org.springframework.core.env.ConfigurableApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.core.env.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; void ( org.springframework.core.env.AnnotationConfigApplicationContext ) ; org.springframework.core.env.AnnotationConfigApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.AnnotationConfigApplicationContext . register ( org.springframework.core.env.EnvironmentSystemIntegrationTests.EnvironmentAwareBean .class ) ; org.springframework.core.env.AnnotationConfigApplicationContext . refresh ( ) ; void ( org.springframework.core.env.AnnotationConfigApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.core.env.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; void ( org.springframework.core.env.AnnotationConfigApplicationContext ) ; org.springframework.core.env.AnnotationConfigApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.AnnotationConfigApplicationContext . register ( org.springframework.core.env.EnvironmentSystemIntegrationTests.ProdConfig .class ) ; org.springframework.core.env.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.core.env.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; void ( org.springframework.core.env.AnnotationConfigApplicationContext ) ; org.springframework.core.env.AnnotationConfigApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.AnnotationConfigApplicationContext . register ( org.springframework.core.env.EnvironmentSystemIntegrationTests.DevConfig .class ) ; org.springframework.core.env.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.core.env.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; void ( org.springframework.core.env.AnnotationConfigApplicationContext ) ; org.springframework.core.env.AnnotationConfigApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.AnnotationConfigApplicationContext . register ( org.springframework.core.env.EnvironmentSystemIntegrationTests.DevConfig .class ) ; org.springframework.core.env.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.core.env.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; void ( org.springframework.core.env.AnnotationConfigApplicationContext ) ; org.springframework.core.env.AnnotationConfigApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.AnnotationConfigApplicationContext . register ( org.springframework.core.env.EnvironmentSystemIntegrationTests.Config .class ) ; org.springframework.core.env.AnnotationConfigApplicationContext . refresh ( ) ; void ( org.springframework.core.env.AnnotationConfigApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.core.env.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; StandardEnvironment org.springframework.core.env.StandardEnvironment = new StandardEnvironment ( ) ; org.springframework.core.env.StandardEnvironment . setActiveProfiles ( java.lang.String ) ; org.springframework.core.env.AnnotationConfigApplicationContext . setEnvironment ( org.springframework.core.env.StandardEnvironment ) ; org.springframework.core.env.AnnotationConfigApplicationContext . register ( org.springframework.core.env.EnvironmentSystemIntegrationTests.DerivedDevConfig .class ) ; org.springframework.core.env.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.core.env.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.core.env.AnnotationConfigApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.AnnotationConfigApplicationContext . register ( org.springframework.core.env.EnvironmentSystemIntegrationTests.DerivedDevConfig .class ) ; org.springframework.core.env.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( STRING , org.springframework.core.env.AnnotationConfigApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericWebApplicationContext org.springframework.core.env.GenericWebApplicationContext = new GenericWebApplicationContext ( org.springframework.core.env.DefaultListableBeanFactory ( ) ) ; void ( org.springframework.core.env.GenericWebApplicationContext ) ; org.springframework.core.env.GenericWebApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.GenericWebApplicationContext . refresh ( ) ; void ( org.springframework.core.env.GenericWebApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; void ( org.springframework.core.env.GenericWebApplicationContext ) ; void ( org.springframework.core.env.GenericWebApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractRefreshableWebApplicationContext org.springframework.core.env.AbstractRefreshableWebApplicationContext = new XmlWebApplicationContext ( ) ; org.springframework.core.env.AbstractRefreshableWebApplicationContext . setConfigLocation ( STRING + java.lang.String ) ; org.springframework.core.env.AbstractRefreshableWebApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.AbstractRefreshableWebApplicationContext . refresh ( ) ; void ( org.springframework.core.env.AbstractRefreshableWebApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; void ( org.springframework.core.env.AbstractRefreshableWebApplicationContext ) ; void ( org.springframework.core.env.AbstractRefreshableWebApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; assertThat ( org.springframework.core.env.AbstractRefreshableWebApplicationContext . containsBean ( java.lang.String ) , is ( false ) ) ; assertThat ( org.springframework.core.env.AbstractRefreshableWebApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.core.env.StaticApplicationContext = new StaticApplicationContext ( ) ; void ( org.springframework.core.env.StaticApplicationContext ) ; void ( org.springframework.core.env.StaticApplicationContext ) ; org.springframework.core.env.StaticApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.StaticApplicationContext . refresh ( ) ; void ( org.springframework.core.env.StaticApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; void ( org.springframework.core.env.StaticApplicationContext ) ; void ( org.springframework.core.env.StaticApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticWebApplicationContext org.springframework.core.env.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; void ( org.springframework.core.env.StaticWebApplicationContext ) ; void ( org.springframework.core.env.StaticWebApplicationContext ) ; org.springframework.core.env.StaticWebApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.StaticWebApplicationContext . refresh ( ) ; void ( org.springframework.core.env.StaticWebApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; void ( org.springframework.core.env.StaticWebApplicationContext ) ; void ( org.springframework.core.env.StaticWebApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigWebApplicationContext org.springframework.core.env.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.core.env.AnnotationConfigWebApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.AnnotationConfigWebApplicationContext . setConfigLocation ( org.springframework.core.env.EnvironmentSystemIntegrationTests.EnvironmentAwareBean .class . java.lang.String ( ) ) ; org.springframework.core.env.AnnotationConfigWebApplicationContext . refresh ( ) ; void ( org.springframework.core.env.AnnotationConfigWebApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; void ( org.springframework.core.env.AnnotationConfigWebApplicationContext ) ; void ( org.springframework.core.env.AnnotationConfigWebApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.core.env.MockServletContext = new MockServletContext ( ) ; org.springframework.core.env.MockServletContext . addInitParameter ( STRING , STRING ) ; org.springframework.core.env.MockServletContext . addInitParameter ( STRING , STRING ) ; MockServletConfig org.springframework.core.env.MockServletConfig = new MockServletConfig ( org.springframework.core.env.MockServletContext ) ; org.springframework.core.env.MockServletConfig . addInitParameter ( STRING , STRING ) ; org.springframework.core.env.MockServletConfig . addInitParameter ( STRING , STRING ) ; AbstractRefreshableWebApplicationContext org.springframework.core.env.AbstractRefreshableWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.core.env.AbstractRefreshableWebApplicationContext . setConfigLocation ( org.springframework.core.env.EnvironmentSystemIntegrationTests.EnvironmentAwareBean .class . java.lang.String ( ) ) ; org.springframework.core.env.AbstractRefreshableWebApplicationContext . setServletConfig ( org.springframework.core.env.MockServletConfig ) ; org.springframework.core.env.AbstractRefreshableWebApplicationContext . refresh ( ) ; ConfigurableEnvironment org.springframework.core.env.ConfigurableEnvironment = org.springframework.core.env.AbstractRefreshableWebApplicationContext . getEnvironment ( ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment , instanceOf ( StandardServletEnvironment .class ) ) ; MutablePropertySources org.springframework.core.env.MutablePropertySources = org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( StandardServletEnvironment . SERVLET_CONTEXT_PROPERTY_SOURCE_NAME ) , is ( true ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( StandardServletEnvironment . SERVLET_CONFIG_PROPERTY_SOURCE_NAME ) , is ( true ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardServletEnvironment . SERVLET_CONFIG_PROPERTY_SOURCE_NAME ) ) , lessThan ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardServletEnvironment . SERVLET_CONTEXT_PROPERTY_SOURCE_NAME ) ) ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardServletEnvironment . SERVLET_CONFIG_PROPERTY_SOURCE_NAME ) ) , lessThan ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME ) ) ) ) ; MockPropertySource org.springframework.core.env.MockPropertySource = new MockPropertySource ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME ) ; org.springframework.core.env.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.core.env.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.core.env.MutablePropertySources . replace ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME , org.springframework.core.env.MockPropertySource ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.core.env.MockServletContext = new MockServletContext ( ) ; org.springframework.core.env.MockServletContext . addInitParameter ( STRING , STRING ) ; org.springframework.core.env.MockServletContext . addInitParameter ( STRING , STRING ) ; GenericWebApplicationContext org.springframework.core.env.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; org.springframework.core.env.GenericWebApplicationContext . setServletContext ( org.springframework.core.env.MockServletContext ) ; org.springframework.core.env.GenericWebApplicationContext . refresh ( ) ; ConfigurableEnvironment org.springframework.core.env.ConfigurableEnvironment = org.springframework.core.env.GenericWebApplicationContext . getEnvironment ( ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment , instanceOf ( StandardServletEnvironment .class ) ) ; MutablePropertySources org.springframework.core.env.MutablePropertySources = org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( StandardServletEnvironment . SERVLET_CONTEXT_PROPERTY_SOURCE_NAME ) , is ( true ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardServletEnvironment . SERVLET_CONTEXT_PROPERTY_SOURCE_NAME ) ) , lessThan ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME ) ) ) ) ; MockPropertySource org.springframework.core.env.MockPropertySource = new MockPropertySource ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME ) ; org.springframework.core.env.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.core.env.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.core.env.MutablePropertySources . replace ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME , org.springframework.core.env.MockPropertySource ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.core.env.MockServletContext = new MockServletContext ( ) ; org.springframework.core.env.MockServletContext . addInitParameter ( STRING , STRING ) ; org.springframework.core.env.MockServletContext . addInitParameter ( STRING , STRING ) ; MockServletConfig org.springframework.core.env.MockServletConfig = new MockServletConfig ( org.springframework.core.env.MockServletContext ) ; org.springframework.core.env.MockServletConfig . addInitParameter ( STRING , STRING ) ; org.springframework.core.env.MockServletConfig . addInitParameter ( STRING , STRING ) ; StaticWebApplicationContext org.springframework.core.env.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.core.env.StaticWebApplicationContext . setServletConfig ( org.springframework.core.env.MockServletConfig ) ; org.springframework.core.env.StaticWebApplicationContext . refresh ( ) ; ConfigurableEnvironment org.springframework.core.env.ConfigurableEnvironment = org.springframework.core.env.StaticWebApplicationContext . getEnvironment ( ) ; MutablePropertySources org.springframework.core.env.MutablePropertySources = org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( StandardServletEnvironment . SERVLET_CONTEXT_PROPERTY_SOURCE_NAME ) , is ( true ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . contains ( StandardServletEnvironment . SERVLET_CONFIG_PROPERTY_SOURCE_NAME ) , is ( true ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardServletEnvironment . SERVLET_CONFIG_PROPERTY_SOURCE_NAME ) ) , lessThan ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardServletEnvironment . SERVLET_CONTEXT_PROPERTY_SOURCE_NAME ) ) ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardServletEnvironment . SERVLET_CONFIG_PROPERTY_SOURCE_NAME ) ) , lessThan ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME ) ) ) ) ; MockPropertySource org.springframework.core.env.MockPropertySource = new MockPropertySource ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME ) ; org.springframework.core.env.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.core.env.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.core.env.MutablePropertySources . replace ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME , org.springframework.core.env.MockPropertySource ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceAdapterApplicationContext org.springframework.core.env.ResourceAdapterApplicationContext = new ResourceAdapterApplicationContext ( new SimpleBootstrapContext ( new SimpleTaskWorkManager ( ) ) ) ; void ( org.springframework.core.env.ResourceAdapterApplicationContext ) ; void ( org.springframework.core.env.ResourceAdapterApplicationContext ) ; org.springframework.core.env.ResourceAdapterApplicationContext . setEnvironment ( org.springframework.core.env.ConfigurableEnvironment ) ; org.springframework.core.env.ResourceAdapterApplicationContext . refresh ( ) ; void ( org.springframework.core.env.ResourceAdapterApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; void ( org.springframework.core.env.ResourceAdapterApplicationContext ) ; void ( org.springframework.core.env.ResourceAdapterApplicationContext , org.springframework.core.env.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { { ConfigurableApplicationContext org.springframework.core.env.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.core.env.ConfigurableApplicationContext . refresh ( ) ; } { ConfigurableApplicationContext org.springframework.core.env.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.core.env.ConfigurableApplicationContext . getEnvironment ( ) . setRequiredProperties ( STRING , STRING ) ; try { org.springframework.core.env.ConfigurableApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( MissingRequiredPropertiesException org.springframework.core.env.MissingRequiredPropertiesException ) {			} } { ConfigurableApplicationContext org.springframework.core.env.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.core.env.ConfigurableApplicationContext . getEnvironment ( ) . setRequiredProperties ( STRING ) ; org.springframework.core.env.ConfigurableApplicationContext . setEnvironment ( new MockEnvironment ( ) . withProperty ( STRING , STRING ) ) ; org.springframework.core.env.ConfigurableApplicationContext . refresh ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.core.env.DefaultListableBeanFactory org.springframework.core.env.DefaultListableBeanFactory ( ) { DefaultListableBeanFactory org.springframework.core.env.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; void ( org.springframework.core.env.DefaultListableBeanFactory ) ; return org.springframework.core.env.DefaultListableBeanFactory ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.core.env.BeanDefinitionRegistry ) { org.springframework.core.env.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , rootBeanDefinition ( org.springframework.core.env.EnvironmentSystemIntegrationTests.EnvironmentAwareBean .class ) . getBeanDefinition ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.core.env.ConfigurableApplicationContext ) { assertThat ( org.springframework.core.env.ConfigurableApplicationContext . containsBean ( ENVIRONMENT_BEAN_NAME ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationContext org.springframework.core.env.ApplicationContext ) { Environment org.springframework.core.env.Environment = org.springframework.core.env.ApplicationContext . getEnvironment ( ) ; assertThat ( org.springframework.core.env.Environment , notNullValue ( ) ) ; assertThat ( org.springframework.core.env.Environment , instanceOf ( StandardEnvironment .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( WebApplicationContext org.springframework.core.env.WebApplicationContext ) { Environment org.springframework.core.env.Environment = org.springframework.core.env.WebApplicationContext . getEnvironment ( ) ; assertThat ( org.springframework.core.env.Environment , notNullValue ( ) ) ; assertThat ( org.springframework.core.env.Environment , instanceOf ( StandardServletEnvironment .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationContext org.springframework.core.env.ApplicationContext , Environment org.springframework.core.env.Environment ) { Environment org.springframework.core.env.Environment = org.springframework.core.env.ApplicationContext . getEnvironment ( ) ; assertThat ( org.springframework.core.env.Environment , notNullValue ( ) ) ; assertThat ( org.springframework.core.env.Environment , is ( org.springframework.core.env.Environment ) ) ; assertThat ( org.springframework.core.env.ApplicationContext . containsBean ( ENVIRONMENT_BEAN_NAME ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.core.env.ConfigurableApplicationContext , Environment org.springframework.core.env.Environment ) { assertThat ( org.springframework.core.env.ConfigurableApplicationContext . getBean ( org.springframework.core.env.EnvironmentSystemIntegrationTests.EnvironmentAwareBean .class ) . environment , is ( org.springframework.core.env.Environment ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.core.env.Environment ) { this . org.springframework.core.env.Environment = org.springframework.core.env.Environment ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.core.env.EnvironmentSystemIntegrationTests.EnvironmentAwareBean org.springframework.core.env.EnvironmentSystemIntegrationTests.EnvironmentAwareBean ( ) { return new org.springframework.core.env.EnvironmentSystemIntegrationTests.EnvironmentAwareBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.Object java.lang.Object ( ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.Object java.lang.Object ( ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.Object java.lang.Object ( ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.Object java.lang.Object ( ) { return new java.lang.Object ( ) ; }  <METHOD_END>
