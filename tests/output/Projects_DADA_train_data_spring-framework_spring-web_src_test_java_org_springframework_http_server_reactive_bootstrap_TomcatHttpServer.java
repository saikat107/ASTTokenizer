<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.http.server.reactive.bootstrap.Tomcat = new Tomcat ( ) ; this . org.springframework.http.server.reactive.bootstrap.Tomcat . setBaseDir ( java.lang.String ) ; this . org.springframework.http.server.reactive.bootstrap.Tomcat . setHostname ( getHost ( ) ) ; this . org.springframework.http.server.reactive.bootstrap.Tomcat . setPort ( getPort ( ) ) ; ServletHttpHandlerAdapter org.springframework.http.server.reactive.bootstrap.ServletHttpHandlerAdapter = org.springframework.http.server.reactive.bootstrap.ServletHttpHandlerAdapter ( ) ; java.io.File java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) ) ; Context org.springframework.http.server.reactive.bootstrap.Context = org.springframework.http.server.reactive.bootstrap.Tomcat . addContext ( STRING , java.io.File . java.lang.String ( ) ) ; Tomcat . addServlet ( org.springframework.http.server.reactive.bootstrap.Context , STRING , org.springframework.http.server.reactive.bootstrap.ServletHttpHandlerAdapter ) ; org.springframework.http.server.reactive.bootstrap.Context . addServletMappingDecoded ( STRING , STRING ) ; if ( java.lang.Class<> != null ) { org.springframework.http.server.reactive.bootstrap.Context . addApplicationListener ( java.lang.Class<> . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.http.server.reactive.bootstrap.ServletHttpHandlerAdapter org.springframework.http.server.reactive.bootstrap.ServletHttpHandlerAdapter ( ) { return new TomcatHttpHandlerAdapter ( resolveHttpHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.http.server.reactive.bootstrap.LifecycleException { this . org.springframework.http.server.reactive.bootstrap.Tomcat . start ( ) ; setPort ( this . org.springframework.http.server.reactive.bootstrap.Tomcat . getConnector ( ) . getLocalPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.http.server.reactive.bootstrap.Tomcat . stop ( ) ; this . org.springframework.http.server.reactive.bootstrap.Tomcat . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.http.server.reactive.bootstrap.Tomcat = null ; }  <METHOD_END>
