<METHOD_START> @ Before public void void ( ) { java.util.List<org.springframework.data.cassandra.convert.Converter<?,?>> < Converter < ? , ? > > java.util.List<org.springframework.data.cassandra.convert.Converter<?,?>> = new java.util.ArrayList<org.springframework.data.cassandra.convert.Converter<?,?>> <> ( ) ; java.util.List<org.springframework.data.cassandra.convert.Converter<?,?>> . add ( new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.PersonReadConverter ( ) ) ; java.util.List<org.springframework.data.cassandra.convert.Converter<?,?>> . add ( new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.PersonWriteConverter ( ) ) ; CustomConversions org.springframework.data.cassandra.convert.CustomConversions = new CustomConversions ( java.util.List<org.springframework.data.cassandra.convert.Converter<?,?>> ) ; BasicCassandraMappingContext org.springframework.data.cassandra.convert.BasicCassandraMappingContext = new BasicCassandraMappingContext ( ) ; org.springframework.data.cassandra.convert.BasicCassandraMappingContext . setCustomConversions ( org.springframework.data.cassandra.convert.CustomConversions ) ; org.springframework.data.cassandra.convert.BasicCassandraMappingContext . afterPropertiesSet ( ) ; MappingCassandraConverter org.springframework.data.cassandra.convert.MappingCassandraConverter = new MappingCassandraConverter ( org.springframework.data.cassandra.convert.BasicCassandraMappingContext ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . setCustomConversions ( org.springframework.data.cassandra.convert.CustomConversions ) ; org.springframework.data.cassandra.convert.MappingCassandraConverter . afterPropertiesSet ( ) ; org.springframework.data.cassandra.convert.CassandraTemplate = new CassandraTemplate ( session , org.springframework.data.cassandra.convert.MappingCassandraConverter ) ; SchemaTestUtils . potentiallyCreateTableFor ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee .class , org.springframework.data.cassandra.convert.CassandraTemplate ) ; SchemaTestUtils . truncate ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee .class , org.springframework.data.cassandra.convert.CassandraTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee = new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee ( ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . setId ( STRING ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . setPerson ( new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ( STRING , STRING ) ) ; org.springframework.data.cassandra.convert.CassandraTemplate . insert ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee ) ; Row org.springframework.data.cassandra.convert.Row = org.springframework.data.cassandra.convert.CassandraTemplate . selectOne ( QueryBuilder . select ( STRING , STRING ) . from ( STRING ) , Row .class ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getString ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getString ( STRING ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee = new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee ( ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . setId ( STRING ) ; org.springframework.data.cassandra.convert.CassandraTemplate . insert ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . setPerson ( new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ( STRING , STRING ) ) ; org.springframework.data.cassandra.convert.CassandraTemplate . update ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee ) ; Row org.springframework.data.cassandra.convert.Row = org.springframework.data.cassandra.convert.CassandraTemplate . selectOne ( QueryBuilder . select ( STRING , STRING ) . from ( STRING ) , Row .class ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getString ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getString ( STRING ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee = new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee ( ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . setId ( STRING ) ; org.springframework.data.cassandra.convert.CassandraTemplate . insert ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . setFriends ( java.util.Arrays . java.util.List<T> ( new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ( STRING , STRING ) , new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ( STRING , STRING ) ) ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . setPeople ( java.util.Collections . java.util.Set<T> ( new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ( STRING , STRING ) ) ) ; org.springframework.data.cassandra.convert.CassandraTemplate . update ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee ) ; Row org.springframework.data.cassandra.convert.Row = org.springframework.data.cassandra.convert.CassandraTemplate . selectOne ( QueryBuilder . select ( STRING , STRING , STRING , STRING ) . from ( STRING ) , Row .class ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getObject ( STRING ) ) . isInstanceOf ( java.util.List .class ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getList ( STRING , java.lang.String .class ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getObject ( STRING ) ) . isInstanceOf ( java.util.Set .class ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getSet ( STRING , java.lang.String .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee = new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee ( ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . setId ( STRING ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . setFriends ( java.util.Arrays . java.util.List<T> ( new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ( STRING , STRING ) , new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ( STRING , STRING ) ) ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . setPeople ( java.util.Collections . java.util.Set<T> ( new org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ( STRING , STRING ) ) ) ; org.springframework.data.cassandra.convert.CassandraTemplate . insert ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee ) ; Row org.springframework.data.cassandra.convert.Row = org.springframework.data.cassandra.convert.CassandraTemplate . selectOne ( QueryBuilder . select ( STRING , STRING , STRING , STRING ) . from ( STRING ) , Row .class ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getObject ( STRING ) ) . isInstanceOf ( java.util.List .class ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getList ( STRING , java.lang.String .class ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getObject ( STRING ) ) . isInstanceOf ( java.util.Set .class ) ; assertThat ( org.springframework.data.cassandra.convert.Row . getSet ( STRING , java.lang.String .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.CassandraTemplate . getCqlOperations ( ) . execute ( QueryBuilder . insertInto ( STRING ) . value ( STRING , STRING ) . value ( STRING , STRING ) ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee = org.springframework.data.cassandra.convert.CassandraTemplate . selectOne ( QueryBuilder . select ( STRING , STRING ) . from ( STRING ) , org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee .class ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . getId ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . getPerson ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . getPerson ( ) . getFirstname ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . getPerson ( ) . getLastname ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.CassandraTemplate . getCqlOperations ( ) . execute ( QueryBuilder . insertInto ( STRING ) . value ( STRING , STRING ) . value ( STRING , java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ) ; org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee = org.springframework.data.cassandra.convert.CassandraTemplate . selectOne ( QueryBuilder . select ( STRING , STRING ) . from ( STRING ) , org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee .class ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . getId ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . getPeople ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Employee . getPeople ( ) ) . extracting ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person :: getFirstname ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.convert.CassandraTemplate . getCqlOperations ( ) . execute ( QueryBuilder . insertInto ( STRING ) . value ( STRING , STRING ) ) ; org.springframework.data.cassandra.convert.CassandraTemplate . getCqlOperations ( ) . execute ( QueryBuilder . update ( STRING ) . where ( QueryBuilder . eq ( STRING , STRING ) ) . with ( QueryBuilder . set ( STRING , java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { try { return new ObjectMapper ( ) . readValue ( java.lang.String , org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person .class ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ) { try { return new ObjectMapper ( ) . writeValueAsString ( org.springframework.data.cassandra.convert.CustomConversionIntegrationTests.Person ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } }  <METHOD_END>
