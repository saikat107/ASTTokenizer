<METHOD_START> public void ( ReactiveMongoQueryMethod org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod , ReactiveMongoOperations org.springframework.data.mongodb.repository.query.ReactiveMongoOperations ) { Assert . notNull ( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.repository.query.ReactiveMongoOperations , STRING ) ; this . org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod = org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod ; this . org.springframework.data.mongodb.repository.query.ReactiveMongoOperations = org.springframework.data.mongodb.repository.query.ReactiveMongoOperations ; this . org.springframework.data.mongodb.repository.query.EntityInstantiators = new EntityInstantiators ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.query.MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod ( ) { return org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { return org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . hasReactiveWrapperParameter ( ) ? java.lang.Object ( java.lang.Object[] ) : java.lang.Object ( new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod , java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { ReactiveMongoParameterAccessor org.springframework.data.mongodb.repository.query.ReactiveMongoParameterAccessor = new ReactiveMongoParameterAccessor ( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod , java.lang.Object[] ) ; if ( org.springframework.data.mongodb.repository.query.MongoQueryMethod ( ) . isCollectionQuery ( ) ) { return Flux . defer ( ( ) ( Publisher < Object > ) execute ( parameterAccessor ) ) ; } return Mono . defer ( ( ) ( Mono < Object > ) execute ( parameterAccessor ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) { Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.Query ( new ConvertingParameterAccessor ( org.springframework.data.mongodb.repository.query.ReactiveMongoOperations . getConverter ( ) , org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) ) ; org.springframework.data.mongodb.repository.query.Query ( org.springframework.data.mongodb.repository.query.Query ) ; ResultProcessor org.springframework.data.mongodb.repository.query.ResultProcessor = org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . getResultProcessor ( ) . withDynamicProjection ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . getEntityInformation ( ) . getCollectionName ( ) ; ReactiveMongoQueryExecution org.springframework.data.mongodb.repository.query.ReactiveMongoQueryExecution = org.springframework.data.mongodb.repository.query.ReactiveMongoQueryExecution ( org.springframework.data.mongodb.repository.query.Query , org.springframework.data.mongodb.repository.query.MongoParameterAccessor , new ResultProcessingConverter ( org.springframework.data.mongodb.repository.query.ResultProcessor , org.springframework.data.mongodb.repository.query.ReactiveMongoOperations , org.springframework.data.mongodb.repository.query.EntityInstantiators ) ) ; return org.springframework.data.mongodb.repository.query.ReactiveMongoQueryExecution . execute ( org.springframework.data.mongodb.repository.query.Query , org.springframework.data.mongodb.repository.query.ResultProcessor . getReturnedType ( ) . getDomainType ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.ReactiveMongoQueryExecution org.springframework.data.mongodb.repository.query.ReactiveMongoQueryExecution ( Query org.springframework.data.mongodb.repository.query.Query , MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor , Converter < java.lang.Object , java.lang.Object > org.springframework.data.mongodb.repository.query.Converter<java.lang.Object,java.lang.Object> ) { return new ResultProcessingExecution ( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryExecution ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) , org.springframework.data.mongodb.repository.query.Converter<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.ReactiveMongoQueryExecution org.springframework.data.mongodb.repository.query.ReactiveMongoQueryExecution ( MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) { if ( boolean ( ) ) { return new DeleteExecution ( org.springframework.data.mongodb.repository.query.ReactiveMongoOperations , org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod ) ; } else if ( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . isGeoNearQuery ( ) ) { return new GeoNearExecution ( org.springframework.data.mongodb.repository.query.ReactiveMongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor , org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . getReturnType ( ) ) ; } else if ( boolean ( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod ) ) { return new TailExecution ( org.springframework.data.mongodb.repository.query.ReactiveMongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getPageable ( ) ) ; } else if ( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . isCollectionQuery ( ) ) { return new CollectionExecution ( org.springframework.data.mongodb.repository.query.ReactiveMongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getPageable ( ) ) ; } else { return new SingleEntityExecution ( org.springframework.data.mongodb.repository.query.ReactiveMongoOperations , boolean ( ) ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod ) { return org.springframework.data.mongodb.repository.query.MongoQueryMethod . getInfiniteStreamAnnotation ( ) != null ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.Query org.springframework.data.mongodb.repository.query.Query ( Query org.springframework.data.mongodb.repository.query.Query ) { if ( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . hasQueryMetaAttributes ( ) ) { org.springframework.data.mongodb.repository.query.Query . setMeta ( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . getQueryMetaAttributes ( ) ) ; } return org.springframework.data.mongodb.repository.query.Query ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.repository.query.Query org.springframework.data.mongodb.repository.query.Query ( ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) { return org.springframework.data.mongodb.repository.query.Query ( org.springframework.data.mongodb.repository.query.Query ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.mongodb.repository.query.Query org.springframework.data.mongodb.repository.query.Query ( ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor );  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( )  <METHOD_END>
