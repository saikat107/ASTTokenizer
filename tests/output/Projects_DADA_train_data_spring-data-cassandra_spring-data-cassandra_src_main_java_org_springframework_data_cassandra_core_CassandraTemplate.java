<METHOD_START> public void ( Session org.springframework.data.cassandra.core.Session ) { this( org.springframework.data.cassandra.core.Session , org.springframework.data.cassandra.core.MappingCassandraConverter ( ) ); }  <METHOD_END>
<METHOD_START> public void ( Session org.springframework.data.cassandra.core.Session , CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ) { this( new DefaultSessionFactory ( org.springframework.data.cassandra.core.Session ) , org.springframework.data.cassandra.core.CassandraConverter ); }  <METHOD_END>
<METHOD_START> public void ( SessionFactory org.springframework.data.cassandra.core.SessionFactory , CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ) { this( new CqlTemplate ( org.springframework.data.cassandra.core.SessionFactory ) , org.springframework.data.cassandra.core.CassandraConverter ); }  <METHOD_END>
<METHOD_START> public void ( CqlOperations org.springframework.data.cassandra.core.CqlOperations , CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ) { Assert . notNull ( org.springframework.data.cassandra.core.CqlOperations , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.core.CassandraConverter , STRING ) ; this . org.springframework.data.cassandra.core.CassandraConverter = org.springframework.data.cassandra.core.CassandraConverter ; this . org.springframework.data.cassandra.core.CassandraMappingContext = org.springframework.data.cassandra.core.CassandraConverter . getMappingContext ( ) ; this . org.springframework.data.cassandra.core.CqlOperations = org.springframework.data.cassandra.core.CqlOperations ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.cassandra.core.MappingCassandraConverter org.springframework.data.cassandra.core.MappingCassandraConverter ( ) { MappingCassandraConverter org.springframework.data.cassandra.core.MappingCassandraConverter = new MappingCassandraConverter ( ) ; org.springframework.data.cassandra.core.MappingCassandraConverter . afterPropertiesSet ( ) ; return org.springframework.data.cassandra.core.MappingCassandraConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.List<T> < T > java.util.List<T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . hasText ( java.lang.String , STRING ) ; return java.util.List ( new SimpleStatement ( java.lang.String ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.stream.Stream<T> < T > java.util.stream.Stream<T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.data.cassandra.core.DataAccessException { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return java.util.stream.Stream ( new SimpleStatement ( java.lang.String ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return java.lang.Object ( new SimpleStatement ( java.lang.String ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.List<T> < T > java.util.List<T> ( Statement org.springframework.data.cassandra.core.Statement , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( org.springframework.data.cassandra.core.Statement , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return org.springframework.data.cassandra.core.CqlOperations . query ( org.springframework.data.cassandra.core.Statement , ( row , rowNum ) -> converter . read ( entityClass , row ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.stream.Stream<T> < T > java.util.stream.Stream<T> ( Statement org.springframework.data.cassandra.core.Statement , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.data.cassandra.core.DataAccessException { Assert . notNull ( org.springframework.data.cassandra.core.Statement , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return java.util.stream.StreamSupport . java.util.stream.Stream ( org.springframework.data.cassandra.core.CqlOperations . queryForResultSet ( org.springframework.data.cassandra.core.Statement ) . spliterator ( ) , false ) . map ( row -> converter . read ( entityClass , row ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( Statement org.springframework.data.cassandra.core.Statement , java.lang.Class<T> < T > java.lang.Class<T> ) { java.util.List<T> < T > java.util.List<T> = java.util.List ( org.springframework.data.cassandra.core.Statement , java.lang.Class<T> ) ; return java.util.List<T> . java.util.stream.Stream<T> ( ) . java.util.Optional<T> ( ) . T ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Select org.springframework.data.cassandra.core.Select = QueryBuilder . select ( ) . countAll ( ) . from ( org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) . getTableName ( ) . toCql ( ) ) ; return org.springframework.data.cassandra.core.CqlOperations . queryForObject ( org.springframework.data.cassandra.core.Select , java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> = org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ; Select org.springframework.data.cassandra.core.Select = QueryBuilder . select ( ) . from ( org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.CassandraConverter . write ( java.lang.Object , org.springframework.data.cassandra.core.Select . where ( ) , org.springframework.data.cassandra.core.CassandraPersistentEntity<> ) ; return org.springframework.data.cassandra.core.CqlOperations . queryForResultSet ( org.springframework.data.cassandra.core.Select ) . iterator ( ) . hasNext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> = org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<T> ) ; Select org.springframework.data.cassandra.core.Select = QueryBuilder . select ( ) . all ( ) . from ( org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.CassandraConverter . write ( java.lang.Object , org.springframework.data.cassandra.core.Select . where ( ) , org.springframework.data.cassandra.core.CassandraPersistentEntity<> ) ; return java.lang.Object ( org.springframework.data.cassandra.core.Select , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.data.cassandra.core.DataAccessException { Assert . notNull ( java.lang.Iterable<> , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> = org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<T> ) ; CassandraPersistentProperty org.springframework.data.cassandra.core.CassandraPersistentProperty = org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getIdProperty ( ) . orElseThrow ( ( ) new IllegalArgumentException ( String . format ( STRING , entityClass . getName ( ) ) ) ) ; if ( org.springframework.data.cassandra.core.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) { java.lang.String java.lang.String = org.springframework.data.cassandra.core.CassandraPersistentProperty . getCompositePrimaryKeyEntity ( ) . getType ( ) . getName ( ) ; throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<T> . java.lang.String ( ) , java.lang.String ) ) ; } Select org.springframework.data.cassandra.core.Select = QueryBuilder . select ( ) . all ( ) . from ( org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.Select . where ( QueryBuilder . in ( org.springframework.data.cassandra.core.CassandraPersistentProperty . getColumnName ( ) . toCql ( ) , java.util.List<> ( java.lang.Iterable<> ) ) ) ; return java.util.List ( org.springframework.data.cassandra.core.Select , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( T T ) { return T ( T , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( T T , WriteOptions org.springframework.data.cassandra.core.WriteOptions ) { Assert . notNull ( T , STRING ) ; Insert org.springframework.data.cassandra.core.Insert = QueryUtils . createInsertQuery ( org.springframework.data.cassandra.core.CqlIdentifier ( T . java.lang.Class<? extends java.lang.Object> ( ) ) . toCql ( ) , T , org.springframework.data.cassandra.core.WriteOptions , org.springframework.data.cassandra.core.CassandraConverter ) ; return org.springframework.data.cassandra.core.CqlOperations . execute ( new org.springframework.data.cassandra.core.CassandraTemplate.StatementCallback <> ( org.springframework.data.cassandra.core.Insert , T ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( T T ) { return T ( T , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( T T , WriteOptions org.springframework.data.cassandra.core.WriteOptions ) { Assert . notNull ( T , STRING ) ; Update org.springframework.data.cassandra.core.Update = QueryUtils . createUpdateQuery ( org.springframework.data.cassandra.core.CqlIdentifier ( T . java.lang.Class<? extends java.lang.Object> ( ) ) . toCql ( ) , T , org.springframework.data.cassandra.core.WriteOptions , org.springframework.data.cassandra.core.CassandraConverter ) ; return org.springframework.data.cassandra.core.CqlOperations . execute ( new org.springframework.data.cassandra.core.CassandraTemplate.StatementCallback <> ( org.springframework.data.cassandra.core.Update , T ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( T T ) { return T ( T , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( T T , QueryOptions org.springframework.data.cassandra.core.QueryOptions ) { Assert . notNull ( T , STRING ) ; Delete org.springframework.data.cassandra.core.Delete = QueryUtils . createDeleteQuery ( org.springframework.data.cassandra.core.CqlIdentifier ( T . java.lang.Class<? extends java.lang.Object> ( ) ) . toCql ( ) , T , org.springframework.data.cassandra.core.QueryOptions , org.springframework.data.cassandra.core.CassandraConverter ) ; return org.springframework.data.cassandra.core.CqlOperations . execute ( new org.springframework.data.cassandra.core.CassandraTemplate.StatementCallback <> ( org.springframework.data.cassandra.core.Delete , T ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> = org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ; Delete org.springframework.data.cassandra.core.Delete = QueryBuilder . delete ( ) . from ( org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.CassandraConverter . write ( java.lang.Object , org.springframework.data.cassandra.core.Delete . where ( ) , org.springframework.data.cassandra.core.CassandraPersistentEntity<> ) ; return org.springframework.data.cassandra.core.CqlOperations . execute ( org.springframework.data.cassandra.core.Delete ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Truncate org.springframework.data.cassandra.core.Truncate = QueryBuilder . truncate ( org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.CqlOperations . execute ( org.springframework.data.cassandra.core.Truncate ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ( ) { return org.springframework.data.cassandra.core.CassandraConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CqlOperations org.springframework.data.cassandra.core.CqlOperations ( ) { return org.springframework.data.cassandra.core.CqlOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CqlIdentifier org.springframework.data.cassandra.core.CqlIdentifier ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( ClassUtils . getUserClass ( java.lang.Class<> ) ) . getTableName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations ( ) { return new CassandraBatchTemplate ( this ) ; }  <METHOD_END>
<METHOD_START> private < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { if ( java.lang.Iterable<T> instanceof java.util.List ) { return ( java.util.List<T> < T > ) java.lang.Iterable<T> ; } if ( java.lang.Iterable<T> instanceof java.util.Collection ) { return new java.util.ArrayList<T> <> ( ( java.util.Collection<T> < T > ) java.lang.Iterable<T> ) ; } return java.util.stream.StreamSupport . java.util.stream.Stream<T> ( java.lang.Iterable<T> . java.util.Spliterator<T> ( ) , false ) . java.util.List<T> ( java.util.stream.Collectors . java.util.stream.Collector<T,?,java.util.List<T>> ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( Statement org.springframework.data.cassandra.core.Statement , T T ) { this . org.springframework.data.cassandra.core.Statement = org.springframework.data.cassandra.core.Statement ; this . T = T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Session org.springframework.data.cassandra.core.Session ) throws org.springframework.data.cassandra.core.DriverException , org.springframework.data.cassandra.core.DataAccessException { return org.springframework.data.cassandra.core.Session . execute ( org.springframework.data.cassandra.core.Statement ) . wasApplied ( ) ? T : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.cassandra.core.Statement . toString ( ) ; }  <METHOD_END>
