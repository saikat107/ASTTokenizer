<METHOD_START> void ( DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties , ApplicationContext org.springframework.boot.autoconfigure.jdbc.ApplicationContext ) { this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = org.springframework.boot.autoconfigure.jdbc.DataSourceProperties ; this . org.springframework.boot.autoconfigure.jdbc.ApplicationContext = org.springframework.boot.autoconfigure.jdbc.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { if ( ! this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . isInitialize ( ) ) { org.springframework.boot.autoconfigure.jdbc.Log . debug ( STRING ) ; return; } if ( this . org.springframework.boot.autoconfigure.jdbc.ApplicationContext . getBeanNamesForType ( javax.sql.DataSource .class , false , false ) . length > NUMBER ) { this . javax.sql.DataSource = this . org.springframework.boot.autoconfigure.jdbc.ApplicationContext . getBean ( javax.sql.DataSource .class ) ; } if ( this . javax.sql.DataSource == null ) { org.springframework.boot.autoconfigure.jdbc.Log . debug ( STRING ) ; return; } void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> < Resource > java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> = java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> ( STRING , this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getSchema ( ) , STRING ) ; if ( ! java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> . isEmpty ( ) ) { java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getSchemaUsername ( ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getSchemaPassword ( ) ; void ( java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> , java.lang.String , java.lang.String ) ; try { this . org.springframework.boot.autoconfigure.jdbc.ApplicationContext . publishEvent ( new DataSourceInitializedEvent ( this . javax.sql.DataSource ) ) ; if ( ! this . boolean ) { void ( ) ; this . boolean = true ; } } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { org.springframework.boot.autoconfigure.jdbc.Log . warn ( STRING + java.lang.IllegalStateException . java.lang.String ( ) + STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( DataSourceInitializedEvent org.springframework.boot.autoconfigure.jdbc.DataSourceInitializedEvent ) { if ( ! this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . isInitialize ( ) ) { org.springframework.boot.autoconfigure.jdbc.Log . debug ( STRING ) ; return; } if ( ! this . boolean ) { void ( ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> < Resource > java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> = java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> ( STRING , this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getData ( ) , STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getDataUsername ( ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getDataPassword ( ) ; void ( java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> < Resource > java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> ( java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.lang.String java.lang.String ) { if ( java.util.List<java.lang.String> != null ) { return java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> ( java.lang.String , java.util.List<java.lang.String> , true ) ; } java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getPlatform ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; java.util.List<java.lang.String> . boolean ( STRING + java.lang.String + STRING ) ; return java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> ( java.lang.String , java.util.List<java.lang.String> , false ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> < Resource > java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> ( java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , boolean boolean ) { java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> < Resource > java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> = new java.util.ArrayList<org.springframework.boot.autoconfigure.jdbc.Resource> <> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { for ( Resource org.springframework.boot.autoconfigure.jdbc.Resource : org.springframework.boot.autoconfigure.jdbc.Resource[] ( java.lang.String ) ) { if ( org.springframework.boot.autoconfigure.jdbc.Resource . exists ( ) ) { java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> . add ( org.springframework.boot.autoconfigure.jdbc.Resource ) ; } else if ( boolean ) { throw new ResourceNotFoundException ( java.lang.String , org.springframework.boot.autoconfigure.jdbc.Resource ) ; } } } return java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jdbc.Resource [] org.springframework.boot.autoconfigure.jdbc.Resource[] ( java.lang.String java.lang.String ) { try { SortedResourcesFactoryBean org.springframework.boot.autoconfigure.jdbc.SortedResourcesFactoryBean = new SortedResourcesFactoryBean ( this . org.springframework.boot.autoconfigure.jdbc.ApplicationContext , java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) ) ; org.springframework.boot.autoconfigure.jdbc.SortedResourcesFactoryBean . afterPropertiesSet ( ) ; return org.springframework.boot.autoconfigure.jdbc.SortedResourcesFactoryBean . getObject ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> < Resource > java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> , java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> . isEmpty ( ) ) { return; } ResourceDatabasePopulator org.springframework.boot.autoconfigure.jdbc.ResourceDatabasePopulator = new ResourceDatabasePopulator ( ) ; org.springframework.boot.autoconfigure.jdbc.ResourceDatabasePopulator . setContinueOnError ( this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . isContinueOnError ( ) ) ; org.springframework.boot.autoconfigure.jdbc.ResourceDatabasePopulator . setSeparator ( this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getSeparator ( ) ) ; if ( this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getSqlScriptEncoding ( ) != null ) { org.springframework.boot.autoconfigure.jdbc.ResourceDatabasePopulator . setSqlScriptEncoding ( this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getSqlScriptEncoding ( ) . name ( ) ) ; } for ( Resource org.springframework.boot.autoconfigure.jdbc.Resource : java.util.List<org.springframework.boot.autoconfigure.jdbc.Resource> ) { org.springframework.boot.autoconfigure.jdbc.ResourceDatabasePopulator . addScript ( org.springframework.boot.autoconfigure.jdbc.Resource ) ; } javax.sql.DataSource javax.sql.DataSource = this . javax.sql.DataSource ; if ( StringUtils . hasText ( java.lang.String ) && StringUtils . hasText ( java.lang.String ) ) { javax.sql.DataSource = DataSourceBuilder . create ( this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getClassLoader ( ) ) . driverClassName ( this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineDriverClassName ( ) ) . url ( this . org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUrl ( ) ) . username ( java.lang.String ) . password ( java.lang.String ) . build ( ) ; } DatabasePopulatorUtils . execute ( org.springframework.boot.autoconfigure.jdbc.ResourceDatabasePopulator , javax.sql.DataSource ) ; }  <METHOD_END>
