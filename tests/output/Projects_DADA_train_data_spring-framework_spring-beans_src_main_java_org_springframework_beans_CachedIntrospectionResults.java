<METHOD_START> public static void void ( java.lang.ClassLoader java.lang.ClassLoader ) { if ( java.lang.ClassLoader != null ) { java.util.Set<java.lang.ClassLoader> . boolean ( java.lang.ClassLoader ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.ClassLoader java.lang.ClassLoader ) { for ( java.util.Iterator<java.lang.ClassLoader> < java.lang.ClassLoader > java.util.Iterator<java.lang.ClassLoader> = java.util.Set<java.lang.ClassLoader> . java.util.Iterator<java.lang.ClassLoader> ( ) ; java.util.Iterator<java.lang.ClassLoader> . boolean ( ) ;) { java.lang.ClassLoader java.lang.ClassLoader = java.util.Iterator<java.lang.ClassLoader> . java.lang.ClassLoader ( ) ; if ( boolean ( java.lang.ClassLoader , java.lang.ClassLoader ) ) { java.util.Iterator<java.lang.ClassLoader> . void ( ) ; } } for ( java.util.Iterator<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Iterator<java.lang.Class<?>> = java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> . java.util.Set<java.lang.Class<?>> ( ) . java.util.Iterator<java.lang.Class<?>> ( ) ; java.util.Iterator<java.lang.Class<?>> . boolean ( ) ;) { java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Iterator<java.lang.Class<?>> . java.lang.Class<?> ( ) ; if ( boolean ( java.lang.Class<> . java.lang.ClassLoader ( ) , java.lang.ClassLoader ) ) { java.util.Iterator<java.lang.Class<?>> . void ( ) ; } } for ( java.util.Iterator<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Iterator<java.lang.Class<?>> = java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> . java.util.Set<java.lang.Class<?>> ( ) . java.util.Iterator<java.lang.Class<?>> ( ) ; java.util.Iterator<java.lang.Class<?>> . boolean ( ) ;) { java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Iterator<java.lang.Class<?>> . java.lang.Class<?> ( ) ; if ( boolean ( java.lang.Class<> . java.lang.ClassLoader ( ) , java.lang.ClassLoader ) ) { java.util.Iterator<java.lang.Class<?>> . void ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static org.springframework.beans.CachedIntrospectionResults org.springframework.beans.CachedIntrospectionResults ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws org.springframework.beans.BeansException { org.springframework.beans.CachedIntrospectionResults org.springframework.beans.CachedIntrospectionResults = java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> . org.springframework.beans.CachedIntrospectionResults ( java.lang.Class<> ) ; if ( org.springframework.beans.CachedIntrospectionResults != null ) { return org.springframework.beans.CachedIntrospectionResults ; } org.springframework.beans.CachedIntrospectionResults = java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> . org.springframework.beans.CachedIntrospectionResults ( java.lang.Class<> ) ; if ( org.springframework.beans.CachedIntrospectionResults != null ) { return org.springframework.beans.CachedIntrospectionResults ; } org.springframework.beans.CachedIntrospectionResults = new org.springframework.beans.CachedIntrospectionResults ( java.lang.Class<> ) ; java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> < java.lang.Class<?> < ? > , org.springframework.beans.CachedIntrospectionResults > java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> ; if ( ClassUtils . isCacheSafe ( java.lang.Class<> , org.springframework.beans.CachedIntrospectionResults .class . java.lang.ClassLoader ( ) ) || boolean ( java.lang.Class<> . java.lang.ClassLoader ( ) ) ) { java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> = java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> ; } else { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> = java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> ; } org.springframework.beans.CachedIntrospectionResults org.springframework.beans.CachedIntrospectionResults = java.util.concurrent.ConcurrentMap<java.lang.Class<?>,org.springframework.beans.CachedIntrospectionResults> . org.springframework.beans.CachedIntrospectionResults ( java.lang.Class<> , org.springframework.beans.CachedIntrospectionResults ) ; return ( org.springframework.beans.CachedIntrospectionResults != null ? org.springframework.beans.CachedIntrospectionResults : org.springframework.beans.CachedIntrospectionResults ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.ClassLoader java.lang.ClassLoader ) { for ( java.lang.ClassLoader java.lang.ClassLoader : java.util.Set<java.lang.ClassLoader> ) { if ( boolean ( java.lang.ClassLoader , java.lang.ClassLoader ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.ClassLoader java.lang.ClassLoader ) { if ( java.lang.ClassLoader == java.lang.ClassLoader ) { return true ; } if ( java.lang.ClassLoader == null ) { return false ; } java.lang.ClassLoader java.lang.ClassLoader = java.lang.ClassLoader ; while ( java.lang.ClassLoader != null ) { java.lang.ClassLoader = java.lang.ClassLoader . java.lang.ClassLoader ( ) ; if ( java.lang.ClassLoader == java.lang.ClassLoader ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws org.springframework.beans.BeansException { try { if ( org.springframework.beans.Log . isTraceEnabled ( ) ) { org.springframework.beans.Log . trace ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } java.beans.BeanInfo java.beans.BeanInfo = null ; for ( BeanInfoFactory org.springframework.beans.BeanInfoFactory : java.util.List<org.springframework.beans.BeanInfoFactory> ) { java.beans.BeanInfo = org.springframework.beans.BeanInfoFactory . getBeanInfo ( java.lang.Class<> ) ; if ( java.beans.BeanInfo != null ) { break; } } if ( java.beans.BeanInfo == null ) { java.beans.BeanInfo = ( boolean ? java.beans.Introspector . java.beans.BeanInfo ( java.lang.Class<> , java.beans.Introspector . int ) : java.beans.Introspector . java.beans.BeanInfo ( java.lang.Class<> ) ) ; } this . java.beans.BeanInfo = java.beans.BeanInfo ; if ( org.springframework.beans.Log . isTraceEnabled ( ) ) { org.springframework.beans.Log . trace ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } this . java.util.Map<java.lang.String,java.beans.PropertyDescriptor> = new java.util.LinkedHashMap<java.lang.String,java.beans.PropertyDescriptor> <> ( ) ; java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = this . java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.PropertyDescriptor[] ) { if ( java.lang.Class .class == java.lang.Class<> && ( STRING . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) || STRING . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ) ) { continue; } if ( org.springframework.beans.Log . isTraceEnabled ( ) ) { org.springframework.beans.Log . trace ( STRING + java.beans.PropertyDescriptor . java.lang.String ( ) + STRING + ( java.beans.PropertyDescriptor . java.lang.Class<?> ( ) != null ? STRING + java.beans.PropertyDescriptor . java.lang.Class<?> ( ) . java.lang.String ( ) + STRING : STRING ) + ( java.beans.PropertyDescriptor . java.lang.Class<?> ( ) != null ? STRING + java.beans.PropertyDescriptor . java.lang.Class<?> ( ) . java.lang.String ( ) + STRING : STRING ) ) ; } java.beans.PropertyDescriptor = java.beans.PropertyDescriptor ( java.lang.Class<> , java.beans.PropertyDescriptor ) ; this . java.util.Map<java.lang.String,java.beans.PropertyDescriptor> . java.beans.PropertyDescriptor ( java.beans.PropertyDescriptor . java.lang.String ( ) , java.beans.PropertyDescriptor ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> ; while ( java.lang.Class<> != null ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<> . java.lang.Class<?>[] ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.beans.BeanInfo java.beans.BeanInfo = java.beans.Introspector . java.beans.BeanInfo ( java.lang.Class<> , java.beans.Introspector . int ) ; java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = java.beans.BeanInfo . java.beans.PropertyDescriptor[] ( ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.PropertyDescriptor[] ) { if ( ! this . java.util.Map<java.lang.String,java.beans.PropertyDescriptor> . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ) { java.beans.PropertyDescriptor = java.beans.PropertyDescriptor ( java.lang.Class<> , java.beans.PropertyDescriptor ) ; this . java.util.Map<java.lang.String,java.beans.PropertyDescriptor> . java.beans.PropertyDescriptor ( java.beans.PropertyDescriptor . java.lang.String ( ) , java.beans.PropertyDescriptor ) ; } } } java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } this . java.util.concurrent.ConcurrentMap<java.beans.PropertyDescriptor,org.springframework.beans.TypeDescriptor> = new ConcurrentReferenceHashMap <> ( ) ; } catch ( java.beans.IntrospectionException java.beans.IntrospectionException ) { throw new FatalBeanException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING , java.beans.IntrospectionException ) ; } }  <METHOD_END>
<METHOD_START> java.beans.BeanInfo java.beans.BeanInfo ( ) { return this . java.beans.BeanInfo ; }  <METHOD_END>
<METHOD_START> java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.beans.BeanInfo . java.beans.BeanDescriptor ( ) . java.lang.Class<?> ( ) ; }  <METHOD_END>
<METHOD_START> java.beans.PropertyDescriptor java.beans.PropertyDescriptor ( java.lang.String java.lang.String ) { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = this . java.util.Map<java.lang.String,java.beans.PropertyDescriptor> . java.beans.PropertyDescriptor ( java.lang.String ) ; if ( java.beans.PropertyDescriptor == null && StringUtils . hasLength ( java.lang.String ) ) { java.beans.PropertyDescriptor = this . java.util.Map<java.lang.String,java.beans.PropertyDescriptor> . java.beans.PropertyDescriptor ( java.lang.String . java.lang.String ( NUMBER , NUMBER ) . java.lang.String ( ) + java.lang.String . java.lang.String ( NUMBER ) ) ; if ( java.beans.PropertyDescriptor == null ) { java.beans.PropertyDescriptor = this . java.util.Map<java.lang.String,java.beans.PropertyDescriptor> . java.beans.PropertyDescriptor ( java.lang.String . java.lang.String ( NUMBER , NUMBER ) . java.lang.String ( ) + java.lang.String . java.lang.String ( NUMBER ) ) ; } } return ( java.beans.PropertyDescriptor == null || java.beans.PropertyDescriptor instanceof GenericTypeAwarePropertyDescriptor ? java.beans.PropertyDescriptor : java.beans.PropertyDescriptor ( java.lang.Class<?> ( ) , java.beans.PropertyDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] ( ) { java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = new java.beans.PropertyDescriptor [ this . java.util.Map<java.lang.String,java.beans.PropertyDescriptor> . int ( ) ] ; int int = NUMBER ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : this . java.util.Map<java.lang.String,java.beans.PropertyDescriptor> . java.util.Collection<java.beans.PropertyDescriptor> ( ) ) { java.beans.PropertyDescriptor[] [ int ] = ( java.beans.PropertyDescriptor instanceof GenericTypeAwarePropertyDescriptor ? java.beans.PropertyDescriptor : java.beans.PropertyDescriptor ( java.lang.Class<?> ( ) , java.beans.PropertyDescriptor ) ) ; int ++ ; } return java.beans.PropertyDescriptor[] ; }  <METHOD_END>
<METHOD_START> private java.beans.PropertyDescriptor java.beans.PropertyDescriptor ( java.lang.Class<?> < ? > java.lang.Class<?> , java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { try { return new GenericTypeAwarePropertyDescriptor ( java.lang.Class<> , java.beans.PropertyDescriptor . java.lang.String ( ) , java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) , java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) , java.beans.PropertyDescriptor . java.lang.Class<?> ( ) ) ; } catch ( java.beans.IntrospectionException java.beans.IntrospectionException ) { throw new FatalBeanException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING , java.beans.IntrospectionException ) ; } }  <METHOD_END>
<METHOD_START> org.springframework.beans.TypeDescriptor org.springframework.beans.TypeDescriptor ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor , TypeDescriptor org.springframework.beans.TypeDescriptor ) { TypeDescriptor org.springframework.beans.TypeDescriptor = this . java.util.concurrent.ConcurrentMap<java.beans.PropertyDescriptor,org.springframework.beans.TypeDescriptor> . putIfAbsent ( java.beans.PropertyDescriptor , org.springframework.beans.TypeDescriptor ) ; return ( org.springframework.beans.TypeDescriptor != null ? org.springframework.beans.TypeDescriptor : org.springframework.beans.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> org.springframework.beans.TypeDescriptor org.springframework.beans.TypeDescriptor ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { return this . java.util.concurrent.ConcurrentMap<java.beans.PropertyDescriptor,org.springframework.beans.TypeDescriptor> . get ( java.beans.PropertyDescriptor ) ; }  <METHOD_END>
