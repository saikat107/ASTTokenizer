<METHOD_START> @ After public void void ( ) { org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . deleteAll ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , new Point ( NUMBER , - NUMBER ) , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameAndLocationNear ( STRING , new Distance ( NUMBER , Metrics . KILOMETERS ) , new Point ( NUMBER , - NUMBER ) ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) ; assertNotNull ( org.springframework.data.neo4j.examples.restaurants.Restaurant . getLocation ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.restaurants.Restaurant . getLocation ( ) . getX ( ) , NUMBER ) ; assertEquals ( - NUMBER , org.springframework.data.neo4j.examples.restaurants.Restaurant . getLocation ( ) . getY ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , new Point ( NUMBER , - NUMBER ) , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByLocationNearAndName ( new Distance ( NUMBER , Metrics . KILOMETERS ) , new Point ( NUMBER , - NUMBER ) , STRING ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) ; assertNotNull ( org.springframework.data.neo4j.examples.restaurants.Restaurant . getLocation ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.restaurants.Restaurant . getLocation ( ) . getX ( ) , NUMBER ) ; assertEquals ( - NUMBER , org.springframework.data.neo4j.examples.restaurants.Restaurant . getLocation ( ) . getY ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByScoreBetween ( NUMBER , NUMBER ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByScoreBetween ( NUMBER , NUMBER ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , new Point ( NUMBER , - NUMBER ) , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , STRING ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByDescriptionIsNull ( ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , new Point ( NUMBER , - NUMBER ) , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , STRING ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByDescriptionIsNotNull ( ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , new Point ( NUMBER , - NUMBER ) , NUMBER ) ; Diner org.springframework.data.neo4j.examples.restaurants.Diner = new Diner ( STRING , null ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . addRegularDiner ( org.springframework.data.neo4j.examples.restaurants.Diner ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByRegularDinersLastNameIsNull ( ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , new Point ( NUMBER , - NUMBER ) , NUMBER ) ; Diner org.springframework.data.neo4j.examples.restaurants.Diner = new Diner ( STRING , null ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . addRegularDiner ( org.springframework.data.neo4j.examples.restaurants.Diner ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , null ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . addSimilarRestaurant ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findBySimilarRestaurantsDescriptionIsNull ( ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByScoreLessThan ( NUMBER ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByScoreLessThan ( NUMBER ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByScoreLessThanEqual ( NUMBER ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByScoreGreaterThan ( NUMBER ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByScoreGreaterThan ( NUMBER ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByScoreGreaterThanEqual ( NUMBER ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . setLaunchDate ( new java.util.Date ( NUMBER ) ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . setLaunchDate ( new java.util.Date ( NUMBER ) ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByLaunchDateBefore ( new java.util.Date ( NUMBER ) ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByLaunchDateBefore ( new java.util.Date ( NUMBER ) ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . setLaunchDate ( new java.util.Date ( NUMBER ) ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . setLaunchDate ( new java.util.Date ( NUMBER ) ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByLaunchDateAfter ( new java.util.Date ( NUMBER ) ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByLaunchDateAfter ( new java.util.Date ( NUMBER ) ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameNotLike ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameLike ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameStartingWith ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameEndingWith ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameContaining ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameNotContaining ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , STRING ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameContaining ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameNotContainingOrDescriptionIsNull ( STRING ) ; java.util.Collections . void ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameIn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameNotIn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameMatchesRegex ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByNameExists ( ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . setHalal ( true ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . setHalal ( false ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByHalalIsTrue ( ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . setHalal ( true ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; Restaurant org.springframework.data.neo4j.examples.restaurants.Restaurant = new Restaurant ( STRING , NUMBER ) ; org.springframework.data.neo4j.examples.restaurants.Restaurant . setHalal ( false ) ; org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . save ( org.springframework.data.neo4j.examples.restaurants.Restaurant ) ; java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> < Restaurant > java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> = org.springframework.data.neo4j.examples.restaurants.RestaurantRepository . findByHalalIsFalse ( ) ; assertNotNull ( java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.examples.restaurants.Restaurant> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.examples.restaurants.SessionFactory org.springframework.data.neo4j.examples.restaurants.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.examples.restaurants.PlatformTransactionManager org.springframework.data.neo4j.examples.restaurants.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.examples.restaurants.SessionFactory ( ) ) ; }  <METHOD_END>
