<METHOD_START> @ Test public void void ( ) { final DirectChannel org.springframework.integration.channel.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.channel.DirectChannel . setBeanName ( STRING ) ; void ( org.springframework.integration.channel.DirectChannel ) ; }  <METHOD_END>
<METHOD_START> private void void ( final AbstractSubscribableChannel org.springframework.integration.channel.AbstractSubscribableChannel ) { final Log org.springframework.integration.channel.Log = mock ( Log .class ) ; when ( org.springframework.integration.channel.Log . isInfoEnabled ( ) ) . thenReturn ( true ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; doAnswer ( invocation -> { logs . add ( invocation . getArgument ( NUMBER ) ) ; return null ; } ) . when ( org.springframework.integration.channel.Log ) . info ( Mockito . anyString ( ) ) ; ReflectionUtils . doWithFields ( AbstractMessageChannel .class , field -> { if ( STRING . equals ( field . getName ( ) ) ) { field . setAccessible ( true ) ; field . set ( channel , logger ) ; } } ) ; java.lang.String java.lang.String = STRING + org.springframework.integration.channel.AbstractSubscribableChannel . getComponentName ( ) + STRING + STRING ; MessageHandler org.springframework.integration.channel.MessageHandler = mock ( MessageHandler .class ) ; org.springframework.integration.channel.AbstractSubscribableChannel . subscribe ( org.springframework.integration.channel.MessageHandler ) ; assertEquals ( NUMBER , org.springframework.integration.channel.AbstractSubscribableChannel . getSubscriberCount ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( java.lang.String , NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; MessageHandler org.springframework.integration.channel.MessageHandler = mock ( MessageHandler .class ) ; org.springframework.integration.channel.AbstractSubscribableChannel . subscribe ( org.springframework.integration.channel.MessageHandler ) ; assertEquals ( NUMBER , org.springframework.integration.channel.AbstractSubscribableChannel . getSubscriberCount ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( java.lang.String , NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; org.springframework.integration.channel.AbstractSubscribableChannel . unsubscribe ( org.springframework.integration.channel.MessageHandler ) ; assertEquals ( NUMBER , org.springframework.integration.channel.AbstractSubscribableChannel . getSubscriberCount ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( java.lang.String , NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; org.springframework.integration.channel.AbstractSubscribableChannel . unsubscribe ( org.springframework.integration.channel.MessageHandler ) ; assertEquals ( NUMBER , org.springframework.integration.channel.AbstractSubscribableChannel . getSubscriberCount ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; org.springframework.integration.channel.AbstractSubscribableChannel . unsubscribe ( org.springframework.integration.channel.MessageHandler ) ; assertEquals ( NUMBER , org.springframework.integration.channel.AbstractSubscribableChannel . getSubscriberCount ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( java.lang.String , NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; verify ( org.springframework.integration.channel.Log , times ( NUMBER ) ) . info ( Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final ExecutorChannel org.springframework.integration.channel.ExecutorChannel = new ExecutorChannel ( mock ( java.util.concurrent.Executor .class ) ) ; org.springframework.integration.channel.ExecutorChannel . setBeanName ( STRING ) ; final Log org.springframework.integration.channel.Log = mock ( Log .class ) ; when ( org.springframework.integration.channel.Log . isInfoEnabled ( ) ) . thenReturn ( true ) ; ReflectionUtils . doWithFields ( AbstractMessageChannel .class , field -> { if ( STRING . equals ( field . getName ( ) ) ) { field . setAccessible ( true ) ; field . set ( channel , logger ) ; } } ) ; org.springframework.integration.channel.ExecutorChannel . subscribe ( mock ( MessageHandler .class ) ) ; org.springframework.integration.channel.ExecutorChannel . subscribe ( mock ( MessageHandler .class ) ) ; verify ( org.springframework.integration.channel.Log , times ( NUMBER ) ) . info ( Mockito . anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final PublishSubscribeChannel org.springframework.integration.channel.PublishSubscribeChannel = new PublishSubscribeChannel ( ) ; org.springframework.integration.channel.PublishSubscribeChannel . setBeanName ( STRING ) ; final Log org.springframework.integration.channel.Log = mock ( Log .class ) ; when ( org.springframework.integration.channel.Log . isInfoEnabled ( ) ) . thenReturn ( true ) ; ReflectionUtils . doWithFields ( AbstractMessageChannel .class , field -> { if ( STRING . equals ( field . getName ( ) ) ) { field . setAccessible ( true ) ; field . set ( channel , logger ) ; } } ) ; org.springframework.integration.channel.PublishSubscribeChannel . subscribe ( mock ( MessageHandler .class ) ) ; org.springframework.integration.channel.PublishSubscribeChannel . subscribe ( mock ( MessageHandler .class ) ) ; verify ( org.springframework.integration.channel.Log , times ( NUMBER ) ) . info ( Mockito . anyString ( ) ) ; }  <METHOD_END>
