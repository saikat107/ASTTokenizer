<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( java.lang.String == null ) { return null ; } int int = java.lang.String . int ( STRING ) ; if ( int != - NUMBER ) { java.text.BreakIterator java.text.BreakIterator = java.text.BreakIterator . java.text.BreakIterator ( java.util.Locale . java.util.Locale ) ; java.text.BreakIterator . void ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.text.BreakIterator . int ( ) , java.text.BreakIterator . int ( ) ) . java.lang.String ( ) ; return java.lang.String ( java.lang.String ) ; } else { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( java.lang.String ) ; return java.lang.String[] [ NUMBER ] . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( java.lang.String ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( ) ) . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) . java.lang.String ( ) ; }  <METHOD_END>
