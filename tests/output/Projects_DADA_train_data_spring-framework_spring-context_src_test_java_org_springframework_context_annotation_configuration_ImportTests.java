<METHOD_START> private org.springframework.context.annotation.configuration.DefaultListableBeanFactory org.springframework.context.annotation.configuration.DefaultListableBeanFactory ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { DefaultListableBeanFactory org.springframework.context.annotation.configuration.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { org.springframework.context.annotation.configuration.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.Class<> . java.lang.String ( ) , new RootBeanDefinition ( java.lang.Class<> ) ) ; } ConfigurationClassPostProcessor org.springframework.context.annotation.configuration.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.configuration.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) ; return org.springframework.context.annotation.configuration.DefaultListableBeanFactory ; }  <METHOD_END>
<METHOD_START> private void void ( int int , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { DefaultListableBeanFactory org.springframework.context.annotation.configuration.DefaultListableBeanFactory = org.springframework.context.annotation.configuration.DefaultListableBeanFactory ( java.lang.Class<?>[] ) ; assertThat ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory . getBeanDefinitionCount ( ) , equalTo ( int ) ) ; org.springframework.context.annotation.configuration.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { org.springframework.context.annotation.configuration.DefaultListableBeanFactory . getBean ( java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; DefaultListableBeanFactory org.springframework.context.annotation.configuration.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.annotation.configuration.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.configuration.ImportTests.ConfigurationWithImportAnnotation .class . java.lang.String ( ) ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.configuration.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.configuration.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory . getBeanDefinitionCount ( ) , equalTo ( int + int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; void ( ( int + int ) , org.springframework.context.annotation.configuration.ImportTests.ConfigurationWithImportAnnotation .class , org.springframework.context.annotation.configuration.ImportTests.OtherConfigurationWithImportAnnotation .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; void ( ( int + int ) , org.springframework.context.annotation.configuration.ImportTests.OtherConfiguration .class , org.springframework.context.annotation.configuration.ImportTests.ConfigurationWithImportAnnotation .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; void ( ( int + int ) , org.springframework.context.annotation.configuration.ImportTests.ConfigurationWithImportAnnotation .class , org.springframework.context.annotation.configuration.ImportTests.OtherConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; void ( ( int + int ) , org.springframework.context.annotation.configuration.ImportTests.AppConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( org.springframework.context.annotation.configuration.ITestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; void ( int + int , org.springframework.context.annotation.configuration.ImportTests.FirstLevel .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; void ( ( int + int ) , org.springframework.context.annotation.configuration.ImportTests.WithMultipleArgumentsToImportAnnotation .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.configuration.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.annotation.configuration.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.configuration.ImportTests.WithMultipleArgumentsThatWillCauseDuplication .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.configuration.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.configuration.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) ; assertThat ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory . getBeanDefinitionCount ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory . getBean ( STRING , ITestBean .class ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; void ( ( int + int ) , org.springframework.context.annotation.configuration.ImportTests.OuterConfig . org.springframework.context.annotation.configuration.ImportTests.OuterConfig.InnerConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { assertTrue ( org.springframework.context.annotation.configuration.ImportTests.InitBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; void ( ( int + int ) , org.springframework.context.annotation.configuration.ImportTests.ConfigAnnotated .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ImportTests.B .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeanFactory ( ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.context.annotation.configuration.ImportTests.B .class ) [ NUMBER ] , is ( STRING ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeanNamesForType ( org.springframework.context.annotation.configuration.ImportTests.A .class ) [ NUMBER ] , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; void ( ( int + int ) , org.springframework.context.annotation.configuration.ImportTests.ConfigurationWithImportAnnotation .class ) ; }  <METHOD_END>
