<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getCacheListeners ( ) ) ; boolean boolean = false ; for ( CacheListener org.springframework.data.gemfire.config.xml.CacheListener : org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getCacheListeners ( ) ) { boolean |= ( org.springframework.data.gemfire.config.xml.CacheListener instanceof org.springframework.data.gemfire.config.xml.SubRegionSubElementNamespaceTest.TestNoOpCacheListener ) ; } assertTrue ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.config.xml.SubRegionSubElementNamespaceTest.TestNoOpCacheListener .class . java.lang.String ( ) , org.springframework.data.gemfire.config.xml.Region . getName ( ) ) , boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getGatewaySenderIds ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getGatewaySenderIds ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Region ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getAsyncEventQueueIds ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getAsyncEventQueueIds ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final java.util.List<org.springframework.data.gemfire.config.xml.AsyncEvent> < AsyncEvent > java.util.List<org.springframework.data.gemfire.config.xml.AsyncEvent> ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
