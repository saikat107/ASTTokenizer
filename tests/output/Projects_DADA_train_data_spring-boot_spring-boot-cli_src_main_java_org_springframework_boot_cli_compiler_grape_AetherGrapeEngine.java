<METHOD_START> public void ( GroovyClassLoader org.springframework.boot.cli.compiler.grape.GroovyClassLoader , RepositorySystem org.springframework.boot.cli.compiler.grape.RepositorySystem , DefaultRepositorySystemSession org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> < RemoteRepository > java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> , DependencyResolutionContext org.springframework.boot.cli.compiler.grape.DependencyResolutionContext ) { this . org.springframework.boot.cli.compiler.grape.GroovyClassLoader = org.springframework.boot.cli.compiler.grape.GroovyClassLoader ; this . org.springframework.boot.cli.compiler.grape.RepositorySystem = org.springframework.boot.cli.compiler.grape.RepositorySystem ; this . org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession = org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession ; this . org.springframework.boot.cli.compiler.grape.DependencyResolutionContext = org.springframework.boot.cli.compiler.grape.DependencyResolutionContext ; this . java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> = new java.util.ArrayList <> ( ) ; java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> < RemoteRepository > java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> = new java.util.ArrayList <> ( java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> ) ; java.util.Collections . void ( java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> ) ; for ( RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository : java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> ) { void ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; } this . org.springframework.boot.cli.compiler.grape.ProgressReporter = org.springframework.boot.cli.compiler.grape.ProgressReporter ( this . org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.grape.ProgressReporter org.springframework.boot.cli.compiler.grape.ProgressReporter ( DefaultRepositorySystemSession org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession ) { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; if ( STRING . boolean ( java.lang.String ) || java.lang.Boolean . boolean ( STRING ) ) { return new DetailedProgressReporter ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , java.lang.System . java.io.PrintStream ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return new ProgressReporter ( ) { @ java.lang.Override public void void ( ) {				} } ; } else { return new SummaryProgressReporter ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , java.lang.System . java.io.PrintStream ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {				}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.util.Map java.util.Map ) { return java.lang.Object ( java.util.Map , java.util.Map ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.util.Map java.util.Map , java.util.Map ... java.util.Map[] ) { java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> < Exclusion > java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> = java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> ( java.util.Map ) ; java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> < Dependency > java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> = java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ( java.util.Map[] , java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> ) ; try { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = java.util.List<java.io.File> ( java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ) ; GroovyClassLoader org.springframework.boot.cli.compiler.grape.GroovyClassLoader = org.springframework.boot.cli.compiler.grape.GroovyClassLoader ( java.util.Map ) ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { org.springframework.boot.cli.compiler.grape.GroovyClassLoader . addURL ( java.io.File . java.net.URI ( ) . java.net.URL ( ) ) ; } } catch ( ArtifactResolutionException org.springframework.boot.cli.compiler.grape.ArtifactResolutionException ) { throw new DependencyResolutionFailedException ( org.springframework.boot.cli.compiler.grape.ArtifactResolutionException ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new DependencyResolutionFailedException ( java.net.MalformedURLException ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> < Exclusion > java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> < Exclusion > java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> = new java.util.ArrayList<org.springframework.boot.cli.compiler.grape.Exclusion> <> ( ) ; if ( java.util.Map<,> != null ) { java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = ( java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > ) java.util.Map<,> . get ( STRING ) ; if ( java.util.List<java.util.Map<java.lang.String,java.lang.Object>> != null ) { for ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> : java.util.List<java.util.Map<java.lang.String,java.lang.Object>> ) { java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> . add ( org.springframework.boot.cli.compiler.grape.Exclusion ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; } } } return java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.grape.Exclusion org.springframework.boot.cli.compiler.grape.Exclusion ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; return new Exclusion ( java.lang.String , java.lang.String , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> < Dependency > java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ( java.util.Map<?,?> < ? , ? > [] java.util.Map<?,?>[] , java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> < Exclusion > java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> ) { java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> < Dependency > java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> = new java.util.ArrayList<org.springframework.boot.cli.compiler.grape.Dependency> <> ( java.util.Map<?,?>[] . int ) ; for ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> : java.util.Map<?,?>[] ) { java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> . add ( org.springframework.boot.cli.compiler.grape.Dependency ( java.util.Map<,> , java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> ) ) ; } return java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.grape.Dependency org.springframework.boot.cli.compiler.grape.Dependency ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> < Exclusion > java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> ) { Artifact org.springframework.boot.cli.compiler.grape.Artifact = org.springframework.boot.cli.compiler.grape.Artifact ( java.util.Map<,> ) ; if ( boolean ( java.util.Map<,> ) ) { return new Dependency ( org.springframework.boot.cli.compiler.grape.Artifact , JavaScopes . COMPILE , false , java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> ) ; } return new Dependency ( org.springframework.boot.cli.compiler.grape.Artifact , JavaScopes . COMPILE , null , java.util.Collection<org.springframework.boot.cli.compiler.grape.Exclusion> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.grape.Artifact org.springframework.boot.cli.compiler.grape.Artifact ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<,> . get ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<,> . get ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<,> . get ( STRING ) ; if ( java.lang.String == null ) { java.lang.String = this . org.springframework.boot.cli.compiler.grape.DependencyResolutionContext . getManagedVersion ( java.lang.String , java.lang.String ) ; } java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<,> . get ( STRING ) ; java.lang.String java.lang.String = java.lang.String ( java.util.Map<,> ) ; return new DefaultArtifact ( java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<,> . get ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<,> . get ( STRING ) ; if ( java.lang.String == null ) { java.lang.String = java.lang.String ; if ( java.lang.String == null ) { java.lang.String = STRING ; } } else if ( java.lang.String != null && ! java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { java.lang.Boolean java.lang.Boolean = ( java.lang.Boolean ) java.util.Map<,> . get ( STRING ) ; return ( java.lang.Boolean == null ? true : java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> < Dependency > java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ( DependencyResult org.springframework.boot.cli.compiler.grape.DependencyResult ) { java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> < Dependency > java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> = new java.util.ArrayList<org.springframework.boot.cli.compiler.grape.Dependency> <> ( ) ; for ( ArtifactResult org.springframework.boot.cli.compiler.grape.ArtifactResult : org.springframework.boot.cli.compiler.grape.DependencyResult . getArtifactResults ( ) ) { java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> . add ( new Dependency ( org.springframework.boot.cli.compiler.grape.ArtifactResult . getArtifact ( ) , JavaScopes . COMPILE ) ) ; } return java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( DependencyResult org.springframework.boot.cli.compiler.grape.DependencyResult ) { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = new java.util.ArrayList<java.io.File> <> ( ) ; for ( ArtifactResult org.springframework.boot.cli.compiler.grape.ArtifactResult : org.springframework.boot.cli.compiler.grape.DependencyResult . getArtifactResults ( ) ) { java.util.List<java.io.File> . boolean ( org.springframework.boot.cli.compiler.grape.ArtifactResult . getArtifact ( ) . getFile ( ) ) ; } return java.util.List<java.io.File> ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.grape.GroovyClassLoader org.springframework.boot.cli.compiler.grape.GroovyClassLoader ( java.util.Map java.util.Map ) { GroovyClassLoader org.springframework.boot.cli.compiler.grape.GroovyClassLoader = ( GroovyClassLoader ) java.util.Map . java.lang.Object ( STRING ) ; return ( org.springframework.boot.cli.compiler.grape.GroovyClassLoader == null ? this . org.springframework.boot.cli.compiler.grape.GroovyClassLoader : org.springframework.boot.cli.compiler.grape.GroovyClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; RemoteRepository . RemoteRepository RemoteRepository.Builder = new RemoteRepository . RemoteRepository ( java.lang.String , STRING , java.lang.String ) ; RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository = RemoteRepository.Builder . build ( ) ; void ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; }  <METHOD_END>
<METHOD_START> protected void void ( RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository ) { if ( this . java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> . contains ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ) { return; } org.springframework.boot.cli.compiler.grape.RemoteRepository = org.springframework.boot.cli.compiler.grape.RemoteRepository ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; org.springframework.boot.cli.compiler.grape.RemoteRepository = org.springframework.boot.cli.compiler.grape.RemoteRepository ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; org.springframework.boot.cli.compiler.grape.RemoteRepository = org.springframework.boot.cli.compiler.grape.RemoteRepository ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; this . java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> . add ( NUMBER , org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.grape.RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository ( RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository ) { RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository = this . org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession . getMirrorSelector ( ) . getMirror ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; if ( org.springframework.boot.cli.compiler.grape.RemoteRepository != null ) { return org.springframework.boot.cli.compiler.grape.RemoteRepository ; } return org.springframework.boot.cli.compiler.grape.RemoteRepository ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.grape.RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository ( RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository ) { if ( org.springframework.boot.cli.compiler.grape.RemoteRepository . getProxy ( ) == null ) { RemoteRepository . RemoteRepository RemoteRepository.Builder = new RemoteRepository . RemoteRepository ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; RemoteRepository.Builder . setProxy ( this . org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession . getProxySelector ( ) . getProxy ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ) ; org.springframework.boot.cli.compiler.grape.RemoteRepository = RemoteRepository.Builder . build ( ) ; } return org.springframework.boot.cli.compiler.grape.RemoteRepository ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.grape.RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository ( RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository ) { if ( org.springframework.boot.cli.compiler.grape.RemoteRepository . getAuthentication ( ) == null ) { RemoteRepository . RemoteRepository RemoteRepository.Builder = new RemoteRepository . RemoteRepository ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; RemoteRepository.Builder . setAuthentication ( this . org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession . getAuthenticationSelector ( ) . getAuthentication ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ) ; org.springframework.boot.cli.compiler.grape.RemoteRepository = RemoteRepository.Builder . build ( ) ; } return org.springframework.boot.cli.compiler.grape.RemoteRepository ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> < java.lang.String , java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI [] java.net.URI[] ( java.util.Map java.util.Map , java.util.Map ... java.util.Map[] ) { return this . java.net.URI[] ( java.util.Map , null , java.util.Map[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI [] java.net.URI[] ( java.util.Map java.util.Map , java.util.List java.util.List , java.util.Map ... java.util.Map[] ) { java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> < Exclusion > java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> = java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> ( java.util.Map ) ; java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> < Dependency > java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> = java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ( java.util.Map[] , java.util.List<org.springframework.boot.cli.compiler.grape.Exclusion> ) ; try { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = java.util.List<java.io.File> ( java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ) ; java.util.List<java.net.URI> < java.net.URI > java.util.List<java.net.URI> = new java.util.ArrayList<java.net.URI> <> ( java.util.List<java.io.File> . int ( ) ) ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { java.util.List<java.net.URI> . boolean ( java.io.File . java.net.URI ( ) ) ; } return java.util.List<java.net.URI> . java.net.URI[] ( new java.net.URI [ java.util.List<java.net.URI> . int ( ) ] ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new DependencyResolutionFailedException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> < Dependency > java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> )			throws org.springframework.boot.cli.compiler.grape.ArtifactResolutionException { try { CollectRequest org.springframework.boot.cli.compiler.grape.CollectRequest = org.springframework.boot.cli.compiler.grape.CollectRequest ( java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ) ; DependencyRequest org.springframework.boot.cli.compiler.grape.DependencyRequest = org.springframework.boot.cli.compiler.grape.DependencyRequest ( org.springframework.boot.cli.compiler.grape.CollectRequest ) ; DependencyResult org.springframework.boot.cli.compiler.grape.DependencyResult = this . org.springframework.boot.cli.compiler.grape.RepositorySystem . resolveDependencies ( this . org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.DependencyRequest ) ; void ( org.springframework.boot.cli.compiler.grape.DependencyResult ) ; return java.util.List<java.io.File> ( org.springframework.boot.cli.compiler.grape.DependencyResult ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new DependencyResolutionFailedException ( java.lang.Exception ) ; } finally { this . org.springframework.boot.cli.compiler.grape.ProgressReporter . finished ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.grape.CollectRequest org.springframework.boot.cli.compiler.grape.CollectRequest ( java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> < Dependency > java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ) { CollectRequest org.springframework.boot.cli.compiler.grape.CollectRequest = new CollectRequest ( ( Dependency ) null , java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> , new java.util.ArrayList <> ( this . java.util.List<org.springframework.boot.cli.compiler.grape.RemoteRepository> ) ) ; org.springframework.boot.cli.compiler.grape.CollectRequest . setManagedDependencies ( this . org.springframework.boot.cli.compiler.grape.DependencyResolutionContext . getManagedDependencies ( ) ) ; return org.springframework.boot.cli.compiler.grape.CollectRequest ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.grape.DependencyRequest org.springframework.boot.cli.compiler.grape.DependencyRequest ( CollectRequest org.springframework.boot.cli.compiler.grape.CollectRequest ) { DependencyRequest org.springframework.boot.cli.compiler.grape.DependencyRequest = new DependencyRequest ( org.springframework.boot.cli.compiler.grape.CollectRequest , DependencyFilterUtils . classpathFilter ( JavaScopes . COMPILE , JavaScopes . RUNTIME ) ) ; return org.springframework.boot.cli.compiler.grape.DependencyRequest ; }  <METHOD_END>
<METHOD_START> private void void ( DependencyResult org.springframework.boot.cli.compiler.grape.DependencyResult ) { this . org.springframework.boot.cli.compiler.grape.DependencyResolutionContext . addManagedDependencies ( java.util.List<org.springframework.boot.cli.compiler.grape.Dependency> ( org.springframework.boot.cli.compiler.grape.DependencyResult ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map [] java.util.Map[] ( java.lang.ClassLoader java.lang.ClassLoader ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
