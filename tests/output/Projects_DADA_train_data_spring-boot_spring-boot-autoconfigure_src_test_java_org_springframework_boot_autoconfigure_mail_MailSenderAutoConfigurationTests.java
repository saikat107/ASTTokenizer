<METHOD_START> @ Before public void void ( ) { this . java.lang.String = java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String ) ; java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String , TestableInitialContextFactory .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; java.lang.Thread . java.lang.Thread ( ) . void ( new JndiPropertiesHidingClassLoader ( java.lang.Class<? extends org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests> ( ) . java.lang.ClassLoader ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { TestableInitialContextFactory . clearAll ( ) ; if ( this . java.lang.String != null ) { java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String , this . java.lang.String ) ; } else { java.lang.System . java.lang.String ( javax.naming.Context . java.lang.String ) ; } if ( this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . close ( ) ; } java.lang.Thread . java.lang.Thread ( ) . void ( this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.EmptyConfig .class , STRING + java.lang.String ) ; JavaMailSenderImpl org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl = ( JavaMailSenderImpl ) this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBean ( JavaMailSender .class ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getHost ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getPort ( ) ) . isEqualTo ( JavaMailSenderImpl . DEFAULT_PORT ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getProtocol ( ) ) . isEqualTo ( JavaMailSenderImpl . DEFAULT_PROTOCOL ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.EmptyConfig .class , STRING + java.lang.String , STRING , STRING , STRING , STRING , STRING ) ; JavaMailSenderImpl org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl = ( JavaMailSenderImpl ) this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBean ( JavaMailSender .class ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getHost ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getPort ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getUsername ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getPassword ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getDefaultEncoding ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getProtocol ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.EmptyConfig .class , STRING , STRING ) ; JavaMailSenderImpl org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl = ( JavaMailSenderImpl ) this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBean ( JavaMailSender .class ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getJavaMailProperties ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.EmptyConfig .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBeansOfType ( JavaMailSender .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.ManualMailConfiguration .class , STRING , STRING , STRING ) ; JavaMailSenderImpl org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl = ( JavaMailSenderImpl ) this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBean ( JavaMailSender .class ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getUsername ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl . getPassword ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.naming.NamingException { Session org.springframework.boot.autoconfigure.mail.Session = org.springframework.boot.autoconfigure.mail.Session ( STRING ) ; void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.EmptyConfig .class , STRING ) ; Session org.springframework.boot.autoconfigure.mail.Session = this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBean ( Session .class ) ; assertThat ( org.springframework.boot.autoconfigure.mail.Session ) . isEqualTo ( org.springframework.boot.autoconfigure.mail.Session ) ; assertThat ( this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBean ( JavaMailSenderImpl .class ) . getSession ( ) ) . isEqualTo ( org.springframework.boot.autoconfigure.mail.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.naming.NamingException { org.springframework.boot.autoconfigure.mail.Session ( STRING ) ; void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.EmptyConfig .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBeanNamesForType ( Session .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBean ( JavaMailSender .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.naming.NamingException { org.springframework.boot.autoconfigure.mail.Session ( STRING ) ; void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.EmptyConfig .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBeanNamesForType ( Session .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBeanNamesForType ( JavaMailSender .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.naming.NamingException { this . org.springframework.boot.autoconfigure.mail.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.mail.ExpectedException . expectMessage ( STRING ) ; void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.EmptyConfig .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.mail.MessagingException { void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.MockMailConfiguration .class , STRING , STRING ) ; JavaMailSenderImpl org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl = this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBean ( JavaMailSenderImpl .class ) ; verify ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl , times ( NUMBER ) ) . testConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.mail.MessagingException { void ( org.springframework.boot.autoconfigure.mail.MailSenderAutoConfigurationTests.MockMailConfiguration .class , STRING , STRING ) ; JavaMailSenderImpl org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl = this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . getBean ( JavaMailSenderImpl .class ) ; verify ( org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl , never ( ) ) . testConnection ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mail.Session org.springframework.boot.autoconfigure.mail.Session ( java.lang.String java.lang.String )			throws java.lang.IllegalStateException , javax.naming.NamingException { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; Session org.springframework.boot.autoconfigure.mail.Session = Session . getDefaultInstance ( java.util.Properties ) ; TestableInitialContextFactory . bind ( java.lang.String , org.springframework.boot.autoconfigure.mail.Session ) ; return org.springframework.boot.autoconfigure.mail.Session ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext ( new java.lang.Class<?> < ? > [] { java.lang.Class<> } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . register ( MailSenderAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . register ( MailSenderValidatorAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.boot.autoconfigure.mail.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.mail.JavaMailSender org.springframework.boot.autoconfigure.mail.JavaMailSender ( ) { return new JavaMailSenderImpl ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl org.springframework.boot.autoconfigure.mail.JavaMailSenderImpl ( ) { return mock ( JavaMailSenderImpl .class ) ; }  <METHOD_END>
