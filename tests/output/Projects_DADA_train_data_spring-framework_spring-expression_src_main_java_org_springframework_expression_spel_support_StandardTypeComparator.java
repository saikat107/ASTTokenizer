<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null || java.lang.Object == null ) { return true ; } if ( java.lang.Object instanceof java.lang.Number && java.lang.Object instanceof java.lang.Number ) { return true ; } if ( java.lang.Object instanceof java.lang.Comparable ) { return true ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public int int ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.support.SpelEvaluationException { if ( java.lang.Object == null ) { return ( java.lang.Object == null ? NUMBER : - NUMBER ) ; } else if ( java.lang.Object == null ) { return NUMBER ; } if ( java.lang.Object instanceof java.lang.Number && java.lang.Object instanceof java.lang.Number ) { java.lang.Number java.lang.Number = ( java.lang.Number ) java.lang.Object ; java.lang.Number java.lang.Number = ( java.lang.Number ) java.lang.Object ; if ( java.lang.Number instanceof java.math.BigDecimal || java.lang.Number instanceof java.math.BigDecimal ) { java.math.BigDecimal java.math.BigDecimal = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigDecimal .class ) ; java.math.BigDecimal java.math.BigDecimal = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigDecimal .class ) ; return java.math.BigDecimal . int ( java.math.BigDecimal ) ; } else if ( java.lang.Number instanceof java.lang.Double || java.lang.Number instanceof java.lang.Double ) { return java.lang.Double . int ( java.lang.Number . double ( ) , java.lang.Number . double ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Float || java.lang.Number instanceof java.lang.Float ) { return java.lang.Float . int ( java.lang.Number . float ( ) , java.lang.Number . float ( ) ) ; } else if ( java.lang.Number instanceof java.math.BigInteger || java.lang.Number instanceof java.math.BigInteger ) { java.math.BigInteger java.math.BigInteger = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigInteger .class ) ; java.math.BigInteger java.math.BigInteger = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigInteger .class ) ; return java.math.BigInteger . int ( java.math.BigInteger ) ; } else if ( java.lang.Number instanceof java.lang.Long || java.lang.Number instanceof java.lang.Long ) { return int ( java.lang.Number . long ( ) , java.lang.Number . long ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Integer || java.lang.Number instanceof java.lang.Integer ) { return int ( java.lang.Number . int ( ) , java.lang.Number . int ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Short || java.lang.Number instanceof java.lang.Short ) { return int ( java.lang.Number . short ( ) , java.lang.Number . short ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Byte || java.lang.Number instanceof java.lang.Byte ) { return int ( java.lang.Number . byte ( ) , java.lang.Number . byte ( ) ) ; } else { return java.lang.Double . int ( java.lang.Number . double ( ) , java.lang.Number . double ( ) ) ; } } try { if ( java.lang.Object instanceof java.lang.Comparable ) { return ( ( java.lang.Comparable<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . int ( java.lang.Object ) ; } } catch ( java.lang.ClassCastException java.lang.ClassCastException ) { throw new SpelEvaluationException ( java.lang.ClassCastException , SpelMessage . NOT_COMPARABLE , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } throw new SpelEvaluationException ( SpelMessage . NOT_COMPARABLE , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static int int ( long long , long long ) { return ( long < long ? - NUMBER : ( long > long ? NUMBER : NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private static int int ( int int , int int ) { return ( int < int ? - NUMBER : ( int > int ? NUMBER : NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private static int int ( short short , short short ) { return short - short ; }  <METHOD_END>
<METHOD_START> private static int int ( byte byte , byte byte ) { return byte - byte ; }  <METHOD_END>
