<METHOD_START> public void ( Property org.springframework.data.solr.core.mapping.Property , PersistentEntity < ? , SolrPersistentProperty > org.springframework.data.solr.core.mapping.PersistentEntity<?,org.springframework.data.solr.core.mapping.SolrPersistentProperty> , SimpleTypeHolder org.springframework.data.solr.core.mapping.SimpleTypeHolder ) { super( org.springframework.data.solr.core.mapping.Property , org.springframework.data.solr.core.mapping.PersistentEntity<,org.springframework.data.solr.core.mapping.SolrPersistentProperty> , org.springframework.data.solr.core.mapping.SimpleTypeHolder ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = java.lang.String ( ) ; if ( StringUtils . hasText ( java.lang.String ) && ! java.lang.String . boolean ( java.lang.String ) ) { return java.lang.String ; } return getName ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = null ; if ( isAnnotationPresent ( org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache .class ) ) { java.lang.String = findAnnotation ( org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache .class ) . get ( ) . value ( ) ; } else if ( isAnnotationPresent ( Indexed .class ) ) { java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> < Indexed > java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> = findAnnotation ( Indexed .class ) ; if ( java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . isPresent ( ) ) { java.lang.String = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . value ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . name ( ) ; } } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( boolean ( ) || isVersionProperty ( ) ) { return false ; } java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> < Indexed > java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> ( ) ; if ( java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . isPresent ( ) && java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . readonly ( ) ) { return true ; } if ( ! java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . isPresent ( ) && ! java.util.Optional<org.apache.solr.client.solrj.beans.Field> ( ) . isPresent ( ) ) { return true ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return super. isIdProperty ( ) || java.util.Set<java.lang.String> . boolean ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.solr.core.mapping.Association<org.springframework.data.solr.core.mapping.SolrPersistentProperty> < SolrPersistentProperty > org.springframework.data.solr.core.mapping.Association<org.springframework.data.solr.core.mapping.SolrPersistentProperty> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { java.lang.String java.lang.String = java.lang.String ( ) ; return java.lang.String != null ? ( java.lang.String . boolean ( Criteria . WILDCARD ) || java.lang.String . boolean ( Criteria . WILDCARD ) ) : false ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<org.apache.solr.client.solrj.beans.Field> < org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache > java.util.Optional<org.apache.solr.client.solrj.beans.Field> ( ) { return findAnnotation ( org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache .class ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> < Indexed > java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> ( ) { return findAnnotation ( Indexed .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { java.lang.Float java.lang.Float = java.lang.Float ( ) ; return java.lang.Float != null && ! java.lang.Float . boolean ( java.lang.Float ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Float java.lang.Float ( ) { java.lang.Float java.lang.Float = java.lang.Float . float ; java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> < Indexed > java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> ( ) ; if ( java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . isPresent ( ) ) { java.lang.Float = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . boost ( ) ; } return java.lang.Float . boolean ( java.lang.Float ) ? null : java.lang.Float ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( boolean ( ) ) { return true ; } java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> < Indexed > java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> ( ) ; return java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . isPresent ( ) && java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . searchable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( boolean ( ) ) { return true ; } java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> < Indexed > java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> ( ) ; return java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . isPresent ( ) && java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . stored ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isCollectionLike ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> < Indexed > java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> ( ) ; if ( java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . isPresent ( ) ) { if ( StringUtils . hasText ( java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . type ( ) ) ) { return java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . type ( ) ; } } return getActualType ( ) . getSimpleName ( ) . toLowerCase ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> < Indexed > java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> ( ) ; if ( java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . isPresent ( ) ) { if ( StringUtils . hasText ( java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . defaultValue ( ) ) ) { return java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . defaultValue ( ) ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> < Indexed > java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> ( ) ; if ( java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . isPresent ( ) ) { if ( java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . copyTo ( ) . length > NUMBER ) { return CollectionUtils . arrayToList ( java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . copyTo ( ) ) ; } } return java.util.Collections . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> < Indexed > java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> = java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> ( ) ; return java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . isPresent ( ) && java.util.Optional<org.springframework.data.solr.core.mapping.Indexed> . get ( ) . required ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return findAnnotation ( Score .class ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return findAnnotation ( Dynamic .class ) . isPresent ( ) ; }  <METHOD_END>
