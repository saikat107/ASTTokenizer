<METHOD_START> @ After public void void ( ) { SpringContextBootstrappingInitializer . applicationContext = null ; SpringContextBootstrappingInitializer . contextRefreshedEvent = null ; SpringContextBootstrappingInitializer . setBeanClassLoader ( null ) ; SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigOne .class ) ; SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigTwo .class ) ; }  <METHOD_END>
<METHOD_START> protected static java.util.Properties java.util.Properties ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( java.lang.String , java.lang.String ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> protected static java.util.Properties java.util.Properties ( final java.util.Properties java.util.Properties , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { java.util.Properties . java.lang.Object ( java.lang.String , java.lang.String ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; SpringContextBootstrappingInitializer . applicationContext = org.springframework.data.gemfire.support.ConfigurableApplicationContext ; assertThat ( SpringContextBootstrappingInitializer . getApplicationContext ( ) , is ( sameInstance ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; SpringContextBootstrappingInitializer . getApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringContextBootstrappingInitializer . applicationContext , is ( nullValue ( ) ) ) ; SpringContextBootstrappingInitializer . setBeanClassLoader ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . isActive ( ) ) . thenReturn ( false ) ; SpringContextBootstrappingInitializer . applicationContext = org.springframework.data.gemfire.support.ConfigurableApplicationContext ; SpringContextBootstrappingInitializer . setBeanClassLoader ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . isActive ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . isActive ( ) ) . thenReturn ( true ) ; org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( STRING ) ; try { SpringContextBootstrappingInitializer . applicationContext = org.springframework.data.gemfire.support.ConfigurableApplicationContext ; SpringContextBootstrappingInitializer . setBeanClassLoader ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ; } finally { verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . isActive ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( STRING + STRING ) ; new SpringContextBootstrappingInitializer ( ) . createApplicationContext ( null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final AnnotationConfigApplicationContext org.springframework.data.gemfire.support.AnnotationConfigApplicationContext = mock ( AnnotationConfigApplicationContext .class , STRING ) ; final ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigOne .class , org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigTwo .class } ; SpringContextBootstrappingInitializer . register ( java.lang.Class<?>[] [ NUMBER ] ) ; SpringContextBootstrappingInitializer . register ( java.lang.Class<?>[] [ NUMBER ] ) ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) { @ java.lang.Override org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] ) { return ( ObjectUtils . isEmpty ( java.lang.String[] ) ? org.springframework.data.gemfire.support.AnnotationConfigApplicationContext : org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ; } } ; ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . createApplicationContext ( null , null ) ; assertThat ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , is ( sameInstance ( ( ConfigurableApplicationContext ) org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ) ) ) ; verify ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , times ( NUMBER ) ) . register ( java.lang.Class<?>[] [ NUMBER ] , java.lang.Class<?>[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] ) { return ( ObjectUtils . isEmpty ( java.lang.String[] ) ? org.springframework.data.gemfire.support.AnnotationConfigApplicationContext : org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final AnnotationConfigApplicationContext org.springframework.data.gemfire.support.AnnotationConfigApplicationContext = mock ( AnnotationConfigApplicationContext .class , STRING ) ; final ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; java.lang.String [] java.lang.String[] = { STRING } ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) { @ java.lang.Override org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] ) { return ( ObjectUtils . isEmpty ( java.lang.String[] ) ? org.springframework.data.gemfire.support.AnnotationConfigApplicationContext : org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ; } } ; ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . createApplicationContext ( java.lang.String[] , null ) ; assertThat ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , is ( sameInstance ( ( ConfigurableApplicationContext ) org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ) ) ) ; verify ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , times ( NUMBER ) ) . scan ( eq ( java.lang.String[] [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] ) { return ( ObjectUtils . isEmpty ( java.lang.String[] ) ? org.springframework.data.gemfire.support.AnnotationConfigApplicationContext : org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; final ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) { @ java.lang.Override org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] ) { return ( ObjectUtils . isEmpty ( java.lang.String[] ) ? org.springframework.data.gemfire.support.ConfigurableApplicationContext : org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ; } } ; ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . createApplicationContext ( null , new java.lang.String [] { STRING } ) ; assertThat ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , is ( sameInstance ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] ) { return ( ObjectUtils . isEmpty ( java.lang.String[] ) ? org.springframework.data.gemfire.support.ConfigurableApplicationContext : org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.data.gemfire.support.AbstractApplicationContext = mock ( AbstractApplicationContext .class , STRING ) ; SpringContextBootstrappingInitializer . setBeanClassLoader ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) ; assertSame ( org.springframework.data.gemfire.support.AbstractApplicationContext , org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . initApplicationContext ( org.springframework.data.gemfire.support.AbstractApplicationContext ) ) ; verify ( org.springframework.data.gemfire.support.AbstractApplicationContext , times ( NUMBER ) ) . addApplicationListener ( same ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ) ) ; verify ( org.springframework.data.gemfire.support.AbstractApplicationContext , times ( NUMBER ) ) . registerShutdownHook ( ) ; verify ( org.springframework.data.gemfire.support.AbstractApplicationContext , times ( NUMBER ) ) . setClassLoader ( eq ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( STRING ) ; new SpringContextBootstrappingInitializer ( ) . initApplicationContext ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; assertThat ( new SpringContextBootstrappingInitializer ( ) . refreshApplicationContext ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) , is ( sameInstance ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ) ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( STRING ) ; new SpringContextBootstrappingInitializer ( ) . refreshApplicationContext ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.data.gemfire.support.AnnotationConfigApplicationContext = mock ( AnnotationConfigApplicationContext .class , STRING ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigOne .class , org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigTwo .class } ; assertThat ( new SpringContextBootstrappingInitializer ( ) . registerAnnotatedClasses ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , java.lang.Class<?>[] ) , is ( sameInstance ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ) ) ) ; verify ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , times ( NUMBER ) ) . register ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.data.gemfire.support.AnnotationConfigApplicationContext = mock ( AnnotationConfigApplicationContext .class , STRING ) ; assertThat ( new SpringContextBootstrappingInitializer ( ) . registerAnnotatedClasses ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , new java.lang.Class<?> < ? > [ NUMBER ] ) , is ( sameInstance ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ) ) ) ; verify ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , never ( ) ) . register ( any ( java.lang.Class [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; assertThat ( new SpringContextBootstrappingInitializer ( ) . registerAnnotatedClasses ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , new java.lang.Class<?> < ? > [] { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigOne .class } ) , is ( sameInstance ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.data.gemfire.support.AnnotationConfigApplicationContext = mock ( AnnotationConfigApplicationContext .class , STRING ) ; java.lang.String [] java.lang.String[] = { STRING , STRING } ; assertThat ( new SpringContextBootstrappingInitializer ( ) . scanBasePackages ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , java.lang.String[] ) , is ( sameInstance ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ) ) ) ; verify ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , times ( NUMBER ) ) . scan ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.data.gemfire.support.AnnotationConfigApplicationContext = mock ( AnnotationConfigApplicationContext .class , STRING ) ; assertThat ( new SpringContextBootstrappingInitializer ( ) . scanBasePackages ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , null ) , is ( sameInstance ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ) ) ) ; verify ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , never ( ) ) . scan ( any ( java.lang.String [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; assertThat ( new SpringContextBootstrappingInitializer ( ) . scanBasePackages ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , new java.lang.String [] { STRING } ) , is ( sameInstance ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.data.gemfire.support.AbstractApplicationContext = mock ( AbstractApplicationContext .class , STRING ) ; SpringContextBootstrappingInitializer . setBeanClassLoader ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ; assertThat ( new SpringContextBootstrappingInitializer ( ) . setClassLoader ( org.springframework.data.gemfire.support.AbstractApplicationContext ) , is ( sameInstance ( org.springframework.data.gemfire.support.AbstractApplicationContext ) ) ) ; verify ( org.springframework.data.gemfire.support.AbstractApplicationContext , times ( NUMBER ) ) . setClassLoader ( eq ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; SpringContextBootstrappingInitializer . setBeanClassLoader ( java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ) ; assertThat ( new SpringContextBootstrappingInitializer ( ) . setClassLoader ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) , is ( sameInstance ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.data.gemfire.support.AbstractApplicationContext = mock ( AbstractApplicationContext .class , STRING ) ; SpringContextBootstrappingInitializer . setBeanClassLoader ( null ) ; assertThat ( new SpringContextBootstrappingInitializer ( ) . setClassLoader ( org.springframework.data.gemfire.support.AbstractApplicationContext ) , is ( sameInstance ( org.springframework.data.gemfire.support.AbstractApplicationContext ) ) ) ; verify ( org.springframework.data.gemfire.support.AbstractApplicationContext , never ( ) ) . setClassLoader ( any ( java.lang.ClassLoader .class ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( final java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return argThat ( argument -> { assertThat ( argument instanceof Class < ? > [] , is ( true ) ) ; return Arrays . equals ( annotatedClasses , ( Class < ? > [] ) argument ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new SpringContextBootstrappingInitializer ( ) . nullSafeGetApplicationContextId ( null ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.data.gemfire.support.ApplicationContext = mock ( ApplicationContext .class , STRING ) ; when ( org.springframework.data.gemfire.support.ApplicationContext . getId ( ) ) . thenReturn ( STRING ) ; assertThat ( new SpringContextBootstrappingInitializer ( ) . nullSafeGetApplicationContextId ( org.springframework.data.gemfire.support.ApplicationContext ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final AnnotationConfigApplicationContext org.springframework.data.gemfire.support.AnnotationConfigApplicationContext = mock ( AnnotationConfigApplicationContext .class , STRING ) ; doNothing ( ) . when ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ) . addApplicationListener ( any ( ApplicationListener .class ) ) ; doNothing ( ) . when ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ) . registerShutdownHook ( ) ; doNothing ( ) . when ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ) . refresh ( ) ; doNothing ( ) . when ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ) . register ( Matchers .< java.lang.Class<?> < ? > [] > anyVararg ( ) ) ; when ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext . isRunning ( ) ) . thenReturn ( true ) ; assertNull ( SpringContextBootstrappingInitializer . applicationContext ) ; SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigOne .class ) ; SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigTwo .class ) ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) { @ java.lang.Override protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( java.lang.String [] java.lang.String[] ) { return org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ; } } ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . init ( java.util.Properties ( STRING , STRING ) ) ; verify ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , times ( NUMBER ) ) . addApplicationListener ( same ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ) ) ; verify ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , times ( NUMBER ) ) . registerShutdownHook ( ) ; verify ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , times ( NUMBER ) ) . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigOne .class , org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestAppConfigTwo .class ) ; verify ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , never ( ) ) . scan ( any ( java.lang.String [] .class ) ) ; assertEquals ( org.springframework.data.gemfire.support.AnnotationConfigApplicationContext , SpringContextBootstrappingInitializer . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( java.lang.String [] java.lang.String[] ) { return org.springframework.data.gemfire.support.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . isActive ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . getId ( ) ) . thenReturn ( STRING ) ; SpringContextBootstrappingInitializer . applicationContext = org.springframework.data.gemfire.support.ConfigurableApplicationContext ; assertSame ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , SpringContextBootstrappingInitializer . getApplicationContext ( ) ) ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . init ( java.util.Properties ( STRING , STRING ) ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , never ( ) ) . addApplicationListener ( any ( SpringContextBootstrappingInitializer .class ) ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , never ( ) ) . registerShutdownHook ( ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , never ( ) ) . refresh ( ) ; assertSame ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , SpringContextBootstrappingInitializer . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( SpringContextBootstrappingInitializer . applicationContext ) ; final ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . isRunning ( ) ) . thenReturn ( true ) ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) { @ java.lang.Override protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] , final java.lang.String [] java.lang.String[] ) { return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; } } ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . init ( java.util.Properties ( SpringContextBootstrappingInitializer . CONTEXT_CONFIG_LOCATIONS_PARAMETER , STRING ) ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . addApplicationListener ( same ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ) ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . registerShutdownHook ( ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . refresh ( ) ; assertSame ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , SpringContextBootstrappingInitializer . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] , final java.lang.String [] java.lang.String[] ) { return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . isActive ( ) ) . thenReturn ( false ) ; SpringContextBootstrappingInitializer . applicationContext = org.springframework.data.gemfire.support.ConfigurableApplicationContext ; assertSame ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , SpringContextBootstrappingInitializer . getApplicationContext ( ) ) ; final ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . isRunning ( ) ) . thenReturn ( true ) ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) { @ java.lang.Override protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] , final java.lang.String [] java.lang.String[] ) { return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; } } ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . init ( java.util.Properties ( SpringContextBootstrappingInitializer . BASE_PACKAGES_PARAMETER , STRING ) ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . addApplicationListener ( same ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ) ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . registerShutdownHook ( ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . refresh ( ) ; assertSame ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , SpringContextBootstrappingInitializer . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] , final java.lang.String [] java.lang.String[] ) { return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { assertThat ( SpringContextBootstrappingInitializer . applicationContext , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expect ( ApplicationContextException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( isA ( java.lang.IllegalArgumentException .class ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( containsString ( STRING ) ) ; new SpringContextBootstrappingInitializer ( ) . init ( java.util.Properties ( java.util.Properties ( SpringContextBootstrappingInitializer . CONTEXT_CONFIG_LOCATIONS_PARAMETER , STRING ) , SpringContextBootstrappingInitializer . BASE_PACKAGES_PARAMETER , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { assertNull ( SpringContextBootstrappingInitializer . applicationContext ) ; final ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . isRunning ( ) ) . thenReturn ( false ) ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) { @ java.lang.Override protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] , final java.lang.String [] java.lang.String[] ) { return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; } } ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . init ( java.util.Properties ( SpringContextBootstrappingInitializer . BASE_PACKAGES_PARAMETER , STRING ) ) ; SpringContextBootstrappingInitializer . getApplicationContext ( ) ; } catch ( ApplicationContextException org.springframework.data.gemfire.support.ApplicationContextException ) { assertTrue ( org.springframework.data.gemfire.support.ApplicationContextException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.support.ApplicationContextException . getCause ( ) instanceof java.lang.IllegalStateException ) ; assertEquals ( STRING , org.springframework.data.gemfire.support.ApplicationContextException . getCause ( ) . getMessage ( ) ) ; throw ( java.lang.IllegalStateException ) org.springframework.data.gemfire.support.ApplicationContextException . getCause ( ) ; } finally { verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . addApplicationListener ( same ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ) ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . registerShutdownHook ( ) ; verify ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , times ( NUMBER ) ) . refresh ( ) ; assertNull ( SpringContextBootstrappingInitializer . applicationContext ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( final java.lang.String [] java.lang.String[] , final java.lang.String [] java.lang.String[] ) { return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Throwable { final Log org.springframework.data.gemfire.support.Log = mock ( Log .class , STRING ) ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) { @ java.lang.Override protected org.springframework.data.gemfire.support.Log org.springframework.data.gemfire.support.Log ( ) { return org.springframework.data.gemfire.support.Log ; } @ java.lang.Override protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { throw new java.lang.IllegalStateException ( STRING ) ; } } ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . init ( java.util.Properties ( SpringContextBootstrappingInitializer . CONTEXT_CONFIG_LOCATIONS_PARAMETER , STRING ) ) ; } catch ( ApplicationContextException org.springframework.data.gemfire.support.ApplicationContextException ) { assertTrue ( org.springframework.data.gemfire.support.ApplicationContextException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.support.ApplicationContextException . getCause ( ) instanceof java.lang.IllegalStateException ) ; assertEquals ( STRING , org.springframework.data.gemfire.support.ApplicationContextException . getCause ( ) . getMessage ( ) ) ; throw org.springframework.data.gemfire.support.ApplicationContextException . getCause ( ) ; } finally { verify ( org.springframework.data.gemfire.support.Log , times ( NUMBER ) ) . error ( eq ( STRING ) , any ( java.lang.RuntimeException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.support.Log org.springframework.data.gemfire.support.Log ( ) { return org.springframework.data.gemfire.support.Log ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , ApplicationContextEvent org.springframework.data.gemfire.support.ApplicationContextEvent ) { assertThat ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener . boolean ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener . org.springframework.data.gemfire.support.ApplicationContextEvent ( ) , is ( sameInstance ( org.springframework.data.gemfire.support.ApplicationContextEvent ) ) ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) { assertThat ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener . boolean ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener . org.springframework.data.gemfire.support.ApplicationContextEvent ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; SpringContextBootstrappingInitializer . contextRefreshedEvent = mock ( ContextRefreshedEvent .class , STRING ) ; assertThat ( SpringContextBootstrappingInitializer . contextRefreshedEvent , isA ( ContextRefreshedEvent .class ) ) ; new SpringContextBootstrappingInitializer ( ) . onApplicationEvent ( mock ( ContextClosedEvent .class , STRING ) ) ; assertThat ( SpringContextBootstrappingInitializer . contextRefreshedEvent , is ( nullValue ( ) ) ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } finally { SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; assertThat ( SpringContextBootstrappingInitializer . contextRefreshedEvent , is ( nullValue ( ) ) ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; ContextRefreshedEvent org.springframework.data.gemfire.support.ContextRefreshedEvent = mock ( ContextRefreshedEvent .class , STRING ) ; new SpringContextBootstrappingInitializer ( ) . onApplicationEvent ( org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; assertThat ( SpringContextBootstrappingInitializer . contextRefreshedEvent , is ( sameInstance ( org.springframework.data.gemfire.support.ContextRefreshedEvent ) ) ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; } finally { SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; assertThat ( SpringContextBootstrappingInitializer . contextRefreshedEvent , is ( nullValue ( ) ) ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; new SpringContextBootstrappingInitializer ( ) . onApplicationEvent ( mock ( ContextStartedEvent .class , STRING ) ) ; assertThat ( SpringContextBootstrappingInitializer . contextRefreshedEvent , is ( nullValue ( ) ) ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } finally { SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; ContextRefreshedEvent org.springframework.data.gemfire.support.ContextRefreshedEvent = mock ( ContextRefreshedEvent .class , STRING ) ; SpringContextBootstrappingInitializer . contextRefreshedEvent = org.springframework.data.gemfire.support.ContextRefreshedEvent ; assertThat ( SpringContextBootstrappingInitializer . contextRefreshedEvent , is ( sameInstance ( org.springframework.data.gemfire.support.ContextRefreshedEvent ) ) ) ; new SpringContextBootstrappingInitializer ( ) . onApplicationEvent ( mock ( ContextStoppedEvent .class , STRING ) ) ; assertThat ( SpringContextBootstrappingInitializer . contextRefreshedEvent , is ( sameInstance ( org.springframework.data.gemfire.support.ContextRefreshedEvent ) ) ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } finally { SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; assertThat ( SpringContextBootstrappingInitializer . contextRefreshedEvent , is ( nullValue ( ) ) ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; ContextRefreshedEvent org.springframework.data.gemfire.support.ContextRefreshedEvent = mock ( ContextRefreshedEvent .class , STRING ) ; new SpringContextBootstrappingInitializer ( ) . onApplicationEvent ( org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; assertThat ( SpringContextBootstrappingInitializer . contextRefreshedEvent , is ( sameInstance ( org.springframework.data.gemfire.support.ContextRefreshedEvent ) ) ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; } finally { SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . unregister ( SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; new SpringContextBootstrappingInitializer ( ) . onApplicationEvent ( mock ( ContextRefreshedEvent .class , STRING ) ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } finally { SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( SpringContextBootstrappingInitializer . contextRefreshedEvent ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } finally { SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ContextRefreshedEvent org.springframework.data.gemfire.support.ContextRefreshedEvent = new ContextRefreshedEvent ( mock ( ApplicationContext .class ) ) ; new SpringContextBootstrappingInitializer ( ) . onApplicationEvent ( org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; } finally { SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class , STRING ) ; SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer = new SpringContextBootstrappingInitializer ( ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = new org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ( STRING ) ; try { org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; ContextRefreshedEvent org.springframework.data.gemfire.support.ContextRefreshedEvent = new ContextRefreshedEvent ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . onApplicationEvent ( org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener = SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; ContextStoppedEvent org.springframework.data.gemfire.support.ContextStoppedEvent = new ContextStoppedEvent ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . onApplicationEvent ( org.springframework.data.gemfire.support.ContextStoppedEvent ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . onApplicationEvent ( org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener , org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; ContextClosedEvent org.springframework.data.gemfire.support.ContextClosedEvent = new ContextClosedEvent ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer . onApplicationEvent ( org.springframework.data.gemfire.support.ContextClosedEvent ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; SpringContextBootstrappingInitializer . register ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; void ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } finally { SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; SpringContextBootstrappingInitializer . unregister ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.TestApplicationListener ) ; } }  <METHOD_END>
<METHOD_START> public void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.support.ApplicationContextEvent org.springframework.data.gemfire.support.ApplicationContextEvent ( ) { ApplicationContextEvent org.springframework.data.gemfire.support.ApplicationContextEvent = this . org.springframework.data.gemfire.support.ApplicationContextEvent ; this . org.springframework.data.gemfire.support.ApplicationContextEvent = null ; return org.springframework.data.gemfire.support.ApplicationContextEvent ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { boolean boolean = this . boolean ; this . boolean = false ; return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final ContextRefreshedEvent org.springframework.data.gemfire.support.ContextRefreshedEvent ) { this . org.springframework.data.gemfire.support.ApplicationContextEvent = org.springframework.data.gemfire.support.ContextRefreshedEvent ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
