<METHOD_START> @ Test public void void ( ) { MqttPahoMessageHandler org.springframework.integration.mqtt.MqttPahoMessageHandler = new MqttPahoMessageHandler ( STRING , STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setDefaultTopic ( STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . start ( ) ; MqttPahoMessageDrivenChannelAdapter org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter = new MqttPahoMessageDrivenChannelAdapter ( STRING , STRING , STRING ) ; QueueChannel org.springframework.integration.mqtt.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setOutputChannel ( org.springframework.integration.mqtt.QueueChannel ) ; ThreadPoolTaskScheduler org.springframework.integration.mqtt.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.mqtt.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setTaskScheduler ( org.springframework.integration.mqtt.ThreadPoolTaskScheduler ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . start ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . stop ( ) ; Message < ? > org.springframework.integration.mqtt.Message<?> = org.springframework.integration.mqtt.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mqtt.Message<> ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . stop ( ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getHeaders ( ) . get ( MqttHeaders . RECEIVED_TOPIC ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MqttPahoMessageHandler org.springframework.integration.mqtt.MqttPahoMessageHandler = new MqttPahoMessageHandler ( STRING , STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setDefaultTopic ( STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . start ( ) ; MqttPahoMessageDrivenChannelAdapter org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter = new MqttPahoMessageDrivenChannelAdapter ( STRING , STRING ) ; QueueChannel org.springframework.integration.mqtt.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setOutputChannel ( org.springframework.integration.mqtt.QueueChannel ) ; ThreadPoolTaskScheduler org.springframework.integration.mqtt.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.mqtt.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setTaskScheduler ( org.springframework.integration.mqtt.ThreadPoolTaskScheduler ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . start ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . addTopic ( STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.mqtt.Message<?> = org.springframework.integration.mqtt.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mqtt.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getHeaders ( ) . get ( MqttHeaders . RECEIVED_TOPIC ) ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . addTopic ( STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( MqttHeaders . TOPIC , STRING ) . build ( ) ) ; org.springframework.integration.mqtt.Message<?> = org.springframework.integration.mqtt.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mqtt.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getHeaders ( ) . get ( MqttHeaders . RECEIVED_TOPIC ) ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . removeTopic ( STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( MqttHeaders . TOPIC , STRING ) . build ( ) ) ; org.springframework.integration.mqtt.Message<?> = org.springframework.integration.mqtt.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.mqtt.Message<> ) ; try { org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . addTopic ( STRING ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.mqtt.MessagingException ) { assertEquals ( STRING , org.springframework.integration.mqtt.MessagingException . getMessage ( ) ) ; } org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . addTopic ( STRING , STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . removeTopic ( STRING , STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . addTopics ( new java.lang.String [] { STRING , STRING } , new int [] { NUMBER , NUMBER } ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . removeTopic ( STRING , STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . stop ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MqttPahoMessageHandler org.springframework.integration.mqtt.MqttPahoMessageHandler = new MqttPahoMessageHandler ( STRING , STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setDefaultTopic ( STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . start ( ) ; MqttPahoMessageDrivenChannelAdapter org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter = new MqttPahoMessageDrivenChannelAdapter ( STRING , STRING , STRING , STRING ) ; QueueChannel org.springframework.integration.mqtt.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setOutputChannel ( org.springframework.integration.mqtt.QueueChannel ) ; ThreadPoolTaskScheduler org.springframework.integration.mqtt.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.mqtt.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setTaskScheduler ( org.springframework.integration.mqtt.ThreadPoolTaskScheduler ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . start ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.mqtt.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( MqttHeaders . TOPIC , STRING ) . build ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( org.springframework.integration.mqtt.Message<> ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . stop ( ) ; Message < ? > org.springframework.integration.mqtt.Message<?> = org.springframework.integration.mqtt.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mqtt.Message<> ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . stop ( ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getHeaders ( ) . get ( MqttHeaders . RECEIVED_TOPIC ) ) ; org.springframework.integration.mqtt.Message<?> = org.springframework.integration.mqtt.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mqtt.Message<> ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . stop ( ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getHeaders ( ) . get ( MqttHeaders . RECEIVED_TOPIC ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MqttPahoMessageHandler org.springframework.integration.mqtt.MqttPahoMessageHandler = new MqttPahoMessageHandler ( STRING , STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setDefaultTopic ( STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setAsync ( true ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setAsyncEvents ( true ) ; org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher = new org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setApplicationEventPublisher ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . start ( ) ; MqttPahoMessageDrivenChannelAdapter org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter = new MqttPahoMessageDrivenChannelAdapter ( STRING , STRING , STRING ) ; QueueChannel org.springframework.integration.mqtt.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setOutputChannel ( org.springframework.integration.mqtt.QueueChannel ) ; ThreadPoolTaskScheduler org.springframework.integration.mqtt.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.mqtt.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setTaskScheduler ( org.springframework.integration.mqtt.ThreadPoolTaskScheduler ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . start ( ) ; GenericMessage < java.lang.String > org.springframework.integration.mqtt.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( org.springframework.integration.mqtt.GenericMessage<java.lang.String> ) ; void ( org.springframework.integration.mqtt.MqttPahoMessageHandler , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher , org.springframework.integration.mqtt.GenericMessage<java.lang.String> ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . stop ( ) ; Message < ? > org.springframework.integration.mqtt.Message<?> = org.springframework.integration.mqtt.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mqtt.Message<> ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . stop ( ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getHeaders ( ) . get ( MqttHeaders . RECEIVED_TOPIC ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultMqttPahoClientFactory org.springframework.integration.mqtt.DefaultMqttPahoClientFactory = new DefaultMqttPahoClientFactory ( ) ; MqttClientPersistence org.springframework.integration.mqtt.MqttClientPersistence = new MqttDefaultFilePersistence ( org.springframework.integration.mqtt.TemporaryFolder . getRoot ( ) . getAbsolutePath ( ) ) ; org.springframework.integration.mqtt.DefaultMqttPahoClientFactory . setPersistence ( org.springframework.integration.mqtt.MqttClientPersistence ) ; MqttPahoMessageHandler org.springframework.integration.mqtt.MqttPahoMessageHandler = new MqttPahoMessageHandler ( STRING , STRING , org.springframework.integration.mqtt.DefaultMqttPahoClientFactory ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setDefaultTopic ( STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setAsync ( true ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setAsyncEvents ( true ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setDefaultQos ( NUMBER ) ; org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher = new org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setApplicationEventPublisher ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . start ( ) ; MqttPahoMessageDrivenChannelAdapter org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter = new MqttPahoMessageDrivenChannelAdapter ( STRING , STRING , STRING , STRING ) ; QueueChannel org.springframework.integration.mqtt.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setOutputChannel ( org.springframework.integration.mqtt.QueueChannel ) ; ThreadPoolTaskScheduler org.springframework.integration.mqtt.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.mqtt.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setTaskScheduler ( org.springframework.integration.mqtt.ThreadPoolTaskScheduler ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . start ( ) ; Message < java.lang.String > org.springframework.integration.mqtt.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( org.springframework.integration.mqtt.Message<java.lang.String> ) ; void ( org.springframework.integration.mqtt.MqttPahoMessageHandler , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher , org.springframework.integration.mqtt.Message<java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.mqtt.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( MqttHeaders . TOPIC , STRING ) . build ( ) ; org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher = new org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setApplicationEventPublisher ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( org.springframework.integration.mqtt.Message<java.lang.String> ) ; void ( org.springframework.integration.mqtt.MqttPahoMessageHandler , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher , org.springframework.integration.mqtt.Message<java.lang.String> ) ; void ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ) ; int int = org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getClientInstance ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . stop ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . start ( ) ; org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher = new org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setApplicationEventPublisher ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( org.springframework.integration.mqtt.Message<java.lang.String> ) ; void ( org.springframework.integration.mqtt.MqttPahoMessageHandler , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher , org.springframework.integration.mqtt.Message<java.lang.String> ) ; org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher = new org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ( ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . setApplicationEventPublisher ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . handleMessage ( org.springframework.integration.mqtt.Message<java.lang.String> ) ; void ( org.springframework.integration.mqtt.MqttPahoMessageHandler , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher , org.springframework.integration.mqtt.Message<java.lang.String> ) ; void ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ) ; assertNotEquals ( int , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getClientInstance ( ) ) ; org.springframework.integration.mqtt.MqttPahoMessageHandler . stop ( ) ; Message < ? > org.springframework.integration.mqtt.Message<?> = null ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.mqtt.Message<?> = org.springframework.integration.mqtt.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mqtt.Message<> ) ; if ( STRING . boolean ( org.springframework.integration.mqtt.Message<> . getPayload ( ) ) ) { assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getHeaders ( ) . get ( MqttHeaders . RECEIVED_TOPIC ) ) ; } else if ( STRING . boolean ( org.springframework.integration.mqtt.Message<> . getPayload ( ) ) ) { assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getHeaders ( ) . get ( MqttHeaders . RECEIVED_TOPIC ) ) ; } else { fail ( STRING + org.springframework.integration.mqtt.Message<> . getPayload ( ) ) ; } } org.springframework.integration.mqtt.MqttPahoMessageDrivenChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( MqttPahoMessageHandler org.springframework.integration.mqtt.MqttPahoMessageHandler , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher , Message < java.lang.String > org.springframework.integration.mqtt.Message<java.lang.String> )			throws java.lang.InterruptedException { assertTrue ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertNotNull ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageSentEvent ) ; assertNotNull ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent ) ; assertEquals ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageSentEvent . getMessageId ( ) , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getMessageId ( ) ) ; assertEquals ( org.springframework.integration.mqtt.MqttPahoMessageHandler . getClientId ( ) , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageSentEvent . getClientId ( ) ) ; assertEquals ( org.springframework.integration.mqtt.MqttPahoMessageHandler . getClientId ( ) , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getClientId ( ) ) ; assertEquals ( org.springframework.integration.mqtt.MqttPahoMessageHandler . getClientInstance ( ) , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageSentEvent . getClientInstance ( ) ) ; assertEquals ( org.springframework.integration.mqtt.MqttPahoMessageHandler . getClientInstance ( ) , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getClientInstance ( ) ) ; assertSame ( org.springframework.integration.mqtt.Message<java.lang.String> , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageSentEvent . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher ) { assertNotEquals ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getMessageId ( ) , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getMessageId ( ) ) ; assertEquals ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getClientId ( ) , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getClientId ( ) ) ; assertEquals ( org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getClientInstance ( ) , org.springframework.integration.mqtt.BackToBackAdapterTests.EventPublisher . org.springframework.integration.mqtt.MqttMessageDeliveredEvent . getClientInstance ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.mqtt.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.mqtt.Message<?> = org.springframework.integration.mqtt.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mqtt.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mqtt.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.mqtt.ApplicationEvent ) { if ( org.springframework.integration.mqtt.ApplicationEvent instanceof MqttMessageSentEvent ) { this . org.springframework.integration.mqtt.MqttMessageSentEvent = ( MqttMessageSentEvent ) org.springframework.integration.mqtt.ApplicationEvent ; } else if ( org.springframework.integration.mqtt.ApplicationEvent instanceof MqttMessageDeliveredEvent ) { this . org.springframework.integration.mqtt.MqttMessageDeliveredEvent = ( MqttMessageDeliveredEvent ) org.springframework.integration.mqtt.ApplicationEvent ; } java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {		}  <METHOD_END>
