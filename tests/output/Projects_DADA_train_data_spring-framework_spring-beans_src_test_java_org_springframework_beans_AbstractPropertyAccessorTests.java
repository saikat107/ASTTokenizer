<METHOD_START> protected abstract org.springframework.beans.AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.beans.AbstractPropertyAccessor ( null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( new org.springframework.beans.AbstractPropertyAccessorTests.Simple ( STRING , NUMBER ) ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( new org.springframework.beans.AbstractPropertyAccessorTests.NoRead ( ) ) ; assertFalse ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( new org.springframework.beans.AbstractPropertyAccessorTests.NoRead ( ) ) ; assertFalse ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( new org.springframework.beans.AbstractPropertyAccessorTests.NoRead ( ) ) ; org.springframework.beans.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( new org.springframework.beans.AbstractPropertyAccessorTests.Simple ( STRING , NUMBER ) ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( new org.springframework.beans.AbstractPropertyAccessorTests.NoRead ( ) ) ; org.springframework.beans.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( new org.springframework.beans.AbstractPropertyAccessorTests.NoRead ( ) ) ; assertFalse ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertFalse ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertFalse ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertFalse ( org.springframework.beans.AbstractPropertyAccessor . isReadableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertTrue ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; assertFalse ( org.springframework.beans.AbstractPropertyAccessor . isWritableProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Simple org.springframework.beans.AbstractPropertyAccessorTests.Simple = new org.springframework.beans.AbstractPropertyAccessorTests.Simple ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Simple ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.beans.ITestBean = new TestBean ( STRING , NUMBER ) ; ITestBean org.springframework.beans.ITestBean = new TestBean ( STRING , NUMBER ) ; org.springframework.beans.ITestBean . setSpouse ( org.springframework.beans.ITestBean ) ; org.springframework.beans.ITestBean . setSpouse ( org.springframework.beans.ITestBean ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.ITestBean ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ; assertTrue ( STRING , java.lang.Integer == NUMBER ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ; assertTrue ( STRING + java.lang.Integer , java.lang.Integer == NUMBER ) ; ITestBean org.springframework.beans.ITestBean = ( ITestBean ) org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ; assertTrue ( STRING , org.springframework.beans.ITestBean == org.springframework.beans.ITestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessorTests.Person . org.springframework.beans.AbstractPropertyAccessorTests.Address = null ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; try { org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ; fail ( STRING ) ; } catch ( NullValueInNestedPathException org.springframework.beans.NullValueInNestedPathException ) { assertEquals ( STRING , org.springframework.beans.NullValueInNestedPathException . getPropertyName ( ) ) ; assertEquals ( org.springframework.beans.AbstractPropertyAccessorTests.Person .class , org.springframework.beans.NullValueInNestedPathException . getBeanClass ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessorTests.Person . org.springframework.beans.AbstractPropertyAccessorTests.Address = null ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; org.springframework.beans.AbstractPropertyAccessor . setAutoGrowNestedPaths ( true ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Foo org.springframework.beans.AbstractPropertyAccessorTests.Foo = new org.springframework.beans.AbstractPropertyAccessorTests.Foo ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Foo ) ; org.springframework.beans.AbstractPropertyAccessor . setConversionService ( new DefaultConversionService ( ) ) ; org.springframework.beans.AbstractPropertyAccessor . setAutoGrowNestedPaths ( true ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.Foo . java.util.List<java.util.Map> . java.util.Map ( NUMBER ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Simple org.springframework.beans.AbstractPropertyAccessorTests.Simple = new org.springframework.beans.AbstractPropertyAccessorTests.Simple ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Simple ) ; try { org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ; fail ( STRING ) ; } catch ( NotReadablePropertyException org.springframework.beans.NotReadablePropertyException ) { assertEquals ( org.springframework.beans.AbstractPropertyAccessorTests.Simple .class , org.springframework.beans.NotReadablePropertyException . getBeanClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.NotReadablePropertyException . getPropertyName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; org.springframework.beans.ExpectedException . expect ( NotReadablePropertyException .class ) ; org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Simple org.springframework.beans.AbstractPropertyAccessorTests.Simple = new org.springframework.beans.AbstractPropertyAccessorTests.Simple ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Simple ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessorTests.Simple . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessorTests.Simple . java.lang.String ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessorTests.Person . org.springframework.beans.AbstractPropertyAccessorTests.Address . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ITestBean org.springframework.beans.ITestBean = new TestBean ( STRING , NUMBER ) ; ITestBean org.springframework.beans.ITestBean = new org.springframework.beans.AbstractPropertyAccessorTests.Employee ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.ITestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , org.springframework.beans.ITestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.ITestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.ITestBean . getSpouse ( ) == org.springframework.beans.ITestBean ) ; assertTrue ( STRING , org.springframework.beans.ITestBean . getSpouse ( ) == null ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( new PropertyValue ( STRING , org.springframework.beans.ITestBean ) ) ; assertTrue ( STRING , org.springframework.beans.ITestBean . getSpouse ( ) == org.springframework.beans.ITestBean ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.ITestBean ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ITestBean org.springframework.beans.ITestBean = new TestBean ( STRING , NUMBER ) ; ITestBean org.springframework.beans.ITestBean = new TestBean ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.ITestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , org.springframework.beans.ITestBean ) ; assertTrue ( STRING , org.springframework.beans.ITestBean . getSpouse ( ) == org.springframework.beans.ITestBean ) ; assertTrue ( STRING , org.springframework.beans.ITestBean . getSpouse ( ) == null ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( new PropertyValue ( STRING , org.springframework.beans.ITestBean ) ) ; assertTrue ( STRING , org.springframework.beans.ITestBean . getSpouse ( ) == org.springframework.beans.ITestBean ) ; assertTrue ( STRING , org.springframework.beans.ITestBean . getAge ( ) == NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( new PropertyValue ( STRING , NUMBER ) ) ; assertTrue ( STRING , org.springframework.beans.ITestBean . getAge ( ) == NUMBER ) ; assertEquals ( org.springframework.beans.ITestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.ITestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; TestBean org.springframework.beans.TestBean = new TestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.beans.TestBean . getDoctor ( ) . getCompany ( ) ) ; assertEquals ( java.lang.String , org.springframework.beans.TestBean . getLawyer ( ) . getCompany ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessorTests.Person . org.springframework.beans.AbstractPropertyAccessorTests.Address . org.springframework.beans.AbstractPropertyAccessorTests.Country . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.beans.ITestBean = new TestBean ( ) ; ITestBean org.springframework.beans.ITestBean = new org.springframework.beans.AbstractPropertyAccessorTests.DifferentTestBean ( ) ; org.springframework.beans.ITestBean . setName ( STRING ) ; org.springframework.beans.ITestBean . setSpouse ( org.springframework.beans.ITestBean ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.ITestBean ) ; try { org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ; } catch ( NotReadablePropertyException org.springframework.beans.NotReadablePropertyException ) { assertTrue ( org.springframework.beans.NotReadablePropertyException . getMessage ( ) . contains ( TestBean .class . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessorTests.Person . org.springframework.beans.AbstractPropertyAccessorTests.Address . org.springframework.beans.AbstractPropertyAccessorTests.Country = null ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; try { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; fail ( STRING ) ; } catch ( NullValueInNestedPathException org.springframework.beans.NullValueInNestedPathException ) { assertEquals ( STRING , org.springframework.beans.NullValueInNestedPathException . getPropertyName ( ) ) ; assertEquals ( org.springframework.beans.AbstractPropertyAccessorTests.Person .class , org.springframework.beans.NullValueInNestedPathException . getBeanClass ( ) ) ; } assertThat ( org.springframework.beans.AbstractPropertyAccessorTests.Person . org.springframework.beans.AbstractPropertyAccessorTests.Address . org.springframework.beans.AbstractPropertyAccessorTests.Country , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ITestBean org.springframework.beans.ITestBean = new TestBean ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.ITestBean ) ; try { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; fail ( STRING ) ; } catch ( NullValueInNestedPathException org.springframework.beans.NullValueInNestedPathException ) { assertTrue ( STRING + org.springframework.beans.NullValueInNestedPathException . getPropertyName ( ) , org.springframework.beans.NullValueInNestedPathException . getPropertyName ( ) . equals ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessorTests.Person . org.springframework.beans.AbstractPropertyAccessorTests.Address . org.springframework.beans.AbstractPropertyAccessorTests.Country = null ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; org.springframework.beans.AbstractPropertyAccessor . setAutoGrowNestedPaths ( true ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessorTests.Person . org.springframework.beans.AbstractPropertyAccessorTests.Address . org.springframework.beans.AbstractPropertyAccessorTests.Country . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Foo org.springframework.beans.AbstractPropertyAccessorTests.Foo = new org.springframework.beans.AbstractPropertyAccessorTests.Foo ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Foo ) ; org.springframework.beans.AbstractPropertyAccessor . setConversionService ( new DefaultConversionService ( ) ) ; org.springframework.beans.AbstractPropertyAccessor . setAutoGrowNestedPaths ( true ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.beans.AbstractPropertyAccessorTests.Foo . java.util.List . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Foo org.springframework.beans.AbstractPropertyAccessorTests.Foo = new org.springframework.beans.AbstractPropertyAccessorTests.Foo ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Foo ) ; org.springframework.beans.AbstractPropertyAccessor . setAutoGrowNestedPaths ( true ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.Foo . java.util.List<java.util.Map> . java.util.Map ( NUMBER ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Foo org.springframework.beans.AbstractPropertyAccessorTests.Foo = new org.springframework.beans.AbstractPropertyAccessorTests.Foo ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Foo ) ; org.springframework.beans.AbstractPropertyAccessor . setConversionService ( new GenericConversionService ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.beans.TypeDescriptor , TypeDescriptor org.springframework.beans.TypeDescriptor ) { throw new ConversionFailedException ( org.springframework.beans.TypeDescriptor , org.springframework.beans.TypeDescriptor , java.lang.Object , null ) ; } } ) ; org.springframework.beans.AbstractPropertyAccessor . setAutoGrowNestedPaths ( true ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.Foo . java.util.List<java.util.Map> . java.util.Map ( NUMBER ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.beans.TypeDescriptor , TypeDescriptor org.springframework.beans.TypeDescriptor ) { throw new ConversionFailedException ( org.springframework.beans.TypeDescriptor , org.springframework.beans.TypeDescriptor , java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; int int = NUMBER ; java.lang.String java.lang.String = STRING ; org.springframework.beans.TestBean . setAge ( int ) ; org.springframework.beans.TestBean . setName ( java.lang.String ) ; try { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == int ) ; assertTrue ( STRING , java.lang.String . boolean ( org.springframework.beans.TestBean . getName ( ) ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( new MutablePropertyValues ( ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == int ) ; assertTrue ( STRING , java.lang.String . boolean ( org.springframework.beans.TestBean . getName ( ) ) ) ; } catch ( BeansException org.springframework.beans.BeansException ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; java.lang.String java.lang.String = STRING ; int int = NUMBER ; java.lang.String java.lang.String = STRING ; try { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , int ) ) ; org.springframework.beans.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , java.lang.String ) ) ; org.springframework.beans.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , java.lang.String ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) . equals ( java.lang.String ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getTouchy ( ) . equals ( java.lang.String ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == int ) ; } catch ( BeansException org.springframework.beans.BeansException ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; java.lang.String java.lang.String = STRING ; int int = NUMBER ; java.lang.String java.lang.String = STRING ; try { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( int ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( new PropertyValue ( STRING , java.lang.String ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( new PropertyValue ( STRING , java.lang.String ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) . equals ( java.lang.String ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getTouchy ( ) . equals ( java.lang.String ) ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getAge ( ) == int ) ; } catch ( BeansException org.springframework.beans.BeansException ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; int int = NUMBER ; try { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; org.springframework.beans.TestBean . setAge ( int ) ; java.lang.Object java.lang.Object = org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.Integer ) ; assertTrue ( STRING , ( int ) java.lang.Object == int ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; org.springframework.beans.TestBean . setName ( STRING ) ; org.springframework.beans.TestBean . setSpouse ( org.springframework.beans.TestBean ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) != null ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , null ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getName ( ) == null ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getSpouse ( ) != null ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , null ) ; assertTrue ( STRING , org.springframework.beans.TestBean . getSpouse ( ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( new java.lang.Object ( ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , NUMBER ) ; TestBean org.springframework.beans.TestBean = new TestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , java.lang.Integer .class ) ; TestBean org.springframework.beans.TestBean = new TestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( java.lang.String .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { super. void ( java.lang.Object . java.lang.String ( ) ) ; } } ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; assertEquals ( java.lang.Integer .class . java.lang.String ( ) , org.springframework.beans.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { super. void ( java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.String [] ) { void ( StringUtils . arrayToDelimitedString ( ( ( java.lang.String [] ) java.lang.Object ) , STRING ) ) ; } else { super. void ( java.lang.Object != null ? java.lang.Object : STRING ) ; } } } ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.String [] {} ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , null ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.String [] ) { void ( StringUtils . arrayToDelimitedString ( ( ( java.lang.String [] ) java.lang.Object ) , STRING ) ) ; } else { super. void ( java.lang.Object != null ? java.lang.Object : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BooleanTestBean org.springframework.beans.BooleanTestBean = new BooleanTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.BooleanTestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , org.springframework.beans.BooleanTestBean . getBool2 ( ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , ! org.springframework.beans.BooleanTestBean . getBool2 ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NumberTestBean org.springframework.beans.NumberTestBean = new NumberTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.NumberTestBean ) ; try { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; } catch ( BeansException org.springframework.beans.BeansException ) { fail ( STRING + org.springframework.beans.BeansException . getMessage ( ) ) ; } assertTrue ( STRING , new java.lang.Short ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Short ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getShort2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getInt2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getLong2 ( ) ) ) ; assertTrue ( STRING , new java.math.BigInteger ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.math.BigInteger ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getBigInteger ( ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getFloat2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Double ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Double ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getDouble2 ( ) ) ) ; assertTrue ( STRING , new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getBigDecimal ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NumberTestBean org.springframework.beans.NumberTestBean = new NumberTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.NumberTestBean ) ; try { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Long ( NUMBER ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.math.BigInteger ( STRING ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Double ( NUMBER ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.math.BigDecimal ( NUMBER ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Float ( NUMBER ) ) ; } catch ( BeansException org.springframework.beans.BeansException ) { fail ( STRING + org.springframework.beans.BeansException . getMessage ( ) ) ; } assertTrue ( STRING , new java.lang.Short ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Short ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getShort2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getInt2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Long ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getLong2 ( ) ) ) ; assertTrue ( STRING , new java.math.BigInteger ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.math.BigInteger ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getBigInteger ( ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Float ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getFloat2 ( ) ) ) ; assertTrue ( STRING , new java.lang.Double ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.lang.Double ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getDouble2 ( ) ) ) ; assertTrue ( STRING , new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ) ; assertTrue ( STRING , new java.math.BigDecimal ( STRING ) . boolean ( org.springframework.beans.NumberTestBean . getBigDecimal ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean = new org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean ) ; java.lang.String java.lang.String = STRING + java.lang.Byte . byte + STRING ; java.lang.String java.lang.String = STRING + java.lang.Short . short + STRING ; java.lang.String java.lang.String = STRING + java.lang.Integer . int + STRING ; java.lang.String java.lang.String = STRING + java.lang.Long . long + STRING ; java.lang.String java.lang.String = STRING + java.lang.Float . float + STRING ; java.lang.String java.lang.String = STRING + java.lang.Double . double + STRING ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; assertEquals ( java.lang.Byte . byte , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . byte ( ) ) ; assertEquals ( java.lang.Byte . byte , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . java.lang.Byte ( ) . byte ( ) ) ; assertEquals ( java.lang.Short . short , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . short ( ) ) ; assertEquals ( java.lang.Short . short , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . java.lang.Short ( ) . short ( ) ) ; assertEquals ( java.lang.Integer . int , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . int ( ) ) ; assertEquals ( java.lang.Integer . int , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . java.lang.Integer ( ) . int ( ) ) ; assertEquals ( java.lang.Long . long , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . long ( ) ) ; assertEquals ( java.lang.Long . long , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . java.lang.Long ( ) . long ( ) ) ; assertEquals ( java.lang.Float . float , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . float ( ) , NUMBER ) ; assertEquals ( java.lang.Float . float , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . java.lang.Float ( ) . float ( ) , NUMBER ) ; assertEquals ( java.lang.Double . double , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . double ( ) , NUMBER ) ; assertEquals ( java.lang.Double . double , org.springframework.beans.AbstractPropertyAccessorTests.NumberPropertyBean . java.lang.Double ( ) . double ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.EnumTester org.springframework.beans.AbstractPropertyAccessorTests.EnumTester = new org.springframework.beans.AbstractPropertyAccessorTests.EnumTester ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.EnumTester ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( Autowire . BY_NAME , org.springframework.beans.AbstractPropertyAccessorTests.EnumTester . org.springframework.beans.Autowire ( ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( Autowire . BY_TYPE , org.springframework.beans.AbstractPropertyAccessorTests.EnumTester . org.springframework.beans.Autowire ( ) ) ; try { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; fail ( STRING ) ; } catch ( TypeMismatchException org.springframework.beans.TypeMismatchException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.EnumConsumer org.springframework.beans.AbstractPropertyAccessorTests.EnumConsumer = new org.springframework.beans.AbstractPropertyAccessorTests.EnumConsumer ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.EnumConsumer ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.TestEnum .class . java.lang.String ( ) + STRING ) ; assertEquals ( org.springframework.beans.AbstractPropertyAccessorTests.TestEnum . org.springframework.beans.AbstractPropertyAccessorTests.TestEnum , org.springframework.beans.AbstractPropertyAccessorTests.EnumConsumer . java.lang.Enum<org.springframework.beans.AbstractPropertyAccessorTests.TestEnum> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.WildcardEnumConsumer org.springframework.beans.AbstractPropertyAccessorTests.WildcardEnumConsumer = new org.springframework.beans.AbstractPropertyAccessorTests.WildcardEnumConsumer ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.WildcardEnumConsumer ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.TestEnum .class . java.lang.String ( ) + STRING ) ; assertEquals ( org.springframework.beans.AbstractPropertyAccessorTests.TestEnum . org.springframework.beans.AbstractPropertyAccessorTests.TestEnum , org.springframework.beans.AbstractPropertyAccessorTests.WildcardEnumConsumer . java.lang.Enum<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.AbstractPropertyAccessorTests.PropsTester org.springframework.beans.AbstractPropertyAccessorTests.PropsTester = new org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.String ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.util.Properties != null ) ; java.lang.String java.lang.String = org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.util.Properties . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.util.Properties . java.lang.String ( STRING ) ; assertTrue ( STRING , java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING , java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.AbstractPropertyAccessorTests.PropsTester org.springframework.beans.AbstractPropertyAccessorTests.PropsTester = new org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING , STRING , STRING } ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.List<java.lang.String> ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Set<java.lang.String> ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] . int == NUMBER ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] ) ; assertTrue ( STRING , java.util.List<java.lang.String> . boolean ( STRING ) && java.util.List<java.lang.String> . boolean ( STRING ) && java.util.List<java.lang.String> . boolean ( STRING ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , null ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.AbstractPropertyAccessorTests.PropsTester org.springframework.beans.AbstractPropertyAccessorTests.PropsTester = new org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( java.lang.String . java.lang.String ( NUMBER ) ) ; } } ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING , STRING , STRING } ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.List<java.lang.String> ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Set<java.lang.String> ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] . int == NUMBER ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] ) ; assertTrue ( STRING , java.util.List<java.lang.String> . boolean ( STRING ) && java.util.List<java.lang.String> . boolean ( STRING ) && java.util.List<java.lang.String> . boolean ( STRING ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( java.lang.String . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.AbstractPropertyAccessorTests.PropsTester org.springframework.beans.AbstractPropertyAccessorTests.PropsTester = new org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ) ; org.springframework.beans.AbstractPropertyAccessor . useConfigValueEditors ( ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.AbstractPropertyAccessorTests.PropsTester org.springframework.beans.AbstractPropertyAccessorTests.PropsTester = new org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( java.lang.String [] .class , STRING , new StringArrayPropertyEditor ( STRING ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . java.lang.String[] [ NUMBER ] . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.AbstractPropertyAccessorTests.StringArrayBean org.springframework.beans.AbstractPropertyAccessorTests.StringArrayBean = new org.springframework.beans.AbstractPropertyAccessorTests.StringArrayBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.StringArrayBean ) ; org.springframework.beans.AbstractPropertyAccessor . setAutoGrowNestedPaths ( true ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.StringArrayBean . java.lang.String[] ( ) . int ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.StringArrayBean . java.lang.String[] ( ) . int ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.StringArrayBean . java.lang.String[] ( ) [ NUMBER ] . boolean ( STRING ) && org.springframework.beans.AbstractPropertyAccessorTests.StringArrayBean . java.lang.String[] ( ) [ NUMBER ] == null && org.springframework.beans.AbstractPropertyAccessorTests.StringArrayBean . java.lang.String[] ( ) [ NUMBER ] . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.PropsTester org.springframework.beans.AbstractPropertyAccessorTests.PropsTester = new org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new int [] { NUMBER , NUMBER , NUMBER , NUMBER } ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING , STRING , STRING } ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( NUMBER ) ; java.util.List<java.lang.Object> . boolean ( STRING ) ; java.util.List<java.lang.Object> . boolean ( NUMBER ) ; java.util.List<java.lang.Object> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.List<java.lang.Object> ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new java.util.HashSet<java.lang.Object> <> ( ) ; java.util.Set<java.lang.Object> . boolean ( STRING ) ; java.util.Set<java.lang.Object> . boolean ( NUMBER ) ; java.util.Set<java.lang.Object> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Set<java.lang.Object> ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] ) ; java.util.List<java.lang.Integer> . boolean ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] ) ; java.util.List<java.lang.Integer> . boolean ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] ) ; assertTrue ( STRING , java.util.List<java.lang.Integer> . boolean ( new java.lang.Integer ( NUMBER ) ) && java.util.List<java.lang.Integer> . boolean ( new java.lang.Integer ( NUMBER ) ) && java.util.List<java.lang.Integer> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer [] { NUMBER } ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.String [] { STRING } ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.PropsTester org.springframework.beans.AbstractPropertyAccessorTests.PropsTester = new org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( int .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( new java.lang.Integer ( java.lang.Integer . int ( java.lang.String ) + NUMBER ) ) ; } } ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new int [] { NUMBER , NUMBER , NUMBER , NUMBER } ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING , STRING , STRING } ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.String [] { STRING } ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( new java.lang.Integer ( java.lang.Integer . int ( java.lang.String ) + NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.AbstractPropertyAccessorTests.PropsTester org.springframework.beans.AbstractPropertyAccessorTests.PropsTester = new org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PropsTester ) ; org.springframework.beans.AbstractPropertyAccessor . useConfigValueEditors ( ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] . int == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PropsTester . int[] [ NUMBER ] == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean = new org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.String [] { STRING , STRING } ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) . int ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( LogFactory . getLog ( org.springframework.beans.AbstractPropertyAccessorTests .class ) ) ; org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean = new org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean ) ; int [] int[] = new int [ NUMBER ] ; StopWatch org.springframework.beans.StopWatch = new StopWatch ( ) ; org.springframework.beans.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , int[] ) ; } org.springframework.beans.StopWatch . stop ( ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) . int ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] ) ; long long = org.springframework.beans.StopWatch . getLastTaskTimeMillis ( ) ; assertTrue ( STRING , org.springframework.beans.StopWatch . getLastTaskTimeMillis ( ) < NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( java.lang.String .class , new StringTrimmerEditor ( false ) ) ; org.springframework.beans.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , int[] ) ; } org.springframework.beans.StopWatch . stop ( ) ; assertTrue ( STRING , org.springframework.beans.StopWatch . getLastTaskTimeMillis ( ) < NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( int .class , STRING , new CustomNumberEditor ( java.lang.Integer .class , false ) ) ; org.springframework.beans.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , int[] ) ; } org.springframework.beans.StopWatch . stop ( ) ; assertTrue ( STRING , org.springframework.beans.StopWatch . getLastTaskTimeMillis ( ) < NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( int .class , STRING , new CustomNumberEditor ( java.lang.Integer .class , false ) ) ; org.springframework.beans.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , int[] ) ; } org.springframework.beans.StopWatch . stop ( ) ; assertTrue ( STRING , org.springframework.beans.StopWatch . getLastTaskTimeMillis ( ) < NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( int .class , new CustomNumberEditor ( java.lang.Integer .class , false ) ) ; org.springframework.beans.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , int[] ) ; } org.springframework.beans.StopWatch . stop ( ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) . int ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] ) ; assertTrue ( STRING , org.springframework.beans.StopWatch . getLastTaskTimeMillis ( ) > long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean = new org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( int .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Integer ) { super. void ( new java.lang.Integer ( ( java.lang.Integer ) java.lang.Object + NUMBER ) ) ; } } } ) ; int [] int[] = new int [ NUMBER ] ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , int[] ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) . int ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Integer ) { super. void ( new java.lang.Integer ( ( java.lang.Integer ) java.lang.Object + NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean = new org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( int .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Integer ) { super. void ( new java.lang.Integer ( ( java.lang.Integer ) java.lang.Object + NUMBER ) ) ; } } } ) ; int [] int[] = new int [ NUMBER ] ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , int[] ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) . int ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Integer ) { super. void ( new java.lang.Integer ( ( java.lang.Integer ) java.lang.Object + NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean = new org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean ) ; org.springframework.beans.AbstractPropertyAccessor . setAutoGrowNestedPaths ( true ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) . int ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) . int ) ; assertTrue ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] == NUMBER && org.springframework.beans.AbstractPropertyAccessorTests.PrimitiveArrayBean . int[] ( ) [ NUMBER ] == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.SkipReaderStub org.springframework.beans.AbstractPropertyAccessorTests.SkipReaderStub = new org.springframework.beans.AbstractPropertyAccessorTests.SkipReaderStub ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.SkipReaderStub ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.List<java.lang.String> ) ; java.lang.Object [] java.lang.Object[] = org.springframework.beans.AbstractPropertyAccessorTests.SkipReaderStub . java.lang.Object[] ; assertEquals ( NUMBER , java.lang.Object[] . int ) ; assertEquals ( STRING , java.lang.Object[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.Object[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.Object[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.Object[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.ArrayToObject org.springframework.beans.AbstractPropertyAccessorTests.ArrayToObject = new org.springframework.beans.AbstractPropertyAccessorTests.ArrayToObject ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.ArrayToObject ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { STRING , STRING } ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.Object[] ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessorTests.ArrayToObject . java.lang.Object ( ) , equalTo ( ( java.lang.Object ) java.lang.Object[] ) ) ; java.lang.Object[] = new java.lang.Object [] { STRING } ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.lang.Object[] ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessorTests.ArrayToObject . java.lang.Object ( ) , equalTo ( ( java.lang.Object ) java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Collection<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Collection<java.lang.String> ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Set<java.lang.String> ) ; java.util.SortedSet<java.lang.String> < java.lang.String > java.util.SortedSet<java.lang.String> = new java.util.TreeSet<java.lang.String> <> ( ) ; java.util.SortedSet<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.SortedSet<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.List<java.lang.String> ) ; assertSame ( java.util.Collection<java.lang.String> , org.springframework.beans.IndexedTestBean . getCollection ( ) ) ; assertSame ( java.util.Set<java.lang.String> , org.springframework.beans.IndexedTestBean . getSet ( ) ) ; assertSame ( java.util.SortedSet<java.lang.String> , org.springframework.beans.IndexedTestBean . getSortedSet ( ) ) ; assertSame ( java.util.List<java.lang.String> , org.springframework.beans.IndexedTestBean . getList ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.Collection<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Collection<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.List<java.lang.String> ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Set<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getCollection ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getCollection ( ) . containsAll ( java.util.Collection<java.lang.String> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSet ( ) . containsAll ( java.util.List<java.lang.String> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSortedSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSortedSet ( ) . containsAll ( java.util.List<java.lang.String> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getList ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getList ( ) . containsAll ( java.util.Set<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Collection<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Collection<java.lang.String> . java.lang.Object[] ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.List<java.lang.String> . java.lang.Object[] ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.List<java.lang.String> . java.lang.Object[] ( ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Set<java.lang.String> . java.lang.Object[] ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getCollection ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getCollection ( ) . containsAll ( java.util.Collection<java.lang.String> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSet ( ) . containsAll ( java.util.List<java.lang.String> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSortedSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSortedSet ( ) . containsAll ( java.util.List<java.lang.String> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getList ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getList ( ) . containsAll ( java.util.Set<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( ) ; java.util.Collection<java.lang.Integer> . boolean ( NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new int [] { NUMBER } ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.LinkedList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new int [] { NUMBER } ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new int [] { NUMBER } ) ; java.util.Set<java.lang.Integer> < java.lang.Integer > java.util.Set<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( ) ; java.util.Set<java.lang.Integer> . boolean ( NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new int [] { NUMBER } ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getCollection ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getCollection ( ) . containsAll ( java.util.Collection<java.lang.Integer> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSet ( ) . containsAll ( java.util.List<java.lang.Integer> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSortedSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSortedSet ( ) . containsAll ( java.util.List<java.lang.Integer> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getList ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getList ( ) . containsAll ( java.util.Set<java.lang.Integer> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( ) ; java.util.Collection<java.lang.Integer> . boolean ( NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.LinkedList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; java.util.Set<java.lang.Integer> < java.lang.Integer > java.util.Set<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> <> ( ) ; java.util.Set<java.lang.Integer> . boolean ( NUMBER ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , new java.lang.Integer ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getCollection ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getCollection ( ) . containsAll ( java.util.Collection<java.lang.Integer> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSet ( ) . containsAll ( java.util.List<java.lang.Integer> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSortedSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSortedSet ( ) . containsAll ( java.util.List<java.lang.Integer> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getList ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getList ( ) . containsAll ( java.util.Set<java.lang.Integer> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSet ( ) . containsAll ( java.util.List<java.lang.String> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSortedSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSortedSet ( ) . containsAll ( java.util.List<java.lang.String> ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getList ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getList ( ) . containsAll ( java.util.Set<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( java.lang.String .class , STRING , new StringTrimmerEditor ( false ) ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( java.lang.String .class , STRING , new StringTrimmerEditor ( false ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSet ( ) . contains ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSortedSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getSortedSet ( ) . contains ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getList ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getList ( ) . contains ( STRING ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; assertTrue ( org.springframework.beans.IndexedTestBean . getList ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.SortedMap<?,?> < ? , ? > java.util.SortedMap<?,?> = new java.util.TreeMap<java.lang.Object,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.SortedMap<,> ) ; assertSame ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.beans.IndexedTestBean . getMap ( ) ) ; assertSame ( java.util.SortedMap<,> , org.springframework.beans.IndexedTestBean . getSortedMap ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.TreeMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.TreeMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.IndexedTestBean . getSortedMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.beans.IndexedTestBean . getSortedMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( TestBean .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( ! StringUtils . hasLength ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( ) ; } void ( new TestBean ( java.lang.String ) ) ; } } ) ; MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) . getName ( ) ) ; org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; try { org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; fail ( STRING ) ; } catch ( PropertyBatchUpdateException org.springframework.beans.PropertyBatchUpdateException ) { PropertyAccessException org.springframework.beans.PropertyAccessException = org.springframework.beans.PropertyBatchUpdateException . getPropertyAccessException ( STRING ) ; assertTrue ( org.springframework.beans.PropertyAccessException instanceof TypeMismatchException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( ! StringUtils . hasLength ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( ) ; } void ( new TestBean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( ! StringUtils . hasLength ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( ) ; } void ( new TestBean ( java.lang.String ) ) ; } } ) ; java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > java.util.Map<java.lang.Integer,java.lang.String> = new java.util.HashMap<java.lang.Integer,java.lang.String> <> ( ) ; java.util.Map<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , STRING ) ; java.util.Map<java.lang.Integer,java.lang.String> . java.lang.String ( NUMBER , STRING ) ; MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , java.util.Collections . java.util.Map<java.lang.Integer,java.lang.String> ( java.util.Map<java.lang.Integer,java.lang.String> ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.IndexedTestBean . getMap ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.IndexedTestBean . getMap ( ) . get ( NUMBER ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( ! StringUtils . hasLength ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( ) ; } void ( new TestBean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( ! StringUtils . hasLength ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( ) ; } void ( new TestBean ( java.lang.String ) ) ; } } ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> <> ( ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( NUMBER , STRING ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( NUMBER , STRING ) ; MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , new org.springframework.beans.AbstractPropertyAccessorTests.ReadOnlyMap <> ( java.util.Map<java.lang.Object,java.lang.Object> ) ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.IndexedTestBean . getMap ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.IndexedTestBean . getMap ( ) . get ( NUMBER ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( ! StringUtils . hasLength ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( ) ; } void ( new TestBean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( NUMBER , STRING ) ; java.util.Map . java.lang.Object ( NUMBER , STRING ) ; org.springframework.beans.AbstractPropertyAccessorTests.ReadOnlyMap org.springframework.beans.AbstractPropertyAccessorTests.ReadOnlyMap = new org.springframework.beans.AbstractPropertyAccessorTests.ReadOnlyMap ( java.util.Map ) ; MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.ReadOnlyMap ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; assertSame ( org.springframework.beans.AbstractPropertyAccessorTests.ReadOnlyMap , org.springframework.beans.IndexedTestBean . getMap ( ) ) ; assertFalse ( org.springframework.beans.AbstractPropertyAccessorTests.ReadOnlyMap . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Simple org.springframework.beans.AbstractPropertyAccessorTests.Simple = new org.springframework.beans.AbstractPropertyAccessorTests.Simple ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Simple ) ; try { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; fail ( STRING ) ; } catch ( NotWritablePropertyException org.springframework.beans.NotWritablePropertyException ) { assertEquals ( org.springframework.beans.AbstractPropertyAccessorTests.Simple .class , org.springframework.beans.NotWritablePropertyException . getBeanClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.NotWritablePropertyException . getPropertyName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.beans.NotWritablePropertyException . getPossibleMatches ( ) . length ) ; assertEquals ( STRING , org.springframework.beans.NotWritablePropertyException . getPossibleMatches ( ) [ NUMBER ] ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Simple org.springframework.beans.AbstractPropertyAccessorTests.Simple = new org.springframework.beans.AbstractPropertyAccessorTests.Simple ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Simple ) ; try { org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; fail ( STRING ) ; } catch ( NotWritablePropertyException org.springframework.beans.NotWritablePropertyException ) { assertEquals ( org.springframework.beans.AbstractPropertyAccessorTests.Simple .class , org.springframework.beans.NotWritablePropertyException . getBeanClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.NotWritablePropertyException . getPropertyName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Simple org.springframework.beans.AbstractPropertyAccessorTests.Simple = new org.springframework.beans.AbstractPropertyAccessorTests.Simple ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Simple ) ; try { PropertyValue org.springframework.beans.PropertyValue = new PropertyValue ( STRING , STRING ) ; org.springframework.beans.PropertyValue . setOptional ( true ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( org.springframework.beans.PropertyValue ) ; } catch ( NotWritablePropertyException org.springframework.beans.NotWritablePropertyException ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DerivedFromProtectedBaseBean org.springframework.beans.DerivedFromProtectedBaseBean = new DerivedFromProtectedBaseBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.DerivedFromProtectedBaseBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.DerivedFromProtectedBaseBean . getSomeProperty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; try { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; fail ( STRING ) ; } catch ( TypeMismatchException org.springframework.beans.TypeMismatchException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.TestBean = new TestBean ( ) ; try { AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.TestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; fail ( STRING ) ; } catch ( TypeMismatchException org.springframework.beans.TypeMismatchException ) { } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; org.springframework.beans.ExpectedException . expect ( NotWritablePropertyException .class ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.beans.ITestBean = new TestBean ( ) ; MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , STRING ) ) ; org.springframework.beans.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , STRING ) ) ; org.springframework.beans.MutablePropertyValues . addPropertyValue ( new PropertyValue ( STRING , new java.lang.Object ( ) ) ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.ITestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues , true ) ; assertTrue ( STRING , org.springframework.beans.ITestBean . getName ( ) . equals ( STRING ) ) ; try { org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues , false ) ; fail ( STRING ) ; } catch ( NotWritablePropertyException org.springframework.beans.NotWritablePropertyException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; TestBean org.springframework.beans.TestBean = org.springframework.beans.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.TestBean = org.springframework.beans.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getSet ( ) . toArray ( ) [ NUMBER ] ) ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getSet ( ) . toArray ( ) [ NUMBER ] ) ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; TestBean org.springframework.beans.TestBean = org.springframework.beans.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.TestBean = org.springframework.beans.IndexedTestBean . getArray ( ) [ NUMBER ] ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getSet ( ) . toArray ( ) [ NUMBER ] ) ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getSet ( ) . toArray ( ) [ NUMBER ] ) ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; TestBean org.springframework.beans.TestBean = ( ( TestBean ) org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; MutablePropertyValues org.springframework.beans.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.TestBean ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.TestBean ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.TestBean ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.TestBean ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.TestBean ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.TestBean ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.TestBean ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.TestBean ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.TestBean ) ; org.springframework.beans.MutablePropertyValues . add ( STRING , org.springframework.beans.TestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValues ( org.springframework.beans.MutablePropertyValues ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.IndexedTestBean . getArray ( ) [ NUMBER ] ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.IndexedTestBean . getArray ( ) [ NUMBER ] ) ; assertEquals ( org.springframework.beans.TestBean , ( org.springframework.beans.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ) ; assertEquals ( org.springframework.beans.TestBean , ( org.springframework.beans.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ) ; assertEquals ( org.springframework.beans.TestBean , ( org.springframework.beans.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ) ; assertEquals ( null , ( org.springframework.beans.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ) ; assertEquals ( org.springframework.beans.TestBean , ( org.springframework.beans.IndexedTestBean . getList ( ) . get ( NUMBER ) ) ) ; assertEquals ( org.springframework.beans.TestBean , ( org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) ) ; assertEquals ( org.springframework.beans.TestBean , ( org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) ) ; assertEquals ( org.springframework.beans.TestBean , ( org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) ) ; assertEquals ( org.springframework.beans.TestBean , ( org.springframework.beans.IndexedTestBean . getMap ( ) . get ( STRING ) ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( null , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.beans.TestBean , org.springframework.beans.AbstractPropertyAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; assertEquals ( java.lang.String .class , org.springframework.beans.AbstractPropertyAccessor . getPropertyType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Simple org.springframework.beans.AbstractPropertyAccessorTests.Simple = new org.springframework.beans.AbstractPropertyAccessorTests.Simple ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Simple ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessor . getPropertyType ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person = org.springframework.beans.AbstractPropertyAccessorTests.Person ( STRING , STRING , STRING ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Person ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessor . getPropertyTypeDescriptor ( STRING ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Simple org.springframework.beans.AbstractPropertyAccessorTests.Simple = new org.springframework.beans.AbstractPropertyAccessorTests.Simple ( STRING , NUMBER ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Simple ) ; assertThat ( org.springframework.beans.AbstractPropertyAccessor . getPropertyTypeDescriptor ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.beans.IndexedTestBean = new IndexedTestBean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; assertEquals ( null , org.springframework.beans.AbstractPropertyAccessor . getPropertyType ( STRING ) ) ; org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( java.lang.String .class , org.springframework.beans.AbstractPropertyAccessor . getPropertyType ( STRING ) ) ; org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.IndexedTestBean ) ; org.springframework.beans.AbstractPropertyAccessor . registerCustomEditor ( java.lang.String .class , STRING , new StringTrimmerEditor ( false ) ) ; assertEquals ( java.lang.String .class , org.springframework.beans.AbstractPropertyAccessor . getPropertyType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Spr10115Bean org.springframework.beans.AbstractPropertyAccessorTests.Spr10115Bean = new org.springframework.beans.AbstractPropertyAccessorTests.Spr10115Bean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Spr10115Bean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.AbstractPropertyAccessorTests.Spr10115Bean . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.AbstractPropertyAccessorTests.Spr13837Bean org.springframework.beans.AbstractPropertyAccessorTests.Spr13837Bean = new org.springframework.beans.AbstractPropertyAccessorTests.Spr13837Bean ( ) ; AbstractPropertyAccessor org.springframework.beans.AbstractPropertyAccessor = org.springframework.beans.AbstractPropertyAccessor ( org.springframework.beans.AbstractPropertyAccessorTests.Spr13837Bean ) ; org.springframework.beans.AbstractPropertyAccessor . setPropertyValue ( STRING , NUMBER ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.beans.AbstractPropertyAccessorTests.Spr13837Bean . java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.beans.AbstractPropertyAccessorTests.Person org.springframework.beans.AbstractPropertyAccessorTests.Person ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new org.springframework.beans.AbstractPropertyAccessorTests.Person ( java.lang.String , new org.springframework.beans.AbstractPropertyAccessorTests.Address ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.lang.Integer java.lang.Integer ) { this . java.lang.String = java.lang.String ; this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , org.springframework.beans.AbstractPropertyAccessorTests.Address org.springframework.beans.AbstractPropertyAccessorTests.Address ) { this . java.lang.String = java.lang.String ; this . org.springframework.beans.AbstractPropertyAccessorTests.Address = org.springframework.beans.AbstractPropertyAccessorTests.Address ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.AbstractPropertyAccessorTests.Address org.springframework.beans.AbstractPropertyAccessorTests.Address ( ) { return org.springframework.beans.AbstractPropertyAccessorTests.Address ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.AbstractPropertyAccessorTests.Address org.springframework.beans.AbstractPropertyAccessorTests.Address ) { this . org.springframework.beans.AbstractPropertyAccessorTests.Address = org.springframework.beans.AbstractPropertyAccessorTests.Address ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . org.springframework.beans.AbstractPropertyAccessorTests.Country = new org.springframework.beans.AbstractPropertyAccessorTests.Country ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this( STRING , STRING ); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.AbstractPropertyAccessorTests.Country org.springframework.beans.AbstractPropertyAccessorTests.Country ( ) { return org.springframework.beans.AbstractPropertyAccessorTests.Country ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.AbstractPropertyAccessorTests.Country org.springframework.beans.AbstractPropertyAccessorTests.Country ) { this . org.springframework.beans.AbstractPropertyAccessorTests.Country = org.springframework.beans.AbstractPropertyAccessorTests.Country ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) {		}  <METHOD_END>
<METHOD_START> public java.util.List java.util.List ( ) { return java.util.List ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List java.util.List ) { this . java.util.List = java.util.List ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.util.Map> < java.util.Map > java.util.List<java.util.Map> ( ) { return java.util.List<java.util.Map> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.Map> < java.util.Map > java.util.List<java.util.Map> ) { this . java.util.List<java.util.Map> = java.util.List<java.util.Map> ; }  <METHOD_END>
<METHOD_START> public void void ( Autowire org.springframework.beans.Autowire ) { this . org.springframework.beans.Autowire = org.springframework.beans.Autowire ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.Autowire org.springframework.beans.Autowire ( ) { return org.springframework.beans.Autowire ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( int [] int[] ) { this . int[] = int[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public int [] int[] ( ) { return int[] ; }  <METHOD_END>
<METHOD_START> public void void ( int [] int[] ) { this . int[] = int[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public byte byte ( ) { return byte ; }  <METHOD_END>
<METHOD_START> public void void ( byte byte ) { this . byte = byte ; }  <METHOD_END>
<METHOD_START> public java.lang.Byte java.lang.Byte ( ) { return java.lang.Byte ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Byte java.lang.Byte ) { this . java.lang.Byte = java.lang.Byte ; }  <METHOD_END>
<METHOD_START> public short short ( ) { return short ; }  <METHOD_END>
<METHOD_START> public void void ( short short ) { this . short = short ; }  <METHOD_END>
<METHOD_START> public java.lang.Short java.lang.Short ( ) { return java.lang.Short ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Short java.lang.Short ) { this . java.lang.Short = java.lang.Short ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public float float ( ) { return float ; }  <METHOD_END>
<METHOD_START> public void void ( float float ) { this . float = float ; }  <METHOD_END>
<METHOD_START> public java.lang.Float java.lang.Float ( ) { return java.lang.Float ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Float java.lang.Float ) { this . java.lang.Float = java.lang.Float ; }  <METHOD_END>
<METHOD_START> public double double ( ) { return double ; }  <METHOD_END>
<METHOD_START> public void void ( double double ) { this . double = double ; }  <METHOD_END>
<METHOD_START> public java.lang.Double java.lang.Double ( ) { return java.lang.Double ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Double java.lang.Double ) { this . java.lang.Double = java.lang.Double ; }  <METHOD_END>
<METHOD_START> public java.lang.Enum<org.springframework.beans.AbstractPropertyAccessorTests.TestEnum> < org.springframework.beans.AbstractPropertyAccessorTests.TestEnum > java.lang.Enum<org.springframework.beans.AbstractPropertyAccessorTests.TestEnum> ( ) { return java.lang.Enum<org.springframework.beans.AbstractPropertyAccessorTests.TestEnum> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Enum<org.springframework.beans.AbstractPropertyAccessorTests.TestEnum> < org.springframework.beans.AbstractPropertyAccessorTests.TestEnum > java.lang.Enum<org.springframework.beans.AbstractPropertyAccessorTests.TestEnum> ) { this . java.lang.Enum<org.springframework.beans.AbstractPropertyAccessorTests.TestEnum> = java.lang.Enum<org.springframework.beans.AbstractPropertyAccessorTests.TestEnum> ; }  <METHOD_END>
<METHOD_START> public java.lang.Enum<?> < ? > java.lang.Enum<?> ( ) { return java.lang.Enum<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Enum<?> < ? > java.lang.Enum<?> ) { this . java.lang.Enum<?> = java.lang.Enum<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( T ... T[] ) { this . T[] = T[] ; }  <METHOD_END>
<METHOD_START> public void void ( T ... T[] ) { this . T[] = T[] ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String ) { org.springframework.beans.AbstractPropertyAccessorTests.Spr10115Bean . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> < T extends org.springframework.beans.AbstractPropertyAccessorTests.Spr13837 > T T ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.AbstractPropertyAccessorTests.Spr13837Bean org.springframework.beans.AbstractPropertyAccessorTests.Spr13837Bean ( final java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; return this ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<? extends K,? extends V> < ? extends K , ? extends V > java.util.Map<? extends K,? extends V> ) { super( java.util.Map<,> ); this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public V V ( K K , V V ) { if ( this . boolean ) { throw new java.lang.UnsupportedOperationException ( ) ; } else { return super. V ( K , V ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.util.Map.Entry<K,V>> < java.util.Map . java.util.Map.Entry<K,V> < K , V > > java.util.Set<java.util.Map.Entry<K,V>> ( ) { this . boolean = true ; return super. java.util.Set<java.util.Map.Entry<K,V>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<K> < K > java.util.Set<K> ( ) { this . boolean = true ; return super. java.util.Set<K> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { this . boolean = true ; return super. int ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
