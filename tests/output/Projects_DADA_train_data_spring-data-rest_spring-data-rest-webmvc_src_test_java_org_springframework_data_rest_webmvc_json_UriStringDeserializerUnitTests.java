<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.rest.webmvc.json.UriStringDeserializer = new UriStringDeserializer ( org.springframework.data.rest.webmvc.json.PersistentProperty<> , org.springframework.data.rest.webmvc.json.UriToEntityConverter ) ; this . org.springframework.data.rest.webmvc.json.DeserializationContext = new ObjectMapper ( ) . getDeserializationContext ( ) ; ReflectionTestUtils . setField ( org.springframework.data.rest.webmvc.json.DeserializationContext , STRING , org.springframework.data.rest.webmvc.json.JsonParser ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.net.URI . java.net.URI ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.net.URI . java.net.URI ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( java.lang.Object ( STRING ) ) . isNull ( ) ; assertThat ( java.lang.Object ( null ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.json.ExpectedException . expect ( JsonMappingException .class ) ; org.springframework.data.rest.webmvc.json.ExpectedException . expectMessage ( STRING ) ; java.lang.Object ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws java.lang.Exception { when ( org.springframework.data.rest.webmvc.json.PersistentProperty<> . getActualType ( ) ) . thenReturn ( ( java.lang.Class ) java.lang.Object .class ) ; when ( org.springframework.data.rest.webmvc.json.JsonParser . getValueAsString ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.rest.webmvc.json.JsonParser . getText ( ) ) . thenReturn ( java.lang.String ) ; return org.springframework.data.rest.webmvc.json.UriStringDeserializer . deserialize ( org.springframework.data.rest.webmvc.json.JsonParser , org.springframework.data.rest.webmvc.json.DeserializationContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.net.URI java.net.URI ) throws java.lang.Exception { java.lang.Object ( java.lang.String ) ; verify ( org.springframework.data.rest.webmvc.json.UriToEntityConverter ) . convert ( eq ( java.net.URI ) , Mockito . any ( TypeDescriptor .class ) , eq ( TypeDescriptor . valueOf ( java.lang.Object .class ) ) ) ; }  <METHOD_END>
