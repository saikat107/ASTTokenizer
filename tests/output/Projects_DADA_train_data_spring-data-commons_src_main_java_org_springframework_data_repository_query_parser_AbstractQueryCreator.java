<METHOD_START> public void ( PartTree org.springframework.data.repository.query.parser.PartTree ) { this( org.springframework.data.repository.query.parser.PartTree , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ); }  <METHOD_END>
<METHOD_START> public void ( PartTree org.springframework.data.repository.query.parser.PartTree , ParameterAccessor org.springframework.data.repository.query.parser.ParameterAccessor ) { this( org.springframework.data.repository.query.parser.PartTree , java.util.Optional . java.util.Optional ( org.springframework.data.repository.query.parser.ParameterAccessor ) ); }  <METHOD_END>
<METHOD_START> private void ( PartTree org.springframework.data.repository.query.parser.PartTree , java.util.Optional<org.springframework.data.repository.query.parser.ParameterAccessor> < ParameterAccessor > java.util.Optional<org.springframework.data.repository.query.parser.ParameterAccessor> ) { Assert . notNull ( org.springframework.data.repository.query.parser.PartTree , STRING ) ; Assert . notNull ( java.util.Optional<org.springframework.data.repository.query.parser.ParameterAccessor> , STRING ) ; this . org.springframework.data.repository.query.parser.PartTree = org.springframework.data.repository.query.parser.PartTree ; this . java.util.Optional<org.springframework.data.repository.query.parser.ParameterAccessor> = java.util.Optional<org.springframework.data.repository.query.parser.ParameterAccessor> ; }  <METHOD_END>
<METHOD_START> public T T ( ) { return T ( java.util.Optional<org.springframework.data.repository.query.parser.ParameterAccessor> . map ( ParameterAccessor :: getSort ) . orElse ( Sort . unsorted ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public T T ( Sort org.springframework.data.repository.query.parser.Sort ) { return T ( S ( org.springframework.data.repository.query.parser.PartTree ) , org.springframework.data.repository.query.parser.PartTree . getSort ( ) . and ( org.springframework.data.repository.query.parser.Sort ) ) ; }  <METHOD_END>
<METHOD_START> private S S ( PartTree org.springframework.data.repository.query.parser.PartTree ) { S S = null ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Optional<org.springframework.data.repository.query.parser.ParameterAccessor> . map ( ParameterAccessor :: iterator ) . orElse ( null ) ; for ( OrPart org.springframework.data.repository.query.parser.OrPart : org.springframework.data.repository.query.parser.PartTree ) { S S = null ; for ( Part org.springframework.data.repository.query.parser.Part : org.springframework.data.repository.query.parser.OrPart ) { S = S == null ? S ( org.springframework.data.repository.query.parser.Part , java.util.Iterator<java.lang.Object> ) : S ( org.springframework.data.repository.query.parser.Part , S , java.util.Iterator<java.lang.Object> ) ; } S = S == null ? S : S ( S , S ) ; } return S ; }  <METHOD_END>
<METHOD_START> protected abstract S S ( Part org.springframework.data.repository.query.parser.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> );  <METHOD_END>
<METHOD_START> protected abstract S S ( Part org.springframework.data.repository.query.parser.Part , S S , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> );  <METHOD_END>
<METHOD_START> protected abstract S S ( S S , S S );  <METHOD_END>
<METHOD_START> protected abstract T T ( S S , Sort org.springframework.data.repository.query.parser.Sort );  <METHOD_END>
