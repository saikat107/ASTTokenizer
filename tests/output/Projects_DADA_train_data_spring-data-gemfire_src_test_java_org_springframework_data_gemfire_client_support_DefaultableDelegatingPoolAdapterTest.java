<METHOD_START> protected static java.net.InetSocketAddress java.net.InetSocketAddress ( java.lang.String java.lang.String , int int ) { return new java.net.InetSocketAddress ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.gemfire.client.support.Pool . getFreeConnectionTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getIdleTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getLoadConditioningInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getLocators ( ) ) . thenReturn ( java.util.Collections .< java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> ( ) ) ; when ( org.springframework.data.gemfire.client.support.Pool . getMaxConnections ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getMinConnections ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getMultiuserAuthentication ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.support.Pool . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.client.support.Pool . getPendingEventCount ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getPingInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getPRSingleHopEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.support.Pool . getQueryService ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.client.support.Pool . getReadTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getRetryAttempts ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getServerGroup ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.client.support.Pool . getServers ( ) ) . thenReturn ( java.util.Collections . java.util.List ( java.net.InetSocketAddress ( STRING , GemfireUtils . DEFAULT_CACHE_SERVER_PORT ) ) ) ; when ( org.springframework.data.gemfire.client.support.Pool . getSocketBufferSize ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getStatisticInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getSubscriptionAckInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getSubscriptionEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.support.Pool . getSubscriptionMessageTrackingTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getSubscriptionRedundancy ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.support.Pool . getThreadLocalConnections ( ) ) . thenReturn ( false ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter = DefaultableDelegatingPoolAdapter . from ( org.springframework.data.gemfire.client.support.Pool ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getDelegate ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.support.Pool ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.client.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.client.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.client.support.ExpectedException . expectMessage ( STRING ) ; DefaultableDelegatingPoolAdapter . from ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPreference ( ) , is ( equalTo ( DefaultableDelegatingPoolAdapter . Preference . PREFER_POOL ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersPool ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPreference ( ) , is ( equalTo ( DefaultableDelegatingPoolAdapter . Preference . PREFER_DEFAULT ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferPool ( ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPreference ( ) , is ( equalTo ( DefaultableDelegatingPoolAdapter . Preference . PREFER_POOL ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersPool ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter = org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; assertThat ( ( java.lang.String ) org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . defaultIfNull ( STRING , DefaultableDelegatingPoolAdapter.ValueProvider ) , is ( equalTo ( STRING ) ) ) ; verifyZeroInteractions ( DefaultableDelegatingPoolAdapter.ValueProvider ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter = org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) ; when ( DefaultableDelegatingPoolAdapter.ValueProvider . getValue ( ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; assertThat ( ( java.lang.String ) org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . defaultIfNull ( null , DefaultableDelegatingPoolAdapter.ValueProvider ) , is ( equalTo ( STRING ) ) ) ; verify ( DefaultableDelegatingPoolAdapter.ValueProvider , times ( NUMBER ) ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter = org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferPool ( ) ; when ( DefaultableDelegatingPoolAdapter.ValueProvider . getValue ( ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersPool ( ) , is ( true ) ) ; assertThat ( ( java.lang.String ) org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . defaultIfNull ( STRING , DefaultableDelegatingPoolAdapter.ValueProvider ) , is ( equalTo ( STRING ) ) ) ; verify ( DefaultableDelegatingPoolAdapter.ValueProvider , times ( NUMBER ) ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter = org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferPool ( ) ; when ( DefaultableDelegatingPoolAdapter.ValueProvider . getValue ( ) ) . thenReturn ( null ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersPool ( ) , is ( true ) ) ; assertThat ( ( java.lang.String ) org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . defaultIfNull ( STRING , DefaultableDelegatingPoolAdapter.ValueProvider ) , is ( equalTo ( STRING ) ) ) ; verify ( DefaultableDelegatingPoolAdapter.ValueProvider , times ( NUMBER ) ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter = org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Collections .< java.lang.Object > java.util.List<java.lang.Object> ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; assertThat ( ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . defaultIfEmpty ( java.util.List<java.lang.Object> , DefaultableDelegatingPoolAdapter.ValueProvider ) , is ( equalTo ( java.util.List<java.lang.Object> ) ) ) ; verifyZeroInteractions ( DefaultableDelegatingPoolAdapter.ValueProvider ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter = org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Collections .< java.lang.Object > java.util.List<java.lang.Object> ( STRING ) ; when ( DefaultableDelegatingPoolAdapter.ValueProvider . getValue ( ) ) . thenReturn ( java.util.List<java.lang.Object> ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; assertThat ( ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . defaultIfEmpty ( null , DefaultableDelegatingPoolAdapter.ValueProvider ) , is ( equalTo ( java.util.List<java.lang.Object> ) ) ) ; verify ( DefaultableDelegatingPoolAdapter.ValueProvider , times ( NUMBER ) ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter = org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Collections .< java.lang.Object > java.util.List<java.lang.Object> ( STRING ) ; when ( DefaultableDelegatingPoolAdapter.ValueProvider . getValue ( ) ) . thenReturn ( java.util.List<java.lang.Object> ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; assertThat ( ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . defaultIfEmpty ( java.util.Collections . java.util.List<java.lang.Object> ( ) , DefaultableDelegatingPoolAdapter.ValueProvider ) , is ( equalTo ( java.util.List<java.lang.Object> ) ) ) ; verify ( DefaultableDelegatingPoolAdapter.ValueProvider , times ( NUMBER ) ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter = org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferPool ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Collections .< java.lang.Object > java.util.List<java.lang.Object> ( STRING ) ; when ( DefaultableDelegatingPoolAdapter.ValueProvider . getValue ( ) ) . thenReturn ( java.util.List<java.lang.Object> ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersPool ( ) , is ( true ) ) ; assertThat ( ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . defaultIfEmpty ( java.util.Collections .< java.lang.Object > java.util.List<java.lang.Object> ( STRING ) , DefaultableDelegatingPoolAdapter.ValueProvider ) , is ( equalTo ( java.util.List<java.lang.Object> ) ) ) ; verify ( DefaultableDelegatingPoolAdapter.ValueProvider , times ( NUMBER ) ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter = org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferPool ( ) ; when ( DefaultableDelegatingPoolAdapter.ValueProvider . getValue ( ) ) . thenReturn ( null ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Collections .< java.lang.Object > java.util.List<java.lang.Object> ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersPool ( ) , is ( true ) ) ; assertThat ( ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . defaultIfEmpty ( java.util.List<java.lang.Object> , DefaultableDelegatingPoolAdapter.ValueProvider ) , is ( equalTo ( java.util.List<java.lang.Object> ) ) ) ; verify ( DefaultableDelegatingPoolAdapter.ValueProvider , times ( NUMBER ) ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter ) ) ) ; when ( DefaultableDelegatingPoolAdapter.ValueProvider . getValue ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Collections .< java.lang.Object > java.util.List<java.lang.Object> ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersPool ( ) , is ( true ) ) ; assertThat ( ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . defaultIfEmpty ( java.util.List<java.lang.Object> , DefaultableDelegatingPoolAdapter.ValueProvider ) , is ( equalTo ( java.util.List<java.lang.Object> ) ) ) ; verify ( DefaultableDelegatingPoolAdapter.ValueProvider , times ( NUMBER ) ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter ) ) ) ; java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> = java.util.Collections . java.util.List<java.net.InetSocketAddress> ( java.net.InetSocketAddress ( STRING , NUMBER ) ) ; java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> = java.util.Collections . java.util.List<java.net.InetSocketAddress> ( java.net.InetSocketAddress ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getDelegate ( ) , is ( equalTo ( org.springframework.data.gemfire.client.support.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getFreeConnectionTimeout ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getIdleTimeout ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getLoadConditioningInterval ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getLocators ( java.util.List<java.net.InetSocketAddress> ) , is ( equalTo ( java.util.List<java.net.InetSocketAddress> ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMaxConnections ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMinConnections ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMultiuserAuthentication ( false ) , is ( equalTo ( false ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPendingEventCount ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPingInterval ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPRSingleHopEnabled ( false ) , is ( equalTo ( false ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getQueryService ( org.springframework.data.gemfire.client.support.QueryService ) , is ( equalTo ( org.springframework.data.gemfire.client.support.QueryService ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getReadTimeout ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getRetryAttempts ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getServerGroup ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getServers ( java.util.List<java.net.InetSocketAddress> ) , is ( equalTo ( java.util.List<java.net.InetSocketAddress> ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSocketBufferSize ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getStatisticInterval ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionAckInterval ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionEnabled ( false ) , is ( equalTo ( false ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionMessageTrackingTimeout ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionRedundancy ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getThreadLocalConnections ( true ) , is ( equalTo ( true ) ) ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getPendingEventCount ( ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.client.support.Pool ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter ) ) ) ; java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> = java.util.Collections . java.util.List<java.net.InetSocketAddress> ( java.net.InetSocketAddress ( STRING , NUMBER ) ) ; java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> = java.util.Collections . java.util.List<java.net.InetSocketAddress> ( java.net.InetSocketAddress ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getDelegate ( ) , is ( equalTo ( org.springframework.data.gemfire.client.support.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getFreeConnectionTimeout ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getIdleTimeout ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getLoadConditioningInterval ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getLocators ( java.util.List<java.net.InetSocketAddress> ) , is ( equalTo ( java.util.List<java.net.InetSocketAddress> ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMaxConnections ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMinConnections ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMultiuserAuthentication ( null ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPendingEventCount ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPingInterval ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPRSingleHopEnabled ( true ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getQueryService ( null ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getReadTimeout ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getRetryAttempts ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getServerGroup ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getServers ( null ) , is ( equalTo ( java.util.List<java.net.InetSocketAddress> ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSocketBufferSize ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getStatisticInterval ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionAckInterval ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionEnabled ( true ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionMessageTrackingTimeout ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionRedundancy ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getThreadLocalConnections ( null ) , is ( equalTo ( false ) ) ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getFreeConnectionTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getIdleTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getMaxConnections ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getMultiuserAuthentication ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getPendingEventCount ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getPingInterval ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getRetryAttempts ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getServers ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getStatisticInterval ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSubscriptionMessageTrackingTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSubscriptionRedundancy ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getThreadLocalConnections ( ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.client.support.Pool ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter ) ) ) ; java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> = java.util.Collections . java.util.List<java.net.InetSocketAddress> ( java.net.InetSocketAddress ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getDelegate ( ) , is ( equalTo ( org.springframework.data.gemfire.client.support.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getFreeConnectionTimeout ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getIdleTimeout ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getLoadConditioningInterval ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getLocators ( null ) , is ( equalTo ( java.util.Collections .< java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMaxConnections ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMinConnections ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMultiuserAuthentication ( null ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPendingEventCount ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPingInterval ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPRSingleHopEnabled ( null ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getQueryService ( null ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getReadTimeout ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getRetryAttempts ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getServerGroup ( null ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getServers ( null ) , is ( equalTo ( java.util.List<java.net.InetSocketAddress> ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSocketBufferSize ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getStatisticInterval ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionAckInterval ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionEnabled ( null ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionMessageTrackingTimeout ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionRedundancy ( null ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getThreadLocalConnections ( null ) , is ( equalTo ( false ) ) ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getFreeConnectionTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getIdleTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getLoadConditioningInterval ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getLocators ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getMaxConnections ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getMinConnections ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getMultiuserAuthentication ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getPendingEventCount ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getPingInterval ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getPRSingleHopEnabled ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getReadTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getRetryAttempts ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getServerGroup ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getServers ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSocketBufferSize ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getStatisticInterval ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSubscriptionAckInterval ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSubscriptionEnabled ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSubscriptionMessageTrackingTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSubscriptionRedundancy ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getThreadLocalConnections ( ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.client.support.Pool ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter ) ) ) ; java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> = java.util.Collections . java.util.List<java.net.InetSocketAddress> ( java.net.InetSocketAddress ( STRING , NUMBER ) ) ; java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> = java.util.Collections . java.util.List<java.net.InetSocketAddress> ( java.net.InetSocketAddress ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getFreeConnectionTimeout ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getIdleTimeout ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getLoadConditioningInterval ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getLocators ( java.util.Collections .< java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> ( ) ) , is ( equalTo ( java.util.Collections .< java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMaxConnections ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMinConnections ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getMultiuserAuthentication ( false ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPendingEventCount ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPingInterval ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getPRSingleHopEnabled ( false ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getQueryService ( null ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getReadTimeout ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getRetryAttempts ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getServerGroup ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getServers ( java.util.List<java.net.InetSocketAddress> ) , is ( equalTo ( java.util.List<java.net.InetSocketAddress> ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSocketBufferSize ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getStatisticInterval ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionAckInterval ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionEnabled ( false ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionMessageTrackingTimeout ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getSubscriptionRedundancy ( NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getThreadLocalConnections ( true ) , is ( equalTo ( false ) ) ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getFreeConnectionTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getIdleTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getLoadConditioningInterval ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getLocators ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getMaxConnections ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getMinConnections ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getMultiuserAuthentication ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getPendingEventCount ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getPingInterval ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getPRSingleHopEnabled ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getReadTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getRetryAttempts ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getServerGroup ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getServers ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSocketBufferSize ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getStatisticInterval ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSubscriptionAckInterval ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSubscriptionEnabled ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSubscriptionMessageTrackingTimeout ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getSubscriptionRedundancy ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . getThreadLocalConnections ( ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.client.support.Pool ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getDelegate ( ) , is ( equalTo ( org.springframework.data.gemfire.client.support.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . destroy ( ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getDelegate ( ) , is ( equalTo ( org.springframework.data.gemfire.client.support.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersPool ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . destroy ( true ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . destroy ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . destroy ( anyBoolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferDefault ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getDelegate ( ) , is ( equalTo ( org.springframework.data.gemfire.client.support.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersDefault ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . releaseThreadLocalConnection ( ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . preferPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . getDelegate ( ) , is ( equalTo ( org.springframework.data.gemfire.client.support.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . prefersPool ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.support.DefaultableDelegatingPoolAdapter . releaseThreadLocalConnection ( ) ; verify ( org.springframework.data.gemfire.client.support.Pool , times ( NUMBER ) ) . releaseThreadLocalConnection ( ) ; }  <METHOD_END>
