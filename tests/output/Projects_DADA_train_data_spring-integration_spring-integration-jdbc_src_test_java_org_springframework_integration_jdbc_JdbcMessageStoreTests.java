<METHOD_START> @ Before public void void ( ) { org.springframework.integration.jdbc.JdbcMessageStore = new JdbcMessageStore ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . getMessage ( java.util.UUID . java.util.UUID ( ) ) ; assertNull ( org.springframework.integration.jdbc.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; assertThat ( org.springframework.integration.jdbc.Message<java.lang.String> , sameExceptIgnorableHeaders ( org.springframework.integration.jdbc.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.jdbc.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; DirectChannel org.springframework.integration.jdbc.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.jdbc.DirectChannel . setBeanName ( STRING ) ; DirectChannel org.springframework.integration.jdbc.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.jdbc.DirectChannel . setBeanName ( STRING ) ; org.springframework.integration.jdbc.Message<?> = MessageHistory . write ( org.springframework.integration.jdbc.Message<> , org.springframework.integration.jdbc.DirectChannel ) ; org.springframework.integration.jdbc.Message<?> = MessageHistory . write ( org.springframework.integration.jdbc.Message<> , org.springframework.integration.jdbc.DirectChannel ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<> ) ; org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.Message<> . getHeaders ( ) . getId ( ) ) ; MessageHistory org.springframework.integration.jdbc.MessageHistory = MessageHistory . read ( org.springframework.integration.jdbc.Message<> ) ; assertNotNull ( org.springframework.integration.jdbc.MessageHistory ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageHistory . size ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.jdbc.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.JdbcMessageStore . setSerializer ( ( object , outputStream ) -> { outputStream . write ( ( ( Message < ? > ) object ) . getPayload ( ) . toString ( ) . getBytes ( ) ) ; outputStream . flush ( ) ; } ) ; org.springframework.integration.jdbc.JdbcMessageStore . setDeserializer ( inputStream -> { BufferedReader reader = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; return new GenericMessage < String > ( reader . readLine ( ) ) ; } ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.jdbc.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) ; Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; org.springframework.integration.jdbc.JdbcMessageStore . setRegion ( STRING ) ; Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertNull ( org.springframework.integration.jdbc.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.jdbc.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . build ( ) ; org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<> ) ; org.springframework.integration.jdbc.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.Message<> ) . setCorrelationId ( STRING ) . build ( ) ; org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<> ) ; org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.Message<> . getHeaders ( ) . getId ( ) ) ; assertEquals ( STRING , new IntegrationMessageHeaderAccessor ( org.springframework.integration.jdbc.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.Message<java.lang.String> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertEquals ( org.springframework.integration.jdbc.Message<java.lang.String> , org.springframework.integration.jdbc.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertEquals ( org.springframework.integration.jdbc.Message<java.lang.String> , org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertEquals ( org.springframework.integration.jdbc.Message<java.lang.String> , org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.jdbc.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertNotSame ( org.springframework.integration.jdbc.Message<java.lang.String> , org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertThat ( org.springframework.integration.jdbc.Message<java.lang.String> , sameExceptIgnorableHeaders ( org.springframework.integration.jdbc.Message<java.lang.String> , STRING ) ) ; assertNotNull ( org.springframework.integration.jdbc.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.Message<java.lang.String> = org.springframework.integration.jdbc.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.jdbc.JdbcMessageStore . removeMessage ( org.springframework.integration.jdbc.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; long long = java.lang.System . long ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<java.lang.String> ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; assertTrue ( STRING + org.springframework.integration.jdbc.MessageGroup . getTimestamp ( ) + STRING + long , org.springframework.integration.jdbc.MessageGroup . getTimestamp ( ) >= long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<java.lang.String> ) ; org.springframework.integration.jdbc.JdbcMessageStore . removeMessagesFromGroup ( java.lang.String , org.springframework.integration.jdbc.Message<java.lang.String> ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.integration.jdbc.JdbcMessageStore . setRemoveBatchSize ( NUMBER ) ; java.util.List<org.springframework.integration.jdbc.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.jdbc.Message<?>> = new java.util.ArrayList<org.springframework.integration.jdbc.Message<?>> < Message < ? > > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; java.util.List<org.springframework.integration.jdbc.Message<?>> . add ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; } this . org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , java.util.List<org.springframework.integration.jdbc.Message<?>> . toArray ( new Message < ? > [ java.util.List<org.springframework.integration.jdbc.Message<?>> . size ( ) ] ) ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = this . org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; this . org.springframework.integration.jdbc.JdbcMessageStore . removeMessagesFromGroup ( java.lang.String , java.util.List<org.springframework.integration.jdbc.Message<?>> ) ; org.springframework.integration.jdbc.MessageGroup = this . org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JdbcTemplate org.springframework.integration.jdbc.JdbcTemplate = new JdbcTemplate ( this . javax.sql.DataSource ) ; org.springframework.integration.jdbc.JdbcTemplate . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<java.lang.String> ) ; org.springframework.integration.jdbc.JdbcMessageStore . removeMessageGroup ( java.lang.String ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; java.lang.String java.lang.String = UUIDConverter . getUUID ( java.lang.String ) . toString ( ) ; assertTrue ( org.springframework.integration.jdbc.JdbcTemplate . queryForList ( STRING , java.lang.String ) . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<java.lang.String> ) ; org.springframework.integration.jdbc.JdbcMessageStore . completeGroup ( java.lang.String ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertTrue ( org.springframework.integration.jdbc.MessageGroup . isComplete ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<java.lang.String> ) ; org.springframework.integration.jdbc.JdbcMessageStore . setLastReleasedSequenceNumberForGroup ( java.lang.String , NUMBER ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . getLastReleasedMessageSequenceNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroupCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageCountForAllMessageGroups ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; this . org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = this . org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.jdbc.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) . getPayload ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.jdbc.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<java.lang.String> ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.jdbc.JdbcMessageStore . registerMessageGroupExpiryCallback ( ( messageGroupStore , group ) -> { messageGroupStore . removeMessageGroup ( group . getGroupId ( ) ) ; groupRemovalLatch . countDown ( ) ; } ) ; org.springframework.integration.jdbc.JdbcMessageStore . expireMessageGroups ( NUMBER ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; JdbcTemplate org.springframework.integration.jdbc.JdbcTemplate = new JdbcTemplate ( this . javax.sql.DataSource ) ; org.springframework.integration.jdbc.JdbcTemplate . afterPropertiesSet ( ) ; org.springframework.integration.jdbc.JdbcTemplate . update ( STRING , ( PreparedStatementSetter ) ps -> { ps . setTimestamp ( NUMBER , new Timestamp ( System . currentTimeMillis ( ) - NUMBER ) ) ; ps . setString ( NUMBER , UUIDConverter . getUUID ( groupId ) . toString ( ) ) ; ps . setString ( NUMBER , STRING ) ; } ) ; org.springframework.integration.jdbc.JdbcMessageStore . expireMessageGroups ( NUMBER ) ; org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . setTimeoutOnIdle ( true ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<java.lang.String> ) ; org.springframework.integration.jdbc.JdbcMessageStore . registerMessageGroupExpiryCallback ( ( messageGroupStore , group ) -> messageGroupStore . removeMessageGroup ( group . getGroupId ( ) ) ) ; JdbcTemplate org.springframework.integration.jdbc.JdbcTemplate = new JdbcTemplate ( this . javax.sql.DataSource ) ; org.springframework.integration.jdbc.JdbcTemplate . afterPropertiesSet ( ) ; void ( org.springframework.integration.jdbc.JdbcTemplate , java.lang.String , NUMBER ) ; org.springframework.integration.jdbc.JdbcMessageStore . expireMessageGroups ( NUMBER ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; void ( org.springframework.integration.jdbc.JdbcTemplate , java.lang.String , NUMBER ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; void ( org.springframework.integration.jdbc.JdbcTemplate , java.lang.String , NUMBER ) ; org.springframework.integration.jdbc.JdbcMessageStore . expireMessageGroups ( NUMBER ) ; org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( JdbcTemplate org.springframework.integration.jdbc.JdbcTemplate , final java.lang.String java.lang.String , final long long ) { org.springframework.integration.jdbc.JdbcTemplate . update ( STRING , ( PreparedStatementSetter ) ps -> { ps . setTimestamp ( NUMBER , new Timestamp ( System . currentTimeMillis ( ) - timeout ) ) ; ps . setString ( NUMBER , UUIDConverter . getUUID ( groupId ) . toString ( ) ) ; ps . setString ( NUMBER , STRING ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . pollMessageFromGroup ( STRING ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.Message<> . getPayload ( ) ) ; org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . pollMessageFromGroup ( STRING ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.Message<> . getPayload ( ) ) ; org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; final MessageBuilder < java.lang.String > org.springframework.integration.jdbc.MessageBuilder<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; final MessageBuilder < java.lang.String > org.springframework.integration.jdbc.MessageBuilder<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; org.springframework.integration.jdbc.MessageBuilder<java.lang.String> . setSequenceNumber ( NUMBER ) ; org.springframework.integration.jdbc.MessageBuilder<java.lang.String> . setSequenceNumber ( NUMBER ) ; final Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.MessageBuilder<java.lang.String> . build ( ) ; final Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.MessageBuilder<java.lang.String> . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<> ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<> ) ; final Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) ; final Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final JdbcMessageStore org.springframework.integration.jdbc.JdbcMessageStore = new JdbcMessageStore ( javax.sql.DataSource ) ; org.springframework.integration.jdbc.JdbcMessageStore . setRegion ( java.lang.String ) ; final JdbcMessageStore org.springframework.integration.jdbc.JdbcMessageStore = new JdbcMessageStore ( javax.sql.DataSource ) ; org.springframework.integration.jdbc.JdbcMessageStore . setRegion ( java.lang.String ) ; final Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; final MessageBuilder < java.lang.String > org.springframework.integration.jdbc.MessageBuilder<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; final MessageBuilder < java.lang.String > org.springframework.integration.jdbc.MessageBuilder<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; org.springframework.integration.jdbc.MessageBuilder<java.lang.String> . setSequenceNumber ( NUMBER ) ; org.springframework.integration.jdbc.MessageBuilder<java.lang.String> . setSequenceNumber ( NUMBER ) ; final Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.MessageBuilder<java.lang.String> . build ( ) ; final Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.MessageBuilder<java.lang.String> . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<> ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<> ) ; final Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) ; final Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final JdbcMessageStore org.springframework.integration.jdbc.JdbcMessageStore = new JdbcMessageStore ( javax.sql.DataSource ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.jdbc.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( java.lang.String ) . build ( ) ; Message < ? > org.springframework.integration.jdbc.Message<?> = MessageBuilder . withPayload ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageStore . addMessagesToGroup ( java.lang.String , org.springframework.integration.jdbc.Message<> , org.springframework.integration.jdbc.Message<> ) ; assertTrue ( org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroupCount ( ) == NUMBER ) ; assertTrue ( org.springframework.integration.jdbc.JdbcMessageStore . getMessageCount ( ) == NUMBER ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; org.springframework.integration.jdbc.JdbcMessageStore . completeGroup ( org.springframework.integration.jdbc.MessageGroup . getGroupId ( ) ) ; for ( Message < ? > org.springframework.integration.jdbc.Message<?> : org.springframework.integration.jdbc.MessageGroup . getMessages ( ) ) { org.springframework.integration.jdbc.JdbcMessageStore . removeMessagesFromGroup ( java.lang.String , org.springframework.integration.jdbc.Message<> ) ; } org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertTrue ( org.springframework.integration.jdbc.MessageGroup . isComplete ( ) ) ; }  <METHOD_END>
