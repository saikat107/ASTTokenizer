<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.configuration.PollingConsumer . setReceiveTimeout ( NUMBER ) ; this . org.springframework.integration.configuration.PollingConsumer . start ( ) ; assertTrue ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; Trigger org.springframework.integration.configuration.Trigger = TestUtils . getPropertyValue ( this . org.springframework.integration.configuration.PollingConsumer , STRING , Trigger .class ) ; assertThat ( org.springframework.integration.configuration.Trigger , Matchers . instanceOf ( PeriodicTrigger .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING , java.lang.Boolean .class ) ) ; assertTrue ( this . org.springframework.integration.configuration.Lifecycle . isRunning ( ) ) ; Log org.springframework.integration.configuration.Log = spy ( TestUtils . getPropertyValue ( this . org.springframework.integration.configuration.PollingConsumer , STRING , Log .class ) ) ; when ( org.springframework.integration.configuration.Log . isDebugEnabled ( ) ) . thenReturn ( true ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; doAnswer ( invocation -> { pollerInterruptedLatch . countDown ( ) ; invocation . callRealMethod ( ) ; return null ; } ) . when ( org.springframework.integration.configuration.Log ) . debug ( STRING ) ; new DirectFieldAccessor ( this . org.springframework.integration.configuration.PollingConsumer ) . setPropertyValue ( STRING , org.springframework.integration.configuration.Log ) ; this . org.springframework.integration.configuration.PollingConsumer . stop ( ) ; assertFalse ( this . org.springframework.integration.configuration.Lifecycle . isRunning ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; this . org.springframework.integration.configuration.PollingConsumer . start ( ) ; assertTrue ( this . org.springframework.integration.configuration.Lifecycle . isRunning ( ) ) ; org.springframework.integration.configuration.Trigger = TestUtils . getPropertyValue ( this . org.springframework.integration.configuration.PollingConsumer , STRING , Trigger .class ) ; assertThat ( org.springframework.integration.configuration.Trigger , Matchers . instanceOf ( PeriodicTrigger .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.configuration.Trigger = TestUtils . getPropertyValue ( this . org.springframework.integration.configuration.PollingConsumer , STRING , Trigger .class ) ; assertThat ( org.springframework.integration.configuration.Trigger , Matchers . instanceOf ( CronTrigger .class ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING ) ) ; org.springframework.integration.configuration.Trigger = TestUtils . getPropertyValue ( this . org.springframework.integration.configuration.PollingConsumer , STRING , Trigger .class ) ; assertThat ( org.springframework.integration.configuration.Trigger , Matchers . instanceOf ( PeriodicTrigger .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.configuration.Trigger = TestUtils . getPropertyValue ( this . org.springframework.integration.configuration.PollingConsumer , STRING , Trigger .class ) ; assertThat ( org.springframework.integration.configuration.Trigger , Matchers . instanceOf ( PeriodicTrigger .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING , java.lang.Boolean .class ) ) ; assertSame ( this . org.springframework.integration.configuration.Trigger , org.springframework.integration.configuration.Trigger ) ; org.springframework.integration.configuration.Trigger = TestUtils . getPropertyValue ( this . org.springframework.integration.configuration.PollingConsumer , STRING , Trigger .class ) ; assertThat ( org.springframework.integration.configuration.Trigger , Matchers . instanceOf ( PeriodicTrigger .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.Trigger , STRING , java.lang.Boolean .class ) ) ; this . org.springframework.integration.configuration.PollableChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<> . getPayload ( ) ) ; org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<> . getPayload ( ) ) ; MessageHistory org.springframework.integration.configuration.MessageHistory = org.springframework.integration.configuration.Message<> . getHeaders ( ) . get ( MessageHistory . HEADER_NAME , MessageHistory .class ) ; assertNotNull ( org.springframework.integration.configuration.MessageHistory ) ; java.lang.String java.lang.String = org.springframework.integration.configuration.MessageHistory . toString ( ) ; assertThat ( java.lang.String , Matchers . containsString ( STRING ) ) ; assertThat ( java.lang.String , Matchers . containsString ( STRING ) ) ; assertThat ( java.lang.String , Matchers . not ( Matchers . containsString ( STRING ) ) ) ; org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<> . getPayload ( ) ) ; org.springframework.integration.configuration.MessageHistory = org.springframework.integration.configuration.Message<> . getHeaders ( ) . get ( MessageHistory . HEADER_NAME , MessageHistory .class ) ; assertNotNull ( org.springframework.integration.configuration.MessageHistory ) ; java.lang.String = org.springframework.integration.configuration.MessageHistory . toString ( ) ; assertThat ( java.lang.String , Matchers . not ( Matchers . containsString ( STRING ) ) ) ; assertThat ( java.lang.String , Matchers . not ( Matchers . containsString ( STRING ) ) ) ; assertThat ( java.lang.String , Matchers . containsString ( STRING ) ) ; assertNull ( this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ) ; assertThat ( this . org.springframework.integration.configuration.EnableIntegrationTests.TestChannelInterceptor . java.lang.Integer ( ) , Matchers . greaterThan ( NUMBER ) ) ; assertThat ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) , Matchers . greaterThan ( NUMBER ) ) ; assertTrue ( this . org.springframework.integration.configuration.ApplicationContext . containsBean ( STRING ) ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( MethodInvokingMessageSource .class ) ) ; assertNull ( this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ) ; SmartLifecycle org.springframework.integration.configuration.SmartLifecycle = this . org.springframework.integration.configuration.ApplicationContext . getBean ( STRING , SmartLifecycle .class ) ; assertFalse ( org.springframework.integration.configuration.SmartLifecycle . isAutoStartup ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.configuration.SmartLifecycle . getPhase ( ) ) ; org.springframework.integration.configuration.SmartLifecycle . start ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertEquals ( int + NUMBER , org.springframework.integration.configuration.Message<> . getPayload ( ) ) ; } Message < ? > org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<> . getPayload ( ) ) ; org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<> . getPayload ( ) ) ; assertTrue ( org.springframework.integration.configuration.Message<> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<> . getHeaders ( ) . get ( STRING ) ) ; MessagingTemplate org.springframework.integration.configuration.MessagingTemplate = new MessagingTemplate ( this . org.springframework.integration.configuration.MessageChannel ) ; assertFalse ( org.springframework.integration.configuration.MessagingTemplate . convertSendAndReceive ( STRING , java.lang.Boolean .class ) ) ; this . org.springframework.integration.configuration.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( org.springframework.integration.configuration.MessagingTemplate . convertSendAndReceive ( STRING , java.lang.Boolean .class ) ) ; this . org.springframework.integration.configuration.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertFalse ( org.springframework.integration.configuration.MessagingTemplate . convertSendAndReceive ( STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) { try { this . org.springframework.integration.configuration.MessageHistoryConfigurer . setComponentNamePatterns ( new java.lang.String [] { STRING } ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , containsString ( STRING ) ) ; } this . org.springframework.integration.configuration.MessageHistoryConfigurer . stop ( ) ; this . org.springframework.integration.configuration.MessageHistoryConfigurer . setComponentNamePatterns ( new java.lang.String [] { STRING } ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( this . org.springframework.integration.configuration.MessageHistoryConfigurer , STRING , java.lang.String [] .class ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = this . org.springframework.integration.configuration.EnableIntegrationTests.TestGateway . java.lang.String ( java.lang.String ) ; assertEquals ( java.lang.String . java.lang.String ( ) , java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; java.lang.String = this . org.springframework.integration.configuration.EnableIntegrationTests.TestGateway2 . java.lang.String ( java.lang.String ) ; assertNotNull ( java.lang.String ) ; assertEquals ( java.lang.String . java.lang.String ( ) + STRING , java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) + NUMBER ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertNotNull ( this . org.springframework.integration.configuration.EnableIntegrationTests.TestGateway2 . java.lang.String ( STRING ) ) ; java.lang.String = this . org.springframework.integration.configuration.EnableIntegrationTests.TestGateway2 . java.lang.String ( STRING ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( NUMBER , NUMBER ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , is ( new org.springframework.integration.configuration.EnableIntegrationTests.RegexMatcher<java.lang.String> < java.lang.String > ( STRING ) ) ) ; this . org.springframework.integration.configuration.EnableIntegrationTests.TestGateway . void ( STRING ) ; assertTrue ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , this . java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . java.lang.Thread ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.integration.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.integration.configuration.AnnotationConfigApplicationContext . register ( org.springframework.integration.configuration.EnableIntegrationTests.ChildConfiguration .class ) ; org.springframework.integration.configuration.AnnotationConfigApplicationContext . setParent ( this . org.springframework.integration.configuration.ApplicationContext ) ; org.springframework.integration.configuration.AnnotationConfigApplicationContext . refresh ( ) ; AbstractMessageChannel org.springframework.integration.configuration.AbstractMessageChannel = org.springframework.integration.configuration.AnnotationConfigApplicationContext . getBean ( STRING , AbstractMessageChannel .class ) ; ChannelInterceptor org.springframework.integration.configuration.ChannelInterceptor = org.springframework.integration.configuration.AnnotationConfigApplicationContext . getBean ( STRING , ChannelInterceptor .class ) ; assertTrue ( org.springframework.integration.configuration.AbstractMessageChannel . getChannelInterceptors ( ) . contains ( org.springframework.integration.configuration.ChannelInterceptor ) ) ; assertFalse ( this . org.springframework.integration.configuration.QueueChannel . getChannelInterceptors ( ) . contains ( org.springframework.integration.configuration.ChannelInterceptor ) ) ; org.springframework.integration.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.integration.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.integration.configuration.AnnotationConfigApplicationContext . register ( org . springframework . integration . org.springframework.integration.configuration2 . org.springframework.integration.configuration2 .class ) ; org.springframework.integration.configuration.AnnotationConfigApplicationContext . setParent ( this . org.springframework.integration.configuration.ApplicationContext ) ; org.springframework.integration.configuration.AnnotationConfigApplicationContext . refresh ( ) ; AbstractMessageChannel org.springframework.integration.configuration.AbstractMessageChannel = org.springframework.integration.configuration.AnnotationConfigApplicationContext . getBean ( STRING , AbstractMessageChannel .class ) ; ChannelInterceptor org.springframework.integration.configuration.ChannelInterceptor = org.springframework.integration.configuration.AnnotationConfigApplicationContext . getBean ( STRING , ChannelInterceptor .class ) ; assertTrue ( org.springframework.integration.configuration.AbstractMessageChannel . getChannelInterceptors ( ) . contains ( org.springframework.integration.configuration.ChannelInterceptor ) ) ; assertFalse ( this . org.springframework.integration.configuration.QueueChannel . getChannelInterceptors ( ) . contains ( org.springframework.integration.configuration.ChannelInterceptor ) ) ; org.springframework.integration.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.configuration.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; this . org.springframework.integration.configuration.MessageChannel . send ( new GenericMessage < java.lang.Boolean > ( true ) ) ; assertThat ( this . org.springframework.integration.configuration.EnableIntegrationTests.TestConverter . java.lang.Integer ( ) , Matchers . greaterThan ( NUMBER ) ) ; assertTrue ( this . org.springframework.integration.configuration.MessageChannel . send ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ) ; assertTrue ( this . org.springframework.integration.configuration.MessageChannel . send ( new GenericMessage <> ( MutableMessageBuilder . withPayload ( STRING ) . build ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , this . org.springframework.integration.configuration.ApplicationContext . getBeanNamesForType ( GatewayProxyFactoryBean .class ) . length ) ; PollingConsumer org.springframework.integration.configuration.PollingConsumer = this . org.springframework.integration.configuration.ApplicationContext . getBean ( STRING , PollingConsumer .class ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertSame ( org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertSame ( org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.util.List .class ) . get ( NUMBER ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; org.springframework.integration.configuration.PollingConsumer = this . org.springframework.integration.configuration.ApplicationContext . getBean ( STRING , PollingConsumer .class ) ; org.springframework.integration.configuration.PollingConsumer . stop ( ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertSame ( org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertSame ( org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.util.List .class ) . get ( NUMBER ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; org.springframework.integration.configuration.PollingConsumer = this . org.springframework.integration.configuration.ApplicationContext . getBean ( STRING , PollingConsumer .class ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertSame ( org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertSame ( org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.util.List .class ) . get ( NUMBER ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; org.springframework.integration.configuration.PollingConsumer = this . org.springframework.integration.configuration.ApplicationContext . getBean ( STRING , PollingConsumer .class ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertSame ( org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertSame ( org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.util.List .class ) . get ( NUMBER ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; org.springframework.integration.configuration.PollingConsumer = this . org.springframework.integration.configuration.ApplicationContext . getBean ( STRING , PollingConsumer .class ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertSame ( org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( - NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.configuration.PollingConsumer = this . org.springframework.integration.configuration.ApplicationContext . getBean ( STRING , PollingConsumer .class ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertSame ( org.springframework.integration.configuration.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.configuration.PollingConsumer , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericMessage < ? > org.springframework.integration.configuration.GenericMessage<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.integration.configuration.MessageChannel . send ( org.springframework.integration.configuration.GenericMessage<> ) ; Message < ? > org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertSame ( org.springframework.integration.configuration.Message<> , org.springframework.integration.configuration.GenericMessage<> ) ; assertNull ( this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.configuration.MessageChannel . send ( org.springframework.integration.configuration.GenericMessage<> ) ; org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertSame ( org.springframework.integration.configuration.Message<> , org.springframework.integration.configuration.GenericMessage<> ) ; assertNull ( this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ) ; try { this . org.springframework.integration.configuration.MessageChannel . send ( org.springframework.integration.configuration.GenericMessage<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( MessageDeliveryException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } this . org.springframework.integration.configuration.ApplicationContext . getBean ( STRING , Lifecycle .class ) . start ( ) ; this . org.springframework.integration.configuration.MessageChannel . send ( org.springframework.integration.configuration.GenericMessage<> ) ; org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertSame ( org.springframework.integration.configuration.Message<> , org.springframework.integration.configuration.GenericMessage<> ) ; assertNull ( this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.configuration.MessageChannel . send ( org.springframework.integration.configuration.GenericMessage<> ) ; org.springframework.integration.configuration.Message<?> = this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertSame ( org.springframework.integration.configuration.Message<> , org.springframework.integration.configuration.GenericMessage<> ) ; assertNull ( this . org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ) ; PollableChannel org.springframework.integration.configuration.PollableChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.configuration.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.configuration.GenericMessage<> ) . setReplyChannel ( org.springframework.integration.configuration.PollableChannel ) . build ( ) ; this . org.springframework.integration.configuration.PollableChannel . send ( org.springframework.integration.configuration.Message<> ) ; org.springframework.integration.configuration.Message<?> = org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertSame ( org.springframework.integration.configuration.Message<> , org.springframework.integration.configuration.Message<> ) ; assertNull ( org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ) ; try { this . org.springframework.integration.configuration.MessageChannel . send ( org.springframework.integration.configuration.GenericMessage<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( MessageDeliveryException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } this . org.springframework.integration.configuration.ApplicationContext . getBean ( STRING , Lifecycle .class ) . start ( ) ; this . org.springframework.integration.configuration.MessageChannel . send ( org.springframework.integration.configuration.Message<> ) ; org.springframework.integration.configuration.Message<?> = org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertSame ( org.springframework.integration.configuration.Message<> , org.springframework.integration.configuration.Message<> ) ; assertNull ( org.springframework.integration.configuration.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.Integer>> = new java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; Flux . just ( STRING , STRING , STRING , STRING , STRING ) . map ( java.lang.Integer :: parseInt ) . flatMap ( this . org.springframework.integration.configuration.EnableIntegrationTests.TestGateway :: org.springframework.integration.configuration.Mono<java.lang.Integer> ) . collectList ( ) . subscribe ( integers -> { ref . set ( integers ) ; consumeLatch . countDown ( ) ; } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = java.util.concurrent.atomic.AtomicReference<java.util.List<java.lang.Integer>> . java.util.List<java.lang.Integer> ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . int ( ) ) ; assertThat ( java.util.List<java.lang.Integer> , Matchers .< java.lang.Integer > contains ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) { assertThat ( this . org.springframework.integration.configuration.SmartLifecycleRoleController . getRoles ( ) , containsInAnyOrder ( STRING , STRING ) ) ; assertFalse ( this . org.springframework.integration.configuration.SmartLifecycleRoleController . allEndpointsRunning ( STRING ) ) ; assertFalse ( this . org.springframework.integration.configuration.SmartLifecycleRoleController . noEndpointsRunning ( STRING ) ) ; assertTrue ( this . org.springframework.integration.configuration.SmartLifecycleRoleController . allEndpointsRunning ( STRING ) ) ; assertFalse ( this . org.springframework.integration.configuration.SmartLifecycleRoleController . noEndpointsRunning ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > java.util.Map<java.lang.String,java.lang.Boolean> = this . org.springframework.integration.configuration.SmartLifecycleRoleController . getEndpointsRunningStatus ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING ) , equalTo ( java.lang.Boolean . java.lang.Boolean ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING ) , equalTo ( java.lang.Boolean . java.lang.Boolean ) ) ; this . org.springframework.integration.configuration.SmartLifecycleRoleController . startLifecyclesInRole ( STRING ) ; assertTrue ( this . org.springframework.integration.configuration.SmartLifecycleRoleController . allEndpointsRunning ( STRING ) ) ; this . org.springframework.integration.configuration.SmartLifecycleRoleController . stopLifecyclesInRole ( STRING ) ; assertFalse ( this . org.springframework.integration.configuration.SmartLifecycleRoleController . allEndpointsRunning ( STRING ) ) ; assertTrue ( this . org.springframework.integration.configuration.SmartLifecycleRoleController . noEndpointsRunning ( STRING ) ) ; @ java.lang.SuppressWarnings ( STRING ) MultiValueMap < java.lang.String , SmartLifecycle > org.springframework.integration.configuration.MultiValueMap<java.lang.String,org.springframework.integration.configuration.SmartLifecycle> = TestUtils . getPropertyValue ( this . org.springframework.integration.configuration.SmartLifecycleRoleController , STRING , MultiValueMap .class ) ; assertEquals ( NUMBER , org.springframework.integration.configuration.MultiValueMap<java.lang.String,org.springframework.integration.configuration.SmartLifecycle> . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.configuration.MultiValueMap<java.lang.String,org.springframework.integration.configuration.SmartLifecycle> . get ( STRING ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.configuration.MultiValueMap<java.lang.String,org.springframework.integration.configuration.SmartLifecycle> . get ( STRING ) . size ( ) ) ; assertFalse ( this . org.springframework.integration.configuration.PollingConsumer . isRunning ( ) ) ; assertFalse ( this . org.springframework.integration.configuration.AbstractEndpoint . isRunning ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.configuration.MultiValueMap<java.lang.String,org.springframework.integration.configuration.SmartLifecycle> . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.configuration.MultiValueMap<java.lang.String,org.springframework.integration.configuration.SmartLifecycle> . get ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.configuration.QueueChannel = new QueueChannel ( ) ; ConfigurableListableBeanFactory org.springframework.integration.configuration.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) this . org.springframework.integration.configuration.ApplicationContext . getAutowireCapableBeanFactory ( ) ; org.springframework.integration.configuration.ConfigurableListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.configuration.QueueChannel ) ; org.springframework.integration.configuration.ConfigurableListableBeanFactory . initializeBean ( org.springframework.integration.configuration.QueueChannel , STRING ) ; this . org.springframework.integration.configuration.Lifecycle . start ( ) ; Message < ? > org.springframework.integration.configuration.Message<?> = org.springframework.integration.configuration.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.configuration.Message<> ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<> . getPayload ( ) ) ; this . org.springframework.integration.configuration.Lifecycle . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EvaluationContext org.springframework.integration.configuration.EvaluationContext = this . org.springframework.integration.configuration.ApplicationContext . getBean ( EvaluationContext .class ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . getPropertyValue ( org.springframework.integration.configuration.EvaluationContext , STRING , java.util.List .class ) ; assertThat ( java.util.List<> . get ( NUMBER ) , instanceOf ( JsonPropertyAccessor .class ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( org.springframework.integration.configuration.EvaluationContext , STRING , java.util.Map .class ) ; java.lang.Object java.lang.Object = java.util.Map<,> . get ( STRING ) ; assertEquals ( ClassUtils . getStaticMethod ( org.springframework.integration.configuration.EnableIntegrationTests.TestSpelFunction .class , STRING , java.lang.Object .class ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) { @ java.lang.Override protected org.springframework.integration.configuration.Message<?> < ? > org.springframework.integration.configuration.Message<?> ( long long ) { java.util.concurrent.CountDownLatch ( ) . void ( ) ; return super. doReceive ( long ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.configuration.Message<?> < ? > org.springframework.integration.configuration.Message<?> ( long long ) { java.util.concurrent.CountDownLatch ( ) . void ( ) ; return super. doReceive ( long ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.Trigger org.springframework.integration.configuration.Trigger ( ) { return new PeriodicTrigger ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.Trigger org.springframework.integration.configuration.Trigger ( ) { return new OnlyOnceTrigger ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.WireTap org.springframework.integration.configuration.WireTap ( ) { return new WireTap ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollableChannel org.springframework.integration.configuration.PollableChannel ( ) { QueueChannel org.springframework.integration.configuration.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.configuration.QueueChannel . addInterceptor ( org.springframework.integration.configuration.WireTap ( ) ) ; return org.springframework.integration.configuration.QueueChannel ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollableChannel org.springframework.integration.configuration.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollableChannel org.springframework.integration.configuration.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ GlobalChannelInterceptor ( patterns = STRING ) public org.springframework.integration.configuration.WireTap org.springframework.integration.configuration.WireTap ( ) { return new WireTap ( this . org.springframework.integration.configuration.PollableChannel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ( ) { return new java.util.concurrent.atomic.AtomicInteger ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ GlobalChannelInterceptor public org.springframework.integration.configuration.FactoryBean<org.springframework.integration.configuration.ChannelInterceptor> < ChannelInterceptor > org.springframework.integration.configuration.FactoryBean<org.springframework.integration.configuration.ChannelInterceptor> ( ) { return new AbstractFactoryBean < ChannelInterceptor > ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ChannelInterceptor .class ; } @ java.lang.Override protected org.springframework.integration.configuration.ChannelInterceptor org.springframework.integration.configuration.ChannelInterceptor ( ) java.lang.Exception { return new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.configuration.Message<?> < ? > org.springframework.integration.configuration.Message<?> ( Message < ? > org.springframework.integration.configuration.Message<?> , MessageChannel org.springframework.integration.configuration.MessageChannel ) { java.util.concurrent.atomic.AtomicInteger ( ) . int ( ) ; return super. preSend ( org.springframework.integration.configuration.Message<> , org.springframework.integration.configuration.MessageChannel ) ; } } ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ChannelInterceptor .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.configuration.ChannelInterceptor org.springframework.integration.configuration.ChannelInterceptor ( ) java.lang.Exception { return new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.configuration.Message<?> < ? > org.springframework.integration.configuration.Message<?> ( Message < ? > org.springframework.integration.configuration.Message<?> , MessageChannel org.springframework.integration.configuration.MessageChannel ) { java.util.concurrent.atomic.AtomicInteger ( ) . int ( ) ; return super. preSend ( org.springframework.integration.configuration.Message<> , org.springframework.integration.configuration.MessageChannel ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.configuration.Message<?> < ? > org.springframework.integration.configuration.Message<?> ( Message < ? > org.springframework.integration.configuration.Message<?> , MessageChannel org.springframework.integration.configuration.MessageChannel ) { java.util.concurrent.atomic.AtomicInteger ( ) . int ( ) ; return super. preSend ( org.springframework.integration.configuration.Message<> , org.springframework.integration.configuration.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ BridgeFrom ( STRING ) public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollableChannel org.springframework.integration.configuration.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ BridgeFrom ( value = STRING , poller = @ Poller ( fixedDelay = STRING ) ) public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ org.springframework.integration.configuration.EnableIntegrationTests.MyBridgeFrom public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ BridgeTo ( STRING ) public org.springframework.integration.configuration.MessageChannel org.springframework.integration.configuration.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ BridgeTo ( poller = @ Poller ( fixedDelay = STRING ) ) public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ org.springframework.integration.configuration.EnableIntegrationTests.MyBridgeTo public org.springframework.integration.configuration.MessageChannel org.springframework.integration.configuration.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.MethodInterceptor org.springframework.integration.configuration.MethodInterceptor ( ) { return mock ( MethodInterceptor .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.MethodInterceptor org.springframework.integration.configuration.MethodInterceptor ( ) { return mock ( MethodInterceptor .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.configuration.Message<?> < ? > org.springframework.integration.configuration.Message<?> ( Message < ? > org.springframework.integration.configuration.Message<?> , MessageChannel org.springframework.integration.configuration.MessageChannel ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; return org.springframework.integration.configuration.Message<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Number java.lang.Number ( java.lang.Boolean java.lang.Boolean ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; return java.lang.Boolean ? NUMBER : NUMBER ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.MessageChannel org.springframework.integration.configuration.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > java.util.concurrent.atomic.AtomicReference<java.lang.Thread> ( ) { return new java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) @ Role ( STRING ) public org.springframework.integration.configuration.MessageHandler org.springframework.integration.configuration.MessageHandler ( ) { return new MessageHandler ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.integration.configuration.Message<?> ) throws org.springframework.integration.configuration.MessagingException { java.util.concurrent.CountDownLatch ( ) . void ( ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Thread> ( ) . void ( java.lang.Thread . java.lang.Thread ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.configuration.Message<?> ) throws org.springframework.integration.configuration.MessagingException { java.util.concurrent.CountDownLatch ( ) . void ( ) ; java.util.concurrent.atomic.AtomicReference<java.lang.Thread> ( ) . void ( java.lang.Thread . java.lang.Thread ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) @ Role ( STRING ) public org.springframework.integration.configuration.ExpressionControlBusFactoryBean org.springframework.integration.configuration.ExpressionControlBusFactoryBean ( ) { return new ExpressionControlBusFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.Lifecycle org.springframework.integration.configuration.Lifecycle ( ) { return new Lifecycle ( ) { private volatile boolean boolean ; @ java.lang.Override public void void ( ) { this . boolean = true ; } @ java.lang.Override public void void ( ) { this . boolean = false ; } @ java.lang.Override public boolean boolean ( ) { return this . boolean ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollableChannel org.springframework.integration.configuration.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollableChannel org.springframework.integration.configuration.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollableChannel org.springframework.integration.configuration.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollableChannel org.springframework.integration.configuration.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollableChannel org.springframework.integration.configuration.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollableChannel org.springframework.integration.configuration.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { QueueChannel org.springframework.integration.configuration.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.configuration.QueueChannel . setDatatypes ( java.lang.Number .class ) ; return org.springframework.integration.configuration.QueueChannel ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.QueueChannel org.springframework.integration.configuration.QueueChannel ( ) { QueueChannel org.springframework.integration.configuration.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.configuration.QueueChannel . setDatatypes ( byte [] .class ) ; return org.springframework.integration.configuration.QueueChannel ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = PollerMetadata . DEFAULT_POLLER ) public org.springframework.integration.configuration.PollerMetadata org.springframework.integration.configuration.PollerMetadata ( ) { PollerMetadata org.springframework.integration.configuration.PollerMetadata = new PollerMetadata ( ) ; org.springframework.integration.configuration.PollerMetadata . setTrigger ( new PeriodicTrigger ( NUMBER ) ) ; return org.springframework.integration.configuration.PollerMetadata ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.PollerMetadata org.springframework.integration.configuration.PollerMetadata ( ) { PollerMetadata org.springframework.integration.configuration.PollerMetadata = new PollerMetadata ( ) ; org.springframework.integration.configuration.PollerMetadata . setTrigger ( new PeriodicTrigger ( NUMBER ) ) ; return org.springframework.integration.configuration.PollerMetadata ; }  <METHOD_END>
<METHOD_START> @ Bean @ IntegrationConverter public org.springframework.integration.configuration.SerializingConverter org.springframework.integration.configuration.SerializingConverter ( ) { return new SerializingConverter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.DirectChannel org.springframework.integration.configuration.DirectChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.EnableIntegrationTests.AnnotationTestService org.springframework.integration.configuration.EnableIntegrationTests.AnnotationTestService ( ) { return new org.springframework.integration.configuration.EnableIntegrationTests.AnnotationTestServiceImpl ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.SpelFunctionFactoryBean org.springframework.integration.configuration.SpelFunctionFactoryBean ( ) { return new SpelFunctionFactoryBean ( org.springframework.integration.configuration.EnableIntegrationTests.TestSpelFunction .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.SpelPropertyAccessorRegistrar org.springframework.integration.configuration.SpelPropertyAccessorRegistrar ( ) { return new SpelPropertyAccessorRegistrar ( new JsonPropertyAccessor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.configuration.MessageChannel org.springframework.integration.configuration.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ GlobalChannelInterceptor ( patterns = STRING ) public org.springframework.integration.configuration.WireTap org.springframework.integration.configuration.WireTap ( ) { return new WireTap ( new NullChannel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ InboundChannelAdapter ( channel = STRING , autoStartup = STRING , poller = @ Poller ( fixedDelay = STRING ) ) @ Bean public org.springframework.integration.configuration.MessageSource<java.lang.String> < java.lang.String > org.springframework.integration.configuration.MessageSource<java.lang.String> ( ) { return ( ) new GenericMessage <> ( STRING ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( Message < java.lang.String > org.springframework.integration.configuration.Message<java.lang.String> );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( Message < java.lang.String > org.springframework.integration.configuration.Message<java.lang.String> );  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> org.springframework.integration.configuration.Message<?> < ? > org.springframework.integration.configuration.Message<?> ( )  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( java.util.List<?> < ? > java.util.List<?> );  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( java.util.List<?> < ? > java.util.List<?> );  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING , autoStartup = STRING , poller = @ Poller ( maxMessagesPerPoll = STRING , fixedDelay = STRING ) ) @ Publisher @ Payload ( STRING ) @ Role ( STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING , poller = @ Poller ( maxMessagesPerPoll = STRING , fixedRate = STRING ) ) @ Publisher @ Payload ( STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING , poller = @ Poller ( maxMessagesPerPoll = STRING , cron = STRING ) ) @ Publisher @ Payload ( STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING , poller = @ Poller ( STRING ) ) @ Publisher @ Payload ( STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING , poller = @ Poller ( trigger = STRING ) ) @ Publisher @ Payload ( STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transformer ( inputChannel = STRING ) public java.lang.String java.lang.String ( Message < java.lang.String > org.springframework.integration.configuration.Message<java.lang.String> ) { assertTrue ( org.springframework.integration.configuration.Message<java.lang.String> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertTrue ( org.springframework.integration.configuration.Message<java.lang.String> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; return this . java.lang.String ( org.springframework.integration.configuration.Message<java.lang.String> . getPayload ( ) ) + java.util.Arrays . java.util.List<java.lang.StackTraceElement> ( new java.lang.Throwable ( ) . java.lang.StackTraceElement[] ( ) ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transformer ( inputChannel = STRING ) @ UseSpelInvoker ( compilerMode = STRING ) public java.lang.String java.lang.String ( Message < java.lang.String > org.springframework.integration.configuration.Message<java.lang.String> ) { assertTrue ( org.springframework.integration.configuration.Message<java.lang.String> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; assertTrue ( org.springframework.integration.configuration.Message<java.lang.String> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.configuration.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) ) ; return this . java.lang.String ( org.springframework.integration.configuration.Message<java.lang.String> . getPayload ( ) ) + STRING + java.util.Arrays . java.util.List<java.lang.StackTraceElement> ( new java.lang.Throwable ( ) . java.lang.StackTraceElement[] ( ) ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.integration.configuration.EnableIntegrationTests.MyInboundChannelAdapter1 public java.lang.Integer java.lang.Integer ( ) { return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ InboundChannelAdapter ( value = STRING , poller = @ Poller ( trigger = STRING , maxMessagesPerPoll = STRING ) ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ InboundChannelAdapter ( value = STRING , poller = @ Poller ( fixedDelay = STRING , maxMessagesPerPoll = STRING ) ) public org.springframework.integration.configuration.Message<?> < ? > org.springframework.integration.configuration.Message<?> ( ) { return MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.integration.configuration.EnableIntegrationTests.MyServiceActivator public java.lang.Integer java.lang.Integer ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.integration.configuration.EnableIntegrationTests.MyServiceActivator1 ( java.lang.String = STRING , java.lang.String = STRING , java.lang.String[] = { STRING } , org.springframework.integration.configuration.Poller[] = @ Poller ( fixedRate = STRING ) ) public java.lang.Integer java.lang.Integer ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.integration.configuration.EnableIntegrationTests.MyServiceActivatorNoLocalAtts public java.lang.Integer java.lang.Integer ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.integration.configuration.EnableIntegrationTests.MyServiceActivator5 public java.lang.Integer java.lang.Integer ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.integration.configuration.EnableIntegrationTests.MyServiceActivator8 public java.lang.Integer java.lang.Integer ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.integration.configuration.EnableIntegrationTests.MyAggregator public java.lang.Integer java.lang.Integer ( java.util.List<?> < ? > java.util.List<?> ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ org.springframework.integration.configuration.EnableIntegrationTests.MyAggregatorDefaultOverrideDefaults public java.lang.Integer java.lang.Integer ( java.util.List<?> < ? > java.util.List<?> ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ServiceActivator ( inputChannel = STRING ) public java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer * NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ Gateway ( headers = @ GatewayHeader ( name = STRING , expression = STRING ) ) java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING ) @ Async void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING ) org.springframework.integration.configuration.Mono<java.lang.Integer> < java.lang.Integer > org.springframework.integration.configuration.Mono<java.lang.Integer> ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ Gateway ( headers = @ GatewayHeader ( name = STRING , expression = STRING ) ) java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Object java.lang.Object ) { return ( ( java.lang.String ) java.lang.Object ) . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( Description org.springframework.integration.configuration.Description ) { org.springframework.integration.configuration.Description . appendText ( STRING ) ; }  <METHOD_END>
