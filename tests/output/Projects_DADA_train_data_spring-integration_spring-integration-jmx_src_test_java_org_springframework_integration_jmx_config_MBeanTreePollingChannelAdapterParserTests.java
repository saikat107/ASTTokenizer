<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.SourcePollingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.jmx.config.Message<?> = org.springframework.integration.jmx.config.PollableChannel . receive ( long ) ; assertNotNull ( org.springframework.integration.jmx.config.Message<> ) ; assertEquals ( java.util.HashMap .class , org.springframework.integration.jmx.config.Message<> . getPayload ( ) . getClass ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.jmx.config.Message<> . getPayload ( ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; org.springframework.integration.jmx.config.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.SourcePollingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.jmx.config.Message<?> = org.springframework.integration.jmx.config.PollableChannel . receive ( long ) ; assertNotNull ( org.springframework.integration.jmx.config.Message<> ) ; assertEquals ( java.util.HashMap .class , org.springframework.integration.jmx.config.Message<> . getPayload ( ) . getClass ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.jmx.config.Message<> . getPayload ( ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; org.springframework.integration.jmx.config.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.SourcePollingChannelAdapter . start ( ) ; javax.management.ObjectName javax.management.ObjectName = TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.SourcePollingChannelAdapter , STRING , javax.management.ObjectName .class ) ; assertEquals ( STRING , javax.management.ObjectName . java.lang.String ( ) ) ; javax.management.QueryExp javax.management.QueryExp = TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.SourcePollingChannelAdapter , STRING , javax.management.QueryExp .class ) ; assertTrue ( javax.management.QueryExp . boolean ( new javax.management.ObjectName ( STRING ) ) ) ; Message < ? > org.springframework.integration.jmx.config.Message<?> = org.springframework.integration.jmx.config.PollableChannel . receive ( long ) ; assertNotNull ( org.springframework.integration.jmx.config.Message<> ) ; assertEquals ( java.util.HashMap .class , org.springframework.integration.jmx.config.Message<> . getPayload ( ) . getClass ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.jmx.config.Message<> . getPayload ( ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; org.springframework.integration.jmx.config.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.SourcePollingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.jmx.config.Message<?> = org.springframework.integration.jmx.config.PollableChannel . receive ( long ) ; assertNotNull ( org.springframework.integration.jmx.config.Message<> ) ; assertEquals ( java.util.HashMap .class , org.springframework.integration.jmx.config.Message<> . getPayload ( ) . getClass ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.jmx.config.Message<> . getPayload ( ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; org.springframework.integration.jmx.config.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.SourcePollingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.jmx.config.Message<?> = org.springframework.integration.jmx.config.PollableChannel . receive ( long ) ; assertNotNull ( org.springframework.integration.jmx.config.Message<> ) ; assertEquals ( java.util.HashMap .class , org.springframework.integration.jmx.config.Message<> . getPayload ( ) . getClass ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.jmx.config.Message<> . getPayload ( ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; org.springframework.integration.jmx.config.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.SourcePollingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.jmx.config.Message<?> = org.springframework.integration.jmx.config.PollableChannel . receive ( long ) ; assertNotNull ( org.springframework.integration.jmx.config.Message<> ) ; assertEquals ( java.util.HashMap .class , org.springframework.integration.jmx.config.Message<> . getPayload ( ) . getClass ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.jmx.config.Message<> . getPayload ( ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; org.springframework.integration.jmx.config.SourcePollingChannelAdapter . stop ( ) ; assertSame ( org.springframework.integration.jmx.config.MBeanObjectConverter , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.SourcePollingChannelAdapter , STRING ) ) ; }  <METHOD_END>
