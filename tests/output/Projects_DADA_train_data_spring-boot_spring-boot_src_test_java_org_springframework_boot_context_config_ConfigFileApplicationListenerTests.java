<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.context.config.ConfigurableApplicationContext != null ) { this . org.springframework.boot.context.config.ConfigurableApplicationContext . close ( ) ; } java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.SpringApplication . setResourceLoader ( new ResourceLoader ( ) { @ java.lang.Override public org.springframework.boot.context.config.Resource org.springframework.boot.context.config.Resource ( final java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { return new ByteArrayResource ( STRING . byte[] ( ) , java.lang.String ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } } ; } return null ; } @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return java.lang.Class<? extends > ( ) . java.lang.ClassLoader ( ) ; } } ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.context.config.Resource org.springframework.boot.context.config.Resource ( final java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { return new ByteArrayResource ( STRING . byte[] ( ) , java.lang.String ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } } ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return java.lang.Class<? extends > ( ) . java.lang.ClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.StandardEnvironment . setDefaultProfiles ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING + STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING + STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . containsExactly ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING + STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . containsExactly ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING , STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . containsExactly ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( new java.io.File ( STRING ) , STRING ) ; assertThat ( java.io.File . boolean ( ) ) . isFalse ( ) ; try { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.io.OutputStream java.io.OutputStream = new java.io.FileOutputStream ( java.io.File ) ; try { java.util.Properties . void ( java.io.OutputStream , STRING ) ; } finally { java.io.OutputStream . void ( ) ; } this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; } finally { java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING + STRING + STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.StandardEnvironment . setDefaultProfiles ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.StandardEnvironment . setDefaultProfiles ( STRING ) ; this . org.springframework.boot.context.config.StandardEnvironment . setActiveProfiles ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.StandardEnvironment . getPropertySources ( ) . addFirst ( new SimpleCommandLinePropertySource ( STRING ) ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.StandardEnvironment . getPropertySources ( ) . addLast ( new MapPropertySource ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.StandardEnvironment . getPropertySources ( ) . addLast ( new MapPropertySource ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , ( java.lang.Object ) STRING ) ) ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.StandardEnvironment . setActiveProfiles ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.StandardEnvironment . setActiveProfiles ( STRING , STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.StandardEnvironment . setActiveProfiles ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING ) ; this . org.springframework.boot.context.config.StandardEnvironment . addActiveProfile ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . contains ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; void ( null , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING ) ; this . org.springframework.boot.context.config.StandardEnvironment . addActiveProfile ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . contains ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; void ( null , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING ) ; this . org.springframework.boot.context.config.StandardEnvironment . addActiveProfile ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . contains ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; void ( null , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.context.config.ConfigFileApplicationListenerTests.TestConfigFileApplicationListener org.springframework.boot.context.config.ConfigFileApplicationListenerTests.TestConfigFileApplicationListener = new org.springframework.boot.context.config.ConfigFileApplicationListenerTests.TestConfigFileApplicationListener ( ) ; org.springframework.boot.context.config.ConfigFileApplicationListenerTests.TestConfigFileApplicationListener . onApplicationEvent ( new ApplicationEnvironmentPreparedEvent ( this . org.springframework.boot.context.config.SpringApplication , new java.lang.String [ NUMBER ] , this . org.springframework.boot.context.config.StandardEnvironment ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { ApplicationPreparedEvent org.springframework.boot.context.config.ApplicationPreparedEvent = new ApplicationPreparedEvent ( new SpringApplication ( ) , new java.lang.String [ NUMBER ] , new AnnotationConfigApplicationContext ( ) ) ; void ( ( ) { this . org.springframework.boot.context.config.ConfigFileApplicationListener . onApplicationEvent ( org.springframework.boot.context.config.ApplicationPreparedEvent ) ; } ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.InternalOutputCapture . toString ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = STRING + java.lang.String + STRING + java.lang.String ; assertThat ( StringUtils . countOccurrencesOf ( java.lang.String , java.lang.String ( java.lang.String ) ) ) . as ( java.lang.String ) . isEqualTo ( NUMBER ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; int int = java.lang.String . int ( java.lang.String ) ; assertThat ( int ) . as ( STRING + java.lang.String + STRING + java.lang.String + STRING ) . isNotEqualTo ( - NUMBER ) ; java.lang.String = java.lang.String . java.lang.String ( int + java.lang.String . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Runnable java.lang.Runnable ) { LoggerContext org.springframework.boot.context.config.LoggerContext = ( LoggerContext ) LogManager . getContext ( false ) ; org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.logging.log4j.core.config.Configuration = org.springframework.boot.context.config.LoggerContext . getConfiguration ( ) ; org.apache.logging.log4j.core.config.Configuration . addLogger ( ConfigFileApplicationListener .class . java.lang.String ( ) , new LoggerConfig ( ConfigFileApplicationListener .class . java.lang.String ( ) , Level . DEBUG , true ) ) ; org.springframework.boot.context.config.LoggerContext . updateLoggers ( ) ; try { java.lang.Runnable . void ( ) ; } finally { org.apache.logging.log4j.core.config.Configuration . removeLogger ( ConfigFileApplicationListener .class . java.lang.String ( ) ) ; org.springframework.boot.context.config.LoggerContext . updateLoggers ( ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String != null ? STRING + java.lang.String : STRING ; java.lang.String java.lang.String = STRING ; return STRING + new java.io.File ( STRING + java.lang.String + STRING ) . java.io.File ( ) . java.net.URI ( ) . java.lang.String ( ) + STRING + java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.StandardEnvironment . setActiveProfiles ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.StandardEnvironment . setActiveProfiles ( STRING , STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . containsExactly ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . contains ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; ConfigurationPropertySources org.springframework.boot.context.config.ConfigurationPropertySources = ( ConfigurationPropertySources ) this . org.springframework.boot.context.config.StandardEnvironment . getPropertySources ( ) . get ( ConfigFileApplicationListener . APPLICATION_CONFIGURATION_PROPERTY_SOURCE_NAME ) ; java.util.Collection < org . springframework . org.springframework.core . org.springframework.core . org.springframework.core < ? > > sources = org.springframework.boot.context.config.ConfigurationPropertySources . getSource ( ) ; assertThat ( sources ) . hasSize ( NUMBER ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( org . springframework . org.springframework.core . org.springframework.core . org.springframework.core < ? > source : sources ) { if ( source instanceof EnumerableCompositePropertySource ) { for ( org . springframework . org.springframework.core . org.springframework.core . org.springframework.core < ? > nested : ( ( EnumerableCompositePropertySource ) source ) . getSource ( ) ) { java.util.List<java.lang.String> . boolean ( nested . getName ( ) ) ; } } else { java.util.List<java.lang.String> . boolean ( source . getName ( ) ) ; } } assertThat ( java.util.List<java.lang.String> ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING , STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING + java.lang.String ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + STRING ) ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + STRING ) ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING + java.lang.String ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + java.lang.String + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING + java.lang.String ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + java.lang.String + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = new java.io.File ( STRING ) . java.lang.String ( ) . java.lang.String ( STRING , STRING ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING + java.lang.String ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + java.lang.String . java.lang.String ( java.io.File . char , '/' ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.WithPropertySource .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( ) ; java.lang.String java.lang.String = org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; java.lang.String = org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + STRING ) ) ; org.springframework.boot.context.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , STRING ) ; SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.WithPropertySourcePlaceholders .class ) ; org.springframework.boot.context.config.SpringApplication . setEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( ) ; java.lang.String java.lang.String = org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + STRING ) ) ; org.springframework.boot.context.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.WithPropertySourceAndName .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( ) ; java.lang.String java.lang.String = org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING ) ) ; org.springframework.boot.context.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.WithPropertySourceInProfile .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + STRING ) ) ; assertThat ( org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) ) . doesNotHave ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + STRING ) ) ; org.springframework.boot.context.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.WithPropertySourceAndProfile .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( ) ; java.lang.String java.lang.String = org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) ) . doesNotHave ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + STRING ) ) ; org.springframework.boot.context.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.WithPropertySourceMultipleLocations .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( ) ; java.lang.String java.lang.String = org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING + STRING ) ) ; org.springframework.boot.context.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.WithPropertySourceMultipleLocationsAndName .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( ) ; java.lang.String java.lang.String = org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING ) ) ; org.springframework.boot.context.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( STRING ) ; ConfigurableEnvironment org.springframework.boot.context.config.ConfigurableEnvironment = this . org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) ; assertThat ( org.springframework.boot.context.config.ConfigurableEnvironment ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING ) ) ; assertThat ( org.springframework.boot.context.config.ConfigurableEnvironment ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING ) ) ; assertThat ( org.springframework.boot.context.config.ConfigurableEnvironment ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING ) ) ; assertThat ( org.springframework.boot.context.config.ConfigurableEnvironment ) . has ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING ) ) ; assertThat ( org.springframework.boot.context.config.ConfigurableEnvironment ) . doesNotHave ( org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MapPropertySource org.springframework.boot.context.config.MapPropertySource = new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ; this . org.springframework.boot.context.config.StandardEnvironment . getPropertySources ( ) . addFirst ( org.springframework.boot.context.config.MapPropertySource ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( STRING , STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( STRING , STRING ) ; ConfigurableEnvironment org.springframework.boot.context.config.ConfigurableEnvironment = this . org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) ; assertThat ( org.springframework.boot.context.config.ConfigurableEnvironment . containsProperty ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.context.config.ConfigurableEnvironment . containsProperty ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.context.config.ConfigurableEnvironment . containsProperty ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.context.config.ConfigurableEnvironment . acceptsProfiles ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( STRING , STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . containsProperty ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.ConfigFileApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.context.config.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org . springframework . org.springframework.core . org.springframework.core . org.springframework.core < ? > propertySource = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.boot.context.config.StandardEnvironment . getPropertySources ( ) . addLast ( propertySource ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . setSearchNames ( STRING ) ; this . org.springframework.boot.context.config.ConfigFileApplicationListener . postProcessEnvironment ( this . org.springframework.boot.context.config.StandardEnvironment , this . org.springframework.boot.context.config.SpringApplication ) ; assertThat ( this . org.springframework.boot.context.config.StandardEnvironment . getActiveProfiles ( ) ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> < ConfigurableEnvironment > org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( final java.lang.String java.lang.String ) { return new Condition < ConfigurableEnvironment > ( STRING + java.lang.String ) { @ java.lang.Override public boolean boolean ( ConfigurableEnvironment org.springframework.boot.context.config.ConfigurableEnvironment ) { MutablePropertySources org.springframework.boot.context.config.MutablePropertySources = new MutablePropertySources ( org.springframework.boot.context.config.ConfigurableEnvironment . getPropertySources ( ) ) ; ConfigurationPropertySources . finishAndRelocate ( org.springframework.boot.context.config.MutablePropertySources ) ; return org.springframework.boot.context.config.MutablePropertySources . contains ( java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConfigurableEnvironment org.springframework.boot.context.config.ConfigurableEnvironment ) { MutablePropertySources org.springframework.boot.context.config.MutablePropertySources = new MutablePropertySources ( org.springframework.boot.context.config.ConfigurableEnvironment . getPropertySources ( ) ) ; ConfigurationPropertySources . finishAndRelocate ( org.springframework.boot.context.config.MutablePropertySources ) ; return org.springframework.boot.context.config.MutablePropertySources . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> < ConfigurableEnvironment > org.springframework.boot.context.config.Condition<org.springframework.boot.context.config.ConfigurableEnvironment> ( final java.lang.String java.lang.String ) { return new Condition < ConfigurableEnvironment > ( STRING + java.lang.String ) { @ java.lang.Override public boolean boolean ( ConfigurableEnvironment org.springframework.boot.context.config.ConfigurableEnvironment ) { return org.springframework.boot.context.config.ConfigurableEnvironment . acceptsProfiles ( java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConfigurableEnvironment org.springframework.boot.context.config.ConfigurableEnvironment ) { return org.springframework.boot.context.config.ConfigurableEnvironment . acceptsProfiles ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override java.util.List<org.springframework.boot.context.config.EnvironmentPostProcessor> < EnvironmentPostProcessor > java.util.List<org.springframework.boot.context.config.EnvironmentPostProcessor> ( ) { return new java.util.ArrayList <> ( java.util.Arrays . java.util.List<org.springframework.boot.context.config.ConfigFileApplicationListenerTests.LowestPrecedenceEnvironmentPostProcessor> ( new org.springframework.boot.context.config.ConfigFileApplicationListenerTests.LowestPrecedenceEnvironmentPostProcessor ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableEnvironment org.springframework.boot.context.config.ConfigurableEnvironment , SpringApplication org.springframework.boot.context.config.SpringApplication ) { assertThat ( org.springframework.boot.context.config.ConfigurableEnvironment . getPropertySources ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
