<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.server.adapter.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.server.adapter.AnnotationConfigApplicationContext . register ( org.springframework.web.server.adapter.WebHttpHandlerBuilderTests.OrderedWebFilterBeanConfig .class ) ; org.springframework.web.server.adapter.AnnotationConfigApplicationContext . refresh ( ) ; HttpHandler org.springframework.web.server.adapter.HttpHandler = WebHttpHandlerBuilder . applicationContext ( org.springframework.web.server.adapter.AnnotationConfigApplicationContext ) . build ( ) ; MockServerHttpRequest org.springframework.web.server.adapter.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; MockServerHttpResponse org.springframework.web.server.adapter.MockServerHttpResponse = new MockServerHttpResponse ( ) ; org.springframework.web.server.adapter.HttpHandler . handle ( org.springframework.web.server.adapter.MockServerHttpRequest , org.springframework.web.server.adapter.MockServerHttpResponse ) . block ( java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.web.server.adapter.MockServerHttpResponse . getBodyAsString ( ) . block ( java.time.Duration ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.server.adapter.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.server.adapter.AnnotationConfigApplicationContext . register ( org.springframework.web.server.adapter.WebHttpHandlerBuilderTests.OrderedExceptionHandlerBeanConfig .class ) ; org.springframework.web.server.adapter.AnnotationConfigApplicationContext . refresh ( ) ; HttpHandler org.springframework.web.server.adapter.HttpHandler = WebHttpHandlerBuilder . applicationContext ( org.springframework.web.server.adapter.AnnotationConfigApplicationContext ) . build ( ) ; MockServerHttpRequest org.springframework.web.server.adapter.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; MockServerHttpResponse org.springframework.web.server.adapter.MockServerHttpResponse = new MockServerHttpResponse ( ) ; org.springframework.web.server.adapter.HttpHandler . handle ( org.springframework.web.server.adapter.MockServerHttpRequest , org.springframework.web.server.adapter.MockServerHttpResponse ) . block ( java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.web.server.adapter.MockServerHttpResponse . getBodyAsString ( ) . block ( java.time.Duration ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.server.adapter.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.server.adapter.AnnotationConfigApplicationContext . register ( org.springframework.web.server.adapter.WebHttpHandlerBuilderTests.NoFilterConfig .class ) ; org.springframework.web.server.adapter.AnnotationConfigApplicationContext . refresh ( ) ; HttpHandler org.springframework.web.server.adapter.HttpHandler = WebHttpHandlerBuilder . applicationContext ( org.springframework.web.server.adapter.AnnotationConfigApplicationContext ) . build ( ) ; MockServerHttpRequest org.springframework.web.server.adapter.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; MockServerHttpResponse org.springframework.web.server.adapter.MockServerHttpResponse = new MockServerHttpResponse ( ) ; org.springframework.web.server.adapter.HttpHandler . handle ( org.springframework.web.server.adapter.MockServerHttpRequest , org.springframework.web.server.adapter.MockServerHttpResponse ) . block ( java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.web.server.adapter.MockServerHttpResponse . getBodyAsString ( ) . block ( java.time.Duration ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.server.adapter.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.adapter.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.adapter.ServerWebExchange , java.lang.String java.lang.String ) { byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; DataBuffer org.springframework.web.server.adapter.DataBuffer = new DefaultDataBufferFactory ( ) . wrap ( byte[] ) ; return org.springframework.web.server.adapter.ServerWebExchange . getResponse ( ) . writeWith ( Flux . just ( org.springframework.web.server.adapter.DataBuffer ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( NUMBER ) public org.springframework.web.server.adapter.WebFilter org.springframework.web.server.adapter.WebFilter ( ) { return org.springframework.web.server.adapter.WebFilter ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( NUMBER ) public org.springframework.web.server.adapter.WebFilter org.springframework.web.server.adapter.WebFilter ( ) { return org.springframework.web.server.adapter.WebFilter ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.server.adapter.WebFilter org.springframework.web.server.adapter.WebFilter ( java.lang.String java.lang.String ) { return ( exchange , chain ) -> { String value = exchange . getAttribute ( ATTRIBUTE ) . map ( v -> v + STRING + name ) . orElse ( name ) ; exchange . getAttributes ( ) . put ( ATTRIBUTE , value ) ; return chain . filter ( exchange ) ; } ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.server.adapter.WebHandler org.springframework.web.server.adapter.WebHandler ( ) { return exchange -> { String value = exchange . getAttribute ( ATTRIBUTE ) . map ( v -> ( String ) v ) . orElse ( STRING ) ; return writeToResponse ( exchange , value ) ; } ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( NUMBER ) public org.springframework.web.server.adapter.WebExceptionHandler org.springframework.web.server.adapter.WebExceptionHandler ( ) { return ( exchange , ex ) -> writeToResponse ( exchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( NUMBER ) public org.springframework.web.server.adapter.WebExceptionHandler org.springframework.web.server.adapter.WebExceptionHandler ( ) { return ( exchange , ex ) -> writeToResponse ( exchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.server.adapter.WebHandler org.springframework.web.server.adapter.WebHandler ( ) { return exchange -> Mono . error ( new Exception ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.server.adapter.WebHandler org.springframework.web.server.adapter.WebHandler ( ) { return exchange -> writeToResponse ( exchange , STRING ) ; }  <METHOD_END>
