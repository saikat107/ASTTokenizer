<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.servlet.handler.MockServletContext = new MockServletContext ( STRING ) ; XmlWebApplicationContext org.springframework.web.servlet.handler.XmlWebApplicationContext = new XmlWebApplicationContext ( ) ; org.springframework.web.servlet.handler.XmlWebApplicationContext . setServletContext ( org.springframework.web.servlet.handler.MockServletContext ) ; org.springframework.web.servlet.handler.XmlWebApplicationContext . setConfigLocations ( new java.lang.String [] { STRING } ) ; org.springframework.web.servlet.handler.XmlWebApplicationContext . refresh ( ) ; XmlWebApplicationContext org.springframework.web.servlet.handler.XmlWebApplicationContext = new XmlWebApplicationContext ( ) ; org.springframework.web.servlet.handler.XmlWebApplicationContext . setParent ( org.springframework.web.servlet.handler.XmlWebApplicationContext ) ; org.springframework.web.servlet.handler.XmlWebApplicationContext . setServletContext ( org.springframework.web.servlet.handler.MockServletContext ) ; org.springframework.web.servlet.handler.XmlWebApplicationContext . setNamespace ( STRING ) ; org.springframework.web.servlet.handler.XmlWebApplicationContext . setConfigLocations ( new java.lang.String [] { STRING } ) ; try { org.springframework.web.servlet.handler.XmlWebApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( FatalBeanException org.springframework.web.servlet.handler.FatalBeanException ) { NoSuchBeanDefinitionException org.springframework.web.servlet.handler.NoSuchBeanDefinitionException = ( NoSuchBeanDefinitionException ) org.springframework.web.servlet.handler.FatalBeanException . getCause ( ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.NoSuchBeanDefinitionException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleUrlHandlerMapping org.springframework.web.servlet.handler.SimpleUrlHandlerMapping = new SimpleUrlHandlerMapping ( ) ; org.springframework.web.servlet.handler.SimpleUrlHandlerMapping . setUrlDecode ( false ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING STRING , java.lang.Object ) ; org.springframework.web.servlet.handler.SimpleUrlHandlerMapping . setUrlMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.servlet.handler.SimpleUrlHandlerMapping . setApplicationContext ( new StaticApplicationContext ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.handler.HandlerExecutionChain ) ; assertSame ( java.lang.Object , org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { MockServletContext org.springframework.web.servlet.handler.MockServletContext = new MockServletContext ( STRING ) ; XmlWebApplicationContext org.springframework.web.servlet.handler.XmlWebApplicationContext = new XmlWebApplicationContext ( ) ; org.springframework.web.servlet.handler.XmlWebApplicationContext . setServletContext ( org.springframework.web.servlet.handler.MockServletContext ) ; org.springframework.web.servlet.handler.XmlWebApplicationContext . setConfigLocations ( new java.lang.String [] { STRING } ) ; org.springframework.web.servlet.handler.XmlWebApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.handler.XmlWebApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.handler.XmlWebApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.handler.XmlWebApplicationContext . getBean ( STRING ) ; HandlerMapping org.springframework.web.servlet.handler.HandlerMapping = ( HandlerMapping ) org.springframework.web.servlet.handler.XmlWebApplicationContext . getBean ( java.lang.String ) ; MockHttpServletRequest org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.MockHttpServletRequest . getAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ) ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.MockHttpServletRequest . getAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ) ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.MockHttpServletRequest . getAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ) ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.MockHttpServletRequest . setServletPath ( STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.MockHttpServletRequest . setAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE , STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.MockHttpServletRequest . setAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE , STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.MockHttpServletRequest . setAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE , STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.MockHttpServletRequest . getAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ) ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerExecutionChain ( org.springframework.web.servlet.handler.HandlerMapping , org.springframework.web.servlet.handler.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.handler.HandlerExecutionChain != null && org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) == java.lang.Object ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.MockHttpServletRequest . getAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.handler.HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain ( HandlerMapping org.springframework.web.servlet.handler.HandlerMapping , MockHttpServletRequest org.springframework.web.servlet.handler.MockHttpServletRequest ) throws java.lang.Exception { HandlerExecutionChain org.springframework.web.servlet.handler.HandlerExecutionChain = org.springframework.web.servlet.handler.HandlerMapping . getHandler ( org.springframework.web.servlet.handler.MockHttpServletRequest ) ; HandlerInterceptor [] org.springframework.web.servlet.handler.HandlerInterceptor[] = org.springframework.web.servlet.handler.HandlerExecutionChain . getInterceptors ( ) ; if ( org.springframework.web.servlet.handler.HandlerInterceptor[] != null ) { for ( HandlerInterceptor org.springframework.web.servlet.handler.HandlerInterceptor : org.springframework.web.servlet.handler.HandlerInterceptor[] ) { org.springframework.web.servlet.handler.HandlerInterceptor . preHandle ( org.springframework.web.servlet.handler.MockHttpServletRequest , null , org.springframework.web.servlet.handler.HandlerExecutionChain . getHandler ( ) ) ; } } return org.springframework.web.servlet.handler.HandlerExecutionChain ; }  <METHOD_END>
