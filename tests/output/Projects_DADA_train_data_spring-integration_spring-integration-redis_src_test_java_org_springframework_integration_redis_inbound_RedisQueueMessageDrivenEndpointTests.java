<METHOD_START> @ Test @ RedisAvailable @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; RedisTemplate < java.lang.String , java.lang.Object > org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> = new RedisTemplate < java.lang.String , java.lang.Object > ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setConnectionFactory ( this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setEnableDefaultSerializer ( false ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setValueSerializer ( new JdkSerializationRedisSerializer ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . boundListOps ( java.lang.String ) . leftPush ( java.lang.String ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . boundListOps ( java.lang.String ) . leftPush ( java.util.Date ) ; PollableChannel org.springframework.integration.redis.inbound.PollableChannel = new QueueChannel ( ) ; RedisQueueMessageDrivenEndpoint org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint = new RedisQueueMessageDrivenEndpoint ( java.lang.String , this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setOutputChannel ( org.springframework.integration.redis.inbound.PollableChannel ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . afterPropertiesSet ( ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . start ( ) ; Message < java.lang.Object > org.springframework.integration.redis.inbound.Message<java.lang.Object> = ( Message < java.lang.Object > ) org.springframework.integration.redis.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.integration.redis.inbound.Message<java.lang.Object> . getPayload ( ) ) ; org.springframework.integration.redis.inbound.Message<java.lang.Object> = ( Message < java.lang.Object > ) org.springframework.integration.redis.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Object> ) ; assertEquals ( java.util.Date , org.springframework.integration.redis.inbound.Message<java.lang.Object> . getPayload ( ) ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; RedisTemplate < java.lang.String , java.lang.Object > org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> = new RedisTemplate < java.lang.String , java.lang.Object > ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setConnectionFactory ( this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setEnableDefaultSerializer ( false ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setValueSerializer ( new JdkSerializationRedisSerializer ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.redis.inbound.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . boundListOps ( java.lang.String ) . leftPush ( org.springframework.integration.redis.inbound.Message<> ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . boundListOps ( java.lang.String ) . leftPush ( STRING ) ; PollableChannel org.springframework.integration.redis.inbound.PollableChannel = new QueueChannel ( ) ; PollableChannel org.springframework.integration.redis.inbound.PollableChannel = new QueueChannel ( ) ; RedisQueueMessageDrivenEndpoint org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint = new RedisQueueMessageDrivenEndpoint ( java.lang.String , this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setExpectMessage ( true ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setOutputChannel ( org.springframework.integration.redis.inbound.PollableChannel ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setErrorChannel ( org.springframework.integration.redis.inbound.PollableChannel ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . afterPropertiesSet ( ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . start ( ) ; Message < java.lang.Object > org.springframework.integration.redis.inbound.Message<java.lang.Object> = ( Message < java.lang.Object > ) org.springframework.integration.redis.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Object> ) ; assertEquals ( org.springframework.integration.redis.inbound.Message<> , org.springframework.integration.redis.inbound.Message<java.lang.Object> ) ; org.springframework.integration.redis.inbound.Message<java.lang.Object> = ( Message < java.lang.Object > ) org.springframework.integration.redis.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Object> ) ; assertThat ( org.springframework.integration.redis.inbound.Message<java.lang.Object> , Matchers . instanceOf ( ErrorMessage .class ) ) ; assertThat ( org.springframework.integration.redis.inbound.Message<java.lang.Object> . getPayload ( ) , Matchers . instanceOf ( MessagingException .class ) ) ; assertThat ( ( ( java.lang.Exception ) org.springframework.integration.redis.inbound.Message<java.lang.Object> . getPayload ( ) ) . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; assertThat ( ( ( java.lang.Exception ) org.springframework.integration.redis.inbound.Message<java.lang.Object> . getPayload ( ) ) . java.lang.Throwable ( ) , Matchers . instanceOf ( java.lang.ClassCastException .class ) ) ; assertThat ( ( ( java.lang.Exception ) org.springframework.integration.redis.inbound.Message<java.lang.Object> . getPayload ( ) ) . java.lang.Throwable ( ) . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { java.lang.String java.lang.String = new java.util.Date ( ) . java.lang.String ( ) ; RedisTemplate < java.lang.String , java.lang.String > org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.String> = new StringRedisTemplate ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.String> . setConnectionFactory ( this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.String> . boundListOps ( STRING ) . leftPush ( STRING + java.lang.String + STRING ) ; Message < ? > org.springframework.integration.redis.inbound.Message<?> = this . org.springframework.integration.redis.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<> ) ; assertEquals ( java.lang.String , org.springframework.integration.redis.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; Message < java.util.UUID > org.springframework.integration.redis.inbound.Message<java.util.UUID> = MessageBuilder . withPayload ( java.util.UUID ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.redis.inbound.MessageChannel . send ( org.springframework.integration.redis.inbound.Message<java.util.UUID> ) ; Message < ? > org.springframework.integration.redis.inbound.Message<?> = this . org.springframework.integration.redis.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<> ) ; assertEquals ( java.util.UUID , org.springframework.integration.redis.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final RedisTemplate < java.lang.String , java.lang.Object > org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> = new RedisTemplate < java.lang.String , java.lang.Object > ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setConnectionFactory ( this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setEnableDefaultSerializer ( false ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setValueSerializer ( new JdkSerializationRedisSerializer ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . afterPropertiesSet ( ) ; while ( org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . boundListOps ( java.lang.String ) . rightPop ( ) != null ) { } RedisQueueMessageDrivenEndpoint org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint = new RedisQueueMessageDrivenEndpoint ( java.lang.String , this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; BoundListOperations < java.lang.String , byte [] > org.springframework.integration.redis.inbound.BoundListOperations<java.lang.String,byte[]> = TestUtils . getPropertyValue ( org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint , STRING , BoundListOperations .class ) ; org.springframework.integration.redis.inbound.BoundListOperations<java.lang.String,byte[]> = Mockito . spy ( org.springframework.integration.redis.inbound.BoundListOperations<java.lang.String,byte[]> ) ; DirectFieldAccessor org.springframework.integration.redis.inbound.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint ) ; org.springframework.integration.redis.inbound.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.redis.inbound.BoundListOperations<java.lang.String,byte[]> ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setOutputChannel ( new DirectChannel ( ) ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setReceiveTimeout ( NUMBER ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setTaskExecutor ( java.util.concurrent.ExecutorService ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . afterPropertiesSet ( ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . start ( ) ; void ( org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint ) ; org.springframework.integration.redis.inbound.DirectFieldAccessor . setPropertyValue ( STRING , false ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . boundListOps ( java.lang.String ) . leftPush ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . stop ( ( ) stopLatch . countDown ( ) ) ; java.util.concurrent.ExecutorService . void ( ) ; assertTrue ( java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; verify ( org.springframework.integration.redis.inbound.BoundListOperations<java.lang.String,byte[]> , atLeastOnce ( ) ) . rightPush ( any ( byte [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable @ Ignore ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; QueueChannel org.springframework.integration.redis.inbound.QueueChannel = new QueueChannel ( ) ; final java.util.List<org.springframework.integration.redis.inbound.ApplicationEvent> < ApplicationEvent > java.util.List<org.springframework.integration.redis.inbound.ApplicationEvent> = new java.util.ArrayList<org.springframework.integration.redis.inbound.ApplicationEvent> < ApplicationEvent > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; RedisQueueMessageDrivenEndpoint org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint = new RedisQueueMessageDrivenEndpoint ( java.lang.String , this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setApplicationEventPublisher ( event -> { exceptionEvents . add ( ( ApplicationEvent ) event ) ; exceptionsLatch . countDown ( ) ; } ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setOutputChannel ( org.springframework.integration.redis.inbound.QueueChannel ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setRecoveryInterval ( NUMBER ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . afterPropertiesSet ( ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . start ( ) ; void ( org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint ) ; ( ( DisposableBean ) this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) . destroy ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; for ( ApplicationEvent org.springframework.integration.redis.inbound.ApplicationEvent : java.util.List<org.springframework.integration.redis.inbound.ApplicationEvent> ) { assertThat ( org.springframework.integration.redis.inbound.ApplicationEvent , Matchers . instanceOf ( RedisExceptionEvent .class ) ) ; assertSame ( org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint , org.springframework.integration.redis.inbound.ApplicationEvent . getSource ( ) ) ; assertThat ( ( ( IntegrationEvent ) org.springframework.integration.redis.inbound.ApplicationEvent ) . getCause ( ) . getClass ( ) , Matchers . isIn ( java.util.Arrays .< java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > > java.util.List<java.lang.Class<? extends java.lang.Throwable>> ( RedisSystemException .class , RedisConnectionFailureException .class ) ) ) ; } ( ( InitializingBean ) this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) . afterPropertiesSet ( ) ; RedisTemplate < java.lang.String , java.lang.Object > org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> = new RedisTemplate < java.lang.String , java.lang.Object > ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setConnectionFactory ( this . getConnectionFactoryForTest ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setEnableDefaultSerializer ( false ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setValueSerializer ( new JdkSerializationRedisSerializer ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . boundListOps ( java.lang.String ) . leftPush ( java.lang.String ) ; Message < ? > org.springframework.integration.redis.inbound.Message<?> = org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<> ) ; assertEquals ( java.lang.String , org.springframework.integration.redis.inbound.Message<> . getPayload ( ) ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; RedisTemplate < java.lang.String , java.lang.Object > org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> = new RedisTemplate < java.lang.String , java.lang.Object > ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setConnectionFactory ( this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setEnableDefaultSerializer ( false ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . setValueSerializer ( new JdkSerializationRedisSerializer ( ) ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . boundListOps ( java.lang.String ) . rightPush ( java.lang.String ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,java.lang.Object> . boundListOps ( java.lang.String ) . rightPush ( java.util.Date ) ; PollableChannel org.springframework.integration.redis.inbound.PollableChannel = new QueueChannel ( ) ; RedisQueueMessageDrivenEndpoint org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint = new RedisQueueMessageDrivenEndpoint ( java.lang.String , this . org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setOutputChannel ( org.springframework.integration.redis.inbound.PollableChannel ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . setRightPop ( false ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . afterPropertiesSet ( ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . start ( ) ; Message < java.lang.Object > org.springframework.integration.redis.inbound.Message<java.lang.Object> = ( Message < java.lang.Object > ) org.springframework.integration.redis.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Object> ) ; assertEquals ( java.lang.String , org.springframework.integration.redis.inbound.Message<java.lang.Object> . getPayload ( ) ) ; org.springframework.integration.redis.inbound.Message<java.lang.Object> = ( Message < java.lang.Object > ) org.springframework.integration.redis.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Object> ) ; assertEquals ( java.util.Date , org.springframework.integration.redis.inbound.Message<java.lang.Object> . getPayload ( ) ) ; org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . stop ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( RedisQueueMessageDrivenEndpoint org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint ) throws java.lang.InterruptedException { int int = NUMBER ; do { int ++ ; if ( int == NUMBER ) { break; } java.lang.Thread . void ( NUMBER ) ; } while ( ! org.springframework.integration.redis.inbound.RedisQueueMessageDrivenEndpoint . isListening ( ) ); assertTrue ( int < NUMBER ) ; }  <METHOD_END>
