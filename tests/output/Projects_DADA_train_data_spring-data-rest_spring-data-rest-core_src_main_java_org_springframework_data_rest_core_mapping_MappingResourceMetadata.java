<METHOD_START> public void ( PersistentEntity < ? , ? > org.springframework.data.rest.core.mapping.PersistentEntity<?,?> , ResourceMappings org.springframework.data.rest.core.mapping.ResourceMappings ) { super( org.springframework.data.rest.core.mapping.PersistentEntity<,> . getType ( ) ); this . org.springframework.data.rest.core.mapping.MappingResourceMetadata.PropertyMappings = new org.springframework.data.rest.core.mapping.MappingResourceMetadata.PropertyMappings ( org.springframework.data.rest.core.mapping.ResourceMappings ) ; this . org.springframework.data.rest.core.mapping.PersistentEntity<?,?> = org.springframework.data.rest.core.mapping.PersistentEntity<,> ; this . org.springframework.data.rest.core.mapping.PersistentEntity<,> . doWithAssociations ( org.springframework.data.rest.core.mapping.MappingResourceMetadata.PropertyMappings ) ; this . org.springframework.data.rest.core.mapping.PersistentEntity<,> . doWithProperties ( org.springframework.data.rest.core.mapping.MappingResourceMetadata.PropertyMappings ) ; java.util.Optional<org.springframework.data.rest.core.mapping.RestResource> < RestResource > java.util.Optional<org.springframework.data.rest.core.mapping.RestResource> = org.springframework.data.rest.core.mapping.PersistentEntity<,> . findAnnotation ( RestResource .class ) ; this . boolean = java.util.Optional<org.springframework.data.rest.core.mapping.RestResource> . map ( it -> it . exported ( ) ) . orElse ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.rest.core.mapping.PersistentEntity<,> . getType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( PersistentProperty < ? > org.springframework.data.rest.core.mapping.PersistentProperty<?> ) { return org.springframework.data.rest.core.mapping.ResourceMapping ( org.springframework.data.rest.core.mapping.PersistentProperty<> ) . isExported ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.core.mapping.ResourceMapping org.springframework.data.rest.core.mapping.ResourceMapping ( PersistentProperty < ? > org.springframework.data.rest.core.mapping.PersistentProperty<?> ) { return org.springframework.data.rest.core.mapping.MappingResourceMetadata.PropertyMappings . org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping ( org.springframework.data.rest.core.mapping.PersistentProperty<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.core.mapping.SearchResourceMappings org.springframework.data.rest.core.mapping.SearchResourceMappings ( ) { return new SearchResourceMappings ( java.util.Collections .< MethodResourceMapping > java.util.List<org.springframework.data.rest.core.mapping.MethodResourceMapping> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.core.mapping.SupportedHttpMethods org.springframework.data.rest.core.mapping.SupportedHttpMethods ( ) { return NoSupportedMethods . INSTANCE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping ( java.lang.String java.lang.String ) { return org.springframework.data.rest.core.mapping.MappingResourceMetadata.PropertyMappings . org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void ( ResourceMappings org.springframework.data.rest.core.mapping.ResourceMappings ) { Assert . notNull ( org.springframework.data.rest.core.mapping.ResourceMappings , STRING ) ; this . org.springframework.data.rest.core.mapping.ResourceMappings = org.springframework.data.rest.core.mapping.ResourceMappings ; this . java.util.Map<org.springframework.data.rest.core.mapping.PersistentProperty<?>,org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping> = new java.util.HashMap<org.springframework.data.rest.core.mapping.PersistentProperty<?>,org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping> < PersistentProperty < ? > , PropertyAwareResourceMapping > ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Association < ? extends PersistentProperty < ? > > org.springframework.data.rest.core.mapping.Association<? extends org.springframework.data.rest.core.mapping.PersistentProperty<?>> ) { void ( org.springframework.data.rest.core.mapping.Association<> . getInverse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PersistentProperty < ? > org.springframework.data.rest.core.mapping.PersistentProperty<?> ) { Assert . notNull ( org.springframework.data.rest.core.mapping.PersistentProperty<> , STRING ) ; this . java.util.Map<org.springframework.data.rest.core.mapping.PersistentProperty<?>,org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping> . put ( org.springframework.data.rest.core.mapping.PersistentProperty<> , new PersistentPropertyResourceMapping ( org.springframework.data.rest.core.mapping.PersistentProperty<> , org.springframework.data.rest.core.mapping.ResourceMappings ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; for ( PropertyAwareResourceMapping org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping : java.util.Map<org.springframework.data.rest.core.mapping.PersistentProperty<?>,org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping> . values ( ) ) { if ( org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping . getPath ( ) . matches ( java.lang.String ) ) { return org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping ; } } return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.core.mapping.ResourceMapping org.springframework.data.rest.core.mapping.ResourceMapping ( PersistentProperty < ? > org.springframework.data.rest.core.mapping.PersistentProperty<?> ) { return java.util.Map<org.springframework.data.rest.core.mapping.PersistentProperty<?>,org.springframework.data.rest.core.mapping.PropertyAwareResourceMapping> . get ( org.springframework.data.rest.core.mapping.PersistentProperty<> ) ; }  <METHOD_END>
