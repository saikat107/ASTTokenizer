<METHOD_START> public void void ( javax.management.MBeanServerConnection javax.management.MBeanServerConnection ) { this . javax.management.MBeanServerConnection = javax.management.MBeanServerConnection ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( ) { return this . java.util.Map<java.lang.String,> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws java.net.MalformedURLException { this . javax.management.remote.JMXServiceURL = new javax.management.remote.JMXServiceURL ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( getNotificationListener ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( CollectionUtils . isEmpty ( this . mappedObjectNames ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( this . javax.management.MBeanServerConnection == null ) { this . javax.management.MBeanServerConnection = this . org.springframework.jmx.access.ConnectorDelegate . connect ( this . javax.management.remote.JMXServiceURL , this . java.util.Map<java.lang.String,> , this . java.lang.String ) ; } try { this . javax.management.ObjectName[] = getResolvedObjectNames ( ) ; if ( org.springframework.jmx.access.Log . isDebugEnabled ( ) ) { org.springframework.jmx.access.Log . debug ( STRING + java.util.Arrays . java.util.List<javax.management.ObjectName> ( this . javax.management.ObjectName[] ) ) ; } for ( javax.management.ObjectName javax.management.ObjectName : this . javax.management.ObjectName[] ) { this . javax.management.MBeanServerConnection . void ( javax.management.ObjectName , getNotificationListener ( ) , getNotificationFilter ( ) , getHandback ( ) ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new MBeanServerNotFoundException ( STRING + this . javax.management.remote.JMXServiceURL + STRING , java.io.IOException ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new JmxException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { if ( this . javax.management.ObjectName[] != null ) { for ( javax.management.ObjectName javax.management.ObjectName : this . javax.management.ObjectName[] ) { try { this . javax.management.MBeanServerConnection . void ( javax.management.ObjectName , getNotificationListener ( ) , getNotificationFilter ( ) , getHandback ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.jmx.access.Log . isDebugEnabled ( ) ) { org.springframework.jmx.access.Log . debug ( STRING , java.lang.Exception ) ; } } } } } finally { this . org.springframework.jmx.access.ConnectorDelegate . close ( ) ; } }  <METHOD_END>
