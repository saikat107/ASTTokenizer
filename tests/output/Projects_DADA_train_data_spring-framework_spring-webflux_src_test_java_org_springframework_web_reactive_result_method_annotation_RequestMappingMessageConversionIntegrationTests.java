<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ( ) { AnnotationConfigApplicationContext org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . register ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.WebConfig .class ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ; assertEquals ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person , performGet ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , performGet ( STRING , new HttpHeaders ( ) , java.lang.String .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , performGet ( STRING , new HttpHeaders ( ) , java.lang.String .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , performGet ( STRING , new HttpHeaders ( ) , java.lang.String .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , performGet ( STRING , new HttpHeaders ( ) , java.lang.String .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ; assertEquals ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person , performGet ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ; assertEquals ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person , performGet ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ; assertEquals ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person , performGet ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ; assertEquals ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person , performGet ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ; assertEquals ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person , performGet ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; assertEquals ( java.util.List<> , performGet ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; assertEquals ( java.util.List<> , performGet ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; assertEquals ( java.util.List<> , performGet ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; assertEquals ( java.util.List<> , performGet ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < byte [] > org.springframework.web.reactive.result.method.annotation.ResponseEntity<byte[]> = performGet ( STRING , new HttpHeaders ( ) , byte [] .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<byte[]> . getStatusCode ( ) ) ; assertTrue ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<byte[]> . hasBody ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.ResponseEntity<byte[]> . getHeaders ( ) . getContentLength ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.ResponseEntity<byte[]> . getBody ( ) . length ) ; assertEquals ( new MediaType ( STRING , STRING ) , org.springframework.web.reactive.result.method.annotation.ResponseEntity<byte[]> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; assertEquals ( java.util.List<> , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.List<> , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; assertEquals ( java.util.List<> , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.List<> , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; assertEquals ( java.util.List<> , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.List<> , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; assertEquals ( java.util.List<> , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.List<> , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; java.util.List<?> < ? > java.util.List<?> = java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; assertEquals ( java.util.List<> , performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.List<> , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , APPLICATION_XML , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , APPLICATION_XML , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , APPLICATION_XML , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , APPLICATION_XML , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People = new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = performPost ( STRING , APPLICATION_XML , org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.People , null , java.lang.Void .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , getApplicationContext ( ) . getBean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.PersonCreateController .class ) . persons . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Publisher<java.nio.ByteBuffer> < java.nio.ByteBuffer > org.springframework.web.reactive.result.method.annotation.Publisher<java.nio.ByteBuffer> ( ) { DataBufferFactory org.springframework.web.reactive.result.method.annotation.DataBufferFactory = new DefaultDataBufferFactory ( ) ; Jackson2JsonEncoder org.springframework.web.reactive.result.method.annotation.Jackson2JsonEncoder = new Jackson2JsonEncoder ( ) ; return org.springframework.web.reactive.result.method.annotation.Jackson2JsonEncoder . encode ( Mono . just ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) , org.springframework.web.reactive.result.method.annotation.DataBufferFactory , ResolvableType . forClass ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person .class ) , org.springframework.web.reactive.result.method.annotation.MediaType , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . map ( DataBuffer :: asByteBuffer ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Flux<java.nio.ByteBuffer> < java.nio.ByteBuffer > org.springframework.web.reactive.result.method.annotation.Flux<java.nio.ByteBuffer> ( ) { return Flux . just ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Observable<java.nio.ByteBuffer> < java.nio.ByteBuffer > org.springframework.web.reactive.result.method.annotation.Observable<java.nio.ByteBuffer> ( ) { return Observable . just ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public io . io . io < java.nio.ByteBuffer > getRxJava2Observable ( ) { return io . reactivex . Observable . just ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Flowable<java.nio.ByteBuffer> < java.nio.ByteBuffer > org.springframework.web.reactive.result.method.annotation.Flowable<java.nio.ByteBuffer> ( ) { return Flowable . just ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( ) { return new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( ) { return java.util.concurrent.CompletableFuture . java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( ) { return Mono . just ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( ) { return Single . just ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.ResponseEntity<org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> < Mono < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > > org.springframework.web.reactive.result.method.annotation.ResponseEntity<org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person>> ( ) { Mono < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> = Mono . just ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; return ResponseEntity . ok ( org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( ) { return java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Publisher<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Publisher<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( ) { return Flux . just ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Flux<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Flux<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( ) { return Flux . just ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Observable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Observable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( ) { return Observable . just ( new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) , new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Resource org.springframework.web.reactive.result.method.annotation.Resource ( ) { return new ClassPathResource ( STRING , ZeroCopyIntegrationTests .class ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( @ RequestBody org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ) { return new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person . java.lang.String ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( @ RequestBody java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person -> new org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person . java.lang.String ( ) . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( @ RequestBody Mono < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . map ( person -> new Person ( person . getName ( ) . toUpperCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( @ RequestBody Single < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . map ( person -> new Person ( person . getName ( ) . toUpperCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public io . io . io < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > transformRxJava2Single ( @ RequestBody io . io . io < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > personFuture ) { return personFuture . map ( person -> new Person ( person . getName ( ) . toUpperCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Maybe<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Maybe<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( @ RequestBody Maybe < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Maybe<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Maybe<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . map ( person -> new Person ( person . getName ( ) . toUpperCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Publisher<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Publisher<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( @ RequestBody Publisher < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Publisher<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return Flux . from ( org.springframework.web.reactive.result.method.annotation.Publisher<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) . map ( person -> new Person ( person . getName ( ) . toUpperCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Flux<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Flux<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( @ RequestBody Flux < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Flux<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Flux<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . map ( person -> new Person ( person . getName ( ) . toUpperCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Observable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Observable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( @ RequestBody Observable < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Observable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Observable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . map ( person -> new Person ( person . getName ( ) . toUpperCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public io . io . io < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > transformObservable ( @ RequestBody io . io . io < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > persons ) { return persons . map ( person -> new Person ( person . getName ( ) . toUpperCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Flowable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Flowable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( @ RequestBody Flowable < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Flowable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Flowable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . map ( person -> new Person ( person . getName ( ) . toUpperCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Publisher<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.Publisher<java.lang.Void> ( @ RequestBody Publisher < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Publisher<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return Flux . from ( org.springframework.web.reactive.result.method.annotation.Publisher<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) . doOnNext ( java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> :: add ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> ( @ RequestBody Mono < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . doOnNext ( java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> :: add ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Completable org.springframework.web.reactive.result.method.annotation.Completable ( @ RequestBody Single < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . map ( java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> :: add ) . toCompletable ( ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public io . io . io createWithRxJava2Single ( @ RequestBody io . io . io < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > single ) { return single . map ( java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> :: add ) . toCompletable ( ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> ( @ RequestBody Flux < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Flux<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Flux<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . doOnNext ( java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> :: add ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Observable<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.Observable<java.lang.Void> ( @ RequestBody Observable < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Observable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Observable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . toList ( ) . doOnNext ( java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> :: addAll ) . flatMap ( document -> Observable . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public io . io . io createWithRxJava2Observable ( @ RequestBody io . io . io < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > observable ) { return observable . toList ( ) . doOnSuccess ( java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> :: addAll ) . toCompletable ( ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public io . io . io.reactivex.Completable io.reactivex.Completable ( @ RequestBody Flowable < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > org.springframework.web.reactive.result.method.annotation.Flowable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ) { return org.springframework.web.reactive.result.method.annotation.Flowable<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . toList ( ) . doOnSuccess ( java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> :: addAll ) . toCompletable ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person = ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ) java.lang.Object ; return ! ( this . java.lang.String != null ? ! this . java.lang.String . boolean ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person . java.lang.String ) : org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person . java.lang.String != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String != null ? this . java.lang.String . int ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + STRING + java.lang.String + '\'' + '}' ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person ... org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person[] ) { this . java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> . boolean ( java.util.Arrays . java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person[] ) ) ; }  <METHOD_END>
<METHOD_START> @ javax.xml.bind.annotation.XmlElement public java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> < org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person > java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.annotation.RequestMappingMessageConversionIntegrationTests.Person> ; }  <METHOD_END>
