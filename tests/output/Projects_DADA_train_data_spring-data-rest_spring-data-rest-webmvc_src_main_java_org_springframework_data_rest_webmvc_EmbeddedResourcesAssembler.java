<METHOD_START> public java.lang.Iterable<org.springframework.data.rest.webmvc.EmbeddedWrapper> < EmbeddedWrapper > java.lang.Iterable<org.springframework.data.rest.webmvc.EmbeddedWrapper> ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.PersistentEntities . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; final java.util.List<org.springframework.data.rest.webmvc.EmbeddedWrapper> < EmbeddedWrapper > java.util.List<org.springframework.data.rest.webmvc.EmbeddedWrapper> = new java.util.ArrayList<org.springframework.data.rest.webmvc.EmbeddedWrapper> < EmbeddedWrapper > ( ) ; final PersistentPropertyAccessor org.springframework.data.rest.webmvc.PersistentPropertyAccessor = org.springframework.data.rest.webmvc.PersistentEntity<,> . getPropertyAccessor ( java.lang.Object ) ; final ResourceMetadata org.springframework.data.rest.webmvc.ResourceMetadata = org.springframework.data.rest.webmvc.Associations . getMetadataFor ( org.springframework.data.rest.webmvc.PersistentEntity<,> . getType ( ) ) ; org.springframework.data.rest.webmvc.PersistentEntity<,> . doWithAssociations ( ( SimpleAssociationHandler ) association -> { PersistentProperty < ? > property = association . getInverse ( ) ; if ( ! associations . isLinkableAssociation ( property ) ) { return; } if ( ! projector . hasExcerptProjection ( property . getActualType ( ) ) ) { return; } accessor . getProperty ( association . getInverse ( ) ) . ifPresent ( it -> { String rel = metadata . getMappingFor ( property ) . getRel ( ) ; if ( it instanceof Collection ) { Collection < ? > collection = ( Collection < ? > ) it ; if ( collection . isEmpty ( ) ) { return; } List < Object > nestedCollection = new ArrayList < Object > ( ) ; for ( Object element : collection ) { if ( element != null ) { nestedCollection . add ( projector . projectExcerpt ( element ) ) ; } } associationProjections . add ( wrappers . wrap ( nestedCollection , rel ) ) ; } else { associationProjections . add ( wrappers . wrap ( projector . projectExcerpt ( it ) , rel ) ) ; } } ) ; } ) ; return java.util.List<org.springframework.data.rest.webmvc.EmbeddedWrapper> ; }  <METHOD_END>
