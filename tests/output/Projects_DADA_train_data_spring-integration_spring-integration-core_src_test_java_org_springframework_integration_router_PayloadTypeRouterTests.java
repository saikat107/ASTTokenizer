<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Integer .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.Integer > org.springframework.integration.router.Message<java.lang.Integer> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.router.PayloadTypeRouter . getChannelKeys ( org.springframework.integration.router.Message<java.lang.String> ) . size ( ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; assertEquals ( org.springframework.integration.router.Message<java.lang.String> , org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.router.PayloadTypeRouter . getChannelKeys ( org.springframework.integration.router.Message<java.lang.Integer> ) . size ( ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.Integer> ) ; assertEquals ( org.springframework.integration.router.Message<java.lang.Integer> , org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMapping ( java.lang.String .class . java.lang.String ( ) , STRING ) ; assertEquals ( NUMBER , org.springframework.integration.router.PayloadTypeRouter . getChannelKeys ( org.springframework.integration.router.Message<java.lang.String> ) . size ( ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; assertEquals ( org.springframework.integration.router.Message<java.lang.String> , org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.router.PayloadTypeRouter . removeChannelMapping ( java.lang.String .class . java.lang.String ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . removeChannelMapping ( java.lang.Integer .class . java.lang.String ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . setResolutionRequired ( true ) ; try { org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; fail ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Number .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < java.lang.Integer > org.springframework.integration.router.Message<java.lang.Integer> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.Integer> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMapping ( java.lang.Integer .class . java.lang.String ( ) , STRING ) ; assertEquals ( NUMBER , org.springframework.integration.router.PayloadTypeRouter . getChannelKeys ( org.springframework.integration.router.Message<java.lang.Integer> ) . size ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.Integer> ) ; org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Number .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Integer .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < java.lang.Integer > org.springframework.integration.router.Message<java.lang.Integer> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.Integer> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Comparable .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < java.lang.Integer > org.springframework.integration.router.Message<java.lang.Integer> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.Integer> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.I2 .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < org.springframework.integration.router.PayloadTypeRouterTests.C1 > org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> = new GenericMessage < org.springframework.integration.router.PayloadTypeRouterTests.C1 > ( new org.springframework.integration.router.PayloadTypeRouterTests.C1 ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.io.Serializable .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.I3 .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < org.springframework.integration.router.PayloadTypeRouterTests.C1 > org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> = new GenericMessage < org.springframework.integration.router.PayloadTypeRouterTests.C1 > ( new org.springframework.integration.router.PayloadTypeRouterTests.C1 ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> ) ; assertNotNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.C3 .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.I4 .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < org.springframework.integration.router.PayloadTypeRouterTests.C1 > org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> = new GenericMessage < org.springframework.integration.router.PayloadTypeRouterTests.C1 > ( new org.springframework.integration.router.PayloadTypeRouterTests.C1 ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.C3 .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.I1A .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < org.springframework.integration.router.PayloadTypeRouterTests.C1 > org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> = new GenericMessage < org.springframework.integration.router.PayloadTypeRouterTests.C1 > ( new org.springframework.integration.router.PayloadTypeRouterTests.C1 ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Number .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Comparable .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < java.lang.Integer > org.springframework.integration.router.Message<java.lang.Integer> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.Integer> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMapping ( java.lang.Integer .class . java.lang.String ( ) , STRING ) ; assertEquals ( NUMBER , org.springframework.integration.router.PayloadTypeRouter . getChannelKeys ( org.springframework.integration.router.Message<java.lang.Integer> ) . size ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.Integer> ) ; org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.io.Serializable .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Comparable .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Number .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.io.Serializable .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < java.lang.Integer > org.springframework.integration.router.Message<java.lang.Integer> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.Integer> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Integer .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.Integer > org.springframework.integration.router.Message<java.lang.Integer> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.Integer> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.Integer > org.springframework.integration.router.Message<java.lang.Integer> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.Integer> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.I5A .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.I5B .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.C2 .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < org.springframework.integration.router.PayloadTypeRouterTests.C1 > org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> = new GenericMessage < org.springframework.integration.router.PayloadTypeRouterTests.C1 > ( new org.springframework.integration.router.PayloadTypeRouterTests.C1 ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> ) ; assertNotNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.I2 .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.io.Serializable .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.C3 .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < org.springframework.integration.router.PayloadTypeRouterTests.C1 > org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> = new GenericMessage < org.springframework.integration.router.PayloadTypeRouterTests.C1 > ( new org.springframework.integration.router.PayloadTypeRouterTests.C1 ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; DefaultListableBeanFactory org.springframework.integration.router.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.router.QueueChannel ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.I1A .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.I1B .class . java.lang.String ( ) , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.integration.router.PayloadTypeRouterTests.C2 .class . java.lang.String ( ) , STRING ) ; PayloadTypeRouter org.springframework.integration.router.PayloadTypeRouter = new PayloadTypeRouter ( ) ; org.springframework.integration.router.PayloadTypeRouter . setBeanFactory ( org.springframework.integration.router.DefaultListableBeanFactory ) ; org.springframework.integration.router.PayloadTypeRouter . setChannelMappings ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.integration.router.PayloadTypeRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < org.springframework.integration.router.PayloadTypeRouterTests.C1 > org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> = new GenericMessage < org.springframework.integration.router.PayloadTypeRouterTests.C1 > ( new org.springframework.integration.router.PayloadTypeRouterTests.C1 ( ) ) ; org.springframework.integration.router.PayloadTypeRouter . handleMessage ( org.springframework.integration.router.Message<org.springframework.integration.router.PayloadTypeRouterTests.C1> ) ; }  <METHOD_END>
