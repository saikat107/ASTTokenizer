<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext != null ) { this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBeansOfType ( SystemPublicMetrics .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBeansOfType ( MetricReaderPublicMetrics .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.RichGaugeReaderConfig .class , MetricRepositoryAutoConfiguration .class , PublicMetricsAutoConfiguration .class ) ; RichGaugeReader org.springframework.boot.actuate.autoconfigure.RichGaugeReader = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( RichGaugeReader .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.RichGaugeReader ) . isNotNull ( ) ; given ( org.springframework.boot.actuate.autoconfigure.RichGaugeReader . findAll ( ) ) . willReturn ( java.util.Collections . java.util.List ( new RichGauge ( STRING , NUMBER ) ) ) ; RichGaugeReaderPublicMetrics org.springframework.boot.actuate.autoconfigure.RichGaugeReaderPublicMetrics = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( RichGaugeReaderPublicMetrics .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.RichGaugeReaderPublicMetrics ) . isNotNull ( ) ; java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> = org.springframework.boot.actuate.autoconfigure.RichGaugeReaderPublicMetrics . metrics ( ) ; assertThat ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> ) . isNotNull ( ) ; assertThat ( NUMBER ) . isEqualTo ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> . size ( ) ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , new Metric <> ( STRING , NUMBER ) ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , new Metric <> ( STRING , NUMBER ) ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , new Metric <> ( STRING , NUMBER ) ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , new Metric <> ( STRING , NUMBER ) ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , new Metric <> ( STRING , - NUMBER ) ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , new Metric <> ( STRING , NUMBER ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBeansOfType ( DataSourcePublicMetrics .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( DataSourceAutoConfiguration .class ) ; PublicMetrics org.springframework.boot.actuate.autoconfigure.PublicMetrics = this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBean ( DataSourcePublicMetrics .class ) ; java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> = org.springframework.boot.actuate.autoconfigure.PublicMetrics . metrics ( ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.MultipleDataSourcesConfig .class ) ; PublicMetrics org.springframework.boot.actuate.autoconfigure.PublicMetrics = this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBean ( DataSourcePublicMetrics .class ) ; java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> = org.springframework.boot.actuate.autoconfigure.PublicMetrics . metrics ( ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , STRING , STRING , STRING , STRING ) ; JdbcTemplate org.springframework.boot.actuate.autoconfigure.JdbcTemplate = new JdbcTemplate ( this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBean ( STRING , javax.sql.DataSource .class ) ) ; org.springframework.boot.actuate.autoconfigure.JdbcTemplate . execute ( new ConnectionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )					throws java.sql.SQLException , org.springframework.boot.actuate.autoconfigure.DataAccessException { return null ; } } ) ; java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> = org.springframework.boot.actuate.autoconfigure.PublicMetrics . metrics ( ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , STRING , STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )					throws java.sql.SQLException , org.springframework.boot.actuate.autoconfigure.DataAccessException { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.MultipleDataSourcesWithPrimaryConfig .class ) ; PublicMetrics org.springframework.boot.actuate.autoconfigure.PublicMetrics = this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBean ( DataSourcePublicMetrics .class ) ; java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> = org.springframework.boot.actuate.autoconfigure.PublicMetrics . metrics ( ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.MultipleDataSourcesWithCustomPrimaryConfig .class ) ; PublicMetrics org.springframework.boot.actuate.autoconfigure.PublicMetrics = this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBean ( DataSourcePublicMetrics .class ) ; java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> = org.springframework.boot.actuate.autoconfigure.PublicMetrics . metrics ( ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.MultipleDataSourcesWithPrimaryConfig .class , org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.CustomDataSourcePublicMetrics .class ) ; PublicMetrics org.springframework.boot.actuate.autoconfigure.PublicMetrics = this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBean ( DataSourcePublicMetrics .class ) ; java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> = org.springframework.boot.actuate.autoconfigure.PublicMetrics . metrics ( ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.TomcatConfiguration .class ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBeansOfType ( TomcatPublicMetrics .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBeansOfType ( CachePublicMetrics .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.CacheConfiguration .class ) ; CachePublicMetrics org.springframework.boot.actuate.autoconfigure.CachePublicMetrics = this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBean ( CachePublicMetrics .class ) ; java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> = org.springframework.boot.actuate.autoconfigure.CachePublicMetrics . metrics ( ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.MultipleCacheConfiguration .class ) ; CachePublicMetrics org.springframework.boot.actuate.autoconfigure.CachePublicMetrics = this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . getBean ( CachePublicMetrics .class ) ; java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> = org.springframework.boot.actuate.autoconfigure.CachePublicMetrics . metrics ( ) ; void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , Metric < ? > org.springframework.boot.actuate.autoconfigure.Metric<?> ) { for ( Metric < ? > org.springframework.boot.actuate.autoconfigure.Metric<?> : java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> ) { if ( org.springframework.boot.actuate.autoconfigure.Metric<> . getValue ( ) . equals ( org.springframework.boot.actuate.autoconfigure.Metric<> . getValue ( ) ) && org.springframework.boot.actuate.autoconfigure.Metric<> . getName ( ) . equals ( org.springframework.boot.actuate.autoconfigure.Metric<> . getName ( ) ) ) { return; } } fail ( STRING + org.springframework.boot.actuate.autoconfigure.Metric<> . toString ( ) + STRING + java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> , java.lang.String ... java.lang.String[] ) { java.util.Map<java.lang.String,java.lang.Number> < java.lang.String , java.lang.Number > java.util.Map<java.lang.String,java.lang.Number> = new java.util.HashMap<java.lang.String,java.lang.Number> <> ( ) ; for ( Metric < ? > org.springframework.boot.actuate.autoconfigure.Metric<?> : java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> ) { java.util.Map<java.lang.String,java.lang.Number> . java.lang.Number ( org.springframework.boot.actuate.autoconfigure.Metric<> . getName ( ) , org.springframework.boot.actuate.autoconfigure.Metric<> . getValue ( ) ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { assertThat ( java.util.Map<java.lang.String,java.lang.Number> ) . containsKey ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { AnnotationConfigServletWebServerApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; if ( java.lang.Class<?>[] . int > NUMBER ) { org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( java.lang.Class<?>[] ) ; } org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( DataSourcePoolMetadataProvidersConfiguration .class , CacheStatisticsAutoConfiguration .class , PublicMetricsAutoConfiguration .class , MockServletWebServerFactory .class ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; if ( java.lang.Class<?>[] . int > NUMBER ) { org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; } org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( DataSourcePoolMetadataProvidersConfiguration .class , CacheStatisticsAutoConfiguration .class , PublicMetricsAutoConfiguration .class ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.InitializedBuilder . org.springframework.boot.actuate.autoconfigure.DataSourceBuilder ( ) . type ( org . org.apache . org.apache . org.apache . org.apache . org.apache .class ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.InitializedBuilder . org.springframework.boot.actuate.autoconfigure.DataSourceBuilder ( ) . type ( HikariDataSource .class ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.InitializedBuilder . org.springframework.boot.actuate.autoconfigure.DataSourceBuilder ( ) . type ( BasicDataSource .class ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary public javax.sql.DataSource javax.sql.DataSource ( ) { return org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.InitializedBuilder . org.springframework.boot.actuate.autoconfigure.DataSourceBuilder ( ) . type ( org . org.apache . org.apache . org.apache . org.apache . org.apache .class ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.InitializedBuilder . org.springframework.boot.actuate.autoconfigure.DataSourceBuilder ( ) . type ( BasicDataSource .class ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary public javax.sql.DataSource javax.sql.DataSource ( ) { return org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.InitializedBuilder . org.springframework.boot.actuate.autoconfigure.DataSourceBuilder ( ) . type ( org . org.apache . org.apache . org.apache . org.apache . org.apache .class ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfigurationTests.InitializedBuilder . org.springframework.boot.actuate.autoconfigure.DataSourceBuilder ( ) . type ( BasicDataSource .class ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.DataSourcePublicMetrics org.springframework.boot.actuate.autoconfigure.DataSourcePublicMetrics ( ) { return new DataSourcePublicMetrics ( ) { @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String , javax.sql.DataSource javax.sql.DataSource , boolean boolean ) { return ( boolean ? STRING : STRING ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String , javax.sql.DataSource javax.sql.DataSource , boolean boolean ) { return ( boolean ? STRING : STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.RichGaugeReader org.springframework.boot.actuate.autoconfigure.RichGaugeReader ( ) { return mock ( RichGaugeReader .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory ( ) { TomcatServletWebServerFactory org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory . setPort ( SocketUtils . findAvailableTcpPort ( NUMBER ) ) ; return org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.CacheManager org.springframework.boot.actuate.autoconfigure.CacheManager ( ) { return new ConcurrentMapCacheManager ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( NUMBER ) public org.springframework.boot.actuate.autoconfigure.CacheManager org.springframework.boot.actuate.autoconfigure.CacheManager ( ) { return new ConcurrentMapCacheManager ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( NUMBER ) public org.springframework.boot.actuate.autoconfigure.CacheManager org.springframework.boot.actuate.autoconfigure.CacheManager ( ) { return new ConcurrentMapCacheManager ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.actuate.autoconfigure.DataSourceBuilder org.springframework.boot.actuate.autoconfigure.DataSourceBuilder ( ) { return DataSourceBuilder . create ( ) . driverClassName ( STRING ) . url ( STRING ) . username ( STRING ) ; }  <METHOD_END>
