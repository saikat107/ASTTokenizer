<METHOD_START> private void ( ) {}  <METHOD_END>
<METHOD_START> public void ( EntityManager org.springframework.data.jpa.repository.query.EntityManager , QueryExtractor org.springframework.data.jpa.repository.query.QueryExtractor ) { this . org.springframework.data.jpa.repository.query.EntityManager = org.springframework.data.jpa.repository.query.EntityManager ; this . org.springframework.data.jpa.repository.query.QueryExtractor = org.springframework.data.jpa.repository.query.QueryExtractor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.data.jpa.repository.query.RepositoryQuery org.springframework.data.jpa.repository.query.RepositoryQuery ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.jpa.repository.query.RepositoryMetadata , ProjectionFactory org.springframework.data.jpa.repository.query.ProjectionFactory , NamedQueries org.springframework.data.jpa.repository.query.NamedQueries ) { return org.springframework.data.jpa.repository.query.RepositoryQuery ( new JpaQueryMethod ( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.RepositoryMetadata , org.springframework.data.jpa.repository.query.ProjectionFactory , org.springframework.data.jpa.repository.query.QueryExtractor ) , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.NamedQueries ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.jpa.repository.query.RepositoryQuery org.springframework.data.jpa.repository.query.RepositoryQuery ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager , NamedQueries org.springframework.data.jpa.repository.query.NamedQueries );  <METHOD_END>
<METHOD_START> public void ( EntityManager org.springframework.data.jpa.repository.query.EntityManager , QueryExtractor org.springframework.data.jpa.repository.query.QueryExtractor ) { super( org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.QueryExtractor ); this . org.springframework.data.jpa.repository.query.PersistenceProvider = PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.query.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.RepositoryQuery org.springframework.data.jpa.repository.query.RepositoryQuery ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager , NamedQueries org.springframework.data.jpa.repository.query.NamedQueries ) { try { return new PartTreeJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.PersistenceProvider ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.jpa.repository.query.JpaQueryMethod . toString ( ) ) , java.lang.IllegalArgumentException ) ; } }  <METHOD_END>
<METHOD_START> public void ( EntityManager org.springframework.data.jpa.repository.query.EntityManager , QueryExtractor org.springframework.data.jpa.repository.query.QueryExtractor , EvaluationContextProvider org.springframework.data.jpa.repository.query.EvaluationContextProvider ) { super( org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.QueryExtractor ); this . org.springframework.data.jpa.repository.query.EvaluationContextProvider = org.springframework.data.jpa.repository.query.EvaluationContextProvider ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.RepositoryQuery org.springframework.data.jpa.repository.query.RepositoryQuery ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager , NamedQueries org.springframework.data.jpa.repository.query.NamedQueries ) { RepositoryQuery org.springframework.data.jpa.repository.query.RepositoryQuery = JpaQueryFactory . INSTANCE . fromQueryAnnotation ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.EvaluationContextProvider ) ; if ( null != org.springframework.data.jpa.repository.query.RepositoryQuery ) { return org.springframework.data.jpa.repository.query.RepositoryQuery ; } org.springframework.data.jpa.repository.query.RepositoryQuery = JpaQueryFactory . INSTANCE . fromProcedureAnnotation ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; if ( null != org.springframework.data.jpa.repository.query.RepositoryQuery ) { return org.springframework.data.jpa.repository.query.RepositoryQuery ; } java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.JpaQueryMethod . getNamedQueryName ( ) ; if ( org.springframework.data.jpa.repository.query.NamedQueries . hasQuery ( java.lang.String ) ) { return JpaQueryFactory . INSTANCE . fromMethodWithQueryString ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.NamedQueries . getQuery ( java.lang.String ) , org.springframework.data.jpa.repository.query.EvaluationContextProvider ) ; } org.springframework.data.jpa.repository.query.RepositoryQuery = NamedQuery . lookupFrom ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; if ( null != org.springframework.data.jpa.repository.query.RepositoryQuery ) { return org.springframework.data.jpa.repository.query.RepositoryQuery ; } throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.jpa.repository.query.JpaQueryMethod ) ) ; }  <METHOD_END>
<METHOD_START> public void ( EntityManager org.springframework.data.jpa.repository.query.EntityManager , QueryExtractor org.springframework.data.jpa.repository.query.QueryExtractor , org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.CreateQueryLookupStrategy org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.CreateQueryLookupStrategy , org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.DeclaredQueryLookupStrategy org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.DeclaredQueryLookupStrategy ) { super( org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.QueryExtractor ); this . org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.CreateQueryLookupStrategy = org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.CreateQueryLookupStrategy ; this . org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.DeclaredQueryLookupStrategy = org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.DeclaredQueryLookupStrategy ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.RepositoryQuery org.springframework.data.jpa.repository.query.RepositoryQuery ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager , NamedQueries org.springframework.data.jpa.repository.query.NamedQueries ) { try { return org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.DeclaredQueryLookupStrategy . org.springframework.data.jpa.repository.query.RepositoryQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.NamedQueries ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { return org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.CreateQueryLookupStrategy . org.springframework.data.jpa.repository.query.RepositoryQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.NamedQueries ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.data.jpa.repository.query.QueryLookupStrategy org.springframework.data.jpa.repository.query.QueryLookupStrategy ( EntityManager org.springframework.data.jpa.repository.query.EntityManager , Key org.springframework.data.jpa.repository.query.Key , QueryExtractor org.springframework.data.jpa.repository.query.QueryExtractor , EvaluationContextProvider org.springframework.data.jpa.repository.query.EvaluationContextProvider ) { Assert . notNull ( org.springframework.data.jpa.repository.query.EntityManager , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.QueryExtractor , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.EvaluationContextProvider , STRING ) ; switch ( org.springframework.data.jpa.repository.query.Key != null ? org.springframework.data.jpa.repository.query.Key : Key . CREATE_IF_NOT_FOUND ) { case CREATE : return new org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.CreateQueryLookupStrategy ( org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.QueryExtractor ) ; case USE_DECLARED_QUERY : return new org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.DeclaredQueryLookupStrategy ( org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.QueryExtractor , org.springframework.data.jpa.repository.query.EvaluationContextProvider ) ; case CREATE_IF_NOT_FOUND : return new org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.CreateIfNotFoundQueryLookupStrategy ( org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.QueryExtractor , new org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.CreateQueryLookupStrategy ( org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.QueryExtractor ) , new org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy.DeclaredQueryLookupStrategy ( org.springframework.data.jpa.repository.query.EntityManager , org.springframework.data.jpa.repository.query.QueryExtractor , org.springframework.data.jpa.repository.query.EvaluationContextProvider ) ) ; default: throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.jpa.repository.query.Key ) ) ; } }  <METHOD_END>
