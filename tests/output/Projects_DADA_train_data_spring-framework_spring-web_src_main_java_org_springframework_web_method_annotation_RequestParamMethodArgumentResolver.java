<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void ( ConfigurableBeanFactory org.springframework.web.method.annotation.ConfigurableBeanFactory , boolean boolean ) { super( org.springframework.web.method.annotation.ConfigurableBeanFactory ); this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.method.annotation.MethodParameter ) { if ( org.springframework.web.method.annotation.MethodParameter . hasParameterAnnotation ( RequestParam .class ) ) { if ( java.util.Map .class . boolean ( org.springframework.web.method.annotation.MethodParameter . nestedIfOptional ( ) . getNestedParameterType ( ) ) ) { java.lang.String java.lang.String = org.springframework.web.method.annotation.MethodParameter . getParameterAnnotation ( RequestParam .class ) . name ( ) ; return StringUtils . hasText ( java.lang.String ) ; } else { return true ; } } else { if ( org.springframework.web.method.annotation.MethodParameter . hasParameterAnnotation ( RequestPart .class ) ) { return false ; } org.springframework.web.method.annotation.MethodParameter = org.springframework.web.method.annotation.MethodParameter . nestedIfOptional ( ) ; if ( MultipartResolutionDelegate . isMultipartArgument ( org.springframework.web.method.annotation.MethodParameter ) ) { return true ; } else if ( this . boolean ) { return BeanUtils . isSimpleProperty ( org.springframework.web.method.annotation.MethodParameter . getNestedParameterType ( ) ) ; } else { return false ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.method.annotation.NamedValueInfo org.springframework.web.method.annotation.NamedValueInfo ( MethodParameter org.springframework.web.method.annotation.MethodParameter ) { RequestParam org.springframework.web.method.annotation.RequestParam = org.springframework.web.method.annotation.MethodParameter . getParameterAnnotation ( RequestParam .class ) ; return ( org.springframework.web.method.annotation.RequestParam != null ? new org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.RequestParamNamedValueInfo ( org.springframework.web.method.annotation.RequestParam ) : new org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.RequestParamNamedValueInfo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , MethodParameter org.springframework.web.method.annotation.MethodParameter , NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest ) throws java.lang.Exception { HttpServletRequest org.springframework.web.method.annotation.HttpServletRequest = org.springframework.web.method.annotation.NativeWebRequest . getNativeRequest ( HttpServletRequest .class ) ; MultipartHttpServletRequest org.springframework.web.method.annotation.MultipartHttpServletRequest = WebUtils . getNativeRequest ( org.springframework.web.method.annotation.HttpServletRequest , MultipartHttpServletRequest .class ) ; java.lang.Object java.lang.Object = MultipartResolutionDelegate . resolveMultipartArgument ( java.lang.String , org.springframework.web.method.annotation.MethodParameter , org.springframework.web.method.annotation.HttpServletRequest ) ; if ( java.lang.Object != MultipartResolutionDelegate . UNRESOLVABLE ) { return java.lang.Object ; } java.lang.Object java.lang.Object = null ; if ( org.springframework.web.method.annotation.MultipartHttpServletRequest != null ) { java.util.List<org.springframework.web.method.annotation.MultipartFile> < MultipartFile > java.util.List<org.springframework.web.method.annotation.MultipartFile> = org.springframework.web.method.annotation.MultipartHttpServletRequest . getFiles ( java.lang.String ) ; if ( ! java.util.List<org.springframework.web.method.annotation.MultipartFile> . isEmpty ( ) ) { java.lang.Object = ( java.util.List<org.springframework.web.method.annotation.MultipartFile> . size ( ) == NUMBER ? java.util.List<org.springframework.web.method.annotation.MultipartFile> . get ( NUMBER ) : java.util.List<org.springframework.web.method.annotation.MultipartFile> ) ; } } if ( java.lang.Object == null ) { java.lang.String [] java.lang.String[] = org.springframework.web.method.annotation.NativeWebRequest . getParameterValues ( java.lang.String ) ; if ( java.lang.String[] != null ) { java.lang.Object = ( java.lang.String[] . int == NUMBER ? java.lang.String[] [ NUMBER ] : java.lang.String[] ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.web.method.annotation.MethodParameter , NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest )			throws java.lang.Exception { HttpServletRequest org.springframework.web.method.annotation.HttpServletRequest = org.springframework.web.method.annotation.NativeWebRequest . getNativeRequest ( HttpServletRequest .class ) ; if ( MultipartResolutionDelegate . isMultipartArgument ( org.springframework.web.method.annotation.MethodParameter ) ) { if ( ! MultipartResolutionDelegate . isMultipartRequest ( org.springframework.web.method.annotation.HttpServletRequest ) ) { throw new MultipartException ( STRING ) ; } else { throw new MissingServletRequestPartException ( java.lang.String ) ; } } else { throw new MissingServletRequestParameterException ( java.lang.String , org.springframework.web.method.annotation.MethodParameter . getNestedParameterType ( ) . getSimpleName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodParameter org.springframework.web.method.annotation.MethodParameter , java.lang.Object java.lang.Object , UriComponentsBuilder org.springframework.web.method.annotation.UriComponentsBuilder , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ConversionService org.springframework.web.method.annotation.ConversionService ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.method.annotation.MethodParameter . getNestedParameterType ( ) ; if ( java.util.Map .class . boolean ( java.lang.Class<> ) || MultipartFile .class == java.lang.Class<> || Part .class == java.lang.Class<> ) { return; } RequestParam org.springframework.web.method.annotation.RequestParam = org.springframework.web.method.annotation.MethodParameter . getParameterAnnotation ( RequestParam .class ) ; java.lang.String java.lang.String = ( org.springframework.web.method.annotation.RequestParam == null || StringUtils . isEmpty ( org.springframework.web.method.annotation.RequestParam . name ( ) ) ? org.springframework.web.method.annotation.MethodParameter . getParameterName ( ) : org.springframework.web.method.annotation.RequestParam . name ( ) ) ; if ( java.lang.Object == null ) { if ( org.springframework.web.method.annotation.RequestParam != null ) { if ( ! org.springframework.web.method.annotation.RequestParam . required ( ) || ! org.springframework.web.method.annotation.RequestParam . defaultValue ( ) . equals ( ValueConstants . DEFAULT_NONE ) ) { return; } } org.springframework.web.method.annotation.UriComponentsBuilder . queryParam ( java.lang.String ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { for ( java.lang.Object java.lang.Object : ( java.util.Collection<?> < ? > ) java.lang.Object ) { java.lang.Object = java.lang.String ( org.springframework.web.method.annotation.ConversionService , TypeDescriptor . nested ( org.springframework.web.method.annotation.MethodParameter , NUMBER ) , java.lang.Object ) ; org.springframework.web.method.annotation.UriComponentsBuilder . queryParam ( java.lang.String , java.lang.Object ) ; } } else { org.springframework.web.method.annotation.UriComponentsBuilder . queryParam ( java.lang.String , java.lang.String ( org.springframework.web.method.annotation.ConversionService , new TypeDescriptor ( org.springframework.web.method.annotation.MethodParameter ) , java.lang.Object ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ConversionService org.springframework.web.method.annotation.ConversionService , TypeDescriptor org.springframework.web.method.annotation.TypeDescriptor , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } else if ( java.lang.Object instanceof java.lang.String ) { return ( java.lang.String ) java.lang.Object ; } else if ( org.springframework.web.method.annotation.ConversionService != null ) { return ( java.lang.String ) org.springframework.web.method.annotation.ConversionService . convert ( java.lang.Object , org.springframework.web.method.annotation.TypeDescriptor , org.springframework.web.method.annotation.TypeDescriptor ) ; } else { return java.lang.Object . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING , false , ValueConstants . DEFAULT_NONE ); }  <METHOD_END>
<METHOD_START> public void ( RequestParam org.springframework.web.method.annotation.RequestParam ) { super( org.springframework.web.method.annotation.RequestParam . name ( ) , org.springframework.web.method.annotation.RequestParam . required ( ) , org.springframework.web.method.annotation.RequestParam . defaultValue ( ) ); }  <METHOD_END>
