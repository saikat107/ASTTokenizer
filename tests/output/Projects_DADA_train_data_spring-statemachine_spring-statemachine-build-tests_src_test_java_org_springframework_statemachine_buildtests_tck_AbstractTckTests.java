<METHOD_START> @ Before public void void ( ) { void ( ) ; org.springframework.statemachine.buildtests.tck.AnnotationConfigApplicationContext = org.springframework.statemachine.buildtests.tck.AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.statemachine.buildtests.tck.AnnotationConfigApplicationContext != null ) { org.springframework.statemachine.buildtests.tck.AnnotationConfigApplicationContext . close ( ) ; } org.springframework.statemachine.buildtests.tck.AnnotationConfigApplicationContext = null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) { return org.springframework.statemachine.buildtests.tck.AnnotationConfigApplicationContext . getBean ( StateMachine .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.statemachine.buildtests.tck.StateMachineFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineFactory<java.lang.String,java.lang.String> ( ) { return org.springframework.statemachine.buildtests.tck.AnnotationConfigApplicationContext . getBean ( StateMachineFactory .class ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.buildtests.tck.AnnotationConfigApplicationContext org.springframework.statemachine.buildtests.tck.AnnotationConfigApplicationContext ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectStateEntered ( NUMBER ) . expectStateExited ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectStateEntered ( NUMBER ) . expectStateExited ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectVariable ( STRING , NUMBER ) . expectTransition ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectStateEntered ( NUMBER ) . expectStateExited ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStateEntered ( NUMBER ) . expectStateExited ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectStateEntered ( NUMBER ) . expectStateExited ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . expectVariable ( STRING , NUMBER ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectTransition ( NUMBER ) . expectVariable ( STRING , NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . expectVariable ( STRING , NUMBER ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectVariable ( STRING , NUMBER ) . expectTransition ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectStateEntered ( NUMBER ) . expectStateExited ( NUMBER ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateEntered ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectVariable ( STRING , NUMBER ) . expectTransition ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectStateEntered ( NUMBER ) . expectStateExited ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectStateEntered ( NUMBER ) . expectStateExited ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectStates ( STRING , STRING , STRING ) . and ( ) . step ( ) . sendEvent ( STRING ) . expectStateChanged ( NUMBER ) . expectStateEntered ( NUMBER ) . expectStateExited ( NUMBER ) . expectStates ( STRING , STRING , STRING , STRING ) . and ( ) . build ( ) ; org.springframework.statemachine.buildtests.tck.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.buildtests.tck.AbstractTckTests.FooGuard org.springframework.statemachine.buildtests.tck.AbstractTckTests.FooGuard ( ) { return new org.springframework.statemachine.buildtests.tck.AbstractTckTests.FooGuard ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.buildtests.tck.AbstractTckTests.FooGuard org.springframework.statemachine.buildtests.tck.AbstractTckTests.FooGuard ( ) { return new org.springframework.statemachine.buildtests.tck.AbstractTckTests.FooGuard ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.buildtests.tck.AbstractTckTests.FooAction org.springframework.statemachine.buildtests.tck.AbstractTckTests.FooAction ( ) { return new org.springframework.statemachine.buildtests.tck.AbstractTckTests.FooAction ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateContext<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.buildtests.tck.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) ; java.lang.Integer java.lang.Integer = org.springframework.statemachine.buildtests.tck.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . get ( STRING , java.lang.Integer .class ) ; if ( java.lang.Integer == null ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; } else if ( java.lang.Integer == NUMBER ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; } else if ( java.lang.Integer == NUMBER ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; } }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.buildtests.tck.StateContext<java.lang.String,java.lang.String> ) { java.lang.Object java.lang.Object = org.springframework.statemachine.buildtests.tck.StateContext<java.lang.String,java.lang.String> . getExtendedState ( ) . getVariables ( ) . get ( STRING ) ; return ! ( java.lang.Object == null || ! java.lang.Object . boolean ( int ) ) ; }  <METHOD_END>
