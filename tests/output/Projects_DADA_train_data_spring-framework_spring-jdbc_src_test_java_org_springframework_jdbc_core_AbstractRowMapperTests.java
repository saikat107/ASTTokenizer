<METHOD_START> protected void void ( Person org.springframework.jdbc.core.Person ) throws java.lang.Exception { assertEquals ( STRING , org.springframework.jdbc.core.Person . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.core.Person . getAge ( ) ) ; assertEquals ( new java . util . java.util.Date ( NUMBER ) , org.springframework.jdbc.core.Person . getBirth_date ( ) ) ; assertEquals ( new java.math.BigDecimal ( STRING ) , org.springframework.jdbc.core.Person . getBalance ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConcretePerson org.springframework.jdbc.core.ConcretePerson ) throws java.lang.Exception { assertEquals ( STRING , org.springframework.jdbc.core.ConcretePerson . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.core.ConcretePerson . getAge ( ) ) ; assertEquals ( new java . util . java.util.Date ( NUMBER ) , org.springframework.jdbc.core.ConcretePerson . getBirth_date ( ) ) ; assertEquals ( new java.math.BigDecimal ( STRING ) , org.springframework.jdbc.core.ConcretePerson . getBalance ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( SpacePerson org.springframework.jdbc.core.SpacePerson ) { assertEquals ( STRING , org.springframework.jdbc.core.SpacePerson . getLastName ( ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.core.SpacePerson . getAge ( ) ) ; assertEquals ( new java . sql . java.sql.Timestamp ( NUMBER ) . java.time.LocalDateTime ( ) , org.springframework.jdbc.core.SpacePerson . getBirthDate ( ) ) ; assertEquals ( new java.math.BigDecimal ( STRING ) , org.springframework.jdbc.core.SpacePerson . getBalance ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( DatePerson org.springframework.jdbc.core.DatePerson ) { assertEquals ( STRING , org.springframework.jdbc.core.DatePerson . getLastName ( ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.core.DatePerson . getAge ( ) ) ; assertEquals ( new java . sql . java.sql.Date ( NUMBER ) . java.time.LocalDate ( ) , org.springframework.jdbc.core.DatePerson . getBirthDate ( ) ) ; assertEquals ( new java.math.BigDecimal ( STRING ) , org.springframework.jdbc.core.DatePerson . getBalance ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) java.lang.Exception { this( org.springframework.jdbc.core.AbstractRowMapperTests.MockType . org.springframework.jdbc.core.AbstractRowMapperTests.MockType ); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( org.springframework.jdbc.core.AbstractRowMapperTests.MockType org.springframework.jdbc.core.AbstractRowMapperTests.MockType ) throws java.lang.Exception { java.sql.Connection = mock ( java.sql.Connection .class ) ; java.sql.Statement = mock ( java.sql.Statement .class ) ; java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; java.sql.ResultSetMetaData = mock ( java.sql.ResultSetMetaData .class ) ; given ( java.sql.Connection . java.sql.Statement ( ) ) . willReturn ( java.sql.Statement ) ; given ( java.sql.Statement . java.sql.ResultSet ( anyString ( ) ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . java.lang.String ( NUMBER ) ) . willReturn ( STRING ) ; given ( java.sql.ResultSet . long ( NUMBER ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.sql.Timestamp ( NUMBER ) ) . willReturn ( new java.sql.Timestamp ( NUMBER ) ) ; given ( java.sql.ResultSet . java.lang.Object ( anyInt ( ) , any ( java.lang.Class .class ) ) ) . willThrow ( new java.sql.SQLFeatureNotSupportedException ( ) ) ; given ( java.sql.ResultSet . java.sql.Date ( NUMBER ) ) . willReturn ( new java . sql . java.sql.Date ( NUMBER ) ) ; given ( java.sql.ResultSet . java.math.BigDecimal ( NUMBER ) ) . willReturn ( new java.math.BigDecimal ( STRING ) ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( org.springframework.jdbc.core.AbstractRowMapperTests.MockType == org.springframework.jdbc.core.AbstractRowMapperTests.MockType . org.springframework.jdbc.core.AbstractRowMapperTests.MockType ) ; given ( java.sql.ResultSetMetaData . int ( ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSetMetaData . java.lang.String ( NUMBER ) ) . willReturn ( org.springframework.jdbc.core.AbstractRowMapperTests.MockType == org.springframework.jdbc.core.AbstractRowMapperTests.MockType . org.springframework.jdbc.core.AbstractRowMapperTests.MockType ? STRING : STRING ) ; given ( java.sql.ResultSetMetaData . java.lang.String ( NUMBER ) ) . willReturn ( STRING ) ; given ( java.sql.ResultSetMetaData . java.lang.String ( NUMBER ) ) . willReturn ( STRING ) ; given ( java.sql.ResultSetMetaData . java.lang.String ( NUMBER ) ) . willReturn ( STRING ) ; org.springframework.jdbc.core.JdbcTemplate = new JdbcTemplate ( ) ; org.springframework.jdbc.core.JdbcTemplate . setDataSource ( new SingleConnectionDataSource ( java.sql.Connection , false ) ) ; org.springframework.jdbc.core.JdbcTemplate . setExceptionTranslator ( new SQLStateSQLExceptionTranslator ( ) ) ; org.springframework.jdbc.core.JdbcTemplate . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.core.JdbcTemplate org.springframework.jdbc.core.JdbcTemplate ( ) { return org.springframework.jdbc.core.JdbcTemplate ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.Statement ) . close ( ) ; }  <METHOD_END>
