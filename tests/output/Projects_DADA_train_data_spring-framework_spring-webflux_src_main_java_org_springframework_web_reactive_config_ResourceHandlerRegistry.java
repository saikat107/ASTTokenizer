<METHOD_START> public void ( ApplicationContext org.springframework.web.reactive.config.ApplicationContext ) { this( org.springframework.web.reactive.config.ApplicationContext , null ); }  <METHOD_END>
<METHOD_START> public void ( ApplicationContext org.springframework.web.reactive.config.ApplicationContext , CompositeContentTypeResolver org.springframework.web.reactive.config.CompositeContentTypeResolver ) { Assert . notNull ( org.springframework.web.reactive.config.ApplicationContext , STRING ) ; this . org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ; this . org.springframework.web.reactive.config.CompositeContentTypeResolver = org.springframework.web.reactive.config.CompositeContentTypeResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.config.ResourceHandlerRegistration org.springframework.web.reactive.config.ResourceHandlerRegistration ( java.lang.String ... java.lang.String[] ) { ResourceHandlerRegistration org.springframework.web.reactive.config.ResourceHandlerRegistration = new ResourceHandlerRegistration ( this . org.springframework.web.reactive.config.ApplicationContext , java.lang.String[] ) ; this . java.util.List<org.springframework.web.reactive.config.ResourceHandlerRegistration> . add ( org.springframework.web.reactive.config.ResourceHandlerRegistration ) ; return org.springframework.web.reactive.config.ResourceHandlerRegistration ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { for ( ResourceHandlerRegistration org.springframework.web.reactive.config.ResourceHandlerRegistration : this . java.util.List<org.springframework.web.reactive.config.ResourceHandlerRegistration> ) { if ( java.util.Arrays . java.util.List ( org.springframework.web.reactive.config.ResourceHandlerRegistration . getPathPatterns ( ) ) . contains ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.config.ResourceHandlerRegistry org.springframework.web.reactive.config.ResourceHandlerRegistry ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.config.AbstractHandlerMapping org.springframework.web.reactive.config.AbstractHandlerMapping ( ) { if ( this . java.util.List<org.springframework.web.reactive.config.ResourceHandlerRegistration> . isEmpty ( ) ) { return null ; } java.util.Map<java.lang.String,org.springframework.web.reactive.config.WebHandler> < java.lang.String , WebHandler > java.util.Map<java.lang.String,org.springframework.web.reactive.config.WebHandler> = new java.util.LinkedHashMap<java.lang.String,org.springframework.web.reactive.config.WebHandler> <> ( ) ; for ( ResourceHandlerRegistration org.springframework.web.reactive.config.ResourceHandlerRegistration : this . java.util.List<org.springframework.web.reactive.config.ResourceHandlerRegistration> ) { for ( java.lang.String java.lang.String : org.springframework.web.reactive.config.ResourceHandlerRegistration . getPathPatterns ( ) ) { ResourceWebHandler org.springframework.web.reactive.config.ResourceWebHandler = org.springframework.web.reactive.config.ResourceHandlerRegistration . getRequestHandler ( ) ; org.springframework.web.reactive.config.ResourceWebHandler . setContentTypeResolver ( this . org.springframework.web.reactive.config.CompositeContentTypeResolver ) ; try { org.springframework.web.reactive.config.ResourceWebHandler . afterPropertiesSet ( ) ; org.springframework.web.reactive.config.ResourceWebHandler . afterSingletonsInstantiated ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanInitializationException ( STRING , java.lang.Exception ) ; } java.util.Map<java.lang.String,org.springframework.web.reactive.config.WebHandler> . put ( java.lang.String , org.springframework.web.reactive.config.ResourceWebHandler ) ; } } SimpleUrlHandlerMapping org.springframework.web.reactive.config.SimpleUrlHandlerMapping = new SimpleUrlHandlerMapping ( ) ; org.springframework.web.reactive.config.SimpleUrlHandlerMapping . setOrder ( this . int ) ; org.springframework.web.reactive.config.SimpleUrlHandlerMapping . setUrlMap ( java.util.Map<java.lang.String,org.springframework.web.reactive.config.WebHandler> ) ; return org.springframework.web.reactive.config.SimpleUrlHandlerMapping ; }  <METHOD_END>
