<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.couchbase.repository.query.RepositoryMetadata , ProjectionFactory org.springframework.data.couchbase.repository.query.ProjectionFactory , MappingContext < ? extends CouchbasePersistentEntity < ? > , CouchbasePersistentProperty > org.springframework.data.couchbase.repository.query.MappingContext<? extends org.springframework.data.couchbase.repository.query.CouchbasePersistentEntity<?>,org.springframework.data.couchbase.repository.query.CouchbasePersistentProperty> ) { super( java.lang.reflect.Method , org.springframework.data.couchbase.repository.query.RepositoryMetadata , org.springframework.data.couchbase.repository.query.ProjectionFactory ); this . java.lang.reflect.Method = java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.couchbase.repository.query.View ( ) != null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { View org.springframework.data.couchbase.repository.query.View = org.springframework.data.couchbase.repository.query.View ( ) ; if ( org.springframework.data.couchbase.repository.query.View == null ) { return false ; } return StringUtils . hasText ( org.springframework.data.couchbase.repository.query.View . designDocument ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { View org.springframework.data.couchbase.repository.query.View = org.springframework.data.couchbase.repository.query.View ( ) ; if ( org.springframework.data.couchbase.repository.query.View == null ) { return false ; } return StringUtils . hasText ( org.springframework.data.couchbase.repository.query.View . viewName ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.couchbase.repository.query.View org.springframework.data.couchbase.repository.query.View ( ) { return java.lang.reflect.Method . T ( View .class ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.couchbase.repository.query.Dimensional ( ) != null ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.couchbase.repository.query.Dimensional org.springframework.data.couchbase.repository.query.Dimensional ( ) { return AnnotationUtils . findAnnotation ( java.lang.reflect.Method , Dimensional .class ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.couchbase.repository.query.Query ( ) != null ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.couchbase.repository.query.Query org.springframework.data.couchbase.repository.query.Query ( ) { return java.lang.reflect.Method . T ( Query .class ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.String ( ) != null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = ( java.lang.String ) AnnotationUtils . getValue ( org.springframework.data.couchbase.repository.query.Query ( ) ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return super. java.lang.String ( ) ; }  <METHOD_END>
