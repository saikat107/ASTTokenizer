<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcOutboundGatewayParserTests> ( ) ) ; assertTrue ( this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . containsBean ( STRING ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; this . org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = this . org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) org.springframework.integration.jdbc.config.Message<> . getPayload ( ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jdbc.config.JdbcTemplate . queryForMap ( STRING ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.Message<> . getHeaders ( ) . getId ( ) . toString ( ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; JdbcOutboundGateway org.springframework.integration.jdbc.config.JdbcOutboundGateway = org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , JdbcOutboundGateway .class ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jdbc.config.JdbcOutboundGateway , STRING ) ) ; Assert . assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.jdbc.config.JdbcOutboundGateway , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcOutboundGatewayParserTests> ( ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; this . org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = this . org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) org.springframework.integration.jdbc.config.Message<> . getPayload ( ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,> . get ( STRING ) ; assertNotNull ( java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jdbc.config.JdbcTemplate . queryForMap ( STRING ) ; assertEquals ( STRING , java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate . execute ( STRING ) ; MessageChannel org.springframework.integration.jdbc.config.MessageChannel = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.jdbc.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.jdbc.config.Message<?> = this . org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; java.util.Map<java.lang.String,?> = ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) org.springframework.integration.jdbc.config.Message<> . getPayload ( ) ; java.lang.Object = java.util.Map<java.lang.String,> . get ( STRING ) ; assertNotNull ( java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jdbc.config.JdbcTemplate . queryForMap ( STRING ) ; assertEquals ( STRING , java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcOutboundGatewayParserTests> ( ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; this . org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = this . org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) org.springframework.integration.jdbc.config.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , this . java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcOutboundGatewayParserTests> ( ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; this . org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = this . org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) org.springframework.integration.jdbc.config.Message<> . getPayload ( ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.jdbc.config.JdbcTemplate . queryForMap ( STRING ) ; assertEquals ( STRING , org.springframework.integration.jdbc.config.Message<> . getHeaders ( ) . getId ( ) . toString ( ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcOutboundGatewayParserTests> ( ) ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; this . org.springframework.integration.jdbc.config.MessageChannel . send ( org.springframework.integration.jdbc.config.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > org.springframework.integration.jdbc.config.Message<java.util.Map<java.lang.String,java.lang.Object>> = ( Message < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > ) this . org.springframework.integration.jdbc.config.MessagingTemplate . receive ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.jdbc.config.Message<java.util.Map<java.lang.String,java.lang.Object>> . getPayload ( ) . get ( STRING ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.integration.jdbc.config.Message<java.util.Map<java.lang.String,java.lang.Object>> . getPayload ( ) . get ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.jdbc.config.Message<java.util.Map<java.lang.String,java.lang.Object>> . getPayload ( ) . get ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcOutboundGatewayParserTests> ( ) ) ; PollingConsumer org.springframework.integration.jdbc.config.PollingConsumer = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , PollingConsumer .class ) ; DirectFieldAccessor org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jdbc.config.PollingConsumer ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; MessagingTemplate org.springframework.integration.jdbc.config.MessagingTemplate = ( MessagingTemplate ) java.lang.Object ; org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jdbc.config.MessagingTemplate ) ; java.lang.Long java.lang.Long = ( java.lang.Long ) org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , this . java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcOutboundGatewayParserTests> ( ) ) ; PollingConsumer org.springframework.integration.jdbc.config.PollingConsumer = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( PollingConsumer .class ) ; DirectFieldAccessor org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jdbc.config.PollingConsumer ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , this . java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcOutboundGatewayParserTests> ( ) ) ; PollingConsumer org.springframework.integration.jdbc.config.PollingConsumer = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( PollingConsumer .class ) ; DirectFieldAccessor org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.jdbc.config.PollingConsumer ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object = org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.jdbc.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.integration.jdbc.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.config.JdbcOutboundGatewayParserTests> ( ) ) ; java.lang.String java.lang.String = STRING + STRING ; JdbcOutboundGateway org.springframework.integration.jdbc.config.JdbcOutboundGateway = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( java.lang.String , JdbcOutboundGateway .class ) ; MessageChannel org.springframework.integration.jdbc.config.MessageChannel = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.jdbc.config.JdbcOutboundGateway , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.jdbc.config.MessageChannel . send ( MessageBuilder . withPayload ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ) ; PollableChannel org.springframework.integration.jdbc.config.PollableChannel = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.jdbc.config.Message<?> = org.springframework.integration.jdbc.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.config.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) org.springframework.integration.jdbc.config.Message<> . getPayload ( ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext != null ) { this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { PollableChannel org.springframework.integration.jdbc.config.PollableChannel = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; this . org.springframework.integration.jdbc.config.MessagingTemplate = new MessagingTemplate ( ) ; this . org.springframework.integration.jdbc.config.MessagingTemplate . setDefaultDestination ( org.springframework.integration.jdbc.config.PollableChannel ) ; this . org.springframework.integration.jdbc.config.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; this . org.springframework.integration.jdbc.config.JdbcTemplate = new JdbcTemplate ( this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , javax.sql.DataSource .class ) ) ; this . org.springframework.integration.jdbc.config.MessageChannel = this . org.springframework.integration.jdbc.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.jdbc.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jdbc.config.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.jdbc.config.ExecutionCallback . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , Message < ? > org.springframework.integration.jdbc.config.Message<?> ) throws java.sql.SQLException { java.sql.PreparedStatement . void ( NUMBER , org.springframework.integration.jdbc.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
