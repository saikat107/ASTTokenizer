<METHOD_START> public void ( ) { GenericConversionService org.springframework.data.repository.core.support.GenericConversionService = new DefaultConversionService ( ) ; QueryExecutionConverters . registerConvertersIn ( org.springframework.data.repository.core.support.GenericConversionService ) ; this . org.springframework.data.repository.core.support.GenericConversionService = org.springframework.data.repository.core.support.GenericConversionService ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.data.repository.core.support.TypeDescriptor ) { if ( org.springframework.data.repository.core.support.TypeDescriptor == null ) { return java.lang.Object ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.core.support.TypeDescriptor . getType ( ) ; if ( java.lang.Object != null && java.lang.Class<> . boolean ( java.lang.Object ) ) { return java.lang.Object ; } if ( QueryExecutionConverters . supports ( java.lang.Class<> ) ) { TypeDescriptor org.springframework.data.repository.core.support.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.Class<> ) ; if ( org.springframework.data.repository.core.support.GenericConversionService . canConvert ( org.springframework.data.repository.core.support.TypeDescriptor , org.springframework.data.repository.core.support.TypeDescriptor ) && ! org.springframework.data.repository.core.support.GenericConversionService . canBypassConvert ( org.springframework.data.repository.core.support.TypeDescriptor , org.springframework.data.repository.core.support.TypeDescriptor ) ) { return org.springframework.data.repository.core.support.GenericConversionService . convert ( new NullableWrapper ( java.lang.Object ) , java.lang.Class<> ) ; } if ( java.lang.Object != null && org.springframework.data.repository.core.support.GenericConversionService . canConvert ( TypeDescriptor . valueOf ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) , org.springframework.data.repository.core.support.TypeDescriptor ) && ! org.springframework.data.repository.core.support.GenericConversionService . canBypassConvert ( TypeDescriptor . valueOf ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) , org.springframework.data.repository.core.support.TypeDescriptor ) ) { return org.springframework.data.repository.core.support.GenericConversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } } if ( java.lang.Object != null ) { if ( ReactiveWrapperConverters . supports ( java.lang.Class<> ) ) { return ReactiveWrapperConverters . toWrapper ( java.lang.Object , java.lang.Class<> ) ; } return org.springframework.data.repository.core.support.GenericConversionService . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ? org.springframework.data.repository.core.support.GenericConversionService . convert ( java.lang.Object , java.lang.Class<> ) : java.lang.Object ; } if ( java.util.Map .class . boolean ( java.lang.Class<> ) ) { return CollectionFactory . createMap ( java.lang.Class<> , NUMBER ) ; } return null ; }  <METHOD_END>
