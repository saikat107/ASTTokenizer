<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . ANY ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; assertTrue ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . ANY ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; assertFalse ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . ALL ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; assertTrue ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . ALL ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; assertFalse ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . MAJORITY_OR_TIE ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; assertTrue ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . MAJORITY_OR_TIE ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; assertTrue ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . MAJORITY_OR_TIE ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; assertFalse ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . MAJORITY_OR_TIE ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; assertFalse ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . MAJORITY ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; assertTrue ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . MAJORITY ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; assertTrue ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . MAJORITY ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; assertFalse ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSelectorChain org.springframework.integration.selector.MessageSelectorChain = new MessageSelectorChain ( ) ; org.springframework.integration.selector.MessageSelectorChain . setVotingStrategy ( MessageSelectorChain . VotingStrategy . MAJORITY ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( true ) ) ; org.springframework.integration.selector.MessageSelectorChain . add ( new org.springframework.integration.selector.MessageSelectorChainTests.TestSelector ( false ) ) ; assertFalse ( org.springframework.integration.selector.MessageSelectorChain . accept ( org.springframework.integration.selector.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.selector.Message<?> ) { return this . boolean ; }  <METHOD_END>
