<METHOD_START> public void ( SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition , DestinationPatternsMessageCondition org.springframework.messaging.simp.DestinationPatternsMessageCondition ) { this . org.springframework.messaging.simp.SimpMessageTypeMessageCondition = org.springframework.messaging.simp.SimpMessageTypeMessageCondition ; this . org.springframework.messaging.simp.DestinationPatternsMessageCondition = org.springframework.messaging.simp.DestinationPatternsMessageCondition ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( ) { return this . org.springframework.messaging.simp.SimpMessageTypeMessageCondition ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.DestinationPatternsMessageCondition org.springframework.messaging.simp.DestinationPatternsMessageCondition ( ) { return this . org.springframework.messaging.simp.DestinationPatternsMessageCondition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.SimpMessageMappingInfo org.springframework.messaging.simp.SimpMessageMappingInfo ( org.springframework.messaging.simp.SimpMessageMappingInfo org.springframework.messaging.simp.SimpMessageMappingInfo ) { SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition = this . org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( ) . combine ( org.springframework.messaging.simp.SimpMessageMappingInfo . org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( ) ) ; DestinationPatternsMessageCondition org.springframework.messaging.simp.DestinationPatternsMessageCondition = this . org.springframework.messaging.simp.DestinationPatternsMessageCondition . combine ( org.springframework.messaging.simp.SimpMessageMappingInfo . org.springframework.messaging.simp.DestinationPatternsMessageCondition ( ) ) ; return new org.springframework.messaging.simp.SimpMessageMappingInfo ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition , org.springframework.messaging.simp.DestinationPatternsMessageCondition ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.SimpMessageMappingInfo org.springframework.messaging.simp.SimpMessageMappingInfo ( Message < ? > org.springframework.messaging.simp.Message<?> ) { SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition = this . org.springframework.messaging.simp.SimpMessageTypeMessageCondition . getMatchingCondition ( org.springframework.messaging.simp.Message<> ) ; if ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition == null ) { return null ; } DestinationPatternsMessageCondition org.springframework.messaging.simp.DestinationPatternsMessageCondition = this . org.springframework.messaging.simp.DestinationPatternsMessageCondition . getMatchingCondition ( org.springframework.messaging.simp.Message<> ) ; if ( org.springframework.messaging.simp.DestinationPatternsMessageCondition == null ) { return null ; } return new org.springframework.messaging.simp.SimpMessageMappingInfo ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition , org.springframework.messaging.simp.DestinationPatternsMessageCondition ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.messaging.simp.SimpMessageMappingInfo org.springframework.messaging.simp.SimpMessageMappingInfo , Message < ? > org.springframework.messaging.simp.Message<?> ) { int int = this . org.springframework.messaging.simp.SimpMessageTypeMessageCondition . compareTo ( org.springframework.messaging.simp.SimpMessageMappingInfo . org.springframework.messaging.simp.SimpMessageTypeMessageCondition , org.springframework.messaging.simp.Message<> ) ; if ( int != NUMBER ) { return int ; } int = this . org.springframework.messaging.simp.DestinationPatternsMessageCondition . compareTo ( org.springframework.messaging.simp.SimpMessageMappingInfo . org.springframework.messaging.simp.DestinationPatternsMessageCondition , org.springframework.messaging.simp.Message<> ) ; if ( int != NUMBER ) { return int ; } return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object != null && java.lang.Object instanceof org.springframework.messaging.simp.SimpMessageMappingInfo ) { org.springframework.messaging.simp.SimpMessageMappingInfo org.springframework.messaging.simp.SimpMessageMappingInfo = ( org.springframework.messaging.simp.SimpMessageMappingInfo ) java.lang.Object ; return ( this . org.springframework.messaging.simp.DestinationPatternsMessageCondition . equals ( org.springframework.messaging.simp.SimpMessageMappingInfo . org.springframework.messaging.simp.DestinationPatternsMessageCondition ) && this . org.springframework.messaging.simp.SimpMessageTypeMessageCondition . equals ( org.springframework.messaging.simp.SimpMessageMappingInfo . org.springframework.messaging.simp.SimpMessageTypeMessageCondition ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . org.springframework.messaging.simp.DestinationPatternsMessageCondition . hashCode ( ) * NUMBER + this . org.springframework.messaging.simp.SimpMessageTypeMessageCondition . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . org.springframework.messaging.simp.DestinationPatternsMessageCondition ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . org.springframework.messaging.simp.SimpMessageTypeMessageCondition ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '}' ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
