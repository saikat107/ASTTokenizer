<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.function.server.RouterFunction<?> < ? > org.springframework.web.reactive.function.server.RouterFunction<?> ( ) { org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.PersonHandler org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.PersonHandler = new org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.PersonHandler ( ) ; return route ( GET ( STRING ) , org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.PersonHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) . and ( route ( POST ( STRING ) , org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.PersonHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) ) . and ( route ( GET ( STRING ) , org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.PersonHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person > org.springframework.web.reactive.function.server.ResponseEntity<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> = org.springframework.web.reactive.function.server.RestTemplate . getForEntity ( STRING + port + STRING , org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.ResponseEntity<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.function.server.ResponseEntity<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> . getBody ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParameterizedTypeReference < java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> < org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person > > org.springframework.web.reactive.function.server.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person>> = new ParameterizedTypeReference < java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> < org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person > > ( ) {} ; ResponseEntity < java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> < org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person > > org.springframework.web.reactive.function.server.ResponseEntity<java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person>> = org.springframework.web.reactive.function.server.RestTemplate . exchange ( STRING + port + STRING , HttpMethod . GET , null , org.springframework.web.reactive.function.server.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person>> ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.ResponseEntity<java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person>> . getStatusCode ( ) ) ; java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> < org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person > java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> = org.springframework.web.reactive.function.server.ResponseEntity<java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person>> . getBody ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> . int ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> . org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> . org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person ( NUMBER ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING + port + STRING ) ; org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person = new org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person ( STRING ) ; RequestEntity < org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person > org.springframework.web.reactive.function.server.RequestEntity<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> = RequestEntity . post ( java.net.URI ) . body ( org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person ) ; ResponseEntity < org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person > org.springframework.web.reactive.function.server.ResponseEntity<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> = org.springframework.web.reactive.function.server.RestTemplate . exchange ( org.springframework.web.reactive.function.server.RequestEntity<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> , org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.ResponseEntity<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.function.server.ResponseEntity<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> . getBody ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person = new org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person ( STRING ) ; return ServerResponse . ok ( ) . body ( fromPublisher ( Mono . just ( org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person ) , org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person .class ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { Mono < org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> = org.springframework.web.reactive.function.server.ServerRequest . body ( toMono ( org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person .class ) ) ; return ServerResponse . ok ( ) . body ( fromPublisher ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> , org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person .class ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person = new org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person ( STRING ) ; org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person = new org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person ( STRING ) ; return ServerResponse . ok ( ) . body ( fromPublisher ( Flux . just ( org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person , org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person ) , org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person = ( org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person ) java.lang.Object ; return ! ( this . java.lang.String != null ? ! this . java.lang.String . boolean ( org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person . java.lang.String ) : org.springframework.web.reactive.function.server.PublisherHandlerFunctionIntegrationTests.Person . java.lang.String != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String != null ? this . java.lang.String . int ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + STRING + java.lang.String + '\'' + '}' ; }  <METHOD_END>
