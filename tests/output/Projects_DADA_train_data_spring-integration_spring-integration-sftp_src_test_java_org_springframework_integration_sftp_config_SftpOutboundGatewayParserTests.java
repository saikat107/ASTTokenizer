<METHOD_START> @ Test public void void ( ) { SftpOutboundGateway org.springframework.integration.sftp.config.SftpOutboundGateway = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.AbstractEndpoint , STRING , SftpOutboundGateway .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertFalse ( ( java.lang.Boolean ) TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING , java.lang.Boolean .class ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertEquals ( Command . LS , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Set<org.springframework.integration.sftp.config.Option> < Option > java.util.Set<org.springframework.integration.sftp.config.Option> = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING , java.util.Set .class ) ; assertTrue ( java.util.Set<org.springframework.integration.sftp.config.Option> . contains ( Option . NAME_ONLY ) ) ; assertTrue ( java.util.Set<org.springframework.integration.sftp.config.Option> . contains ( Option . NOSORT ) ) ; java.lang.Long java.lang.Long = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING , java.lang.Long .class ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Long ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) , Matchers . instanceOf ( RegexPatternFileListFilter .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SftpOutboundGateway org.springframework.integration.sftp.config.SftpOutboundGateway = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.AbstractEndpoint , STRING , SftpOutboundGateway .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) instanceof CachingSessionFactory ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertFalse ( ( java.lang.Boolean ) TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertEquals ( Command . GET , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING , java.lang.Boolean .class ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING , java.util.Set .class ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( Option . PRESERVE_TIMESTAMP ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> = new java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> < java.lang.reflect.Method > ( ) ; ReflectionUtils . doWithMethods ( SftpOutboundGateway .class , method -> { method . setAccessible ( true ) ; genMethod . set ( method ) ; } , method -> STRING . equals ( method . getName ( ) ) ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> . java.lang.reflect.Method ( ) . java.lang.Object ( org.springframework.integration.sftp.config.SftpOutboundGateway , new GenericMessage < java.lang.String > ( STRING ) , STRING ) ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) , Matchers . instanceOf ( SimplePatternFileListFilter .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SftpOutboundGateway org.springframework.integration.sftp.config.SftpOutboundGateway = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.AbstractEndpoint , STRING , SftpOutboundGateway .class ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertEquals ( Command . MV , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SftpOutboundGateway org.springframework.integration.sftp.config.SftpOutboundGateway = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.AbstractEndpoint , STRING , SftpOutboundGateway .class ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertEquals ( Command . MPUT , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) , Matchers . instanceOf ( RegexPatternFileListFilter .class ) ) ; assertSame ( org.springframework.integration.sftp.config.FileNameGenerator , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING , Expression .class ) . getExpressionString ( ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.SftpOutboundGateway , STRING , Expression .class ) . getExpressionString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SftpOutboundGateway org.springframework.integration.sftp.config.SftpOutboundGateway = TestUtils . getPropertyValue ( org.springframework.integration.sftp.config.AbstractEndpoint , STRING , SftpOutboundGateway .class ) ; org.springframework.integration.sftp.config.SftpOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.sftp.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.sftp.config.Message<?> ) throws java.lang.Exception { int ++ ; return null ; }  <METHOD_END>
