<METHOD_START> public static < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.Class<T> , STRING ) ; java.lang.ClassLoader java.lang.ClassLoader = java.lang.ClassLoader ; if ( java.lang.ClassLoader == null ) { java.lang.ClassLoader = org.springframework.core.io.support.SpringFactoriesLoader .class . java.lang.ClassLoader ( ) ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.Class<T> , java.lang.ClassLoader ) ; if ( org.springframework.core.io.support.Log . isTraceEnabled ( ) ) { org.springframework.core.io.support.Log . trace ( STRING + java.lang.Class<T> . java.lang.String ( ) + STRING + java.util.List<java.lang.String> ) ; } java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> <> ( java.util.List<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<T> . boolean ( T ( java.lang.String , java.lang.Class<T> , java.lang.ClassLoader ) ) ; } AnnotationAwareOrderComparator . sort ( java.util.List<T> ) ; return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> public static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.String java.lang.String = java.lang.Class<> . java.lang.String ( ) ; try { java.util.Enumeration<java.net.URL> < java.net.URL > java.util.Enumeration<java.net.URL> = ( java.lang.ClassLoader != null ? java.lang.ClassLoader . java.util.Enumeration<java.net.URL> ( java.lang.String ) : java.lang.ClassLoader . java.util.Enumeration<java.net.URL> ( java.lang.String ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; while ( java.util.Enumeration<java.net.URL> . boolean ( ) ) { java.net.URL java.net.URL = java.util.Enumeration<java.net.URL> . java.net.URL ( ) ; java.util.Properties java.util.Properties = PropertiesLoaderUtils . loadProperties ( new UrlResource ( java.net.URL ) ) ; java.lang.String java.lang.String = java.util.Properties . java.lang.String ( java.lang.String ) ; java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ) ) ; } return java.util.List<java.lang.String> ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.String + STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.ClassLoader java.lang.ClassLoader ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ; if ( ! java.lang.Class<T> . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.Class<T> . java.lang.String ( ) + STRING ) ; } return ( T ) ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<T> . java.lang.String ( ) , java.lang.Throwable ) ; } }  <METHOD_END>
