<METHOD_START> @ Test public void void ( ) { TcpConnectionFactoryFactoryBean org.springframework.integration.ip.tcp.connection.TcpConnectionFactoryFactoryBean = new TcpConnectionFactoryFactoryBean ( STRING ) ; assertEquals ( AbstractClientConnectionFactory .class , org.springframework.integration.ip.tcp.connection.TcpConnectionFactoryFactoryBean . getObjectType ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionFactoryFactoryBean = new TcpConnectionFactoryFactoryBean ( STRING ) ; assertEquals ( AbstractServerConnectionFactory .class , org.springframework.integration.ip.tcp.connection.TcpConnectionFactoryFactoryBean . getObjectType ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionFactoryFactoryBean = new TcpConnectionFactoryFactoryBean ( ) ; assertEquals ( AbstractConnectionFactory .class , org.springframework.integration.ip.tcp.connection.TcpConnectionFactoryFactoryBean . getObjectType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; void ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; void ( org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) throws java.lang.Exception { final java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> < IpIntegrationEvent > java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> = java.util.Collections . java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> ( new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> < IpIntegrationEvent > ( ) ) ; int int = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory instanceof TcpNetServerConnectionFactory ? NUMBER : NUMBER ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; ApplicationEventPublisher org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher = new ApplicationEventPublisher ( ) { @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { LogFactory . getLog ( this . java.lang.Class<? extends > ( ) ) . trace ( STRING + org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> . add ( ( IpIntegrationEvent ) org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; if ( org.springframework.integration.ip.tcp.connection.ApplicationEvent instanceof TcpConnectionServerListeningEvent ) { java.util.concurrent.CountDownLatch . void ( ) ; } java.util.concurrent.CountDownLatch . void ( ) ; } @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} } ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setApplicationEventPublisher ( org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = spy ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; doAnswer ( invocation -> { Object result = invocation . callRealMethod ( ) ; serverConnectionInitLatch . countDown ( ) ; return result ; } ) . when ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) . wrapConnection ( any ( TcpConnectionSupport .class ) ) ; ThreadPoolTaskScheduler org.springframework.integration.ip.tcp.connection.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.ip.tcp.connection.ThreadPoolTaskScheduler . setPoolSize ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; BeanFactory org.springframework.integration.ip.tcp.connection.BeanFactory = mock ( BeanFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.BeanFactory . containsBean ( IntegrationContextUtils . TASK_SCHEDULER_BEAN_NAME ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ip.tcp.connection.BeanFactory . getBean ( IntegrationContextUtils . TASK_SCHEDULER_BEAN_NAME , TaskScheduler .class ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.ThreadPoolTaskScheduler ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setBeanFactory ( org.springframework.integration.ip.tcp.connection.BeanFactory ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.connection.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.connection.TcpReceivingChannelAdapter . setOutputChannel ( new NullChannel ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.connection.TcpReceivingChannelAdapter . start ( ) ; assertTrue ( STRING , java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> . get ( NUMBER ) , instanceOf ( TcpConnectionServerListeningEvent .class ) ) ; assertThat ( ( ( TcpConnectionServerListeningEvent ) java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> . get ( NUMBER ) ) . getPort ( ) , equalTo ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ) ; int int = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ; TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . registerListener ( message -> false ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . setApplicationEventPublisher ( org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . start ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getConnection ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getOpenConnectionIds ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getConnectionId ( ) ) ) ; assertTrue ( STRING , java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getOpenConnectionIds ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . closeConnection ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ; java.util.List<java.lang.String> = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getOpenConnectionIds ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; int int = NUMBER ; java.util.List<java.lang.String> = org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getOpenConnectionIds ( ) ; while ( int ++ < NUMBER && java.util.List<java.lang.String> . int ( ) > NUMBER ) { java.lang.Thread . void ( NUMBER ) ; java.util.List<java.lang.String> = org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . getOpenConnectionIds ( ) ; } assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( STRING + int + STRING + java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> . size ( ) + STRING + java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> , java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> . size ( ) , greaterThanOrEqualTo ( int ) ) ; org.springframework.integration.ip.tcp.connection.ConnectionFactoryTests.FooEvent org.springframework.integration.ip.tcp.connection.ConnectionFactoryTests.FooEvent = new org.springframework.integration.ip.tcp.connection.ConnectionFactoryTests.FooEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , STRING ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . publishEvent ( org.springframework.integration.ip.tcp.connection.ConnectionFactoryTests.FooEvent ) ; assertThat ( STRING + int + STRING + java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> . size ( ) + STRING + java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> , java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> . size ( ) , greaterThanOrEqualTo ( int + NUMBER ) ) ; try { org.springframework.integration.ip.tcp.connection.ConnectionFactoryTests.FooEvent = new org.springframework.integration.ip.tcp.connection.ConnectionFactoryTests.FooEvent ( mock ( TcpConnectionSupport .class ) , STRING ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . publishEvent ( org.springframework.integration.ip.tcp.connection.ConnectionFactoryTests.FooEvent ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( STRING . boolean ( java.lang.IllegalArgumentException . java.lang.String ( ) ) ) ; } java.net.SocketAddress java.net.SocketAddress = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getServerSocketAddress ( ) ; if ( java.net.SocketAddress instanceof java.net.InetSocketAddress ) { java.net.InetSocketAddress java.net.InetSocketAddress = ( java.net.InetSocketAddress ) java.net.SocketAddress ; assertEquals ( int , java.net.InetSocketAddress . int ( ) ) ; } org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.ThreadPoolTaskScheduler . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) { LogFactory . getLog ( this . java.lang.Class<? extends > ( ) ) . trace ( STRING + org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; java.util.List<org.springframework.integration.ip.tcp.connection.IpIntegrationEvent> . add ( ( IpIntegrationEvent ) org.springframework.integration.ip.tcp.connection.ApplicationEvent ) ; if ( org.springframework.integration.ip.tcp.connection.ApplicationEvent instanceof TcpConnectionServerListeningEvent ) { java.util.concurrent.CountDownLatch . void ( ) ; } java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; void ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; void ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( final AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setApplicationEventPublisher ( mock ( ApplicationEventPublisher .class ) ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . registerListener ( mock ( TcpListener .class ) ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . afterPropertiesSet ( ) ; Log org.springframework.integration.ip.tcp.connection.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , STRING , Log .class ) ) ; new DirectFieldAccessor ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) . setPropertyValue ( STRING , org.springframework.integration.ip.tcp.connection.Log ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; when ( org.springframework.integration.ip.tcp.connection.Log . isInfoEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ip.tcp.connection.Log . isDebugEnabled ( ) ) . thenReturn ( true ) ; doAnswer ( invocation -> { latch1 . countDown ( ) ; latch2 . await ( NUMBER , TimeUnit . SECONDS ) ; return null ; } ) . when ( org.springframework.integration.ip.tcp.connection.Log ) . info ( contains ( STRING ) ) ; doAnswer ( invocation -> { latch3 . countDown ( ) ; return null ; } ) . when ( org.springframework.integration.ip.tcp.connection.Log ) . debug ( contains ( java.lang.String ) ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . start ( ) ; assertTrue ( STRING , java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( ( ) org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ) ; int int = NUMBER ; DirectFieldAccessor org.springframework.integration.ip.tcp.connection.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; while ( int ++ < NUMBER && org.springframework.integration.ip.tcp.connection.DirectFieldAccessor . getPropertyValue ( java.lang.String ) != null ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( STRING , int < NUMBER ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( STRING , java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.lang.String java.lang.String = STRING + org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) + java.lang.String ; ArgumentCaptor < java.lang.String > org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.String> = ArgumentCaptor . forClass ( java.lang.String .class ) ; verify ( org.springframework.integration.ip.tcp.connection.Log , atLeast ( NUMBER ) ) . debug ( org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.String> . capture ( ) ) ; assertThat ( org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.String> . getAllValues ( ) , hasItem ( java.lang.String ) ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> void ( TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , java.lang.String java.lang.String ) { super( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , java.lang.String ); }  <METHOD_END>
