<METHOD_START> @ Before public void void ( ) { org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . setThreadNamePrefix ( java.lang.String ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ( NUMBER ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . execute ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ( NUMBER ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . execute ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ( NUMBER ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler ( NUMBER ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . setErrorHandler ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . execute ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler ) ; assertNotNull ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ( NUMBER ) ; java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . submit ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; java.lang.Object java.lang.Object = java.util.concurrent.Future<> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNull ( java.lang.Object ) ; void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.util.concurrent.ExecutionException .class ) public void void ( ) java.lang.Exception { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ( NUMBER ) ; java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . submit ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; try { java.util.concurrent.Future<> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertTrue ( java.util.concurrent.Future<> . boolean ( ) ) ; throw java.util.concurrent.ExecutionException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ( NUMBER ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler ( NUMBER ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . setErrorHandler ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler ) ; java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . submit ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; java.lang.Object java.lang.Object = java.util.concurrent.Future<> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertTrue ( java.util.concurrent.Future<> . boolean ( ) ) ; assertNull ( java.lang.Object ) ; assertNotNull ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable ( NUMBER ) ; java.util.concurrent.Future<java.lang.String> < java.lang.String > java.util.concurrent.Future<java.lang.String> = org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . submit ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable ) ; java.lang.String java.lang.String = java.util.concurrent.Future<java.lang.String> . java.lang.String ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( java.lang.String , java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.util.concurrent.ExecutionException .class ) public void void ( ) java.lang.Exception { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable ( NUMBER ) ; java.util.concurrent.Future<java.lang.String> < java.lang.String > java.util.concurrent.Future<java.lang.String> = org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . submit ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable ) ; java.util.concurrent.Future<java.lang.String> . java.lang.String ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertTrue ( java.util.concurrent.Future<java.lang.String> . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable ( NUMBER ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler ( NUMBER ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . setErrorHandler ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler ) ; java.util.concurrent.Future<java.lang.String> < java.lang.String > java.util.concurrent.Future<java.lang.String> = org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . submit ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestCallable ) ; java.lang.Object java.lang.Object = java.util.concurrent.Future<java.lang.String> . java.lang.String ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertTrue ( java.util.concurrent.Future<java.lang.String> . boolean ( ) ) ; assertNull ( java.lang.Object ) ; assertNotNull ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ( NUMBER ) ; java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . schedule ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask , new java.util.Date ( ) ) ; java.lang.Object java.lang.Object = java.util.concurrent.Future<> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNull ( java.lang.Object ) ; assertTrue ( java.util.concurrent.Future<> . boolean ( ) ) ; void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.util.concurrent.ExecutionException .class ) public void void ( ) java.lang.Exception { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ( NUMBER ) ; java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . schedule ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask , new java.util.Date ( ) ) ; try { java.util.concurrent.Future<> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertTrue ( java.util.concurrent.Future<> . boolean ( ) ) ; throw java.util.concurrent.ExecutionException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ( NUMBER ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler ( NUMBER ) ; org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . setErrorHandler ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler ) ; java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . schedule ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask , new java.util.Date ( ) ) ; java.lang.Object java.lang.Object = java.util.concurrent.Future<> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertTrue ( java.util.concurrent.Future<> . boolean ( ) ) ; assertNull ( java.lang.Object ) ; assertNotNull ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask = new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ( NUMBER ) ; java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler . schedule ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask , new org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTrigger ( NUMBER ) ) ; java.lang.Object java.lang.Object = java.util.concurrent.Future<> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNull ( java.lang.Object ) ; void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) { assertEquals ( java.lang.String , org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask . java.lang.Thread . java.lang.String ( ) . java.lang.String ( NUMBER , java.lang.String . int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask ) { this . void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestTask . java.util.concurrent.CountDownLatch ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler ) { this . void ( org.springframework.scheduling.concurrent.ThreadPoolTaskSchedulerTests.TestErrorHandler . java.util.concurrent.CountDownLatch ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { try { java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( java.lang.InterruptedException ) ; } assertEquals ( STRING , NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; if ( java.util.concurrent.atomic.AtomicInteger . int ( ) > int ) { throw new java.lang.RuntimeException ( STRING ) ; } java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { if ( java.util.concurrent.atomic.AtomicInteger . int ( ) > int ) { throw new java.lang.RuntimeException ( STRING ) ; } return java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { this . java.lang.Throwable = java.lang.Throwable ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( TriggerContext org.springframework.scheduling.concurrent.TriggerContext ) { if ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) > this . int ) { return null ; } return new java.util.Date ( ) ; }  <METHOD_END>
