<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration = new DelegatingWebMvcConfiguration ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . setConfigurers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) ) ; RequestMappingHandlerAdapter org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter = org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . requestMappingHandlerAdapter ( ) ; ConfigurableWebBindingInitializer org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer = ( ConfigurableWebBindingInitializer ) org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getWebBindingInitializer ( ) ; ConversionService org.springframework.web.servlet.config.annotation.ConversionService = org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer . getConversionService ( ) ; assertTrue ( org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer . getValidator ( ) instanceof LocalValidatorFactoryBean ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . configureMessageConverters ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>>> . capture ( ) ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . configureContentNegotiation ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer> . capture ( ) ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . addFormatters ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<org.springframework.web.servlet.config.annotation.FormattingConversionService> . capture ( ) ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . addArgumentResolvers ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver>> . capture ( ) ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . addReturnValueHandlers ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler>> . capture ( ) ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . configureAsyncSupport ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer> . capture ( ) ) ; assertSame ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<org.springframework.web.servlet.config.annotation.FormattingConversionService> . getValue ( ) , org.springframework.web.servlet.config.annotation.ConversionService ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver>> . getValue ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler>> . getValue ( ) . size ( ) ) ; assertEquals ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>>> . getValue ( ) , org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getMessageConverters ( ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final HttpMessageConverter org.springframework.web.servlet.config.annotation.HttpMessageConverter = mock ( HttpMessageConverter .class ) ; final StringHttpMessageConverter org.springframework.web.servlet.config.annotation.StringHttpMessageConverter = new StringHttpMessageConverter ( ) ; java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> < WebMvcConfigurer > java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> = new java.util.ArrayList<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> <> ( ) ; java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> . add ( new WebMvcConfigurerAdapter ( ) { @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( org.springframework.web.servlet.config.annotation.StringHttpMessageConverter ) ; } @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( NUMBER , org.springframework.web.servlet.config.annotation.HttpMessageConverter ) ; } } ) ; org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration = new DelegatingWebMvcConfiguration ( ) ; org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . setConfigurers ( java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) ; RequestMappingHandlerAdapter org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter = org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . requestMappingHandlerAdapter ( ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getMessageConverters ( ) . size ( ) ) ; assertSame ( org.springframework.web.servlet.config.annotation.HttpMessageConverter , org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getMessageConverters ( ) . get ( NUMBER ) ) ; assertSame ( org.springframework.web.servlet.config.annotation.StringHttpMessageConverter , org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getMessageConverters ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( org.springframework.web.servlet.config.annotation.StringHttpMessageConverter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( NUMBER , org.springframework.web.servlet.config.annotation.HttpMessageConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer . getValidator ( ) ) . willReturn ( new LocalValidatorFactoryBean ( ) ) ; org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . setConfigurers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) ) ; org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . mvcValidator ( ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . getValidator ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer . getMessageCodesResolver ( ) ) . willReturn ( new DefaultMessageCodesResolver ( ) ) ; org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . setConfigurers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) ) ; org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . getMessageCodesResolver ( ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . getMessageCodesResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . setConfigurers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) ) ; org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . handlerExceptionResolver ( ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . configureMessageConverters ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>>> . capture ( ) ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . configureContentNegotiation ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer> . capture ( ) ) ; verify ( org.springframework.web.servlet.config.annotation.WebMvcConfigurer ) . configureHandlerExceptionResolvers ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver>> . capture ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver>> . getValue ( ) . size ( ) ) ; assertTrue ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver>> . getValue ( ) . get ( NUMBER ) instanceof ExceptionHandlerExceptionResolver ) ; assertTrue ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver>> . getValue ( ) . get ( NUMBER ) instanceof ResponseStatusExceptionResolver ) ; assertTrue ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver>> . getValue ( ) . get ( NUMBER ) instanceof DefaultHandlerExceptionResolver ) ; assertTrue ( org.springframework.web.servlet.config.annotation.ArgumentCaptor<java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>>> . getValue ( ) . size ( ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> < WebMvcConfigurer > java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> = new java.util.ArrayList<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> <> ( ) ; java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> . add ( new WebMvcConfigurerAdapter ( ) { @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . add ( new DefaultHandlerExceptionResolver ( ) ) ; } } ) ; org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . setConfigurers ( java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) ; HandlerExceptionResolverComposite org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite = ( HandlerExceptionResolverComposite ) org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . handlerExceptionResolver ( ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.config.annotation.HandlerExceptionResolverComposite . getExceptionResolvers ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . add ( new DefaultHandlerExceptionResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final PathMatcher org.springframework.web.servlet.config.annotation.PathMatcher = mock ( PathMatcher .class ) ; final UrlPathHelper org.springframework.web.servlet.config.annotation.UrlPathHelper = mock ( UrlPathHelper .class ) ; java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> < WebMvcConfigurer > java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> = new java.util.ArrayList<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> <> ( ) ; java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> . add ( new WebMvcConfigurerAdapter ( ) { @ java.lang.Override public void void ( PathMatchConfigurer org.springframework.web.servlet.config.annotation.PathMatchConfigurer ) { org.springframework.web.servlet.config.annotation.PathMatchConfigurer . setUseRegisteredSuffixPatternMatch ( true ) . setUseTrailingSlashMatch ( false ) . setUrlPathHelper ( org.springframework.web.servlet.config.annotation.UrlPathHelper ) . setPathMatcher ( org.springframework.web.servlet.config.annotation.PathMatcher ) ; } } ) ; org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . setConfigurers ( java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping = org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration . requestMappingHandlerMapping ( ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping ) ; assertEquals ( STRING , true , org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . useRegisteredSuffixPatternMatch ( ) ) ; assertEquals ( STRING , true , org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . useSuffixPatternMatch ( ) ) ; assertEquals ( STRING , false , org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . useTrailingSlashMatch ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.UrlPathHelper , org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . getUrlPathHelper ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.PathMatcher , org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . getPathMatcher ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PathMatchConfigurer org.springframework.web.servlet.config.annotation.PathMatchConfigurer ) { org.springframework.web.servlet.config.annotation.PathMatchConfigurer . setUseRegisteredSuffixPatternMatch ( true ) . setUseTrailingSlashMatch ( false ) . setUrlPathHelper ( org.springframework.web.servlet.config.annotation.UrlPathHelper ) . setPathMatcher ( org.springframework.web.servlet.config.annotation.PathMatcher ) ; }  <METHOD_END>
