<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Configuration org.springframework.web.servlet.view.freemarker.Configuration ) { this . org.springframework.web.servlet.view.freemarker.Configuration = org.springframework.web.servlet.view.freemarker.Configuration ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.view.freemarker.Configuration org.springframework.web.servlet.view.freemarker.Configuration ( ) { return this . org.springframework.web.servlet.view.freemarker.Configuration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServletContext org.springframework.web.servlet.view.freemarker.ServletContext ) throws org.springframework.web.servlet.view.freemarker.BeansException { if ( org.springframework.web.servlet.view.freemarker.Configuration ( ) != null ) { this . org.springframework.web.servlet.view.freemarker.TaglibFactory = new TaglibFactory ( org.springframework.web.servlet.view.freemarker.ServletContext ) ; } else { FreeMarkerConfig org.springframework.web.servlet.view.freemarker.FreeMarkerConfig = org.springframework.web.servlet.view.freemarker.FreeMarkerConfig ( ) ; void ( org.springframework.web.servlet.view.freemarker.FreeMarkerConfig . getConfiguration ( ) ) ; this . org.springframework.web.servlet.view.freemarker.TaglibFactory = org.springframework.web.servlet.view.freemarker.FreeMarkerConfig . getTaglibFactory ( ) ; } GenericServlet org.springframework.web.servlet.view.freemarker.GenericServlet = new org.springframework.web.servlet.view.freemarker.FreeMarkerView.GenericServletAdapter ( ) ; try { org.springframework.web.servlet.view.freemarker.GenericServlet . init ( new org.springframework.web.servlet.view.freemarker.FreeMarkerView.DelegatingServletConfig ( ) ) ; } catch ( ServletException org.springframework.web.servlet.view.freemarker.ServletException ) { throw new BeanInitializationException ( STRING , org.springframework.web.servlet.view.freemarker.ServletException ) ; } this . org.springframework.web.servlet.view.freemarker.ServletContextHashModel = new ServletContextHashModel ( org.springframework.web.servlet.view.freemarker.GenericServlet , org.springframework.web.servlet.view.freemarker.ObjectWrapper ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.view.freemarker.FreeMarkerConfig org.springframework.web.servlet.view.freemarker.FreeMarkerConfig ( ) org.springframework.web.servlet.view.freemarker.BeansException { try { return BeanFactoryUtils . beanOfTypeIncludingAncestors ( getApplicationContext ( ) , FreeMarkerConfig .class , true , false ) ; } catch ( NoSuchBeanDefinitionException org.springframework.web.servlet.view.freemarker.NoSuchBeanDefinitionException ) { throw new ApplicationContextException ( STRING + STRING + STRING , org.springframework.web.servlet.view.freemarker.NoSuchBeanDefinitionException ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.view.freemarker.ObjectWrapper org.springframework.web.servlet.view.freemarker.ObjectWrapper ( ) { ObjectWrapper org.springframework.web.servlet.view.freemarker.ObjectWrapper = org.springframework.web.servlet.view.freemarker.Configuration ( ) . getObjectWrapper ( ) ; return ( org.springframework.web.servlet.view.freemarker.ObjectWrapper != null ? org.springframework.web.servlet.view.freemarker.ObjectWrapper : new DefaultObjectWrapperBuilder ( Configuration . DEFAULT_INCOMPATIBLE_IMPROVEMENTS ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Locale java.util.Locale ) throws java.lang.Exception { try { org.springframework.web.servlet.view.freemarker.Template ( getUrl ( ) , java.util.Locale ) ; return true ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getUrl ( ) ) ; } return false ; } catch ( ParseException org.springframework.web.servlet.view.freemarker.ParseException ) { throw new ApplicationContextException ( STRING + getUrl ( ) + STRING , org.springframework.web.servlet.view.freemarker.ParseException ) ; } catch ( java.io.IOException java.io.IOException ) { throw new ApplicationContextException ( STRING + getUrl ( ) + STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.freemarker.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse ) throws java.lang.Exception { void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.freemarker.HttpServletRequest ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.freemarker.HttpServletRequest , org.springframework.web.servlet.view.freemarker.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.freemarker.HttpServletRequest ) throws java.lang.Exception {	}  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.freemarker.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse ) throws java.lang.Exception { exposeModelAsRequestAttributes ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.freemarker.HttpServletRequest ) ; SimpleHash org.springframework.web.servlet.view.freemarker.SimpleHash = org.springframework.web.servlet.view.freemarker.SimpleHash ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.freemarker.HttpServletRequest , org.springframework.web.servlet.view.freemarker.HttpServletResponse ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getUrl ( ) + STRING + getBeanName ( ) + STRING ) ; } java.util.Locale java.util.Locale = RequestContextUtils . getLocale ( org.springframework.web.servlet.view.freemarker.HttpServletRequest ) ; void ( org.springframework.web.servlet.view.freemarker.Template ( java.util.Locale ) , org.springframework.web.servlet.view.freemarker.SimpleHash , org.springframework.web.servlet.view.freemarker.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.view.freemarker.SimpleHash org.springframework.web.servlet.view.freemarker.SimpleHash ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.freemarker.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse ) { AllHttpScopesHashModel org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel = new AllHttpScopesHashModel ( org.springframework.web.servlet.view.freemarker.ObjectWrapper ( ) , getServletContext ( ) , org.springframework.web.servlet.view.freemarker.HttpServletRequest ) ; org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel . put ( FreemarkerServlet . KEY_JSP_TAGLIBS , this . org.springframework.web.servlet.view.freemarker.TaglibFactory ) ; org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel . put ( FreemarkerServlet . KEY_APPLICATION , this . org.springframework.web.servlet.view.freemarker.ServletContextHashModel ) ; org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel . put ( FreemarkerServlet . KEY_SESSION , org.springframework.web.servlet.view.freemarker.HttpSessionHashModel ( org.springframework.web.servlet.view.freemarker.HttpServletRequest , org.springframework.web.servlet.view.freemarker.HttpServletResponse ) ) ; org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel . put ( FreemarkerServlet . KEY_REQUEST , new HttpRequestHashModel ( org.springframework.web.servlet.view.freemarker.HttpServletRequest , org.springframework.web.servlet.view.freemarker.HttpServletResponse , org.springframework.web.servlet.view.freemarker.ObjectWrapper ( ) ) ) ; org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel . put ( FreemarkerServlet . KEY_REQUEST_PARAMETERS , new HttpRequestParametersHashModel ( org.springframework.web.servlet.view.freemarker.HttpServletRequest ) ) ; org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel . putAll ( java.util.Map<java.lang.String,java.lang.Object> ) ; return org.springframework.web.servlet.view.freemarker.AllHttpScopesHashModel ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.view.freemarker.HttpSessionHashModel org.springframework.web.servlet.view.freemarker.HttpSessionHashModel ( HttpServletRequest org.springframework.web.servlet.view.freemarker.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse ) { HttpSession org.springframework.web.servlet.view.freemarker.HttpSession = org.springframework.web.servlet.view.freemarker.HttpServletRequest . getSession ( false ) ; if ( org.springframework.web.servlet.view.freemarker.HttpSession != null ) { return new HttpSessionHashModel ( org.springframework.web.servlet.view.freemarker.HttpSession , org.springframework.web.servlet.view.freemarker.ObjectWrapper ( ) ) ; } else { return new HttpSessionHashModel ( null , org.springframework.web.servlet.view.freemarker.HttpServletRequest , org.springframework.web.servlet.view.freemarker.HttpServletResponse , org.springframework.web.servlet.view.freemarker.ObjectWrapper ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.view.freemarker.Template org.springframework.web.servlet.view.freemarker.Template ( java.util.Locale java.util.Locale ) throws java.io.IOException { return org.springframework.web.servlet.view.freemarker.Template ( getUrl ( ) , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.view.freemarker.Template org.springframework.web.servlet.view.freemarker.Template ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.io.IOException { return ( java.lang.String ( ) != null ? org.springframework.web.servlet.view.freemarker.Configuration ( ) . getTemplate ( java.lang.String , java.util.Locale , java.lang.String ( ) ) : org.springframework.web.servlet.view.freemarker.Configuration ( ) . getTemplate ( java.lang.String , java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Template org.springframework.web.servlet.view.freemarker.Template , SimpleHash org.springframework.web.servlet.view.freemarker.SimpleHash , HttpServletResponse org.springframework.web.servlet.view.freemarker.HttpServletResponse )			throws java.io.IOException , org.springframework.web.servlet.view.freemarker.TemplateException { org.springframework.web.servlet.view.freemarker.Template . process ( org.springframework.web.servlet.view.freemarker.SimpleHash , org.springframework.web.servlet.view.freemarker.HttpServletResponse . getWriter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.web.servlet.view.freemarker.ServletRequest , ServletResponse org.springframework.web.servlet.view.freemarker.ServletResponse ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.web.servlet.view.freemarker.FreeMarkerView .this . getBeanName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.view.freemarker.ServletContext org.springframework.web.servlet.view.freemarker.ServletContext ( ) { return org.springframework.web.servlet.view.freemarker.FreeMarkerView .this . getServletContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { return java.util.Collections . java.util.Enumeration<java.lang.String> ( java.util.Collections . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
