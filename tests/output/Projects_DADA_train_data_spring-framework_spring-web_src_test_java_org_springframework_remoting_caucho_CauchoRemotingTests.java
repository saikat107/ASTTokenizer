<METHOD_START> @ Test public void void ( ) java.lang.Exception { HessianProxyFactoryBean org.springframework.remoting.caucho.HessianProxyFactoryBean = new HessianProxyFactoryBean ( ) ; org.springframework.remoting.caucho.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setServiceInterface ( TestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HessianProxyFactoryBean org.springframework.remoting.caucho.HessianProxyFactoryBean = new HessianProxyFactoryBean ( ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . afterPropertiesSet ( ) ; assertTrue ( STRING , org.springframework.remoting.caucho.HessianProxyFactoryBean . isSingleton ( ) ) ; assertTrue ( org.springframework.remoting.caucho.HessianProxyFactoryBean . getObject ( ) instanceof ITestBean ) ; ITestBean org.springframework.remoting.caucho.ITestBean = ( ITestBean ) org.springframework.remoting.caucho.HessianProxyFactoryBean . getObject ( ) ; org.springframework.remoting.caucho.ExpectedException . expect ( RemoteAccessException .class ) ; org.springframework.remoting.caucho.ITestBean . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HessianProxyFactoryBean org.springframework.remoting.caucho.HessianProxyFactoryBean = new HessianProxyFactoryBean ( ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setUsername ( STRING ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setPassword ( STRING ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setOverloadEnabled ( true ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . afterPropertiesSet ( ) ; assertTrue ( STRING , org.springframework.remoting.caucho.HessianProxyFactoryBean . isSingleton ( ) ) ; assertTrue ( org.springframework.remoting.caucho.HessianProxyFactoryBean . getObject ( ) instanceof ITestBean ) ; ITestBean org.springframework.remoting.caucho.ITestBean = ( ITestBean ) org.springframework.remoting.caucho.HessianProxyFactoryBean . getObject ( ) ; org.springframework.remoting.caucho.ExpectedException . expect ( RemoteAccessException .class ) ; org.springframework.remoting.caucho.ITestBean . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.remoting.caucho.CauchoRemotingTests.TestHessianProxyFactory org.springframework.remoting.caucho.CauchoRemotingTests.TestHessianProxyFactory = new org.springframework.remoting.caucho.CauchoRemotingTests.TestHessianProxyFactory ( ) ; HessianProxyFactoryBean org.springframework.remoting.caucho.HessianProxyFactoryBean = new HessianProxyFactoryBean ( ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setProxyFactory ( org.springframework.remoting.caucho.CauchoRemotingTests.TestHessianProxyFactory ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setUsername ( STRING ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setPassword ( STRING ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . setOverloadEnabled ( true ) ; org.springframework.remoting.caucho.HessianProxyFactoryBean . afterPropertiesSet ( ) ; assertTrue ( STRING , org.springframework.remoting.caucho.HessianProxyFactoryBean . isSingleton ( ) ) ; assertTrue ( org.springframework.remoting.caucho.HessianProxyFactoryBean . getObject ( ) instanceof ITestBean ) ; ITestBean org.springframework.remoting.caucho.ITestBean = ( ITestBean ) org.springframework.remoting.caucho.HessianProxyFactoryBean . getObject ( ) ; assertEquals ( org.springframework.remoting.caucho.CauchoRemotingTests.TestHessianProxyFactory . java.lang.String , STRING ) ; assertEquals ( org.springframework.remoting.caucho.CauchoRemotingTests.TestHessianProxyFactory . java.lang.String , STRING ) ; assertTrue ( org.springframework.remoting.caucho.CauchoRemotingTests.TestHessianProxyFactory . boolean ) ; org.springframework.remoting.caucho.ExpectedException . expect ( RemoteAccessException .class ) ; org.springframework.remoting.caucho.ITestBean . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { final int int = SocketUtils . findAvailableTcpPort ( ) ; TestBean org.springframework.remoting.caucho.TestBean = new TestBean ( STRING ) ; SimpleHessianServiceExporter org.springframework.remoting.caucho.SimpleHessianServiceExporter = new SimpleHessianServiceExporter ( ) ; org.springframework.remoting.caucho.SimpleHessianServiceExporter . setService ( org.springframework.remoting.caucho.TestBean ) ; org.springframework.remoting.caucho.SimpleHessianServiceExporter . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.caucho.SimpleHessianServiceExporter . setDebug ( true ) ; org.springframework.remoting.caucho.SimpleHessianServiceExporter . prepare ( ) ; com.sun.net.httpserver.HttpServer com.sun.net.httpserver.HttpServer = com.sun.net.httpserver.HttpServer . com.sun.net.httpserver.HttpServer ( new java.net.InetSocketAddress ( int ) , - NUMBER ) ; com.sun.net.httpserver.HttpServer . com.sun.net.httpserver.HttpContext ( STRING , org.springframework.remoting.caucho.SimpleHessianServiceExporter ) ; com.sun.net.httpserver.HttpServer . void ( ) ; try { HessianClientInterceptor org.springframework.remoting.caucho.HessianClientInterceptor = new HessianClientInterceptor ( ) ; org.springframework.remoting.caucho.HessianClientInterceptor . setServiceUrl ( STRING + int + STRING ) ; org.springframework.remoting.caucho.HessianClientInterceptor . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.caucho.HessianClientInterceptor . prepare ( ) ; ITestBean org.springframework.remoting.caucho.ITestBean = ProxyFactory . getProxy ( ITestBean .class , org.springframework.remoting.caucho.HessianClientInterceptor ) ; assertEquals ( STRING , org.springframework.remoting.caucho.ITestBean . getName ( ) ) ; org.springframework.remoting.caucho.ITestBean . setName ( STRING ) ; assertEquals ( STRING , org.springframework.remoting.caucho.ITestBean . getName ( ) ) ; } finally { com.sun.net.httpserver.HttpServer . void ( java.lang.Integer . int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
