<METHOD_START> public void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) throws org.springframework.aop.framework.AopConfigException { Assert . notNull ( org.springframework.aop.framework.AdvisedSupport , STRING ) ; if ( org.springframework.aop.framework.AdvisedSupport . getAdvisors ( ) . length == NUMBER && org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) == AdvisedSupport . EMPTY_TARGET_SOURCE ) { throw new AopConfigException ( STRING ) ; } this . org.springframework.aop.framework.AdvisedSupport = org.springframework.aop.framework.AdvisedSupport ; this . org.springframework.aop.framework.CglibAopProxy.AdvisedDispatcher = new org.springframework.aop.framework.CglibAopProxy.AdvisedDispatcher ( this . org.springframework.aop.framework.AdvisedSupport ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object [] java.lang.Object[] , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { if ( java.lang.Object[] == null || java.lang.Class<?>[] == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( java.lang.Object[] . int != java.lang.Class<?>[] . int ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object[] . int + STRING + java.lang.Class<?>[] . int + STRING ) ; } this . java.lang.Object[] = java.lang.Object[] ; this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return java.lang.Object ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.ClassLoader java.lang.ClassLoader ) { if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) ) ; } try { java.lang.Class<?> < ? > java.lang.Class<?> = this . org.springframework.aop.framework.AdvisedSupport . getTargetClass ( ) ; Assert . state ( java.lang.Class<> != null , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> ; if ( ClassUtils . isCglibProxyClass ( java.lang.Class<> ) ) { java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<> . java.lang.Class<?>[] ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { this . org.springframework.aop.framework.AdvisedSupport . addInterface ( java.lang.Class<> ) ; } } void ( java.lang.Class<> , java.lang.ClassLoader ) ; Enhancer org.springframework.aop.framework.Enhancer = org.springframework.aop.framework.Enhancer ( ) ; if ( java.lang.ClassLoader != null ) { org.springframework.aop.framework.Enhancer . setClassLoader ( java.lang.ClassLoader ) ; if ( java.lang.ClassLoader instanceof SmartClassLoader && ( ( SmartClassLoader ) java.lang.ClassLoader ) . isClassReloadable ( java.lang.Class<> ) ) { org.springframework.aop.framework.Enhancer . setUseCache ( false ) ; } } org.springframework.aop.framework.Enhancer . setSuperclass ( java.lang.Class<> ) ; org.springframework.aop.framework.Enhancer . setInterfaces ( AopProxyUtils . completeProxiedInterfaces ( this . org.springframework.aop.framework.AdvisedSupport ) ) ; org.springframework.aop.framework.Enhancer . setNamingPolicy ( SpringNamingPolicy . INSTANCE ) ; org.springframework.aop.framework.Enhancer . setStrategy ( new org.springframework.aop.framework.CglibAopProxy.ClassLoaderAwareUndeclaredThrowableStrategy ( java.lang.ClassLoader ) ) ; Callback [] org.springframework.aop.framework.Callback[] = org.springframework.aop.framework.Callback[] ( java.lang.Class<> ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ callbacks . length ] ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.lang.Class<?>[] [ int ] = org.springframework.aop.framework.Callback[] [ int ] . getClass ( ) ; } org.springframework.aop.framework.Enhancer . setCallbackFilter ( new org.springframework.aop.framework.CglibAopProxy.ProxyCallbackFilter ( this . org.springframework.aop.framework.AdvisedSupport . getConfigurationOnlyCopy ( ) , this . java.util.Map<java.lang.String,java.lang.Integer> , this . int ) ) ; org.springframework.aop.framework.Enhancer . setCallbackTypes ( java.lang.Class<?>[] ) ; return java.lang.Object ( org.springframework.aop.framework.Enhancer , org.springframework.aop.framework.Callback[] ) ; } catch ( CodeGenerationException | java.lang.IllegalArgumentException java.lang.Object ) { throw new AopConfigException ( STRING + this . org.springframework.aop.framework.AdvisedSupport . getTargetClass ( ) + STRING + STRING , java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new AopConfigException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( Enhancer org.springframework.aop.framework.Enhancer , Callback [] org.springframework.aop.framework.Callback[] ) { org.springframework.aop.framework.Enhancer . setInterceptDuringConstruction ( false ) ; org.springframework.aop.framework.Enhancer . setCallbacks ( org.springframework.aop.framework.Callback[] ) ; return ( this . java.lang.Object[] != null ? org.springframework.aop.framework.Enhancer . create ( this . java.lang.Class<?>[] , this . java.lang.Object[] ) : org.springframework.aop.framework.Enhancer . create ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.aop.framework.Enhancer org.springframework.aop.framework.Enhancer ( ) { return new Enhancer ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.ClassLoader java.lang.ClassLoader ) { if ( org.springframework.aop.framework.Log . isInfoEnabled ( ) ) { synchronized ( java.util.Map<java.lang.Class<?>,java.lang.Boolean> ) { if ( ! java.util.Map<java.lang.Class<?>,java.lang.Boolean> . boolean ( java.lang.Class<> ) ) { void ( java.lang.Class<> , java.lang.ClassLoader ) ; java.util.Map<java.lang.Class<?>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> , java.lang.Boolean . java.lang.Boolean ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.ClassLoader java.lang.ClassLoader ) { if ( java.lang.Class<> != java.lang.Object .class ) { java.lang.reflect.Method [] java.lang.reflect.Method[] = java.lang.Class<> . java.lang.reflect.Method[] ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { int int = java.lang.reflect.Method . int ( ) ; if ( ! java.lang.reflect.Modifier . boolean ( int ) ) { if ( java.lang.reflect.Modifier . boolean ( int ) ) { org.springframework.aop.framework.Log . info ( STRING + java.lang.reflect.Method + STRING + STRING ) ; } else if ( ! java.lang.reflect.Modifier . boolean ( int ) && ! java.lang.reflect.Modifier . boolean ( int ) && ! java.lang.reflect.Modifier . boolean ( int ) && java.lang.ClassLoader != null && java.lang.Class<> . java.lang.ClassLoader ( ) != java.lang.ClassLoader ) { org.springframework.aop.framework.Log . info ( STRING + java.lang.reflect.Method + STRING + STRING + STRING ) ; } } } void ( java.lang.Class<> . java.lang.Class<? super > ( ) , java.lang.ClassLoader ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.aop.framework.Callback [] org.springframework.aop.framework.Callback[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { boolean boolean = this . org.springframework.aop.framework.AdvisedSupport . isExposeProxy ( ) ; boolean boolean = this . org.springframework.aop.framework.AdvisedSupport . isFrozen ( ) ; boolean boolean = this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . isStatic ( ) ; Callback org.springframework.aop.framework.Callback = new org.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor ( this . org.springframework.aop.framework.AdvisedSupport ) ; Callback org.springframework.aop.framework.Callback ; if ( boolean ) { org.springframework.aop.framework.Callback = boolean ? new org.springframework.aop.framework.CglibAopProxy.StaticUnadvisedExposedInterceptor ( this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . getTarget ( ) ) : new org.springframework.aop.framework.CglibAopProxy.DynamicUnadvisedExposedInterceptor ( this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) ) ; } else { org.springframework.aop.framework.Callback = boolean ? new org.springframework.aop.framework.CglibAopProxy.StaticUnadvisedInterceptor ( this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . getTarget ( ) ) : new org.springframework.aop.framework.CglibAopProxy.DynamicUnadvisedInterceptor ( this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) ) ; } Callback org.springframework.aop.framework.Callback = boolean ? new org.springframework.aop.framework.CglibAopProxy.StaticDispatcher ( this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . getTarget ( ) ) : new org.springframework.aop.framework.CglibAopProxy.SerializableNoOp ( ) ; Callback [] org.springframework.aop.framework.Callback[] = new Callback [] { org.springframework.aop.framework.Callback , org.springframework.aop.framework.Callback , new org.springframework.aop.framework.CglibAopProxy.SerializableNoOp ( ) , org.springframework.aop.framework.Callback , this . org.springframework.aop.framework.CglibAopProxy.AdvisedDispatcher , new org.springframework.aop.framework.CglibAopProxy.EqualsInterceptor ( this . org.springframework.aop.framework.AdvisedSupport ) , new org.springframework.aop.framework.CglibAopProxy.HashCodeInterceptor ( this . org.springframework.aop.framework.AdvisedSupport ) } ; Callback [] org.springframework.aop.framework.Callback[] ; if ( boolean && boolean ) { java.lang.reflect.Method [] java.lang.reflect.Method[] = java.lang.Class<> . java.lang.reflect.Method[] ( ) ; Callback [] org.springframework.aop.framework.Callback[] = new Callback [ java.lang.reflect.Method[] . int ] ; this . java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> <> ( java.lang.reflect.Method[] . int ) ; for ( int int = NUMBER ; int < java.lang.reflect.Method[] . int ; int ++ ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = this . org.springframework.aop.framework.AdvisedSupport . getInterceptorsAndDynamicInterceptionAdvice ( java.lang.reflect.Method[] [ int ] , java.lang.Class<> ) ; org.springframework.aop.framework.Callback[] [ int ] = new org.springframework.aop.framework.CglibAopProxy.FixedChainStaticTargetInterceptor ( java.util.List<java.lang.Object> , this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . getTarget ( ) , this . org.springframework.aop.framework.AdvisedSupport . getTargetClass ( ) ) ; this . java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.reflect.Method[] [ int ] . java.lang.String ( ) , int ) ; } org.springframework.aop.framework.Callback[] = new Callback [ mainCallbacks . length + fixedCallbacks . length ] ; java.lang.System . void ( org.springframework.aop.framework.Callback[] , NUMBER , org.springframework.aop.framework.Callback[] , NUMBER , mainCallbacks . length ) ; java.lang.System . void ( org.springframework.aop.framework.Callback[] , NUMBER , org.springframework.aop.framework.Callback[] , mainCallbacks . length , fixedCallbacks . length ) ; this . int = mainCallbacks . length ; } else { org.springframework.aop.framework.Callback[] = org.springframework.aop.framework.Callback[] ; } return org.springframework.aop.framework.Callback[] ; }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object ) { if ( java.lang.Object != null && java.lang.Object == java.lang.Object && ! RawTargetAccess .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { java.lang.Object = java.lang.Object ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; if ( java.lang.Object == null && java.lang.Class<> != java.lang.Void . java.lang.Class<java.lang.Void> && java.lang.Class<> . boolean ( ) ) { throw new AopInvocationException ( STRING + java.lang.reflect.Method ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.aop.framework.CglibAopProxy && AopProxyUtils . equalsInProxy ( this . org.springframework.aop.framework.AdvisedSupport , ( ( org.springframework.aop.framework.CglibAopProxy ) java.lang.Object ) . org.springframework.aop.framework.AdvisedSupport ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.aop.framework.CglibAopProxy .class . int ( ) * NUMBER + this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.aop.framework.MethodProxy ) throws java.lang.Throwable { java.lang.Object java.lang.Object = org.springframework.aop.framework.MethodProxy . invoke ( this . java.lang.Object , java.lang.Object[] ) ; return java.lang.Object ( java.lang.Object , this . java.lang.Object , java.lang.reflect.Method , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.aop.framework.MethodProxy ) throws java.lang.Throwable { java.lang.Object java.lang.Object = null ; try { java.lang.Object = AopContext . setCurrentProxy ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.MethodProxy . invoke ( this . java.lang.Object , java.lang.Object[] ) ; return java.lang.Object ( java.lang.Object , this . java.lang.Object , java.lang.reflect.Method , java.lang.Object ) ; } finally { AopContext . setCurrentProxy ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public void ( TargetSource org.springframework.aop.framework.TargetSource ) { this . org.springframework.aop.framework.TargetSource = org.springframework.aop.framework.TargetSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.aop.framework.MethodProxy ) throws java.lang.Throwable { java.lang.Object java.lang.Object = this . org.springframework.aop.framework.TargetSource . getTarget ( ) ; try { java.lang.Object java.lang.Object = org.springframework.aop.framework.MethodProxy . invoke ( java.lang.Object , java.lang.Object[] ) ; return java.lang.Object ( java.lang.Object , java.lang.Object , java.lang.reflect.Method , java.lang.Object ) ; } finally { this . org.springframework.aop.framework.TargetSource . releaseTarget ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public void ( TargetSource org.springframework.aop.framework.TargetSource ) { this . org.springframework.aop.framework.TargetSource = org.springframework.aop.framework.TargetSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.aop.framework.MethodProxy ) throws java.lang.Throwable { java.lang.Object java.lang.Object = null ; java.lang.Object java.lang.Object = this . org.springframework.aop.framework.TargetSource . getTarget ( ) ; try { java.lang.Object = AopContext . setCurrentProxy ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.MethodProxy . invoke ( java.lang.Object , java.lang.Object[] ) ; return java.lang.Object ( java.lang.Object , java.lang.Object , java.lang.reflect.Method , java.lang.Object ) ; } finally { AopContext . setCurrentProxy ( java.lang.Object ) ; this . org.springframework.aop.framework.TargetSource . releaseTarget ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { this . org.springframework.aop.framework.AdvisedSupport = org.springframework.aop.framework.AdvisedSupport ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return this . org.springframework.aop.framework.AdvisedSupport ; }  <METHOD_END>
<METHOD_START> public void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { this . org.springframework.aop.framework.AdvisedSupport = org.springframework.aop.framework.AdvisedSupport ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.aop.framework.MethodProxy ) { java.lang.Object java.lang.Object = java.lang.Object[] [ NUMBER ] ; if ( java.lang.Object == java.lang.Object ) { return true ; } if ( java.lang.Object instanceof Factory ) { Callback org.springframework.aop.framework.Callback = ( ( Factory ) java.lang.Object ) . getCallback ( int ) ; if ( ! ( org.springframework.aop.framework.Callback instanceof org.springframework.aop.framework.CglibAopProxy.EqualsInterceptor ) ) { return false ; } AdvisedSupport org.springframework.aop.framework.AdvisedSupport = ( ( org.springframework.aop.framework.CglibAopProxy.EqualsInterceptor ) org.springframework.aop.framework.Callback ) . org.springframework.aop.framework.AdvisedSupport ; return AopProxyUtils . equalsInProxy ( this . org.springframework.aop.framework.AdvisedSupport , org.springframework.aop.framework.AdvisedSupport ) ; } else { return false ; } }  <METHOD_END>
<METHOD_START> public void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { this . org.springframework.aop.framework.AdvisedSupport = org.springframework.aop.framework.AdvisedSupport ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.aop.framework.MethodProxy ) { return org.springframework.aop.framework.CglibAopProxy .class . int ( ) * NUMBER + this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ; this . java.lang.Object = java.lang.Object ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.aop.framework.MethodProxy ) throws java.lang.Throwable { MethodInvocation org.springframework.aop.framework.MethodInvocation = new org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation ( java.lang.Object , this . java.lang.Object , java.lang.reflect.Method , java.lang.Object[] , this . java.lang.Class<> , this . java.util.List<java.lang.Object> , org.springframework.aop.framework.MethodProxy ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.MethodInvocation . proceed ( ) ; java.lang.Object = java.lang.Object ( java.lang.Object , this . java.lang.Object , java.lang.reflect.Method , java.lang.Object ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { this . org.springframework.aop.framework.AdvisedSupport = org.springframework.aop.framework.AdvisedSupport ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.aop.framework.MethodProxy ) throws java.lang.Throwable { java.lang.Object java.lang.Object = null ; boolean boolean = false ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; java.lang.Object java.lang.Object = null ; try { if ( this . org.springframework.aop.framework.AdvisedSupport . exposeProxy ) { java.lang.Object = AopContext . setCurrentProxy ( java.lang.Object ) ; boolean = true ; } java.lang.Object = java.lang.Object ( ) ; if ( java.lang.Object != null ) { java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = this . org.springframework.aop.framework.AdvisedSupport . getInterceptorsAndDynamicInterceptionAdvice ( java.lang.reflect.Method , java.lang.Class<> ) ; java.lang.Object java.lang.Object ; if ( java.util.List<java.lang.Object> . boolean ( ) && java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { java.lang.Object [] java.lang.Object[] = AopProxyUtils . adaptArgumentsIfNecessary ( java.lang.reflect.Method , java.lang.Object[] ) ; java.lang.Object = org.springframework.aop.framework.MethodProxy . invoke ( java.lang.Object , java.lang.Object[] ) ; } else { java.lang.Object = new org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation ( java.lang.Object , java.lang.Object , java.lang.reflect.Method , java.lang.Object[] , java.lang.Class<> , java.util.List<java.lang.Object> , org.springframework.aop.framework.MethodProxy ) . proceed ( ) ; } java.lang.Object = java.lang.Object ( java.lang.Object , java.lang.Object , java.lang.reflect.Method , java.lang.Object ) ; return java.lang.Object ; } finally { if ( java.lang.Object != null ) { void ( java.lang.Object ) ; } if ( boolean ) { AopContext . setCurrentProxy ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor && this . org.springframework.aop.framework.AdvisedSupport . equals ( ( ( org.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor ) java.lang.Object ) . org.springframework.aop.framework.AdvisedSupport ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.aop.framework.AdvisedSupport . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) java.lang.Exception { return this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . getTarget ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) throws java.lang.Exception { this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . releaseTarget ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Class<?> < ? > java.lang.Class<?> , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> , MethodProxy org.springframework.aop.framework.MethodProxy ) { super( java.lang.Object , java.lang.Object , java.lang.reflect.Method , java.lang.Object[] , java.lang.Class<> , java.util.List<java.lang.Object> ); this . org.springframework.aop.framework.MethodProxy = org.springframework.aop.framework.MethodProxy ; this . boolean = java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) java.lang.Throwable { if ( this . boolean ) { return this . org.springframework.aop.framework.MethodProxy . invoke ( this . target , this . arguments ) ; } else { return super. invokeJoinpoint ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport , java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> , int int ) { this . org.springframework.aop.framework.AdvisedSupport = org.springframework.aop.framework.AdvisedSupport ; this . java.util.Map<java.lang.String,java.lang.Integer> = java.util.Map<java.lang.String,java.lang.Integer> ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.reflect.Method java.lang.reflect.Method ) { if ( AopUtils . isFinalizeMethod ( java.lang.reflect.Method ) ) { org.springframework.aop.framework.Log . debug ( STRING ) ; return int ; } if ( ! this . org.springframework.aop.framework.AdvisedSupport . isOpaque ( ) && java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( ) && java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( Advised .class ) ) { if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.reflect.Method ) ; } return int ; } if ( AopUtils . isEqualsMethod ( java.lang.reflect.Method ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.reflect.Method ) ; return int ; } if ( AopUtils . isHashCodeMethod ( java.lang.reflect.Method ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.reflect.Method ) ; return int ; } java.lang.Class<?> < ? > java.lang.Class<?> = this . org.springframework.aop.framework.AdvisedSupport . getTargetClass ( ) ; java.util.List<?> < ? > java.util.List<?> = this . org.springframework.aop.framework.AdvisedSupport . getInterceptorsAndDynamicInterceptionAdvice ( java.lang.reflect.Method , java.lang.Class<> ) ; boolean boolean = ! java.util.List<> . boolean ( ) ; boolean boolean = this . org.springframework.aop.framework.AdvisedSupport . isExposeProxy ( ) ; boolean boolean = this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . isStatic ( ) ; boolean boolean = this . org.springframework.aop.framework.AdvisedSupport . isFrozen ( ) ; if ( boolean || ! boolean ) { if ( boolean ) { if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.reflect.Method ) ; } return int ; } java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; if ( boolean && boolean && this . java.util.Map<java.lang.String,java.lang.Integer> . boolean ( java.lang.String ) ) { if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.reflect.Method ) ; } int int = this . java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String ) ; return ( int + this . int ) ; } else { if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.reflect.Method ) ; } return int ; } } else { if ( boolean || ! boolean ) { return int ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; if ( java.lang.Class<> == java.lang.Class<> ) { if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.reflect.Method + STRING ) ; } return int ; } else if ( java.lang.Class<> . boolean ( ) || ! java.lang.Class<> . boolean ( java.lang.Class<> ) ) { if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.reflect.Method + STRING ) ; } return int ; } else { if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.reflect.Method + STRING + STRING ) ; } return int ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.aop.framework.CglibAopProxy.ProxyCallbackFilter ) ) { return false ; } org.springframework.aop.framework.CglibAopProxy.ProxyCallbackFilter org.springframework.aop.framework.CglibAopProxy.ProxyCallbackFilter = ( org.springframework.aop.framework.CglibAopProxy.ProxyCallbackFilter ) java.lang.Object ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = org.springframework.aop.framework.CglibAopProxy.ProxyCallbackFilter . org.springframework.aop.framework.AdvisedSupport ; if ( this . org.springframework.aop.framework.AdvisedSupport == null || org.springframework.aop.framework.AdvisedSupport == null ) { return false ; } if ( this . org.springframework.aop.framework.AdvisedSupport . isFrozen ( ) != org.springframework.aop.framework.AdvisedSupport . isFrozen ( ) ) { return false ; } if ( this . org.springframework.aop.framework.AdvisedSupport . isExposeProxy ( ) != org.springframework.aop.framework.AdvisedSupport . isExposeProxy ( ) ) { return false ; } if ( this . org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . isStatic ( ) != org.springframework.aop.framework.AdvisedSupport . getTargetSource ( ) . isStatic ( ) ) { return false ; } if ( ! AopProxyUtils . equalsProxiedInterfaces ( this . org.springframework.aop.framework.AdvisedSupport , org.springframework.aop.framework.AdvisedSupport ) ) { return false ; } Advisor [] org.springframework.aop.framework.Advisor[] = this . org.springframework.aop.framework.AdvisedSupport . getAdvisors ( ) ; Advisor [] org.springframework.aop.framework.Advisor[] = org.springframework.aop.framework.AdvisedSupport . getAdvisors ( ) ; if ( thisAdvisors . length != thatAdvisors . length ) { return false ; } for ( int int = NUMBER ; int < thisAdvisors . length ; int ++ ) { Advisor org.springframework.aop.framework.Advisor = org.springframework.aop.framework.Advisor[] [ int ] ; Advisor org.springframework.aop.framework.Advisor = org.springframework.aop.framework.Advisor[] [ int ] ; if ( ! boolean ( org.springframework.aop.framework.Advisor , org.springframework.aop.framework.Advisor ) ) { return false ; } if ( ! boolean ( org.springframework.aop.framework.Advisor , org.springframework.aop.framework.Advisor ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Advisor org.springframework.aop.framework.Advisor , Advisor org.springframework.aop.framework.Advisor ) { Advice org.springframework.aop.framework.Advice = org.springframework.aop.framework.Advisor . getAdvice ( ) ; Advice org.springframework.aop.framework.Advice = org.springframework.aop.framework.Advisor . getAdvice ( ) ; if ( org.springframework.aop.framework.Advice == null || org.springframework.aop.framework.Advice == null ) { return ( org.springframework.aop.framework.Advice == org.springframework.aop.framework.Advice ) ; } return ( org.springframework.aop.framework.Advice . getClass ( ) == org.springframework.aop.framework.Advice . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Advisor org.springframework.aop.framework.Advisor , Advisor org.springframework.aop.framework.Advisor ) { return ( ! ( org.springframework.aop.framework.Advisor instanceof PointcutAdvisor ) || ( org.springframework.aop.framework.Advisor instanceof PointcutAdvisor && ObjectUtils . nullSafeEquals ( ( ( PointcutAdvisor ) org.springframework.aop.framework.Advisor ) . getPointcut ( ) , ( ( PointcutAdvisor ) org.springframework.aop.framework.Advisor ) . getPointcut ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; Advisor [] org.springframework.aop.framework.Advisor[] = this . org.springframework.aop.framework.AdvisedSupport . getAdvisors ( ) ; for ( Advisor org.springframework.aop.framework.Advisor : org.springframework.aop.framework.Advisor[] ) { Advice org.springframework.aop.framework.Advice = org.springframework.aop.framework.Advisor . getAdvice ( ) ; if ( org.springframework.aop.framework.Advice != null ) { int = NUMBER * int + org.springframework.aop.framework.Advice . getClass ( ) . hashCode ( ) ; } } int = NUMBER * int + ( this . org.springframework.aop.framework.AdvisedSupport . isFrozen ( ) ? NUMBER : NUMBER ) ; int = NUMBER * int + ( this . org.springframework.aop.framework.AdvisedSupport . isExposeProxy ( ) ? NUMBER : NUMBER ) ; int = NUMBER * int + ( this . org.springframework.aop.framework.AdvisedSupport . isOptimize ( ) ? NUMBER : NUMBER ) ; int = NUMBER * int + ( this . org.springframework.aop.framework.AdvisedSupport . isOpaque ( ) ? NUMBER : NUMBER ) ; return int ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.reflect.UndeclaredThrowableException .class ); this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( ClassGenerator org.springframework.aop.framework.ClassGenerator ) throws java.lang.Exception { if ( this . java.lang.ClassLoader == null ) { return super. generate ( org.springframework.aop.framework.ClassGenerator ) ; } java.lang.Thread java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; java.lang.ClassLoader java.lang.ClassLoader ; try { java.lang.ClassLoader = java.lang.Thread . java.lang.ClassLoader ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return super. generate ( org.springframework.aop.framework.ClassGenerator ) ; } boolean boolean = ! this . java.lang.ClassLoader . boolean ( java.lang.ClassLoader ) ; if ( boolean ) { java.lang.Thread . void ( this . java.lang.ClassLoader ) ; } try { return super. generate ( org.springframework.aop.framework.ClassGenerator ) ; } finally { if ( boolean ) { java.lang.Thread . void ( java.lang.ClassLoader ) ; } } }  <METHOD_END>
