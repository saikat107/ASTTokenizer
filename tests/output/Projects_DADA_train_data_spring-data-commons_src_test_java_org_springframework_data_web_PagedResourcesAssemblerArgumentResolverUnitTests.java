<METHOD_START> @ Before public void void ( ) { WebTestUtils . initWebTest ( ) ; HateoasPageableHandlerMethodArgumentResolver org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver = new HateoasPageableHandlerMethodArgumentResolver ( ) ; this . org.springframework.data.web.PagedResourcesAssemblerArgumentResolver = new PagedResourcesAssemblerArgumentResolver ( org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.PagedResourcesAssemblerArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , PagedResourcesAssembler .class ) ; java.lang.Object java.lang.Object = org.springframework.data.web.PagedResourcesAssemblerArgumentResolver . resolveArgument ( new MethodParameter ( java.lang.reflect.Method , NUMBER ) , null , null , null ) ; assertThat ( java.lang.Object ) . isInstanceOf ( PagedResourcesAssembler .class ) ; assertThat ( java.lang.Object ) . isNotInstanceOf ( MethodParameterAwarePagedResourcesAssembler .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.PagedResourcesAssemblerArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , PagedResourcesAssembler .class , Pageable .class ) ; void ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.PagedResourcesAssemblerArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , PagedResourcesAssembler .class , Pageable .class ) ; void ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.PagedResourcesAssemblerArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , PagedResourcesAssembler .class , Pageable .class ) ; void ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.PagedResourcesAssemblerArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , PagedResourcesAssembler .class , Pageable .class , Pageable .class ) ; void ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.PagedResourcesAssemblerArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , PagedResourcesAssembler .class ) ; java.lang.Object java.lang.Object = org.springframework.data.web.PagedResourcesAssemblerArgumentResolver . resolveArgument ( new MethodParameter ( java.lang.reflect.Method , NUMBER ) , null , null , null ) ; assertThat ( java.lang.Object ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.PagedResourcesAssemblerArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , PagedResourcesAssembler .class ) ; MethodParameter org.springframework.data.web.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) { public java . lang . java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.web.PagedResourcesAssemblerArgumentResolverUnitTests.SubController .class ; } } ; java.lang.Object java.lang.Object = org.springframework.data.web.PagedResourcesAssemblerArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , null , null ) ; assertThat ( java.lang.Object ) . isInstanceOf ( PagedResourcesAssembler .class ) ; UriComponents org.springframework.data.web.UriComponents = ( UriComponents ) ReflectionTestUtils . getField ( java.lang.Object , STRING ) ; assertThat ( org.springframework.data.web.UriComponents . getPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java . lang . java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.web.PagedResourcesAssemblerArgumentResolverUnitTests.SubController .class ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.Method java.lang.reflect.Method , int int ) throws java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.data.web.PagedResourcesAssemblerArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , null , null ) ; void ( java.lang.Object , new MethodParameter ( java.lang.reflect.Method , int ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.data.web.MethodParameter ) { assertThat ( java.lang.Object ) . isInstanceOf ( MethodParameterAwarePagedResourcesAssembler .class ) ; MethodParameterAwarePagedResourcesAssembler < ? > org.springframework.data.web.MethodParameterAwarePagedResourcesAssembler<?> = ( MethodParameterAwarePagedResourcesAssembler < ? > ) java.lang.Object ; assertThat ( org.springframework.data.web.MethodParameterAwarePagedResourcesAssembler<> . getMethodParameter ( ) ) . isEqualTo ( org.springframework.data.web.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.PagedResourcesAssemblerArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( java.lang.String , PagedResourcesAssembler .class , Pageable .class , Pageable .class ) ; org.springframework.data.web.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.web.PagedResourcesAssemblerArgumentResolver . resolveArgument ( new MethodParameter ( java.lang.reflect.Method , NUMBER ) , null , null , null ) ; }  <METHOD_END>
<METHOD_START> void void ( PagedResourcesAssembler < java.lang.Object > org.springframework.data.web.PagedResourcesAssembler<java.lang.Object> );  <METHOD_END>
<METHOD_START> void void ( PagedResourcesAssembler < java.lang.Object > org.springframework.data.web.PagedResourcesAssembler<java.lang.Object> , Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ Qualifier ( STRING ) PagedResourcesAssembler < java.lang.Object > org.springframework.data.web.PagedResourcesAssembler<java.lang.Object> , Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ Qualifier ( STRING ) PagedResourcesAssembler < java.lang.Object > org.springframework.data.web.PagedResourcesAssembler<java.lang.Object> , @ Qualifier ( STRING ) Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ Qualifier ( STRING ) PagedResourcesAssembler < java.lang.Object > org.springframework.data.web.PagedResourcesAssembler<java.lang.Object> , @ Qualifier ( STRING ) Pageable org.springframework.data.web.Pageable , Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( PagedResourcesAssembler < java.lang.Object > org.springframework.data.web.PagedResourcesAssembler<java.lang.Object> , Pageable org.springframework.data.web.Pageable , Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ Qualifier ( STRING ) PagedResourcesAssembler < java.lang.Object > org.springframework.data.web.PagedResourcesAssembler<java.lang.Object> , Pageable org.springframework.data.web.Pageable , Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ Qualifier ( STRING ) PagedResourcesAssembler < java.lang.Object > org.springframework.data.web.PagedResourcesAssembler<java.lang.Object> , Pageable org.springframework.data.web.Pageable , @ Qualifier ( STRING ) Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) void void ( PagedResourcesAssembler < java.lang.Object > org.springframework.data.web.PagedResourcesAssembler<java.lang.Object> );  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) java.lang.Object java.lang.Object ( PagedResourcesAssembler < java.lang.Object > org.springframework.data.web.PagedResourcesAssembler<java.lang.Object> );  <METHOD_END>
