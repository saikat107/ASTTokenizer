<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.health.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.actuate.health.ExpectedException . expectMessage ( STRING ) ; new Health . Health ( null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = Health . status ( Status . UP ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = new Health . Health ( Status . UP , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = new Health . Health ( Status . UP , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; Health org.springframework.boot.actuate.health.Health = new Health . Health ( Status . UP , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; Health org.springframework.boot.actuate.health.Health = new Health . Health ( Status . UP ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health ) . isEqualTo ( org.springframework.boot.actuate.health.Health ) ; assertThat ( org.springframework.boot.actuate.health.Health ) . isEqualTo ( org.springframework.boot.actuate.health.Health ) ; assertThat ( org.springframework.boot.actuate.health.Health ) . isNotEqualTo ( org.springframework.boot.actuate.health.Health ) ; assertThat ( org.springframework.boot.actuate.health.Health . hashCode ( ) ) . isEqualTo ( org.springframework.boot.actuate.health.Health . hashCode ( ) ) ; assertThat ( org.springframework.boot.actuate.health.Health . hashCode ( ) ) . isEqualTo ( org.springframework.boot.actuate.health.Health . hashCode ( ) ) ; assertThat ( org.springframework.boot.actuate.health.Health . hashCode ( ) ) . isNotEqualTo ( org.springframework.boot.actuate.health.Health . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( STRING ) ; Health org.springframework.boot.actuate.health.Health = new Health . Health ( Status . UP , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . withException ( java.lang.RuntimeException ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = new Health . Health ( Status . UP , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . withDetail ( STRING , STRING ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = new Health . Health ( ) . unknown ( ) . withDetail ( STRING , STRING ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UNKNOWN ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = new Health . Health ( ) . unknown ( ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UNKNOWN ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = new Health . Health ( ) . up ( ) . withDetail ( STRING , STRING ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = new Health . Health ( ) . up ( ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( STRING ) ; Health org.springframework.boot.actuate.health.Health = Health . down ( java.lang.RuntimeException ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = Health . down ( ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = Health . outOfService ( ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . OUT_OF_SERVICE ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = Health . status ( STRING ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Health org.springframework.boot.actuate.health.Health = Health . status ( Status . UP ) . build ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
