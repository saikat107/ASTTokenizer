<METHOD_START> @ Test public void void ( ) { Assert . state ( true , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . state ( false , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . state ( true , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . state ( false , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . state ( false , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . isTrue ( true , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isTrue ( false , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . isTrue ( true , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isTrue ( false , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . isTrue ( false , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . isNull ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . isNull ( null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isNull ( STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . isNull ( STRING , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . notNull ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . notNull ( STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notNull ( null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . notNull ( null , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . hasLength ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . hasLength ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . hasLength ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . hasLength ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . hasLength ( STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . hasLength ( STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . hasLength ( STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . hasLength ( null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . hasLength ( null , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . hasText ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . hasText ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . hasText ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . hasText ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . hasText ( STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . hasText ( STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . hasText ( STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . hasText ( null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . hasText ( null , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . doesNotContain ( null , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . doesNotContain ( STRING , null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . doesNotContain ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . doesNotContain ( null , null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . doesNotContain ( STRING , STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . doesNotContain ( null , STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . doesNotContain ( STRING , null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . doesNotContain ( null , null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . doesNotContain ( STRING , STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . doesNotContain ( STRING , STRING , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . notEmpty ( new java.lang.String [] { STRING } , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( new java.lang.String [] {} , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( ( java.lang.Object [] ) null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . notEmpty ( new java.lang.String [] { STRING } , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( new java.lang.String [] {} , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( ( java.lang.Object [] ) null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . notEmpty ( new java.lang.String [] {} , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . noNullElements ( new java.lang.String [] { STRING } , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . noNullElements ( new java.lang.String [] {} , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . noNullElements ( new java.lang.String [] { STRING } , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . noNullElements ( new java.lang.String [] {} , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . noNullElements ( ( java.lang.Object [] ) null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . noNullElements ( new java.lang.String [] { STRING , null , STRING } , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . noNullElements ( new java.lang.String [] { STRING , null , STRING } , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . notEmpty ( java.util.List<java.lang.String> ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( java.util.List<java.lang.Object> ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( ( java.util.Collection<?> < ? > ) null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . notEmpty ( java.util.List<java.lang.String> ( STRING ) , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( java.util.List<java.lang.Object> ( ) , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( ( java.util.Collection<?> < ? > ) null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . notEmpty ( java.util.List<java.lang.Object> ( ) , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . notEmpty ( java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( ( java.util.Map<?,?> < ? , ? > ) null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( java.util.Map<java.lang.Object,java.lang.Object> ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . notEmpty ( java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( java.util.Map<java.lang.Object,java.lang.Object> ( ) , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . notEmpty ( ( java.util.Map<?,?> < ? , ? > ) null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( equalTo ( null ) ) ; Assert . notEmpty ( java.util.Map<java.lang.Object,java.lang.Object> ( ) , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . isInstanceOf ( java.lang.String .class , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isInstanceOf ( null , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isInstanceOf ( java.lang.String .class , null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isInstanceOf ( java.lang.String .class , NUMBER , ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isInstanceOf ( java.lang.String .class , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isInstanceOf ( java.lang.String .class , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isInstanceOf ( java.lang.String .class , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . isInstanceOf ( java.lang.String .class , STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isInstanceOf ( null , STRING , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isInstanceOf ( java.lang.String .class , null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isInstanceOf ( java.lang.String .class , NUMBER , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isInstanceOf ( java.lang.String .class , NUMBER , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . isAssignable ( java.lang.Number .class , java.lang.Integer .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isAssignable ( null , java.lang.Integer .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isAssignable ( java.lang.Integer .class , null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isAssignable ( java.lang.String .class , java.lang.Integer .class , ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isAssignable ( java.lang.String .class , java.lang.Integer .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isAssignable ( java.lang.String .class , java.lang.Integer .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isAssignable ( java.lang.String .class , java.lang.Integer .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . isAssignable ( java.lang.Number .class , java.lang.Integer .class , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isAssignable ( null , java.lang.Integer .class , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isAssignable ( java.lang.Integer .class , null , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isAssignable ( java.lang.String .class , java.lang.Integer .class , ( java.util.function.Supplier<java.lang.String> < java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . isAssignable ( java.lang.String .class , java.lang.Integer .class , ( ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . state ( true , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.util.ExpectedException . expectMessage ( STRING ) ; Assert . state ( false , STRING ) ; }  <METHOD_END>
