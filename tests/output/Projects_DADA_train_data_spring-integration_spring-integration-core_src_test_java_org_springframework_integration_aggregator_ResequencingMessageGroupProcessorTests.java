<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { Message org.springframework.integration.aggregator.Message = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . build ( ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> = new java.util.ArrayList<org.springframework.integration.aggregator.Message<?>> < Message < ? > > ( ) ; Message org.springframework.integration.aggregator.Message = MessageBuilder . fromMessage ( org.springframework.integration.aggregator.Message ) . setSequenceNumber ( NUMBER ) . build ( ) ; Message org.springframework.integration.aggregator.Message = MessageBuilder . fromMessage ( org.springframework.integration.aggregator.Message ) . setSequenceNumber ( NUMBER ) . build ( ) ; Message org.springframework.integration.aggregator.Message = MessageBuilder . fromMessage ( org.springframework.integration.aggregator.Message ) . setSequenceNumber ( NUMBER ) . build ( ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( org.springframework.integration.aggregator.Message ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( org.springframework.integration.aggregator.Message ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( org.springframework.integration.aggregator.Message ) ; SimpleMessageGroup org.springframework.integration.aggregator.SimpleMessageGroup = new SimpleMessageGroup ( java.util.List<org.springframework.integration.aggregator.Message<?>> , STRING ) ; java.util.List<org.springframework.integration.aggregator.Message> < Message > java.util.List<org.springframework.integration.aggregator.Message> = ( java.util.List<org.springframework.integration.aggregator.Message> < Message > ) org.springframework.integration.aggregator.ResequencingMessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.SimpleMessageGroup ) ; assertThat ( java.util.List<org.springframework.integration.aggregator.Message> , hasItems ( org.springframework.integration.aggregator.Message , org.springframework.integration.aggregator.Message , org.springframework.integration.aggregator.Message ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { Message org.springframework.integration.aggregator.Message = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . setSequenceSize ( NUMBER ) . build ( ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> = new java.util.ArrayList<org.springframework.integration.aggregator.Message<?>> < Message < ? > > ( ) ; Message org.springframework.integration.aggregator.Message = MessageBuilder . fromMessage ( org.springframework.integration.aggregator.Message ) . setSequenceNumber ( NUMBER ) . build ( ) ; Message org.springframework.integration.aggregator.Message = MessageBuilder . fromMessage ( org.springframework.integration.aggregator.Message ) . setSequenceNumber ( NUMBER ) . build ( ) ; Message org.springframework.integration.aggregator.Message = MessageBuilder . fromMessage ( org.springframework.integration.aggregator.Message ) . setSequenceNumber ( NUMBER ) . build ( ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( org.springframework.integration.aggregator.Message ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( org.springframework.integration.aggregator.Message ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( org.springframework.integration.aggregator.Message ) ; SimpleMessageGroup org.springframework.integration.aggregator.SimpleMessageGroup = new SimpleMessageGroup ( java.util.List<org.springframework.integration.aggregator.Message<?>> , STRING ) ; java.util.List<org.springframework.integration.aggregator.Message> < Message > java.util.List<org.springframework.integration.aggregator.Message> = ( java.util.List<org.springframework.integration.aggregator.Message> < Message > ) org.springframework.integration.aggregator.ResequencingMessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.SimpleMessageGroup ) ; assertThat ( java.util.List<org.springframework.integration.aggregator.Message> , hasItems ( org.springframework.integration.aggregator.Message ) ) ; assertThat ( java.util.List<org.springframework.integration.aggregator.Message> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
