<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.annotation.configuration.ConfigurationClassAspectIntegrationTests.AspectConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.annotation.configuration.ConfigurationClassAspectIntegrationTests.ConfigurationWithAspect .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { DefaultListableBeanFactory org.springframework.context.annotation.configuration.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , org.springframework.context.annotation.configuration.ConfigurationClassAspectIntegrationTests .class ) ) ; GenericApplicationContext org.springframework.context.annotation.configuration.GenericApplicationContext = new GenericApplicationContext ( org.springframework.context.annotation.configuration.DefaultListableBeanFactory ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . addBeanFactoryPostProcessor ( new ConfigurationClassPostProcessor ( ) ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; org.springframework.context.annotation.configuration.GenericApplicationContext . refresh ( ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.GenericApplicationContext . getBean ( STRING , TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; org.springframework.context.annotation.configuration.TestBean . absquatulate ( ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.configuration.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.configuration.ConfigurationClassAspectIntegrationTests.Application .class , org.springframework.context.annotation.configuration.ConfigurationClassAspectIntegrationTests.CountingAspect .class ) ; org.springframework.context.annotation.configuration.ApplicationContext . getBeansOfType ( java.lang.Runnable .class ) . forEach ( ( k , v ) -> v . run ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( TestBean org.springframework.context.annotation.configuration.TestBean ) { org.springframework.context.annotation.configuration.TestBean . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ConfigurationClassAspectIntegrationTests.NameChangingAspect org.springframework.context.annotation.configuration.ConfigurationClassAspectIntegrationTests.NameChangingAspect ( ) { return new org.springframework.context.annotation.configuration.ConfigurationClassAspectIntegrationTests.NameChangingAspect ( ) ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( TestBean org.springframework.context.annotation.configuration.TestBean ) { org.springframework.context.annotation.configuration.TestBean . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean java.lang.Runnable java.lang.Runnable ( ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) {				} } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {				}  <METHOD_END>
<METHOD_START> @ Bean java.lang.Runnable java.lang.Runnable ( ) { return ( ) {			} ; }  <METHOD_END>
<METHOD_START> @ After ( STRING ) public void void ( JoinPoint org.springframework.context.annotation.configuration.JoinPoint ) { int ++ ; }  <METHOD_END>
