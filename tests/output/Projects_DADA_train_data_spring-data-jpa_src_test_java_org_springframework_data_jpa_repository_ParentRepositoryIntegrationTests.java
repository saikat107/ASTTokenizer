<METHOD_START> @ Before public void void ( ) { org.springframework.data.jpa.repository.ParentRepository . save ( new Parent ( ) . add ( new Child ( ) ) ) ; org.springframework.data.jpa.repository.ParentRepository . save ( new Parent ( ) . add ( new Child ( ) ) . add ( new Child ( ) ) ) ; org.springframework.data.jpa.repository.ParentRepository . save ( new Parent ( ) . add ( new Child ( ) ) ) ; org.springframework.data.jpa.repository.ParentRepository . save ( new Parent ( ) ) ; org.springframework.data.jpa.repository.ParentRepository . flush ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Page < Parent > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> = org.springframework.data.jpa.repository.ParentRepository . findAll ( new Specification < Parent > ( ) { public org.springframework.data.jpa.repository.Predicate org.springframework.data.jpa.repository.Predicate ( Root < Parent > org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.Parent> , CriteriaQuery < ? > org.springframework.data.jpa.repository.CriteriaQuery<?> , CriteriaBuilder org.springframework.data.jpa.repository.CriteriaBuilder ) { Path < java.util.Set<org.springframework.data.jpa.repository.Child> < Child > > org.springframework.data.jpa.repository.Path<java.util.Set<org.springframework.data.jpa.repository.Child>> = org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.Parent> . get ( STRING ) ; org.springframework.data.jpa.repository.CriteriaQuery<> . distinct ( true ) ; return org.springframework.data.jpa.repository.CriteriaBuilder . isNotEmpty ( org.springframework.data.jpa.repository.Path<java.util.Set<org.springframework.data.jpa.repository.Child>> ) ; } } , PageRequest . of ( NUMBER , NUMBER , Sort . by ( Sort . Direction . ASC , STRING ) ) ) ; java.util.List<org.springframework.data.jpa.repository.Parent> < Parent > java.util.List<org.springframework.data.jpa.repository.Parent> = org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> . getContent ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.Parent> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> . getSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> . getNumber ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> . getTotalElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> . getTotalPages ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.Predicate org.springframework.data.jpa.repository.Predicate ( Root < Parent > org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.Parent> , CriteriaQuery < ? > org.springframework.data.jpa.repository.CriteriaQuery<?> , CriteriaBuilder org.springframework.data.jpa.repository.CriteriaBuilder ) { Path < java.util.Set<org.springframework.data.jpa.repository.Child> < Child > > org.springframework.data.jpa.repository.Path<java.util.Set<org.springframework.data.jpa.repository.Child>> = org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.Parent> . get ( STRING ) ; org.springframework.data.jpa.repository.CriteriaQuery<> . distinct ( true ) ; return org.springframework.data.jpa.repository.CriteriaBuilder . isNotEmpty ( org.springframework.data.jpa.repository.Path<java.util.Set<org.springframework.data.jpa.repository.Child>> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Page < Parent > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> = org.springframework.data.jpa.repository.ParentRepository . findAll ( new Specification < Parent > ( ) { public org.springframework.data.jpa.repository.Predicate org.springframework.data.jpa.repository.Predicate ( Root < Parent > org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.Parent> , CriteriaQuery < ? > org.springframework.data.jpa.repository.CriteriaQuery<?> , CriteriaBuilder org.springframework.data.jpa.repository.CriteriaBuilder ) { org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.Parent> . join ( STRING ) ; org.springframework.data.jpa.repository.CriteriaQuery<> . distinct ( true ) ; return org.springframework.data.jpa.repository.CriteriaBuilder . isNotEmpty ( org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.Parent> .< java.util.Set<org.springframework.data.jpa.repository.Child> < Child > > get ( STRING ) ) ; } } , PageRequest . of ( NUMBER , NUMBER , Sort . by ( Sort . Direction . ASC , STRING ) ) ) ; java.util.List<org.springframework.data.jpa.repository.Parent> < Parent > java.util.List<org.springframework.data.jpa.repository.Parent> = org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> . getContent ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.Parent> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> . getSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> . getNumber ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> . getTotalElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.Parent> . getTotalPages ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.Predicate org.springframework.data.jpa.repository.Predicate ( Root < Parent > org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.Parent> , CriteriaQuery < ? > org.springframework.data.jpa.repository.CriteriaQuery<?> , CriteriaBuilder org.springframework.data.jpa.repository.CriteriaBuilder ) { org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.Parent> . join ( STRING ) ; org.springframework.data.jpa.repository.CriteriaQuery<> . distinct ( true ) ; return org.springframework.data.jpa.repository.CriteriaBuilder . isNotEmpty ( org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.Parent> .< java.util.Set<org.springframework.data.jpa.repository.Child> < Child > > get ( STRING ) ) ; }  <METHOD_END>
