<METHOD_START> @ Before public void void ( ) { org.springframework.integration.config.xml.ConfigurableApplicationContext . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.config.xml.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) . getPayload ( ) . equals ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.config.xml.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) . getPayload ( ) . equals ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.config.xml.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) . getPayload ( ) . equals ( NUMBER ) ) ; assertNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.config.xml.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) . getPayload ( ) . equals ( NUMBER ) ) ; assertNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.config.xml.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = this . org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; java.util.Collection<org.springframework.integration.config.xml.Recipient> < Recipient > java.util.Collection<org.springframework.integration.config.xml.Recipient> = ( java.util.Collection<org.springframework.integration.config.xml.Recipient> < Recipient > ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ; assertEquals ( org.springframework.integration.config.xml.PollableChannel , java.util.Collection<org.springframework.integration.config.xml.Recipient> . iterator ( ) . next ( ) . getChannel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.config.xml.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , java.util.Map<java.lang.String,java.lang.String> ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; org.springframework.integration.config.xml.Message<?> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) . getPayload ( ) . equals ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.config.xml.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.config.xml.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; org.springframework.integration.config.xml.MessagingTemplate . convertAndSend ( org.springframework.integration.config.xml.MessageChannel , STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = new GenericMessage < java.lang.Integer > ( NUMBER ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) . getPayload ( ) . equals ( NUMBER ) ) ; }  <METHOD_END>
