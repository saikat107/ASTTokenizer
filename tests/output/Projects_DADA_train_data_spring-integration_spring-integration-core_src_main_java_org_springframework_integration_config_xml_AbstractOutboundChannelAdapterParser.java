<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.xml.AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext , java.lang.String java.lang.String ) { if ( org.springframework.integration.config.xml.ParserContext . isNested ( ) ) { if ( java.lang.String != null ) { java.lang.String java.lang.String = IntegrationNamespaceUtils . createElementDescription ( org.w3c.dom.Element ) ; org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING + STRING , org.w3c.dom.Element ) ; } AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition = this . org.springframework.integration.config.xml.AbstractBeanDefinition ( org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext ) ; this . void ( org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext , org.springframework.integration.config.xml.AbstractBeanDefinition , null ) ; return org.springframework.integration.config.xml.AbstractBeanDefinition ; } BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ConsumerEndpointFactoryBean .class ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; BeanComponentDefinition org.springframework.integration.config.xml.BeanComponentDefinition = this . org.springframework.integration.config.xml.BeanComponentDefinition ( org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyReference ( STRING , org.springframework.integration.config.xml.BeanComponentDefinition . getBeanName ( ) ) ; IntegrationNamespaceUtils . checkAndConfigureFixedSubscriberChannel ( org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext , java.lang.String , org.springframework.integration.config.xml.BeanComponentDefinition . getBeanName ( ) ) ; if ( org.w3c.dom.Element != null ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } IntegrationNamespaceUtils . configurePollerMetadata ( org.w3c.dom.Element , org.springframework.integration.config.xml.BeanDefinitionBuilder , org.springframework.integration.config.xml.ParserContext ) ; } org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; this . void ( org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext , org.springframework.integration.config.xml.BeanComponentDefinition . getBeanDefinition ( ) , org.springframework.integration.config.xml.BeanDefinitionBuilder ) ; return org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext , BeanDefinition org.springframework.integration.config.xml.BeanDefinition , BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , IntegrationNamespaceUtils . REQUEST_HANDLER_ADVICE_CHAIN ) ; @ java.lang.SuppressWarnings ( STRING ) ManagedList org.springframework.integration.config.xml.ManagedList = IntegrationNamespaceUtils . configureAdviceChain ( org.w3c.dom.Element , org.w3c.dom.Element , org.springframework.integration.config.xml.BeanDefinition , org.springframework.integration.config.xml.ParserContext ) ; if ( ! CollectionUtils . isEmpty ( org.springframework.integration.config.xml.ManagedList ) ) { boolean boolean = this . boolean ( ) ; if ( ! boolean ) { java.lang.Class<?> < ? > java.lang.Class<?> = null ; if ( org.springframework.integration.config.xml.BeanDefinition instanceof AbstractBeanDefinition ) { AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.integration.config.xml.BeanDefinition ; if ( org.springframework.integration.config.xml.AbstractBeanDefinition . hasBeanClass ( ) ) { java.lang.Class<?> = org.springframework.integration.config.xml.AbstractBeanDefinition . getBeanClass ( ) ; } } boolean = java.lang.Class<> != null && AbstractReplyProducingMessageHandler .class . boolean ( java.lang.Class<> ) ; } if ( boolean ) { org.springframework.integration.config.xml.BeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.integration.config.xml.ManagedList ) ; } else if ( org.springframework.integration.config.xml.BeanDefinitionBuilder != null ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.config.xml.ManagedList ) ; } else { java.lang.String java.lang.String = IntegrationNamespaceUtils . createElementDescription ( org.w3c.dom.Element ) ; org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING + STRING , org.w3c.dom.Element ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.config.xml.BeanComponentDefinition org.springframework.integration.config.xml.BeanComponentDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext ) { AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition = this . org.springframework.integration.config.xml.AbstractBeanDefinition ( org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext ) ; if ( org.springframework.integration.config.xml.AbstractBeanDefinition == null ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( IntegrationNamespaceUtils . ORDER ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.AbstractBeanDefinition . getPropertyValues ( ) . addPropertyValue ( IntegrationNamespaceUtils . ORDER , java.lang.String ) ; } java.lang.String java.lang.String = BeanDefinitionReaderUtils . generateBeanName ( org.springframework.integration.config.xml.AbstractBeanDefinition , org.springframework.integration.config.xml.ParserContext . getRegistry ( ) ) ; java.lang.String [] java.lang.String[] = IntegrationNamespaceUtils . generateAlias ( org.w3c.dom.Element ) ; BeanComponentDefinition org.springframework.integration.config.xml.BeanComponentDefinition = new BeanComponentDefinition ( org.springframework.integration.config.xml.AbstractBeanDefinition , java.lang.String , java.lang.String[] ) ; org.springframework.integration.config.xml.ParserContext . registerBeanComponent ( org.springframework.integration.config.xml.BeanComponentDefinition ) ; return org.springframework.integration.config.xml.BeanComponentDefinition ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.config.xml.AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext );  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
