<METHOD_START> public static void void ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.Object java.lang.Object , java.lang.String ... java.lang.String[] ) { void ( java.lang.annotation.Annotation , java.lang.Object , null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.Object java.lang.Object , StringValueResolver org.springframework.beans.annotation.StringValueResolver , java.lang.String ... java.lang.String[] ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; java.lang.reflect.Method [] java.lang.reflect.Method[] = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.reflect.Method[] ( ) ; BeanWrapper org.springframework.beans.annotation.BeanWrapper = PropertyAccessorFactory . forBeanPropertyAccess ( java.lang.Object ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) && org.springframework.beans.annotation.BeanWrapper . isWritableProperty ( java.lang.String ) ) { java.lang.Object java.lang.Object = ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.annotation.Annotation ) ; if ( org.springframework.beans.annotation.StringValueResolver != null && java.lang.Object instanceof java.lang.String ) { java.lang.Object = org.springframework.beans.annotation.StringValueResolver . resolveStringValue ( ( java.lang.String ) java.lang.Object ) ; } org.springframework.beans.annotation.BeanWrapper . setPropertyValue ( java.lang.String , java.lang.Object ) ; } } }  <METHOD_END>
