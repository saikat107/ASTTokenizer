<METHOD_START> @ Before public void void ( ) { SampleMappingContext org.springframework.data.auditing.SampleMappingContext = new SampleMappingContext ( ) ; org.springframework.data.auditing.SampleMappingContext . setInitialEntitySet ( java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample>> ( org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample .class ) ) ; org.springframework.data.auditing.SampleMappingContext . afterPropertiesSet ( ) ; PersistentEntities org.springframework.data.auditing.PersistentEntities = new PersistentEntities ( java.util.Collections . java.util.Set ( org.springframework.data.auditing.SampleMappingContext ) ) ; org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory = new MappingAuditableBeanWrapperFactory ( org.springframework.data.auditing.PersistentEntities ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample = new org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample ( ) ; java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> < AuditableBeanWrapper > java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> = org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory . getBeanWrapperFor ( java.util.Optional . java.util.Optional<org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample> ( org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample ) ) ; assertThat ( java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> ) . hasValueSatisfying ( it -> { it . setCreatedBy ( Optional . of ( STRING ) ) ; assertThat ( sample . createdBy ) . isNotNull ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample = new org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample ( ) ; java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> < AuditableBeanWrapper > java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> = org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory . getBeanWrapperFor ( java.util.Optional . java.util.Optional<org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample> ( org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample ) ) ; assertThat ( java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> ) . hasValueSatisfying ( it -> { it . setLastModifiedBy ( Optional . of ( STRING ) ) ; assertThat ( sample . lastModifiedBy ) . isNotNull ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample = new org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample ( ) ; java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> < AuditableBeanWrapper > java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> = org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory . getBeanWrapperFor ( java.util.Optional . java.util.Optional<org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample> ( org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample ) ) ; assertThat ( java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> ) . hasValueSatisfying ( it -> it . setLastModifiedDate ( Instant . now ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory . getBeanWrapperFor ( java.util.Optional . java.util.Optional<org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.NoAuditing> ( new org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.NoAuditing ( ) ) ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory . getBeanWrapperFor ( java.util.Optional . java.util.Optional ( mock ( org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.ExtendingAuditable .class ) ) ) ) . hasValueSatisfying ( it -> assertThat ( it ) . isInstanceOf ( AuditableInterfaceBeanWrapper .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Date java.util.Date = new java.util.Date ( ) ; java.util.Calendar java.util.Calendar = new java.util.GregorianCalendar ( ) ; java.util.Calendar . void ( java.util.Date ) ; void ( java.util.Calendar , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DateTime org.springframework.data.auditing.DateTime = new DateTime ( ) ; void ( org.springframework.data.auditing.DateTime , org.springframework.data.auditing.DateTime . toDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Date java.util.Date = new java.util.Date ( ) ; void ( java.util.Date , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.LocalDateTime java.time.LocalDateTime = java.time.LocalDateTime . java.time.LocalDateTime ( ) ; void ( java.time.LocalDateTime , LocalDateTimeToDateConverter . INSTANCE . convert ( java.time.LocalDateTime ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.threeten . org.threeten . org.threeten org.threeten.bp.LocalDateTime = org . org.threeten . org.threeten . LocalDateTime . now ( ) ; void ( org.threeten.bp.LocalDateTime , org . springframework . data . convert . ThreeTenBackPortConverters . LocalDateTimeToDateConverter . INSTANCE . convert ( org.threeten.bp.LocalDateTime ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample = new org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample ( ) ; org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample . java.lang.Object = java.lang.Object ; java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> < AuditableBeanWrapper > java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> = org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory . getBeanWrapperFor ( java.util.Optional . java.util.Optional<org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample> ( org.springframework.data.auditing.MappingAuditableBeanWrapperFactoryUnitTests.Sample ) ) ; assertThat ( java.util.Optional<org.springframework.data.auditing.AuditableBeanWrapper> ) . hasValueSatisfying ( it -> assertThat ( it . getLastModifiedDate ( ) ) . isEqualTo ( expected ) ) ; }  <METHOD_END>
<METHOD_START> @ LastModifiedBy public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; }  <METHOD_END>
