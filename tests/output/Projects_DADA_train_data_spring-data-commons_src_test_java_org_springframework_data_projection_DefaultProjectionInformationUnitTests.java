<METHOD_START> @ Test public void void ( ) { ProjectionInformation org.springframework.data.projection.ProjectionInformation = new DefaultProjectionInformation ( org.springframework.data.projection.DefaultProjectionInformationUnitTests.CustomerProjection .class ) ; assertThat ( java.util.List<java.lang.String> ( org.springframework.data.projection.ProjectionInformation . getInputProperties ( ) ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionInformation org.springframework.data.projection.ProjectionInformation = new DefaultProjectionInformation ( org.springframework.data.projection.DefaultProjectionInformationUnitTests.ExtendedProjection .class ) ; assertThat ( java.util.List<java.lang.String> ( org.springframework.data.projection.ProjectionInformation . getInputProperties ( ) ) ) . containsExactly ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProjectionInformation org.springframework.data.projection.ProjectionInformation = new DefaultProjectionInformation ( org.springframework.data.projection.DefaultProjectionInformationUnitTests.WithDefaultMethod .class ) ; assertThat ( org.springframework.data.projection.ProjectionInformation . isClosed ( ) ) . isTrue ( ) ; assertThat ( java.util.List<java.lang.String> ( org.springframework.data.projection.ProjectionInformation . getInputProperties ( ) ) ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.List<java.beans.PropertyDescriptor> < java.beans.PropertyDescriptor > java.util.List<java.beans.PropertyDescriptor> ) { return java.util.List<java.beans.PropertyDescriptor> . java.util.stream.Stream<java.beans.PropertyDescriptor> ( ) . java.util.stream.Stream<java.lang.String> ( java.beans.FeatureDescriptor :: java.lang.String ) . java.util.stream.Stream<java.lang.String> ( ) . java.util.List<java.lang.String> ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> default java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
