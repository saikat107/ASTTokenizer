<METHOD_START> public void ( TraceRepository org.springframework.boot.actuate.trace.TraceRepository , TraceProperties org.springframework.boot.actuate.trace.TraceProperties ) { this . org.springframework.boot.actuate.trace.TraceRepository = org.springframework.boot.actuate.trace.TraceRepository ; this . org.springframework.boot.actuate.trace.TraceProperties = org.springframework.boot.actuate.trace.TraceProperties ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.boot.actuate.trace.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.trace.HttpServletResponse , FilterChain org.springframework.boot.actuate.trace.FilterChain )					throws org.springframework.boot.actuate.trace.ServletException , java.io.IOException { long long = java.lang.System . long ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.boot.actuate.trace.HttpServletRequest ) ; void ( org.springframework.boot.actuate.trace.HttpServletRequest , java.util.Map<java.lang.String,java.lang.Object> ) ; int int = HttpStatus . INTERNAL_SERVER_ERROR . value ( ) ; try { org.springframework.boot.actuate.trace.FilterChain . doFilter ( org.springframework.boot.actuate.trace.HttpServletRequest , org.springframework.boot.actuate.trace.HttpServletResponse ) ; int = org.springframework.boot.actuate.trace.HttpServletResponse . getStatus ( ) ; } finally { void ( java.util.Map<java.lang.String,java.lang.Object> , long ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , int == org.springframework.boot.actuate.trace.HttpServletResponse . getStatus ( ) ? org.springframework.boot.actuate.trace.HttpServletResponse : new org.springframework.boot.actuate.trace.WebRequestTraceFilter.CustomStatusResponseWrapper ( org.springframework.boot.actuate.trace.HttpServletResponse , int ) ) ; this . org.springframework.boot.actuate.trace.TraceRepository . add ( java.util.Map<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( HttpServletRequest org.springframework.boot.actuate.trace.HttpServletRequest ) { HttpSession org.springframework.boot.actuate.trace.HttpSession = org.springframework.boot.actuate.trace.HttpServletRequest . getSession ( false ) ; java.lang.Throwable java.lang.Throwable = ( java.lang.Throwable ) org.springframework.boot.actuate.trace.HttpServletRequest . getAttribute ( STRING ) ; java.security.Principal java.security.Principal = org.springframework.boot.actuate.trace.HttpServletRequest . getUserPrincipal ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.trace.HttpServletRequest . getMethod ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.trace.HttpServletRequest . getRequestURI ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; if ( boolean ( Include . REQUEST_HEADERS ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.boot.actuate.trace.HttpServletRequest ) ) ; } void ( java.util.Map<java.lang.String,java.lang.Object> , Include . PATH_INFO , STRING , org.springframework.boot.actuate.trace.HttpServletRequest . getPathInfo ( ) ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , Include . PATH_TRANSLATED , STRING , org.springframework.boot.actuate.trace.HttpServletRequest . getPathTranslated ( ) ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , Include . CONTEXT_PATH , STRING , org.springframework.boot.actuate.trace.HttpServletRequest . getContextPath ( ) ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , Include . USER_PRINCIPAL , STRING , ( java.security.Principal == null ? null : java.security.Principal . java.lang.String ( ) ) ) ; if ( boolean ( Include . PARAMETERS ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.actuate.trace.HttpServletRequest . getParameterMap ( ) ) ; } void ( java.util.Map<java.lang.String,java.lang.Object> , Include . QUERY_STRING , STRING , org.springframework.boot.actuate.trace.HttpServletRequest . getQueryString ( ) ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , Include . AUTH_TYPE , STRING , org.springframework.boot.actuate.trace.HttpServletRequest . getAuthType ( ) ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , Include . REMOTE_ADDRESS , STRING , org.springframework.boot.actuate.trace.HttpServletRequest . getRemoteAddr ( ) ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , Include . SESSION_ID , STRING , ( org.springframework.boot.actuate.trace.HttpSession == null ? null : org.springframework.boot.actuate.trace.HttpSession . getId ( ) ) ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , Include . REMOTE_USER , STRING , org.springframework.boot.actuate.trace.HttpServletRequest . getRemoteUser ( ) ) ; if ( boolean ( Include . ERRORS ) && java.lang.Throwable != null && this . org.springframework.boot.actuate.trace.ErrorAttributes != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , this . org.springframework.boot.actuate.trace.ErrorAttributes . getErrorAttributes ( new ServletRequestAttributes ( org.springframework.boot.actuate.trace.HttpServletRequest ) , true ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( HttpServletRequest org.springframework.boot.actuate.trace.HttpServletRequest ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ( ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.boot.actuate.trace.HttpServletRequest . getHeaderNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ( org.springframework.boot.actuate.trace.HttpServletRequest , java.lang.String ) ) ; } } void ( java.util.Map<java.lang.String,java.lang.Object> ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; if ( ! boolean ( Include . COOKIES ) ) { java.util.Set<java.lang.String> . boolean ( STRING ) ; } if ( ! boolean ( Include . AUTHORIZATION_HEADER ) ) { java.util.Set<java.lang.String> . boolean ( STRING ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( HttpServletRequest org.springframework.boot.actuate.trace.HttpServletRequest , java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.ArrayList ( org.springframework.boot.actuate.trace.HttpServletRequest . getHeaders ( java.lang.String ) ) ; if ( java.util.List<java.lang.String> . int ( ) == NUMBER ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; } if ( java.util.List<java.lang.String> . boolean ( ) ) { return STRING ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) {	}  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , long long ) { long long = java.lang.System . long ( ) - long ; void ( java.util.Map<java.lang.String,java.lang.Object> , Include . TIME_TAKEN , STRING , STRING + java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( long ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletResponse org.springframework.boot.actuate.trace.HttpServletResponse ) { if ( boolean ( Include . RESPONSE_HEADERS ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Map<java.lang.String,java.lang.String> ( org.springframework.boot.actuate.trace.HttpServletResponse ) ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( HttpServletResponse org.springframework.boot.actuate.trace.HttpServletResponse ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : org.springframework.boot.actuate.trace.HttpServletResponse . getHeaderNames ( ) ) { java.lang.String java.lang.String = org.springframework.boot.actuate.trace.HttpServletResponse . getHeader ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } if ( ! boolean ( Include . COOKIES ) ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ; } java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String . java.lang.String ( org.springframework.boot.actuate.trace.HttpServletResponse . getStatus ( ) ) ) ; return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.boot.actuate.trace.HttpServletRequest , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( org.springframework.boot.actuate.trace.Log . isTraceEnabled ( ) ) { org.springframework.boot.actuate.trace.Log . trace ( STRING + org.springframework.boot.actuate.trace.HttpServletRequest . getMethod ( ) + STRING + org.springframework.boot.actuate.trace.HttpServletRequest . getRequestURI ( ) ) ; if ( this . boolean ) { org.springframework.boot.actuate.trace.Log . trace ( STRING + java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , Include org.springframework.boot.actuate.trace.Include , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( boolean ( org.springframework.boot.actuate.trace.Include ) && java.lang.Object != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( Include org.springframework.boot.actuate.trace.Include ) { return this . org.springframework.boot.actuate.trace.TraceProperties . getInclude ( ) . contains ( org.springframework.boot.actuate.trace.Include ) ; }  <METHOD_END>
<METHOD_START> public void void ( ErrorAttributes org.springframework.boot.actuate.trace.ErrorAttributes ) { this . org.springframework.boot.actuate.trace.ErrorAttributes = org.springframework.boot.actuate.trace.ErrorAttributes ; }  <METHOD_END>
<METHOD_START> private void ( HttpServletResponse org.springframework.boot.actuate.trace.HttpServletResponse , int int ) { super( org.springframework.boot.actuate.trace.HttpServletResponse ); this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
