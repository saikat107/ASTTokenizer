<METHOD_START> public void ( ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return checkParameterTypeNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , type -> ServerWebExchange .class . isAssignableFrom ( type ) || ServerHttpRequest .class . isAssignableFrom ( type ) || ServerHttpResponse .class . isAssignableFrom ( type ) || HttpMethod .class == type ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterType ( ) ; if ( ServerWebExchange .class . boolean ( java.lang.Class<> ) ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; } else if ( ServerHttpRequest .class . boolean ( java.lang.Class<> ) ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getRequest ( ) ) ; } else if ( ServerHttpResponse .class . boolean ( java.lang.Class<> ) ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getResponse ( ) ) ; } else if ( HttpMethod .class == java.lang.Class<> ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getRequest ( ) . getMethod ( ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> + STRING + org.springframework.web.reactive.result.method.annotation.MethodParameter . getMethod ( ) ) ; } }  <METHOD_END>
