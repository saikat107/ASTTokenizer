<METHOD_START> public void ( Bean < Session > org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> < T > java.lang.Class<T> , BeanManager org.springframework.data.neo4j.repository.cdi.BeanManager , java.util.Optional<org.springframework.data.neo4j.repository.cdi.CustomRepositoryImplementationDetector> < CustomRepositoryImplementationDetector > java.util.Optional<org.springframework.data.neo4j.repository.cdi.CustomRepositoryImplementationDetector> ) { super( java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> , org.springframework.data.neo4j.repository.cdi.BeanManager , java.util.Optional<org.springframework.data.neo4j.repository.cdi.CustomRepositoryImplementationDetector> ); this . org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> = org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected T T ( CreationalContext < T > org.springframework.data.neo4j.repository.cdi.CreationalContext<T> , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { Session org.springframework.data.neo4j.repository.cdi.Session = getDependencyInstance ( org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> , Session .class ) ; Neo4jRepositoryFactory org.springframework.data.neo4j.repository.cdi.Neo4jRepositoryFactory = new Neo4jRepositoryFactory ( org.springframework.data.neo4j.repository.cdi.Session ) ; return java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> org.springframework.data.neo4j.repository.cdi.Neo4jRepositoryFactory . getRepository ( java.lang.Class<T> , java.lang.Object ) ) . orElseGet ( ( ) factory . getRepository ( repositoryType ) ) ; }  <METHOD_END>
