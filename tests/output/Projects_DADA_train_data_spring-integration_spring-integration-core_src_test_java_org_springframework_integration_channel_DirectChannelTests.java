<METHOD_START> @ Test public void void ( ) { DirectChannel org.springframework.integration.channel.DirectChannel = new DirectChannel ( ) ; Log org.springframework.integration.channel.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.channel.DirectChannel , STRING , Log .class ) ) ; when ( org.springframework.integration.channel.Log . isDebugEnabled ( ) ) . thenReturn ( true ) ; new DirectFieldAccessor ( org.springframework.integration.channel.DirectChannel ) . setPropertyValue ( STRING , org.springframework.integration.channel.Log ) ; org.springframework.integration.channel.DirectChannelTests.ThreadNameExtractingTestTarget org.springframework.integration.channel.DirectChannelTests.ThreadNameExtractingTestTarget = new org.springframework.integration.channel.DirectChannelTests.ThreadNameExtractingTestTarget ( ) ; org.springframework.integration.channel.DirectChannel . subscribe ( org.springframework.integration.channel.DirectChannelTests.ThreadNameExtractingTestTarget ) ; GenericMessage < java.lang.String > org.springframework.integration.channel.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( org.springframework.integration.channel.DirectChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) ) ; assertEquals ( java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) , org.springframework.integration.channel.DirectChannelTests.ThreadNameExtractingTestTarget . java.lang.String ) ; DirectFieldAccessor org.springframework.integration.channel.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.channel.DirectChannel ) ; UnicastingDispatcher org.springframework.integration.channel.UnicastingDispatcher = ( UnicastingDispatcher ) org.springframework.integration.channel.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.channel.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.channel.UnicastingDispatcher ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertTrue ( java.lang.Object instanceof RoundRobinLoadBalancingStrategy ) ; ArgumentCaptor < java.lang.String > org.springframework.integration.channel.ArgumentCaptor<java.lang.String> = ArgumentCaptor . forClass ( java.lang.String .class ) ; verify ( org.springframework.integration.channel.Log , times ( NUMBER ) ) . debug ( org.springframework.integration.channel.ArgumentCaptor<java.lang.String> . capture ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.channel.ArgumentCaptor<java.lang.String> . getAllValues ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , startsWith ( STRING ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectChannel org.springframework.integration.channel.DirectChannel = new DirectChannel ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; org.springframework.integration.channel.DirectChannel . subscribe ( message -> count . incrementAndGet ( ) ) ; GenericMessage < java.lang.String > org.springframework.integration.channel.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( org.springframework.integration.channel.DirectChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.channel.DirectChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectChannel org.springframework.integration.channel.DirectChannel = new DirectChannel ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; org.springframework.integration.channel.DirectChannel . subscribe ( message -> count1 . incrementAndGet ( ) ) ; org.springframework.integration.channel.DirectChannel . subscribe ( message -> count2 . getAndIncrement ( ) ) ; GenericMessage < java.lang.String > org.springframework.integration.channel.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( org.springframework.integration.channel.DirectChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.channel.DirectChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) ; } assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; FixedSubscriberChannel org.springframework.integration.channel.FixedSubscriberChannel = new FixedSubscriberChannel ( message -> count . incrementAndGet ( ) ) ; GenericMessage < java.lang.String > org.springframework.integration.channel.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( org.springframework.integration.channel.FixedSubscriberChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.channel.FixedSubscriberChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> , NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final DirectChannel org.springframework.integration.channel.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.channel.DirectChannelTests.ThreadNameExtractingTestTarget org.springframework.integration.channel.DirectChannelTests.ThreadNameExtractingTestTarget = new org.springframework.integration.channel.DirectChannelTests.ThreadNameExtractingTestTarget ( java.util.concurrent.CountDownLatch ) ; org.springframework.integration.channel.DirectChannel . subscribe ( org.springframework.integration.channel.DirectChannelTests.ThreadNameExtractingTestTarget ) ; final GenericMessage < java.lang.String > org.springframework.integration.channel.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; new java.lang.Thread ( ( java.lang.Runnable ) ( ) org.springframework.integration.channel.DirectChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) , STRING ) . void ( ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , org.springframework.integration.channel.DirectChannelTests.ThreadNameExtractingTestTarget . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.channel.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.channel.DirectChannelTests> ( ) ) ; MessageChannel org.springframework.integration.channel.MessageChannel = org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; MessageChannel org.springframework.integration.channel.MessageChannel = org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; ClassPathXmlApplicationContext org.springframework.integration.channel.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( ) ; org.springframework.integration.channel.ClassPathXmlApplicationContext . setAllowBeanDefinitionOverriding ( false ) ; org.springframework.integration.channel.ClassPathXmlApplicationContext . setConfigLocations ( new java.lang.String [] { STRING } ) ; org.springframework.integration.channel.ClassPathXmlApplicationContext . setParent ( org.springframework.integration.channel.ClassPathXmlApplicationContext ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( ClassPathXmlApplicationContext .class , STRING ) ; java.lang.reflect.Method . void ( true ) ; java.lang.reflect.Method . java.lang.Object ( org.springframework.integration.channel.ClassPathXmlApplicationContext ) ; assertFalse ( org.springframework.integration.channel.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.integration.channel.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.integration.channel.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.integration.channel.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; org.springframework.integration.channel.ClassPathXmlApplicationContext . refresh ( ) ; PublishSubscribeChannel org.springframework.integration.channel.PublishSubscribeChannel = org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING , PublishSubscribeChannel .class ) ; assertTrue ( org.springframework.integration.channel.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.integration.channel.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.integration.channel.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.integration.channel.ClassPathXmlApplicationContext . containsBean ( STRING ) ) ; EventDrivenConsumer org.springframework.integration.channel.EventDrivenConsumer = org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; assertEquals ( org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.channel.EventDrivenConsumer , STRING ) ) ; assertEquals ( org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.channel.EventDrivenConsumer , STRING ) ) ; EventDrivenConsumer org.springframework.integration.channel.EventDrivenConsumer = org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; assertEquals ( org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.channel.EventDrivenConsumer , STRING ) ) ; assertEquals ( org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.channel.EventDrivenConsumer , STRING ) ) ; EventDrivenConsumer org.springframework.integration.channel.EventDrivenConsumer = org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; assertEquals ( org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.channel.EventDrivenConsumer , STRING ) ) ; assertEquals ( org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.channel.EventDrivenConsumer , STRING ) ) ; EventDrivenConsumer org.springframework.integration.channel.EventDrivenConsumer = org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; assertEquals ( org.springframework.integration.channel.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.channel.EventDrivenConsumer , STRING ) ) ; assertEquals ( org.springframework.integration.channel.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.channel.EventDrivenConsumer , STRING ) ) ; EventDrivenConsumer org.springframework.integration.channel.EventDrivenConsumer = org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; assertEquals ( org.springframework.integration.channel.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.channel.EventDrivenConsumer , STRING ) ) ; EventDrivenConsumer org.springframework.integration.channel.EventDrivenConsumer = org.springframework.integration.channel.ClassPathXmlApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; assertEquals ( org.springframework.integration.channel.PublishSubscribeChannel , TestUtils . getPropertyValue ( org.springframework.integration.channel.EventDrivenConsumer , STRING ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.Message<?> ) { this . java.lang.String = java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) ; if ( this . java.util.concurrent.CountDownLatch != null ) { this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
