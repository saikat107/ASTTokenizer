<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . scan ( example . example . example .class . java.lang.Package ( ) . java.lang.String ( ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ComponentScanAnnotatedConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.ComponentScanAnnotatedConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBeanDefinition ( STRING ) , is ( true ) ) ; assertThat ( STRING + STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ComponentScanAnnotatedConfig_WithValueAttribute .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.ComponentScanAnnotatedConfig_WithValueAttribute .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( TestBean .class ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBeanDefinition ( STRING ) , is ( true ) ) ; assertThat ( STRING + STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( ComponentScanAnnotatedConfigWithImplicitBasePackage .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( ComponentScanAnnotatedConfigWithImplicitBasePackage .class ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBeanDefinition ( STRING ) , is ( true ) ) ; assertThat ( STRING + STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( ConfigurableComponent .class ) . isFlag ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ComponentScanAnnotationIntegrationTests.ComposedAnnotationConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.ComponentScanAnnotationIntegrationTests.ComposedAnnotationConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( SimpleComponent .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( ClassWithNestedComponents . ClassWithNestedComponents .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( ClassWithNestedComponents . ClassWithNestedComponents .class ) ; assertThat ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBeanDefinition ( STRING ) , is ( true ) ) ; assertThat ( STRING + STRING , org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.context.annotation.ComponentScanAnnotatedConfig .class ) . getBeanDefinition ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ConfigurationClassPostProcessor .class ) . getBeanDefinition ( ) ) ; GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; org.springframework.context.annotation.GenericApplicationContext . getBean ( org.springframework.context.annotation.ComponentScanAnnotatedConfig .class ) ; org.springframework.context.annotation.GenericApplicationContext . getBean ( TestBean .class ) ; assertThat ( STRING , org.springframework.context.annotation.GenericApplicationContext . containsBeanDefinition ( STRING ) , is ( true ) ) ; assertThat ( STRING + STRING , org.springframework.context.annotation.GenericApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ComponentScanWithBeanNameGenerator .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ComponentScanWithScopeResolver .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( CustomScopeAnnotationBean .class ) , not ( sameInstance ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( CustomScopeAnnotationBean .class ) ) ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.MultiComponentScan .class ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( CustomScopeAnnotationBean .class ) , not ( sameInstance ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( CustomScopeAnnotationBean .class ) ) ) ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ComponentScanWithCustomTypeFilter .class ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; KustomAnnotationAutowiredBean org.springframework.context.annotation.KustomAnnotationAutowiredBean = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , KustomAnnotationAutowiredBean .class ) ; assertThat ( org.springframework.context.annotation.KustomAnnotationAutowiredBean . getDependency ( ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ComponentScanWithAwareTypeFilter .class ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getEnvironment ( ) . acceptsProfiles ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , java.lang.ClassNotFoundException { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ComponentScanWithScopedProxy .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . registerScope ( STRING , new SimpleMapScope ( ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; FooService org.springframework.context.annotation.FooService = ( FooService ) org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; assertThat ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.FooService ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.FooService . foo ( NUMBER ) , equalTo ( STRING ) ) ; FooService org.springframework.context.annotation.FooService = ( FooService ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.context.annotation.FooService ) ; assertThat ( org.springframework.context.annotation.FooService , notNullValue ( ) ) ; assertThat ( org.springframework.context.annotation.FooService . foo ( NUMBER ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , java.lang.ClassNotFoundException { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ComponentScanWithScopedProxyThroughRegex .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . registerScope ( STRING , new SimpleMapScope ( ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; FooService org.springframework.context.annotation.FooService = ( FooService ) org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; assertThat ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.FooService ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , java.lang.ClassNotFoundException { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ComponentScanWithScopedProxyThroughAspectJPattern .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . registerScope ( STRING , new SimpleMapScope ( ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; FooService org.springframework.context.annotation.FooService = ( FooService ) org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; assertThat ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.FooService ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , java.lang.ClassNotFoundException { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ComponentScanWithMultipleAnnotationIncludeFilters1 .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( DefaultNamedComponent .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( MessageBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , java.lang.ClassNotFoundException { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ComponentScanWithMultipleAnnotationIncludeFilters2 .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( DefaultNamedComponent .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( MessageBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ComponentScanWithBasePackagesAndValueAlias .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.context.annotation.BeanFactory ) throws org.springframework.context.annotation.BeansException { this . org.springframework.context.annotation.BeanFactory = org.springframework.context.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.context.annotation.ResourceLoader ) { this . org.springframework.context.annotation.ResourceLoader = org.springframework.context.annotation.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.context.annotation.Environment ) { this . org.springframework.context.annotation.Environment = org.springframework.context.annotation.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MetadataReader org.springframework.context.annotation.MetadataReader , MetadataReaderFactory org.springframework.context.annotation.MetadataReaderFactory ) { ( ( ConfigurableEnvironment ) this . org.springframework.context.annotation.Environment ) . addActiveProfile ( STRING ) ; assertNotNull ( this . org.springframework.context.annotation.BeanFactory ) ; assertNotNull ( this . java.lang.ClassLoader ) ; assertNotNull ( this . org.springframework.context.annotation.ResourceLoader ) ; assertNotNull ( this . org.springframework.context.annotation.Environment ) ; return false ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( BeanDefinition org.springframework.context.annotation.BeanDefinition , BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { return STRING + super. generateBeanName ( org.springframework.context.annotation.BeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> void ( ) { this . scopeAnnotationType = MyScope .class ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( { STRING , STRING , STRING } ) public static org.springframework.context.annotation.CustomAutowireConfigurer org.springframework.context.annotation.CustomAutowireConfigurer ( ) { CustomAutowireConfigurer org.springframework.context.annotation.CustomAutowireConfigurer = new CustomAutowireConfigurer ( ) ; org.springframework.context.annotation.CustomAutowireConfigurer . setCustomQualifierTypes ( new java.util.HashSet ( ) { { boolean ( ComponentScanParserTests . ComponentScanParserTests .class ) ; } } ) ; return org.springframework.context.annotation.CustomAutowireConfigurer ; }  <METHOD_END>
<METHOD_START> public ComponentScanParserTests . ComponentScanParserTests.KustomAnnotationAutowiredBean ComponentScanParserTests.KustomAnnotationAutowiredBean ( ) { return new ComponentScanParserTests . ComponentScanParserTests ( ) ; }  <METHOD_END>
