<METHOD_START> public void ( ) { setAutodetectTransactionManager ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( UOWManager org.springframework.transaction.jta.UOWManager ) { this(); this . org.springframework.transaction.jta.UOWManager = org.springframework.transaction.jta.UOWManager ; }  <METHOD_END>
<METHOD_START> public void void ( UOWManager org.springframework.transaction.jta.UOWManager ) { this . org.springframework.transaction.jta.UOWManager = org.springframework.transaction.jta.UOWManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.transaction.jta.TransactionSystemException { initUserTransactionAndTransactionManager ( ) ; if ( this . org.springframework.transaction.jta.UOWManager == null ) { if ( this . java.lang.String != null ) { this . org.springframework.transaction.jta.UOWManager = org.springframework.transaction.jta.UOWManager ( this . java.lang.String ) ; } else { this . org.springframework.transaction.jta.UOWManager = org.springframework.transaction.jta.UOWManager ( ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.UOWManager org.springframework.transaction.jta.UOWManager ( java.lang.String java.lang.String ) throws org.springframework.transaction.jta.TransactionSystemException { try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } return getJndiTemplate ( ) . lookup ( java.lang.String , UOWManager .class ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new TransactionSystemException ( STRING + java.lang.String + STRING , javax.naming.NamingException ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.jta.UOWManager org.springframework.transaction.jta.UOWManager ( ) org.springframework.transaction.jta.TransactionSystemException { try { logger . debug ( STRING + java.lang.String + STRING ) ; return getJndiTemplate ( ) . lookup ( java.lang.String , UOWManager .class ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { logger . debug ( STRING + java.lang.String + STRING ) ; return UOWManagerFactory . getUOWManager ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JtaTransactionObject org.springframework.transaction.jta.JtaTransactionObject , java.util.List<org.springframework.transaction.jta.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.jta.TransactionSynchronization> ) { this . org.springframework.transaction.jta.UOWManager . registerInterposedSynchronization ( new JtaAfterCompletionSynchronization ( java.util.List<org.springframework.transaction.jta.TransactionSynchronization> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( TransactionDefinition org.springframework.transaction.jta.TransactionDefinition , TransactionCallback < T > org.springframework.transaction.jta.TransactionCallback<T> ) throws org.springframework.transaction.jta.TransactionException { if ( org.springframework.transaction.jta.TransactionDefinition == null ) { org.springframework.transaction.jta.TransactionDefinition = new DefaultTransactionDefinition ( ) ; } if ( org.springframework.transaction.jta.TransactionDefinition . getTimeout ( ) < TransactionDefinition . TIMEOUT_DEFAULT ) { throw new InvalidTimeoutException ( STRING , org.springframework.transaction.jta.TransactionDefinition . getTimeout ( ) ) ; } int int = org.springframework.transaction.jta.TransactionDefinition . getPropagationBehavior ( ) ; boolean boolean = ( this . org.springframework.transaction.jta.UOWManager . getUOWStatus ( ) != UOWSynchronizationRegistry . UOW_STATUS_NONE && this . org.springframework.transaction.jta.UOWManager . getUOWType ( ) != UOWSynchronizationRegistry . UOW_TYPE_LOCAL_TRANSACTION ) ; int int = UOWSynchronizationRegistry . UOW_TYPE_GLOBAL_TRANSACTION ; boolean boolean = false ; boolean boolean = false ; if ( boolean ) { if ( int == TransactionDefinition . PROPAGATION_NEVER ) { throw new IllegalTransactionStateException ( STRING ) ; } if ( int == TransactionDefinition . PROPAGATION_NESTED ) { throw new NestedTransactionNotSupportedException ( STRING ) ; } if ( int == TransactionDefinition . PROPAGATION_SUPPORTS || int == TransactionDefinition . PROPAGATION_REQUIRED || int == TransactionDefinition . PROPAGATION_MANDATORY ) { boolean = true ; boolean = ( getTransactionSynchronization ( ) != SYNCHRONIZATION_NEVER ) ; } else if ( int == TransactionDefinition . PROPAGATION_NOT_SUPPORTED ) { int = UOWSynchronizationRegistry . UOW_TYPE_LOCAL_TRANSACTION ; boolean = ( getTransactionSynchronization ( ) == SYNCHRONIZATION_ALWAYS ) ; } else { boolean = ( getTransactionSynchronization ( ) != SYNCHRONIZATION_NEVER ) ; } } else { if ( int == TransactionDefinition . PROPAGATION_MANDATORY ) { throw new IllegalTransactionStateException ( STRING ) ; } if ( int == TransactionDefinition . PROPAGATION_SUPPORTS || int == TransactionDefinition . PROPAGATION_NOT_SUPPORTED || int == TransactionDefinition . PROPAGATION_NEVER ) { int = UOWSynchronizationRegistry . UOW_TYPE_LOCAL_TRANSACTION ; boolean = ( getTransactionSynchronization ( ) == SYNCHRONIZATION_ALWAYS ) ; } else { boolean = ( getTransactionSynchronization ( ) != SYNCHRONIZATION_NEVER ) ; } } boolean boolean = logger . isDebugEnabled ( ) ; if ( boolean ) { logger . debug ( STRING + org.springframework.transaction.jta.TransactionDefinition . getName ( ) + STRING + org.springframework.transaction.jta.TransactionDefinition ) ; } SuspendedResourcesHolder org.springframework.transaction.jta.SuspendedResourcesHolder = ( ! boolean ? suspend ( null ) : null ) ; try { if ( org.springframework.transaction.jta.TransactionDefinition . getTimeout ( ) > TransactionDefinition . TIMEOUT_DEFAULT ) { this . org.springframework.transaction.jta.UOWManager . setUOWTimeout ( int , org.springframework.transaction.jta.TransactionDefinition . getTimeout ( ) ) ; } if ( boolean ) { logger . debug ( STRING + int + STRING + boolean ) ; } org.springframework.transaction.jta.WebSphereUowTransactionManager.UOWActionAdapter<T> < T > org.springframework.transaction.jta.WebSphereUowTransactionManager.UOWActionAdapter<T> = new org.springframework.transaction.jta.WebSphereUowTransactionManager.UOWActionAdapter <> ( org.springframework.transaction.jta.TransactionDefinition , org.springframework.transaction.jta.TransactionCallback<T> , ( int == UOWManager . UOW_TYPE_GLOBAL_TRANSACTION ) , ! boolean , boolean , boolean ) ; this . org.springframework.transaction.jta.UOWManager . runUnderUOW ( int , boolean , org.springframework.transaction.jta.WebSphereUowTransactionManager.UOWActionAdapter<T> ) ; if ( boolean ) { logger . debug ( STRING + int + STRING + boolean ) ; } return org.springframework.transaction.jta.WebSphereUowTransactionManager.UOWActionAdapter<T> . T ( ) ; } catch ( UOWException org.springframework.transaction.jta.UOWException ) { throw new TransactionSystemException ( STRING , org.springframework.transaction.jta.UOWException ) ; } catch ( UOWActionException org.springframework.transaction.jta.UOWActionException ) { throw new TransactionSystemException ( STRING , org.springframework.transaction.jta.UOWActionException ) ; } finally { if ( org.springframework.transaction.jta.SuspendedResourcesHolder != null ) { resume ( null , org.springframework.transaction.jta.SuspendedResourcesHolder ) ; } } }  <METHOD_END>
<METHOD_START> public void ( TransactionDefinition org.springframework.transaction.jta.TransactionDefinition , TransactionCallback < T > org.springframework.transaction.jta.TransactionCallback<T> , boolean boolean , boolean boolean , boolean boolean , boolean boolean ) { this . org.springframework.transaction.jta.TransactionDefinition = org.springframework.transaction.jta.TransactionDefinition ; this . org.springframework.transaction.jta.TransactionCallback<T> = org.springframework.transaction.jta.TransactionCallback<T> ; this . boolean = boolean ; this . boolean = boolean ; this . boolean = boolean ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { DefaultTransactionStatus org.springframework.transaction.jta.DefaultTransactionStatus = prepareTransactionStatus ( this . org.springframework.transaction.jta.TransactionDefinition , ( this . boolean ? this : null ) , this . boolean , this . boolean , this . boolean , null ) ; try { this . T = this . org.springframework.transaction.jta.TransactionCallback<T> . doInTransaction ( org.springframework.transaction.jta.DefaultTransactionStatus ) ; triggerBeforeCommit ( org.springframework.transaction.jta.DefaultTransactionStatus ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { this . java.lang.Throwable = java.lang.Throwable ; org.springframework.transaction.jta.UOWManager . setRollbackOnly ( ) ; } finally { if ( org.springframework.transaction.jta.DefaultTransactionStatus . isLocalRollbackOnly ( ) ) { if ( org.springframework.transaction.jta.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING ) ; } org.springframework.transaction.jta.UOWManager . setRollbackOnly ( ) ; } triggerBeforeCompletion ( org.springframework.transaction.jta.DefaultTransactionStatus ) ; if ( org.springframework.transaction.jta.DefaultTransactionStatus . isNewSynchronization ( ) ) { java.util.List<org.springframework.transaction.jta.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.jta.TransactionSynchronization> = TransactionSynchronizationManager . getSynchronizations ( ) ; TransactionSynchronizationManager . clear ( ) ; if ( ! java.util.List<org.springframework.transaction.jta.TransactionSynchronization> . isEmpty ( ) ) { org.springframework.transaction.jta.UOWManager . registerInterposedSynchronization ( new JtaAfterCompletionSynchronization ( java.util.List<org.springframework.transaction.jta.TransactionSynchronization> ) ) ; } } } }  <METHOD_END>
<METHOD_START> public T T ( ) { if ( this . java.lang.Throwable != null ) { ReflectionUtils . rethrowRuntimeException ( this . java.lang.Throwable ) ; } return this . T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.transaction.jta.UOWManager . getRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { TransactionSynchronizationUtils . triggerFlush ( ) ; }  <METHOD_END>
