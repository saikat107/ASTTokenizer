<METHOD_START> @ Before public void void ( ) java.io.IOException { this . org.springframework.boot.loader.tools.TestJarFile = new TestJarFile ( this . org.springframework.boot.loader.tools.TemporaryFolder ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; java.lang.String java.lang.String = MainClassFinder . findMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarFile ( ) , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; java.lang.String java.lang.String = MainClassFinder . findMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarFile ( ) , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.lang.String java.lang.String = MainClassFinder . findMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarFile ( ) , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expectMessage ( STRING + STRING ) ; MainClassFinder . findSingleMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarFile ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , AnnotatedClassWithMainMethod .class ) ; java.lang.String java.lang.String = MainClassFinder . findSingleMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarFile ( ) , STRING , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.lang.String java.lang.String = MainClassFinder . findMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarFile ( ) , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; java.lang.String java.lang.String = MainClassFinder . findMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarSource ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; java.lang.String java.lang.String = MainClassFinder . findMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarSource ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.lang.String java.lang.String = MainClassFinder . findMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarSource ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expectMessage ( STRING + STRING ) ; MainClassFinder . findSingleMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarSource ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , AnnotatedClassWithMainMethod .class ) ; java.lang.String java.lang.String = MainClassFinder . findSingleMainClass ( this . org.springframework.boot.loader.tools.TestJarFile . getJarSource ( ) , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; org.springframework.boot.loader.tools.MainClassFinderTests.ClassNameCollector org.springframework.boot.loader.tools.MainClassFinderTests.ClassNameCollector = new org.springframework.boot.loader.tools.MainClassFinderTests.ClassNameCollector ( ) ; MainClassFinder . doWithMainClasses ( this . org.springframework.boot.loader.tools.TestJarFile . getJarSource ( ) , org.springframework.boot.loader.tools.MainClassFinderTests.ClassNameCollector ) ; assertThat ( org.springframework.boot.loader.tools.MainClassFinderTests.ClassNameCollector . java.util.List<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; org.springframework.boot.loader.tools.MainClassFinderTests.ClassNameCollector org.springframework.boot.loader.tools.MainClassFinderTests.ClassNameCollector = new org.springframework.boot.loader.tools.MainClassFinderTests.ClassNameCollector ( ) ; MainClassFinder . doWithMainClasses ( this . org.springframework.boot.loader.tools.TestJarFile . getJarFile ( ) , null , org.springframework.boot.loader.tools.MainClassFinderTests.ClassNameCollector ) ; assertThat ( org.springframework.boot.loader.tools.MainClassFinderTests.ClassNameCollector . java.util.List<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MainClass org.springframework.boot.loader.tools.MainClass ) { this . java.util.List<java.lang.String> . boolean ( org.springframework.boot.loader.tools.MainClass . getName ( ) ) ; return null ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
