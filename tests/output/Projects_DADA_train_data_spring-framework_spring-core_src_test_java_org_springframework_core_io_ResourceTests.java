<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new ByteArrayResource ( STRING . byte[] ( ) ) ; assertTrue ( org.springframework.core.io.Resource . exists ( ) ) ; assertFalse ( org.springframework.core.io.Resource . isOpen ( ) ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( org.springframework.core.io.Resource . getInputStream ( ) ) ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( org.springframework.core.io.Resource , new ByteArrayResource ( STRING . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new ByteArrayResource ( STRING . byte[] ( ) , STRING ) ; assertTrue ( org.springframework.core.io.Resource . exists ( ) ) ; assertFalse ( org.springframework.core.io.Resource . isOpen ( ) ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( org.springframework.core.io.Resource . getInputStream ( ) ) ) ; assertEquals ( STRING , java.lang.String ) ; assertTrue ( org.springframework.core.io.Resource . getDescription ( ) . contains ( STRING ) ) ; assertEquals ( org.springframework.core.io.Resource , new ByteArrayResource ( STRING . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ; Resource org.springframework.core.io.Resource = new InputStreamResource ( java.io.InputStream ) ; assertTrue ( org.springframework.core.io.Resource . exists ( ) ) ; assertTrue ( org.springframework.core.io.Resource . isOpen ( ) ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( org.springframework.core.io.Resource . getInputStream ( ) ) ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( org.springframework.core.io.Resource , new InputStreamResource ( java.io.InputStream ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ; Resource org.springframework.core.io.Resource = new InputStreamResource ( java.io.InputStream , STRING ) ; assertTrue ( org.springframework.core.io.Resource . exists ( ) ) ; assertTrue ( org.springframework.core.io.Resource . isOpen ( ) ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( org.springframework.core.io.Resource . getInputStream ( ) ) ) ; assertEquals ( STRING , java.lang.String ) ; assertTrue ( org.springframework.core.io.Resource . getDescription ( ) . contains ( STRING ) ) ; assertEquals ( org.springframework.core.io.Resource , new InputStreamResource ( java.io.InputStream ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new ClassPathResource ( STRING ) ; void ( org.springframework.core.io.Resource ) ; Resource org.springframework.core.io.Resource = new ClassPathResource ( STRING ) ; assertEquals ( org.springframework.core.io.Resource , org.springframework.core.io.Resource ) ; Resource org.springframework.core.io.Resource = new ClassPathResource ( STRING ) . createRelative ( STRING ) ; assertEquals ( org.springframework.core.io.Resource , org.springframework.core.io.Resource ) ; java.util.HashSet<org.springframework.core.io.Resource> < Resource > java.util.HashSet<org.springframework.core.io.Resource> = new java.util.HashSet<org.springframework.core.io.Resource> <> ( ) ; java.util.HashSet<org.springframework.core.io.Resource> . add ( org.springframework.core.io.Resource ) ; java.util.HashSet<org.springframework.core.io.Resource> . add ( org.springframework.core.io.Resource ) ; assertEquals ( NUMBER , java.util.HashSet<org.springframework.core.io.Resource> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.core.io.ResourceTests> ( ) . java.lang.ClassLoader ( ) ) ; void ( org.springframework.core.io.Resource ) ; assertEquals ( org.springframework.core.io.Resource , new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.core.io.ResourceTests> ( ) . java.lang.ClassLoader ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.core.io.ResourceTests> ( ) ) ; void ( org.springframework.core.io.Resource ) ; assertEquals ( org.springframework.core.io.Resource , new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.core.io.ResourceTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new FileSystemResource ( java.lang.Class<? extends org.springframework.core.io.ResourceTests> ( ) . java.net.URL ( STRING ) . java.lang.String ( ) ) ; void ( org.springframework.core.io.Resource ) ; assertEquals ( new FileSystemResource ( java.lang.Class<? extends org.springframework.core.io.ResourceTests> ( ) . java.net.URL ( STRING ) . java.lang.String ( ) ) , org.springframework.core.io.Resource ) ; Resource org.springframework.core.io.Resource = new FileSystemResource ( STRING ) ; assertEquals ( org.springframework.core.io.Resource , new FileSystemResource ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new UrlResource ( java.lang.Class<? extends org.springframework.core.io.ResourceTests> ( ) . java.net.URL ( STRING ) ) ; void ( org.springframework.core.io.Resource ) ; assertEquals ( new UrlResource ( java.lang.Class<? extends org.springframework.core.io.ResourceTests> ( ) . java.net.URL ( STRING ) ) , org.springframework.core.io.Resource ) ; Resource org.springframework.core.io.Resource = new UrlResource ( STRING ) ; assertEquals ( org.springframework.core.io.Resource , new UrlResource ( STRING ) ) ; assertEquals ( STRING , new UrlResource ( STRING ) . getFilename ( ) ) ; assertEquals ( STRING , new UrlResource ( STRING ) . getFilename ( ) ) ; assertEquals ( STRING , new UrlResource ( STRING ) . getFilename ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Resource org.springframework.core.io.Resource ) throws java.io.IOException { assertEquals ( STRING , org.springframework.core.io.Resource . getFilename ( ) ) ; assertTrue ( org.springframework.core.io.Resource . getURL ( ) . getFile ( ) . endsWith ( STRING ) ) ; Resource org.springframework.core.io.Resource = org.springframework.core.io.Resource . createRelative ( STRING ) ; assertEquals ( STRING , org.springframework.core.io.Resource . getFilename ( ) ) ; assertTrue ( org.springframework.core.io.Resource . getURL ( ) . getFile ( ) . endsWith ( STRING ) ) ; assertTrue ( org.springframework.core.io.Resource . exists ( ) ) ; Resource org.springframework.core.io.Resource = org.springframework.core.io.Resource . createRelative ( STRING ) ; assertEquals ( STRING , org.springframework.core.io.Resource . getFilename ( ) ) ; assertTrue ( org.springframework.core.io.Resource . getURL ( ) . getFile ( ) . endsWith ( STRING ) ) ; assertTrue ( org.springframework.core.io.Resource . exists ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new ClassPathResource ( STRING ) ; Resource org.springframework.core.io.Resource = org.springframework.core.io.Resource . createRelative ( STRING ) ; assertEquals ( new ClassPathResource ( STRING ) , org.springframework.core.io.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new FileSystemResource ( STRING ) ; Resource org.springframework.core.io.Resource = org.springframework.core.io.Resource . createRelative ( STRING ) ; assertEquals ( new FileSystemResource ( STRING ) , org.springframework.core.io.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new UrlResource ( STRING ) ; Resource org.springframework.core.io.Resource = org.springframework.core.io.Resource . createRelative ( STRING ) ; assertEquals ( new UrlResource ( STRING ) , org.springframework.core.io.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) java.lang.Exception { Resource org.springframework.core.io.Resource = new UrlResource ( STRING ) ; assertTrue ( org.springframework.core.io.Resource . exists ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; Resource org.springframework.core.io.Resource = new AbstractResource ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) { return null ; } } ; try { org.springframework.core.io.Resource . getURL ( ) ; fail ( STRING ) ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { assertTrue ( java.io.FileNotFoundException . java.lang.String ( ) . int ( java.lang.String ) != - NUMBER ) ; } try { org.springframework.core.io.Resource . getFile ( ) ; fail ( STRING ) ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { assertTrue ( java.io.FileNotFoundException . java.lang.String ( ) . int ( java.lang.String ) != - NUMBER ) ; } try { org.springframework.core.io.Resource . createRelative ( STRING ) ; fail ( STRING ) ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { assertTrue ( java.io.FileNotFoundException . java.lang.String ( ) . int ( java.lang.String ) != - NUMBER ) ; } assertThat ( org.springframework.core.io.Resource . getFilename ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { AbstractResource org.springframework.core.io.AbstractResource = new AbstractResource ( ) { @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return new java.io.ByteArrayInputStream ( new byte [] { 'a' , 'b' , 'c' } ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; } } ; assertThat ( org.springframework.core.io.AbstractResource . contentLength ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return new java.io.ByteArrayInputStream ( new byte [] { 'a' , 'b' , 'c' } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.io.IOException { AbstractResource org.springframework.core.io.AbstractResource = new AbstractResource ( ) { @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return null ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; } } ; org.springframework.core.io.AbstractResource . contentLength ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.core.io.Resource = new FileSystemResource ( java.lang.Class<? extends org.springframework.core.io.ResourceTests> ( ) . java.net.URL ( STRING ) . java.lang.String ( ) ) ; java.nio.channels.ReadableByteChannel java.nio.channels.ReadableByteChannel = null ; try { java.nio.channels.ReadableByteChannel = org.springframework.core.io.Resource . readableChannel ( ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( ( int ) org.springframework.core.io.Resource . contentLength ( ) ) ; java.nio.channels.ReadableByteChannel . int ( java.nio.ByteBuffer ) ; java.nio.ByteBuffer . java.nio.Buffer ( ) ; assertTrue ( java.nio.ByteBuffer . int ( ) > NUMBER ) ; } finally { if ( java.nio.channels.ReadableByteChannel != null ) { java.nio.channels.ReadableByteChannel . void ( ) ; } } }  <METHOD_END>
