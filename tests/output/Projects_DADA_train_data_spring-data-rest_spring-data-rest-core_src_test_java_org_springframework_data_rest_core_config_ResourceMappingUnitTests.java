<METHOD_START> @ Test public void void ( ) { org . springframework . data . rest . core . config . org.springframework.data.rest.core.config.ResourceMapping org.springframework.data.rest.core.config.ResourceMapping = new org . springframework . data . rest . core . config . org.springframework.data.rest.core.config.ResourceMapping ( findRel ( org.springframework.data.rest.core.config.ResourceMappingUnitTests.AnnotatedWithLeadingSlashPersonRepository .class ) , findPath ( org.springframework.data.rest.core.config.ResourceMappingUnitTests.AnnotatedWithLeadingSlashPersonRepository .class ) , findExported ( org.springframework.data.rest.core.config.ResourceMappingUnitTests.AnnotatedWithLeadingSlashPersonRepository .class ) ) ; assertThat ( org.springframework.data.rest.core.config.ResourceMapping . getRel ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.core.config.ResourceMapping . getPath ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.core.config.ResourceMapping . isExported ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.config.ResourceMappingUnitTests.AnnotatedWithLeadingSlashPersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; org . springframework . data . rest . core . config . org.springframework.data.rest.core.config.ResourceMapping org.springframework.data.rest.core.config.ResourceMapping = new org . springframework . data . rest . core . config . org.springframework.data.rest.core.config.ResourceMapping ( findRel ( java.lang.reflect.Method ) , findPath ( java.lang.reflect.Method ) , findExported ( java.lang.reflect.Method ) ) ; assertThat ( org.springframework.data.rest.core.config.ResourceMapping . getRel ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.core.config.ResourceMapping . getPath ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.core.config.ResourceMapping . isExported ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.rest.core.config.ResourceMappingUnitTests.AnnotatedWithLeadingSlashPersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; org . springframework . data . rest . core . config . org.springframework.data.rest.core.config.ResourceMapping org.springframework.data.rest.core.config.ResourceMapping = new org . springframework . data . rest . core . config . org.springframework.data.rest.core.config.ResourceMapping ( findRel ( java.lang.reflect.Method ) , findPath ( java.lang.reflect.Method ) , findExported ( java.lang.reflect.Method ) ) ; assertThat ( org.springframework.data.rest.core.config.ResourceMapping . getRel ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.core.config.ResourceMapping . getPath ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.rest.core.config.ResourceMapping . isExported ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ RestResource ( path = STRING ) org.springframework.data.rest.core.config.Page<org.springframework.data.rest.core.config.Person> < Person > org.springframework.data.rest.core.config.Page<org.springframework.data.rest.core.config.Person> ( @ Param ( STRING ) java.lang.String java.lang.String , Pageable org.springframework.data.rest.core.config.Pageable );  <METHOD_END>
<METHOD_START> @ RestResource ( path = STRING ) org.springframework.data.rest.core.config.Page<org.springframework.data.rest.core.config.Person> < Person > org.springframework.data.rest.core.config.Page<org.springframework.data.rest.core.config.Person> ( @ Param ( STRING ) java.lang.String java.lang.String , Pageable org.springframework.data.rest.core.config.Pageable );  <METHOD_END>
