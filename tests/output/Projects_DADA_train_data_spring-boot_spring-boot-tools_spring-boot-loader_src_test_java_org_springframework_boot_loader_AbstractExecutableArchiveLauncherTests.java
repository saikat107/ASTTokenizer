<METHOD_START> protected java.io.File java.io.File ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { java.io.File java.io.File = this . org.springframework.boot.loader.TemporaryFolder . newFile ( java.lang.String ) ; java.util.jar.JarOutputStream java.util.jar.JarOutputStream = new java.util.jar.JarOutputStream ( new java.io.FileOutputStream ( java.io.File ) ) ; java.util.jar.JarOutputStream . void ( new java.util.jar.JarEntry ( java.lang.String + STRING ) ) ; java.util.jar.JarOutputStream . void ( new java.util.jar.JarEntry ( java.lang.String + STRING ) ) ; java.util.jar.JarOutputStream . void ( new java.util.jar.JarEntry ( java.lang.String + STRING ) ) ; java.util.jar.JarEntry java.util.jar.JarEntry = new java.util.jar.JarEntry ( java.lang.String + STRING ) ; java.util.jar.JarEntry . void ( java.util.zip.ZipEntry . int ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; new java.util.jar.JarOutputStream ( java.io.ByteArrayOutputStream ) . void ( ) ; java.util.jar.JarEntry . void ( java.io.ByteArrayOutputStream . int ( ) ) ; java.util.zip.CRC32 java.util.zip.CRC32 = new java.util.zip.CRC32 ( ) ; java.util.zip.CRC32 . void ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; java.util.jar.JarEntry . void ( java.util.zip.CRC32 . long ( ) ) ; java.util.jar.JarOutputStream . void ( java.util.jar.JarEntry ) ; java.util.jar.JarOutputStream . void ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; java.util.jar.JarOutputStream . void ( ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> protected java.io.File java.io.File ( java.io.File java.io.File ) throws java.io.IOException { java.io.File java.io.File = this . org.springframework.boot.loader.TemporaryFolder . newFolder ( STRING ) ; java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; java.util.Enumeration<java.util.jar.JarEntry> < java.util.jar.JarEntry > java.util.Enumeration<java.util.jar.JarEntry> = java.util.jar.JarFile . java.util.Enumeration<java.util.jar.JarEntry> ( ) ; while ( java.util.Enumeration<java.util.jar.JarEntry> . boolean ( ) ) { java.util.jar.JarEntry java.util.jar.JarEntry = java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.util.jar.JarEntry . java.lang.String ( ) ) ; if ( java.util.jar.JarEntry . boolean ( ) ) { java.io.File . boolean ( ) ; } else { FileCopyUtils . copy ( java.util.jar.JarFile . java.io.InputStream ( java.util.jar.JarEntry ) , new java.io.FileOutputStream ( java.io.File ) ) ; } } java.util.jar.JarFile . void ( ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<java.net.URL> < java.net.URL > java.util.Set<java.net.URL> ( java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> ) throws java.net.MalformedURLException { java.util.Set<java.net.URL> < java.net.URL > java.util.Set<java.net.URL> = new java.util.HashSet <> ( java.util.List<org.springframework.boot.loader.Archive> . size ( ) ) ; for ( Archive org.springframework.boot.loader.Archive : java.util.List<org.springframework.boot.loader.Archive> ) { java.util.Set<java.net.URL> . boolean ( org.springframework.boot.loader.Archive . getUrl ( ) ) ; } return java.util.Set<java.net.URL> ; }  <METHOD_END>
