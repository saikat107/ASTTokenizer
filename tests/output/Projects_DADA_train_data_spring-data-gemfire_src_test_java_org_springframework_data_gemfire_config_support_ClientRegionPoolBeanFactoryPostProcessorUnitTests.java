<METHOD_START> protected org.springframework.data.gemfire.config.support.PropertyValue org.springframework.data.gemfire.config.support.PropertyValue ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { return new PropertyValue ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.support.MutablePropertyValues org.springframework.data.gemfire.config.support.MutablePropertyValues ( PropertyValue ... org.springframework.data.gemfire.config.support.PropertyValue[] ) { return new MutablePropertyValues ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.config.support.PropertyValue[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition = mock ( BeanDefinition .class , STRING ) ; BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition = mock ( BeanDefinition .class , STRING ) ; BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition = mock ( BeanDefinition .class , STRING ) ; ConfigurableListableBeanFactory org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory = mock ( ConfigurableListableBeanFactory .class , STRING ) ; when ( org.springframework.data.gemfire.config.support.BeanDefinition . getBeanClassName ( ) ) . thenReturn ( ClientRegionFactoryBean .class . java.lang.String ( ) ) ; when ( org.springframework.data.gemfire.config.support.BeanDefinition . getBeanClassName ( ) ) . thenReturn ( ClientRegionFactoryBean .class . java.lang.String ( ) ) ; when ( org.springframework.data.gemfire.config.support.BeanDefinition . getBeanClassName ( ) ) . thenReturn ( PoolFactoryBean .class . java.lang.String ( ) ) ; when ( org.springframework.data.gemfire.config.support.BeanDefinition . getBeanClassName ( ) ) . thenReturn ( java.lang.Object .class . java.lang.String ( ) ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . getBeanDefinitionNames ( ) ) . thenReturn ( ArrayUtils . asArray ( STRING , STRING , STRING , STRING ) ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . getBeanDefinition ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.config.support.BeanDefinition ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . getBeanDefinition ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.config.support.BeanDefinition ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . getBeanDefinition ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.config.support.BeanDefinition ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . getBeanDefinition ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.config.support.BeanDefinition ) ; when ( org.springframework.data.gemfire.config.support.BeanDefinition . getDependsOn ( ) ) . thenReturn ( ArrayUtils . asArray ( STRING ) ) ; when ( org.springframework.data.gemfire.config.support.BeanDefinition . getPropertyValues ( ) ) . thenReturn ( org.springframework.data.gemfire.config.support.MutablePropertyValues ( org.springframework.data.gemfire.config.support.PropertyValue ( ClientRegionPoolBeanFactoryPostProcessor . POOL_NAME_PROPERTY , STRING ) ) ) ; when ( org.springframework.data.gemfire.config.support.BeanDefinition . getPropertyValues ( ) ) . thenReturn ( org.springframework.data.gemfire.config.support.MutablePropertyValues ( org.springframework.data.gemfire.config.support.PropertyValue ( ClientRegionPoolBeanFactoryPostProcessor . POOL_NAME_PROPERTY , STRING ) ) ) ; org.springframework.data.gemfire.config.support.ClientRegionPoolBeanFactoryPostProcessor . postProcessBeanFactory ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , times ( NUMBER ) ) . getBeanDefinitionNames ( ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , times ( NUMBER ) ) . getBeanDefinition ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , times ( NUMBER ) ) . getBeanDefinition ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , times ( NUMBER ) ) . getBeanDefinition ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , times ( NUMBER ) ) . getBeanDefinition ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getBeanClassName ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getBeanClassName ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getPropertyValues ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getDependsOn ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . setDependsOn ( STRING , STRING ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getBeanClassName ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getPropertyValues ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , never ( ) ) . getDependsOn ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , never ( ) ) . setDependsOn ( isA ( java.lang.String [] .class ) ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getBeanClassName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.config.support.BeanDefinition . getBeanClassName ( ) ) . thenReturn ( java.lang.Object .class . java.lang.String ( ) ) ; assertThat ( org.springframework.data.gemfire.config.support.ClientRegionPoolBeanFactoryPostProcessor . isClientRegionBean ( org.springframework.data.gemfire.config.support.BeanDefinition ) ) . isFalse ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getBeanClassName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.config.support.BeanDefinition . getBeanClassName ( ) ) . thenReturn ( ClientRegionFactoryBean .class . java.lang.String ( ) ) ; assertThat ( org.springframework.data.gemfire.config.support.ClientRegionPoolBeanFactoryPostProcessor . isClientRegionBean ( org.springframework.data.gemfire.config.support.BeanDefinition ) ) . isTrue ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getBeanClassName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.config.support.BeanDefinition . getBeanClassName ( ) ) . thenReturn ( java.lang.Object .class . java.lang.String ( ) ) ; assertThat ( org.springframework.data.gemfire.config.support.ClientRegionPoolBeanFactoryPostProcessor . isPoolBean ( org.springframework.data.gemfire.config.support.BeanDefinition ) ) . isFalse ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getBeanClassName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.config.support.BeanDefinition . getBeanClassName ( ) ) . thenReturn ( PoolFactoryBean .class . java.lang.String ( ) ) ; assertThat ( org.springframework.data.gemfire.config.support.ClientRegionPoolBeanFactoryPostProcessor . isPoolBean ( org.springframework.data.gemfire.config.support.BeanDefinition ) ) . isTrue ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getBeanClassName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.config.support.BeanDefinition . getPropertyValues ( ) ) . thenReturn ( org.springframework.data.gemfire.config.support.MutablePropertyValues ( org.springframework.data.gemfire.config.support.PropertyValue ( ClientRegionPoolBeanFactoryPostProcessor . POOL_NAME_PROPERTY , STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.config.support.ClientRegionPoolBeanFactoryPostProcessor . getPoolName ( org.springframework.data.gemfire.config.support.BeanDefinition ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getPropertyValues ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.config.support.BeanDefinition . getPropertyValues ( ) ) . thenReturn ( org.springframework.data.gemfire.config.support.MutablePropertyValues ( ) ) ; assertThat ( org.springframework.data.gemfire.config.support.ClientRegionPoolBeanFactoryPostProcessor . getPoolName ( org.springframework.data.gemfire.config.support.BeanDefinition ) ) . isNull ( ) ; verify ( org.springframework.data.gemfire.config.support.BeanDefinition , times ( NUMBER ) ) . getPropertyValues ( ) ; }  <METHOD_END>
