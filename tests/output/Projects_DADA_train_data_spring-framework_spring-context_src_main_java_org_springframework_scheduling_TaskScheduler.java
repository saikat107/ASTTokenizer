<METHOD_START> java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , Trigger org.springframework.scheduling.Trigger );  <METHOD_END>
<METHOD_START> default java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , java.time.Instant java.time.Instant ) { return java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable , java.util.Date . java.util.Date ( java.time.Instant ) ) ; }  <METHOD_END>
<METHOD_START> java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , java.util.Date java.util.Date );  <METHOD_END>
<METHOD_START> default java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , java.time.Instant java.time.Instant , java.time.Duration java.time.Duration ) { return java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable , java.util.Date . java.util.Date ( java.time.Instant ) , java.time.Duration . long ( ) ) ; }  <METHOD_END>
<METHOD_START> java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , java.util.Date java.util.Date , long long );  <METHOD_END>
<METHOD_START> default java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , java.time.Duration java.time.Duration ) { return java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable , java.time.Duration . long ( ) ) ; }  <METHOD_END>
<METHOD_START> java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , long long );  <METHOD_END>
<METHOD_START> default java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , java.time.Instant java.time.Instant , java.time.Duration java.time.Duration ) { return java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable , java.util.Date . java.util.Date ( java.time.Instant ) , java.time.Duration . long ( ) ) ; }  <METHOD_END>
<METHOD_START> java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , java.util.Date java.util.Date , long long );  <METHOD_END>
<METHOD_START> default java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , java.time.Duration java.time.Duration ) { return java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable , java.time.Duration . long ( ) ) ; }  <METHOD_END>
<METHOD_START> java.util.concurrent.ScheduledFuture<?> < ? > java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable java.lang.Runnable , long long );  <METHOD_END>
