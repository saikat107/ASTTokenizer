<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebApplicationContext org.springframework.web.servlet.view.WebApplicationContext = mock ( WebApplicationContext .class ) ; given ( org.springframework.web.servlet.view.WebApplicationContext . getServletContext ( ) ) . willReturn ( new MockServletContext ( ) ) ; HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest = new MockHttpServletRequest ( ) ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.BaseViewTests.TestView org.springframework.web.servlet.view.BaseViewTests.TestView = new org.springframework.web.servlet.view.BaseViewTests.TestView ( org.springframework.web.servlet.view.WebApplicationContext ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . setApplicationContext ( org.springframework.web.servlet.view.WebApplicationContext ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . setApplicationContext ( org.springframework.web.servlet.view.WebApplicationContext ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Object ( ) ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> ) ; assertTrue ( org.springframework.web.servlet.view.BaseViewTests.TestView . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebApplicationContext org.springframework.web.servlet.view.WebApplicationContext = mock ( WebApplicationContext .class ) ; given ( org.springframework.web.servlet.view.WebApplicationContext . getServletContext ( ) ) . willReturn ( new MockServletContext ( ) ) ; HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest = new MockHttpServletRequest ( ) ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.BaseViewTests.TestView org.springframework.web.servlet.view.BaseViewTests.TestView = new org.springframework.web.servlet.view.BaseViewTests.TestView ( org.springframework.web.servlet.view.WebApplicationContext ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . setApplicationContext ( org.springframework.web.servlet.view.WebApplicationContext ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . setAttributes ( java.util.Properties ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.HashMap<java.lang.Object,java.lang.Object> <> ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Object ( ) ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> ) ; void ( java.util.Properties , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> ) ; assertTrue ( org.springframework.web.servlet.view.BaseViewTests.TestView . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebApplicationContext org.springframework.web.servlet.view.WebApplicationContext = mock ( WebApplicationContext .class ) ; given ( org.springframework.web.servlet.view.WebApplicationContext . getServletContext ( ) ) . willReturn ( new MockServletContext ( ) ) ; HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest = new MockHttpServletRequest ( ) ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.BaseViewTests.TestView org.springframework.web.servlet.view.BaseViewTests.TestView = new org.springframework.web.servlet.view.BaseViewTests.TestView ( org.springframework.web.servlet.view.WebApplicationContext ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . setApplicationContext ( org.springframework.web.servlet.view.WebApplicationContext ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . setAttributes ( java.util.Properties ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.HashMap<java.lang.Object,java.lang.Object> <> ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Object ( ) ) ; org.springframework.web.servlet.view.HttpServletRequest . setAttribute ( View . PATH_VARIABLES , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . render ( new java.util.HashMap <> ( ) , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.view.BaseViewTests.TestView . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebApplicationContext org.springframework.web.servlet.view.WebApplicationContext = mock ( WebApplicationContext .class ) ; given ( org.springframework.web.servlet.view.WebApplicationContext . getServletContext ( ) ) . willReturn ( new MockServletContext ( ) ) ; HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest = new MockHttpServletRequest ( ) ; HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.BaseViewTests.TestView org.springframework.web.servlet.view.BaseViewTests.TestView = new org.springframework.web.servlet.view.BaseViewTests.TestView ( org.springframework.web.servlet.view.WebApplicationContext ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . setApplicationContext ( org.springframework.web.servlet.view.WebApplicationContext ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . setAttributes ( java.util.Properties ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.HashMap<java.lang.Object,java.lang.Object> <> ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Object ( ) ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.view.BaseViewTests.TestView . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebApplicationContext org.springframework.web.servlet.view.WebApplicationContext = mock ( WebApplicationContext .class ) ; given ( org.springframework.web.servlet.view.WebApplicationContext . getServletContext ( ) ) . willReturn ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.BaseViewTests.TestView org.springframework.web.servlet.view.BaseViewTests.TestView = new org.springframework.web.servlet.view.BaseViewTests.TestView ( org.springframework.web.servlet.view.WebApplicationContext ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . setApplicationContext ( org.springframework.web.servlet.view.WebApplicationContext ) ; MockHttpServletRequest org.springframework.web.servlet.view.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.MockHttpServletResponse = new MockHttpServletResponse ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( View . PATH_VARIABLES , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.HashMap<java.lang.Object,java.lang.Object> <> ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Object ( ) ) ; org.springframework.web.servlet.view.BaseViewTests.TestView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.MockHttpServletRequest , org.springframework.web.servlet.view.MockHttpServletResponse ) ; void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.view.BaseViewTests.TestView . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.view.BaseViewTests.TestView . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractView org.springframework.web.servlet.view.AbstractView = new org.springframework.web.servlet.view.BaseViewTests.ConcreteView ( ) ; org.springframework.web.servlet.view.AbstractView . setAttributes ( null ) ; assertEquals ( NUMBER , org.springframework.web.servlet.view.AbstractView . getStaticAttributes ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractView org.springframework.web.servlet.view.AbstractView = new org.springframework.web.servlet.view.BaseViewTests.ConcreteView ( ) ; org.springframework.web.servlet.view.AbstractView . setAttributesCSV ( null ) ; assertEquals ( NUMBER , org.springframework.web.servlet.view.AbstractView . getStaticAttributes ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractView org.springframework.web.servlet.view.AbstractView = new org.springframework.web.servlet.view.BaseViewTests.ConcreteView ( ) ; org.springframework.web.servlet.view.AbstractView . setAttributesCSV ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.servlet.view.AbstractView . getStaticAttributes ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractView org.springframework.web.servlet.view.AbstractView = new org.springframework.web.servlet.view.BaseViewTests.ConcreteView ( ) ; org.springframework.web.servlet.view.AbstractView . setAttributesCSV ( STRING ) ; assertTrue ( org.springframework.web.servlet.view.AbstractView . getStaticAttributes ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.web.servlet.view.AbstractView . getStaticAttributes ( ) . get ( STRING ) . equals ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.view.AbstractView . getStaticAttributes ( ) . get ( STRING ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractView org.springframework.web.servlet.view.AbstractView = new org.springframework.web.servlet.view.BaseViewTests.ConcreteView ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.view.AbstractView . setAttributesCSV ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; assertTrue ( org.springframework.web.servlet.view.AbstractView . getStaticAttributes ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.web.servlet.view.AbstractView . getStaticAttributes ( ) . get ( STRING ) . equals ( java.lang.String ) ) ; assertTrue ( org.springframework.web.servlet.view.AbstractView . getStaticAttributes ( ) . get ( STRING ) . equals ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractView org.springframework.web.servlet.view.AbstractView = new org.springframework.web.servlet.view.BaseViewTests.ConcreteView ( ) ; try { org.springframework.web.servlet.view.AbstractView . setAttributesCSV ( STRING ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { org.springframework.web.servlet.view.AbstractView . setAttributesCSV ( STRING ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { org.springframework.web.servlet.view.AbstractView . setAttributesCSV ( STRING ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} try { org.springframework.web.servlet.view.AbstractView . setAttributesCSV ( STRING ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractView org.springframework.web.servlet.view.AbstractView = new org.springframework.web.servlet.view.BaseViewTests.ConcreteView ( ) ; org.springframework.web.servlet.view.AbstractView . setAttributesCSV ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.servlet.view.AbstractView . getStaticAttributes ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private void void ( java.util.Map java.util.Map , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map . java.util.Set ( ) . java.util.stream.Stream ( ) . void ( java.lang.Object -> assertEquals ( STRING + java.lang.Object + STRING , java.util.Map . java.lang.Object ( java.lang.Object ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse )			throws org.springframework.web.servlet.view.ServletException , java.io.IOException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> void ( WebApplicationContext org.springframework.web.servlet.view.WebApplicationContext ) { this . org.springframework.web.servlet.view.WebApplicationContext = org.springframework.web.servlet.view.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) throws org.springframework.web.servlet.view.ServletException , java.io.IOException { this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.web.servlet.view.ApplicationContextException { if ( boolean ) { throw new java.lang.RuntimeException ( STRING ) ; } this . boolean = true ; assertTrue ( getApplicationContext ( ) == org.springframework.web.servlet.view.WebApplicationContext ) ; }  <METHOD_END>
