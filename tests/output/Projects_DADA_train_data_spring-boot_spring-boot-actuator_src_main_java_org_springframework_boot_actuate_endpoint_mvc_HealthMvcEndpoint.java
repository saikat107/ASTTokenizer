<METHOD_START> public void ( HealthEndpoint org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint ) { this( org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint , true ); }  <METHOD_END>
<METHOD_START> public void ( HealthEndpoint org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint , boolean boolean ) { this( org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint , boolean , null ); }  <METHOD_END>
<METHOD_START> public void ( HealthEndpoint org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint , boolean boolean , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { super( org.springframework.boot.actuate.endpoint.mvc.HealthEndpoint ); this . boolean = boolean ; void ( ) ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private void void ( ) { void ( Status . DOWN , HttpStatus . SERVICE_UNAVAILABLE ) ; void ( Status . OUT_OF_SERVICE , HttpStatus . SERVICE_UNAVAILABLE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.boot.actuate.endpoint.mvc.Environment ) { this . org.springframework.boot.actuate.endpoint.mvc.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.actuate.endpoint.mvc.Environment , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> < java.lang.String , HttpStatus > java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> ) { Assert . notNull ( java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> = new java.util.HashMap <> ( java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> < java.lang.String , HttpStatus > java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> ) { Assert . notNull ( java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> . putAll ( java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> ) ; }  <METHOD_END>
<METHOD_START> public void void ( Status org.springframework.boot.actuate.endpoint.mvc.Status , HttpStatus org.springframework.boot.actuate.endpoint.mvc.HttpStatus ) { Assert . notNull ( org.springframework.boot.actuate.endpoint.mvc.Status , STRING ) ; Assert . notNull ( org.springframework.boot.actuate.endpoint.mvc.HttpStatus , STRING ) ; void ( org.springframework.boot.actuate.endpoint.mvc.Status . getCode ( ) , org.springframework.boot.actuate.endpoint.mvc.HttpStatus ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , HttpStatus org.springframework.boot.actuate.endpoint.mvc.HttpStatus ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.boot.actuate.endpoint.mvc.HttpStatus , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> . put ( java.lang.String , org.springframework.boot.actuate.endpoint.mvc.HttpStatus ) ; }  <METHOD_END>
<METHOD_START> @ ActuatorGetMapping @ ResponseBody public java.lang.Object java.lang.Object ( HttpServletRequest org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , java.security.Principal java.security.Principal ) { if ( ! getDelegate ( ) . isEnabled ( ) ) { return getDisabledResponse ( ) ; } Health org.springframework.boot.actuate.endpoint.mvc.Health = org.springframework.boot.actuate.endpoint.mvc.Health ( org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , java.security.Principal ) ; HttpStatus org.springframework.boot.actuate.endpoint.mvc.HttpStatus = org.springframework.boot.actuate.endpoint.mvc.HttpStatus ( org.springframework.boot.actuate.endpoint.mvc.Health ) ; if ( org.springframework.boot.actuate.endpoint.mvc.HttpStatus != null ) { return new ResponseEntity <> ( org.springframework.boot.actuate.endpoint.mvc.Health , org.springframework.boot.actuate.endpoint.mvc.HttpStatus ) ; } return org.springframework.boot.actuate.endpoint.mvc.Health ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.mvc.HttpStatus org.springframework.boot.actuate.endpoint.mvc.HttpStatus ( Health org.springframework.boot.actuate.endpoint.mvc.Health ) { java.lang.String java.lang.String = org.springframework.boot.actuate.endpoint.mvc.Health . getStatus ( ) . getCode ( ) ; if ( java.lang.String != null ) { java.lang.String = java.lang.String . java.lang.String ( ) . java.lang.String ( '_' , '-' ) ; for ( java.lang.String java.lang.String : RelaxedNames . forCamelCase ( java.lang.String ) ) { HttpStatus org.springframework.boot.actuate.endpoint.mvc.HttpStatus = this . java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.mvc.HttpStatus> . get ( java.lang.String ) ; if ( org.springframework.boot.actuate.endpoint.mvc.HttpStatus != null ) { return org.springframework.boot.actuate.endpoint.mvc.HttpStatus ; } } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.mvc.Health org.springframework.boot.actuate.endpoint.mvc.Health ( HttpServletRequest org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , java.security.Principal java.security.Principal ) { long long = java.lang.System . long ( ) ; if ( boolean ( long ) ) { this . long = long ; this . org.springframework.boot.actuate.endpoint.mvc.Health = getDelegate ( ) . invoke ( ) ; } if ( boolean ( org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , java.security.Principal ) ) { return this . org.springframework.boot.actuate.endpoint.mvc.Health ; } return Health . status ( this . org.springframework.boot.actuate.endpoint.mvc.Health . getStatus ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( long long ) { if ( this . org.springframework.boot.actuate.endpoint.mvc.Health == null ) { return true ; } return ( long - this . long ) >= getDelegate ( ) . getTimeToLive ( ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( HttpServletRequest org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest , java.security.Principal java.security.Principal ) { if ( ! this . boolean ) { return true ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( org.springframework.boot.actuate.endpoint.mvc.HttpServletRequest . isUserInRole ( java.lang.String ) ) { return true ; } if ( boolean ( java.security.Principal ) ) { Authentication org.springframework.boot.actuate.endpoint.mvc.Authentication = ( Authentication ) java.security.Principal ; for ( GrantedAuthority org.springframework.boot.actuate.endpoint.mvc.GrantedAuthority : org.springframework.boot.actuate.endpoint.mvc.Authentication . getAuthorities ( ) ) { java.lang.String java.lang.String = org.springframework.boot.actuate.endpoint.mvc.GrantedAuthority . getAuthority ( ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } } } return false ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { if ( this . java.util.List<java.lang.String> != null ) { return this . java.util.List<java.lang.String> ; } java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( this . org.springframework.boot.actuate.endpoint.mvc.RelaxedPropertyResolver . getProperty ( STRING , STRING ) ) ; java.lang.String[] = StringUtils . trimArrayElements ( java.lang.String[] ) ; return java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.security.Principal java.security.Principal ) { return ClassUtils . isPresent ( STRING , null ) && java.security.Principal instanceof Authentication ; }  <METHOD_END>
