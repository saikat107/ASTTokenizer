<METHOD_START> @ Before public void void ( ) java.sql.SQLException { this . javax.sql.XADataSource = mock ( javax.sql.XADataSource .class ) ; this . javax.sql.XAConnection = mock ( javax.sql.XAConnection .class ) ; this . javax.transaction.xa.XAResource = mock ( javax.transaction.xa.XAResource .class ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper = new DataSourceXAResourceRecoveryHelper ( this . javax.sql.XADataSource ) ; given ( this . javax.sql.XADataSource . javax.sql.XAConnection ( ) ) . willReturn ( this . javax.sql.XAConnection ) ; given ( this . javax.sql.XAConnection . javax.transaction.xa.XAResource ( ) ) . willReturn ( this . javax.transaction.xa.XAResource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { javax.transaction.xa.XAResource [] javax.transaction.xa.XAResource[] = this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; assertThat ( javax.transaction.xa.XAResource[] . int ) . isEqualTo ( NUMBER ) ; assertThat ( javax.transaction.xa.XAResource[] [ NUMBER ] ) . isSameAs ( this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper ) ; verify ( this . javax.sql.XADataSource , times ( NUMBER ) ) . getXAConnection ( ) ; verify ( this . javax.sql.XAConnection , times ( NUMBER ) ) . getXAResource ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( this . javax.sql.XADataSource . javax.sql.XAConnection ( anyString ( ) , anyString ( ) ) ) . willReturn ( this . javax.sql.XAConnection ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper = new DataSourceXAResourceRecoveryHelper ( this . javax.sql.XADataSource , STRING , STRING ) ; javax.transaction.xa.XAResource [] javax.transaction.xa.XAResource[] = this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; assertThat ( javax.transaction.xa.XAResource[] . int ) . isEqualTo ( NUMBER ) ; assertThat ( javax.transaction.xa.XAResource[] [ NUMBER ] ) . isSameAs ( this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper ) ; verify ( this . javax.sql.XADataSource , times ( NUMBER ) ) . getXAConnection ( STRING , STRING ) ; verify ( this . javax.sql.XAConnection , times ( NUMBER ) ) . getXAResource ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( this . javax.sql.XADataSource . javax.sql.XAConnection ( ) ) . willThrow ( new java.sql.SQLException ( STRING ) ) ; javax.transaction.xa.XAResource [] javax.transaction.xa.XAResource[] = this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; assertThat ( javax.transaction.xa.XAResource[] . int ) . isEqualTo ( NUMBER ) ; verify ( this . javax.sql.XADataSource , times ( NUMBER ) ) . getXAConnection ( ) ; verify ( this . javax.sql.XAConnection , times ( NUMBER ) ) . getXAResource ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . recover ( javax.transaction.xa.XAResource . int ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . recover ( javax.transaction.xa.XAResource . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException , java.sql.SQLException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . recover ( javax.transaction.xa.XAResource . int ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . recover ( javax.transaction.xa.XAResource . int ) ; verify ( this . javax.sql.XAConnection , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . start ( null , NUMBER ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . start ( null , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . end ( null , NUMBER ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . end ( null , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . prepare ( null ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . prepare ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . commit ( null , true ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . commit ( null , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . rollback ( null ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . rollback ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . isSameRM ( null ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . isSameRM ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . forget ( null ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . forget ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getTransactionTimeout ( ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . getTransactionTimeout ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.transaction.xa.XAException { this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . getXAResources ( ) ; this . org.springframework.boot.jta.narayana.DataSourceXAResourceRecoveryHelper . setTransactionTimeout ( NUMBER ) ; verify ( this . javax.transaction.xa.XAResource , times ( NUMBER ) ) . setTransactionTimeout ( NUMBER ) ; }  <METHOD_END>
