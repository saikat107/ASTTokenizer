<METHOD_START> void ( final SpringApplicationRunnerConfiguration org.springframework.boot.cli.command.run.SpringApplicationRunnerConfiguration , java.lang.String [] java.lang.String[] , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.cli.command.run.SpringApplicationRunnerConfiguration = org.springframework.boot.cli.command.run.SpringApplicationRunnerConfiguration ; this . java.lang.String[] = java.lang.String[] . java.lang.Object ( ) ; this . java.lang.String[] = java.lang.String[] . java.lang.Object ( ) ; this . org.springframework.boot.cli.command.run.GroovyCompiler = new GroovyCompiler ( org.springframework.boot.cli.command.run.SpringApplicationRunnerConfiguration ) ; int int = org.springframework.boot.cli.command.run.SpringApplicationRunnerConfiguration . getLogLevel ( ) . intValue ( ) ; if ( int <= java.util.logging.Level . java.util.logging.Level . int ( ) ) { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; } else if ( int <= java.util.logging.Level . java.util.logging.Level . int ( ) ) { java.lang.System . java.lang.String ( STRING , STRING ) ; } else if ( int == java.util.logging.Level . java.util.logging.Level . int ( ) ) { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { synchronized ( this . java.lang.Object ) { try { void ( ) ; java.lang.Object [] java.lang.Object[] = java.lang.Object[] ( ) ; void ( ) ; this . org.springframework.boot.cli.command.run.SpringApplicationRunner.RunThread = new org.springframework.boot.cli.command.run.SpringApplicationRunner.RunThread ( java.lang.Object[] ) ; this . org.springframework.boot.cli.command.run.SpringApplicationRunner.RunThread . void ( ) ; this . org.springframework.boot.cli.command.run.SpringApplicationRunner.RunThread . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( this . org.springframework.boot.cli.command.run.SpringApplicationRunner.FileWatchThread == null ) { throw java.lang.Exception ; } else { java.lang.Exception . void ( ) ; } } } }  <METHOD_END>
<METHOD_START> public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.boot.cli.command.run.SpringApplicationRunner.RunThread != null ) { this . org.springframework.boot.cli.command.run.SpringApplicationRunner.RunThread . void ( ) ; this . org.springframework.boot.cli.command.run.SpringApplicationRunner.RunThread = null ; } } }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( ) java.io.IOException { java.lang.Object [] java.lang.Object[] = this . org.springframework.boot.cli.command.run.GroovyCompiler . compile ( this . java.lang.String[] ) ; if ( java.lang.Object[] . int == NUMBER ) { throw new java.lang.RuntimeException ( STRING + java.util.Arrays . java.lang.String ( this . java.lang.String[] ) + STRING ) ; } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . org.springframework.boot.cli.command.run.SpringApplicationRunner.FileWatchThread == null && this . org.springframework.boot.cli.command.run.SpringApplicationRunnerConfiguration . isWatchForFileChanges ( ) ) { this . org.springframework.boot.cli.command.run.SpringApplicationRunner.FileWatchThread = new org.springframework.boot.cli.command.run.SpringApplicationRunner.FileWatchThread ( ) ; this . org.springframework.boot.cli.command.run.SpringApplicationRunner.FileWatchThread . void ( ) ; } }  <METHOD_END>
<METHOD_START> void ( java.lang.Object ... java.lang.Object[] ) { super( STRING + ( int ++ ) ); this . java.lang.Object[] = java.lang.Object[] ; if ( java.lang.Object[] . int != NUMBER && java.lang.Object[] [ NUMBER ] instanceof java.lang.Class ) { void ( ( ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ) . java.lang.ClassLoader ( ) ) ; } void ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { try { this . java.lang.Object = new SpringApplicationLauncher ( java.lang.ClassLoader ( ) ) . launch ( this . java.lang.Object[] , org.springframework.boot.cli.command.run.SpringApplicationRunner .this . java.lang.String[] ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . java.lang.Object != null ) { try { java.lang.reflect.Method java.lang.reflect.Method = this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method . java.lang.Object ( this . java.lang.Object ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } finally { this . java.lang.Object = null ; } } } }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING + ( int ++ ) ); this . long = NUMBER ; this . java.util.List<java.io.File> = java.util.List<java.io.File> ( ) ; for ( java.io.File java.io.File : this . java.util.List<java.io.File> ) { if ( java.io.File . boolean ( ) ) { long long = java.io.File . long ( ) ; if ( long > this . long ) { this . long = long ; } } } void ( false ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( ) { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = new java.util.ArrayList<java.io.File> <> ( ) ; for ( java.lang.String java.lang.String : org.springframework.boot.cli.command.run.SpringApplicationRunner .this . java.lang.String[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ResourceUtils . getUrls ( java.lang.String , org.springframework.boot.cli.command.run.SpringApplicationRunner .this . org.springframework.boot.cli.command.run.GroovyCompiler . getLoader ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { try { java.net.URL java.net.URL = new java.net.URL ( java.lang.String ) ; if ( STRING . boolean ( java.net.URL . java.lang.String ( ) ) ) { java.util.List<java.io.File> . boolean ( new java.io.File ( java.net.URL . java.lang.String ( ) ) ) ; } } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { } } } return java.util.List<java.io.File> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { while ( true ) { try { java.lang.Thread . void ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) ; for ( java.io.File java.io.File : this . java.util.List<java.io.File> ) { if ( java.io.File . boolean ( ) ) { long long = java.io.File . long ( ) ; if ( this . long < long ) { this . long = long ; void ( ) ; } } } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } }  <METHOD_END>
