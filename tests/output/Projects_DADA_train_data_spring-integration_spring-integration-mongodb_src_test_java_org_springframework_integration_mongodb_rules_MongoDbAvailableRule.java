<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.rules.Statement org.springframework.integration.mongodb.rules.Statement ( final Statement org.springframework.integration.mongodb.rules.Statement , final FrameworkMethod org.springframework.integration.mongodb.rules.FrameworkMethod , final java.lang.Object java.lang.Object ) { return new Statement ( ) { @ java.lang.Override public void void ( ) java.lang.Throwable { MongoDbAvailable org.springframework.integration.mongodb.rules.MongoDbAvailable = org.springframework.integration.mongodb.rules.FrameworkMethod . getAnnotation ( MongoDbAvailable .class ) ; if ( org.springframework.integration.mongodb.rules.MongoDbAvailable != null ) { try { MongoClientOptions org.springframework.integration.mongodb.rules.MongoClientOptions = new MongoClientOptions . MongoClientOptions ( ) . serverSelectionTimeout ( NUMBER ) . build ( ) ; MongoClient org.springframework.integration.mongodb.rules.MongoClient = new MongoClient ( ServerAddress . defaultHost ( ) , org.springframework.integration.mongodb.rules.MongoClientOptions ) ; org.springframework.integration.mongodb.rules.MongoClient . listDatabaseNames ( ) . first ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.mongodb.rules.Log . warn ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING + org.springframework.integration.mongodb.rules.FrameworkMethod . getName ( ) + STRING ) ; return; } } org.springframework.integration.mongodb.rules.Statement . evaluate ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { MongoDbAvailable org.springframework.integration.mongodb.rules.MongoDbAvailable = org.springframework.integration.mongodb.rules.FrameworkMethod . getAnnotation ( MongoDbAvailable .class ) ; if ( org.springframework.integration.mongodb.rules.MongoDbAvailable != null ) { try { MongoClientOptions org.springframework.integration.mongodb.rules.MongoClientOptions = new MongoClientOptions . MongoClientOptions ( ) . serverSelectionTimeout ( NUMBER ) . build ( ) ; MongoClient org.springframework.integration.mongodb.rules.MongoClient = new MongoClient ( ServerAddress . defaultHost ( ) , org.springframework.integration.mongodb.rules.MongoClientOptions ) ; org.springframework.integration.mongodb.rules.MongoClient . listDatabaseNames ( ) . first ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.mongodb.rules.Log . warn ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING + org.springframework.integration.mongodb.rules.FrameworkMethod . getName ( ) + STRING ) ; return; } } org.springframework.integration.mongodb.rules.Statement . evaluate ( ) ; }  <METHOD_END>
