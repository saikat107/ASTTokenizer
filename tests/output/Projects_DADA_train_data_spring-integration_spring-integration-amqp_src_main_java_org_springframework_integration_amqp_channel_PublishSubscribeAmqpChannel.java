<METHOD_START> public void ( java.lang.String java.lang.String , AbstractMessageListenerContainer org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate ) { super( java.lang.String , org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , org.springframework.integration.amqp.channel.AmqpTemplate , true ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , AbstractMessageListenerContainer org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper ) { super( java.lang.String , org.springframework.integration.amqp.channel.AbstractMessageListenerContainer , org.springframework.integration.amqp.channel.AmqpTemplate , true , org.springframework.integration.amqp.channel.AmqpHeaderMapper , org.springframework.integration.amqp.channel.AmqpHeaderMapper ); }  <METHOD_END>
<METHOD_START> public void void ( FanoutExchange org.springframework.integration.amqp.channel.FanoutExchange ) { this . org.springframework.integration.amqp.channel.FanoutExchange = org.springframework.integration.amqp.channel.FanoutExchange ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( AmqpAdmin org.springframework.integration.amqp.channel.AmqpAdmin , java.lang.String java.lang.String ) { if ( this . org.springframework.integration.amqp.channel.FanoutExchange == null ) { java.lang.String java.lang.String = STRING + java.lang.String ; this . org.springframework.integration.amqp.channel.FanoutExchange = new FanoutExchange ( java.lang.String ) ; } org.springframework.integration.amqp.channel.AmqpAdmin . declareExchange ( this . org.springframework.integration.amqp.channel.FanoutExchange ) ; org.springframework.integration.amqp.channel.AmqpAdmin . declareQueue ( this . org.springframework.integration.amqp.channel.Queue ) ; this . org.springframework.integration.amqp.channel.Binding = BindingBuilder . bind ( this . org.springframework.integration.amqp.channel.Queue ) . to ( this . org.springframework.integration.amqp.channel.FanoutExchange ) ; org.springframework.integration.amqp.channel.AmqpAdmin . declareBinding ( this . org.springframework.integration.amqp.channel.Binding ) ; if ( ! this . boolean && this . getAmqpTemplate ( ) instanceof RabbitTemplate ) { ConnectionFactory org.springframework.integration.amqp.channel.ConnectionFactory = this . getConnectionFactory ( ) ; if ( org.springframework.integration.amqp.channel.ConnectionFactory != null ) { org.springframework.integration.amqp.channel.ConnectionFactory . addConnectionListener ( this ) ; } } this . boolean = true ; return this . org.springframework.integration.amqp.channel.Queue . getName ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . isRunning ( ) ) { AmqpAdmin org.springframework.integration.amqp.channel.AmqpAdmin = this . getAdmin ( ) ; if ( org.springframework.integration.amqp.channel.AmqpAdmin != null ) { if ( this . org.springframework.integration.amqp.channel.Queue != null ) { org.springframework.integration.amqp.channel.AmqpAdmin . declareQueue ( this . org.springframework.integration.amqp.channel.Queue ) ; } if ( this . org.springframework.integration.amqp.channel.Binding != null ) { org.springframework.integration.amqp.channel.AmqpAdmin . declareBinding ( this . org.springframework.integration.amqp.channel.Binding ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.amqp.channel.AbstractDispatcher org.springframework.integration.amqp.channel.AbstractDispatcher ( ) { BroadcastingDispatcher org.springframework.integration.amqp.channel.BroadcastingDispatcher = new BroadcastingDispatcher ( true ) ; org.springframework.integration.amqp.channel.BroadcastingDispatcher . setBeanFactory ( this . getBeanFactory ( ) ) ; return org.springframework.integration.amqp.channel.BroadcastingDispatcher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return ( this . org.springframework.integration.amqp.channel.FanoutExchange != null ) ? this . org.springframework.integration.amqp.channel.FanoutExchange . getName ( ) : STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. destroy ( ) ; if ( this . getConnectionFactory ( ) != null ) { this . getConnectionFactory ( ) . removeConnectionListener ( this ) ; this . boolean = false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . void ( ) ; super. start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Connection org.springframework.integration.amqp.channel.Connection ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Connection org.springframework.integration.amqp.channel.Connection ) {	}  <METHOD_END>
