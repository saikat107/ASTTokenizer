<METHOD_START> @ java.lang.Override public org.springframework.web.socket.messaging.Message<byte[]> < byte [] > org.springframework.web.socket.messaging.Message<byte[]> ( Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> , java.lang.Throwable java.lang.Throwable ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . ERROR ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setMessage ( java.lang.Throwable . java.lang.String ( ) ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setLeaveMutable ( true ) ; StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = null ; if ( org.springframework.web.socket.messaging.Message<byte[]> != null ) { org.springframework.web.socket.messaging.StompHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<byte[]> , StompHeaderAccessor .class ) ; java.lang.String java.lang.String = org.springframework.web.socket.messaging.StompHeaderAccessor . getReceipt ( ) ; if ( java.lang.String != null ) { org.springframework.web.socket.messaging.StompHeaderAccessor . setReceiptId ( java.lang.String ) ; } } return org.springframework.web.socket.messaging.Message<byte[]> ( org.springframework.web.socket.messaging.StompHeaderAccessor , byte[] , java.lang.Throwable , org.springframework.web.socket.messaging.StompHeaderAccessor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.messaging.Message<byte[]> < byte [] > org.springframework.web.socket.messaging.Message<byte[]> ( Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<byte[]> , StompHeaderAccessor .class ) ; Assert . notNull ( org.springframework.web.socket.messaging.StompHeaderAccessor , STRING ) ; if ( ! org.springframework.web.socket.messaging.StompHeaderAccessor . isMutable ( ) ) { org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.web.socket.messaging.Message<byte[]> ) ; } return org.springframework.web.socket.messaging.Message<byte[]> ( org.springframework.web.socket.messaging.StompHeaderAccessor , org.springframework.web.socket.messaging.Message<byte[]> . getPayload ( ) , null , null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.messaging.Message<byte[]> < byte [] > org.springframework.web.socket.messaging.Message<byte[]> ( StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor , byte [] byte[] , java.lang.Throwable java.lang.Throwable , StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor ) { return MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
