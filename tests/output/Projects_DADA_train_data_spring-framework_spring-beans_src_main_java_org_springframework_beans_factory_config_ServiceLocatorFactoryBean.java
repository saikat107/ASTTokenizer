<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends java.lang.Exception> < ? extends java.lang.Exception > java.lang.Class<? extends java.lang.Exception> ) { if ( java.lang.Class<> != null && ! java.lang.Exception .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } this . java.lang.reflect.Constructor<java.lang.Exception> = java.lang.reflect.Constructor<java.lang.Exception> ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.beans.factory.config.BeanFactory ) throws org.springframework.beans.factory.config.BeansException { if ( ! ( org.springframework.beans.factory.config.BeanFactory instanceof ListableBeanFactory ) ) { throw new FatalBeanException ( STRING ) ; } this . org.springframework.beans.factory.config.ListableBeanFactory = ( ListableBeanFactory ) org.springframework.beans.factory.config.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.lang.Class<> == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.lang.Object = java.lang.reflect.Proxy . java.lang.Object ( this . java.lang.Class<> . java.lang.ClassLoader ( ) , new java.lang.Class<?> < ? > [] { this . java.lang.Class<> } , new org.springframework.beans.factory.config.ServiceLocatorFactoryBean.ServiceLocatorInvocationHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.reflect.Constructor<java.lang.Exception> < java.lang.Exception > java.lang.reflect.Constructor<java.lang.Exception> ( java.lang.Class<? extends java.lang.Exception> < ? extends java.lang.Exception > java.lang.Class<? extends java.lang.Exception> ) { try { return ( java.lang.reflect.Constructor<java.lang.Exception> < java.lang.Exception > ) java.lang.Class<> . java.lang.reflect.Constructor<> ( new java.lang.Class<?> < ? > [] { java.lang.String .class , java.lang.Throwable .class } ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { try { return ( java.lang.reflect.Constructor<java.lang.Exception> < java.lang.Exception > ) java.lang.Class<> . java.lang.reflect.Constructor<> ( new java.lang.Class<?> < ? > [] { java.lang.Throwable .class } ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { try { return ( java.lang.reflect.Constructor<java.lang.Exception> < java.lang.Exception > ) java.lang.Class<> . java.lang.reflect.Constructor<> ( new java.lang.Class<?> < ? > [] { java.lang.String .class } ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } } } }  <METHOD_END>
<METHOD_START> protected java.lang.Exception java.lang.Exception ( java.lang.reflect.Constructor<java.lang.Exception> < java.lang.Exception > java.lang.reflect.Constructor<java.lang.Exception> , BeansException org.springframework.beans.factory.config.BeansException ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Constructor<java.lang.Exception> . java.lang.Class<?>[] ( ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.lang.Class<?>[] . int ] ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { if ( java.lang.String .class == java.lang.Class<?>[] [ int ] ) { java.lang.Object[] [ int ] = org.springframework.beans.factory.config.BeansException . getMessage ( ) ; } else if ( java.lang.Class<?>[] [ int ] . boolean ( org.springframework.beans.factory.config.BeansException ) ) { java.lang.Object[] [ int ] = org.springframework.beans.factory.config.BeansException ; } } return BeanUtils . instantiateClass ( java.lang.reflect.Constructor<java.lang.Exception> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( ReflectionUtils . isEqualsMethod ( java.lang.reflect.Method ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( ReflectionUtils . isHashCodeMethod ( java.lang.reflect.Method ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( ReflectionUtils . isToStringMethod ( java.lang.reflect.Method ) ) { return STRING + java.lang.Class<> . java.lang.String ( ) ; } else { return java.lang.Object ( java.lang.reflect.Method , java.lang.Object[] ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.reflect.Method ) ; try { java.lang.String java.lang.String = java.lang.String ( java.lang.Object[] ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { return org.springframework.beans.factory.config.ListableBeanFactory . getBean ( java.lang.String , java.lang.Class<> ) ; } else { return org.springframework.beans.factory.config.ListableBeanFactory . getBean ( java.lang.Class<> ) ; } } catch ( BeansException org.springframework.beans.factory.config.BeansException ) { if ( java.lang.reflect.Constructor<java.lang.Exception> != null ) { throw java.lang.Exception ( java.lang.reflect.Constructor<java.lang.Exception> , org.springframework.beans.factory.config.BeansException ) ; } throw org.springframework.beans.factory.config.BeansException ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object [] java.lang.Object[] ) { java.lang.String java.lang.String = STRING ; if ( java.lang.Object[] != null && java.lang.Object[] . int == NUMBER && java.lang.Object[] [ NUMBER ] != null ) { java.lang.String = java.lang.Object[] [ NUMBER ] . java.lang.String ( ) ; } if ( java.util.Properties != null ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { java.lang.String = java.lang.String ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.NoSuchMethodException { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.Class<?>[] ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; if ( java.lang.Class<?>[] . int > NUMBER || void .class == java.lang.Class<> ) { throw new java.lang.UnsupportedOperationException ( STRING + STRING + java.lang.reflect.Method ) ; } return java.lang.Class<> ; }  <METHOD_END>
