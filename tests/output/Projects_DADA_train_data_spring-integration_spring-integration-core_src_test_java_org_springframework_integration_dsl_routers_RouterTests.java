<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.dsl.routers.ListableBeanFactory . containsBean ( STRING ) ; int [] int[] = new int [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } ; for ( int int : int[] ) { this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage <> ( int ) ) ; } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( int[] [ int * NUMBER ] * NUMBER , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( int[] [ int * NUMBER + NUMBER ] , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage < java.lang.Object > ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.util.List .class ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) java.lang.Object ; assertArrayEquals ( new java.lang.Integer [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } , java.util.List<java.lang.Integer> . java.lang.Integer[] ( new java.lang.Integer [ java.util.List<java.lang.Integer> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.dsl.routers.PollableChannel = new QueueChannel ( ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.dsl.routers.PollableChannel ) . build ( ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; assertNotNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , true ) . build ( ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , true ) . build ( ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; try { this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( MessageDeliveryException org.springframework.integration.dsl.routers.MessageDeliveryException ) { assertThat ( org.springframework.integration.dsl.routers.MessageDeliveryException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; try { this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.dsl.routers.MessagingException ) { assertThat ( org.springframework.integration.dsl.routers.MessagingException . getCause ( ) , instanceOf ( DestinationResolutionException .class ) ) ; assertThat ( org.springframework.integration.dsl.routers.MessagingException . getCause ( ) . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; try { this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.dsl.routers.MessagingException ) { assertThat ( org.springframework.integration.dsl.routers.MessagingException . getCause ( ) , instanceOf ( DestinationResolutionException .class ) ) ; assertThat ( org.springframework.integration.dsl.routers.MessagingException . getCause ( ) . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; try { this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( MessageDeliveryException org.springframework.integration.dsl.routers.MessageDeliveryException ) { assertThat ( org.springframework.integration.dsl.routers.MessageDeliveryException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage <> ( NUMBER ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage <> ( NUMBER ) ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage <> ( new java.util.concurrent.atomic.AtomicReference <> ( STRING ) ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = ( java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ) org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; java.util.concurrent.atomic.AtomicReference<java.lang.String> = ( java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ) org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ; assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.dsl.routers.QueueChannel . getQueueSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.dsl.routers.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = this . org.springframework.integration.dsl.routers.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.dsl.routers.QueueChannel = new QueueChannel ( ) ; Message < java.lang.String > org.springframework.integration.dsl.routers.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.dsl.routers.QueueChannel ) . build ( ) ; this . org.springframework.integration.dsl.routers.MessageChannel . send ( org.springframework.integration.dsl.routers.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.dsl.routers.Message<?> = org.springframework.integration.dsl.routers.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.routers.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.dsl.routers.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.util.List .class ) ) ; assertThat ( ( ( java.util.List<?> < ? > ) java.lang.Object ) . int ( ) , greaterThanOrEqualTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.QueueChannel org.springframework.integration.dsl.routers.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) .< java.lang.Integer , java.lang.Boolean > route ( p -> p % NUMBER == NUMBER , m -> m . channelMapping ( true , STRING ) . subFlowMapping ( false , f -> f .< Integer > handle ( ( p , h ) -> p * NUMBER ) ) . defaultOutputToParentFlow ( ) ) . channel ( MessageChannels . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return f -> f .< Boolean > route ( STRING , m -> m . subFlowMapping ( true , sf -> sf .< String > handle ( ( p , h ) -> p . toUpperCase ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return f -> f .< String , Boolean > route ( STRING :: equals , m -> m . resolutionRequired ( false ) . subFlowMapping ( true , sf -> sf . transform ( String .class , String :: toLowerCase ) . channel ( MessageChannels . queue ( STRING ) ) ) . defaultSubFlowMapping ( sf -> sf . channel ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return f -> f . split ( ) .< Integer , Boolean > route ( p -> p % NUMBER == NUMBER , m -> m . subFlowMapping ( true , sf -> sf .< Integer > handle ( ( p , h ) -> p * NUMBER ) ) . subFlowMapping ( false , sf -> sf .< Integer > handle ( ( p , h ) -> p * NUMBER ) ) ) . aggregate ( ) . channel ( MessageChannels . queue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) public org.springframework.integration.dsl.routers.MessageChannel org.springframework.integration.dsl.routers.MessageChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) public org.springframework.integration.dsl.routers.MessageChannel org.springframework.integration.dsl.routers.MessageChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.MessageChannel org.springframework.integration.dsl.routers.MessageChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) .< java.lang.String , java.lang.String > transform ( p -> p . replaceFirst ( STRING , STRING ) ) . routeToRecipients ( r -> r . recipient ( STRING , STRING ) . recipientMessageSelector ( STRING , m -> m . getHeaders ( ) . containsKey ( STRING ) && ( boolean ) m . getHeaders ( ) . get ( STRING ) ) . recipientFlow ( STRING , f -> f .< String , String > transform ( String :: toUpperCase ) . channel ( MessageChannels . queue ( STRING ) ) ) . recipientFlow ( ( String p ) -> p . startsWith ( STRING ) , f -> f . transform ( STRING :: concat ) . channel ( MessageChannels . queue ( STRING ) ) ) . recipientFlow ( new FunctionExpression < Message < ? > > ( m -> STRING . equals ( m . getPayload ( ) ) ) , f -> f . channel ( MessageChannels . queue ( STRING ) ) ) . defaultOutputToParentFlow ( ) ) . channel ( STRING ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.RouterTests.RoutingTestBean org.springframework.integration.dsl.routers.RouterTests.RoutingTestBean ( ) { return new org.springframework.integration.dsl.routers.RouterTests.RoutingTestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . route ( STRING , STRING ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . route ( new org.springframework.integration.dsl.routers.RouterTests.RoutingTestBean ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return f -> f . route ( ( String p ) -> routingTestBean ( ) . routePayload ( p ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . route ( java.lang.String .class , p -> p . equals ( STRING ) || p . equals ( STRING ) ? new String [] { STRING , STRING } : null , s -> s . suffix ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.PollableChannel org.springframework.integration.dsl.routers.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.PollableChannel org.springframework.integration.dsl.routers.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return f -> f .< Object , Class < ? > > route ( Object :: getClass , m -> m . channelMapping ( String .class , STRING ) . channelMapping ( Integer .class , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return f -> f .< String , String > route ( p -> p , r -> r . resolutionRequired ( false ) . defaultOutputToParentFlow ( ) ) . channel ( MessageChannels . queue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return f -> f . routeToRecipients ( r -> r . recipient ( alwaysRecipient ( ) ) . recipient ( STRING ) . recipient ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return f -> f .< AtomicReference < String > > handle ( ( p , h ) -> { p . set ( p . get ( ) + STRING ) ; return p ; } ) . channel ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return f -> f .< AtomicReference < String > > handle ( ( p , h ) -> { p . set ( p . get ( ) + STRING ) ; return p ; } ) . channel ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.PollableChannel org.springframework.integration.dsl.routers.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.QueueChannel org.springframework.integration.dsl.routers.QueueChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.routers.IntegrationFlow org.springframework.integration.dsl.routers.IntegrationFlow ( ) { return f -> f . scatterGather ( scatterer -> scatterer . applySequence ( true ) . recipientFlow ( m -> true , sf -> sf . handle ( ( p , h ) -> Math . random ( ) * NUMBER ) ) . recipientFlow ( m -> true , sf -> sf . handle ( ( p , h ) -> Math . random ( ) * NUMBER ) ) . recipientFlow ( m -> true , sf -> sf . handle ( ( p , h ) -> Math . random ( ) * NUMBER ) ) , gatherer -> gatherer . releaseStrategy ( group -> group . size ( ) == NUMBER || group . getMessages ( ) . stream ( ) . anyMatch ( m -> ( Double ) m . getPayload ( ) > NUMBER ) ) , scatterGather -> scatterGather . gatherTimeout ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ Router public java.lang.String java.lang.String ( @ Header ( STRING ) java.lang.String java.lang.String ) { return java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( Message < ? > org.springframework.integration.dsl.routers.Message<?> ) { if ( org.springframework.integration.dsl.routers.Message<> . getPayload ( ) . equals ( STRING ) ) { return STRING ; } else if ( org.springframework.integration.dsl.routers.Message<> . getPayload ( ) . equals ( STRING ) ) { return STRING ; } return null ; }  <METHOD_END>
