<METHOD_START> @ Test public void void ( ) java.io.IOException { ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer . setPoolSize ( NUMBER ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.io.ByteArrayInputStream . void ( ) ; byte [] byte[] = org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer . deserialize ( java.io.ByteArrayInputStream ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; } try { org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer . deserialize ( java.io.ByteArrayInputStream ) ; fail ( STRING ) ; } catch ( SoftEndOfStreamException org.springframework.integration.ip.tcp.serializer.SoftEndOfStreamException ) { } assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer , STRING , java.util.Set .class ) . size ( ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer , STRING , java.util.Set .class ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ByteArrayRawSerializer org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer = new ByteArrayRawSerializer ( ) ; org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer . setPoolSize ( NUMBER ) ; org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer . setMaxMessageSize ( NUMBER ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ; byte [] byte[] = org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer . deserialize ( java.io.ByteArrayInputStream ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer , STRING , java.util.Set .class ) . size ( ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer , STRING , java.util.Set .class ) . size ( ) ) ; assertNotSame ( byte[] , TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.serializer.ByteArrayRawSerializer , STRING , java.util.Set .class ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
