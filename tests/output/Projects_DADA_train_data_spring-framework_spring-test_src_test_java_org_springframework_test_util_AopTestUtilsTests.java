<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { getTargetObject ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getTargetObject ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ; assertSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getTargetObject ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ) ; assertSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getTargetObject ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ) ; assertSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getTargetObject ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ) ) ; assertNotSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getTargetObject ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ) ) ; assertNotSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { getUltimateTargetObject ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getUltimateTargetObject ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ; assertSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getUltimateTargetObject ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ) ; assertSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getUltimateTargetObject ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ) ; assertSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getUltimateTargetObject ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ) ) ; assertSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getUltimateTargetObject ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ) ) ; assertSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getUltimateTargetObject ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ) ) ; assertSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = getUltimateTargetObject ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.FooImpl ) ) ) ) ; assertSame ( org.springframework.test.util.AopTestUtilsTests.FooImpl , org.springframework.test.util.AopTestUtilsTests.Foo ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo ) { ProxyFactory org.springframework.test.util.ProxyFactory = new ProxyFactory ( ) ; org.springframework.test.util.ProxyFactory . setTarget ( org.springframework.test.util.AopTestUtilsTests.Foo ) ; org.springframework.test.util.ProxyFactory . addInterface ( org.springframework.test.util.AopTestUtilsTests.Foo .class ) ; org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = ( org.springframework.test.util.AopTestUtilsTests.Foo ) org.springframework.test.util.ProxyFactory . getProxy ( ) ; assertTrue ( STRING , AopUtils . isJdkDynamicProxy ( org.springframework.test.util.AopTestUtilsTests.Foo ) ) ; assertThat ( org.springframework.test.util.AopTestUtilsTests.Foo , instanceOf ( org.springframework.test.util.AopTestUtilsTests.Foo .class ) ) ; return org.springframework.test.util.AopTestUtilsTests.Foo ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo ( org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo ) { ProxyFactory org.springframework.test.util.ProxyFactory = new ProxyFactory ( ) ; org.springframework.test.util.ProxyFactory . setTarget ( org.springframework.test.util.AopTestUtilsTests.Foo ) ; org.springframework.test.util.ProxyFactory . setProxyTargetClass ( true ) ; org.springframework.test.util.AopTestUtilsTests.Foo org.springframework.test.util.AopTestUtilsTests.Foo = ( org.springframework.test.util.AopTestUtilsTests.Foo ) org.springframework.test.util.ProxyFactory . getProxy ( ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( org.springframework.test.util.AopTestUtilsTests.Foo ) ) ; assertThat ( org.springframework.test.util.AopTestUtilsTests.Foo , instanceOf ( org.springframework.test.util.AopTestUtilsTests.FooImpl .class ) ) ; return org.springframework.test.util.AopTestUtilsTests.Foo ; }  <METHOD_END>
