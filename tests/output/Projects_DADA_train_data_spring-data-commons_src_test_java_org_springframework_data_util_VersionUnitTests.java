<METHOD_START> @ Test public void void ( ) { Version org.springframework.data.util.Version = new Version ( NUMBER ) ; Version org.springframework.data.util.Version = new Version ( NUMBER ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( org.springframework.data.util.Version ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( org.springframework.data.util.Version ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Version org.springframework.data.util.Version = new Version ( NUMBER , NUMBER ) ; Version org.springframework.data.util.Version = new Version ( NUMBER , NUMBER ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( org.springframework.data.util.Version ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( org.springframework.data.util.Version ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Version org.springframework.data.util.Version = new Version ( NUMBER , NUMBER , NUMBER ) ; Version org.springframework.data.util.Version = new Version ( NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( org.springframework.data.util.Version ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( org.springframework.data.util.Version ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Version org.springframework.data.util.Version = new Version ( NUMBER , NUMBER , NUMBER , NUMBER ) ; Version org.springframework.data.util.Version = new Version ( NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( org.springframework.data.util.Version ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( org.springframework.data.util.Version ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Version org.springframework.data.util.Version = Version . parse ( STRING ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( new Version ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Version org.springframework.data.util.Version = Version . parse ( STRING ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( new Version ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Version org.springframework.data.util.Version = Version . parse ( STRING ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( new Version ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Version org.springframework.data.util.Version = Version . parse ( STRING ) ; assertThat ( org.springframework.data.util.Version ) . isEqualTo ( new Version ( NUMBER , NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Version org.springframework.data.util.Version = new Version ( NUMBER , NUMBER , NUMBER , NUMBER ) ; Version org.springframework.data.util.Version = new Version ( NUMBER , NUMBER , NUMBER , NUMBER ) ; Version org.springframework.data.util.Version = new Version ( NUMBER , NUMBER , NUMBER ) ; Version org.springframework.data.util.Version = new Version ( NUMBER , NUMBER ) ; Version org.springframework.data.util.Version = new Version ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . isGreaterThan ( org.springframework.data.util.Version ) ) . isTrue ( ) ; assertThat ( org.springframework.data.util.Version . isGreaterThan ( org.springframework.data.util.Version ) ) . isFalse ( ) ; assertThat ( org.springframework.data.util.Version . is ( org.springframework.data.util.Version ) ) . isTrue ( ) ; assertThat ( org.springframework.data.util.Version . isLessThan ( org.springframework.data.util.Version ) ) . isTrue ( ) ; assertThat ( org.springframework.data.util.Version . isLessThan ( org.springframework.data.util.Version ) ) . isFalse ( ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isLessThan ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isLessThan ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isLessThan ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isLessThan ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( null ) ) . isGreaterThan ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isGreaterThan ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isGreaterThan ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isGreaterThan ( NUMBER ) ; assertThat ( org.springframework.data.util.Version . compareTo ( org.springframework.data.util.Version ) ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Version ( NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( new Version ( NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( new Version ( NUMBER , NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( new Version ( NUMBER , NUMBER , NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( new Version ( NUMBER , NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( new Version ( NUMBER , NUMBER , NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( new Version ( NUMBER , NUMBER , NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( Version . parse ( STRING ) ) . isEqualTo ( new Version ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( Version . parse ( STRING ) ) . isEqualTo ( new Version ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.util.ExpectedException . expectCause ( Matchers . instanceOf ( java.lang.IllegalArgumentException .class ) ) ; org.springframework.data.util.ExpectedException . expectMessage ( STRING ) ; Version . parse ( STRING ) ; }  <METHOD_END>
