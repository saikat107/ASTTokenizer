<METHOD_START> private void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.dsl.context.BeanFactory ) throws org.springframework.integration.dsl.context.BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory .class , org.springframework.integration.dsl.context.BeanFactory , STRING + STRING + STRING ) ; this . org.springframework.integration.dsl.context.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) org.springframework.integration.dsl.context.BeanFactory ; this . org.springframework.integration.dsl.context.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; this . org.springframework.integration.dsl.context.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( this . org.springframework.integration.dsl.context.ConfigurableListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder ( IntegrationFlow org.springframework.integration.dsl.context.IntegrationFlow ) { return new org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder ( org.springframework.integration.dsl.context.IntegrationFlow ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder ) { IntegrationFlow org.springframework.integration.dsl.context.IntegrationFlow = org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder . org.springframework.integration.dsl.context.IntegrationFlowRegistration . getIntegrationFlow ( ) ; java.lang.String java.lang.String = org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder . org.springframework.integration.dsl.context.IntegrationFlowRegistration . getId ( ) ; if ( java.lang.String == null ) { java.lang.String = java.lang.String ( org.springframework.integration.dsl.context.IntegrationFlow , null ) ; org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder . org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder ( java.lang.String ) ; } IntegrationFlow org.springframework.integration.dsl.context.IntegrationFlow = ( IntegrationFlow ) java.lang.Object ( org.springframework.integration.dsl.context.IntegrationFlow , java.lang.String , null ) ; org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder . org.springframework.integration.dsl.context.IntegrationFlowRegistration . setIntegrationFlow ( org.springframework.integration.dsl.context.IntegrationFlow ) ; final java.lang.String java.lang.String = java.lang.String ; org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder . java.util.Map<java.lang.Object,java.lang.String> . void ( ( java.lang.Object , java.lang.String ) -> java.lang.Object ( java.lang.Object , java.lang.String , java.lang.String ) ) ; if ( org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder . boolean ) { org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder . org.springframework.integration.dsl.context.IntegrationFlowRegistration . start ( ) ; } this . java.util.Map<java.lang.String,org.springframework.integration.dsl.context.IntegrationFlowRegistration> . put ( java.lang.String , org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder . org.springframework.integration.dsl.context.IntegrationFlowRegistration ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( java.lang.String == null ) { java.lang.String = java.lang.String ( java.lang.Object , java.lang.String ) ; } this . org.springframework.integration.dsl.context.AutowiredAnnotationBeanPostProcessor . processInjection ( java.lang.Object ) ; java.lang.Object = this . org.springframework.integration.dsl.context.ConfigurableListableBeanFactory . initializeBean ( java.lang.Object , java.lang.String ) ; this . org.springframework.integration.dsl.context.ConfigurableListableBeanFactory . registerSingleton ( java.lang.String , java.lang.Object ) ; if ( java.lang.String != null ) { this . org.springframework.integration.dsl.context.ConfigurableListableBeanFactory . registerDependentBean ( java.lang.String , java.lang.String ) ; } if ( java.lang.Object instanceof DisposableBean ) { ( ( DefaultSingletonBeanRegistry ) this . org.springframework.integration.dsl.context.ConfigurableListableBeanFactory ) . registerDisposableBean ( java.lang.String , ( DisposableBean ) java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.context.IntegrationFlowRegistration org.springframework.integration.dsl.context.IntegrationFlowRegistration ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,org.springframework.integration.dsl.context.IntegrationFlowRegistration> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public synchronized void void ( java.lang.String java.lang.String ) { if ( this . java.util.Map<java.lang.String,org.springframework.integration.dsl.context.IntegrationFlowRegistration> . containsKey ( java.lang.String ) ) { IntegrationFlowRegistration org.springframework.integration.dsl.context.IntegrationFlowRegistration = this . java.util.Map<java.lang.String,org.springframework.integration.dsl.context.IntegrationFlowRegistration> . remove ( java.lang.String ) ; org.springframework.integration.dsl.context.IntegrationFlowRegistration . stop ( ) ; ( ( DefaultSingletonBeanRegistry ) this . org.springframework.integration.dsl.context.ConfigurableListableBeanFactory ) . destroySingleton ( java.lang.String ) ; } else { throw new java.lang.IllegalStateException ( STRING + STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.context.MessagingTemplate org.springframework.integration.dsl.context.MessagingTemplate ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,org.springframework.integration.dsl.context.IntegrationFlowRegistration> . get ( java.lang.String ) . getMessagingTemplate ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { if ( java.lang.Object instanceof NamedComponent && ( ( NamedComponent ) java.lang.Object ) . getComponentName ( ) != null ) { return ( ( NamedComponent ) java.lang.Object ) . getComponentName ( ) ; } java.lang.String java.lang.String = ( java.lang.String != null ? java.lang.String : STRING ) + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; java.lang.String java.lang.String = java.lang.String ; int int = - NUMBER ; while ( int == - NUMBER || this . org.springframework.integration.dsl.context.ConfigurableListableBeanFactory . containsBean ( java.lang.String ) ) { int ++ ; java.lang.String = java.lang.String + BeanFactoryUtils . GENERATED_BEAN_NAME_SEPARATOR + int ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( IntegrationFlow org.springframework.integration.dsl.context.IntegrationFlow ) { this . org.springframework.integration.dsl.context.IntegrationFlowRegistration = new IntegrationFlowRegistration ( org.springframework.integration.dsl.context.IntegrationFlow ) ; this . org.springframework.integration.dsl.context.IntegrationFlowRegistration . setBeanFactory ( org.springframework.integration.dsl.context.IntegrationFlowContext .this . org.springframework.integration.dsl.context.ConfigurableListableBeanFactory ) ; this . org.springframework.integration.dsl.context.IntegrationFlowRegistration . setIntegrationFlowContext ( org.springframework.integration.dsl.context.IntegrationFlowContext .this ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder ( java.lang.String java.lang.String ) { this . org.springframework.integration.dsl.context.IntegrationFlowRegistration . setId ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder ( java.lang.Object java.lang.Object ) { return org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder ( null , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder org.springframework.integration.dsl.context.IntegrationFlowContext.IntegrationFlowRegistrationBuilder ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.Object,java.lang.String> . java.lang.String ( java.lang.Object , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.context.IntegrationFlowRegistration org.springframework.integration.dsl.context.IntegrationFlowRegistration ( ) { org.springframework.integration.dsl.context.IntegrationFlowContext .this . void ( this ) ; return this . org.springframework.integration.dsl.context.IntegrationFlowRegistration ; }  <METHOD_END>
