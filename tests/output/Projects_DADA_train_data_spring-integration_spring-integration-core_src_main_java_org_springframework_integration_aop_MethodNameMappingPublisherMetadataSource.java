<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { Assert . notEmpty ( java.util.Map<java.lang.String,java.lang.String> , STRING ) ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> ) { this . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> = java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : this . java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { if ( PatternMatchUtils . simpleMatch ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.lang.reflect.Method . java.lang.String ( ) ) ) { return java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.lang.reflect.Method java.lang.reflect.Method ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> : this . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> ( ) ) { if ( PatternMatchUtils . simpleMatch ( java.util.Map.Entry<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . java.lang.String ( ) , java.lang.reflect.Method . java.lang.String ( ) ) ) { return java.util.Map.Entry<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . java.util.Map<java.lang.String,java.lang.String> ( ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : this . java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { if ( PatternMatchUtils . simpleMatch ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.lang.reflect.Method . java.lang.String ( ) ) ) { return java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ; } } return null ; }  <METHOD_END>
