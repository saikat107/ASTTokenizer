<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( int int ) { super( int ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { super( java.lang.String , int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.embedded.tomcat.WebServer org.springframework.boot.web.embedded.tomcat.WebServer ( ServletContextInitializer ... org.springframework.boot.web.embedded.tomcat.ServletContextInitializer[] ) { Tomcat org.springframework.boot.web.embedded.tomcat.Tomcat = new Tomcat ( ) ; java.io.File java.io.File = ( this . java.io.File != null ? this . java.io.File : createTempDir ( STRING ) ) ; org.springframework.boot.web.embedded.tomcat.Tomcat . setBaseDir ( java.io.File . java.lang.String ( ) ) ; Connector org.springframework.boot.web.embedded.tomcat.Connector = new Connector ( this . java.lang.String ) ; org.springframework.boot.web.embedded.tomcat.Tomcat . getService ( ) . addConnector ( org.springframework.boot.web.embedded.tomcat.Connector ) ; void ( org.springframework.boot.web.embedded.tomcat.Connector ) ; org.springframework.boot.web.embedded.tomcat.Tomcat . setConnector ( org.springframework.boot.web.embedded.tomcat.Connector ) ; org.springframework.boot.web.embedded.tomcat.Tomcat . getHost ( ) . setAutoDeploy ( false ) ; void ( org.springframework.boot.web.embedded.tomcat.Tomcat . getEngine ( ) ) ; for ( Connector org.springframework.boot.web.embedded.tomcat.Connector : this . java.util.List<org.springframework.boot.web.embedded.tomcat.Connector> ) { org.springframework.boot.web.embedded.tomcat.Tomcat . getService ( ) . addConnector ( org.springframework.boot.web.embedded.tomcat.Connector ) ; } void ( org.springframework.boot.web.embedded.tomcat.Tomcat . getHost ( ) , org.springframework.boot.web.embedded.tomcat.ServletContextInitializer[] ) ; return org.springframework.boot.web.embedded.tomcat.TomcatWebServer ( org.springframework.boot.web.embedded.tomcat.Tomcat ) ; }  <METHOD_END>
<METHOD_START> private void void ( Engine org.springframework.boot.web.embedded.tomcat.Engine ) { org.springframework.boot.web.embedded.tomcat.Engine . setBackgroundProcessorDelay ( this . int ) ; for ( Valve org.springframework.boot.web.embedded.tomcat.Valve : this . java.util.List<org.springframework.boot.web.embedded.tomcat.Valve> ) { org.springframework.boot.web.embedded.tomcat.Engine . getPipeline ( ) . addValve ( org.springframework.boot.web.embedded.tomcat.Valve ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Host org.springframework.boot.web.embedded.tomcat.Host , ServletContextInitializer [] org.springframework.boot.web.embedded.tomcat.ServletContextInitializer[] ) { java.io.File java.io.File = getValidDocumentRoot ( ) ; java.io.File = ( java.io.File != null ? java.io.File : createTempDir ( STRING ) ) ; final TomcatEmbeddedContext org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext = new TomcatEmbeddedContext ( ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setName ( getContextPath ( ) ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setDisplayName ( getDisplayName ( ) ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setPath ( getContextPath ( ) ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setDocBase ( java.io.File . java.lang.String ( ) ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . addLifecycleListener ( new FixContextListener ( ) ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setParentClassLoader ( this . org.springframework.boot.web.embedded.tomcat.ResourceLoader != null ? this . org.springframework.boot.web.embedded.tomcat.ResourceLoader . getClassLoader ( ) : ClassUtils . getDefaultClassLoader ( ) ) ; void ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) ; void ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) ; try { org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setUseRelativeRedirects ( false ) ; } catch ( java.lang.NoSuchMethodError java.lang.NoSuchMethodError ) { } SkipPatternJarScanner . apply ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext , this . java.util.Set<java.lang.String> ) ; WebappLoader org.springframework.boot.web.embedded.tomcat.WebappLoader = new WebappLoader ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . getParentClassLoader ( ) ) ; org.springframework.boot.web.embedded.tomcat.WebappLoader . setLoaderClass ( TomcatEmbeddedWebappClassLoader .class . java.lang.String ( ) ) ; org.springframework.boot.web.embedded.tomcat.WebappLoader . setDelegate ( true ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . setLoader ( org.springframework.boot.web.embedded.tomcat.WebappLoader ) ; if ( isRegisterDefaultServlet ( ) ) { void ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) ; } if ( shouldRegisterJspServlet ( ) ) { void ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) ; void ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) ; } org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . addLifecycleListener ( new org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.StaticResourceConfigurer ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) ) ; ServletContextInitializer [] org.springframework.boot.web.embedded.tomcat.ServletContextInitializer[] = mergeInitializers ( org.springframework.boot.web.embedded.tomcat.ServletContextInitializer[] ) ; void ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext , org.springframework.boot.web.embedded.tomcat.ServletContextInitializer[] ) ; org.springframework.boot.web.embedded.tomcat.Host . addChild ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) ; void ( org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( TomcatEmbeddedContext org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) { org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . addLocaleEncodingMappingParameter ( java.util.Locale . java.util.Locale . java.lang.String ( ) , java.nio.charset.Charset . java.lang.String ( ) ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . addLocaleEncodingMappingParameter ( java.util.Locale . java.util.Locale . java.lang.String ( ) , java.nio.charset.Charset . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( TomcatEmbeddedContext org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) { for ( java.util.Map . java.util.Map.Entry<java.util.Locale,java.nio.charset.Charset> < java.util.Locale , java.nio.charset.Charset > java.util.Map.Entry<java.util.Locale,java.nio.charset.Charset> : getLocaleCharsetMappings ( ) . entrySet ( ) ) { java.util.Locale java.util.Locale = java.util.Map.Entry<java.util.Locale,java.nio.charset.Charset> . java.util.Locale ( ) ; java.nio.charset.Charset java.nio.charset.Charset = java.util.Map.Entry<java.util.Locale,java.nio.charset.Charset> . java.nio.charset.Charset ( ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . addLocaleEncodingMappingParameter ( java.util.Locale . java.lang.String ( ) , java.nio.charset.Charset . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Context org.springframework.boot.web.embedded.tomcat.Context ) { Wrapper org.springframework.boot.web.embedded.tomcat.Wrapper = org.springframework.boot.web.embedded.tomcat.Context . createWrapper ( ) ; org.springframework.boot.web.embedded.tomcat.Wrapper . setName ( STRING ) ; org.springframework.boot.web.embedded.tomcat.Wrapper . setServletClass ( STRING ) ; org.springframework.boot.web.embedded.tomcat.Wrapper . addInitParameter ( STRING , STRING ) ; org.springframework.boot.web.embedded.tomcat.Wrapper . addInitParameter ( STRING , STRING ) ; org.springframework.boot.web.embedded.tomcat.Wrapper . setLoadOnStartup ( NUMBER ) ; org.springframework.boot.web.embedded.tomcat.Wrapper . setOverridable ( true ) ; org.springframework.boot.web.embedded.tomcat.Context . addChild ( org.springframework.boot.web.embedded.tomcat.Wrapper ) ; void ( org.springframework.boot.web.embedded.tomcat.Context , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( Context org.springframework.boot.web.embedded.tomcat.Context ) { Wrapper org.springframework.boot.web.embedded.tomcat.Wrapper = org.springframework.boot.web.embedded.tomcat.Context . createWrapper ( ) ; org.springframework.boot.web.embedded.tomcat.Wrapper . setName ( STRING ) ; org.springframework.boot.web.embedded.tomcat.Wrapper . setServletClass ( getJsp ( ) . getClassName ( ) ) ; org.springframework.boot.web.embedded.tomcat.Wrapper . addInitParameter ( STRING , STRING ) ; for ( java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : getJsp ( ) . getInitParameters ( ) . entrySet ( ) ) { org.springframework.boot.web.embedded.tomcat.Wrapper . addInitParameter ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; } org.springframework.boot.web.embedded.tomcat.Wrapper . setLoadOnStartup ( NUMBER ) ; org.springframework.boot.web.embedded.tomcat.Context . addChild ( org.springframework.boot.web.embedded.tomcat.Wrapper ) ; void ( org.springframework.boot.web.embedded.tomcat.Context , STRING , STRING ) ; void ( org.springframework.boot.web.embedded.tomcat.Context , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( Context org.springframework.boot.web.embedded.tomcat.Context , java.lang.String java.lang.String , java.lang.String java.lang.String ) { org.springframework.boot.web.embedded.tomcat.Context . addServletMapping ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( TomcatEmbeddedContext org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext ) { try { ServletContainerInitializer org.springframework.boot.web.embedded.tomcat.ServletContainerInitializer = ( ServletContainerInitializer ) ClassUtils . forName ( STRING , null ) . newInstance ( ) ; org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext . addServletContainerInitializer ( org.springframework.boot.web.embedded.tomcat.ServletContainerInitializer , null ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> protected void void ( Connector org.springframework.boot.web.embedded.tomcat.Connector ) { int int = ( getPort ( ) >= NUMBER ? getPort ( ) : NUMBER ) ; org.springframework.boot.web.embedded.tomcat.Connector . setPort ( int ) ; if ( StringUtils . hasText ( this . getServerHeader ( ) ) ) { org.springframework.boot.web.embedded.tomcat.Connector . setAttribute ( STRING , this . getServerHeader ( ) ) ; } if ( org.springframework.boot.web.embedded.tomcat.Connector . getProtocolHandler ( ) instanceof AbstractProtocol ) { void ( ( AbstractProtocol < ? > ) org.springframework.boot.web.embedded.tomcat.Connector . getProtocolHandler ( ) ) ; } if ( java.nio.charset.Charset ( ) != null ) { org.springframework.boot.web.embedded.tomcat.Connector . setURIEncoding ( java.nio.charset.Charset ( ) . java.lang.String ( ) ) ; } org.springframework.boot.web.embedded.tomcat.Connector . setProperty ( STRING , STRING ) ; if ( getSsl ( ) != null && getSsl ( ) . isEnabled ( ) ) { void ( org.springframework.boot.web.embedded.tomcat.Connector ) ; } if ( getCompression ( ) != null && getCompression ( ) . getEnabled ( ) ) { void ( org.springframework.boot.web.embedded.tomcat.Connector ) ; } for ( TomcatConnectorCustomizer org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer : this . java.util.List<org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer> ) { org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer . customize ( org.springframework.boot.web.embedded.tomcat.Connector ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AbstractProtocol < ? > org.springframework.boot.web.embedded.tomcat.AbstractProtocol<?> ) { if ( getAddress ( ) != null ) { org.springframework.boot.web.embedded.tomcat.AbstractProtocol<> . setAddress ( getAddress ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Connector org.springframework.boot.web.embedded.tomcat.Connector ) { ProtocolHandler org.springframework.boot.web.embedded.tomcat.ProtocolHandler = org.springframework.boot.web.embedded.tomcat.Connector . getProtocolHandler ( ) ; Assert . state ( org.springframework.boot.web.embedded.tomcat.ProtocolHandler instanceof AbstractHttp11JsseProtocol , STRING + STRING ) ; void ( ( AbstractHttp11JsseProtocol < ? > ) org.springframework.boot.web.embedded.tomcat.ProtocolHandler , getSsl ( ) ) ; org.springframework.boot.web.embedded.tomcat.Connector . setScheme ( STRING ) ; org.springframework.boot.web.embedded.tomcat.Connector . setSecure ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( Connector org.springframework.boot.web.embedded.tomcat.Connector ) { ProtocolHandler org.springframework.boot.web.embedded.tomcat.ProtocolHandler = org.springframework.boot.web.embedded.tomcat.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.web.embedded.tomcat.ProtocolHandler instanceof AbstractHttp11Protocol ) { AbstractHttp11Protocol < ? > org.springframework.boot.web.embedded.tomcat.AbstractHttp11Protocol<?> = ( AbstractHttp11Protocol < ? > ) org.springframework.boot.web.embedded.tomcat.ProtocolHandler ; Compression org.springframework.boot.web.embedded.tomcat.Compression = getCompression ( ) ; org.springframework.boot.web.embedded.tomcat.AbstractHttp11Protocol<> . setCompression ( STRING ) ; org.springframework.boot.web.embedded.tomcat.AbstractHttp11Protocol<> . setCompressionMinSize ( org.springframework.boot.web.embedded.tomcat.Compression . getMinResponseSize ( ) ) ; org.springframework.boot.web.embedded.tomcat.AbstractHttp11Protocol<> . setCompressibleMimeType ( StringUtils . arrayToCommaDelimitedString ( org.springframework.boot.web.embedded.tomcat.Compression . getMimeTypes ( ) ) ) ; if ( getCompression ( ) . getExcludedUserAgents ( ) != null ) { org.springframework.boot.web.embedded.tomcat.AbstractHttp11Protocol<> . setNoCompressionUserAgents ( StringUtils . arrayToCommaDelimitedString ( getCompression ( ) . getExcludedUserAgents ( ) ) ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( AbstractHttp11JsseProtocol < ? > org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<?> , Ssl org.springframework.boot.web.embedded.tomcat.Ssl ) { org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setSSLEnabled ( true ) ; org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setSslProtocol ( org.springframework.boot.web.embedded.tomcat.Ssl . getProtocol ( ) ) ; void ( org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> , org.springframework.boot.web.embedded.tomcat.Ssl ) ; org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setKeystorePass ( org.springframework.boot.web.embedded.tomcat.Ssl . getKeyStorePassword ( ) ) ; org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setKeyPass ( org.springframework.boot.web.embedded.tomcat.Ssl . getKeyPassword ( ) ) ; org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setKeyAlias ( org.springframework.boot.web.embedded.tomcat.Ssl . getKeyAlias ( ) ) ; java.lang.String java.lang.String = StringUtils . arrayToCommaDelimitedString ( org.springframework.boot.web.embedded.tomcat.Ssl . getCiphers ( ) ) ; org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setCiphers ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ) ; if ( org.springframework.boot.web.embedded.tomcat.Ssl . getEnabledProtocols ( ) != null ) { try { for ( SSLHostConfig org.springframework.boot.web.embedded.tomcat.SSLHostConfig : org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . findSslHostConfigs ( ) ) { org.springframework.boot.web.embedded.tomcat.SSLHostConfig . setProtocols ( StringUtils . arrayToCommaDelimitedString ( org.springframework.boot.web.embedded.tomcat.Ssl . getEnabledProtocols ( ) ) ) ; } } catch ( java.lang.NoSuchMethodError java.lang.NoSuchMethodError ) { Assert . isTrue ( org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setProperty ( STRING , StringUtils . arrayToCommaDelimitedString ( org.springframework.boot.web.embedded.tomcat.Ssl . getEnabledProtocols ( ) ) ) , STRING ) ; } } if ( getSslStoreProvider ( ) != null ) { TomcatURLStreamHandlerFactory org.springframework.boot.web.embedded.tomcat.TomcatURLStreamHandlerFactory = TomcatURLStreamHandlerFactory . getInstance ( ) ; org.springframework.boot.web.embedded.tomcat.TomcatURLStreamHandlerFactory . addUserFactory ( new SslStoreProviderUrlStreamHandlerFactory ( getSslStoreProvider ( ) ) ) ; org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setKeystoreFile ( SslStoreProviderUrlStreamHandlerFactory . KEY_STORE_URL ) ; org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setTruststoreFile ( SslStoreProviderUrlStreamHandlerFactory . TRUST_STORE_URL ) ; } else { void ( org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> , org.springframework.boot.web.embedded.tomcat.Ssl ) ; void ( org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> , org.springframework.boot.web.embedded.tomcat.Ssl ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AbstractHttp11JsseProtocol < ? > org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<?> , Ssl org.springframework.boot.web.embedded.tomcat.Ssl ) { if ( org.springframework.boot.web.embedded.tomcat.Ssl . getClientAuth ( ) == ClientAuth . NEED ) { org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setClientAuth ( java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) ; } else if ( org.springframework.boot.web.embedded.tomcat.Ssl . getClientAuth ( ) == ClientAuth . WANT ) { org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setClientAuth ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( AbstractHttp11JsseProtocol < ? > org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<?> , SslStoreProvider org.springframework.boot.web.embedded.tomcat.SslStoreProvider ) { Assert . isInstanceOf ( Http11NioProtocol .class , org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractHttp11JsseProtocol < ? > org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<?> , Ssl org.springframework.boot.web.embedded.tomcat.Ssl ) { try { org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setKeystoreFile ( ResourceUtils . getURL ( org.springframework.boot.web.embedded.tomcat.Ssl . getKeyStore ( ) ) . toString ( ) ) ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { throw new WebServerException ( STRING + java.io.FileNotFoundException . java.lang.String ( ) , java.io.FileNotFoundException ) ; } if ( org.springframework.boot.web.embedded.tomcat.Ssl . getKeyStoreType ( ) != null ) { org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setKeystoreType ( org.springframework.boot.web.embedded.tomcat.Ssl . getKeyStoreType ( ) ) ; } if ( org.springframework.boot.web.embedded.tomcat.Ssl . getKeyStoreProvider ( ) != null ) { org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setKeystoreProvider ( org.springframework.boot.web.embedded.tomcat.Ssl . getKeyStoreProvider ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AbstractHttp11JsseProtocol < ? > org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<?> , Ssl org.springframework.boot.web.embedded.tomcat.Ssl ) { if ( org.springframework.boot.web.embedded.tomcat.Ssl . getTrustStore ( ) != null ) { try { org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setTruststoreFile ( ResourceUtils . getURL ( org.springframework.boot.web.embedded.tomcat.Ssl . getTrustStore ( ) ) . toString ( ) ) ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { throw new WebServerException ( STRING + java.io.FileNotFoundException . java.lang.String ( ) , java.io.FileNotFoundException ) ; } } org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setTruststorePass ( org.springframework.boot.web.embedded.tomcat.Ssl . getTrustStorePassword ( ) ) ; if ( org.springframework.boot.web.embedded.tomcat.Ssl . getTrustStoreType ( ) != null ) { org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setTruststoreType ( org.springframework.boot.web.embedded.tomcat.Ssl . getTrustStoreType ( ) ) ; } if ( org.springframework.boot.web.embedded.tomcat.Ssl . getTrustStoreProvider ( ) != null ) { org.springframework.boot.web.embedded.tomcat.AbstractHttp11JsseProtocol<> . setTruststoreProvider ( org.springframework.boot.web.embedded.tomcat.Ssl . getTrustStoreProvider ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Context org.springframework.boot.web.embedded.tomcat.Context , ServletContextInitializer [] org.springframework.boot.web.embedded.tomcat.ServletContextInitializer[] ) { TomcatStarter org.springframework.boot.web.embedded.tomcat.TomcatStarter = new TomcatStarter ( org.springframework.boot.web.embedded.tomcat.ServletContextInitializer[] ) ; if ( org.springframework.boot.web.embedded.tomcat.Context instanceof TomcatEmbeddedContext ) { ( ( TomcatEmbeddedContext ) org.springframework.boot.web.embedded.tomcat.Context ) . setStarter ( org.springframework.boot.web.embedded.tomcat.TomcatStarter ) ; } org.springframework.boot.web.embedded.tomcat.Context . addServletContainerInitializer ( org.springframework.boot.web.embedded.tomcat.TomcatStarter , java.util.Set<java.lang.Class<?>> ) ; for ( LifecycleListener org.springframework.boot.web.embedded.tomcat.LifecycleListener : this . java.util.List<org.springframework.boot.web.embedded.tomcat.LifecycleListener> ) { org.springframework.boot.web.embedded.tomcat.Context . addLifecycleListener ( org.springframework.boot.web.embedded.tomcat.LifecycleListener ) ; } for ( Valve org.springframework.boot.web.embedded.tomcat.Valve : this . java.util.List<org.springframework.boot.web.embedded.tomcat.Valve> ) { org.springframework.boot.web.embedded.tomcat.Context . getPipeline ( ) . addValve ( org.springframework.boot.web.embedded.tomcat.Valve ) ; } for ( ErrorPage org.springframework.boot.web.embedded.tomcat.ErrorPage : getErrorPages ( ) ) { new TomcatErrorPage ( org.springframework.boot.web.embedded.tomcat.ErrorPage ) . addToContext ( org.springframework.boot.web.embedded.tomcat.Context ) ; } for ( MimeMappings . MimeMappings MimeMappings.Mapping : getMimeMappings ( ) ) { org.springframework.boot.web.embedded.tomcat.Context . addMimeMapping ( MimeMappings.Mapping . getExtension ( ) , MimeMappings.Mapping . getMimeType ( ) ) ; } void ( org.springframework.boot.web.embedded.tomcat.Context ) ; for ( TomcatContextCustomizer org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer : this . java.util.List<org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer> ) { org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer . customize ( org.springframework.boot.web.embedded.tomcat.Context ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Context org.springframework.boot.web.embedded.tomcat.Context ) { long long = long ( ) ; org.springframework.boot.web.embedded.tomcat.Context . setSessionTimeout ( ( int ) long ) ; if ( isPersistSession ( ) ) { Manager org.springframework.boot.web.embedded.tomcat.Manager = org.springframework.boot.web.embedded.tomcat.Context . getManager ( ) ; if ( org.springframework.boot.web.embedded.tomcat.Manager == null ) { org.springframework.boot.web.embedded.tomcat.Manager = new StandardManager ( ) ; org.springframework.boot.web.embedded.tomcat.Context . setManager ( org.springframework.boot.web.embedded.tomcat.Manager ) ; } void ( org.springframework.boot.web.embedded.tomcat.Manager ) ; } else { org.springframework.boot.web.embedded.tomcat.Context . addLifecycleListener ( new org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.DisablePersistSessionListener ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Manager org.springframework.boot.web.embedded.tomcat.Manager ) { Assert . state ( org.springframework.boot.web.embedded.tomcat.Manager instanceof StandardManager , STRING + org.springframework.boot.web.embedded.tomcat.Manager . getClass ( ) . getName ( ) ) ; java.io.File java.io.File = getValidSessionStoreDir ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; ( ( StandardManager ) org.springframework.boot.web.embedded.tomcat.Manager ) . setPathname ( java.io.File . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private long long ( ) { long long = getSessionTimeout ( ) ; if ( long > NUMBER ) { long = java.lang.Math . long ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( long ) , NUMBER ) ; } return long ; }  <METHOD_END>
<METHOD_START> protected void void ( Context org.springframework.boot.web.embedded.tomcat.Context ) {	}  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.embedded.tomcat.TomcatWebServer org.springframework.boot.web.embedded.tomcat.TomcatWebServer ( Tomcat org.springframework.boot.web.embedded.tomcat.Tomcat ) { return new TomcatWebServer ( org.springframework.boot.web.embedded.tomcat.Tomcat , getPort ( ) >= NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.boot.web.embedded.tomcat.ResourceLoader ) { this . org.springframework.boot.web.embedded.tomcat.ResourceLoader = org.springframework.boot.web.embedded.tomcat.ResourceLoader ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; void ( StringUtils . commaDelimitedListToSet ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { Assert . notNull ( java.util.Collection<java.lang.String> , STRING ) ; this . java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.util.Collection<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; this . java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasLength ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends org.springframework.boot.web.embedded.tomcat.Valve> < ? extends Valve > java.util.Collection<? extends org.springframework.boot.web.embedded.tomcat.Valve> ) { Assert . notNull ( java.util.Collection<> , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.Valve> = new java.util.ArrayList <> ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.boot.web.embedded.tomcat.Valve> < Valve > java.util.Collection<org.springframework.boot.web.embedded.tomcat.Valve> ( ) { return this . java.util.List<org.springframework.boot.web.embedded.tomcat.Valve> ; }  <METHOD_END>
<METHOD_START> public void void ( Valve ... org.springframework.boot.web.embedded.tomcat.Valve[] ) { Assert . notNull ( org.springframework.boot.web.embedded.tomcat.Valve[] , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.Valve> . addAll ( java.util.Arrays . java.util.List ( org.springframework.boot.web.embedded.tomcat.Valve[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends org.springframework.boot.web.embedded.tomcat.Valve> < ? extends Valve > java.util.Collection<? extends org.springframework.boot.web.embedded.tomcat.Valve> ) { Assert . notNull ( java.util.Collection<> , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.Valve> = new java.util.ArrayList <> ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.boot.web.embedded.tomcat.Valve> < Valve > java.util.Collection<org.springframework.boot.web.embedded.tomcat.Valve> ( ) { return this . java.util.List<org.springframework.boot.web.embedded.tomcat.Valve> ; }  <METHOD_END>
<METHOD_START> public void void ( Valve ... org.springframework.boot.web.embedded.tomcat.Valve[] ) { Assert . notNull ( org.springframework.boot.web.embedded.tomcat.Valve[] , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.Valve> . addAll ( java.util.Arrays . java.util.List ( org.springframework.boot.web.embedded.tomcat.Valve[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends org.springframework.boot.web.embedded.tomcat.LifecycleListener> < ? extends LifecycleListener > java.util.Collection<? extends org.springframework.boot.web.embedded.tomcat.LifecycleListener> ) { Assert . notNull ( java.util.Collection<> , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.LifecycleListener> = new java.util.ArrayList <> ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.boot.web.embedded.tomcat.LifecycleListener> < LifecycleListener > java.util.Collection<org.springframework.boot.web.embedded.tomcat.LifecycleListener> ( ) { return this . java.util.List<org.springframework.boot.web.embedded.tomcat.LifecycleListener> ; }  <METHOD_END>
<METHOD_START> public void void ( LifecycleListener ... org.springframework.boot.web.embedded.tomcat.LifecycleListener[] ) { Assert . notNull ( org.springframework.boot.web.embedded.tomcat.LifecycleListener[] , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.LifecycleListener> . addAll ( java.util.Arrays . java.util.List ( org.springframework.boot.web.embedded.tomcat.LifecycleListener[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer> < ? extends TomcatContextCustomizer > java.util.Collection<? extends org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer> ) { Assert . notNull ( java.util.Collection<> , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer> = new java.util.ArrayList <> ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer> < TomcatContextCustomizer > java.util.Collection<org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer> ( ) { return this . java.util.List<org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer> ; }  <METHOD_END>
<METHOD_START> public void void ( TomcatContextCustomizer ... org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer[] ) { Assert . notNull ( org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer[] , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer> . addAll ( java.util.Arrays . java.util.List ( org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer> < ? extends TomcatConnectorCustomizer > java.util.Collection<? extends org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer> ) { Assert . notNull ( java.util.Collection<> , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer> = new java.util.ArrayList <> ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( TomcatConnectorCustomizer ... org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer[] ) { Assert . notNull ( org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer[] , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer> . addAll ( java.util.Arrays . java.util.List ( org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer[] ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer> < TomcatConnectorCustomizer > java.util.Collection<org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer> ( ) { return this . java.util.List<org.springframework.boot.web.embedded.tomcat.TomcatConnectorCustomizer> ; }  <METHOD_END>
<METHOD_START> public void void ( Connector ... org.springframework.boot.web.embedded.tomcat.Connector[] ) { Assert . notNull ( org.springframework.boot.web.embedded.tomcat.Connector[] , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.tomcat.Connector> . addAll ( java.util.Arrays . java.util.List ( org.springframework.boot.web.embedded.tomcat.Connector[] ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.web.embedded.tomcat.Connector> < Connector > java.util.List<org.springframework.boot.web.embedded.tomcat.Connector> ( ) { return this . java.util.List<org.springframework.boot.web.embedded.tomcat.Connector> ; }  <METHOD_END>
<METHOD_START> public void void ( java.nio.charset.Charset java.nio.charset.Charset ) { this . java.nio.charset.Charset = java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> public java.nio.charset.Charset java.nio.charset.Charset ( ) { return this . java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LifecycleEvent org.springframework.boot.web.embedded.tomcat.LifecycleEvent ) { if ( org.springframework.boot.web.embedded.tomcat.LifecycleEvent . getType ( ) . equals ( Lifecycle . START_EVENT ) ) { Context org.springframework.boot.web.embedded.tomcat.Context = ( Context ) org.springframework.boot.web.embedded.tomcat.LifecycleEvent . getLifecycle ( ) ; Manager org.springframework.boot.web.embedded.tomcat.Manager = org.springframework.boot.web.embedded.tomcat.Context . getManager ( ) ; if ( org.springframework.boot.web.embedded.tomcat.Manager != null && org.springframework.boot.web.embedded.tomcat.Manager instanceof StandardManager ) { ( ( StandardManager ) org.springframework.boot.web.embedded.tomcat.Manager ) . setPathname ( null ) ; } } }  <METHOD_END>
<METHOD_START> private void ( Context org.springframework.boot.web.embedded.tomcat.Context ) { this . org.springframework.boot.web.embedded.tomcat.Context = org.springframework.boot.web.embedded.tomcat.Context ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LifecycleEvent org.springframework.boot.web.embedded.tomcat.LifecycleEvent ) { if ( org.springframework.boot.web.embedded.tomcat.LifecycleEvent . getType ( ) . equals ( Lifecycle . CONFIGURE_START_EVENT ) ) { void ( getUrlsOfJarsWithMetaInfResources ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ) { for ( java.net.URL java.net.URL : java.util.List<java.net.URL> ) { java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) ; if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String + STRING ; } void ( java.lang.String ) ; } else { void ( java.net.URL . java.lang.String ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { try { if ( boolean ( java.lang.String ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; } java.net.URL java.net.URL = new java.net.URL ( java.lang.String ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.web.embedded.tomcat.Context . getResources ( ) . createWebResourceSet ( ResourceSetType . RESOURCE_JAR , STRING , java.net.URL , java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . int ( STRING ) < java.lang.String . int ( STRING ) ; }  <METHOD_END>
