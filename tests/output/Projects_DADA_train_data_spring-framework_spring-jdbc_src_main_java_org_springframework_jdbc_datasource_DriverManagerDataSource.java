<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { setUrl ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { setUrl ( java.lang.String ) ; setUsername ( java.lang.String ) ; setPassword ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) { setUrl ( java.lang.String ) ; setConnectionProperties ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( ) ; try { java.lang.Class . java.lang.Class<?> ( java.lang.String , true , ClassUtils . getDefaultClassLoader ( ) ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING , java.lang.ClassNotFoundException ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.sql.Connection java.sql.Connection ( java.util.Properties java.util.Properties ) throws java.sql.SQLException { java.lang.String java.lang.String = getUrl ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } return java.sql.Connection ( java.lang.String , java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> protected java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) throws java.sql.SQLException { return java.sql.DriverManager . java.sql.Connection ( java.lang.String , java.util.Properties ) ; }  <METHOD_END>
