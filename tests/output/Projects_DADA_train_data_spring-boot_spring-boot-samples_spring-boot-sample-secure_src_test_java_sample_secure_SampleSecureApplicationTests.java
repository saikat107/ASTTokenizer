<METHOD_START> @ Before public void void ( ) { AuthenticationManager sample.secure.AuthenticationManager = this . sample.secure.ApplicationContext . getBean ( AuthenticationManager .class ) ; this . sample.secure.Authentication = sample.secure.AuthenticationManager . authenticate ( new UsernamePasswordAuthenticationToken ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { SecurityContextHolder . clearContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AuthenticationException .class ) public void void ( ) java.lang.Exception { assertThat ( STRING ) . isEqualTo ( this . sample.secure.SampleService . secure ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SecurityContextHolder . getContext ( ) . setAuthentication ( this . sample.secure.Authentication ) ; assertThat ( STRING ) . isEqualTo ( this . sample.secure.SampleService . secure ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SecurityContextHolder . getContext ( ) . setAuthentication ( this . sample.secure.Authentication ) ; assertThat ( STRING ) . isEqualTo ( this . sample.secure.SampleService . authorized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AccessDeniedException .class ) public void void ( ) java.lang.Exception { SecurityContextHolder . getContext ( ) . setAuthentication ( this . sample.secure.Authentication ) ; assertThat ( STRING ) . isEqualTo ( this . sample.secure.SampleService . denied ( ) ) ; }  <METHOD_END>
