<METHOD_START> public void ( ) { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; Assert . state ( StringUtils . hasLength ( java.lang.String ) , STRING ) ; this . java.io.File = java.io.File ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.lang.String java.lang.String ) { java.io.File java.io.File = new java.io.File ( new java.io.File ( java.lang.String ) , STRING ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File = ( java.io.File . boolean ( ) ? java.io.File : new java.io.File ( java.io.File , STRING ) ) ; Assert . state ( java.io.File . boolean ( ) , STRING + java.lang.String ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> public java.lang.ProcessBuilder java.lang.ProcessBuilder ( java.lang.String ... java.lang.String[] ) { java.lang.ProcessBuilder java.lang.ProcessBuilder = new java.lang.ProcessBuilder ( java.lang.String ( ) ) ; java.lang.ProcessBuilder . java.util.List<java.lang.String> ( ) . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; return java.lang.ProcessBuilder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { try { return this . java.io.File . java.lang.String ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } }  <METHOD_END>
