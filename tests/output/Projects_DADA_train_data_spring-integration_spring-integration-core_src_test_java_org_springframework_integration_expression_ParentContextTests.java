<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { AbstractApplicationContext org.springframework.integration.expression.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.expression.ParentContextTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.expression.AbstractApplicationContext . getBean ( IntegrationEvaluationContextFactoryBean .class ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.Map .class ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; java.lang.Object java.lang.Object = java.util.Map<,> . get ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertThat ( ( java.lang.reflect.Method ) java.lang.Object , Matchers . isOneOf ( JsonPathUtils .class . java.lang.reflect.Method[] ( ) ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.expression.EvaluationContext> . size ( ) ) ; ClassPathXmlApplicationContext org.springframework.integration.expression.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( org.springframework.integration.expression.AbstractApplicationContext ) ; org.springframework.integration.expression.ClassPathXmlApplicationContext . setConfigLocation ( STRING ) ; org.springframework.integration.expression.ClassPathXmlApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.expression.ClassPathXmlApplicationContext . getBean ( IntegrationEvaluationContextFactoryBean .class ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.Map .class ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertTrue ( java.util.Map<,> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<,> . boolean ( STRING ) ) ; java.lang.Object = java.util.Map<,> . get ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertThat ( ( java.lang.reflect.Method ) java.lang.Object , Matchers . not ( Matchers . isOneOf ( JsonPathUtils .class . java.lang.reflect.Method[] ( ) ) ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.expression.EvaluationContext> . size ( ) ) ; assertSame ( java.util.List<org.springframework.integration.expression.EvaluationContext> . get ( NUMBER ) . getBeanResolver ( ) , java.util.List<org.springframework.integration.expression.EvaluationContext> . get ( NUMBER ) . getBeanResolver ( ) ) ; java.util.List<org.springframework.integration.expression.PropertyAccessor> < PropertyAccessor > java.util.List<org.springframework.integration.expression.PropertyAccessor> = java.util.List<org.springframework.integration.expression.EvaluationContext> . get ( NUMBER ) . getPropertyAccessors ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.expression.PropertyAccessor> . size ( ) ) ; PropertyAccessor org.springframework.integration.expression.PropertyAccessor = org.springframework.integration.expression.AbstractApplicationContext . getBean ( STRING , PropertyAccessor .class ) ; PropertyAccessor org.springframework.integration.expression.PropertyAccessor = org.springframework.integration.expression.AbstractApplicationContext . getBean ( STRING , PropertyAccessor .class ) ; assertTrue ( java.util.List<org.springframework.integration.expression.PropertyAccessor> . contains ( org.springframework.integration.expression.PropertyAccessor ) ) ; assertTrue ( java.util.List<org.springframework.integration.expression.PropertyAccessor> . contains ( org.springframework.integration.expression.PropertyAccessor ) ) ; assertTrue ( java.util.List<org.springframework.integration.expression.PropertyAccessor> . indexOf ( org.springframework.integration.expression.PropertyAccessor ) > java.util.List<org.springframework.integration.expression.PropertyAccessor> . indexOf ( org.springframework.integration.expression.PropertyAccessor ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) TestUtils . getPropertyValue ( java.util.List<org.springframework.integration.expression.EvaluationContext> . get ( NUMBER ) , STRING ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertNotSame ( java.util.List<org.springframework.integration.expression.EvaluationContext> . get ( NUMBER ) . getBeanResolver ( ) , java.util.List<org.springframework.integration.expression.EvaluationContext> . get ( NUMBER ) . getBeanResolver ( ) ) ; java.util.List<org.springframework.integration.expression.PropertyAccessor> = java.util.List<org.springframework.integration.expression.EvaluationContext> . get ( NUMBER ) . getPropertyAccessors ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.expression.PropertyAccessor> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.integration.expression.PropertyAccessor> . contains ( org.springframework.integration.expression.PropertyAccessor ) ) ; java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) TestUtils . getPropertyValue ( java.util.List<org.springframework.integration.expression.EvaluationContext> . get ( NUMBER ) , STRING ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; java.util.List<org.springframework.integration.expression.PropertyAccessor> = java.util.List<org.springframework.integration.expression.EvaluationContext> . get ( NUMBER ) . getPropertyAccessors ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.expression.PropertyAccessor> . size ( ) ) ; PropertyAccessor org.springframework.integration.expression.PropertyAccessor = org.springframework.integration.expression.ClassPathXmlApplicationContext . getBean ( STRING , PropertyAccessor .class ) ; assertTrue ( java.util.List<org.springframework.integration.expression.PropertyAccessor> . contains ( org.springframework.integration.expression.PropertyAccessor ) ) ; assertTrue ( java.util.List<org.springframework.integration.expression.PropertyAccessor> . contains ( org.springframework.integration.expression.PropertyAccessor ) ) ; assertFalse ( java.util.List<org.springframework.integration.expression.PropertyAccessor> . contains ( org.springframework.integration.expression.PropertyAccessor ) ) ; assertTrue ( java.util.List<org.springframework.integration.expression.PropertyAccessor> . indexOf ( org.springframework.integration.expression.PropertyAccessor ) < java.util.List<org.springframework.integration.expression.PropertyAccessor> . indexOf ( org.springframework.integration.expression.PropertyAccessor ) ) ; java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) TestUtils . getPropertyValue ( java.util.List<org.springframework.integration.expression.EvaluationContext> . get ( NUMBER ) , STRING ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; org.springframework.integration.expression.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.expression.Message<?> = org.springframework.integration.expression.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.expression.Message<> ) ; assertEquals ( STRING , org.springframework.integration.expression.Message<> . getPayload ( ) ) ; org.springframework.integration.expression.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) . send ( MutableMessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.expression.Message<?> = org.springframework.integration.expression.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.expression.Message<> ) ; assertThat ( org.springframework.integration.expression.Message<> , instanceOf ( GenericMessage .class ) ) ; assertEquals ( STRING , org.springframework.integration.expression.Message<> . getPayload ( ) ) ; IntegrationEvaluationContextFactoryBean org.springframework.integration.expression.IntegrationEvaluationContextFactoryBean = org.springframework.integration.expression.ClassPathXmlApplicationContext . getBean ( STRING + IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME , IntegrationEvaluationContextFactoryBean .class ) ; try { org.springframework.integration.expression.IntegrationEvaluationContextFactoryBean . setPropertyAccessors ( java.util.Collections .< java.lang.String , PropertyAccessor > java.util.Map<java.lang.String,org.springframework.integration.expression.PropertyAccessor> ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( java.lang.IllegalArgumentException .class ) ) ; } org.springframework.integration.expression.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.expression.Message<?> = org.springframework.integration.expression.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.expression.Message<> ) ; assertEquals ( STRING , org.springframework.integration.expression.Message<> . getClass ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.expression.Message<> . getPayload ( ) ) ; assertTrue ( org.springframework.integration.expression.AbstractApplicationContext . containsBean ( IntegrationContextUtils . TO_STRING_FRIENDLY_JSON_NODE_TO_STRING_CONVERTER_BEAN_NAME ) ) ; assertTrue ( org.springframework.integration.expression.ClassPathXmlApplicationContext . containsBean ( IntegrationContextUtils . TO_STRING_FRIENDLY_JSON_NODE_TO_STRING_CONVERTER_BEAN_NAME ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.expression.AbstractApplicationContext . getBean ( IntegrationContextUtils . CONVERTER_REGISTRAR_BEAN_NAME ) ; assertNotNull ( java.lang.Object ) ; java.util.Set<?> < ? > java.util.Set<?> = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.Set .class ) ; boolean boolean = false ; for ( java.lang.Object java.lang.Object : java.util.Set<> ) { if ( STRING . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ) { boolean = true ; break; } } assertTrue ( boolean ) ; MessageChannel org.springframework.integration.expression.MessageChannel = org.springframework.integration.expression.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; PollableChannel org.springframework.integration.expression.PollableChannel = org.springframework.integration.expression.AbstractApplicationContext . getBean ( STRING , PollableChannel .class ) ; TestPerson org.springframework.integration.expression.TestPerson = new TestPerson ( ) ; org.springframework.integration.expression.TestPerson . setFirstName ( STRING ) ; org.springframework.integration.expression.MessageChannel . send ( new GenericMessage < java.lang.Object > ( org.springframework.integration.expression.TestPerson ) ) ; Message < ? > org.springframework.integration.expression.Message<?> = org.springframework.integration.expression.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.expression.Message<> ) ; assertEquals ( STRING , org.springframework.integration.expression.Message<> . getPayload ( ) ) ; org.springframework.integration.expression.ClassPathXmlApplicationContext . close ( ) ; org.springframework.integration.expression.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.expression.BeanFactory ) throws org.springframework.integration.expression.BeansException { this . org.springframework.integration.expression.BeanFactory = org.springframework.integration.expression.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { java.util.List<org.springframework.integration.expression.EvaluationContext> . add ( ExpressionUtils . createStandardEvaluationContext ( this . org.springframework.integration.expression.BeanFactory ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
