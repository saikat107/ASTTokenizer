<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Class java.lang.Class ) { this . java.lang.Class = java.lang.Class ; }  <METHOD_END>
<METHOD_START> public void void ( ValidationProviderResolver org.springframework.validation.beanvalidation.ValidationProviderResolver ) { this . org.springframework.validation.beanvalidation.ValidationProviderResolver = org.springframework.validation.beanvalidation.ValidationProviderResolver ; }  <METHOD_END>
<METHOD_START> public void void ( MessageInterpolator org.springframework.validation.beanvalidation.MessageInterpolator ) { this . org.springframework.validation.beanvalidation.MessageInterpolator = org.springframework.validation.beanvalidation.MessageInterpolator ; }  <METHOD_END>
<METHOD_START> public void void ( MessageSource org.springframework.validation.beanvalidation.MessageSource ) { this . org.springframework.validation.beanvalidation.MessageInterpolator = org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.HibernateValidatorDelegate . org.springframework.validation.beanvalidation.MessageInterpolator ( org.springframework.validation.beanvalidation.MessageSource ) ; }  <METHOD_END>
<METHOD_START> public void void ( TraversableResolver org.springframework.validation.beanvalidation.TraversableResolver ) { this . org.springframework.validation.beanvalidation.TraversableResolver = org.springframework.validation.beanvalidation.TraversableResolver ; }  <METHOD_END>
<METHOD_START> public void void ( ConstraintValidatorFactory org.springframework.validation.beanvalidation.ConstraintValidatorFactory ) { this . org.springframework.validation.beanvalidation.ConstraintValidatorFactory = org.springframework.validation.beanvalidation.ConstraintValidatorFactory ; }  <METHOD_END>
<METHOD_START> public void void ( ParameterNameDiscoverer org.springframework.validation.beanvalidation.ParameterNameDiscoverer ) { this . org.springframework.validation.beanvalidation.ParameterNameDiscoverer = org.springframework.validation.beanvalidation.ParameterNameDiscoverer ; }  <METHOD_END>
<METHOD_START> public void void ( Resource ... org.springframework.validation.beanvalidation.Resource[] ) { this . org.springframework.validation.beanvalidation.Resource[] = org.springframework.validation.beanvalidation.Resource[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , this . java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { if ( java.util.Map<java.lang.String,java.lang.String> != null ) { this . java.util.Map<java.lang.String,java.lang.String> . void ( java.util.Map<java.lang.String,java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return this . java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.validation.beanvalidation.ApplicationContext ) { this . org.springframework.validation.beanvalidation.ApplicationContext = org.springframework.validation.beanvalidation.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { Configuration < ? > org.springframework.validation.beanvalidation.Configuration<?> ; if ( this . java.lang.Class != null ) { ProviderSpecificBootstrap org.springframework.validation.beanvalidation.ProviderSpecificBootstrap = Validation . byProvider ( this . java.lang.Class ) ; if ( this . org.springframework.validation.beanvalidation.ValidationProviderResolver != null ) { org.springframework.validation.beanvalidation.ProviderSpecificBootstrap = org.springframework.validation.beanvalidation.ProviderSpecificBootstrap . providerResolver ( this . org.springframework.validation.beanvalidation.ValidationProviderResolver ) ; } org.springframework.validation.beanvalidation.Configuration<?> = org.springframework.validation.beanvalidation.ProviderSpecificBootstrap . configure ( ) ; } else { GenericBootstrap org.springframework.validation.beanvalidation.GenericBootstrap = Validation . byDefaultProvider ( ) ; if ( this . org.springframework.validation.beanvalidation.ValidationProviderResolver != null ) { org.springframework.validation.beanvalidation.GenericBootstrap = org.springframework.validation.beanvalidation.GenericBootstrap . providerResolver ( this . org.springframework.validation.beanvalidation.ValidationProviderResolver ) ; } org.springframework.validation.beanvalidation.Configuration<?> = org.springframework.validation.beanvalidation.GenericBootstrap . configure ( ) ; } if ( this . org.springframework.validation.beanvalidation.ApplicationContext != null ) { try { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.validation.beanvalidation.Configuration<> . getClass ( ) . getMethod ( STRING , java.lang.ClassLoader .class ) ; ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.validation.beanvalidation.Configuration<> , this . org.springframework.validation.beanvalidation.ApplicationContext . getClassLoader ( ) ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } } MessageInterpolator org.springframework.validation.beanvalidation.MessageInterpolator = this . org.springframework.validation.beanvalidation.MessageInterpolator ; if ( org.springframework.validation.beanvalidation.MessageInterpolator == null ) { org.springframework.validation.beanvalidation.MessageInterpolator = org.springframework.validation.beanvalidation.Configuration<> . getDefaultMessageInterpolator ( ) ; } org.springframework.validation.beanvalidation.Configuration<> . messageInterpolator ( new LocaleContextMessageInterpolator ( org.springframework.validation.beanvalidation.MessageInterpolator ) ) ; if ( this . org.springframework.validation.beanvalidation.TraversableResolver != null ) { org.springframework.validation.beanvalidation.Configuration<> . traversableResolver ( this . org.springframework.validation.beanvalidation.TraversableResolver ) ; } ConstraintValidatorFactory org.springframework.validation.beanvalidation.ConstraintValidatorFactory = this . org.springframework.validation.beanvalidation.ConstraintValidatorFactory ; if ( org.springframework.validation.beanvalidation.ConstraintValidatorFactory == null && this . org.springframework.validation.beanvalidation.ApplicationContext != null ) { org.springframework.validation.beanvalidation.ConstraintValidatorFactory = new SpringConstraintValidatorFactory ( this . org.springframework.validation.beanvalidation.ApplicationContext . getAutowireCapableBeanFactory ( ) ) ; } if ( org.springframework.validation.beanvalidation.ConstraintValidatorFactory != null ) { org.springframework.validation.beanvalidation.Configuration<> . constraintValidatorFactory ( org.springframework.validation.beanvalidation.ConstraintValidatorFactory ) ; } if ( this . org.springframework.validation.beanvalidation.ParameterNameDiscoverer != null ) { void ( org.springframework.validation.beanvalidation.Configuration<> ) ; } if ( this . org.springframework.validation.beanvalidation.Resource[] != null ) { for ( Resource org.springframework.validation.beanvalidation.Resource : this . org.springframework.validation.beanvalidation.Resource[] ) { try { org.springframework.validation.beanvalidation.Configuration<> . addMapping ( org.springframework.validation.beanvalidation.Resource . getInputStream ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.validation.beanvalidation.Resource ) ; } } } for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : this . java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { org.springframework.validation.beanvalidation.Configuration<> . addProperty ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; } void ( org.springframework.validation.beanvalidation.Configuration<> ) ; this . org.springframework.validation.beanvalidation.ValidatorFactory = org.springframework.validation.beanvalidation.Configuration<> . buildValidatorFactory ( ) ; setTargetValidator ( this . org.springframework.validation.beanvalidation.ValidatorFactory . getValidator ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Configuration < ? > org.springframework.validation.beanvalidation.Configuration<?> ) { final ParameterNameDiscoverer org.springframework.validation.beanvalidation.ParameterNameDiscoverer = this . org.springframework.validation.beanvalidation.ParameterNameDiscoverer ; final ParameterNameProvider org.springframework.validation.beanvalidation.ParameterNameProvider = org.springframework.validation.beanvalidation.Configuration<> . getDefaultParameterNameProvider ( ) ; org.springframework.validation.beanvalidation.Configuration<> . parameterNameProvider ( new ParameterNameProvider ( ) { @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> ) { java.lang.String [] java.lang.String[] = org.springframework.validation.beanvalidation.ParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Constructor<> ) ; return ( java.lang.String[] != null ? java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) : org.springframework.validation.beanvalidation.ParameterNameProvider . getParameterNames ( java.lang.reflect.Constructor<> ) ) ; } @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.String [] java.lang.String[] = org.springframework.validation.beanvalidation.ParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Method ) ; return ( java.lang.String[] != null ? java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) : org.springframework.validation.beanvalidation.ParameterNameProvider . getParameterNames ( java.lang.reflect.Method ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> ) { java.lang.String [] java.lang.String[] = org.springframework.validation.beanvalidation.ParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Constructor<> ) ; return ( java.lang.String[] != null ? java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) : org.springframework.validation.beanvalidation.ParameterNameProvider . getParameterNames ( java.lang.reflect.Constructor<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.String [] java.lang.String[] = org.springframework.validation.beanvalidation.ParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Method ) ; return ( java.lang.String[] != null ? java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) : org.springframework.validation.beanvalidation.ParameterNameProvider . getParameterNames ( java.lang.reflect.Method ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Configuration < ? > org.springframework.validation.beanvalidation.Configuration<?> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.validation.beanvalidation.Validator org.springframework.validation.beanvalidation.Validator ( ) { Assert . notNull ( this . org.springframework.validation.beanvalidation.ValidatorFactory , STRING ) ; return this . org.springframework.validation.beanvalidation.ValidatorFactory . getValidator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.validation.beanvalidation.ValidatorContext org.springframework.validation.beanvalidation.ValidatorContext ( ) { Assert . notNull ( this . org.springframework.validation.beanvalidation.ValidatorFactory , STRING ) ; return this . org.springframework.validation.beanvalidation.ValidatorFactory . usingContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.validation.beanvalidation.MessageInterpolator org.springframework.validation.beanvalidation.MessageInterpolator ( ) { Assert . notNull ( this . org.springframework.validation.beanvalidation.ValidatorFactory , STRING ) ; return this . org.springframework.validation.beanvalidation.ValidatorFactory . getMessageInterpolator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.validation.beanvalidation.TraversableResolver org.springframework.validation.beanvalidation.TraversableResolver ( ) { Assert . notNull ( this . org.springframework.validation.beanvalidation.ValidatorFactory , STRING ) ; return this . org.springframework.validation.beanvalidation.ValidatorFactory . getTraversableResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.validation.beanvalidation.ConstraintValidatorFactory org.springframework.validation.beanvalidation.ConstraintValidatorFactory ( ) { Assert . notNull ( this . org.springframework.validation.beanvalidation.ValidatorFactory , STRING ) ; return this . org.springframework.validation.beanvalidation.ValidatorFactory . getConstraintValidatorFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.validation.beanvalidation.ParameterNameProvider org.springframework.validation.beanvalidation.ParameterNameProvider ( ) { Assert . notNull ( this . org.springframework.validation.beanvalidation.ValidatorFactory , STRING ) ; return this . org.springframework.validation.beanvalidation.ValidatorFactory . getParameterNameProvider ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( this . org.springframework.validation.beanvalidation.ValidatorFactory != null ) { this . org.springframework.validation.beanvalidation.ValidatorFactory . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.validation.beanvalidation.MessageInterpolator org.springframework.validation.beanvalidation.MessageInterpolator ( MessageSource org.springframework.validation.beanvalidation.MessageSource ) { return new ResourceBundleMessageInterpolator ( new MessageSourceResourceBundleLocator ( org.springframework.validation.beanvalidation.MessageSource ) ) ; }  <METHOD_END>
