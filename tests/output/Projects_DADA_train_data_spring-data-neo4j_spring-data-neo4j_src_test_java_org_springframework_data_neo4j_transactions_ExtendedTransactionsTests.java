<METHOD_START> @ Before public void void ( ) { getGraphDatabaseService ( ) . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.neo4j.transactions.WrapperService . composeSuccessThenFail ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.String ( ) ) ; assertEquals ( NUMBER , int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ Transactional @ Rollback public void void ( ) { try { org.springframework.data.neo4j.transactions.WrapperService . composeSuccessThenSuccess ( ) ; assertEquals ( NUMBER , int ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.neo4j.transactions.WrapperService . composeFailThenSuccess ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.String ( ) ) ; assertEquals ( NUMBER , int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.neo4j.transactions.WrapperService . composeFailThenFail ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.String ( ) ) ; assertEquals ( NUMBER , int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.neo4j.transactions.WrapperService . rollbackWithCheckedException ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.String ( ) ) ; assertEquals ( NUMBER , int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.neo4j.transactions.ServiceA . run ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertNull ( org.springframework.data.neo4j.transactions.ServiceB . getBilbo ( ) ) ; } }  <METHOD_END>
<METHOD_START> private int int ( ) { java.util.Iterator java.util.Iterator = org.springframework.data.neo4j.transactions.WrapperService . fetch ( ) . iterator ( ) ; int int = NUMBER ; while ( java.util.Iterator . boolean ( ) ) { java.util.Iterator . java.lang.Object ( ) ; int ++ ; } return int ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.transactions.PlatformTransactionManager org.springframework.data.neo4j.transactions.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.transactions.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.transactions.SessionFactory org.springframework.data.neo4j.transactions.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
