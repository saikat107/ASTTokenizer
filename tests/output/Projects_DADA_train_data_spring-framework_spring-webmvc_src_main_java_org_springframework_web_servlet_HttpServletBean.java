<METHOD_START> protected final void void ( java.lang.String java.lang.String ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) org.springframework.web.servlet.ServletException { if ( org.springframework.web.servlet.Log . isDebugEnabled ( ) ) { org.springframework.web.servlet.Log . debug ( STRING + java.lang.String ( ) + STRING ) ; } try { PropertyValues org.springframework.web.servlet.PropertyValues = new org.springframework.web.servlet.HttpServletBean.ServletConfigPropertyValues ( getServletConfig ( ) , this . java.util.Set<java.lang.String> ) ; BeanWrapper org.springframework.web.servlet.BeanWrapper = PropertyAccessorFactory . forBeanPropertyAccess ( this ) ; ResourceLoader org.springframework.web.servlet.ResourceLoader = new ServletContextResourceLoader ( org.springframework.web.servlet.ServletContext ( ) ) ; org.springframework.web.servlet.BeanWrapper . registerCustomEditor ( Resource .class , new ResourceEditor ( org.springframework.web.servlet.ResourceLoader , org.springframework.web.servlet.ConfigurableEnvironment ( ) ) ) ; void ( org.springframework.web.servlet.BeanWrapper ) ; org.springframework.web.servlet.BeanWrapper . setPropertyValues ( org.springframework.web.servlet.PropertyValues , true ) ; } catch ( BeansException org.springframework.web.servlet.BeansException ) { if ( org.springframework.web.servlet.Log . isErrorEnabled ( ) ) { org.springframework.web.servlet.Log . error ( STRING + java.lang.String ( ) + STRING , org.springframework.web.servlet.BeansException ) ; } throw org.springframework.web.servlet.BeansException ; } void ( ) ; if ( org.springframework.web.servlet.Log . isDebugEnabled ( ) ) { org.springframework.web.servlet.Log . debug ( STRING + java.lang.String ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( BeanWrapper org.springframework.web.servlet.BeanWrapper ) throws org.springframework.web.servlet.BeansException {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.String java.lang.String ( ) { return ( getServletConfig ( ) != null ? getServletConfig ( ) . getServletName ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.web.servlet.ServletContext org.springframework.web.servlet.ServletContext ( ) { return ( getServletConfig ( ) != null ? getServletConfig ( ) . getServletContext ( ) : null ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) org.springframework.web.servlet.ServletException {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.web.servlet.Environment ) { Assert . isInstanceOf ( ConfigurableEnvironment .class , org.springframework.web.servlet.Environment , STRING ) ; this . org.springframework.web.servlet.ConfigurableEnvironment = ( ConfigurableEnvironment ) org.springframework.web.servlet.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.ConfigurableEnvironment org.springframework.web.servlet.ConfigurableEnvironment ( ) { if ( this . org.springframework.web.servlet.ConfigurableEnvironment == null ) { this . org.springframework.web.servlet.ConfigurableEnvironment = this . org.springframework.web.servlet.ConfigurableEnvironment ( ) ; } return this . org.springframework.web.servlet.ConfigurableEnvironment ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.ConfigurableEnvironment org.springframework.web.servlet.ConfigurableEnvironment ( ) { return new StandardServletEnvironment ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ServletConfig org.springframework.web.servlet.ServletConfig , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> )			throws org.springframework.web.servlet.ServletException { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = ( java.util.Set<java.lang.String> != null && ! java.util.Set<java.lang.String> . boolean ( ) ? new java.util.HashSet<java.lang.String> <> ( java.util.Set<java.lang.String> ) : null ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.web.servlet.ServletConfig . getInitParameterNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.ServletConfig . getInitParameter ( java.lang.String ) ; addPropertyValue ( new PropertyValue ( java.lang.String , java.lang.Object ) ) ; if ( java.util.Set<java.lang.String> != null ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } if ( ! CollectionUtils . isEmpty ( java.util.Set<java.lang.String> ) ) { throw new ServletException ( STRING + org.springframework.web.servlet.ServletConfig . getServletName ( ) + STRING + StringUtils . collectionToDelimitedString ( java.util.Set<java.lang.String> , STRING ) ) ; } }  <METHOD_END>
