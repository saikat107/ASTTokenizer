<METHOD_START> @ Test public void void ( ) java.lang.Exception { SourcePollingChannelAdapterFactoryBean org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean = new SourcePollingChannelAdapterFactoryBean ( ) ; QueueChannel org.springframework.integration.config.QueueChannel = new QueueChannel ( ) ; TestApplicationContext org.springframework.integration.config.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setBeanFactory ( org.springframework.integration.config.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setBeanClassLoader ( ClassUtils . getDefaultClassLoader ( ) ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setOutputChannel ( org.springframework.integration.config.QueueChannel ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setSource ( ( ) new GenericMessage <> ( STRING ) ) ; PollerMetadata org.springframework.integration.config.PollerMetadata = new PollerMetadata ( ) ; java.util.List<org.springframework.integration.config.Advice> < Advice > java.util.List<org.springframework.integration.config.Advice> = new java.util.ArrayList<org.springframework.integration.config.Advice> < Advice > ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; java.util.List<org.springframework.integration.config.Advice> . add ( ( MethodInterceptor ) invocation -> { adviceApplied . set ( true ) ; return invocation . proceed ( ) ; } ) ; org.springframework.integration.config.PollerMetadata . setTrigger ( new PeriodicTrigger ( NUMBER ) ) ; org.springframework.integration.config.PollerMetadata . setMaxMessagesPerPoll ( NUMBER ) ; org.springframework.integration.config.PollerMetadata . setAdviceChain ( java.util.List<org.springframework.integration.config.Advice> ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setPollerMetadata ( org.springframework.integration.config.PollerMetadata ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setAutoStartup ( true ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . afterPropertiesSet ( ) ; org.springframework.integration.config.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . getObject ( ) ) ; org.springframework.integration.config.TestApplicationContext . refresh ( ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; assertTrue ( STRING , java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { SourcePollingChannelAdapterFactoryBean org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean = new SourcePollingChannelAdapterFactoryBean ( ) ; QueueChannel org.springframework.integration.config.QueueChannel = new QueueChannel ( ) ; TestApplicationContext org.springframework.integration.config.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setBeanFactory ( org.springframework.integration.config.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setBeanClassLoader ( ClassUtils . getDefaultClassLoader ( ) ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setOutputChannel ( org.springframework.integration.config.QueueChannel ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setSource ( ( ) new GenericMessage <> ( STRING ) ) ; PollerMetadata org.springframework.integration.config.PollerMetadata = new PollerMetadata ( ) ; java.util.List<org.springframework.integration.config.Advice> < Advice > java.util.List<org.springframework.integration.config.Advice> = new java.util.ArrayList<org.springframework.integration.config.Advice> < Advice > ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; java.util.List<org.springframework.integration.config.Advice> . add ( ( MethodInterceptor ) invocation -> { adviceApplied . set ( true ) ; return invocation . proceed ( ) ; } ) ; org.springframework.integration.config.PollerMetadata . setTrigger ( new PeriodicTrigger ( NUMBER ) ) ; org.springframework.integration.config.PollerMetadata . setMaxMessagesPerPoll ( NUMBER ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final MethodInterceptor org.springframework.integration.config.MethodInterceptor = mock ( MethodInterceptor .class ) ; java.util.List<org.springframework.integration.config.Advice> . add ( ( MethodInterceptor ) invocation -> { count . incrementAndGet ( ) ; return invocation . proceed ( ) ; } ) ; when ( org.springframework.integration.config.MethodInterceptor . invoke ( any ( MethodInvocation .class ) ) ) . thenAnswer ( invocation -> { count . incrementAndGet ( ) ; return ( ( MethodInvocation ) invocation . getArgument ( NUMBER ) ) . proceed ( ) ; } ) ; org.springframework.integration.config.PollerMetadata . setAdviceChain ( java.util.List<org.springframework.integration.config.Advice> ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setPollerMetadata ( org.springframework.integration.config.PollerMetadata ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . setAutoStartup ( true ) ; org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . afterPropertiesSet ( ) ; org.springframework.integration.config.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.config.SourcePollingChannelAdapterFactoryBean . getObject ( ) ) ; org.springframework.integration.config.TestApplicationContext . refresh ( ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertTrue ( STRING , java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; MessageSource < java.lang.Object > org.springframework.integration.config.MessageSource<java.lang.Object> = ( ) { startLatch . countDown ( ) ; try { Thread . sleep ( NUMBER ) ; } catch ( InterruptedException e ) { Thread . currentThread ( ) . interrupt ( ) ; throw new MessagingException ( STRING , e ) ; } return null ; } ; SourcePollingChannelAdapter org.springframework.integration.config.SourcePollingChannelAdapter = new SourcePollingChannelAdapter ( ) ; ThreadPoolTaskScheduler org.springframework.integration.config.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.config.ThreadPoolTaskScheduler . setWaitForTasksToCompleteOnShutdown ( true ) ; org.springframework.integration.config.ThreadPoolTaskScheduler . setAwaitTerminationSeconds ( NUMBER ) ; org.springframework.integration.config.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; org.springframework.integration.config.SourcePollingChannelAdapter . setTaskScheduler ( org.springframework.integration.config.ThreadPoolTaskScheduler ) ; MessagePublishingErrorHandler org.springframework.integration.config.MessagePublishingErrorHandler = new MessagePublishingErrorHandler ( ) ; Log org.springframework.integration.config.Log = TestUtils . getPropertyValue ( org.springframework.integration.config.MessagePublishingErrorHandler , STRING , Log .class ) ; org.springframework.integration.config.Log = spy ( org.springframework.integration.config.Log ) ; DirectFieldAccessor org.springframework.integration.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.config.MessagePublishingErrorHandler ) ; org.springframework.integration.config.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.config.Log ) ; org.springframework.integration.config.SourcePollingChannelAdapter . setErrorHandler ( org.springframework.integration.config.MessagePublishingErrorHandler ) ; org.springframework.integration.config.SourcePollingChannelAdapter . setSource ( org.springframework.integration.config.MessageSource<java.lang.Object> ) ; org.springframework.integration.config.SourcePollingChannelAdapter . setOutputChannel ( new NullChannel ( ) ) ; org.springframework.integration.config.SourcePollingChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.config.SourcePollingChannelAdapter . afterPropertiesSet ( ) ; Log org.springframework.integration.config.Log = TestUtils . getPropertyValue ( org.springframework.integration.config.SourcePollingChannelAdapter , STRING , Log .class ) ; org.springframework.integration.config.Log = spy ( org.springframework.integration.config.Log ) ; when ( org.springframework.integration.config.Log . isDebugEnabled ( ) ) . thenReturn ( true ) ; org.springframework.integration.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.config.SourcePollingChannelAdapter ) ; org.springframework.integration.config.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.config.Log ) ; org.springframework.integration.config.SourcePollingChannelAdapter . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.config.SourcePollingChannelAdapter . stop ( ) ; org.springframework.integration.config.ThreadPoolTaskScheduler . shutdown ( ) ; verifyZeroInteractions ( org.springframework.integration.config.Log ) ; verify ( org.springframework.integration.config.Log ) . debug ( contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TaskScheduler org.springframework.integration.config.TaskScheduler = mock ( TaskScheduler .class ) ; willAnswer ( invocation -> { Runnable task = invocation . getArgument ( NUMBER ) ; task . run ( ) ; return null ; } ) . given ( org.springframework.integration.config.TaskScheduler ) . schedule ( any ( java.lang.Runnable .class ) , any ( Trigger .class ) ) ; SourcePollingChannelAdapter org.springframework.integration.config.SourcePollingChannelAdapter = new SourcePollingChannelAdapter ( ) ; org.springframework.integration.config.SourcePollingChannelAdapter . setTaskScheduler ( org.springframework.integration.config.TaskScheduler ) ; org.springframework.integration.config.SourcePollingChannelAdapter . setSource ( new org.springframework.integration.config.SourcePollingChannelAdapterFactoryBeanTests.LifecycleMessageSource ( ) ) ; org.springframework.integration.config.SourcePollingChannelAdapter . setMaxMessagesPerPoll ( NUMBER ) ; QueueChannel org.springframework.integration.config.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.config.SourcePollingChannelAdapter . setOutputChannel ( org.springframework.integration.config.QueueChannel ) ; org.springframework.integration.config.SourcePollingChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.config.SourcePollingChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.config.SourcePollingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( true , org.springframework.integration.config.Message<> . getPayload ( ) ) ; org.springframework.integration.config.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.Message<java.lang.Boolean> < java.lang.Boolean > org.springframework.integration.config.Message<java.lang.Boolean> ( ) { return new GenericMessage <> ( boolean ( ) ) ; }  <METHOD_END>
