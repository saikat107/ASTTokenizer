<METHOD_START> public void ( ) { setDefaultEncoding ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( Configuration org.springframework.web.reactive.result.view.freemarker.Configuration ) { this . org.springframework.web.reactive.result.view.freemarker.Configuration = org.springframework.web.reactive.result.view.freemarker.Configuration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException , org.springframework.web.reactive.result.view.freemarker.TemplateException { if ( this . org.springframework.web.reactive.result.view.freemarker.Configuration == null ) { this . org.springframework.web.reactive.result.view.freemarker.Configuration = createConfiguration ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.reactive.result.view.freemarker.TemplateLoader> < TemplateLoader > java.util.List<org.springframework.web.reactive.result.view.freemarker.TemplateLoader> ) { java.util.List<org.springframework.web.reactive.result.view.freemarker.TemplateLoader> . add ( new ClassTemplateLoader ( org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer .class , STRING ) ) ; logger . info ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.view.freemarker.Configuration org.springframework.web.reactive.result.view.freemarker.Configuration ( ) { return this . org.springframework.web.reactive.result.view.freemarker.Configuration ; }  <METHOD_END>
