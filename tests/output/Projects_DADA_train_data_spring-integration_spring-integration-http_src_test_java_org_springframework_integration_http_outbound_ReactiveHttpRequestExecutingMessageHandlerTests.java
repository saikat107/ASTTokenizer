<METHOD_START> @ Test public void void ( ) java.lang.Throwable { ClientHttpConnector org.springframework.integration.http.outbound.ClientHttpConnector = new HttpHandlerConnector ( ( request , response ) -> { response . setStatusCode ( HttpStatus . OK ) ; return Mono . empty ( ) . then ( response :: setComplete ) ; } ) ; WebClient org.springframework.integration.http.outbound.WebClient = WebClient . builder ( ) . clientConnector ( org.springframework.integration.http.outbound.ClientHttpConnector ) . build ( ) ; java.lang.String java.lang.String = STRING ; ReactiveHttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.ReactiveHttpRequestExecutingMessageHandler = new ReactiveHttpRequestExecutingMessageHandler ( java.lang.String , org.springframework.integration.http.outbound.WebClient ) ; ReactiveChannel org.springframework.integration.http.outbound.ReactiveChannel = new ReactiveChannel ( ) ; org.springframework.integration.http.outbound.ReactiveHttpRequestExecutingMessageHandler . setOutputChannel ( org.springframework.integration.http.outbound.ReactiveChannel ) ; org.springframework.integration.http.outbound.ReactiveHttpRequestExecutingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = Mono . from ( org.springframework.integration.http.outbound.ReactiveChannel ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.http.outbound.Message<> ) ; assertNotNull ( org.springframework.integration.http.outbound.Message<> . getHeaders ( ) ) ; assertEquals ( org.springframework.integration.http.outbound.Message<> . getHeaders ( ) . get ( HttpHeaders . STATUS_CODE ) , HttpStatus . OK ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { ClientHttpConnector org.springframework.integration.http.outbound.ClientHttpConnector = new HttpHandlerConnector ( ( request , response ) -> { response . setStatusCode ( HttpStatus . UNAUTHORIZED ) ; return Mono . empty ( ) . then ( response :: setComplete ) ; } ) ; WebClient org.springframework.integration.http.outbound.WebClient = WebClient . builder ( ) . clientConnector ( org.springframework.integration.http.outbound.ClientHttpConnector ) . build ( ) ; java.lang.String java.lang.String = STRING ; ReactiveHttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.ReactiveHttpRequestExecutingMessageHandler = new ReactiveHttpRequestExecutingMessageHandler ( java.lang.String , org.springframework.integration.http.outbound.WebClient ) ; org.springframework.integration.http.outbound.ReactiveHttpRequestExecutingMessageHandler . setExpectReply ( false ) ; QueueChannel org.springframework.integration.http.outbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.http.outbound.ReactiveHttpRequestExecutingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setErrorChannel ( org.springframework.integration.http.outbound.QueueChannel ) . build ( ) ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = org.springframework.integration.http.outbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.outbound.Message<> ) ; assertThat ( org.springframework.integration.http.outbound.Message<> , instanceOf ( ErrorMessage .class ) ) ; java.lang.Throwable java.lang.Throwable = ( java.lang.Throwable ) org.springframework.integration.http.outbound.Message<> . getPayload ( ) ; assertThat ( java.lang.Throwable . java.lang.String ( ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { ClientHttpConnector org.springframework.integration.http.outbound.ClientHttpConnector = new HttpHandlerConnector ( ( request , response ) -> { throw new RuntimeException ( STRING ) ; } ) ; WebClient org.springframework.integration.http.outbound.WebClient = WebClient . builder ( ) . clientConnector ( org.springframework.integration.http.outbound.ClientHttpConnector ) . build ( ) ; java.lang.String java.lang.String = STRING ; ReactiveHttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.ReactiveHttpRequestExecutingMessageHandler = new ReactiveHttpRequestExecutingMessageHandler ( java.lang.String , org.springframework.integration.http.outbound.WebClient ) ; org.springframework.integration.http.outbound.ReactiveHttpRequestExecutingMessageHandler . setExpectReply ( false ) ; QueueChannel org.springframework.integration.http.outbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.http.outbound.ReactiveHttpRequestExecutingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setErrorChannel ( org.springframework.integration.http.outbound.QueueChannel ) . build ( ) ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = org.springframework.integration.http.outbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.outbound.Message<> ) ; assertThat ( org.springframework.integration.http.outbound.Message<> , instanceOf ( ErrorMessage .class ) ) ; java.lang.Throwable java.lang.Throwable = ( java.lang.Throwable ) org.springframework.integration.http.outbound.Message<> . getPayload ( ) ; assertThat ( java.lang.Throwable . java.lang.String ( ) , containsString ( STRING ) ) ; }  <METHOD_END>
