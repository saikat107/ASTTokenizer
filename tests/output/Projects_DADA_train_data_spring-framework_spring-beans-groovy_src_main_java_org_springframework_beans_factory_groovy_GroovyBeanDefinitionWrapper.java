<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.String = java.lang.String ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Collection<?> < ? > java.util.Collection<?> ) { this . java.lang.String = java.lang.String ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.util.Collection<?> = java.util.Collection<> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( AbstractBeanDefinition org.springframework.beans.factory.groovy.AbstractBeanDefinition ) { this . org.springframework.beans.factory.groovy.AbstractBeanDefinition = org.springframework.beans.factory.groovy.AbstractBeanDefinition ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.groovy.AbstractBeanDefinition org.springframework.beans.factory.groovy.AbstractBeanDefinition ( ) { if ( this . org.springframework.beans.factory.groovy.AbstractBeanDefinition == null ) { this . org.springframework.beans.factory.groovy.AbstractBeanDefinition = org.springframework.beans.factory.groovy.AbstractBeanDefinition ( ) ; } return this . org.springframework.beans.factory.groovy.AbstractBeanDefinition ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.groovy.AbstractBeanDefinition org.springframework.beans.factory.groovy.AbstractBeanDefinition ( ) { AbstractBeanDefinition org.springframework.beans.factory.groovy.AbstractBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.beans.factory.groovy.AbstractBeanDefinition . setBeanClass ( this . java.lang.Class<> ) ; if ( ! CollectionUtils . isEmpty ( this . java.util.Collection<> ) ) { ConstructorArgumentValues org.springframework.beans.factory.groovy.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; for ( java.lang.Object java.lang.Object : this . java.util.Collection<> ) { org.springframework.beans.factory.groovy.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.Object ) ; } org.springframework.beans.factory.groovy.AbstractBeanDefinition . setConstructorArgumentValues ( org.springframework.beans.factory.groovy.ConstructorArgumentValues ) ; } if ( this . java.lang.String != null ) { org.springframework.beans.factory.groovy.AbstractBeanDefinition . setParentName ( this . java.lang.String ) ; } this . org.springframework.beans.factory.groovy.BeanWrapper = new BeanWrapperImpl ( org.springframework.beans.factory.groovy.AbstractBeanDefinition ) ; return org.springframework.beans.factory.groovy.AbstractBeanDefinition ; }  <METHOD_END>
<METHOD_START> public void void ( BeanDefinitionHolder org.springframework.beans.factory.groovy.BeanDefinitionHolder ) { this . org.springframework.beans.factory.groovy.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.beans.factory.groovy.BeanDefinitionHolder . getBeanDefinition ( ) ; this . java.lang.String = org.springframework.beans.factory.groovy.BeanDefinitionHolder . getBeanName ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.groovy.BeanDefinitionHolder org.springframework.beans.factory.groovy.BeanDefinitionHolder ( ) { return new BeanDefinitionHolder ( org.springframework.beans.factory.groovy.AbstractBeanDefinition ( ) , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( java.lang.Object instanceof java.lang.String ) { this . java.lang.String = ( java.lang.String ) java.lang.Object ; } else if ( java.lang.Object instanceof RuntimeBeanReference ) { this . java.lang.String = ( ( RuntimeBeanReference ) java.lang.Object ) . getBeanName ( ) ; } else if ( java.lang.Object instanceof org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper ) { this . java.lang.String = ( ( org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper ) java.lang.Object ) . java.lang.String ( ) ; } org.springframework.beans.factory.groovy.AbstractBeanDefinition ( ) . setParentName ( this . java.lang.String ) ; org.springframework.beans.factory.groovy.AbstractBeanDefinition ( ) . setAbstract ( false ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper ) { java.lang.Object = ( ( org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper ) java.lang.Object ) . org.springframework.beans.factory.groovy.AbstractBeanDefinition ( ) ; } org.springframework.beans.factory.groovy.AbstractBeanDefinition ( ) . getPropertyValues ( ) . add ( java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( this . org.springframework.beans.factory.groovy.BeanWrapper . isReadableProperty ( java.lang.String ) ) { return this . org.springframework.beans.factory.groovy.BeanWrapper . getPropertyValue ( java.lang.String ) ; } else if ( java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { return null ; } return super. getProperty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.String . boolean ( java.lang.String ) ) { void ( java.lang.Object ) ; } else { AbstractBeanDefinition org.springframework.beans.factory.groovy.AbstractBeanDefinition = org.springframework.beans.factory.groovy.AbstractBeanDefinition ( ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { if ( STRING . boolean ( java.lang.Object ) ) { org.springframework.beans.factory.groovy.AbstractBeanDefinition . setAutowireMode ( AutowireCapableBeanFactory . AUTOWIRE_BY_NAME ) ; } else if ( STRING . boolean ( java.lang.Object ) ) { org.springframework.beans.factory.groovy.AbstractBeanDefinition . setAutowireMode ( AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE ) ; } else if ( STRING . boolean ( java.lang.Object ) ) { org.springframework.beans.factory.groovy.AbstractBeanDefinition . setAutowireMode ( AutowireCapableBeanFactory . AUTOWIRE_CONSTRUCTOR ) ; } else if ( java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Object ) ) { org.springframework.beans.factory.groovy.AbstractBeanDefinition . setAutowireMode ( AutowireCapableBeanFactory . AUTOWIRE_BY_NAME ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) && java.lang.Object instanceof java.util.List ) { ConstructorArgumentValues org.springframework.beans.factory.groovy.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; java.util.List java.util.List = ( java.util.List ) java.lang.Object ; for ( java.lang.Object java.lang.Object : java.util.List ) { org.springframework.beans.factory.groovy.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.Object ) ; } org.springframework.beans.factory.groovy.AbstractBeanDefinition . setConstructorArgumentValues ( org.springframework.beans.factory.groovy.ConstructorArgumentValues ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object != null ) { org.springframework.beans.factory.groovy.AbstractBeanDefinition . setFactoryBeanName ( java.lang.Object . java.lang.String ( ) ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object != null ) org.springframework.beans.factory.groovy.AbstractBeanDefinition . setFactoryMethodName ( java.lang.Object . java.lang.String ( ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object != null ) { org.springframework.beans.factory.groovy.AbstractBeanDefinition . setInitMethodName ( java.lang.Object . java.lang.String ( ) ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object != null ) { org.springframework.beans.factory.groovy.AbstractBeanDefinition . setDestroyMethodName ( java.lang.Object . java.lang.String ( ) ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { org.springframework.beans.factory.groovy.AbstractBeanDefinition . setScope ( java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Object ) ? BeanDefinition . SCOPE_SINGLETON : BeanDefinition . SCOPE_PROTOTYPE ) ; } else if ( this . org.springframework.beans.factory.groovy.BeanWrapper . isWritableProperty ( java.lang.String ) ) { this . org.springframework.beans.factory.groovy.BeanWrapper . setPropertyValue ( java.lang.String , java.lang.Object ) ; } else { super. setProperty ( java.lang.String , java.lang.Object ) ; } } }  <METHOD_END>
