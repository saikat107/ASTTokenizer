<METHOD_START> @ Before public void void ( ) { EmbeddedDatabaseBuilder org.springframework.integration.jdbc.EmbeddedDatabaseBuilder = new EmbeddedDatabaseBuilder ( ) ; org.springframework.integration.jdbc.EmbeddedDatabaseBuilder . setType ( EmbeddedDatabaseType . HSQL ) . addScript ( STRING ) ; this . org.springframework.integration.jdbc.EmbeddedDatabase = org.springframework.integration.jdbc.EmbeddedDatabaseBuilder . build ( ) ; this . org.springframework.integration.jdbc.JdbcTemplate = new JdbcTemplate ( this . org.springframework.integration.jdbc.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.integration.jdbc.EmbeddedDatabase . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcMessageHandler org.springframework.integration.jdbc.JdbcMessageHandler = new JdbcMessageHandler ( org.springframework.integration.jdbc.JdbcTemplate , STRING ) ; org.springframework.integration.jdbc.JdbcMessageHandler . afterPropertiesSet ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.jdbc.JdbcMessageHandler . handleMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jdbc.JdbcTemplate . queryForMap ( STRING , NUMBER ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcMessageHandler org.springframework.integration.jdbc.JdbcMessageHandler = new JdbcMessageHandler ( org.springframework.integration.jdbc.JdbcTemplate , STRING ) ; org.springframework.integration.jdbc.JdbcMessageHandler . afterPropertiesSet ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.jdbc.JdbcMessageHandler . handleMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jdbc.JdbcTemplate . queryForMap ( STRING , NUMBER ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcMessageHandler org.springframework.integration.jdbc.JdbcMessageHandler = new JdbcMessageHandler ( org.springframework.integration.jdbc.JdbcTemplate , STRING ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; org.springframework.integration.jdbc.JdbcMessageHandler . setPreparedStatementSetter ( ( ps , requestMessage ) -> { ps . setObject ( NUMBER , requestMessage . getPayload ( ) ) ; setterInvoked . set ( true ) ; } ) ; org.springframework.integration.jdbc.JdbcMessageHandler . afterPropertiesSet ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.jdbc.JdbcMessageHandler . handleMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jdbc.JdbcTemplate . queryForMap ( STRING , NUMBER ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcMessageHandler org.springframework.integration.jdbc.JdbcMessageHandler = new JdbcMessageHandler ( org.springframework.integration.jdbc.JdbcTemplate , STRING ) ; org.springframework.integration.jdbc.JdbcMessageHandler . afterPropertiesSet ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.jdbc.Message<java.lang.String> . getHeaders ( ) . getId ( ) . toString ( ) ; org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) . setHeader ( STRING , org.springframework.integration.jdbc.Message<java.lang.String> . getHeaders ( ) . getId ( ) . toString ( ) ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageHandler . handleMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jdbc.JdbcTemplate . queryForMap ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcMessageHandler org.springframework.integration.jdbc.JdbcMessageHandler = new JdbcMessageHandler ( org.springframework.integration.jdbc.JdbcTemplate , STRING ) ; org.springframework.integration.jdbc.JdbcMessageHandler . afterPropertiesSet ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.jdbc.JdbcMessageHandler . handleMessage ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; java.lang.String java.lang.String = org.springframework.integration.jdbc.Message<java.lang.String> . getHeaders ( ) . get ( STRING ) . toString ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jdbc.JdbcTemplate . queryForMap ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
