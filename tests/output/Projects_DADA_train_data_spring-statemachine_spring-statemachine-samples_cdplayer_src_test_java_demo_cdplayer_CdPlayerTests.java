<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . getState ( ) . getIds ( ) , contains ( States . IDLE , States . CLOSED ) ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . eject ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . getState ( ) . getIds ( ) , contains ( States . IDLE , States . OPEN ) ) ; demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . eject ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . getState ( ) . getIds ( ) , contains ( States . IDLE , States . CLOSED ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . eject ( ) ; demo.cdplayer.CdPlayer . load ( demo.cdplayer.Library . getCollection ( ) . get ( NUMBER ) ) ; demo.cdplayer.CdPlayer . eject ( ) ; demo.cdplayer.CdPlayer . play ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . getState ( ) . getIds ( ) , contains ( States . BUSY , States . PLAYING ) ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . eject ( ) ; demo.cdplayer.CdPlayer . load ( demo.cdplayer.Library . getCollection ( ) . get ( NUMBER ) ) ; demo.cdplayer.CdPlayer . play ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . getState ( ) . getIds ( ) , contains ( States . BUSY , States . PLAYING ) ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . play ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . getState ( ) . getIds ( ) , contains ( States . IDLE , States . CLOSED ) ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . eject ( ) ; demo.cdplayer.CdPlayer . load ( demo.cdplayer.Library . getCollection ( ) . get ( NUMBER ) ) ; demo.cdplayer.CdPlayer . eject ( ) ; demo.cdplayer.CdPlayer . play ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . getState ( ) . getIds ( ) , contains ( States . BUSY , States . PLAYING ) ) ; void ( STRING ) ; demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; void ( STRING ) ; demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; void ( STRING ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . eject ( ) ; demo.cdplayer.CdPlayer . load ( demo.cdplayer.Library . getCollection ( ) . get ( NUMBER ) ) ; demo.cdplayer.CdPlayer . eject ( ) ; demo.cdplayer.CdPlayer . play ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . getState ( ) . getIds ( ) , contains ( States . BUSY , States . PLAYING ) ) ; void ( STRING ) ; demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; void ( STRING ) ; demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; void ( STRING ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . pause ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; void ( STRING ) ; demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . pause ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . eject ( ) ; demo.cdplayer.CdPlayer . load ( demo.cdplayer.Library . getCollection ( ) . get ( NUMBER ) ) ; demo.cdplayer.CdPlayer . eject ( ) ; demo.cdplayer.CdPlayer . play ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . getState ( ) . getIds ( ) , contains ( States . BUSY , States . PLAYING ) ) ; demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . stop ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.cdplayer.CdPlayerTests.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; demo.cdplayer.CdPlayer . eject ( ) ; demo.cdplayer.CdPlayer . play ( ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( demo.cdplayer.CdPlayerTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . getState ( ) . getIds ( ) , contains ( States . IDLE , States . CLOSED ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertThat ( demo.cdplayer.CdPlayer . getLdcStatus ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertThat ( demo.cdplayer.CdPlayer . getLdcStatus ( ) , startsWith ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertThat ( demo.cdplayer.CdPlayer . getLdcStatus ( ) , containsString ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertThat ( demo.cdplayer.CdPlayer . getLdcStatus ( ) , not ( containsString ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Before public void void ( ) java.lang.Exception { demo.cdplayer.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; demo.cdplayer.AnnotationConfigApplicationContext . register ( CommonConfiguration .class , Application .class , demo.cdplayer.CdPlayerTests.TestConfig .class ) ; demo.cdplayer.AnnotationConfigApplicationContext . refresh ( ) ; demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> = demo.cdplayer.AnnotationConfigApplicationContext . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; demo.cdplayer.CdPlayer = demo.cdplayer.AnnotationConfigApplicationContext . getBean ( CdPlayer .class ) ; demo.cdplayer.Library = demo.cdplayer.AnnotationConfigApplicationContext . getBean ( Library .class ) ; demo.cdplayer.CdPlayerTests.TestListener = demo.cdplayer.AnnotationConfigApplicationContext . getBean ( demo.cdplayer.CdPlayerTests.TestListener .class ) ; demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . start ( ) ; java.lang.Thread . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . stop ( ) ; demo.cdplayer.AnnotationConfigApplicationContext . close ( ) ; demo.cdplayer.AnnotationConfigApplicationContext = null ; demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> = null ; demo.cdplayer.CdPlayer = null ; demo.cdplayer.Library = null ; demo.cdplayer.CdPlayerTests.TestListener = null ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.cdplayer.StateMachineListener<demo.cdplayer.States,demo.cdplayer.Events> < States , Events > demo.cdplayer.StateMachineListener<demo.cdplayer.States,demo.cdplayer.Events> ( ) { demo.cdplayer.CdPlayerTests.TestListener demo.cdplayer.CdPlayerTests.TestListener = new demo.cdplayer.CdPlayerTests.TestListener ( ) ; demo.cdplayer.StateMachine<demo.cdplayer.States,demo.cdplayer.Events> . addStateListener ( demo.cdplayer.CdPlayerTests.TestListener ) ; return demo.cdplayer.CdPlayerTests.TestListener ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.cdplayer.Library demo.cdplayer.Library ( ) { Track demo.cdplayer.Track = new Track ( STRING , NUMBER ) ; Track demo.cdplayer.Track = new Track ( STRING , NUMBER ) ; Cd demo.cdplayer.Cd = new Cd ( STRING , new Track [] { demo.cdplayer.Track , demo.cdplayer.Track } ) ; Track demo.cdplayer.Track = new Track ( STRING , NUMBER ) ; Track demo.cdplayer.Track = new Track ( STRING , NUMBER ) ; Cd demo.cdplayer.Cd = new Cd ( STRING , new Track [] { demo.cdplayer.Track , demo.cdplayer.Track } ) ; return new Library ( new Cd [] { demo.cdplayer.Cd , demo.cdplayer.Cd } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.cdplayer.State<demo.cdplayer.States,demo.cdplayer.Events> , State < States , Events > demo.cdplayer.State<demo.cdplayer.States,demo.cdplayer.Events> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.cdplayer.State<demo.cdplayer.States,demo.cdplayer.Events> ) { java.util.List<demo.cdplayer.State<demo.cdplayer.States,demo.cdplayer.Events>> . add ( demo.cdplayer.State<demo.cdplayer.States,demo.cdplayer.Events> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < States , Events > demo.cdplayer.State<demo.cdplayer.States,demo.cdplayer.Events> ) { java.util.List<demo.cdplayer.State<demo.cdplayer.States,demo.cdplayer.Events>> . add ( demo.cdplayer.State<demo.cdplayer.States,demo.cdplayer.Events> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < States , Events > demo.cdplayer.Transition<demo.cdplayer.States,demo.cdplayer.Events> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int ) { void ( int , int , int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; int = NUMBER ; java.util.List<demo.cdplayer.State<demo.cdplayer.States,demo.cdplayer.Events>> . clear ( ) ; java.util.List<demo.cdplayer.State<demo.cdplayer.States,demo.cdplayer.Events>> . clear ( ) ; }  <METHOD_END>
