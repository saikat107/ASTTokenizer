<METHOD_START> public void ( ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory ) { this . org.springframework.boot.web.servlet.MultiValueMap<java.lang.Class<?>,org.springframework.boot.web.servlet.ServletContextInitializer> = new LinkedMultiValueMap <> ( ) ; void ( org.springframework.boot.web.servlet.ListableBeanFactory ) ; void ( org.springframework.boot.web.servlet.ListableBeanFactory ) ; java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer> < ServletContextInitializer > java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer> = new java.util.ArrayList<org.springframework.boot.web.servlet.ServletContextInitializer> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<?,java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer>> < ? , java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer> < ServletContextInitializer > > java.util.Map.Entry<?,java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer>> : this . org.springframework.boot.web.servlet.MultiValueMap<java.lang.Class<?>,org.springframework.boot.web.servlet.ServletContextInitializer> . entrySet ( ) ) { AnnotationAwareOrderComparator . sort ( java.util.Map.Entry<,java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer>> . getValue ( ) ) ; java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer> . addAll ( java.util.Map.Entry<,java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer>> . getValue ( ) ) ; } this . java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer> = java.util.Collections . java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer> ( java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer> ) ; }  <METHOD_END>
<METHOD_START> private void void ( ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory ) { for ( java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer> < java.lang.String , ServletContextInitializer > java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer> : java.util.List ( org.springframework.boot.web.servlet.ListableBeanFactory , ServletContextInitializer .class ) ) { void ( java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer> . getKey ( ) , java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.ServletContextInitializer> . getValue ( ) , org.springframework.boot.web.servlet.ListableBeanFactory ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , ServletContextInitializer org.springframework.boot.web.servlet.ServletContextInitializer , ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory ) { if ( org.springframework.boot.web.servlet.ServletContextInitializer instanceof ServletRegistrationBean ) { Servlet org.springframework.boot.web.servlet.Servlet = ( ( ServletRegistrationBean < ? > ) org.springframework.boot.web.servlet.ServletContextInitializer ) . getServlet ( ) ; void ( Servlet .class , java.lang.String , org.springframework.boot.web.servlet.ServletContextInitializer , org.springframework.boot.web.servlet.ListableBeanFactory , org.springframework.boot.web.servlet.Servlet ) ; } else if ( org.springframework.boot.web.servlet.ServletContextInitializer instanceof FilterRegistrationBean ) { Filter org.springframework.boot.web.servlet.Filter = ( ( FilterRegistrationBean < ? > ) org.springframework.boot.web.servlet.ServletContextInitializer ) . getFilter ( ) ; void ( Filter .class , java.lang.String , org.springframework.boot.web.servlet.ServletContextInitializer , org.springframework.boot.web.servlet.ListableBeanFactory , org.springframework.boot.web.servlet.Filter ) ; } else if ( org.springframework.boot.web.servlet.ServletContextInitializer instanceof DelegatingFilterProxyRegistrationBean ) { java.lang.String java.lang.String = ( ( DelegatingFilterProxyRegistrationBean ) org.springframework.boot.web.servlet.ServletContextInitializer ) . getTargetBeanName ( ) ; void ( Filter .class , java.lang.String , org.springframework.boot.web.servlet.ServletContextInitializer , org.springframework.boot.web.servlet.ListableBeanFactory , java.lang.String ) ; } else if ( org.springframework.boot.web.servlet.ServletContextInitializer instanceof ServletListenerRegistrationBean ) { java.util.EventListener java.util.EventListener = ( ( ServletListenerRegistrationBean < ? > ) org.springframework.boot.web.servlet.ServletContextInitializer ) . getListener ( ) ; void ( java.util.EventListener .class , java.lang.String , org.springframework.boot.web.servlet.ServletContextInitializer , org.springframework.boot.web.servlet.ListableBeanFactory , java.util.EventListener ) ; } else { void ( ServletContextInitializer .class , java.lang.String , org.springframework.boot.web.servlet.ServletContextInitializer , org.springframework.boot.web.servlet.ListableBeanFactory , org.springframework.boot.web.servlet.ServletContextInitializer ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , ServletContextInitializer org.springframework.boot.web.servlet.ServletContextInitializer , ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory , java.lang.Object java.lang.Object ) { this . org.springframework.boot.web.servlet.MultiValueMap<java.lang.Class<?>,org.springframework.boot.web.servlet.ServletContextInitializer> . add ( java.lang.Class<> , org.springframework.boot.web.servlet.ServletContextInitializer ) ; if ( java.lang.Object != null ) { this . java.util.Set<java.lang.Object> . boolean ( java.lang.Object ) ; } if ( org.springframework.boot.web.servlet.ServletContextInitializerBeans . org.springframework.boot.web.servlet.Log . isDebugEnabled ( ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String , org.springframework.boot.web.servlet.ListableBeanFactory ) ; int int = int ( org.springframework.boot.web.servlet.ServletContextInitializer ) ; org.springframework.boot.web.servlet.ServletContextInitializerBeans . org.springframework.boot.web.servlet.Log . debug ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.String + STRING + int + STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory ) { if ( org.springframework.boot.web.servlet.ListableBeanFactory instanceof BeanDefinitionRegistry ) { BeanDefinitionRegistry org.springframework.boot.web.servlet.BeanDefinitionRegistry = ( BeanDefinitionRegistry ) org.springframework.boot.web.servlet.ListableBeanFactory ; return org.springframework.boot.web.servlet.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) . getResourceDescription ( ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory ) { MultipartConfigElement org.springframework.boot.web.servlet.MultipartConfigElement = org.springframework.boot.web.servlet.MultipartConfigElement ( org.springframework.boot.web.servlet.ListableBeanFactory ) ; void ( org.springframework.boot.web.servlet.ListableBeanFactory , Servlet .class , new org.springframework.boot.web.servlet.ServletContextInitializerBeans.ServletRegistrationBeanAdapter ( org.springframework.boot.web.servlet.MultipartConfigElement ) ) ; void ( org.springframework.boot.web.servlet.ListableBeanFactory , Filter .class , new org.springframework.boot.web.servlet.ServletContextInitializerBeans.FilterRegistrationBeanAdapter ( ) ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : ServletListenerRegistrationBean . getSupportedTypes ( ) ) { void ( org.springframework.boot.web.servlet.ListableBeanFactory , java.util.EventListener .class , ( java.lang.Class<java.util.EventListener> < java.util.EventListener > ) java.lang.Class<> , new org.springframework.boot.web.servlet.ServletContextInitializerBeans.ServletListenerRegistrationBeanAdapter ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.servlet.MultipartConfigElement org.springframework.boot.web.servlet.MultipartConfigElement ( ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory ) { java.util.List<java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.MultipartConfigElement>> < java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.MultipartConfigElement> < java.lang.String , MultipartConfigElement > > java.util.List<java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.MultipartConfigElement>> = java.util.List ( org.springframework.boot.web.servlet.ListableBeanFactory , MultipartConfigElement .class ) ; return ( java.util.List<java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.MultipartConfigElement>> . isEmpty ( ) ? null : java.util.List<java.util.Map.Entry<java.lang.String,org.springframework.boot.web.servlet.MultipartConfigElement>> . get ( NUMBER ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private < T > void void ( ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory , java.lang.Class<T> < T > java.lang.Class<T> , org.springframework.boot.web.servlet.ServletContextInitializerBeans.RegistrationBeanAdapter<T> < T > org.springframework.boot.web.servlet.ServletContextInitializerBeans.RegistrationBeanAdapter<T> ) { void ( org.springframework.boot.web.servlet.ListableBeanFactory , java.lang.Class<T> , java.lang.Class<T> , org.springframework.boot.web.servlet.ServletContextInitializerBeans.RegistrationBeanAdapter<T> ) ; }  <METHOD_END>
<METHOD_START> private < T , B extends T > void void ( ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Class<B> < B > java.lang.Class<B> , org.springframework.boot.web.servlet.ServletContextInitializerBeans.RegistrationBeanAdapter<T> < T > org.springframework.boot.web.servlet.ServletContextInitializerBeans.RegistrationBeanAdapter<T> ) { java.util.List<java.util.Map.Entry<java.lang.String,B>> < java.util.Map . java.util.Map.Entry<java.lang.String,B> < java.lang.String , B > > java.util.List<java.util.Map.Entry<java.lang.String,B>> = java.util.List ( org.springframework.boot.web.servlet.ListableBeanFactory , java.lang.Class<B> , this . java.util.Set<java.lang.Object> ) ; for ( java.util.Map.Entry<java.lang.String,B> < java.lang.String , B > java.util.Map.Entry<java.lang.String,B> : java.util.List<java.util.Map.Entry<java.lang.String,B>> ) { if ( this . java.util.Set<java.lang.Object> . boolean ( java.util.Map.Entry<java.lang.String,B> . B ( ) ) ) { int int = int ( java.util.Map.Entry<java.lang.String,B> . B ( ) ) ; java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,B> . java.lang.String ( ) ; RegistrationBean org.springframework.boot.web.servlet.RegistrationBean = org.springframework.boot.web.servlet.ServletContextInitializerBeans.RegistrationBeanAdapter<T> . org.springframework.boot.web.servlet.RegistrationBean ( java.lang.String , java.util.Map.Entry<java.lang.String,B> . B ( ) , java.util.List<java.util.Map.Entry<java.lang.String,B>> . int ( ) ) ; org.springframework.boot.web.servlet.RegistrationBean . setName ( java.lang.String ) ; org.springframework.boot.web.servlet.RegistrationBean . setOrder ( int ) ; this . org.springframework.boot.web.servlet.MultiValueMap<java.lang.Class<?>,org.springframework.boot.web.servlet.ServletContextInitializer> . add ( java.lang.Class<T> , org.springframework.boot.web.servlet.RegistrationBean ) ; if ( org.springframework.boot.web.servlet.ServletContextInitializerBeans . org.springframework.boot.web.servlet.Log . isDebugEnabled ( ) ) { org.springframework.boot.web.servlet.ServletContextInitializerBeans . org.springframework.boot.web.servlet.Log . debug ( STRING + java.lang.Class<T> . java.lang.String ( ) + STRING + java.lang.String + STRING + int + STRING + java.lang.String ( java.lang.String , org.springframework.boot.web.servlet.ListableBeanFactory ) ) ; } } } }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Object java.lang.Object ) { return new AnnotationAwareOrderComparator ( ) { @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { return super. getOrder ( java.lang.Object ) ; } } . int ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { return super. getOrder ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private < T > java.util.List<java.util.Map.Entry<java.lang.String,T>> < java.util.Map.Entry<java.lang.String,T> < java.lang.String , T > > java.util.List<java.util.Map.Entry<java.lang.String,T>> ( ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory , java.lang.Class<T> < T > java.lang.Class<T> ) { return java.util.List ( org.springframework.boot.web.servlet.ListableBeanFactory , java.lang.Class<T> , java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private < T > java.util.List<java.util.Map.Entry<java.lang.String,T>> < java.util.Map.Entry<java.lang.String,T> < java.lang.String , T > > java.util.List<java.util.Map.Entry<java.lang.String,T>> ( ListableBeanFactory org.springframework.boot.web.servlet.ListableBeanFactory , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Set<?> < ? > java.util.Set<?> ) { java.util.List<java.util.Map.Entry<java.lang.String,T>> < java.util.Map.Entry<java.lang.String,T> < java.lang.String , T > > java.util.List<java.util.Map.Entry<java.lang.String,T>> = new java.util.ArrayList<java.util.Map.Entry<java.lang.String,T>> <> ( ) ; java.util.Comparator<java.util.Map.Entry<java.lang.String,T>> < java.util.Map.Entry<java.lang.String,T> < java.lang.String , T > > java.util.Comparator<java.util.Map.Entry<java.lang.String,T>> = new java.util.Comparator<java.util.Map.Entry<java.lang.String,T>> < java.util.Map.Entry<java.lang.String,T> < java.lang.String , T > > ( ) { @ java.lang.Override public int int ( java.util.Map.Entry<java.lang.String,T> < java.lang.String , T > java.util.Map.Entry<java.lang.String,T> , java.util.Map.Entry<java.lang.String,T> < java.lang.String , T > java.util.Map.Entry<java.lang.String,T> ) { return AnnotationAwareOrderComparator . INSTANCE . compare ( java.util.Map.Entry<java.lang.String,T> . T ( ) , java.util.Map.Entry<java.lang.String,T> . T ( ) ) ; } } ; java.lang.String [] java.lang.String[] = org.springframework.boot.web.servlet.ListableBeanFactory . getBeanNamesForType ( java.lang.Class<T> , true , false ) ; java.util.Map<java.lang.String,T> < java.lang.String , T > java.util.Map<java.lang.String,T> = new java.util.LinkedHashMap<java.lang.String,T> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! java.util.Set<> . boolean ( java.lang.String ) && ! ScopedProxyUtils . isScopedTarget ( java.lang.String ) ) { T T = org.springframework.boot.web.servlet.ListableBeanFactory . getBean ( java.lang.String , java.lang.Class<T> ) ; if ( ! java.util.Set<> . boolean ( T ) ) { java.util.Map<java.lang.String,T> . T ( java.lang.String , T ) ; } } } java.util.List<java.util.Map.Entry<java.lang.String,T>> . boolean ( java.util.Map<java.lang.String,T> . java.util.Set<java.util.Map.Entry<java.lang.String,T>> ( ) ) ; java.util.Collections . void ( java.util.List<java.util.Map.Entry<java.lang.String,T>> , java.util.Comparator<java.util.Map.Entry<java.lang.String,T>> ) ; return java.util.List<java.util.Map.Entry<java.lang.String,T>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.util.Map.Entry<java.lang.String,T> < java.lang.String , T > java.util.Map.Entry<java.lang.String,T> , java.util.Map.Entry<java.lang.String,T> < java.lang.String , T > java.util.Map.Entry<java.lang.String,T> ) { return AnnotationAwareOrderComparator . INSTANCE . compare ( java.util.Map.Entry<java.lang.String,T> . T ( ) , java.util.Map.Entry<java.lang.String,T> . T ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.boot.web.servlet.ServletContextInitializer> < ServletContextInitializer > java.util.Iterator<org.springframework.boot.web.servlet.ServletContextInitializer> ( ) { return this . java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.List<org.springframework.boot.web.servlet.ServletContextInitializer> . size ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.boot.web.servlet.RegistrationBean org.springframework.boot.web.servlet.RegistrationBean ( java.lang.String java.lang.String , T T , int int );  <METHOD_END>
<METHOD_START> void ( MultipartConfigElement org.springframework.boot.web.servlet.MultipartConfigElement ) { this . org.springframework.boot.web.servlet.MultipartConfigElement = org.springframework.boot.web.servlet.MultipartConfigElement ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.servlet.RegistrationBean org.springframework.boot.web.servlet.RegistrationBean ( java.lang.String java.lang.String , Servlet org.springframework.boot.web.servlet.Servlet , int int ) { java.lang.String java.lang.String = ( int == NUMBER ? STRING : STRING + java.lang.String + STRING ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = STRING ; } ServletRegistrationBean < Servlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.Servlet> = new ServletRegistrationBean <> ( org.springframework.boot.web.servlet.Servlet , java.lang.String ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.Servlet> . setMultipartConfig ( this . org.springframework.boot.web.servlet.MultipartConfigElement ) ; return org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.Servlet> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.servlet.RegistrationBean org.springframework.boot.web.servlet.RegistrationBean ( java.lang.String java.lang.String , Filter org.springframework.boot.web.servlet.Filter , int int ) { return new FilterRegistrationBean <> ( org.springframework.boot.web.servlet.Filter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.servlet.RegistrationBean org.springframework.boot.web.servlet.RegistrationBean ( java.lang.String java.lang.String , java.util.EventListener java.util.EventListener , int int ) { return new ServletListenerRegistrationBean <> ( java.util.EventListener ) ; }  <METHOD_END>
