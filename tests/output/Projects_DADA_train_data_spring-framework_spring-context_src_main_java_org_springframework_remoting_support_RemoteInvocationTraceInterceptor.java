<METHOD_START> public void ( ) { this . java.lang.String = STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.support.MethodInvocation ) throws java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.remoting.support.MethodInvocation . getMethod ( ) ; if ( org.springframework.remoting.support.Log . isDebugEnabled ( ) ) { org.springframework.remoting.support.Log . debug ( STRING + this . java.lang.String + STRING + ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method ) ) ; } try { java.lang.Object java.lang.Object = org.springframework.remoting.support.MethodInvocation . proceed ( ) ; if ( org.springframework.remoting.support.Log . isDebugEnabled ( ) ) { org.springframework.remoting.support.Log . debug ( STRING + this . java.lang.String + STRING + ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method ) ) ; } return java.lang.Object ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.lang.RuntimeException || java.lang.Throwable instanceof java.lang.Error ) { if ( org.springframework.remoting.support.Log . isWarnEnabled ( ) ) { org.springframework.remoting.support.Log . warn ( STRING + this . java.lang.String + STRING + ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method ) , java.lang.Throwable ) ; } } else { if ( org.springframework.remoting.support.Log . isInfoEnabled ( ) ) { org.springframework.remoting.support.Log . info ( STRING + this . java.lang.String + STRING + ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method ) , java.lang.Throwable ) ; } } throw java.lang.Throwable ; } }  <METHOD_END>
