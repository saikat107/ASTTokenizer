<METHOD_START> public void ( MongoOperations org.springframework.data.mongodb.repository.support.MongoOperations ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.MongoOperations , STRING ) ; this . org.springframework.data.mongodb.repository.support.MongoOperations = org.springframework.data.mongodb.repository.support.MongoOperations ; this . org.springframework.data.mongodb.repository.support.MappingContext<? extends org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?>,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> = org.springframework.data.mongodb.repository.support.MongoOperations . getConverter ( ) . getMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( RepositoryMetadata org.springframework.data.mongodb.repository.support.RepositoryMetadata ) { boolean boolean = ( boolean && ReactiveCrudRepository .class . boolean ( org.springframework.data.mongodb.repository.support.RepositoryMetadata . getRepositoryInterface ( ) ) ) || ( boolean && RxJava1CrudRepository .class . boolean ( org.springframework.data.mongodb.repository.support.RepositoryMetadata . getRepositoryInterface ( ) ) ) ; boolean boolean = QUERY_DSL_PRESENT && QuerydslPredicateExecutor .class . boolean ( org.springframework.data.mongodb.repository.support.RepositoryMetadata . getRepositoryInterface ( ) ) ; if ( boolean ) { if( boolean ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } return SimpleReactiveMongoRepository .class ; } return boolean ? QueryDslMongoRepository .class : SimpleMongoRepository .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( RepositoryInformation org.springframework.data.mongodb.repository.support.RepositoryInformation ) { MongoEntityInformation < ? , java.io.Serializable > org.springframework.data.mongodb.repository.support.MongoEntityInformation<?,java.io.Serializable> = org.springframework.data.mongodb.repository.support.MongoEntityInformation ( org.springframework.data.mongodb.repository.support.RepositoryInformation . getDomainType ( ) , org.springframework.data.mongodb.repository.support.RepositoryInformation ) ; return getTargetRepositoryViaReflection ( org.springframework.data.mongodb.repository.support.RepositoryInformation , org.springframework.data.mongodb.repository.support.MongoEntityInformation<,java.io.Serializable> , org.springframework.data.mongodb.repository.support.MongoOperations ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.mongodb.repository.support.QueryLookupStrategy> < QueryLookupStrategy > java.util.Optional<org.springframework.data.mongodb.repository.support.QueryLookupStrategy> ( Key org.springframework.data.mongodb.repository.support.Key , EvaluationContextProvider org.springframework.data.mongodb.repository.support.EvaluationContextProvider ) { return java.util.Optional . java.util.Optional<T> ( new org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.MongoQueryLookupStrategy ( org.springframework.data.mongodb.repository.support.MongoOperations , org.springframework.data.mongodb.repository.support.EvaluationContextProvider , org.springframework.data.mongodb.repository.support.MappingContext<,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> ) ) ; }  <METHOD_END>
<METHOD_START> public < T , ID extends java.io.Serializable > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> < T , ID > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,java.io.Serializable> ( java.lang.Class<T> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T , ID extends java.io.Serializable > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> < T , ID > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> , RepositoryInformation org.springframework.data.mongodb.repository.support.RepositoryInformation ) { MongoPersistentEntity < ? > org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?> = org.springframework.data.mongodb.repository.support.MappingContext<,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<T> ) ; return MongoEntityInformationSupport .< T , ID > entityInformationFor ( org.springframework.data.mongodb.repository.support.MongoPersistentEntity<> , org.springframework.data.mongodb.repository.support.RepositoryInformation != null ? org.springframework.data.mongodb.repository.support.RepositoryInformation . getIdType ( ) : null ) ; }  <METHOD_END>
<METHOD_START> public void ( MongoOperations org.springframework.data.mongodb.repository.support.MongoOperations , EvaluationContextProvider org.springframework.data.mongodb.repository.support.EvaluationContextProvider , MappingContext < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.repository.support.MappingContext<? extends org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?>,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> ) { this . org.springframework.data.mongodb.repository.support.MongoOperations = org.springframework.data.mongodb.repository.support.MongoOperations ; this . org.springframework.data.mongodb.repository.support.EvaluationContextProvider = org.springframework.data.mongodb.repository.support.EvaluationContextProvider ; this . org.springframework.data.mongodb.repository.support.MappingContext<? extends org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?>,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> = org.springframework.data.mongodb.repository.support.MappingContext<,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.repository.support.RepositoryQuery org.springframework.data.mongodb.repository.support.RepositoryQuery ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.mongodb.repository.support.RepositoryMetadata , ProjectionFactory org.springframework.data.mongodb.repository.support.ProjectionFactory , NamedQueries org.springframework.data.mongodb.repository.support.NamedQueries ) { MongoQueryMethod org.springframework.data.mongodb.repository.support.MongoQueryMethod = new MongoQueryMethod ( java.lang.reflect.Method , org.springframework.data.mongodb.repository.support.RepositoryMetadata , org.springframework.data.mongodb.repository.support.ProjectionFactory , org.springframework.data.mongodb.repository.support.MappingContext<,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.repository.support.MongoQueryMethod . getNamedQueryName ( ) ; if ( org.springframework.data.mongodb.repository.support.NamedQueries . hasQuery ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.data.mongodb.repository.support.NamedQueries . getQuery ( java.lang.String ) ; return new StringBasedMongoQuery ( java.lang.String , org.springframework.data.mongodb.repository.support.MongoQueryMethod , org.springframework.data.mongodb.repository.support.MongoOperations , org.springframework.data.mongodb.repository.support.SpelExpressionParser , org.springframework.data.mongodb.repository.support.EvaluationContextProvider ) ; } else if ( org.springframework.data.mongodb.repository.support.MongoQueryMethod . hasAnnotatedQuery ( ) ) { return new StringBasedMongoQuery ( org.springframework.data.mongodb.repository.support.MongoQueryMethod , org.springframework.data.mongodb.repository.support.MongoOperations , org.springframework.data.mongodb.repository.support.SpelExpressionParser , org.springframework.data.mongodb.repository.support.EvaluationContextProvider ) ; } else { return new PartTreeMongoQuery ( org.springframework.data.mongodb.repository.support.MongoQueryMethod , org.springframework.data.mongodb.repository.support.MongoOperations ) ; } }  <METHOD_END>
