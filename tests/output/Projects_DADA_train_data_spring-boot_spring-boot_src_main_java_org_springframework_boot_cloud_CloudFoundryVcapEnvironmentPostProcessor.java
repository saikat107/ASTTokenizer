<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableEnvironment org.springframework.boot.cloud.ConfigurableEnvironment , SpringApplication org.springframework.boot.cloud.SpringApplication ) { if ( CloudPlatform . CLOUD_FOUNDRY . isActive ( org.springframework.boot.cloud.ConfigurableEnvironment ) ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; void ( java.util.Properties , java.util.Properties ( org.springframework.boot.cloud.ConfigurableEnvironment ) , STRING ) ; void ( java.util.Properties , java.util.Properties ( org.springframework.boot.cloud.ConfigurableEnvironment ) , STRING ) ; MutablePropertySources org.springframework.boot.cloud.MutablePropertySources = org.springframework.boot.cloud.ConfigurableEnvironment . getPropertySources ( ) ; if ( org.springframework.boot.cloud.MutablePropertySources . contains ( CommandLinePropertySource . COMMAND_LINE_PROPERTY_SOURCE_NAME ) ) { org.springframework.boot.cloud.MutablePropertySources . addAfter ( CommandLinePropertySource . COMMAND_LINE_PROPERTY_SOURCE_NAME , new PropertiesPropertySource ( STRING , java.util.Properties ) ) ; } else { org.springframework.boot.cloud.MutablePropertySources . addFirst ( new PropertiesPropertySource ( STRING , java.util.Properties ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Properties java.util.Properties , java.util.Properties java.util.Properties , java.lang.String java.lang.String ) { for ( java.lang.String java.lang.String : java.util.Properties . java.util.Set<java.lang.String> ( ) ) { java.lang.String java.lang.String = java.lang.String + java.lang.String ; java.util.Properties . java.lang.Object ( java.lang.String , java.util.Properties . java.lang.String ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Properties java.util.Properties ( Environment org.springframework.boot.cloud.Environment ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; try { java.lang.String java.lang.String = org.springframework.boot.cloud.Environment . getProperty ( java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.cloud.JsonParser . parseMap ( java.lang.String ) ; void ( java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.cloud.Log . error ( STRING , java.lang.Exception ) ; } return java.util.Properties ; }  <METHOD_END>
<METHOD_START> private java.util.Properties java.util.Properties ( Environment org.springframework.boot.cloud.Environment ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; try { java.lang.String java.lang.String = org.springframework.boot.cloud.Environment . getProperty ( java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.cloud.JsonParser . parseMap ( java.lang.String ) ; void ( java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.cloud.Log . error ( STRING , java.lang.Exception ) ; } return java.util.Properties ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Properties java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { void ( java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> , STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Properties java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { for ( java.lang.Object java.lang.Object : java.util.Map<java.lang.String,java.lang.Object> . java.util.Collection<java.lang.Object> ( ) ) { @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; if ( java.lang.String == null ) { java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; } void ( java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> , java.lang.String ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.util.Properties java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String ) { for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.util.Map ) { void ( java.util.Properties , ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object , java.lang.String ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ; java.util.Properties . java.lang.Object ( java.lang.String , StringUtils . collectionToCommaDelimitedString ( java.util.Collection<java.lang.Object> ) ) ; int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.util.Collection<java.lang.Object> ) { java.lang.String java.lang.String = STRING + ( int ++ ) + STRING ; void ( java.util.Properties , java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String , java.lang.Object ) , java.lang.String ) ; } } else if ( java.lang.Object instanceof java.lang.String ) { java.util.Properties . java.lang.Object ( java.lang.String , java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Number ) { java.util.Properties . java.lang.Object ( java.lang.String , java.lang.Object . java.lang.String ( ) ) ; } else if ( java.lang.Object instanceof java.lang.Boolean ) { java.util.Properties . java.lang.Object ( java.lang.String , java.lang.Object . java.lang.String ( ) ) ; } else { java.util.Properties . java.lang.Object ( java.lang.String , java.lang.Object == null ? STRING : java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return java.lang.String ; } if ( java.lang.String . boolean ( STRING ) ) { return java.lang.String + java.lang.String ; } return java.lang.String + STRING + java.lang.String ; }  <METHOD_END>
