<METHOD_START> @ Before public void void ( ) { doReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) . when ( org.springframework.data.convert.PersistentEntity<,P> ) . getPersistenceConstructor ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( java.lang.Object .class ) . when ( org.springframework.data.convert.PersistentEntity<,P> ) . getType ( ) ; INSTANCE . createInstance ( org.springframework.data.convert.PersistentEntity<,P> , org.springframework.data.convert.ParameterValueProvider<P> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( java.lang.String [] [] .class ) . when ( org.springframework.data.convert.PersistentEntity<,P> ) . getType ( ) ; INSTANCE . createInstance ( org.springframework.data.convert.PersistentEntity<,P> , org.springframework.data.convert.ParameterValueProvider<P> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Optional<? extends org.springframework.data.convert.PreferredConstructor<org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Foo,P>> < ? extends PreferredConstructor < org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Foo , P > > java.util.Optional<? extends org.springframework.data.convert.PreferredConstructor<org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Foo,P>> = new PreferredConstructorDiscoverer < org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Foo , P > ( org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Foo .class ) . getConstructor ( ) ; doReturn ( java.util.Optional<> ) . when ( org.springframework.data.convert.PersistentEntity<,P> ) . getPersistenceConstructor ( ) ; doReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) . when ( org.springframework.data.convert.ParameterValueProvider<P> ) . getParameterValue ( any ( ) ) ; java.lang.Object java.lang.Object = INSTANCE . createInstance ( org.springframework.data.convert.PersistentEntity<,P> , org.springframework.data.convert.ParameterValueProvider<P> ) ; assertThat ( java.lang.Object ) . isInstanceOf ( org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Foo .class ) ; assertThat ( java.util.Optional<> ) . hasValueSatisfying ( it -> verify ( provider , times ( NUMBER ) ) . getParameterValue ( it . getParameters ( ) . iterator ( ) . next ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MappingInstantiationException .class ) @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { doReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) . when ( org.springframework.data.convert.PersistentEntity<,P> ) . getPersistenceConstructor ( ) ; doReturn ( PersistentEntity .class ) . when ( org.springframework.data.convert.PersistentEntity<,P> ) . getType ( ) ; INSTANCE . createInstance ( org.springframework.data.convert.PersistentEntity<,P> , org.springframework.data.convert.ParameterValueProvider<P> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicPersistentEntity < org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Outer.Inner , P > org.springframework.data.convert.BasicPersistentEntity<org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Outer.Inner,P> = new BasicPersistentEntity <> ( from ( org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Outer.Inner .class ) ) ; assertThat ( org.springframework.data.convert.BasicPersistentEntity<org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Outer.Inner,P> . getPersistenceConstructor ( ) ) . hasValueSatisfying ( it -> { Parameter < Object , P > parameter = it . getParameters ( ) . iterator ( ) . next ( ) ; Object outer = new Outer ( ) ; when ( provider . getParameterValue ( parameter ) ) . thenReturn ( Optional . of ( outer ) ) ; Inner instance = INSTANCE . createInstance ( entity , provider ) ; assertThat ( instance ) . isNotNull ( ) ; ReflectionUtils . doWithFields ( Inner .class , field -> { if ( field . isSynthetic ( ) && field . getName ( ) . startsWith ( STRING ) ) { ReflectionUtils . makeAccessible ( field ) ; assertThat ( ReflectionUtils . getField ( field , instance ) ) . isEqualTo ( outer ) ; } } ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { PersistentEntity < org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Sample , P > org.springframework.data.convert.PersistentEntity<org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Sample,P> = new BasicPersistentEntity <> ( from ( org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Sample .class ) ) ; doReturn ( java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) ) . when ( org.springframework.data.convert.ParameterValueProvider<P> ) . getParameterValue ( any ( Parameter .class ) ) ; java.lang.reflect.Constructor java.lang.reflect.Constructor = org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Sample .class . java.lang.reflect.Constructor<org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Sample> ( java.lang.Long .class , java.lang.String .class ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( STRING , STRING ) ; try { INSTANCE . createInstance ( org.springframework.data.convert.PersistentEntity<org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Sample,P> , org.springframework.data.convert.ParameterValueProvider<P> ) ; fail ( STRING ) ; } catch ( MappingInstantiationException org.springframework.data.convert.MappingInstantiationException ) { assertThat ( org.springframework.data.convert.MappingInstantiationException . getConstructor ( ) ) . hasValue ( java.lang.reflect.Constructor ) ; assertThat ( org.springframework.data.convert.MappingInstantiationException . getConstructorArguments ( ) ) . isEqualTo ( java.util.List<java.lang.Object> ) ; assertThat ( org.springframework.data.convert.MappingInstantiationException . getEntityType ( ) ) . hasValue ( org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Sample .class ) ; assertThat ( org.springframework.data.convert.MappingInstantiationException . getMessage ( ) ) . contains ( org.springframework.data.convert.ReflectionEntityInstantiatorUnitTests.Sample .class . java.lang.String ( ) ) ; assertThat ( org.springframework.data.convert.MappingInstantiationException . getMessage ( ) ) . contains ( java.lang.Long .class . java.lang.String ( ) ) ; assertThat ( org.springframework.data.convert.MappingInstantiationException . getMessage ( ) ) . contains ( java.lang.String .class . java.lang.String ( ) ) ; assertThat ( org.springframework.data.convert.MappingInstantiationException . getMessage ( ) ) . contains ( STRING ) ; } }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.Long java.lang.Long , java.lang.String java.lang.String ) { this . java.lang.Long = java.lang.Long ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
