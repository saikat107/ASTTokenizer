<METHOD_START> public void ( ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return checkAnnotatedParamNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , PathVariable .class , this :: boolean ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( PathVariable org.springframework.web.reactive.result.method.annotation.PathVariable , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map .class . boolean ( java.lang.Class<> ) && ! StringUtils . hasText ( org.springframework.web.reactive.result.method.annotation.PathVariable . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.lang.String java.lang.String = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getAttribute ( java.lang.String ) . orElse ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; return java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
