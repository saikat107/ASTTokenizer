<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.messaging.simp.stomp.Log . debug ( STRING + this . org.springframework.messaging.simp.stomp.TestName . getMethodName ( ) + STRING ) ; this . int = SocketUtils . findAvailableTcpPort ( NUMBER ) ; this . org.springframework.messaging.simp.stomp.ExecutorSubscribableChannel = new ExecutorSubscribableChannel ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler = new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler ( ) ; this . org.springframework.messaging.simp.stomp.ExecutorSubscribableChannel . subscribe ( this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestEventPublisher = new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestEventPublisher ( ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.stomp.BrokerService = new BrokerService ( ) ; this . org.springframework.messaging.simp.stomp.BrokerService . addConnector ( STRING + this . int ) ; this . org.springframework.messaging.simp.stomp.BrokerService . setStartAsync ( false ) ; this . org.springframework.messaging.simp.stomp.BrokerService . setPersistent ( false ) ; this . org.springframework.messaging.simp.stomp.BrokerService . setUseJmx ( false ) ; this . org.springframework.messaging.simp.stomp.BrokerService . getSystemUsage ( ) . getMemoryUsage ( ) . setLimit ( NUMBER * NUMBER * NUMBER ) ; this . org.springframework.messaging.simp.stomp.BrokerService . getSystemUsage ( ) . getTempUsage ( ) . setLimit ( NUMBER * NUMBER * NUMBER ) ; this . org.springframework.messaging.simp.stomp.BrokerService . start ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.InterruptedException { this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler = new StompBrokerRelayMessageHandler ( new StubMessageChannel ( ) , this . org.springframework.messaging.simp.stomp.ExecutorSubscribableChannel , new StubMessageChannel ( ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setRelayPort ( this . int ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setApplicationEventPublisher ( this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestEventPublisher ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setSystemHeartbeatReceiveInterval ( NUMBER ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . setSystemHeartbeatSendInterval ( NUMBER ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . start ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestEventPublisher . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { try { org.springframework.messaging.simp.stomp.Log . debug ( STRING + this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . getStatsInfo ( ) ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . stop ( ) ; } finally { void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { org.springframework.messaging.simp.stomp.Log . debug ( STRING ) ; if ( ! this . org.springframework.messaging.simp.stomp.BrokerService . isStarted ( ) ) { org.springframework.messaging.simp.stomp.Log . debug ( STRING ) ; return; } final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . org.springframework.messaging.simp.stomp.BrokerService . addShutdownHook ( new java.lang.Runnable ( ) { public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; } } ) ; this . org.springframework.messaging.simp.stomp.BrokerService . stop ( ) ; assertTrue ( STRING , java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.messaging.simp.stomp.Log . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.messaging.simp.stomp.Log . debug ( STRING ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange . org.springframework.messaging.simp.stomp.Message<> ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange . org.springframework.messaging.simp.stomp.Message<> ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler . void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange , org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String , java.lang.String , java.lang.String , STRING ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange . org.springframework.messaging.simp.stomp.Message<> ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler . void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String , STRING ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String , java.lang.String ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange . org.springframework.messaging.simp.stomp.Message<> ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler . void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) java.lang.Exception { org.springframework.messaging.simp.stomp.Log . debug ( STRING ) ; void ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestEventPublisher . void ( false ) ; StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SEND ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( MessageBuilder . createMessage ( STRING . byte[] ( ) , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.messaging.simp.stomp.Log . debug ( STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange . org.springframework.messaging.simp.stomp.Message<> ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler . void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; void ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestEventPublisher . void ( false ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler . void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.messaging.simp.stomp.Log . debug ( STRING ) ; void ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestEventPublisher . void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.messaging.simp.stomp.Log . debug ( STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange . org.springframework.messaging.simp.stomp.Message<> ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler . void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String , java.lang.String , java.lang.String , STRING ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange . org.springframework.messaging.simp.stomp.Message<> ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler . void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; void ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler . void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestEventPublisher . void ( false ) ; void ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestEventPublisher . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.messaging.simp.stomp.Log . debug ( STRING ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( STRING ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange . org.springframework.messaging.simp.stomp.Message<> ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler . void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( STRING , STRING ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler . handleMessage ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange . org.springframework.messaging.simp.stomp.Message<> ) ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.TestMessageHandler . void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.messaging.simp.stomp.ApplicationEvent ) { void ( ( java.lang.Object ) org.springframework.messaging.simp.stomp.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { org.springframework.messaging.simp.stomp.Log . debug ( STRING + java.lang.Object ) ; if ( java.lang.Object instanceof BrokerAvailabilityEvent ) { this . java.util.concurrent.BlockingQueue<org.springframework.messaging.simp.stomp.BrokerAvailabilityEvent> . add ( ( BrokerAvailabilityEvent ) java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) throws java.lang.InterruptedException { BrokerAvailabilityEvent org.springframework.messaging.simp.stomp.BrokerAvailabilityEvent = this . java.util.concurrent.BlockingQueue<org.springframework.messaging.simp.stomp.BrokerAvailabilityEvent> . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( STRING + boolean + STRING , org.springframework.messaging.simp.stomp.BrokerAvailabilityEvent ) ; assertEquals ( boolean , org.springframework.messaging.simp.stomp.BrokerAvailabilityEvent . isBrokerAvailable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.simp.stomp.Message<?> ) throws org.springframework.messaging.simp.stomp.MessagingException { if ( SimpMessageType . HEARTBEAT == SimpMessageHeaderAccessor . getMessageType ( org.springframework.messaging.simp.stomp.Message<> . getHeaders ( ) ) ) { return; } this . java.util.concurrent.BlockingQueue<org.springframework.messaging.simp.stomp.Message<?>> . add ( org.springframework.messaging.simp.stomp.Message<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ... org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange[] ) throws java.lang.InterruptedException { java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> < org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange > java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> = new java.util.ArrayList<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> <> ( java.util.Arrays .< org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange > java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange[] ) ) ; while ( java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> . int ( ) > NUMBER ) { Message < ? > org.springframework.messaging.simp.stomp.Message<?> = this . java.util.concurrent.BlockingQueue<org.springframework.messaging.simp.stomp.Message<?>> . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( STRING + java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> + STRING , org.springframework.messaging.simp.stomp.Message<> ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> , org.springframework.messaging.simp.stomp.Message<> ) ; assertNotNull ( STRING + org.springframework.messaging.simp.stomp.Message<> + STRING + java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> + STRING , org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> . boolean ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> < org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange > java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> , Message < ? > org.springframework.messaging.simp.stomp.Message<?> ) { for ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange : java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange> ) { if ( org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange . boolean ( org.springframework.messaging.simp.stomp.Message<> ) ) { return org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ; } } return null ; }  <METHOD_END>
<METHOD_START> public void ( Message < ? > org.springframework.messaging.simp.stomp.Message<?> , org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher ... org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher[] ) { this . org.springframework.messaging.simp.stomp.Message<?> = org.springframework.messaging.simp.stomp.Message<> ; this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher[] = org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher[] ; this . org.springframework.messaging.simp.stomp.Message<?>[] = new Message < ? > [ org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher[] . int ] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Message < ? > org.springframework.messaging.simp.stomp.Message<?> ) { for ( int int = NUMBER ; int < this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher[] . int ; int ++ ) { if ( this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher[] [ int ] . boolean ( org.springframework.messaging.simp.stomp.Message<> ) ) { this . org.springframework.messaging.simp.stomp.Message<?>[] [ int ] = org.springframework.messaging.simp.stomp.Message<> ; return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.messaging.simp.stomp.Message<> + STRING + STRING + java.util.Arrays . java.lang.String ( this . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher[] ) + STRING + STRING + java.util.Arrays . java.lang.String ( this . org.springframework.messaging.simp.stomp.Message<?>[] ) + STRING ; }  <METHOD_END>
<METHOD_START> public void ( Message < ? > org.springframework.messaging.simp.stomp.Message<?> ) { this . org.springframework.messaging.simp.stomp.Message<?> = org.springframework.messaging.simp.stomp.Message<> ; this . org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String java.lang.String ) { return new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( null ) . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String java.lang.String ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECT ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setAcceptVersion ( STRING ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setHeartbeat ( NUMBER , NUMBER ) ; Message < ? > org.springframework.messaging.simp.stomp.Message<?> = MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder = new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( org.springframework.messaging.simp.stomp.Message<> ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher> . boolean ( new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.StompConnectedFrameMessageMatcher ( java.lang.String ) ) ; return org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String java.lang.String ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECT ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setAcceptVersion ( STRING ) ; Message < ? > org.springframework.messaging.simp.stomp.Message<?> = MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder = new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( org.springframework.messaging.simp.stomp.Message<> ) ; return org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SUBSCRIBE ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setSubscriptionId ( java.lang.String ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setDestination ( java.lang.String ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setReceipt ( java.lang.String ) ; Message < ? > org.springframework.messaging.simp.stomp.Message<?> = MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder = new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( org.springframework.messaging.simp.stomp.Message<> ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher> . boolean ( new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.StompReceiptFrameMessageMatcher ( java.lang.String , java.lang.String ) ) ; return org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ; }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.stomp.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . MESSAGE ) ; org.springframework.messaging.simp.stomp.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; Message < ? > org.springframework.messaging.simp.stomp.Message<?> = MessageBuilder . createMessage ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.messaging.simp.stomp.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; return new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( org.springframework.messaging.simp.stomp.Message<> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . DISCONNECT ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setReceipt ( java.lang.String ) ; Message < ? > org.springframework.messaging.simp.stomp.Message<?> = MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder = new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( org.springframework.messaging.simp.stomp.Message<> ) ; org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder . java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher> . boolean ( new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.StompReceiptFrameMessageMatcher ( java.lang.String , java.lang.String ) ) ; return org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . state ( SimpMessageType . MESSAGE . equals ( this . org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageType ( ) ) , STRING ) ; java.lang.String java.lang.String = this . org.springframework.messaging.simp.stomp.StompHeaderAccessor . getDestination ( ) ; java.lang.Object java.lang.Object = this . org.springframework.messaging.simp.stomp.Message<> . getPayload ( ) ; this . java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher> . boolean ( new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.StompMessageFrameMessageMatcher ( java.lang.String , java.lang.String , java.lang.String , java.lang.Object ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( ) { java.lang.String java.lang.String = this . org.springframework.messaging.simp.stomp.StompHeaderAccessor . getSessionId ( ) ; Assert . state ( java.lang.String != null , STRING ) ; return org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchangeBuilder ( java.lang.String java.lang.String ) { this . java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher> . boolean ( new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.StompFrameMessageMatcher ( StompCommand . ERROR , java.lang.String ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( ) { return new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageExchange ( this . org.springframework.messaging.simp.stomp.Message<> , this . java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher> . org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher[] ( new org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher [ this . java.util.List<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandlerIntegrationTests.MessageMatcher> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( Message < ? > org.springframework.messaging.simp.stomp.Message<?> );  <METHOD_END>
<METHOD_START> public void ( StompCommand org.springframework.messaging.simp.stomp.StompCommand , java.lang.String java.lang.String ) { this . org.springframework.messaging.simp.stomp.StompCommand = org.springframework.messaging.simp.stomp.StompCommand ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( Message < ? > org.springframework.messaging.simp.stomp.Message<?> ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.messaging.simp.stomp.Message<> ) ; if ( ! this . org.springframework.messaging.simp.stomp.StompCommand . equals ( org.springframework.messaging.simp.stomp.StompHeaderAccessor . getCommand ( ) ) || ( this . java.lang.String != org.springframework.messaging.simp.stomp.StompHeaderAccessor . getSessionId ( ) ) ) { return false ; } return boolean ( org.springframework.messaging.simp.stomp.StompHeaderAccessor , org.springframework.messaging.simp.stomp.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor , java.lang.Object java.lang.Object ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.messaging.simp.stomp.StompCommand + STRING + this . java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( StompCommand . RECEIPT , java.lang.String ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor , java.lang.Object java.lang.Object ) { return ( this . java.lang.String . boolean ( org.springframework.messaging.simp.stomp.StompHeaderAccessor . getReceiptId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return super. java.lang.String ( ) + STRING + this . java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { super( StompCommand . MESSAGE , java.lang.String ); this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor , java.lang.Object java.lang.Object ) { if ( ! this . java.lang.String . boolean ( org.springframework.messaging.simp.stomp.StompHeaderAccessor . getSubscriptionId ( ) ) || ! this . java.lang.String . boolean ( org.springframework.messaging.simp.stomp.StompHeaderAccessor . getDestination ( ) ) ) { return false ; } if ( java.lang.Object instanceof byte [] && this . java.lang.Object instanceof byte [] ) { return java.util.Arrays . boolean ( ( byte [] ) java.lang.Object , ( byte [] ) this . java.lang.Object ) ; } else { return this . java.lang.Object . boolean ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return super. java.lang.String ( ) + STRING + this . java.lang.String + STRING + this . java.lang.String + STRING + java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return ( this . java.lang.Object instanceof byte [] ) ? new java.lang.String ( ( byte [] ) this . java.lang.Object , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) : this . java.lang.Object . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( StompCommand . CONNECTED , java.lang.String ); }  <METHOD_END>
