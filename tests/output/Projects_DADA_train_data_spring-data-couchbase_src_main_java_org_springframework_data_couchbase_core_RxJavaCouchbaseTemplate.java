<METHOD_START> public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( T T ) { return org.springframework.data.couchbase.core.Observable ( T , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { return Observable . from ( java.lang.Iterable<T> ) . flatMap ( this :: save ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( T T , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { return org.springframework.data.couchbase.core.Observable ( T , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { return Observable . from ( java.lang.Iterable<T> ) . flatMap ( object -> save ( object , persistTo , replicateTo ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( T T ) { return org.springframework.data.couchbase.core.Observable ( T , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { return Observable . from ( java.lang.Iterable<T> ) . flatMap ( this :: insert ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( T T , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { return org.springframework.data.couchbase.core.Observable ( T , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { return Observable . from ( java.lang.Iterable<T> ) . flatMap ( objectToSave -> insert ( objectToSave , persistTo , replicateTo ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( T T ) { return org.springframework.data.couchbase.core.Observable ( T , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { return Observable . from ( java.lang.Iterable<T> ) . flatMap ( this :: update ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( T T , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { return org.springframework.data.couchbase.core.Observable ( T , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType . org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { return Observable . from ( java.lang.Iterable<T> ) . flatMap ( objectToSave -> update ( objectToSave , persistTo , replicateTo ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( T T ) { return org.springframework.data.couchbase.core.Observable ( T , PersistTo . NONE , ReplicateTo . NONE ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { return Observable . from ( java.lang.Iterable<T> ) . flatMap ( this :: remove ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( T T , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { return org.springframework.data.couchbase.core.Observable ( T , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { return Observable . from ( java.lang.Iterable<T> ) . flatMap ( object -> remove ( object , persistTo , replicateTo ) ) ; }  <METHOD_END>
<METHOD_START> public void ( final ClusterInfo org.springframework.data.couchbase.core.ClusterInfo , final Bucket org.springframework.data.couchbase.core.Bucket ) { this( org.springframework.data.couchbase.core.ClusterInfo , org.springframework.data.couchbase.core.Bucket , null , null ); }  <METHOD_END>
<METHOD_START> public void ( final ClusterInfo org.springframework.data.couchbase.core.ClusterInfo , final Bucket org.springframework.data.couchbase.core.Bucket , final TranslationService org.springframework.data.couchbase.core.TranslationService ) { this( org.springframework.data.couchbase.core.ClusterInfo , org.springframework.data.couchbase.core.Bucket , null , org.springframework.data.couchbase.core.TranslationService ); }  <METHOD_END>
<METHOD_START> public void void ( WriteResultChecking org.springframework.data.couchbase.core.WriteResultChecking ) { this . org.springframework.data.couchbase.core.WriteResultChecking = org.springframework.data.couchbase.core.WriteResultChecking == null ? org.springframework.data.couchbase.core.WriteResultChecking : org.springframework.data.couchbase.core.WriteResultChecking ; }  <METHOD_END>
<METHOD_START> public void ( final ClusterInfo org.springframework.data.couchbase.core.ClusterInfo , final Bucket org.springframework.data.couchbase.core.Bucket , final CouchbaseConverter org.springframework.data.couchbase.core.CouchbaseConverter , final TranslationService org.springframework.data.couchbase.core.TranslationService ) { this . org.springframework.data.couchbase.core.Bucket = org.springframework.data.couchbase.core.Bucket ; this . org.springframework.data.couchbase.core.ClusterInfo = org.springframework.data.couchbase.core.ClusterInfo ; this . org.springframework.data.couchbase.core.AsyncBucket = org.springframework.data.couchbase.core.Bucket . async ( ) ; this . org.springframework.data.couchbase.core.CouchbaseConverter = org.springframework.data.couchbase.core.CouchbaseConverter == null ? org.springframework.data.couchbase.core.CouchbaseConverter ( ) : org.springframework.data.couchbase.core.CouchbaseConverter ; this . org.springframework.data.couchbase.core.TranslationService = org.springframework.data.couchbase.core.TranslationService == null ? org.springframework.data.couchbase.core.TranslationService ( ) : org.springframework.data.couchbase.core.TranslationService ; this . org.springframework.data.couchbase.core.MappingContext<? extends org.springframework.data.couchbase.core.CouchbasePersistentEntity<?>,org.springframework.data.couchbase.core.CouchbasePersistentProperty> = this . org.springframework.data.couchbase.core.CouchbaseConverter . getMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument ( final CouchbaseDocument org.springframework.data.couchbase.core.CouchbaseDocument , java.lang.Long java.lang.Long ) { java.lang.String java.lang.String = org.springframework.data.couchbase.core.TranslationService . encode ( org.springframework.data.couchbase.core.CouchbaseDocument ) ; if ( java.lang.Long == null ) { return RawJsonDocument . create ( org.springframework.data.couchbase.core.CouchbaseDocument . getId ( ) , org.springframework.data.couchbase.core.CouchbaseDocument . getExpiration ( ) , java.lang.String ) ; } else { return RawJsonDocument . create ( org.springframework.data.couchbase.core.CouchbaseDocument . getId ( ) , org.springframework.data.couchbase.core.CouchbaseDocument . getExpiration ( ) , java.lang.String , java.lang.Long ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.TranslationService org.springframework.data.couchbase.core.TranslationService ( ) { JacksonTranslationService org.springframework.data.couchbase.core.JacksonTranslationService = new JacksonTranslationService ( ) ; org.springframework.data.couchbase.core.JacksonTranslationService . afterPropertiesSet ( ) ; return org.springframework.data.couchbase.core.JacksonTranslationService ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.CouchbaseConverter org.springframework.data.couchbase.core.CouchbaseConverter ( ) { MappingCouchbaseConverter org.springframework.data.couchbase.core.MappingCouchbaseConverter = new MappingCouchbaseConverter ( new CouchbaseMappingContext ( ) ) ; org.springframework.data.couchbase.core.MappingCouchbaseConverter . afterPropertiesSet ( ) ; return org.springframework.data.couchbase.core.MappingCouchbaseConverter ; }  <METHOD_END>
<METHOD_START> private final org.springframework.data.couchbase.core.ConvertingPropertyAccessor org.springframework.data.couchbase.core.ConvertingPropertyAccessor ( java.lang.Object java.lang.Object ) { CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.core.MappingContext<,org.springframework.data.couchbase.core.CouchbasePersistentProperty> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; PersistentPropertyAccessor org.springframework.data.couchbase.core.PersistentPropertyAccessor = org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . getPropertyAccessor ( java.lang.Object ) ; return new ConvertingPropertyAccessor ( org.springframework.data.couchbase.core.PersistentPropertyAccessor , org.springframework.data.couchbase.core.CouchbaseConverter . getConversionService ( ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( T T , org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType , PersistTo org.springframework.data.couchbase.core.PersistTo , ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { java.util.Optional<java.lang.Long> < java.lang.Long > java.util.Optional<java.lang.Long> = java.util.Optional<java.lang.Long> ( T ) ; Func3 < RawJsonDocument , PersistTo , ReplicateTo , Observable < RawJsonDocument > > org.springframework.data.couchbase.core.Func3<org.springframework.data.couchbase.core.RawJsonDocument,org.springframework.data.couchbase.core.PersistTo,org.springframework.data.couchbase.core.ReplicateTo,org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.RawJsonDocument>> ; switch ( org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType ) { case org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType : if ( ! java.util.Optional<java.lang.Long> . boolean ( ) ) { org.springframework.data.couchbase.core.Func3<org.springframework.data.couchbase.core.RawJsonDocument,org.springframework.data.couchbase.core.PersistTo,org.springframework.data.couchbase.core.ReplicateTo,org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.RawJsonDocument>> = org.springframework.data.couchbase.core.AsyncBucket :: upsert ; } else if ( java.util.Optional<java.lang.Long> . java.lang.Long ( ) > NUMBER ) { org.springframework.data.couchbase.core.Func3<org.springframework.data.couchbase.core.RawJsonDocument,org.springframework.data.couchbase.core.PersistTo,org.springframework.data.couchbase.core.ReplicateTo,org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.RawJsonDocument>> = org.springframework.data.couchbase.core.AsyncBucket :: replace ; } else { org.springframework.data.couchbase.core.Func3<org.springframework.data.couchbase.core.RawJsonDocument,org.springframework.data.couchbase.core.PersistTo,org.springframework.data.couchbase.core.ReplicateTo,org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.RawJsonDocument>> = org.springframework.data.couchbase.core.AsyncBucket :: insert ; } break; case org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType : org.springframework.data.couchbase.core.Func3<org.springframework.data.couchbase.core.RawJsonDocument,org.springframework.data.couchbase.core.PersistTo,org.springframework.data.couchbase.core.ReplicateTo,org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.RawJsonDocument>> = org.springframework.data.couchbase.core.AsyncBucket :: replace ; break; case org.springframework.data.couchbase.core.RxJavaCouchbaseTemplate.PersistType : default: org.springframework.data.couchbase.core.Func3<org.springframework.data.couchbase.core.RawJsonDocument,org.springframework.data.couchbase.core.PersistTo,org.springframework.data.couchbase.core.ReplicateTo,org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.RawJsonDocument>> = org.springframework.data.couchbase.core.AsyncBucket :: insert ; break; } return org.springframework.data.couchbase.core.Func3<org.springframework.data.couchbase.core.RawJsonDocument,org.springframework.data.couchbase.core.PersistTo,org.springframework.data.couchbase.core.ReplicateTo,org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.RawJsonDocument>> . call ( org.springframework.data.couchbase.core.RawJsonDocument ( T ) , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) . flatMap ( storedDoc -> { if ( storedDoc != null && storedDoc . cas ( ) != NUMBER ) { setVersion ( objectToPersist , storedDoc . cas ( ) ) ; } return Observable . just ( objectToPersist ) ; } ) . onErrorResumeNext ( e -> { if ( e instanceof DocumentAlreadyExistsException ) { throw new OptimisticLockingFailureException ( persistType . springDataOperationName + STRING + version . orElse ( null ) , e ) ; } if ( e instanceof CASMismatchException ) { throw new OptimisticLockingFailureException ( persistType . springDataOperationName + STRING + version . orElse ( null ) , e ) ; } return TemplateUtils . translateError ( e ) ; } ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.couchbase.core.RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument ( T T ) { ensureNotIterable ( T ) ; final CouchbaseDocument org.springframework.data.couchbase.core.CouchbaseDocument = new CouchbaseDocument ( ) ; org.springframework.data.couchbase.core.CouchbaseConverter . write ( T , org.springframework.data.couchbase.core.CouchbaseDocument ) ; return org.springframework.data.couchbase.core.RawJsonDocument ( org.springframework.data.couchbase.core.CouchbaseDocument , java.util.Optional<java.lang.Long> ( T ) . java.lang.Long ( null ) ) ; }  <METHOD_END>
<METHOD_START> private < T > java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> < CouchbasePersistentProperty > java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> ( T T ) { final CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.core.MappingContext<,org.springframework.data.couchbase.core.CouchbasePersistentProperty> . getRequiredPersistentEntity ( T . java.lang.Class<? extends java.lang.Object> ( ) ) ; return org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . getVersionProperty ( ) ; }  <METHOD_END>
<METHOD_START> private < T > java.util.Optional<java.lang.Long> < java.lang.Long > java.util.Optional<java.lang.Long> ( T T ) { final ConvertingPropertyAccessor org.springframework.data.couchbase.core.ConvertingPropertyAccessor = org.springframework.data.couchbase.core.ConvertingPropertyAccessor ( T ) ; java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> < CouchbasePersistentProperty > java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> = java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> ( T ) ; return java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> . flatMap ( p -> accessor . getProperty ( p , Long .class ) ) ; }  <METHOD_END>
<METHOD_START> private < T > void void ( T T , long long ) { final ConvertingPropertyAccessor org.springframework.data.couchbase.core.ConvertingPropertyAccessor = org.springframework.data.couchbase.core.ConvertingPropertyAccessor ( T ) ; java.util.Optional<org.springframework.data.couchbase.core.CouchbasePersistentProperty> ( T ) . ifPresent ( p -> accessor . setProperty ( p , Optional . ofNullable ( cas ) ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( T T , final PersistTo org.springframework.data.couchbase.core.PersistTo , final ReplicateTo org.springframework.data.couchbase.core.ReplicateTo ) { if( T instanceof java.lang.String ) { return org.springframework.data.couchbase.core.AsyncBucket . remove ( ( java.lang.String ) T , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) . flatMap ( rawJsonDocument -> Observable . just ( objectToRemove ) ) . doOnError ( e -> TemplateUtils . translateError ( e ) ) ; } else { RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = org.springframework.data.couchbase.core.RawJsonDocument ( T ) ; return org.springframework.data.couchbase.core.AsyncBucket . remove ( org.springframework.data.couchbase.core.RawJsonDocument , org.springframework.data.couchbase.core.PersistTo , org.springframework.data.couchbase.core.ReplicateTo ) . flatMap ( rawJsonDocument -> Observable . just ( objectToRemove ) ) . doOnError ( e -> TemplateUtils . translateError ( e ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Observable<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.couchbase.core.Observable<java.lang.Boolean> ( java.lang.String java.lang.String ) { return org.springframework.data.couchbase.core.AsyncBucket . exists ( java.lang.String ) . doOnError ( e -> TemplateUtils . translateError ( e ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncN1qlQueryResult> < AsyncN1qlQueryResult > org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncN1qlQueryResult> ( N1qlQuery org.springframework.data.couchbase.core.N1qlQuery ) { return org.springframework.data.couchbase.core.AsyncBucket . query ( org.springframework.data.couchbase.core.N1qlQuery ) . doOnError ( e -> TemplateUtils . translateError ( e ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewResult> < AsyncViewResult > org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewResult> ( ViewQuery org.springframework.data.couchbase.core.ViewQuery ) { return org.springframework.data.couchbase.core.AsyncBucket . query ( org.springframework.data.couchbase.core.ViewQuery ) . doOnError ( e -> TemplateUtils . translateError ( e ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncSpatialViewResult> < AsyncSpatialViewResult > org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncSpatialViewResult> ( SpatialViewQuery org.springframework.data.couchbase.core.SpatialViewQuery ) { return org.springframework.data.couchbase.core.AsyncBucket . query ( org.springframework.data.couchbase.core.SpatialViewQuery ) . doOnError ( e -> TemplateUtils . translateError ( e ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { final CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.core.MappingContext<,org.springframework.data.couchbase.core.CouchbasePersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<T> ) ; if ( org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . isTouchOnRead ( ) ) { return org.springframework.data.couchbase.core.AsyncBucket . getAndTouch ( java.lang.String , org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . getExpiry ( ) , RawJsonDocument .class ) . switchIfEmpty ( Observable . just ( null ) ) . map ( doc -> mapToEntity ( id , doc , entityClass ) ) . doOnError ( e -> TemplateUtils . translateError ( e ) ) ; } else { return org.springframework.data.couchbase.core.AsyncBucket . get ( java.lang.String , RawJsonDocument .class ) . switchIfEmpty ( Observable . just ( null ) ) . map ( doc -> mapToEntity ( id , doc , entityClass ) ) . doOnError ( e -> TemplateUtils . translateError ( e ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( ViewQuery org.springframework.data.couchbase.core.ViewQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { if ( ! org.springframework.data.couchbase.core.ViewQuery . isIncludeDocs ( ) || ! org.springframework.data.couchbase.core.ViewQuery . includeDocsTarget ( ) . equals ( RawJsonDocument .class ) ) { if ( org.springframework.data.couchbase.core.ViewQuery . isOrderRetained ( ) ) { org.springframework.data.couchbase.core.ViewQuery . includeDocsOrdered ( RawJsonDocument .class ) ; } else { org.springframework.data.couchbase.core.ViewQuery . includeDocs ( RawJsonDocument .class ) ; } } org.springframework.data.couchbase.core.ViewQuery . reduce ( false ) ; return org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncViewResult> ( org.springframework.data.couchbase.core.ViewQuery ) . flatMap ( asyncViewResult -> asyncViewResult . error ( ) . flatMap ( error -> Observable . error ( new CouchbaseQueryExecutionException ( STRING + error . toString ( ) ) ) ) . switchIfEmpty ( asyncViewResult . rows ( ) ) ) . map ( row -> { AsyncViewRow asyncViewRow = ( AsyncViewRow ) row ; return asyncViewRow . document ( RawJsonDocument .class ) . map ( doc -> mapToEntity ( doc . id ( ) , doc , entityClass ) ) . toBlocking ( ) . single ( ) ; } ) . doOnError ( throwable -> Observable . error ( new CouchbaseQueryExecutionException ( STRING , throwable ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( N1qlQuery org.springframework.data.couchbase.core.N1qlQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncN1qlQueryResult> ( org.springframework.data.couchbase.core.N1qlQuery ) . flatMap ( asyncN1qlQueryResult -> asyncN1qlQueryResult . errors ( ) . flatMap ( error -> Observable . error ( new CouchbaseQueryExecutionException ( STRING + error . toString ( ) ) ) ) . switchIfEmpty ( asyncN1qlQueryResult . rows ( ) ) ) . map ( row -> { JsonObject json = ( ( AsyncN1qlQueryRow ) row ) . value ( ) ; String id = json . getString ( TemplateUtils . SELECT_ID ) ; Long cas = json . getLong ( TemplateUtils . SELECT_CAS ) ; if ( id == null || cas == null ) { throw new CouchbaseQueryExecutionException ( STRING + STRING + TemplateUtils . SELECT_ID + STRING + TemplateUtils . SELECT_CAS + STRING ) ; } json = json . removeKey ( TemplateUtils . SELECT_ID ) . removeKey ( TemplateUtils . SELECT_CAS ) ; RawJsonDocument entityDoc = RawJsonDocument . create ( id , json . toString ( ) , cas ) ; T decoded = mapToEntity ( id , entityDoc , entityClass ) ; return decoded ; } ) . doOnError ( throwable -> Observable . error ( new CouchbaseQueryExecutionException ( STRING , throwable ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( SpatialViewQuery org.springframework.data.couchbase.core.SpatialViewQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncSpatialViewResult> ( org.springframework.data.couchbase.core.SpatialViewQuery ) . flatMap ( spatialViewResult -> spatialViewResult . error ( ) . flatMap ( error -> Observable . error ( new CouchbaseQueryExecutionException ( STRING + error . toString ( ) ) ) ) . switchIfEmpty ( spatialViewResult . rows ( ) ) ) . map ( row -> { AsyncSpatialViewRow asyncSpatialViewRow = ( AsyncSpatialViewRow ) row ; return asyncSpatialViewRow . document ( RawJsonDocument .class ) . map ( doc -> mapToEntity ( doc . id ( ) , doc , entityClass ) ) . toBlocking ( ) . single ( ) ; } ) . doOnError ( throwable -> Observable . error ( new CouchbaseQueryExecutionException ( STRING , throwable ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.couchbase.core.Observable<T> < T > org.springframework.data.couchbase.core.Observable<T> ( N1qlQuery org.springframework.data.couchbase.core.N1qlQuery , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.couchbase.core.Observable<org.springframework.data.couchbase.core.AsyncN1qlQueryResult> ( org.springframework.data.couchbase.core.N1qlQuery ) . flatMap ( asyncN1qlQueryResult -> asyncN1qlQueryResult . errors ( ) . flatMap ( error -> Observable . error ( new CouchbaseQueryExecutionException ( STRING + error . toString ( ) ) ) ) . switchIfEmpty ( asyncN1qlQueryResult . rows ( ) ) ) . map ( row -> { JsonObject json = ( ( AsyncN1qlQueryRow ) row ) . value ( ) ; T decoded = translationService . decodeFragment ( json . toString ( ) , entityClass ) ; return decoded ; } ) . doOnError ( throwable -> Observable . error ( new CouchbaseQueryExecutionException ( STRING , throwable ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Consistency org.springframework.data.couchbase.core.Consistency ( ) { return org.springframework.data.couchbase.core.Consistency ; }  <METHOD_END>
<METHOD_START> public void void ( Consistency org.springframework.data.couchbase.core.Consistency ) { this . org.springframework.data.couchbase.core.Consistency = org.springframework.data.couchbase.core.Consistency ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.CouchbaseConverter org.springframework.data.couchbase.core.CouchbaseConverter ( ) { return this . org.springframework.data.couchbase.core.CouchbaseConverter ; }  <METHOD_END>
<METHOD_START> private < T > T T ( java.lang.String java.lang.String , Document < java.lang.String > org.springframework.data.couchbase.core.Document<java.lang.String> , java.lang.Class<T> < T > java.lang.Class<T> ) { if ( org.springframework.data.couchbase.core.Document<java.lang.String> == null ) { return null ; } final CouchbaseDocument org.springframework.data.couchbase.core.CouchbaseDocument = new CouchbaseDocument ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.data.couchbase.core.CouchbaseConverter . read ( java.lang.Class<T> , ( CouchbaseDocument ) org.springframework.data.couchbase.core.CouchbaseStorable ( org.springframework.data.couchbase.core.Document<java.lang.String> , org.springframework.data.couchbase.core.CouchbaseDocument ) ) ; final ConvertingPropertyAccessor org.springframework.data.couchbase.core.ConvertingPropertyAccessor = org.springframework.data.couchbase.core.ConvertingPropertyAccessor ( java.lang.Object ) ; CouchbasePersistentEntity < ? > org.springframework.data.couchbase.core.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.core.MappingContext<,org.springframework.data.couchbase.core.CouchbasePersistentProperty> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; org.springframework.data.couchbase.core.CouchbasePersistentEntity<> . getVersionProperty ( ) . ifPresent ( p -> accessor . setProperty ( p , Optional . ofNullable ( data . cas ( ) ) ) ) ; return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.CouchbaseStorable org.springframework.data.couchbase.core.CouchbaseStorable ( final Document < java.lang.String > org.springframework.data.couchbase.core.Document<java.lang.String> , final CouchbaseStorable org.springframework.data.couchbase.core.CouchbaseStorable ) { return org.springframework.data.couchbase.core.TranslationService . decode ( org.springframework.data.couchbase.core.Document<java.lang.String> . content ( ) , org.springframework.data.couchbase.core.CouchbaseStorable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.Bucket org.springframework.data.couchbase.core.Bucket ( ) { return this . org.springframework.data.couchbase.core.Bucket ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.core.ClusterInfo org.springframework.data.couchbase.core.ClusterInfo ( ) { return this . org.springframework.data.couchbase.core.ClusterInfo ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
