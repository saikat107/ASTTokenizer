<METHOD_START> @ Before public void void ( ) { this . org.springframework.messaging.converter.DefaultContentTypeResolver = new DefaultContentTypeResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . APPLICATION_JSON ) ; MessageHeaders org.springframework.messaging.converter.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( MimeTypeUtils . APPLICATION_JSON , this . org.springframework.messaging.converter.DefaultContentTypeResolver . resolve ( org.springframework.messaging.converter.MessageHeaders ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . APPLICATION_JSON_VALUE ) ; MessageHeaders org.springframework.messaging.converter.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( MimeTypeUtils . APPLICATION_JSON , this . org.springframework.messaging.converter.DefaultContentTypeResolver . resolve ( org.springframework.messaging.converter.MessageHeaders ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . CONTENT_TYPE , STRING ) ; MessageHeaders org.springframework.messaging.converter.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.messaging.converter.DefaultContentTypeResolver . resolve ( org.springframework.messaging.converter.MessageHeaders ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . CONTENT_TYPE , new java.lang.Integer ( NUMBER ) ) ; MessageHeaders org.springframework.messaging.converter.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.messaging.converter.DefaultContentTypeResolver . resolve ( org.springframework.messaging.converter.MessageHeaders ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaders org.springframework.messaging.converter.MessageHeaders = new MessageHeaders ( java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) ) ; assertNull ( this . org.springframework.messaging.converter.DefaultContentTypeResolver . resolve ( org.springframework.messaging.converter.MessageHeaders ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.converter.DefaultContentTypeResolver . setDefaultMimeType ( MimeTypeUtils . APPLICATION_JSON ) ; MessageHeaders org.springframework.messaging.converter.MessageHeaders = new MessageHeaders ( java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) ) ; assertEquals ( MimeTypeUtils . APPLICATION_JSON , this . org.springframework.messaging.converter.DefaultContentTypeResolver . resolve ( org.springframework.messaging.converter.MessageHeaders ) ) ; }  <METHOD_END>
