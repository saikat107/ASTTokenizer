<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.couchbase.ConditionOutcome org.springframework.boot.autoconfigure.couchbase.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.couchbase.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.couchbase.AnnotatedTypeMetadata ) { Environment org.springframework.boot.autoconfigure.couchbase.Environment = org.springframework.boot.autoconfigure.couchbase.ConditionContext . getEnvironment ( ) ; org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsCondition.PropertyResolver org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsCondition.PropertyResolver = new org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsCondition.PropertyResolver ( ( ( ConfigurableEnvironment ) org.springframework.boot.autoconfigure.couchbase.Environment ) . getPropertySources ( ) , STRING ) ; java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> = org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsCondition.PropertyResolver . java.util.Map.Entry<java.lang.String,java.lang.Object> ( STRING ) ; if ( java.util.Map.Entry<java.lang.String,java.lang.Object> != null ) { return ConditionOutcome . match ( ConditionMessage . forCondition ( org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsCondition .class . java.lang.String ( ) ) . found ( STRING ) . items ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage . forCondition ( org.springframework.boot.autoconfigure.couchbase.OnBootstrapHostsCondition .class . java.lang.String ( ) ) . didNotFind ( STRING ) . items ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> void ( PropertySources org.springframework.boot.autoconfigure.couchbase.PropertySources , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; DataBinder org.springframework.boot.autoconfigure.couchbase.DataBinder = new RelaxedDataBinder ( this . java.util.Map<java.lang.String,java.lang.Object> , this . java.lang.String ) ; org.springframework.boot.autoconfigure.couchbase.DataBinder . bind ( new PropertySourcesPropertyValues ( org.springframework.boot.autoconfigure.couchbase.PropertySources ) ) ; }  <METHOD_END>
<METHOD_START> java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> ( java.lang.String java.lang.String ) { RelaxedNames org.springframework.boot.autoconfigure.couchbase.RelaxedNames = new RelaxedNames ( this . java.lang.String ) ; RelaxedNames org.springframework.boot.autoconfigure.couchbase.RelaxedNames = new RelaxedNames ( java.lang.String ) ; for ( java.lang.String java.lang.String : org.springframework.boot.autoconfigure.couchbase.RelaxedNames ) { for ( java.lang.String java.lang.String : org.springframework.boot.autoconfigure.couchbase.RelaxedNames ) { java.lang.String java.lang.String = java.lang.String + java.lang.String ; if ( this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { return new java.util.AbstractMap . java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object> <> ( java.lang.String , this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; } } } return null ; }  <METHOD_END>
