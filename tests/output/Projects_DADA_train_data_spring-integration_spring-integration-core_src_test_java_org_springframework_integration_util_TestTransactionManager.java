<METHOD_START> public void void ( ) { this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . java.util.concurrent.atomic.AtomicInteger . void ( NUMBER ) ; this . java.util.concurrent.atomic.AtomicInteger . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.util.TransactionDefinition org.springframework.integration.util.TransactionDefinition ( ) { return this . org.springframework.integration.util.TransactionDefinition ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) throws java.lang.InterruptedException { this . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.integration.util.TransactionDefinition ) throws org.springframework.integration.util.TransactionException { this . org.springframework.integration.util.TransactionDefinition = org.springframework.integration.util.TransactionDefinition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.integration.util.DefaultTransactionStatus ) throws org.springframework.integration.util.TransactionException { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) org.springframework.integration.util.TransactionException { return new DefaultTransactionDefinition ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.integration.util.DefaultTransactionStatus ) throws org.springframework.integration.util.TransactionException { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
