<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { HttpRequestHandlingMessagingGateway org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway = new HttpRequestHandlingMessagingGateway ( false ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setMessageConverters ( java.util.Collections .< HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ( new ByteArrayHttpMessageConverter ( ) ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setMergeWithDefaultConverters ( false ) ; QueueChannel org.springframework.integration.http.inbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestChannel ( org.springframework.integration.http.inbound.QueueChannel ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . setRequestPayloadType ( byte [] .class ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . afterPropertiesSet ( ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . start ( ) ; HttpServletRequest org.springframework.integration.http.inbound.HttpServletRequest = mock ( HttpServletRequest .class ) ; ServletInputStream org.springframework.integration.http.inbound.ServletInputStream = mock ( ServletInputStream .class ) ; doAnswer ( new Answer < java.lang.Integer > ( ) { int int ; @ java.lang.Override public java.lang.Integer java.lang.Integer ( InvocationOnMock org.springframework.integration.http.inbound.InvocationOnMock ) throws java.lang.Throwable { byte [] byte[] = org.springframework.integration.http.inbound.InvocationOnMock . getArgument ( NUMBER ) ; byte[] [ NUMBER ] = 'f' ; byte[] [ NUMBER ] = 'o' ; byte[] [ NUMBER ] = 'o' ; return int ++ > NUMBER ? - NUMBER : NUMBER ; } } ) . when ( org.springframework.integration.http.inbound.ServletInputStream ) . read ( any ( byte [] .class ) ) ; when ( org.springframework.integration.http.inbound.HttpServletRequest . getInputStream ( ) ) . thenReturn ( org.springframework.integration.http.inbound.ServletInputStream ) ; when ( org.springframework.integration.http.inbound.HttpServletRequest . getMethod ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.http.inbound.HttpServletRequest . getHeaderNames ( ) ) . thenReturn ( mock ( java.util.Enumeration .class ) ) ; when ( org.springframework.integration.http.inbound.HttpServletRequest . getContentType ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.http.inbound.HttpServletRequest . getRequestURL ( ) ) . thenReturn ( new java.lang.StringBuffer ( STRING ) ) ; RequestContextHolder . setRequestAttributes ( mock ( RequestAttributes .class ) ) ; org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway . handleRequest ( org.springframework.integration.http.inbound.HttpServletRequest , mock ( HttpServletResponse .class ) ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.http.inbound.Message<> ) ; assertThat ( org.springframework.integration.http.inbound.Message<> . getPayload ( ) , instanceOf ( byte [] .class ) ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.http.inbound.Message<> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( InvocationOnMock org.springframework.integration.http.inbound.InvocationOnMock ) throws java.lang.Throwable { byte [] byte[] = org.springframework.integration.http.inbound.InvocationOnMock . getArgument ( NUMBER ) ; byte[] [ NUMBER ] = 'f' ; byte[] [ NUMBER ] = 'o' ; byte[] [ NUMBER ] = 'o' ; return int ++ > NUMBER ? - NUMBER : NUMBER ; }  <METHOD_END>
