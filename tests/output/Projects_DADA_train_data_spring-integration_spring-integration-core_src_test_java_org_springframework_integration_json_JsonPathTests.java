<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { ClassPathResource org.springframework.integration.json.ClassPathResource = new ClassPathResource ( STRING , org.springframework.integration.json.JsonPathTests .class ) ; java.io.File = org.springframework.integration.json.ClassPathResource . getFile ( ) ; java.util.Scanner java.util.Scanner = new java.util.Scanner ( java.io.File ) ; java.lang.String = java.util.Scanner . java.util.Scanner ( STRING ) . java.lang.String ( ) ; java.util.Scanner . void ( ) ; org.springframework.integration.json.Message<java.lang.String> = new GenericMessage < java.lang.String > ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; assertEquals ( STRING , org.springframework.integration.json.Message<> . getPayload ( ) ) ; this . org.springframework.integration.json.MessageChannel . send ( new GenericMessage < java.io.File > ( java.io.File ) ) ; org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; assertEquals ( STRING , org.springframework.integration.json.Message<> . getPayload ( ) ) ; try { this . org.springframework.integration.json.MessageChannel . send ( new GenericMessage < java.lang.Object > ( new java.lang.Object ( ) ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) . java.lang.Throwable ( ) ; assertTrue ( java.lang.Throwable instanceof PathNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; assertEquals ( java.lang.String , org.springframework.integration.json.Message<> . getPayload ( ) ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<java.lang.String> ) ; org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; Message < java.lang.String > org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( STRING , NUMBER ) . build ( ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<java.lang.String> ) ; org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<java.lang.String> ) ; org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; try { this . org.springframework.integration.json.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( MessageRejectedException .class ) ) ; } org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.json.Message<> ) ; org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<java.lang.String> ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; assertTrue ( org.springframework.integration.json.Message<> . getPayload ( ) instanceof java.util.Map ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; assertEquals ( java.lang.String , org.springframework.integration.json.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.json.MessageChannel . send ( org.springframework.integration.json.Message<java.lang.String> ) ; org.springframework.integration.json.Message<?> = this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.json.Message<> ) ; assertEquals ( java.lang.String , org.springframework.integration.json.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.json.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.json.Predicate org.springframework.integration.json.Predicate ( ) { return Filter . filter ( Criteria . where ( STRING ) . exists ( true ) . and ( STRING ) . ne ( STRING ) ) ; }  <METHOD_END>
