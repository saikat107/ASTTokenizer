<METHOD_START> @ java.lang.Override public void void ( java.util.Properties java.util.Properties ) { boolean ( java.util.Properties . java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { return boolean ( locateBeanFactory ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( BeanFactory org.springframework.data.gemfire.support.BeanFactory , java.lang.String java.lang.String ) { BeanConfigurerSupport org.springframework.data.gemfire.support.BeanConfigurerSupport = org.springframework.data.gemfire.support.BeanConfigurerSupport ( org.springframework.data.gemfire.support.BeanFactory , java.lang.String ) ; org.springframework.data.gemfire.support.BeanConfigurerSupport . configureBean ( this ) ; org.springframework.data.gemfire.support.BeanConfigurerSupport . destroy ( ) ; return true ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.support.BeanConfigurerSupport org.springframework.data.gemfire.support.BeanConfigurerSupport ( BeanFactory org.springframework.data.gemfire.support.BeanFactory ) { return org.springframework.data.gemfire.support.BeanConfigurerSupport ( org.springframework.data.gemfire.support.BeanFactory , null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.support.BeanConfigurerSupport org.springframework.data.gemfire.support.BeanConfigurerSupport ( BeanFactory org.springframework.data.gemfire.support.BeanFactory , java.lang.String java.lang.String ) { BeanConfigurerSupport org.springframework.data.gemfire.support.BeanConfigurerSupport = new BeanConfigurerSupport ( ) ; org.springframework.data.gemfire.support.BeanConfigurerSupport . setBeanFactory ( org.springframework.data.gemfire.support.BeanFactory ) ; if ( StringUtils . hasText ( java.lang.String ) ) { Assert . isTrue ( org.springframework.data.gemfire.support.BeanFactory . containsBean ( java.lang.String ) , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; org.springframework.data.gemfire.support.BeanConfigurerSupport . setBeanWiringInfoResolver ( beanInstance -> new BeanWiringInfo ( templateBeanName ) ) ; } org.springframework.data.gemfire.support.BeanConfigurerSupport . afterPropertiesSet ( ) ; return org.springframework.data.gemfire.support.BeanConfigurerSupport ; }  <METHOD_END>
