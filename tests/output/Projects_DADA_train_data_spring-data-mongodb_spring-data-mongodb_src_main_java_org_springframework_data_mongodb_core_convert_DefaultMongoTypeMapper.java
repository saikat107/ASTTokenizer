<METHOD_START> public void ( ) { this( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , java.util.Arrays . java.util.List ( new SimpleTypeInformationMapper ( ) ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , MappingContext < ? extends PersistentEntity < ? , ? > , ? > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.PersistentEntity<?,?>,?> ) { this( java.lang.String , new org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper.DocumentTypeAliasAccessor ( java.lang.String ) , org.springframework.data.mongodb.core.convert.MappingContext<,> , java.util.Arrays . java.util.List ( new SimpleTypeInformationMapper ( ) ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.List<? extends org.springframework.data.mongodb.core.convert.TypeInformationMapper> < ? extends TypeInformationMapper > java.util.List<? extends org.springframework.data.mongodb.core.convert.TypeInformationMapper> ) { this( java.lang.String , new org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper.DocumentTypeAliasAccessor ( java.lang.String ) , null , java.util.List<> ); }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , TypeAliasAccessor < Bson > org.springframework.data.mongodb.core.convert.TypeAliasAccessor<org.springframework.data.mongodb.core.convert.Bson> , MappingContext < ? extends PersistentEntity < ? , ? > , ? > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.PersistentEntity<?,?>,?> , java.util.List<? extends org.springframework.data.mongodb.core.convert.TypeInformationMapper> < ? extends TypeInformationMapper > java.util.List<? extends org.springframework.data.mongodb.core.convert.TypeInformationMapper> ) { super( org.springframework.data.mongodb.core.convert.TypeAliasAccessor<org.springframework.data.mongodb.core.convert.Bson> , org.springframework.data.mongodb.core.convert.MappingContext<,> , java.util.List<> ); this . java.lang.String = java.lang.String ; this . org.springframework.data.mongodb.core.convert.TypeAliasAccessor<org.springframework.data.mongodb.core.convert.Bson> = org.springframework.data.mongodb.core.convert.TypeAliasAccessor<org.springframework.data.mongodb.core.convert.Bson> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String == null ? false : java.lang.String . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Document org.springframework.data.mongodb.core.convert.Document , java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ) { if ( java.util.Set<java.lang.Class<?>> == null || java.util.Set<java.lang.Class<?>> . boolean ( ) ) { return; } BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ) { Alias org.springframework.data.mongodb.core.convert.Alias = getAliasFor ( ClassTypeInformation . from ( java.lang.Class<> ) ) ; if ( org.springframework.data.mongodb.core.convert.Alias != null && ! ObjectUtils . nullSafeEquals ( Alias . NONE , org.springframework.data.mongodb.core.convert.Alias ) && org.springframework.data.mongodb.core.convert.Alias . getValue ( ) . isPresent ( ) ) { org.springframework.data.mongodb.core.convert.BasicDBList . add ( org.springframework.data.mongodb.core.convert.Alias . getValue ( ) . get ( ) ) ; } } org.springframework.data.mongodb.core.convert.TypeAliasAccessor<org.springframework.data.mongodb.core.convert.Bson> . writeTypeTo ( org.springframework.data.mongodb.core.convert.Document , new Document ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> ( Bson org.springframework.data.mongodb.core.convert.Bson ) { return java.util.Optional . java.util.Optional ( org.springframework.data.mongodb.core.convert.Bson instanceof BasicDBList ? org.springframework.data.mongodb.core.convert.TypeInformation<java.util.List> : org.springframework.data.mongodb.core.convert.TypeInformation<java.util.Map> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.Alias org.springframework.data.mongodb.core.convert.Alias ( Bson org.springframework.data.mongodb.core.convert.Bson ) { if ( org.springframework.data.mongodb.core.convert.Bson instanceof java.util.List ) { return Alias . NONE ; } if ( org.springframework.data.mongodb.core.convert.Bson instanceof Document ) { return Alias . ofOptional ( java.util.Optional . java.util.Optional ( ( ( Document ) org.springframework.data.mongodb.core.convert.Bson ) . get ( java.lang.String ) ) ) ; } else if ( org.springframework.data.mongodb.core.convert.Bson instanceof DBObject ) { return Alias . ofOptional ( java.util.Optional . java.util.Optional ( ( ( DBObject ) org.springframework.data.mongodb.core.convert.Bson ) . get ( java.lang.String ) ) ) ; } throw new java.lang.IllegalArgumentException ( STRING + org.springframework.data.mongodb.core.convert.Bson . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Bson org.springframework.data.mongodb.core.convert.Bson , java.lang.Object java.lang.Object ) { if ( java.lang.String != null ) { if ( org.springframework.data.mongodb.core.convert.Bson instanceof Document ) { ( ( Document ) org.springframework.data.mongodb.core.convert.Bson ) . put ( java.lang.String , java.lang.Object ) ; } else if ( org.springframework.data.mongodb.core.convert.Bson instanceof DBObject ) { ( ( DBObject ) org.springframework.data.mongodb.core.convert.Bson ) . put ( java.lang.String , java.lang.Object ) ; } } }  <METHOD_END>
