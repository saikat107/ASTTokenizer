<METHOD_START> @ Test public void void ( ) { SockJsFrame org.springframework.web.socket.sockjs.frame.SockJsFrame = SockJsFrame . openFrame ( ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getContent ( ) ) ; assertEquals ( SockJsFrameType . OPEN , org.springframework.web.socket.sockjs.frame.SockJsFrame . getType ( ) ) ; assertNull ( org.springframework.web.socket.sockjs.frame.SockJsFrame . getFrameData ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SockJsFrame org.springframework.web.socket.sockjs.frame.SockJsFrame = SockJsFrame . heartbeatFrame ( ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getContent ( ) ) ; assertEquals ( SockJsFrameType . HEARTBEAT , org.springframework.web.socket.sockjs.frame.SockJsFrame . getType ( ) ) ; assertNull ( org.springframework.web.socket.sockjs.frame.SockJsFrame . getFrameData ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SockJsFrame org.springframework.web.socket.sockjs.frame.SockJsFrame = SockJsFrame . messageFrame ( new Jackson2SockJsMessageCodec ( ) , STRING , STRING ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getContent ( ) ) ; assertEquals ( SockJsFrameType . MESSAGE , org.springframework.web.socket.sockjs.frame.SockJsFrame . getType ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getFrameData ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SockJsFrame org.springframework.web.socket.sockjs.frame.SockJsFrame = new SockJsFrame ( STRING ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getContent ( ) ) ; assertEquals ( SockJsFrameType . MESSAGE , org.springframework.web.socket.sockjs.frame.SockJsFrame . getType ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getFrameData ( ) ) ; org.springframework.web.socket.sockjs.frame.SockJsFrame = new SockJsFrame ( STRING ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getContent ( ) ) ; assertEquals ( SockJsFrameType . MESSAGE , org.springframework.web.socket.sockjs.frame.SockJsFrame . getType ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getFrameData ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SockJsFrame org.springframework.web.socket.sockjs.frame.SockJsFrame = SockJsFrame . closeFrame ( NUMBER , STRING ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getContent ( ) ) ; assertEquals ( SockJsFrameType . CLOSE , org.springframework.web.socket.sockjs.frame.SockJsFrame . getType ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getFrameData ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SockJsFrame org.springframework.web.socket.sockjs.frame.SockJsFrame = new SockJsFrame ( STRING ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getContent ( ) ) ; assertEquals ( SockJsFrameType . CLOSE , org.springframework.web.socket.sockjs.frame.SockJsFrame . getType ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getFrameData ( ) ) ; org.springframework.web.socket.sockjs.frame.SockJsFrame = new SockJsFrame ( STRING ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getContent ( ) ) ; assertEquals ( SockJsFrameType . CLOSE , org.springframework.web.socket.sockjs.frame.SockJsFrame . getType ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.sockjs.frame.SockJsFrame . getFrameData ( ) ) ; }  <METHOD_END>
