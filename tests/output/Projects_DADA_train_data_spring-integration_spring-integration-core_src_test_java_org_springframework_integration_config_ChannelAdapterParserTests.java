<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.config.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.ChannelAdapterParserTests> ( ) ) ; this . org.springframework.integration.config.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.ChannelAdapterParserTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.integration.config.AbstractApplicationContext . close ( ) ; this . org.springframework.integration.config.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; PollableChannel org.springframework.integration.config.PollableChannel = ( PollableChannel ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; TestBean org.springframework.integration.config.TestBean = ( TestBean ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.TestBean . store ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof SourcePollingChannelAdapter ) ; assertEquals ( - NUMBER , ( ( SourcePollingChannelAdapter ) java.lang.Object ) . getPhase ( ) ) ; this . org.springframework.integration.config.AbstractApplicationContext . start ( ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.TestBean . getMessage ( ) ) ; this . org.springframework.integration.config.AbstractApplicationContext . stop ( ) ; org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; PollableChannel org.springframework.integration.config.PollableChannel = ( PollableChannel ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof SourcePollingChannelAdapter ) ; this . org.springframework.integration.config.AbstractApplicationContext . start ( ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; this . org.springframework.integration.config.AbstractApplicationContext . stop ( ) ; org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String ) ; assertTrue ( java.lang.Object instanceof DirectChannel ) ; BeanFactoryChannelResolver org.springframework.integration.config.BeanFactoryChannelResolver = new BeanFactoryChannelResolver ( this . org.springframework.integration.config.AbstractApplicationContext ) ; assertNotNull ( org.springframework.integration.config.BeanFactoryChannelResolver . resolveDestination ( java.lang.String ) ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String + STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof EventDrivenConsumer ) ; assertFalse ( ( ( EventDrivenConsumer ) java.lang.Object ) . isAutoStartup ( ) ) ; assertEquals ( - NUMBER , ( ( EventDrivenConsumer ) java.lang.Object ) . getPhase ( ) ) ; TestConsumer org.springframework.integration.config.TestConsumer = ( TestConsumer ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; assertNull ( org.springframework.integration.config.TestConsumer . getLastMessage ( ) ) ; Message < ? > org.springframework.integration.config.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; try { ( ( MessageChannel ) java.lang.Object ) . send ( org.springframework.integration.config.Message<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( MessageDeliveryException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , Matchers . instanceOf ( MessageDispatchingException .class ) ) ; } ( ( EventDrivenConsumer ) java.lang.Object ) . start ( ) ; ( ( MessageChannel ) java.lang.Object ) . send ( org.springframework.integration.config.Message<> ) ; assertNotNull ( org.springframework.integration.config.TestConsumer . getLastMessage ( ) ) ; assertEquals ( org.springframework.integration.config.Message<> , org.springframework.integration.config.TestConsumer . getLastMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String ) ; assertTrue ( java.lang.Object instanceof DirectChannel ) ; BeanFactoryChannelResolver org.springframework.integration.config.BeanFactoryChannelResolver = new BeanFactoryChannelResolver ( this . org.springframework.integration.config.AbstractApplicationContext ) ; assertNotNull ( org.springframework.integration.config.BeanFactoryChannelResolver . resolveDestination ( java.lang.String ) ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String + STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof EventDrivenConsumer ) ; TestBean org.springframework.integration.config.TestBean = ( TestBean ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; assertNull ( org.springframework.integration.config.TestBean . getMessage ( ) ) ; Message < ? > org.springframework.integration.config.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( ( ( MessageChannel ) java.lang.Object ) . send ( org.springframework.integration.config.Message<> ) ) ; assertNotNull ( org.springframework.integration.config.TestBean . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.TestBean . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String ) ; assertTrue ( java.lang.Object instanceof DirectChannel ) ; BeanFactoryChannelResolver org.springframework.integration.config.BeanFactoryChannelResolver = new BeanFactoryChannelResolver ( this . org.springframework.integration.config.AbstractApplicationContext ) ; assertNotNull ( org.springframework.integration.config.BeanFactoryChannelResolver . resolveDestination ( java.lang.String ) ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String + STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof EventDrivenConsumer ) ; TestBean org.springframework.integration.config.TestBean = ( TestBean ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; assertNull ( org.springframework.integration.config.TestBean . getMessage ( ) ) ; Message < ? > org.springframework.integration.config.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( ( ( MessageChannel ) java.lang.Object ) . send ( org.springframework.integration.config.Message<> ) ) ; assertNotNull ( org.springframework.integration.config.TestBean . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.TestBean . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; PollableChannel org.springframework.integration.config.PollableChannel = ( PollableChannel ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; TestBean org.springframework.integration.config.TestBean = ( TestBean ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.TestBean . store ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof SourcePollingChannelAdapter ) ; ( ( SourcePollingChannelAdapter ) java.lang.Object ) . start ( ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.TestBean . getMessage ( ) ) ; ( ( SourcePollingChannelAdapter ) java.lang.Object ) . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; PollableChannel org.springframework.integration.config.PollableChannel = ( PollableChannel ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; TestBean org.springframework.integration.config.TestBean = ( TestBean ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.TestBean . store ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof SourcePollingChannelAdapter ) ; ( ( SourcePollingChannelAdapter ) java.lang.Object ) . start ( ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; ( ( SourcePollingChannelAdapter ) java.lang.Object ) . stop ( ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.TestBean . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; PollableChannel org.springframework.integration.config.PollableChannel = ( PollableChannel ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; TestBean org.springframework.integration.config.TestBean = ( TestBean ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.TestBean . store ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof SourcePollingChannelAdapter ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; PollableChannel org.springframework.integration.config.PollableChannel = ( PollableChannel ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; TestBean org.springframework.integration.config.TestBean = ( TestBean ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.TestBean . store ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof SourcePollingChannelAdapter ) ; ( ( SourcePollingChannelAdapter ) java.lang.Object ) . start ( ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.TestBean . getMessage ( ) ) ; ( ( SourcePollingChannelAdapter ) java.lang.Object ) . stop ( ) ; org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; PollableChannel org.springframework.integration.config.PollableChannel = ( PollableChannel ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; TestBean org.springframework.integration.config.TestBean = ( TestBean ) this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.TestBean . store ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof SourcePollingChannelAdapter ) ; this . org.springframework.integration.config.AbstractApplicationContext . start ( ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.TestBean . getMessage ( ) ) ; this . org.springframework.integration.config.AbstractApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DestinationResolutionException .class ) public void void ( ) { BeanFactoryChannelResolver org.springframework.integration.config.BeanFactoryChannelResolver = new BeanFactoryChannelResolver ( this . org.springframework.integration.config.AbstractApplicationContext ) ; org.springframework.integration.config.BeanFactoryChannelResolver . resolveDestination ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; SourcePollingChannelAdapter org.springframework.integration.config.SourcePollingChannelAdapter = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( java.lang.String , SourcePollingChannelAdapter .class ) ; assertNotNull ( org.springframework.integration.config.SourcePollingChannelAdapter ) ; long long = TestUtils . getPropertyValue ( org.springframework.integration.config.SourcePollingChannelAdapter , STRING , java.lang.Long .class ) ; assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionParsingException .class ) public void void ( ) java.lang.Exception { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.ChannelAdapterParserTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.config.PollableChannel = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING , PollableChannel .class ) ; PollableChannel org.springframework.integration.config.PollableChannel = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING , PollableChannel .class ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( int + NUMBER , org.springframework.integration.config.Message<> . getPayload ( ) ) ; org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( int + NUMBER , org.springframework.integration.config.Message<> . getPayload ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.config.PollableChannel = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.Message<> . getPayload ( ) ) ; MessageSource < ? > org.springframework.integration.config.MessageSource<?> = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING , MessageSource .class ) ; SourcePollingChannelAdapter org.springframework.integration.config.SourcePollingChannelAdapter = this . org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; MessageSource < ? > org.springframework.integration.config.MessageSource<?> = TestUtils . getPropertyValue ( org.springframework.integration.config.SourcePollingChannelAdapter , STRING , MessageSource .class ) ; assertSame ( org.springframework.integration.config.MessageSource<> , org.springframework.integration.config.MessageSource<> ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
