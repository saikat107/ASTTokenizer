<METHOD_START> public static org.springframework.aop.support.ClassFilter org.springframework.aop.support.ClassFilter ( ClassFilter org.springframework.aop.support.ClassFilter , ClassFilter org.springframework.aop.support.ClassFilter ) { Assert . notNull ( org.springframework.aop.support.ClassFilter , STRING ) ; Assert . notNull ( org.springframework.aop.support.ClassFilter , STRING ) ; return new org.springframework.aop.support.ClassFilters.UnionClassFilter ( new ClassFilter [] { org.springframework.aop.support.ClassFilter , org.springframework.aop.support.ClassFilter } ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.support.ClassFilter org.springframework.aop.support.ClassFilter ( ClassFilter [] org.springframework.aop.support.ClassFilter[] ) { Assert . notEmpty ( org.springframework.aop.support.ClassFilter[] , STRING ) ; return new org.springframework.aop.support.ClassFilters.UnionClassFilter ( org.springframework.aop.support.ClassFilter[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.support.ClassFilter org.springframework.aop.support.ClassFilter ( ClassFilter org.springframework.aop.support.ClassFilter , ClassFilter org.springframework.aop.support.ClassFilter ) { Assert . notNull ( org.springframework.aop.support.ClassFilter , STRING ) ; Assert . notNull ( org.springframework.aop.support.ClassFilter , STRING ) ; return new org.springframework.aop.support.ClassFilters.IntersectionClassFilter ( new ClassFilter [] { org.springframework.aop.support.ClassFilter , org.springframework.aop.support.ClassFilter } ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.support.ClassFilter org.springframework.aop.support.ClassFilter ( ClassFilter [] org.springframework.aop.support.ClassFilter[] ) { Assert . notEmpty ( org.springframework.aop.support.ClassFilter[] , STRING ) ; return new org.springframework.aop.support.ClassFilters.IntersectionClassFilter ( org.springframework.aop.support.ClassFilter[] ) ; }  <METHOD_END>
<METHOD_START> public void ( ClassFilter [] org.springframework.aop.support.ClassFilter[] ) { this . org.springframework.aop.support.ClassFilter[] = org.springframework.aop.support.ClassFilter[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( ClassFilter org.springframework.aop.support.ClassFilter : this . org.springframework.aop.support.ClassFilter[] ) { if ( org.springframework.aop.support.ClassFilter . matches ( java.lang.Class<> ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.aop.support.ClassFilters.UnionClassFilter && ObjectUtils . nullSafeEquals ( this . org.springframework.aop.support.ClassFilter[] , ( ( org.springframework.aop.support.ClassFilters.UnionClassFilter ) java.lang.Object ) . org.springframework.aop.support.ClassFilter[] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ObjectUtils . nullSafeHashCode ( this . org.springframework.aop.support.ClassFilter[] ) ; }  <METHOD_END>
<METHOD_START> public void ( ClassFilter [] org.springframework.aop.support.ClassFilter[] ) { this . org.springframework.aop.support.ClassFilter[] = org.springframework.aop.support.ClassFilter[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( ClassFilter org.springframework.aop.support.ClassFilter : this . org.springframework.aop.support.ClassFilter[] ) { if ( ! org.springframework.aop.support.ClassFilter . matches ( java.lang.Class<> ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.aop.support.ClassFilters.IntersectionClassFilter && ObjectUtils . nullSafeEquals ( this . org.springframework.aop.support.ClassFilter[] , ( ( org.springframework.aop.support.ClassFilters.IntersectionClassFilter ) java.lang.Object ) . org.springframework.aop.support.ClassFilter[] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ObjectUtils . nullSafeHashCode ( this . org.springframework.aop.support.ClassFilter[] ) ; }  <METHOD_END>
