<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; org.springframework.integration.router.RecipientListRouter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.router.RecipientListRouter . afterPropertiesSet ( ) ; java.util.concurrent.ConcurrentLinkedQueue<org.springframework.integration.router.Recipient> < Recipient > java.util.concurrent.ConcurrentLinkedQueue<org.springframework.integration.router.Recipient> = ( java.util.concurrent.ConcurrentLinkedQueue<org.springframework.integration.router.Recipient> < Recipient > ) new DirectFieldAccessor ( org.springframework.integration.router.RecipientListRouter ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.concurrent.ConcurrentLinkedQueue<org.springframework.integration.router.Recipient> . size ( ) ) ; assertEquals ( org.springframework.integration.router.QueueChannel , new DirectFieldAccessor ( java.util.concurrent.ConcurrentLinkedQueue<org.springframework.integration.router.Recipient> . poll ( ) ) . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.integration.router.QueueChannel , new DirectFieldAccessor ( java.util.concurrent.ConcurrentLinkedQueue<org.springframework.integration.router.Recipient> . poll ( ) ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; org.springframework.integration.router.RecipientListRouter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.router.RecipientListRouter . afterPropertiesSet ( ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.Collections . java.util.List<T> ( ( MessageChannel ) org.springframework.integration.router.QueueChannel ) ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setSendTimeout ( NUMBER ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; org.springframework.integration.router.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; try { org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setSendTimeout ( NUMBER ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; org.springframework.integration.router.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; try { org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ) ; throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setSendTimeout ( NUMBER ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; org.springframework.integration.router.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; try { org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setIgnoreSendFailures ( true ) ; org.springframework.integration.router.RecipientListRouter . setSendTimeout ( NUMBER ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; org.springframework.integration.router.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setIgnoreSendFailures ( true ) ; org.springframework.integration.router.RecipientListRouter . setSendTimeout ( NUMBER ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; org.springframework.integration.router.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setIgnoreSendFailures ( true ) ; org.springframework.integration.router.RecipientListRouter . setSendTimeout ( NUMBER ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; org.springframework.integration.router.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getSequenceNumber ( ) . intValue ( ) ) ; assertEquals ( NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getSequenceSize ( ) . intValue ( ) ) ; assertNull ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getCorrelationId ( ) ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getSequenceNumber ( ) . intValue ( ) ) ; assertEquals ( NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getSequenceSize ( ) . intValue ( ) ) ; assertNull ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( NUMBER ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setApplySequence ( true ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getSequenceNumber ( ) . intValue ( ) ) ; assertEquals ( NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getSequenceSize ( ) . intValue ( ) ) ; assertEquals ( org.springframework.integration.router.Message<java.lang.String> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getCorrelationId ( ) ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getSequenceNumber ( ) . intValue ( ) ) ; assertEquals ( NUMBER , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getSequenceSize ( ) . intValue ( ) ) ; assertEquals ( org.springframework.integration.router.Message<java.lang.String> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; org.springframework.integration.router.RecipientListRouter . setChannels ( java.util.List<org.springframework.integration.router.MessageChannel> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setBeanFactory ( mock ( BeanFactory .class ) ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.RecipientListRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.RecipientListRouter . afterPropertiesSet ( ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; java.util.List<org.springframework.integration.router.Recipient> < Recipient > java.util.List<org.springframework.integration.router.Recipient> = new java.util.ArrayList<org.springframework.integration.router.Recipient> < Recipient > ( ) ; java.util.List<org.springframework.integration.router.Recipient> . add ( new Recipient ( org.springframework.integration.router.QueueChannel , new org.springframework.integration.router.RecipientListRouterTests.AlwaysTrueSelector ( ) ) ) ; java.util.List<org.springframework.integration.router.Recipient> . add ( new Recipient ( org.springframework.integration.router.QueueChannel , new org.springframework.integration.router.RecipientListRouterTests.AlwaysFalseSelector ( ) ) ) ; java.util.List<org.springframework.integration.router.Recipient> . add ( new Recipient ( org.springframework.integration.router.QueueChannel ) ) ; java.util.List<org.springframework.integration.router.Recipient> . add ( new Recipient ( org.springframework.integration.router.QueueChannel ) ) ; java.util.List<org.springframework.integration.router.Recipient> . add ( new Recipient ( org.springframework.integration.router.QueueChannel , new org.springframework.integration.router.RecipientListRouterTests.AlwaysFalseSelector ( ) ) ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setRecipients ( java.util.List<org.springframework.integration.router.Recipient> ) ; Message < ? > org.springframework.integration.router.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( org.springframework.integration.router.Message<> , org.springframework.integration.router.Message<> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.router.Message<> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( org.springframework.integration.router.Message<> , org.springframework.integration.router.Message<> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertEquals ( org.springframework.integration.router.Message<> , org.springframework.integration.router.Message<> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.QueueChannel . setBeanName ( STRING ) ; java.util.List<org.springframework.integration.router.Recipient> < Recipient > java.util.List<org.springframework.integration.router.Recipient> = new java.util.ArrayList<org.springframework.integration.router.Recipient> < Recipient > ( ) ; java.util.List<org.springframework.integration.router.Recipient> . add ( new Recipient ( org.springframework.integration.router.QueueChannel , new org.springframework.integration.router.RecipientListRouterTests.AlwaysFalseSelector ( ) ) ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setRecipients ( java.util.List<org.springframework.integration.router.Recipient> ) ; org.springframework.integration.router.RecipientListRouter . setDefaultOutputChannel ( org.springframework.integration.router.QueueChannel ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; java.util.List<org.springframework.integration.router.Recipient> < Recipient > java.util.List<org.springframework.integration.router.Recipient> = new java.util.ArrayList<org.springframework.integration.router.Recipient> < Recipient > ( ) ; java.util.List<org.springframework.integration.router.Recipient> . add ( new Recipient ( new DirectChannel ( ) , new org.springframework.integration.router.RecipientListRouterTests.AlwaysFalseSelector ( ) ) ) ; RecipientListRouter org.springframework.integration.router.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.router.RecipientListRouter . setRecipients ( java.util.List<org.springframework.integration.router.Recipient> ) ; org.springframework.integration.router.RecipientListRouter . setDefaultOutputChannelName ( STRING ) ; BeanFactory org.springframework.integration.router.BeanFactory = Mockito . mock ( BeanFactory .class ) ; when ( org.springframework.integration.router.BeanFactory . getBean ( Mockito . eq ( STRING ) , Mockito . eq ( MessageChannel .class ) ) ) . thenReturn ( org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.RecipientListRouter . setBeanFactory ( org.springframework.integration.router.BeanFactory ) ; org.springframework.integration.router.RecipientListRouter . afterPropertiesSet ( ) ; org.springframework.integration.router.RecipientListRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertSame ( org.springframework.integration.router.QueueChannel , TestUtils . getPropertyValue ( org.springframework.integration.router.RecipientListRouter , STRING ) ) ; Mockito . verify ( org.springframework.integration.router.BeanFactory ) . getBean ( Mockito . eq ( STRING ) , Mockito . eq ( MessageChannel .class ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.router.Message<?> ) { return true ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.router.Message<?> ) { return false ; }  <METHOD_END>
