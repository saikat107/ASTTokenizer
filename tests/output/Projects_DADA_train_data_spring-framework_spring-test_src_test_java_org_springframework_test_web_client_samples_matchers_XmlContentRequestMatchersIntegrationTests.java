<METHOD_START> @ Before public void void ( ) { java.util.List<org.springframework.test.web.client.samples.matchers.Person> < Person > java.util.List<org.springframework.test.web.client.samples.matchers.Person> = java.util.Arrays . java.util.List ( new Person ( STRING ) . setSomeDouble ( NUMBER ) , new Person ( STRING ) . setSomeDouble ( NUMBER ) , new Person ( STRING ) . setSomeDouble ( NUMBER ) , new Person ( STRING ) . setSomeDouble ( java.lang.Double . double ) ) ; this . org.springframework.test.web.client.samples.matchers.XmlContentRequestMatchersIntegrationTests.PeopleWrapper = new org.springframework.test.web.client.samples.matchers.XmlContentRequestMatchersIntegrationTests.PeopleWrapper ( java.util.List<org.springframework.test.web.client.samples.matchers.Person> ) ; java.util.List<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> . add ( new Jaxb2RootElementHttpMessageConverter ( ) ) ; this . org.springframework.test.web.client.samples.matchers.RestTemplate = new RestTemplate ( ) ; this . org.springframework.test.web.client.samples.matchers.RestTemplate . setMessageConverters ( java.util.List<org.springframework.test.web.client.samples.matchers.HttpMessageConverter<?>> ) ; this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer = MockRestServiceServer . createServer ( this . org.springframework.test.web.client.samples.matchers.RestTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( content ( ) . xml ( java.lang.String ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.samples.matchers.RestTemplate . put ( new java.net.URI ( STRING ) , this . org.springframework.test.web.client.samples.matchers.XmlContentRequestMatchersIntegrationTests.PeopleWrapper ) ; this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( content ( ) . node ( hasXPath ( STRING ) ) ) . andRespond ( withSuccess ( ) ) ; this . org.springframework.test.web.client.samples.matchers.RestTemplate . put ( new java.net.URI ( STRING ) , this . org.springframework.test.web.client.samples.matchers.XmlContentRequestMatchersIntegrationTests.PeopleWrapper ) ; this . org.springframework.test.web.client.samples.matchers.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.test.web.client.samples.matchers.Person> < Person > java.util.List<org.springframework.test.web.client.samples.matchers.Person> ) { this . java.util.List<org.springframework.test.web.client.samples.matchers.Person> = java.util.List<org.springframework.test.web.client.samples.matchers.Person> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.test.web.client.samples.matchers.Person> < Person > java.util.List<org.springframework.test.web.client.samples.matchers.Person> ( ) { return this . java.util.List<org.springframework.test.web.client.samples.matchers.Person> ; }  <METHOD_END>
