<METHOD_START> public void ( HttpServerRequest < ByteBuf > org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> , NettyDataBufferFactory org.springframework.http.server.reactive.NettyDataBufferFactory , java.net.InetSocketAddress java.net.InetSocketAddress ) { super( java.net.URI ( org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> , java.net.InetSocketAddress ) , org.springframework.http.server.reactive.HttpHeaders ( org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> ) ); Assert . notNull ( org.springframework.http.server.reactive.NettyDataBufferFactory , STRING ) ; this . org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> = org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> ; this . org.springframework.http.server.reactive.NettyDataBufferFactory = org.springframework.http.server.reactive.NettyDataBufferFactory ; this . java.net.InetSocketAddress = java.net.InetSocketAddress ; }  <METHOD_END>
<METHOD_START> private static java.net.URI java.net.URI ( HttpServerRequest < ByteBuf > org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> , java.net.InetSocketAddress java.net.InetSocketAddress ) { Assert . notNull ( org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> , STRING ) ; java.lang.String java.lang.String = org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> . getUri ( ) ; return java.net.InetSocketAddress != null ? java.net.URI ( java.net.InetSocketAddress ) . java.net.URI ( java.lang.String ) : java.net.URI . java.net.URI ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static java.net.URI java.net.URI ( java.net.InetSocketAddress java.net.InetSocketAddress ) { try { return new java.net.URI ( null , null , java.net.InetSocketAddress . java.lang.String ( ) , java.net.InetSocketAddress . int ( ) , null , null , null ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalStateException ( java.net.URISyntaxException ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.http.server.reactive.HttpHeaders org.springframework.http.server.reactive.HttpHeaders ( HttpServerRequest < ByteBuf > org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> ) { HttpHeaders org.springframework.http.server.reactive.HttpHeaders = new HttpHeaders ( ) ; for ( java.lang.String java.lang.String : org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> . getHeaderNames ( ) ) { org.springframework.http.server.reactive.HttpHeaders . put ( java.lang.String , org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> . getAllHeaderValues ( java.lang.String ) ) ; } return org.springframework.http.server.reactive.HttpHeaders ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> < ByteBuf > org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> ( ) { return this . org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpMethod org.springframework.http.server.reactive.HttpMethod ( ) { return HttpMethod . valueOf ( this . org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> . getHttpMethod ( ) . name ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> < java.lang.String , HttpCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ( ) { MultiValueMap < java.lang.String , HttpCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> = new LinkedMultiValueMap <> ( ) ; for ( java.lang.String java.lang.String : this . org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> . getCookies ( ) . keySet ( ) ) { for ( Cookie org.springframework.http.server.reactive.Cookie : this . org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> . getCookies ( ) . get ( java.lang.String ) ) { HttpCookie org.springframework.http.server.reactive.HttpCookie = new HttpCookie ( java.lang.String , org.springframework.http.server.reactive.Cookie . value ( ) ) ; org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> . add ( java.lang.String , org.springframework.http.server.reactive.HttpCookie ) ; } } return org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.Optional<java.net.InetSocketAddress> ( ) { return java.util.Optional . java.util.Optional<java.net.InetSocketAddress> ( this . java.net.InetSocketAddress ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Flux<org.springframework.http.server.reactive.DataBuffer> < DataBuffer > org.springframework.http.server.reactive.Flux<org.springframework.http.server.reactive.DataBuffer> ( ) { Observable < DataBuffer > org.springframework.http.server.reactive.Observable<org.springframework.http.server.reactive.DataBuffer> = this . org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> . getContent ( ) . map ( org.springframework.http.server.reactive.NettyDataBufferFactory :: wrap ) ; return Flux . from ( RxReactiveStreams . toPublisher ( org.springframework.http.server.reactive.Observable<org.springframework.http.server.reactive.DataBuffer> ) ) ; }  <METHOD_END>
