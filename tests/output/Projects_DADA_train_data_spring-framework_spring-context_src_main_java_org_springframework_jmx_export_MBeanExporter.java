<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Integer = ( boolean ? int : int ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { if ( ! org.springframework.jmx.export.Constants . getValues ( java.lang.String ) . contains ( int ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( java.lang.String == null || ! java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.lang.Integer = ( java.lang.Integer ) org.springframework.jmx.export.Constants . asNumber ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MBeanInfoAssembler org.springframework.jmx.export.MBeanInfoAssembler ) { this . org.springframework.jmx.export.MBeanInfoAssembler = org.springframework.jmx.export.MBeanInfoAssembler ; }  <METHOD_END>
<METHOD_START> public void void ( ObjectNamingStrategy org.springframework.jmx.export.ObjectNamingStrategy ) { this . org.springframework.jmx.export.ObjectNamingStrategy = org.springframework.jmx.export.ObjectNamingStrategy ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.util.Set<java.lang.String> . void ( ) ; if ( java.lang.String[] != null ) { this . java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( MBeanExporterListener ... org.springframework.jmx.export.MBeanExporterListener[] ) { this . org.springframework.jmx.export.MBeanExporterListener[] = org.springframework.jmx.export.MBeanExporterListener[] ; }  <METHOD_END>
<METHOD_START> public void void ( NotificationListenerBean ... org.springframework.jmx.export.NotificationListenerBean[] ) { this . org.springframework.jmx.export.NotificationListenerBean[] = org.springframework.jmx.export.NotificationListenerBean[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<?,? extends javax.management.NotificationListener> < ? , ? extends javax.management.NotificationListener > java.util.Map<?,? extends javax.management.NotificationListener> ) { Assert . notNull ( java.util.Map<,> , STRING ) ; java.util.List<org.springframework.jmx.export.NotificationListenerBean> < NotificationListenerBean > java.util.List<org.springframework.jmx.export.NotificationListenerBean> = new java.util.ArrayList<org.springframework.jmx.export.NotificationListenerBean> <> ( java.util.Map<,> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<?,? extends javax.management.NotificationListener> < ? , ? extends javax.management.NotificationListener > java.util.Map.Entry<?,? extends javax.management.NotificationListener> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { NotificationListenerBean org.springframework.jmx.export.NotificationListenerBean = new NotificationListenerBean ( java.util.Map.Entry<,> . getValue ( ) ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<,> . getKey ( ) ; if ( java.lang.Object != null && ! java.lang.String . boolean ( java.lang.Object ) ) { org.springframework.jmx.export.NotificationListenerBean . setMappedObjectName ( java.util.Map.Entry<,> . getKey ( ) ) ; } java.util.List<org.springframework.jmx.export.NotificationListenerBean> . add ( org.springframework.jmx.export.NotificationListenerBean ) ; } this . org.springframework.jmx.export.NotificationListenerBean[] = java.util.List<org.springframework.jmx.export.NotificationListenerBean> . toArray ( new NotificationListenerBean [ java.util.List<org.springframework.jmx.export.NotificationListenerBean> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.jmx.export.BeanFactory ) { if ( org.springframework.jmx.export.BeanFactory instanceof ListableBeanFactory ) { this . org.springframework.jmx.export.ListableBeanFactory = ( ListableBeanFactory ) org.springframework.jmx.export.BeanFactory ; } else { logger . info ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . server == null ) { this . server = JmxUtils . locateMBeanServer ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { logger . info ( STRING ) ; void ( ) ; void ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( ) ; unregisterBeans ( ) ; throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { logger . info ( STRING ) ; void ( ) ; unregisterBeans ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.management.ObjectName javax.management.ObjectName ( java.lang.Object java.lang.Object ) throws org.springframework.jmx.export.MBeanExportException { Assert . notNull ( java.lang.Object , STRING ) ; javax.management.ObjectName javax.management.ObjectName ; try { javax.management.ObjectName = javax.management.ObjectName ( java.lang.Object , null ) ; if ( this . boolean ) { javax.management.ObjectName = JmxUtils . appendIdentityToObjectName ( javax.management.ObjectName , java.lang.Object ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new MBeanExportException ( STRING + java.lang.Object + STRING , java.lang.Throwable ) ; } void ( java.lang.Object , javax.management.ObjectName ) ; return javax.management.ObjectName ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , javax.management.ObjectName javax.management.ObjectName ) throws org.springframework.jmx.export.MBeanExportException { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( javax.management.ObjectName , STRING ) ; try { if ( boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { doRegister ( java.lang.Object , javax.management.ObjectName ) ; } else { javax.management.modelmbean.ModelMBean javax.management.modelmbean.ModelMBean = javax.management.modelmbean.ModelMBean ( java.lang.Object , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; doRegister ( javax.management.modelmbean.ModelMBean , javax.management.ObjectName ) ; void ( java.lang.Object , javax.management.modelmbean.ModelMBean , javax.management.ObjectName ) ; } } catch ( javax.management.JMException javax.management.JMException ) { throw new UnableToRegisterMBeanException ( STRING + java.lang.Object + STRING + javax.management.ObjectName + STRING , javax.management.JMException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax.management.ObjectName javax.management.ObjectName ) { Assert . notNull ( javax.management.ObjectName , STRING ) ; doUnregister ( javax.management.ObjectName ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . java.util.Map<java.lang.String,java.lang.Object> == null ) { this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; if ( this . java.lang.Integer == null ) { this . java.lang.Integer = int ; } } int int = ( this . java.lang.Integer != null ? this . java.lang.Integer : int ) ; if ( int != int ) { if ( this . org.springframework.jmx.export.ListableBeanFactory == null ) { throw new MBeanExportException ( STRING ) ; } if ( int == int || int == int ) { logger . debug ( STRING ) ; void ( ) ; } if ( ( int == int || int == int ) && this . org.springframework.jmx.export.MBeanInfoAssembler instanceof AutodetectCapableMBeanInfoAssembler ) { void ( ( AutodetectCapableMBeanInfoAssembler ) this . org.springframework.jmx.export.MBeanInfoAssembler ) ; } } if ( ! this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { javax.management.ObjectName ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ; } } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ListableBeanFactory org.springframework.jmx.export.ListableBeanFactory , java.lang.String java.lang.String ) { return ( org.springframework.jmx.export.ListableBeanFactory instanceof ConfigurableListableBeanFactory && org.springframework.jmx.export.ListableBeanFactory . containsBeanDefinition ( java.lang.String ) && ( ( ConfigurableListableBeanFactory ) org.springframework.jmx.export.ListableBeanFactory ) . getBeanDefinition ( java.lang.String ) . isLazyInit ( ) ) ; }  <METHOD_END>
<METHOD_START> protected javax.management.ObjectName javax.management.ObjectName ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.jmx.export.MBeanExportException { try { if ( java.lang.Object instanceof java.lang.String ) { if ( this . org.springframework.jmx.export.ListableBeanFactory == null ) { throw new MBeanExportException ( STRING ) ; } java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( boolean ( this . org.springframework.jmx.export.ListableBeanFactory , java.lang.String ) ) { javax.management.ObjectName javax.management.ObjectName = javax.management.ObjectName ( java.lang.String , java.lang.String ) ; void ( java.lang.String , javax.management.ObjectName ) ; return javax.management.ObjectName ; } else { java.lang.Object java.lang.Object = this . org.springframework.jmx.export.ListableBeanFactory . getBean ( java.lang.String ) ; if ( java.lang.Object != null ) { javax.management.ObjectName javax.management.ObjectName = javax.management.ObjectName ( java.lang.Object , java.lang.String ) ; void ( java.lang.String , javax.management.ObjectName ) ; return javax.management.ObjectName ; } } } else if ( java.lang.Object != null ) { if ( this . org.springframework.jmx.export.ListableBeanFactory != null ) { java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = this . org.springframework.jmx.export.ListableBeanFactory . getBeansOfType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , false , this . boolean ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,?> < java.lang.String , ? > java.util.Map.Entry<java.lang.String,?> : java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) ) { if ( java.util.Map.Entry<java.lang.String,> . getValue ( ) == java.lang.Object ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) ; javax.management.ObjectName javax.management.ObjectName = javax.management.ObjectName ( java.lang.Object , java.lang.String ) ; void ( java.lang.String , javax.management.ObjectName ) ; return javax.management.ObjectName ; } } } return javax.management.ObjectName ( java.lang.Object , java.lang.String ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new UnableToRegisterMBeanException ( STRING + java.lang.Object + STRING + java.lang.String + STRING , java.lang.Throwable ) ; } return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , javax.management.ObjectName javax.management.ObjectName ) { if ( this . org.springframework.jmx.export.NotificationListenerBean[] != null ) { for ( NotificationListenerBean org.springframework.jmx.export.NotificationListenerBean : this . org.springframework.jmx.export.NotificationListenerBean[] ) { org.springframework.jmx.export.NotificationListenerBean . replaceObjectName ( java.lang.String , javax.management.ObjectName ) ; } } }  <METHOD_END>
<METHOD_START> private javax.management.ObjectName javax.management.ObjectName ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws javax.management.JMException { javax.management.ObjectName javax.management.ObjectName = javax.management.ObjectName ( java.lang.Object , java.lang.String ) ; java.lang.Object java.lang.Object = null ; if ( boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.Object = java.lang.Object ; } else { javax.management.DynamicMBean javax.management.DynamicMBean = javax.management.DynamicMBean ( java.lang.Object ) ; if ( javax.management.DynamicMBean != null ) { java.lang.Object = javax.management.DynamicMBean ; } } if ( java.lang.Object != null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + java.lang.String + STRING + javax.management.ObjectName + STRING ) ; } doRegister ( java.lang.Object , javax.management.ObjectName ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + java.lang.String + STRING + javax.management.ObjectName + STRING ) ; } javax.management.modelmbean.ModelMBean javax.management.modelmbean.ModelMBean = javax.management.modelmbean.ModelMBean ( java.lang.Object , java.lang.String ) ; doRegister ( javax.management.modelmbean.ModelMBean , javax.management.ObjectName ) ; void ( java.lang.Object , javax.management.modelmbean.ModelMBean , javax.management.ObjectName ) ; } return javax.management.ObjectName ; }  <METHOD_END>
<METHOD_START> private javax.management.ObjectName javax.management.ObjectName ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.management.JMException { ProxyFactory org.springframework.jmx.export.ProxyFactory = new ProxyFactory ( ) ; org.springframework.jmx.export.ProxyFactory . setProxyTargetClass ( true ) ; org.springframework.jmx.export.ProxyFactory . setFrozen ( true ) ; if ( boolean ( this . org.springframework.jmx.export.ListableBeanFactory . getType ( java.lang.String ) ) ) { LazyInitTargetSource org.springframework.jmx.export.LazyInitTargetSource = new LazyInitTargetSource ( ) ; org.springframework.jmx.export.LazyInitTargetSource . setTargetBeanName ( java.lang.String ) ; org.springframework.jmx.export.LazyInitTargetSource . setBeanFactory ( this . org.springframework.jmx.export.ListableBeanFactory ) ; org.springframework.jmx.export.ProxyFactory . setTargetSource ( org.springframework.jmx.export.LazyInitTargetSource ) ; java.lang.Object java.lang.Object = org.springframework.jmx.export.ProxyFactory . getProxy ( this . java.lang.ClassLoader ) ; javax.management.ObjectName javax.management.ObjectName = javax.management.ObjectName ( java.lang.Object , java.lang.String ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + javax.management.ObjectName + STRING ) ; } doRegister ( java.lang.Object , javax.management.ObjectName ) ; return javax.management.ObjectName ; } else { org.springframework.jmx.export.MBeanExporter.NotificationPublisherAwareLazyTargetSource org.springframework.jmx.export.MBeanExporter.NotificationPublisherAwareLazyTargetSource = new org.springframework.jmx.export.MBeanExporter.NotificationPublisherAwareLazyTargetSource ( ) ; org.springframework.jmx.export.MBeanExporter.NotificationPublisherAwareLazyTargetSource . setTargetBeanName ( java.lang.String ) ; org.springframework.jmx.export.MBeanExporter.NotificationPublisherAwareLazyTargetSource . setBeanFactory ( this . org.springframework.jmx.export.ListableBeanFactory ) ; org.springframework.jmx.export.ProxyFactory . setTargetSource ( org.springframework.jmx.export.MBeanExporter.NotificationPublisherAwareLazyTargetSource ) ; java.lang.Object java.lang.Object = org.springframework.jmx.export.ProxyFactory . getProxy ( this . java.lang.ClassLoader ) ; javax.management.ObjectName javax.management.ObjectName = javax.management.ObjectName ( java.lang.Object , java.lang.String ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + javax.management.ObjectName + STRING ) ; } javax.management.modelmbean.ModelMBean javax.management.modelmbean.ModelMBean = javax.management.modelmbean.ModelMBean ( java.lang.Object , java.lang.String ) ; org.springframework.jmx.export.MBeanExporter.NotificationPublisherAwareLazyTargetSource . void ( javax.management.modelmbean.ModelMBean ) ; org.springframework.jmx.export.MBeanExporter.NotificationPublisherAwareLazyTargetSource . void ( javax.management.ObjectName ) ; doRegister ( javax.management.modelmbean.ModelMBean , javax.management.ObjectName ) ; return javax.management.ObjectName ; } }  <METHOD_END>
<METHOD_START> protected javax.management.ObjectName javax.management.ObjectName ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws javax.management.MalformedObjectNameException { if ( java.lang.Object instanceof SelfNaming ) { return ( ( SelfNaming ) java.lang.Object ) . getObjectName ( ) ; } else { return this . org.springframework.jmx.export.ObjectNamingStrategy . getObjectName ( java.lang.Object , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return JmxUtils . isMBean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected javax.management.DynamicMBean javax.management.DynamicMBean ( java.lang.Object java.lang.Object ) throws javax.management.JMException { java.lang.Class<?> < ? > java.lang.Class<?> = AopUtils . getTargetClass ( java.lang.Object ) ; if ( java.lang.Class<> != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = JmxUtils . getMXBeanInterface ( java.lang.Class<> ) ; if ( java.lang.Class<> != null ) { if ( ! java.lang.Class<> . boolean ( java.lang.Object ) ) { throw new javax.management.NotCompliantMBeanException ( STRING + java.lang.Object + STRING ) ; } return new javax.management.StandardMBean ( java.lang.Object , ( ( java.lang.Class<java.lang.Object> < java.lang.Object > ) java.lang.Class<> ) , true ) ; } else { java.lang.Class<?> = JmxUtils . getMBeanInterface ( java.lang.Class<> ) ; if ( java.lang.Class<> != null ) { if ( ! java.lang.Class<> . boolean ( java.lang.Object ) ) { throw new javax.management.NotCompliantMBeanException ( STRING + java.lang.Object + STRING ) ; } return new javax.management.StandardMBean ( java.lang.Object , ( ( java.lang.Class<java.lang.Object> < java.lang.Object > ) java.lang.Class<> ) ) ; } } } return null ; }  <METHOD_END>
<METHOD_START> protected javax.management.modelmbean.ModelMBean javax.management.modelmbean.ModelMBean ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )			throws org.springframework.jmx.export.MBeanExportException { try { javax.management.modelmbean.ModelMBean javax.management.modelmbean.ModelMBean = javax.management.modelmbean.ModelMBean ( ) ; javax.management.modelmbean.ModelMBean . void ( javax.management.modelmbean.ModelMBeanInfo ( java.lang.Object , java.lang.String ) ) ; javax.management.modelmbean.ModelMBean . void ( java.lang.Object , java.lang.String ) ; return javax.management.modelmbean.ModelMBean ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new MBeanExportException ( STRING + java.lang.Object + STRING + java.lang.String + STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected javax.management.modelmbean.ModelMBean javax.management.modelmbean.ModelMBean ( ) javax.management.MBeanException { return ( this . boolean ? new SpringModelMBean ( ) : new javax.management.modelmbean.RequiredModelMBean ( ) ) ; }  <METHOD_END>
<METHOD_START> private javax.management.modelmbean.ModelMBeanInfo javax.management.modelmbean.ModelMBeanInfo ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws javax.management.JMException { javax.management.modelmbean.ModelMBeanInfo javax.management.modelmbean.ModelMBeanInfo = this . org.springframework.jmx.export.MBeanInfoAssembler . getMBeanInfo ( java.lang.Object , java.lang.String ) ; if ( logger . isWarnEnabled ( ) && ObjectUtils . isEmpty ( javax.management.modelmbean.ModelMBeanInfo . javax.management.MBeanAttributeInfo[] ( ) ) && ObjectUtils . isEmpty ( javax.management.modelmbean.ModelMBeanInfo . javax.management.MBeanOperationInfo[] ( ) ) ) { logger . warn ( STRING + java.lang.String + STRING ) ; } return javax.management.modelmbean.ModelMBeanInfo ; }  <METHOD_END>
<METHOD_START> private void void ( final AutodetectCapableMBeanInfoAssembler org.springframework.jmx.export.AutodetectCapableMBeanInfoAssembler ) { void ( new org.springframework.jmx.export.MBeanExporter.AutodetectCallback ( ) { @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.jmx.export.AutodetectCapableMBeanInfoAssembler . includeBean ( java.lang.Class<> , java.lang.String ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return org.springframework.jmx.export.AutodetectCapableMBeanInfoAssembler . includeBean ( java.lang.Class<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { void ( new org.springframework.jmx.export.MBeanExporter.AutodetectCallback ( ) { @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return boolean ( java.lang.Class<> ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.jmx.export.MBeanExporter.AutodetectCallback org.springframework.jmx.export.MBeanExporter.AutodetectCallback ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet <> ( this . org.springframework.jmx.export.ListableBeanFactory . getBeanDefinitionCount ( ) ) ; java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( this . org.springframework.jmx.export.ListableBeanFactory . getBeanDefinitionNames ( ) ) ) ; if ( this . org.springframework.jmx.export.ListableBeanFactory instanceof ConfigurableBeanFactory ) { java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( ( ( ConfigurableBeanFactory ) this . org.springframework.jmx.export.ListableBeanFactory ) . getSingletonNames ( ) ) ) ; } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( ! boolean ( java.lang.String ) && ! boolean ( this . org.springframework.jmx.export.ListableBeanFactory , java.lang.String ) ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = this . org.springframework.jmx.export.ListableBeanFactory . getType ( java.lang.String ) ; if ( java.lang.Class<> != null && org.springframework.jmx.export.MBeanExporter.AutodetectCallback . boolean ( java.lang.Class<> , java.lang.String ) ) { boolean boolean = boolean ( this . org.springframework.jmx.export.ListableBeanFactory , java.lang.String ) ; java.lang.Object java.lang.Object = ( ! boolean ? this . org.springframework.jmx.export.ListableBeanFactory . getBean ( java.lang.String ) : null ) ; if ( ! ScopedProxyUtils . isScopedTarget ( java.lang.String ) && ! this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) && ( java.lang.Object == null || ! CollectionUtils . containsInstance ( this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Collection<java.lang.Object> ( ) , java.lang.Object ) ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , ( java.lang.Object != null ? java.lang.Object : java.lang.String ) ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + java.lang.String + STRING ) ; } } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } } } } catch ( CannotLoadBeanClassException org.springframework.jmx.export.CannotLoadBeanClassException ) { if ( this . boolean ) { throw org.springframework.jmx.export.CannotLoadBeanClassException ; } } } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return ( this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) || ( java.lang.String . boolean ( BeanFactory . FACTORY_BEAN_PREFIX ) && this . java.util.Set<java.lang.String> . boolean ( java.lang.String . java.lang.String ( BeanFactory . FACTORY_BEAN_PREFIX . length ( ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ListableBeanFactory org.springframework.jmx.export.ListableBeanFactory , java.lang.String java.lang.String ) { return ( org.springframework.jmx.export.ListableBeanFactory instanceof ConfigurableListableBeanFactory && org.springframework.jmx.export.ListableBeanFactory . containsBeanDefinition ( java.lang.String ) && ( ( ConfigurableListableBeanFactory ) org.springframework.jmx.export.ListableBeanFactory ) . getBeanDefinition ( java.lang.String ) . isAbstract ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , javax.management.modelmbean.ModelMBean javax.management.modelmbean.ModelMBean , javax.management.ObjectName javax.management.ObjectName ) { if ( java.lang.Object instanceof NotificationPublisherAware ) { ( ( NotificationPublisherAware ) java.lang.Object ) . setNotificationPublisher ( new ModelMBeanNotificationPublisher ( javax.management.modelmbean.ModelMBean , javax.management.ObjectName , java.lang.Object ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.jmx.export.MBeanExportException { if ( this . org.springframework.jmx.export.NotificationListenerBean[] != null ) { for ( NotificationListenerBean org.springframework.jmx.export.NotificationListenerBean : this . org.springframework.jmx.export.NotificationListenerBean[] ) { try { javax.management.ObjectName [] javax.management.ObjectName[] = org.springframework.jmx.export.NotificationListenerBean . getResolvedObjectNames ( ) ; if ( javax.management.ObjectName[] == null ) { javax.management.ObjectName[] = getRegisteredObjectNames ( ) ; } if ( this . java.util.Map<org.springframework.jmx.export.NotificationListenerBean,javax.management.ObjectName[]> . put ( org.springframework.jmx.export.NotificationListenerBean , javax.management.ObjectName[] ) == null ) { for ( javax.management.ObjectName javax.management.ObjectName : javax.management.ObjectName[] ) { this . server . addNotificationListener ( javax.management.ObjectName , org.springframework.jmx.export.NotificationListenerBean . getNotificationListener ( ) , org.springframework.jmx.export.NotificationListenerBean . getNotificationFilter ( ) , org.springframework.jmx.export.NotificationListenerBean . getHandback ( ) ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new MBeanExportException ( STRING , java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( java.util.Map . java.util.Map.Entry<org.springframework.jmx.export.NotificationListenerBean,javax.management.ObjectName[]> < NotificationListenerBean , javax.management.ObjectName [] > java.util.Map.Entry<org.springframework.jmx.export.NotificationListenerBean,javax.management.ObjectName[]> : this . java.util.Map<org.springframework.jmx.export.NotificationListenerBean,javax.management.ObjectName[]> . entrySet ( ) ) { NotificationListenerBean org.springframework.jmx.export.NotificationListenerBean = java.util.Map.Entry<org.springframework.jmx.export.NotificationListenerBean,javax.management.ObjectName[]> . getKey ( ) ; javax.management.ObjectName [] javax.management.ObjectName[] = java.util.Map.Entry<org.springframework.jmx.export.NotificationListenerBean,javax.management.ObjectName[]> . getValue ( ) ; for ( javax.management.ObjectName javax.management.ObjectName : javax.management.ObjectName[] ) { try { this . server . removeNotificationListener ( javax.management.ObjectName , org.springframework.jmx.export.NotificationListenerBean . getNotificationListener ( ) , org.springframework.jmx.export.NotificationListenerBean . getNotificationFilter ( ) , org.springframework.jmx.export.NotificationListenerBean . getHandback ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING , java.lang.Throwable ) ; } } } } this . java.util.Map<org.springframework.jmx.export.NotificationListenerBean,javax.management.ObjectName[]> . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( javax.management.ObjectName javax.management.ObjectName ) { void ( javax.management.ObjectName ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( javax.management.ObjectName javax.management.ObjectName ) { void ( javax.management.ObjectName ) ; }  <METHOD_END>
<METHOD_START> private void void ( javax.management.ObjectName javax.management.ObjectName ) { if ( this . org.springframework.jmx.export.MBeanExporterListener[] != null ) { for ( MBeanExporterListener org.springframework.jmx.export.MBeanExporterListener : this . org.springframework.jmx.export.MBeanExporterListener[] ) { org.springframework.jmx.export.MBeanExporterListener . mbeanRegistered ( javax.management.ObjectName ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( javax.management.ObjectName javax.management.ObjectName ) { if ( this . org.springframework.jmx.export.MBeanExporterListener[] != null ) { for ( MBeanExporterListener org.springframework.jmx.export.MBeanExporterListener : this . org.springframework.jmx.export.MBeanExporterListener[] ) { org.springframework.jmx.export.MBeanExporterListener . mbeanUnregistered ( javax.management.ObjectName ) ; } } }  <METHOD_END>
<METHOD_START> boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void void ( javax.management.modelmbean.ModelMBean javax.management.modelmbean.ModelMBean ) { this . javax.management.modelmbean.ModelMBean = javax.management.modelmbean.ModelMBean ; }  <METHOD_END>
<METHOD_START> public void void ( javax.management.ObjectName javax.management.ObjectName ) { this . javax.management.ObjectName = javax.management.ObjectName ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { try { return super. getTarget ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + this . javax.management.ObjectName + STRING + java.lang.RuntimeException ) ; } throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object , this . javax.management.modelmbean.ModelMBean , this . javax.management.ObjectName ) ; }  <METHOD_END>
