<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.geo.MongoClient org.springframework.data.mongodb.core.geo.MongoClient ( ) { return new MongoClient ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.core.geo.MongoTemplate . setWriteConcern ( WriteConcern . FSYNC_SAFE ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NearQuery org.springframework.data.mongodb.core.geo.NearQuery = NearQuery . near ( new GeoJsonPoint ( - NUMBER , NUMBER ) , Metrics . KILOMETERS ) . num ( NUMBER ) . maxDistance ( NUMBER ) ; GeoResults < org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere > org.springframework.data.mongodb.core.geo.GeoResults<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> = org.springframework.data.mongodb.core.geo.MongoTemplate . geoNear ( org.springframework.data.mongodb.core.geo.NearQuery , org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere .class ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoResults<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> . getContent ( ) . size ( ) , is ( not ( NUMBER ) ) ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoResults<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> . getAverageDistance ( ) . getMetric ( ) , is ( ( Metric ) Metrics . KILOMETERS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.core.geo.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.core.geo.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.core.geo.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.core.geo.Point = new Point ( - NUMBER , NUMBER ) ; GeoJsonPolygon org.springframework.data.mongodb.core.geo.GeoJsonPolygon = new GeoJsonPolygon ( org.springframework.data.mongodb.core.geo.Point , org.springframework.data.mongodb.core.geo.Point , org.springframework.data.mongodb.core.geo.Point , org.springframework.data.mongodb.core.geo.Point , org.springframework.data.mongodb.core.geo.Point ) ; java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> < org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere > java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( query ( where ( STRING ) . within ( org.springframework.data.mongodb.core.geo.GeoJsonPolygon ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GeoJsonPoint org.springframework.data.mongodb.core.geo.GeoJsonPoint = new GeoJsonPoint ( - NUMBER , NUMBER ) ; Query org.springframework.data.mongodb.core.geo.Query = query ( where ( STRING ) . near ( org.springframework.data.mongodb.core.geo.GeoJsonPoint ) . maxDistance ( NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> < org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere > java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( org.springframework.data.mongodb.core.geo.Query , org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GeoJsonPoint org.springframework.data.mongodb.core.geo.GeoJsonPoint = new GeoJsonPoint ( - NUMBER , NUMBER ) ; Query org.springframework.data.mongodb.core.geo.Query = query ( where ( STRING ) . nearSphere ( org.springframework.data.mongodb.core.geo.GeoJsonPoint ) . maxDistance ( NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> < org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere > java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( org.springframework.data.mongodb.core.geo.Query , org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = new org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ( ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String = STRING ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonPoint = new GeoJsonPoint ( NUMBER , NUMBER ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . save ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = org.springframework.data.mongodb.core.geo.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonPoint , equalTo ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonPoint ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = new org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ( ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String = STRING ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonPolygon = new GeoJsonPolygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . save ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = org.springframework.data.mongodb.core.geo.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonPolygon , equalTo ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonPolygon ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = new org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ( ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String = STRING ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonLineString = new GeoJsonLineString ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . save ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = org.springframework.data.mongodb.core.geo.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonLineString , equalTo ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonLineString ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = new org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ( ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String = STRING ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonMultiLineString = new GeoJsonMultiLineString ( java.util.Arrays . java.util.List<T> ( new GeoJsonLineString ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) , new GeoJsonLineString ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . save ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = org.springframework.data.mongodb.core.geo.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonMultiLineString , equalTo ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonMultiLineString ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = new org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ( ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String = STRING ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonMultiPoint = new GeoJsonMultiPoint ( java.util.Arrays . java.util.List ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . save ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = org.springframework.data.mongodb.core.geo.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonMultiPoint , equalTo ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonMultiPoint ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = new org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ( ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String = STRING ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonMultiPolygon = new GeoJsonMultiPolygon ( java.util.Arrays . java.util.List<T> ( new GeoJsonPolygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . save ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = org.springframework.data.mongodb.core.geo.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonMultiPolygon , equalTo ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonMultiPolygon ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = new org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ( ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String = STRING ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonGeometryCollection = new GeoJsonGeometryCollection ( java.util.Arrays .< GeoJson < ? > > java.util.List ( new GeoJsonPoint ( NUMBER , NUMBER ) , new GeoJsonPolygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . save ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType ) ; org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType = org.springframework.data.mongodb.core.geo.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . java.lang.String ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) ; assertThat ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonGeometryCollection , equalTo ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType . org.springframework.data.mongodb.core.geo.GeoJsonGeometryCollection ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.core.geo.Point = new GeoJsonPoint ( - NUMBER , NUMBER ) ; java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> < org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere > java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( query ( where ( STRING ) . near ( org.springframework.data.mongodb.core.geo.Point ) . minDistance ( NUMBER ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.core.geo.Point = new GeoJsonPoint ( - NUMBER , NUMBER ) ; java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> < org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere > java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( query ( where ( STRING ) . nearSphere ( org.springframework.data.mongodb.core.geo.Point ) . minDistance ( NUMBER ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GeoJsonPoint org.springframework.data.mongodb.core.geo.GeoJsonPoint = new GeoJsonPoint ( - NUMBER , NUMBER ) ; Query org.springframework.data.mongodb.core.geo.Query = query ( where ( STRING ) . near ( org.springframework.data.mongodb.core.geo.GeoJsonPoint ) . minDistance ( NUMBER ) . maxDistance ( NUMBER ) ) ; java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> < org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere > java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> = org.springframework.data.mongodb.core.geo.MongoTemplate . find ( org.springframework.data.mongodb.core.geo.Query , org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.mongodb.core.geo.MongoTemplate . execute ( org.springframework.data.mongodb.core.geo.MongoTemplate . getCollectionName ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) , new CollectionCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> ) throws org.springframework.data.mongodb.core.geo.MongoException , org.springframework.data.mongodb.core.geo.DataAccessException { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , STRING ) ; org.bson.Document . put ( STRING , new BasicDbListBuilder ( ) . add ( NUMBER ) . add ( NUMBER ) . get ( ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . append ( STRING , STRING ) ; org.bson.Document . append ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> . insertOne ( org.bson.Document ) ; return org.bson.Document ; } } ) ; assertThat ( org.springframework.data.mongodb.core.geo.MongoTemplate . findOne ( query ( where ( STRING ) . is ( STRING ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) . geoJsonPoint , is ( equalTo ( new GeoJsonPoint ( NUMBER , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> ) throws org.springframework.data.mongodb.core.geo.MongoException , org.springframework.data.mongodb.core.geo.DataAccessException { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , STRING ) ; org.bson.Document . put ( STRING , new BasicDbListBuilder ( ) . add ( NUMBER ) . add ( NUMBER ) . get ( ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . append ( STRING , STRING ) ; org.bson.Document . append ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> . insertOne ( org.bson.Document ) ; return org.bson.Document ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.mongodb.core.geo.MongoTemplate . execute ( org.springframework.data.mongodb.core.geo.MongoTemplate . getCollectionName ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) , new CollectionCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> ) throws org.springframework.data.mongodb.core.geo.MongoException , org.springframework.data.mongodb.core.geo.DataAccessException { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , STRING ) ; org.bson.Document . put ( STRING , new BasicDbListBuilder ( ) . add ( new BasicDbListBuilder ( ) . add ( NUMBER ) . add ( NUMBER ) . get ( ) ) . add ( new BasicDbListBuilder ( ) . add ( NUMBER ) . add ( NUMBER ) . get ( ) ) . get ( ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . append ( STRING , STRING ) ; org.bson.Document . append ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> . insertOne ( org.bson.Document ) ; return org.bson.Document ; } } ) ; assertThat ( org.springframework.data.mongodb.core.geo.MongoTemplate . findOne ( query ( where ( STRING ) . is ( STRING ) ) , org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) . geoJsonLineString , is ( equalTo ( new GeoJsonLineString ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> ) throws org.springframework.data.mongodb.core.geo.MongoException , org.springframework.data.mongodb.core.geo.DataAccessException { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , STRING ) ; org.bson.Document . put ( STRING , new BasicDbListBuilder ( ) . add ( new BasicDbListBuilder ( ) . add ( NUMBER ) . add ( NUMBER ) . get ( ) ) . add ( new BasicDbListBuilder ( ) . add ( NUMBER ) . add ( NUMBER ) . get ( ) ) . get ( ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . append ( STRING , STRING ) ; org.bson.Document . append ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> . insertOne ( org.bson.Document ) ; return org.bson.Document ; }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . insert ( new org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere ( STRING , - NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { void ( ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . indexOps ( org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere .class ) . ensureIndex ( new GeospatialIndex ( STRING ) . typed ( GeoSpatialIndexType . GEO_2DSPHERE ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { try { org.springframework.data.mongodb.core.geo.MongoTemplate . indexOps ( org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere .class ) . dropIndex ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} }  <METHOD_END>
<METHOD_START> protected void void ( ) { org.springframework.data.mongodb.core.geo.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.geo.GeoJsonTests.Venue2DSphere .class ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.geo.GeoJsonTests.DocumentWithPropertyUsingGeoJsonType .class ) ; }  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( java.lang.String java.lang.String , double [] double[] ) { this . java.lang.String = java.lang.String ; this . double[] = double[] ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , double double , double double ) { this . java.lang.String = java.lang.String ; this . double[] = new double [] { double , double } ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public double [] double[] ( ) { return double[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String + STRING + java.lang.String + STRING + java.util.Arrays . java.lang.String ( double[] ) + STRING ; }  <METHOD_END>
