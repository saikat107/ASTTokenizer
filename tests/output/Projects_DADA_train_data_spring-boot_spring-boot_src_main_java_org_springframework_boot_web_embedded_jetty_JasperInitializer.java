<METHOD_START> void ( WebAppContext org.springframework.boot.web.embedded.jetty.WebAppContext ) { this . org.springframework.boot.web.embedded.jetty.WebAppContext = org.springframework.boot.web.embedded.jetty.WebAppContext ; this . org.springframework.boot.web.embedded.jetty.ServletContainerInitializer = org.springframework.boot.web.embedded.jetty.ServletContainerInitializer ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.jetty.ServletContainerInitializer org.springframework.boot.web.embedded.jetty.ServletContainerInitializer ( ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , null ) ; return ( ServletContainerInitializer ) java.lang.Class<> . newInstance ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { if ( this . org.springframework.boot.web.embedded.jetty.ServletContainerInitializer == null ) { return; } try { java.net.URL . void ( new org.springframework.boot.web.embedded.jetty.JasperInitializer.WarUrlStreamHandlerFactory ( ) ) ; } catch ( java.lang.Error java.lang.Error ) { } java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; try { java.lang.Thread . java.lang.Thread ( ) . void ( this . org.springframework.boot.web.embedded.jetty.WebAppContext . getClassLoader ( ) ) ; try { void ( true ) ; this . org.springframework.boot.web.embedded.jetty.ServletContainerInitializer . onStartup ( null , this . org.springframework.boot.web.embedded.jetty.WebAppContext . getServletContext ( ) ) ; } finally { void ( false ) ; } } finally { java.lang.Thread . java.lang.Thread ( ) . void ( java.lang.ClassLoader ) ; } }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { try { this . org.springframework.boot.web.embedded.jetty.WebAppContext . getServletContext ( ) . setExtendedListenerTypes ( boolean ) ; } catch ( java.lang.NoSuchMethodError java.lang.NoSuchMethodError ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URLStreamHandler java.net.URLStreamHandler ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return new org.springframework.boot.web.embedded.jetty.JasperInitializer.WarUrlStreamHandler ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.net.URL java.net.URL , java.lang.String java.lang.String , int int , int int ) { java.lang.String java.lang.String = STRING + java.lang.String . java.lang.String ( STRING . int ( ) ) ; int int = java.lang.String . int ( STRING ) ; if ( int >= NUMBER ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) + STRING + java.lang.String . java.lang.String ( int + NUMBER ) ; } void ( java.net.URL , java.net.URL . java.lang.String ( ) , STRING , - NUMBER , null , null , java.lang.String , null , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.net.URLConnection java.net.URLConnection ( java.net.URL java.net.URL ) throws java.io.IOException { return new org.springframework.boot.web.embedded.jetty.JasperInitializer.WarURLConnection ( java.net.URL ) ; }  <METHOD_END>
<METHOD_START> protected void ( java.net.URL java.net.URL ) throws java.io.IOException { super( java.net.URL ); this . java.net.URLConnection = new java.net.URL ( java.net.URL . java.lang.String ( ) ) . java.net.URLConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { if ( ! this . boolean ) { this . java.net.URLConnection . void ( ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { void ( ) ; return this . java.net.URLConnection . java.io.InputStream ( ) ; }  <METHOD_END>
