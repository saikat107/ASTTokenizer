<METHOD_START> public void ( ConfigurableListableBeanFactory org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) { super( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ); this . messageHandlerAttributes . addAll ( java.util.Arrays .< java.lang.String > java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.annotation.MessageHandler org.springframework.integration.config.annotation.MessageHandler ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> ) { AbstractReplyProducingMessageHandler org.springframework.integration.config.annotation.AbstractReplyProducingMessageHandler ; if ( AnnotatedElementUtils . isAnnotated ( java.lang.reflect.Method , Bean .class . java.lang.String ( ) ) ) { final java.lang.Object java.lang.Object = this . resolveTargetBeanFromMethodWithBeanAnnotation ( java.lang.reflect.Method ) ; org.springframework.integration.config.annotation.AbstractReplyProducingMessageHandler = this . extractTypeIfPossible ( java.lang.Object , AbstractReplyProducingMessageHandler .class ) ; if ( org.springframework.integration.config.annotation.AbstractReplyProducingMessageHandler == null ) { if ( java.lang.Object instanceof MessageHandler ) { return new org.springframework.integration.config.annotation.ServiceActivatorAnnotationPostProcessor.ReplyProducingMessageHandlerWrapper ( ( MessageHandler ) java.lang.Object ) ; } else { org.springframework.integration.config.annotation.AbstractReplyProducingMessageHandler = new ServiceActivatingHandler ( java.lang.Object ) ; } } else { checkMessageHandlerAttributes ( resolveTargetBeanName ( java.lang.reflect.Method ) , java.util.List<java.lang.annotation.Annotation> ) ; return ( MessageHandler ) java.lang.Object ; } } else { org.springframework.integration.config.annotation.AbstractReplyProducingMessageHandler = new ServiceActivatingHandler ( java.lang.Object , java.lang.reflect.Method ) ; } java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.annotation.AbstractReplyProducingMessageHandler . setRequiresReply ( java.lang.Boolean . boolean ( this . beanFactory . resolveEmbeddedValue ( java.lang.String ) ) ) ; } this . setOutputChannelIfPresent ( java.util.List<java.lang.annotation.Annotation> , org.springframework.integration.config.annotation.AbstractReplyProducingMessageHandler ) ; return org.springframework.integration.config.annotation.AbstractReplyProducingMessageHandler ; }  <METHOD_END>
<METHOD_START> void ( MessageHandler org.springframework.integration.config.annotation.MessageHandler ) { this . org.springframework.integration.config.annotation.MessageHandler = org.springframework.integration.config.annotation.MessageHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.annotation.Message<?> ) { this . org.springframework.integration.config.annotation.MessageHandler . handleMessage ( org.springframework.integration.config.annotation.Message<> ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.config.annotation.MessageHandler instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.config.annotation.MessageHandler ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.config.annotation.MessageHandler instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.config.annotation.MessageHandler ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! ( this . org.springframework.integration.config.annotation.MessageHandler instanceof Lifecycle ) || ( ( Lifecycle ) this . org.springframework.integration.config.annotation.MessageHandler ) . isRunning ( ) ; }  <METHOD_END>
