<METHOD_START> public void ( BasicMessageGroupStore org.springframework.integration.store.BasicMessageGroupStore , java.lang.Object java.lang.Object ) { this( org.springframework.integration.store.BasicMessageGroupStore , java.lang.Object , int , new java.util.concurrent.locks.ReentrantLock ( true ) ); }  <METHOD_END>
<METHOD_START> public void ( BasicMessageGroupStore org.springframework.integration.store.BasicMessageGroupStore , java.lang.Object java.lang.Object , int int ) { this( org.springframework.integration.store.BasicMessageGroupStore , java.lang.Object , int , new java.util.concurrent.locks.ReentrantLock ( true ) ); }  <METHOD_END>
<METHOD_START> public void ( BasicMessageGroupStore org.springframework.integration.store.BasicMessageGroupStore , java.lang.Object java.lang.Object , java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock ) { this( org.springframework.integration.store.BasicMessageGroupStore , java.lang.Object , int , java.util.concurrent.locks.Lock ); }  <METHOD_END>
<METHOD_START> public void ( BasicMessageGroupStore org.springframework.integration.store.BasicMessageGroupStore , java.lang.Object java.lang.Object , int int , java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock ) { Assert . isTrue ( int > NUMBER , STRING ) ; Assert . notNull ( java.util.concurrent.locks.Lock , STRING ) ; Assert . notNull ( org.springframework.integration.store.BasicMessageGroupStore , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; this . java.util.concurrent.locks.Lock = java.util.concurrent.locks.Lock ; this . java.util.concurrent.locks.Condition = this . java.util.concurrent.locks.Lock . java.util.concurrent.locks.Condition ( ) ; this . java.util.concurrent.locks.Condition = this . java.util.concurrent.locks.Lock . java.util.concurrent.locks.Condition ( ) ; this . org.springframework.integration.store.BasicMessageGroupStore = org.springframework.integration.store.BasicMessageGroupStore ; this . java.lang.Object = java.lang.Object ; this . int = int ; if ( this . org.springframework.integration.store.Log . isWarnEnabled ( ) && ! ( org.springframework.integration.store.BasicMessageGroupStore instanceof ChannelMessageStore ) ) { this . org.springframework.integration.store.Log . warn ( org.springframework.integration.store.BasicMessageGroupStore . getClass ( ) . getSimpleName ( ) + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { if ( boolean ) { Assert . isInstanceOf ( PriorityCapableChannelMessageStore .class , this . org.springframework.integration.store.BasicMessageGroupStore ) ; Assert . isTrue ( ( ( PriorityCapableChannelMessageStore ) this . org.springframework.integration.store.BasicMessageGroupStore ) . isPriorityEnabled ( ) , STRING ) ; } else { if ( this . org.springframework.integration.store.Log . isWarnEnabled ( ) && this . org.springframework.integration.store.BasicMessageGroupStore instanceof PriorityCapableChannelMessageStore && ( ( PriorityCapableChannelMessageStore ) this . org.springframework.integration.store.BasicMessageGroupStore ) . isPriorityEnabled ( ) ) { this . org.springframework.integration.store.Log . warn ( STRING + STRING + STRING + STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.integration.store.Message<?>> < Message < ? > > java.util.Iterator<org.springframework.integration.store.Message<?>> ( ) { return java.util.Collection<org.springframework.integration.store.Message<?>> ( ) . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.store.BasicMessageGroupStore . messageGroupSize ( this . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.store.Message<?> < ? > org.springframework.integration.store.Message<?> ( ) { Message < ? > org.springframework.integration.store.Message<?> = null ; final java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . java.util.concurrent.locks.Lock ; try { java.util.concurrent.locks.Lock . void ( ) ; try { java.util.Collection<org.springframework.integration.store.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.store.Message<?>> = java.util.Collection<org.springframework.integration.store.Message<?>> ( ) ; if ( ! java.util.Collection<org.springframework.integration.store.Message<?>> . isEmpty ( ) ) { org.springframework.integration.store.Message<?> = java.util.Collection<org.springframework.integration.store.Message<?>> . iterator ( ) . next ( ) ; } } finally { java.util.concurrent.locks.Lock . void ( ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } return org.springframework.integration.store.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.store.Message<?> < ? > org.springframework.integration.store.Message<?> ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException { Message < ? > org.springframework.integration.store.Message<?> = null ; long long = java.util.concurrent.TimeUnit . long ( long ) ; final java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . java.util.concurrent.locks.Lock ; java.util.concurrent.locks.Lock . void ( ) ; try { while ( this . int ( ) == NUMBER && long > NUMBER ) { long = this . java.util.concurrent.locks.Condition . long ( long ) ; } org.springframework.integration.store.Message<?> = this . org.springframework.integration.store.Message<?> ( ) ; } finally { java.util.concurrent.locks.Lock . void ( ) ; } return org.springframework.integration.store.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.store.Message<?> < ? > org.springframework.integration.store.Message<?> ( ) { Message < ? > org.springframework.integration.store.Message<?> = null ; final java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . java.util.concurrent.locks.Lock ; try { java.util.concurrent.locks.Lock . void ( ) ; try { org.springframework.integration.store.Message<?> = this . org.springframework.integration.store.Message<?> ( ) ; } finally { java.util.concurrent.locks.Lock . void ( ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } return org.springframework.integration.store.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.util.Collection<? super org.springframework.integration.store.Message<?>> < ? super Message < ? > > java.util.Collection<? super org.springframework.integration.store.Message<?>> ) { return this . int ( java.util.Collection<> , java.lang.Integer . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.util.Collection<? super org.springframework.integration.store.Message<?>> < ? super Message < ? > > java.util.Collection<? super org.springframework.integration.store.Message<?>> , int int ) { Assert . notNull ( java.util.Collection<> , STRING ) ; int int = java.util.Collection<> . int ( ) ; java.util.ArrayList<org.springframework.integration.store.Message<?>> < Message < ? > > java.util.ArrayList<org.springframework.integration.store.Message<?>> = new java.util.ArrayList<org.springframework.integration.store.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . java.util.concurrent.locks.Lock ; try { java.util.concurrent.locks.Lock . void ( ) ; try { Message < ? > org.springframework.integration.store.Message<?> = this . org.springframework.integration.store.BasicMessageGroupStore . pollMessageFromGroup ( this . java.lang.Object ) ; for ( int int = NUMBER ; int < int && org.springframework.integration.store.Message<> != null ; int ++ ) { java.util.ArrayList<org.springframework.integration.store.Message<?>> . add ( org.springframework.integration.store.Message<> ) ; org.springframework.integration.store.Message<?> = this . org.springframework.integration.store.BasicMessageGroupStore . pollMessageFromGroup ( this . java.lang.Object ) ; } this . java.util.concurrent.locks.Condition . void ( ) ; } finally { java.util.concurrent.locks.Lock . void ( ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { this . org.springframework.integration.store.Log . warn ( STRING , java.lang.InterruptedException ) ; java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } java.util.Collection<> . boolean ( java.util.ArrayList<org.springframework.integration.store.Message<?>> ) ; return java.util.Collection<> . int ( ) - int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.store.Message<?> ) { boolean boolean = true ; final java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . java.util.concurrent.locks.Lock ; try { java.util.concurrent.locks.Lock . void ( ) ; try { boolean = this . boolean ( org.springframework.integration.store.Message<> ) ; } finally { java.util.concurrent.locks.Lock . void ( ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.store.Message<?> , long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException { long long = java.util.concurrent.TimeUnit . long ( long ) ; boolean boolean = false ; final java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . java.util.concurrent.locks.Lock ; java.util.concurrent.locks.Lock . void ( ) ; try { if ( this . int != java.lang.Integer . int ) { while ( this . int ( ) == this . int && long > NUMBER ) { long = this . java.util.concurrent.locks.Condition . long ( long ) ; } } if ( long > NUMBER ) { boolean = this . boolean ( org.springframework.integration.store.Message<> ) ; } } finally { java.util.concurrent.locks.Lock . void ( ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.store.Message<?> ) throws java.lang.InterruptedException { final java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . java.util.concurrent.locks.Lock ; java.util.concurrent.locks.Lock . void ( ) ; try { if ( this . int != java.lang.Integer . int ) { while ( this . int ( ) == this . int ) { this . java.util.concurrent.locks.Condition . void ( ) ; } } this . boolean ( org.springframework.integration.store.Message<> ) ; } finally { java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { if ( this . int == java.lang.Integer . int ) { return java.lang.Integer . int ; } return this . int - this . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.store.Message<?> < ? > org.springframework.integration.store.Message<?> ( ) java.lang.InterruptedException { Message < ? > org.springframework.integration.store.Message<?> = null ; final java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = this . java.util.concurrent.locks.Lock ; java.util.concurrent.locks.Lock . void ( ) ; try { while ( this . int ( ) == NUMBER ) { this . java.util.concurrent.locks.Condition . void ( ) ; } org.springframework.integration.store.Message<?> = this . org.springframework.integration.store.Message<?> ( ) ; } finally { java.util.concurrent.locks.Lock . void ( ) ; } return org.springframework.integration.store.Message<> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.integration.store.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.store.Message<?>> ( ) { return this . org.springframework.integration.store.BasicMessageGroupStore . getMessageGroup ( this . java.lang.Object ) . getMessages ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.store.Message<?> < ? > org.springframework.integration.store.Message<?> ( ) { Message < ? > org.springframework.integration.store.Message<?> = this . org.springframework.integration.store.BasicMessageGroupStore . pollMessageFromGroup ( this . java.lang.Object ) ; this . java.util.concurrent.locks.Condition . void ( ) ; return org.springframework.integration.store.Message<> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Message < ? > org.springframework.integration.store.Message<?> ) { boolean boolean = false ; if ( this . int == java.lang.Integer . int || this . int ( ) < this . int ) { this . org.springframework.integration.store.BasicMessageGroupStore . addMessageToGroup ( this . java.lang.Object , org.springframework.integration.store.Message<> ) ; boolean = true ; this . java.util.concurrent.locks.Condition . void ( ) ; } return boolean ; }  <METHOD_END>
