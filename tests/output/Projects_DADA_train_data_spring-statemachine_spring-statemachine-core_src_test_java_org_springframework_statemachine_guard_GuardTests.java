<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.statemachine.guard.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.statemachine.guard.GuardTests.Config1 .class ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> = org.springframework.statemachine.guard.AnnotationConfigApplicationContext . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; TestGuard org.springframework.statemachine.guard.TestGuard = org.springframework.statemachine.guard.AnnotationConfigApplicationContext . getBean ( STRING , TestGuard .class ) ; TestAction org.springframework.statemachine.guard.TestAction = org.springframework.statemachine.guard.AnnotationConfigApplicationContext . getBean ( STRING , TestAction .class ) ; assertThat ( org.springframework.statemachine.guard.TestGuard , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.guard.TestAction , notNullValue ( ) ) ; org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . start ( ) ; org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( testGuard . onEvaluateLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( testAction . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.guard.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.statemachine.guard.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.statemachine.guard.GuardTests.Config2 .class ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> = org.springframework.statemachine.guard.AnnotationConfigApplicationContext . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; TestGuard org.springframework.statemachine.guard.TestGuard = org.springframework.statemachine.guard.AnnotationConfigApplicationContext . getBean ( STRING , TestGuard .class ) ; TestAction org.springframework.statemachine.guard.TestAction = org.springframework.statemachine.guard.AnnotationConfigApplicationContext . getBean ( STRING , TestAction .class ) ; assertThat ( org.springframework.statemachine.guard.TestGuard , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.guard.TestAction , notNullValue ( ) ) ; org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( testGuard . onEvaluateLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( testAction . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.guard.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.statemachine.guard.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.statemachine.guard.GuardTests.Config3 .class ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> = org.springframework.statemachine.guard.AnnotationConfigApplicationContext . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.guard.ObjectStateMachine<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 ) ) ; org.springframework.statemachine.guard.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.guard.StateMachineStateConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.guard.StateMachineStateConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.guard.StateMachineTransitionConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.guard.StateMachineTransitionConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . action ( org.springframework.statemachine.guard.TestAction ( ) ) . guard ( org.springframework.statemachine.guard.TestGuard ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.guard.TestAction org.springframework.statemachine.guard.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.guard.TestGuard org.springframework.statemachine.guard.TestGuard ( ) { return new TestGuard ( true ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.guard.TaskExecutor org.springframework.statemachine.guard.TaskExecutor ( ) { return new SyncTaskExecutor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.guard.StateMachineStateConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.guard.StateMachineStateConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.guard.StateMachineTransitionConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.guard.StateMachineTransitionConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . action ( org.springframework.statemachine.guard.TestAction ( ) ) . guard ( org.springframework.statemachine.guard.TestGuard ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.guard.TestGuard org.springframework.statemachine.guard.TestGuard ( ) { return new TestGuard ( false ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.guard.TestAction org.springframework.statemachine.guard.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.guard.TaskExecutor org.springframework.statemachine.guard.TaskExecutor ( ) { return new SyncTaskExecutor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.guard.StateMachineStateConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.guard.StateMachineStateConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.guard.StateMachineTransitionConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.guard.StateMachineTransitionConfigurer<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . guard ( org.springframework.statemachine.guard.Guard<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ( ) ) . and ( ) . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E2 ) . guard ( org.springframework.statemachine.guard.Guard<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ( ) ) . and ( ) . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E3 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.guard.Guard<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.guard.Guard<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ( ) { return new Guard < TestStates , TestEvents > ( ) { @ java.lang.Override public boolean boolean ( StateContext < TestStates , TestEvents > org.springframework.statemachine.guard.StateContext<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < TestStates , TestEvents > org.springframework.statemachine.guard.StateContext<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.guard.Guard<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.guard.Guard<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ( ) { return new Guard < TestStates , TestEvents > ( ) { @ java.lang.Override public boolean boolean ( StateContext < TestStates , TestEvents > org.springframework.statemachine.guard.StateContext<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) { throw new java.lang.Error ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < TestStates , TestEvents > org.springframework.statemachine.guard.StateContext<org.springframework.statemachine.guard.TestStates,org.springframework.statemachine.guard.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
