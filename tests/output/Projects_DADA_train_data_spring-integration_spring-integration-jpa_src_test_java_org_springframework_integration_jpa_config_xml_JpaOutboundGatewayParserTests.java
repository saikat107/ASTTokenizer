<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests> ( ) , STRING ) ; final AbstractMessageChannel org.springframework.integration.jpa.config.xml.AbstractMessageChannel = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , AbstractMessageChannel .class ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.AbstractMessageChannel . getComponentName ( ) ) ; final JpaOutboundGateway org.springframework.integration.jpa.config.xml.JpaOutboundGateway = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , JpaOutboundGateway .class ) ; final OutboundGatewayType org.springframework.integration.jpa.config.xml.OutboundGatewayType = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaOutboundGateway , STRING , OutboundGatewayType .class ) ; assertEquals ( OutboundGatewayType . RETRIEVING , org.springframework.integration.jpa.config.xml.OutboundGatewayType ) ; long long = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaOutboundGateway , STRING , java.lang.Long .class ) ; assertEquals ( NUMBER , long ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaOutboundGateway , STRING , java.lang.Boolean .class ) ) ; final JpaExecutor org.springframework.integration.jpa.config.xml.JpaExecutor = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , JpaExecutor .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.JpaExecutor ) ; final java.lang.Class<?> < ? > java.lang.Class<?> = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.Class .class ) ; assertEquals ( STRING , java.lang.Class<> . java.lang.String ( ) ) ; final JpaOperations org.springframework.integration.jpa.config.xml.JpaOperations = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , JpaOperations .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.JpaOperations ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.Boolean .class ) ) ; final LiteralExpression org.springframework.integration.jpa.config.xml.LiteralExpression = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , LiteralExpression .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.LiteralExpression ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.LiteralExpression , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.Boolean .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests> ( ) , STRING ) ; final JpaOutboundGateway org.springframework.integration.jpa.config.xml.JpaOutboundGateway = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , JpaOutboundGateway .class ) ; Expression org.springframework.integration.jpa.config.xml.Expression = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaOutboundGateway , STRING , Expression .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.Expression ) ; assertEquals ( LiteralExpression .class , org.springframework.integration.jpa.config.xml.Expression . getClass ( ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.Expression , STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests> ( ) , STRING ) ; final JpaOutboundGateway org.springframework.integration.jpa.config.xml.JpaOutboundGateway = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , JpaOutboundGateway .class ) ; Expression org.springframework.integration.jpa.config.xml.Expression = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaOutboundGateway , STRING , Expression .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.Expression ) ; assertEquals ( SpelExpression .class , org.springframework.integration.jpa.config.xml.Expression . getClass ( ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.Expression , STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests> ( ) , STRING ) ; final JpaOutboundGateway org.springframework.integration.jpa.config.xml.JpaOutboundGateway = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , JpaOutboundGateway .class ) ; Expression org.springframework.integration.jpa.config.xml.Expression = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaOutboundGateway , STRING , Expression .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.Expression ) ; assertEquals ( SpelExpression .class , org.springframework.integration.jpa.config.xml.Expression . getClass ( ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.Expression , STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests> ( ) , STRING ) ; final AbstractMessageChannel org.springframework.integration.jpa.config.xml.AbstractMessageChannel = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , AbstractMessageChannel .class ) ; assertEquals ( STRING , org.springframework.integration.jpa.config.xml.AbstractMessageChannel . getComponentName ( ) ) ; final JpaOutboundGateway org.springframework.integration.jpa.config.xml.JpaOutboundGateway = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , JpaOutboundGateway .class ) ; final OutboundGatewayType org.springframework.integration.jpa.config.xml.OutboundGatewayType = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaOutboundGateway , STRING , OutboundGatewayType .class ) ; assertEquals ( OutboundGatewayType . UPDATING , org.springframework.integration.jpa.config.xml.OutboundGatewayType ) ; long long = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaOutboundGateway , STRING , java.lang.Long .class ) ; assertEquals ( NUMBER , long ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaOutboundGateway , STRING , java.lang.Boolean .class ) ) ; final JpaExecutor org.springframework.integration.jpa.config.xml.JpaExecutor = TestUtils . getPropertyValue ( this . org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , JpaExecutor .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.JpaExecutor ) ; final java.lang.Class<?> < ? > java.lang.Class<?> = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.Class .class ) ; assertEquals ( STRING , java.lang.Class<> . java.lang.String ( ) ) ; final JpaOperations org.springframework.integration.jpa.config.xml.JpaOperations = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , JpaOperations .class ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.JpaOperations ) ; final java.lang.Boolean java.lang.Boolean = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.Boolean .class ) ; assertTrue ( java.lang.Boolean ) ; final java.lang.Integer java.lang.Integer = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaOutboundGateway , STRING , java.lang.Integer .class ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; final PersistMode org.springframework.integration.jpa.config.xml.PersistMode = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , PersistMode .class ) ; assertEquals ( PersistMode . PERSIST , org.springframework.integration.jpa.config.xml.PersistMode ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.Integer .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.JpaExecutor , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests> ( ) , STRING ) ; EventDrivenConsumer org.springframework.integration.jpa.config.xml.EventDrivenConsumer = org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; MessageHandler org.springframework.integration.jpa.config.xml.MessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.jpa.config.xml.EventDrivenConsumer , STRING , MessageHandler .class ) ; org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests.FooAdvice org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests.FooAdvice = org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . getBean ( STRING , org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests.FooAdvice .class ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.integration.jpa.config.xml.MessageHandler ) ) ; try { org.springframework.integration.jpa.config.xml.MessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.jpa.config.xml.MessagingException ) { assertTrue ( org.springframework.integration.jpa.config.xml.MessagingException instanceof ReplyRequiredException ) ; } Mockito . verify ( org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests.FooAdvice ) . doInvoke ( Mockito . any ( ExecutionCallback .class ) , Mockito . any ( java.lang.Object .class ) , Mockito . any ( Message .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests> ( ) ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . getBean ( STRING , JpaExecutor .class ) ) ; assertNotNull ( org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . getBean ( STRING , JpaExecutor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { this . org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.jpa.config.xml.JpaOutboundGatewayParserTests> ( ) ) ; } catch ( BeanDefinitionStoreException org.springframework.integration.jpa.config.xml.BeanDefinitionStoreException ) { assertTrue ( org.springframework.integration.jpa.config.xml.BeanDefinitionStoreException . getMessage ( ) . startsWith ( STRING ) ) ; return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext != null ) { org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<> ) ; org.springframework.integration.jpa.config.xml.EventDrivenConsumer = this . org.springframework.integration.jpa.config.xml.ConfigurableApplicationContext . getBean ( java.lang.String , EventDrivenConsumer .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.jpa.config.xml.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jpa.config.xml.Message<?> ) throws java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.jpa.config.xml.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jpa.config.xml.Message<?> ) throws java.lang.Exception { return null ; }  <METHOD_END>
