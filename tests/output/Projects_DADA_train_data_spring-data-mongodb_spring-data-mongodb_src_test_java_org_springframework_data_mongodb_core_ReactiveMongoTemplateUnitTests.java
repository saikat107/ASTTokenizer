<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.mongodb.core.SimpleReactiveMongoDatabaseFactory . getExceptionTranslator ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoExceptionTranslator ) ; this . org.springframework.data.mongodb.core.MongoMappingContext = new MongoMappingContext ( ) ; this . org.springframework.data.mongodb.core.MappingMongoConverter = new MappingMongoConverter ( new NoOpDbRefResolver ( ) , org.springframework.data.mongodb.core.MongoMappingContext ) ; this . org.springframework.data.mongodb.core.ReactiveMongoTemplate = new ReactiveMongoTemplate ( org.springframework.data.mongodb.core.SimpleReactiveMongoDatabaseFactory , org.springframework.data.mongodb.core.MappingMongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ReactiveMongoTemplate ( org.springframework.data.mongodb.core.MongoClient , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ReactiveMongoTemplate ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ReactiveMongoTemplate org.springframework.data.mongodb.core.ReactiveMongoTemplate = new ReactiveMongoTemplate ( org.springframework.data.mongodb.core.MongoClient , STRING ) ; assertTrue ( ReflectionTestUtils . getField ( org.springframework.data.mongodb.core.ReactiveMongoTemplate , STRING ) instanceof MappingMongoConverter ) ; }  <METHOD_END>
