<METHOD_START> @ Test public void void ( ) java.lang.Exception { final JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = new JpaExecutor ( mock ( EntityManager .class ) ) ; org.springframework.integration.jpa.core.JpaExecutor . afterPropertiesSet ( ) ; try { org.springframework.integration.jpa.core.JpaExecutor . poll ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { Assert . assertEquals ( STRING , STRING + STRING + STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; return; } Assert . fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaOperations org.springframework.integration.jpa.core.JpaOperations = null ; try { new JpaExecutor ( org.springframework.integration.jpa.core.JpaOperations ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { Assert . assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = new JpaExecutor ( mock ( EntityManager .class ) ) ; org.springframework.integration.jpa.core.JpaExecutor . setJpaQuery ( STRING ) ; Assert . assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.core.JpaExecutor , STRING , java.lang.String .class ) ) ; try { org.springframework.integration.jpa.core.JpaExecutor . setNamedQuery ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { Assert . assertEquals ( STRING + STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } Assert . assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.core.JpaExecutor , STRING ) ) ; try { org.springframework.integration.jpa.core.JpaExecutor . setNativeQuery ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { Assert . assertEquals ( STRING + STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } Assert . assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.core.JpaExecutor , STRING ) ) ; org.springframework.integration.jpa.core.JpaExecutor = new JpaExecutor ( mock ( EntityManager .class ) ) ; org.springframework.integration.jpa.core.JpaExecutor . setNamedQuery ( STRING ) ; Assert . assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.core.JpaExecutor , STRING , java.lang.String .class ) ) ; try { org.springframework.integration.jpa.core.JpaExecutor . setJpaQuery ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { Assert . assertEquals ( STRING + STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } Assert . assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.jpa.core.JpaExecutor , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { java.lang.String java.lang.String = STRING ; Message < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > org.springframework.integration.jpa.core.Message<java.util.Map<java.lang.String,java.lang.String>> = MessageBuilder . withPayload ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = org.springframework.integration.jpa.core.JpaExecutor ( java.lang.String ) ; StudentDomain org.springframework.integration.jpa.core.StudentDomain = ( StudentDomain ) org.springframework.integration.jpa.core.JpaExecutor . poll ( org.springframework.integration.jpa.core.Message<java.util.Map<java.lang.String,java.lang.String>> ) ; Assert . assertNotNull ( org.springframework.integration.jpa.core.StudentDomain ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jpa.core.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = org.springframework.integration.jpa.core.JpaExecutor ( java.lang.String ) ; StudentDomain org.springframework.integration.jpa.core.StudentDomain = ( StudentDomain ) org.springframework.integration.jpa.core.JpaExecutor . poll ( org.springframework.integration.jpa.core.Message<java.lang.String> ) ; Assert . assertNotNull ( org.springframework.integration.jpa.core.StudentDomain ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { java.lang.String java.lang.String = STRING ; Message < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > org.springframework.integration.jpa.core.Message<java.util.Map<java.lang.String,java.lang.String>> = MessageBuilder . withPayload ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . build ( ) ; JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = org.springframework.integration.jpa.core.JpaExecutor ( java.lang.String ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.integration.jpa.core.JpaExecutor . executeOutboundJpaOperation ( org.springframework.integration.jpa.core.Message<java.util.Map<java.lang.String,java.lang.String>> ) ; Assert . assertTrue ( NUMBER == java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jpa.core.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = org.springframework.integration.jpa.core.JpaExecutor ( java.lang.String ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.integration.jpa.core.JpaExecutor . executeOutboundJpaOperation ( org.springframework.integration.jpa.core.Message<java.lang.String> ) ; Assert . assertTrue ( NUMBER == java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jpa.core.JpaExecutor org.springframework.integration.jpa.core.JpaExecutor ( java.lang.String java.lang.String ) { JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.core.EntityManager ) ; ExpressionEvaluatingParameterSourceFactory org.springframework.integration.jpa.core.ExpressionEvaluatingParameterSourceFactory = new ExpressionEvaluatingParameterSourceFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jpa.core.ExpressionEvaluatingParameterSourceFactory . setParameters ( java.util.Collections . java.util.List ( new JpaParameter ( STRING , null , STRING ) ) ) ; org.springframework.integration.jpa.core.JpaExecutor . setParameterSourceFactory ( org.springframework.integration.jpa.core.ExpressionEvaluatingParameterSourceFactory ) ; org.springframework.integration.jpa.core.JpaExecutor . setJpaQuery ( java.lang.String ) ; org.springframework.integration.jpa.core.JpaExecutor . setExpectSingleResult ( true ) ; org.springframework.integration.jpa.core.JpaExecutor . setUsePayloadAsParameterSource ( false ) ; org.springframework.integration.jpa.core.JpaExecutor . afterPropertiesSet ( ) ; return org.springframework.integration.jpa.core.JpaExecutor ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jpa.core.JpaExecutor org.springframework.integration.jpa.core.JpaExecutor ( java.lang.String java.lang.String ) { JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.core.EntityManager ) ; ExpressionEvaluatingParameterSourceFactory org.springframework.integration.jpa.core.ExpressionEvaluatingParameterSourceFactory = new ExpressionEvaluatingParameterSourceFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jpa.core.ExpressionEvaluatingParameterSourceFactory . setParameters ( java.util.Collections . java.util.List ( new JpaParameter ( STRING , null , STRING ) ) ) ; org.springframework.integration.jpa.core.JpaExecutor . setParameterSourceFactory ( org.springframework.integration.jpa.core.ExpressionEvaluatingParameterSourceFactory ) ; org.springframework.integration.jpa.core.JpaExecutor . setJpaQuery ( java.lang.String ) ; org.springframework.integration.jpa.core.JpaExecutor . setExpectSingleResult ( true ) ; org.springframework.integration.jpa.core.JpaExecutor . setUsePayloadAsParameterSource ( true ) ; org.springframework.integration.jpa.core.JpaExecutor . afterPropertiesSet ( ) ; return org.springframework.integration.jpa.core.JpaExecutor ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.core.EntityManager ) ; org.springframework.integration.jpa.core.JpaExecutor . setJpaQuery ( STRING ) ; org.springframework.integration.jpa.core.JpaExecutor . setFirstResultExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.jpa.core.JpaExecutor . setBeanFactory ( this . org.springframework.integration.jpa.core.BeanFactory ) ; org.springframework.integration.jpa.core.JpaExecutor . afterPropertiesSet ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.integration.jpa.core.JpaExecutor . poll ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.core.EntityManager ) ; org.springframework.integration.jpa.core.JpaExecutor . setNativeQuery ( STRING ) ; org.springframework.integration.jpa.core.JpaExecutor . setFirstResultExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.jpa.core.JpaExecutor . setBeanFactory ( this . org.springframework.integration.jpa.core.BeanFactory ) ; org.springframework.integration.jpa.core.JpaExecutor . afterPropertiesSet ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.integration.jpa.core.JpaExecutor . poll ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.core.EntityManager ) ; org.springframework.integration.jpa.core.JpaExecutor . setNamedQuery ( STRING ) ; org.springframework.integration.jpa.core.JpaExecutor . setFirstResultExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.jpa.core.JpaExecutor . setBeanFactory ( this . org.springframework.integration.jpa.core.BeanFactory ) ; org.springframework.integration.jpa.core.JpaExecutor . afterPropertiesSet ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.integration.jpa.core.JpaExecutor . poll ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = new JpaExecutor ( org.springframework.integration.jpa.core.EntityManager ) ; org.springframework.integration.jpa.core.JpaExecutor . setEntityClass ( StudentDomain .class ) ; org.springframework.integration.jpa.core.JpaExecutor . setFirstResultExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.jpa.core.JpaExecutor . setBeanFactory ( this . org.springframework.integration.jpa.core.BeanFactory ) ; org.springframework.integration.jpa.core.JpaExecutor . afterPropertiesSet ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.integration.jpa.core.JpaExecutor . poll ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final JpaExecutor org.springframework.integration.jpa.core.JpaExecutor = new JpaExecutor ( mock ( EntityManager .class ) ) ; try { org.springframework.integration.jpa.core.JpaExecutor . setMaxResultsExpression ( null ) ; } catch ( java.lang.Exception java.lang.Exception ) { Assert . assertEquals ( STRING , java.lang.Exception . java.lang.String ( ) ) ; return; } Assert . fail ( STRING ) ; }  <METHOD_END>
