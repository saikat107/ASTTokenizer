<METHOD_START> @ Parameters public static java.util.Collection<java.lang.Number[]> < java.lang.Number [] > java.util.Collection<java.lang.Number[]> ( ) { java.lang.Number [] java.lang.Number[] = new java.lang.Number [] { new java.lang.Long ( NUMBER ) , new java.lang.Integer ( NUMBER ) } ; java.lang.Number [] java.lang.Number[] = new java.lang.Number [] { new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) , new java.lang.Integer ( NUMBER ) } ; java.lang.Number [] java.lang.Number[] = new java.lang.Number [] { new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) , new java.lang.Double ( NUMBER ) } ; java.lang.Number [] java.lang.Number[] = new java.lang.Number [] { new java.util.concurrent.atomic.AtomicLong ( NUMBER ) , new java.lang.Integer ( NUMBER ) } ; java.lang.Number [] java.lang.Number[] = new java.lang.Number [] { new java.util.concurrent.atomic.AtomicLong ( NUMBER ) , new java.lang.Long ( NUMBER ) } ; return java.util.Arrays .< java.lang.Number [] > java.util.List<java.lang.Number[]> ( java.lang.Number[] , java.lang.Number[] , java.lang.Number[] , java.lang.Number[] , java.lang.Number[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( NumberToNumberConverterFactory . INSTANCE . getConverter ( java.lang.Number . java.lang.Class<? extends java.lang.Number> ( ) ) . convert ( java.lang.Number ) , is ( java.lang.Number ) ) ; }  <METHOD_END>
