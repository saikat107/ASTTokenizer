<METHOD_START> protected abstract org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerCflowAspect ( ) , STRING ) ) ; fail ( STRING ) ; } catch ( AopConfigException org.springframework.aop.aspectj.annotation.AopConfigException ) { assertTrue ( org.springframework.aop.aspectj.annotation.AopConfigException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerCflowBelowAspect ( ) , STRING ) ) ; fail ( STRING ) ; } catch ( AopConfigException org.springframework.aop.aspectj.annotation.AopConfigException ) { assertTrue ( org.springframework.aop.aspectj.annotation.AopConfigException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; int int = NUMBER ; org.springframework.aop.aspectj.annotation.TestBean . setAge ( int ) ; TestBean org.springframework.aop.aspectj.annotation.TestBean = ( TestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new PerTargetAspect ( ) , STRING ) ) , TestBean .class ) ; assertEquals ( STRING , int , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; Advised org.springframework.aop.aspectj.annotation.Advised = ( Advised ) org.springframework.aop.aspectj.annotation.TestBean ; SyntheticInstantiationAdvisor org.springframework.aop.aspectj.annotation.SyntheticInstantiationAdvisor = ( SyntheticInstantiationAdvisor ) org.springframework.aop.aspectj.annotation.Advised . getAdvisors ( ) [ NUMBER ] ; assertTrue ( org.springframework.aop.aspectj.annotation.SyntheticInstantiationAdvisor . getPointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , null ) ) ; InstantiationModelAwarePointcutAdvisorImpl org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl = ( InstantiationModelAwarePointcutAdvisorImpl ) org.springframework.aop.aspectj.annotation.Advised . getAdvisors ( ) [ NUMBER ] ; LazySingletonAspectInstanceFactoryDecorator org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator = ( LazySingletonAspectInstanceFactoryDecorator ) org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getAspectInstanceFactory ( ) ; assertFalse ( org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator . isMaterialized ( ) ) ; assertTrue ( org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator . getAspectMetadata ( ) . getPerClausePointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , null ) ) ; assertNotSame ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getDeclaredPointcut ( ) , org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getPointcut ( ) ) ; org.springframework.aop.aspectj.annotation.TestBean . getSpouse ( ) ; assertTrue ( org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator . isMaterialized ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; int int = NUMBER ; org.springframework.aop.aspectj.annotation.TestBean . setAge ( int ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> = new java.util.LinkedList<org.springframework.aop.aspectj.annotation.Advisor> <> ( ) ; PerTargetAspect org.springframework.aop.aspectj.annotation.PerTargetAspect = new PerTargetAspect ( ) ; aspect1 . count = NUMBER ; org.springframework.aop.aspectj.annotation.PerTargetAspect . setOrder ( NUMBER ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . addAll ( org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( org.springframework.aop.aspectj.annotation.PerTargetAspect , STRING ) ) ) ; PerTargetAspect org.springframework.aop.aspectj.annotation.PerTargetAspect = new PerTargetAspect ( ) ; org.springframework.aop.aspectj.annotation.PerTargetAspect . setOrder ( NUMBER ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . addAll ( org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( org.springframework.aop.aspectj.annotation.PerTargetAspect , STRING ) ) ) ; java.util.Collections . void ( java.util.List<org.springframework.aop.aspectj.annotation.Advisor> , new OrderComparator ( ) ) ; TestBean org.springframework.aop.aspectj.annotation.TestBean = ( TestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> , TestBean .class ) ; assertEquals ( STRING , int , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; org.springframework.aop.aspectj.annotation.TestBean . getSpouse ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; int int = NUMBER ; org.springframework.aop.aspectj.annotation.TestBean . setAge ( int ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> = new java.util.LinkedList<org.springframework.aop.aspectj.annotation.Advisor> <> ( ) ; org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTargetAspectWithOrderAnnotation10 org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTargetAspectWithOrderAnnotation10 = new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTargetAspectWithOrderAnnotation10 ( ) ; org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTargetAspectWithOrderAnnotation10 . int = NUMBER ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . addAll ( org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTargetAspectWithOrderAnnotation10 , STRING ) ) ) ; org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTargetAspectWithOrderAnnotation5 org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTargetAspectWithOrderAnnotation5 = new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTargetAspectWithOrderAnnotation5 ( ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . addAll ( org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTargetAspectWithOrderAnnotation5 , STRING ) ) ) ; java.util.Collections . void ( java.util.List<org.springframework.aop.aspectj.annotation.Advisor> , new OrderComparator ( ) ) ; TestBean org.springframework.aop.aspectj.annotation.TestBean = ( TestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> , TestBean .class ) ; assertEquals ( STRING , int , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; org.springframework.aop.aspectj.annotation.TestBean . getSpouse ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; int int = NUMBER ; org.springframework.aop.aspectj.annotation.TestBean . setAge ( int ) ; TestBean org.springframework.aop.aspectj.annotation.TestBean = ( TestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.PerThisAspect ( ) , STRING ) ) , TestBean .class ) ; assertEquals ( STRING , int , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; Advised org.springframework.aop.aspectj.annotation.Advised = ( Advised ) org.springframework.aop.aspectj.annotation.TestBean ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.Advised . getAdvisors ( ) . length ) ; SyntheticInstantiationAdvisor org.springframework.aop.aspectj.annotation.SyntheticInstantiationAdvisor = ( SyntheticInstantiationAdvisor ) org.springframework.aop.aspectj.annotation.Advised . getAdvisors ( ) [ NUMBER ] ; assertTrue ( org.springframework.aop.aspectj.annotation.SyntheticInstantiationAdvisor . getPointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , null ) ) ; InstantiationModelAwarePointcutAdvisorImpl org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl = ( InstantiationModelAwarePointcutAdvisorImpl ) org.springframework.aop.aspectj.annotation.Advised . getAdvisors ( ) [ NUMBER ] ; LazySingletonAspectInstanceFactoryDecorator org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator = ( LazySingletonAspectInstanceFactoryDecorator ) org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getAspectInstanceFactory ( ) ; assertFalse ( org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator . isMaterialized ( ) ) ; assertTrue ( org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator . getAspectMetadata ( ) . getPerClausePointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , null ) ) ; assertNotSame ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getDeclaredPointcut ( ) , org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getPointcut ( ) ) ; org.springframework.aop.aspectj.annotation.TestBean . getSpouse ( ) ; assertTrue ( org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator . isMaterialized ( ) ) ; assertTrue ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getDeclaredPointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , null ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; int int = NUMBER ; org.springframework.aop.aspectj.annotation.TestBean . setAge ( int ) ; org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspectInstanceFactory org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspectInstanceFactory = new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspectInstanceFactory ( ) ; TestBean org.springframework.aop.aspectj.annotation.TestBean = ( TestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspectInstanceFactory ) , TestBean .class ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspectInstanceFactory . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; Advised org.springframework.aop.aspectj.annotation.Advised = ( Advised ) org.springframework.aop.aspectj.annotation.TestBean ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.Advised . getAdvisors ( ) . length ) ; SyntheticInstantiationAdvisor org.springframework.aop.aspectj.annotation.SyntheticInstantiationAdvisor = ( SyntheticInstantiationAdvisor ) org.springframework.aop.aspectj.annotation.Advised . getAdvisors ( ) [ NUMBER ] ; assertTrue ( org.springframework.aop.aspectj.annotation.SyntheticInstantiationAdvisor . getPointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , null ) ) ; InstantiationModelAwarePointcutAdvisorImpl org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl = ( InstantiationModelAwarePointcutAdvisorImpl ) org.springframework.aop.aspectj.annotation.Advised . getAdvisors ( ) [ NUMBER ] ; LazySingletonAspectInstanceFactoryDecorator org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator = ( LazySingletonAspectInstanceFactoryDecorator ) org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getAspectInstanceFactory ( ) ; assertTrue ( org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator . isMaterialized ( ) ) ; assertTrue ( org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator . getAspectMetadata ( ) . getPerClausePointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , null ) ) ; assertNotSame ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getDeclaredPointcut ( ) , org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getPointcut ( ) ) ; org.springframework.aop.aspectj.annotation.TestBean . getSpouse ( ) ; assertTrue ( org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator . isMaterialized ( ) ) ; assertTrue ( org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl . getDeclaredPointcut ( ) . getMethodMatcher ( ) . matches ( TestBean .class . java.lang.reflect.Method ( STRING ) , null ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; TestBean org.springframework.aop.aspectj.annotation.TestBean = ( TestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspectInstanceFactory ) , TestBean .class ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspectInstanceFactory . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspectInstanceFactory . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.NamedPointcutAspectWithFQN ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.NamedPointcutAspectWithoutFQN ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.NamedPointcutAspectFromLibrary ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; ITestBean org.springframework.aop.aspectj.annotation.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.NamedPointcutAspectFromLibraryWithBinding ( ) , STRING ) ) , ITestBean .class ) ; org.springframework.aop.aspectj.annotation.ITestBean . setAge ( NUMBER ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; int int = NUMBER ; org.springframework.aop.aspectj.annotation.TestBean . setAge ( int ) ; ITestBean org.springframework.aop.aspectj.annotation.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( java.lang.Object , STRING ) ) , ITestBean .class ) ; assertEquals ( STRING , - NUMBER , org.springframework.aop.aspectj.annotation.ITestBean . getAge ( ) ) ; assertEquals ( int , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; ITestBean org.springframework.aop.aspectj.annotation.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.BindingAspectWithSingleArg ( ) , STRING ) ) , ITestBean .class ) ; org.springframework.aop.aspectj.annotation.ITestBean . setAge ( NUMBER ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.annotation.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ManyValuedArgs org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ManyValuedArgs = new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ManyValuedArgs ( ) ; org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ManyValuedArgs org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ManyValuedArgs = ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ManyValuedArgs ) java.lang.Object ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ManyValuedArgs , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ManyValuedArgs ( ) , STRING ) ) , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ManyValuedArgs .class ) ; java.lang.String java.lang.String = STRING ; int int = NUMBER ; int int = NUMBER ; java.lang.String java.lang.String = STRING ; java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( STRING ) ; java.lang.String java.lang.String = java.lang.String + int + int + java.lang.String + java.lang.StringBuffer ; assertEquals ( java.lang.String , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ManyValuedArgs . java.lang.String ( java.lang.String , int , int , java.lang.String , java.lang.StringBuffer ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.annotation.NotLockable org.springframework.aop.aspectj.annotation.NotLockable = new org.springframework.aop.aspectj.annotation.NotLockable ( ) ; assertFalse ( org.springframework.aop.aspectj.annotation.NotLockable instanceof Lockable ) ; org.springframework.aop.aspectj.annotation.NotLockable org.springframework.aop.aspectj.annotation.NotLockable = ( org.springframework.aop.aspectj.annotation.NotLockable ) java.lang.Object ( org.springframework.aop.aspectj.annotation.NotLockable , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.MakeLockable ( ) , STRING ) ) , org.springframework.aop.aspectj.annotation.NotLockable .class ) ; assertTrue ( org.springframework.aop.aspectj.annotation.NotLockable instanceof Lockable ) ; Lockable org.springframework.aop.aspectj.annotation.Lockable = ( Lockable ) org.springframework.aop.aspectj.annotation.NotLockable ; assertFalse ( org.springframework.aop.aspectj.annotation.Lockable . locked ( ) ) ; org.springframework.aop.aspectj.annotation.Lockable . lock ( ) ; assertTrue ( org.springframework.aop.aspectj.annotation.Lockable . locked ( ) ) ; org.springframework.aop.aspectj.annotation.NotLockable org.springframework.aop.aspectj.annotation.NotLockable = new org.springframework.aop.aspectj.annotation.NotLockable ( ) ; org.springframework.aop.aspectj.annotation.NotLockable org.springframework.aop.aspectj.annotation.NotLockable = ( org.springframework.aop.aspectj.annotation.NotLockable ) java.lang.Object ( org.springframework.aop.aspectj.annotation.NotLockable , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.MakeLockable ( ) , STRING ) ) , org.springframework.aop.aspectj.annotation.NotLockable .class ) ; assertTrue ( org.springframework.aop.aspectj.annotation.NotLockable instanceof Lockable ) ; Lockable org.springframework.aop.aspectj.annotation.Lockable = ( Lockable ) org.springframework.aop.aspectj.annotation.NotLockable ; assertFalse ( org.springframework.aop.aspectj.annotation.Lockable . locked ( ) ) ; org.springframework.aop.aspectj.annotation.NotLockable . void ( NUMBER ) ; org.springframework.aop.aspectj.annotation.Lockable . lock ( ) ; try { org.springframework.aop.aspectj.annotation.NotLockable . void ( NUMBER ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) {		} assertTrue ( org.springframework.aop.aspectj.annotation.Lockable . locked ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( AopUtils . findAdvisorsThatCanApply ( org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.MakeLockable ( ) , STRING ) ) , org.springframework.aop.aspectj.annotation.CannotBeUnlocked .class ) . isEmpty ( ) ) ; assertEquals ( NUMBER , AopUtils . findAdvisorsThatCanApply ( org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.MakeLockable ( ) , STRING ) ) , org.springframework.aop.aspectj.annotation.NotLockable .class ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.annotation.CannotBeUnlocked org.springframework.aop.aspectj.annotation.CannotBeUnlocked = new org.springframework.aop.aspectj.annotation.CannotBeUnlocked ( ) ; Lockable org.springframework.aop.aspectj.annotation.Lockable = ( Lockable ) java.lang.Object ( org.springframework.aop.aspectj.annotation.CannotBeUnlocked , AopUtils . findAdvisorsThatCanApply ( org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.MakeLockable ( ) , STRING ) ) , org.springframework.aop.aspectj.annotation.CannotBeUnlocked .class ) , org.springframework.aop.aspectj.annotation.CannotBeUnlocked .class ) ; assertThat ( org.springframework.aop.aspectj.annotation.Lockable , instanceOf ( Lockable .class ) ) ; Lockable org.springframework.aop.aspectj.annotation.Lockable = org.springframework.aop.aspectj.annotation.Lockable ; assertTrue ( STRING , org.springframework.aop.aspectj.annotation.Lockable . locked ( ) ) ; org.springframework.aop.aspectj.annotation.Lockable . lock ( ) ; assertTrue ( STRING , org.springframework.aop.aspectj.annotation.Lockable . locked ( ) ) ; try { org.springframework.aop.aspectj.annotation.Lockable . unlock ( ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.LinkedList<java.lang.Object> < java.lang.Object > java.util.LinkedList<java.lang.Object> = new java.util.LinkedList<java.lang.Object> <> ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ( java.util.LinkedList<java.lang.Object> , AopUtils . findAdvisorsThatCanApply ( org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.MakeLockable ( ) , STRING ) ) , java.util.List .class ) , org.springframework.aop.aspectj.annotation.CannotBeUnlocked .class ) ; assertFalse ( STRING , java.util.List<> instanceof Lockable ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> = org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.MakeITestBeanModifiable ( ) , STRING ) ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . addAll ( org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.MakeLockable ( ) , STRING ) ) ) ; org.springframework.aop.aspectj.annotation.Modifiable org.springframework.aop.aspectj.annotation.Modifiable = ( org.springframework.aop.aspectj.annotation.Modifiable ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> , ITestBean .class ) ; assertThat ( org.springframework.aop.aspectj.annotation.Modifiable , instanceOf ( org.springframework.aop.aspectj.annotation.Modifiable .class ) ) ; Lockable org.springframework.aop.aspectj.annotation.Lockable = ( Lockable ) org.springframework.aop.aspectj.annotation.Modifiable ; assertFalse ( org.springframework.aop.aspectj.annotation.Lockable . locked ( ) ) ; ITestBean org.springframework.aop.aspectj.annotation.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.annotation.Modifiable ; assertFalse ( org.springframework.aop.aspectj.annotation.Modifiable . boolean ( ) ) ; int int = org.springframework.aop.aspectj.annotation.ITestBean . getAge ( ) ; org.springframework.aop.aspectj.annotation.ITestBean . setAge ( int + NUMBER ) ; assertTrue ( org.springframework.aop.aspectj.annotation.Modifiable . boolean ( ) ) ; org.springframework.aop.aspectj.annotation.Modifiable . void ( ) ; assertFalse ( org.springframework.aop.aspectj.annotation.Modifiable . boolean ( ) ) ; org.springframework.aop.aspectj.annotation.ITestBean . setAge ( org.springframework.aop.aspectj.annotation.ITestBean . getAge ( ) ) ; assertFalse ( STRING , org.springframework.aop.aspectj.annotation.Modifiable . boolean ( ) ) ; org.springframework.aop.aspectj.annotation.ITestBean . setName ( STRING ) ; assertTrue ( org.springframework.aop.aspectj.annotation.Modifiable . boolean ( ) ) ; org.springframework.aop.aspectj.annotation.Lockable . lock ( ) ; assertTrue ( org.springframework.aop.aspectj.annotation.Lockable . locked ( ) ) ; try { org.springframework.aop.aspectj.annotation.ITestBean . setName ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } org.springframework.aop.aspectj.annotation.Lockable . unlock ( ) ; org.springframework.aop.aspectj.annotation.ITestBean . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException = new java.lang.UnsupportedOperationException ( ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> = org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionAspect ( java.lang.UnsupportedOperationException ) , STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . size ( ) ) ; ITestBean org.springframework.aop.aspectj.annotation.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> , ITestBean .class ) ; try { org.springframework.aop.aspectj.annotation.ITestBean . getAge ( ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { assertSame ( java.lang.UnsupportedOperationException , java.lang.UnsupportedOperationException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; java.rmi.RemoteException java.rmi.RemoteException = new java.rmi.RemoteException ( ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> = org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionAspect ( java.rmi.RemoteException ) , STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . size ( ) ) ; ITestBean org.springframework.aop.aspectj.annotation.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> , ITestBean .class ) ; try { org.springframework.aop.aspectj.annotation.ITestBean . getAge ( ) ; fail ( ) ; } catch ( java.lang.reflect.UndeclaredThrowableException java.lang.reflect.UndeclaredThrowableException ) { assertSame ( java.rmi.RemoteException , java.lang.reflect.UndeclaredThrowableException . java.lang.Throwable ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { ProxyFactory org.springframework.aop.aspectj.annotation.ProxyFactory = new ProxyFactory ( java.lang.Object ) ; if ( java.lang.Class<?>[] . int > NUMBER || java.lang.Class<?>[] [ NUMBER ] . boolean ( ) ) { org.springframework.aop.aspectj.annotation.ProxyFactory . setInterfaces ( java.lang.Class<?>[] ) ; } else { org.springframework.aop.aspectj.annotation.ProxyFactory . setProxyTargetClass ( true ) ; } org.springframework.aop.aspectj.annotation.ProxyFactory . addAdvice ( ExposeInvocationInterceptor . INSTANCE ) ; for ( java.lang.Object java.lang.Object : java.util.List<org.springframework.aop.aspectj.annotation.Advisor> ) { org.springframework.aop.aspectj.annotation.ProxyFactory . addAdvisor ( ( Advisor ) java.lang.Object ) ; } org.springframework.aop.aspectj.annotation.ProxyFactory . setExposeProxy ( true ) ; return org.springframework.aop.aspectj.annotation.ProxyFactory . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; TwoAdviceAspect org.springframework.aop.aspectj.annotation.TwoAdviceAspect = new TwoAdviceAspect ( ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> = org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( org.springframework.aop.aspectj.annotation.TwoAdviceAspect , STRING ) ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . size ( ) ) ; ITestBean org.springframework.aop.aspectj.annotation.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> , ITestBean .class ) ; org.springframework.aop.aspectj.annotation.ITestBean . setName ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.ITestBean . getAge ( ) ) ; int int = NUMBER ; org.springframework.aop.aspectj.annotation.ITestBean . setAge ( int ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.Echo org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.Echo = new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.Echo ( ) ; org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling = new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling ( ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> = org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( new SingletonMetadataAwareAspectInstanceFactory ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling , STRING ) ) ; org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.Echo org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.Echo = ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.Echo ) java.lang.Object ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.Echo , java.util.List<org.springframework.aop.aspectj.annotation.Advisor> , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.Echo .class ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling . int ) ; assertEquals ( STRING , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.Echo . java.lang.Object ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling . int ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling . int ) ; try { org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.Echo . java.lang.Object ( new java.io.FileNotFoundException ( ) ) ; fail ( ) ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { } catch ( java.lang.Exception java.lang.Exception ) { fail ( ) ; } assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling . int ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling . int ) ; assertEquals ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling . int + org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling . int , org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.ExceptionHandling . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; MetadataAwareAspectInstanceFactory org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory = new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.NoDeclarePrecedenceShouldFail ( ) , STRING ) ; ITestBean org.springframework.aop.aspectj.annotation.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) , ITestBean .class ) ; org.springframework.aop.aspectj.annotation.ITestBean . getAge ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { TestBean org.springframework.aop.aspectj.annotation.TestBean = new TestBean ( ) ; MetadataAwareAspectInstanceFactory org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory = new SingletonMetadataAwareAspectInstanceFactory ( new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.DeclarePrecedenceShouldSucceed ( ) , STRING ) ; java.lang.Object ( org.springframework.aop.aspectj.annotation.TestBean , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ( ) . getAdvisors ( org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory ) , ITestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public int int ( ) { return int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { ++ int ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public int int ( ) { return int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { ++ int ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public int int ( ) { return int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { ++ int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { ++ this . int ; return new org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspect ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspect .class . java.lang.ClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.aspectj.annotation.AspectMetadata org.springframework.aop.aspectj.annotation.AspectMetadata ( ) { return new AspectMetadata ( org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.PerTypeWithinAspect .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return Ordered . LOWEST_PRECEDENCE ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public int int ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint ) { return - NUMBER ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public int int ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint ) { return - NUMBER ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public int int ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint ) { return - NUMBER ; }  <METHOD_END>
<METHOD_START> @ Around ( value = STRING , argNames = STRING ) public void void ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint , int int ) throws java.lang.Throwable { org.springframework.aop.aspectj.annotation.ProceedingJoinPoint . proceed ( new java.lang.Object [] { int * NUMBER } ) ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) public void void ( ) {}  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) public void void ( int int ) {}  <METHOD_END>
<METHOD_START> @ Around ( value = STRING , argNames = STRING ) public void void ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint , int int ) throws java.lang.Throwable { org.springframework.aop.aspectj.annotation.ProceedingJoinPoint . proceed ( new java.lang.Object [] { int * NUMBER } ) ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( value = STRING , argNames = STRING ) public void void ( int int ) {}  <METHOD_END>
<METHOD_START> @ Around ( value = STRING , argNames = STRING ) public void void ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint , int int ) throws java.lang.Throwable { org.springframework.aop.aspectj.annotation.ProceedingJoinPoint . proceed ( new java.lang.Object [] { int * NUMBER } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String , int int , int int , java.lang.String java.lang.String , java.lang.StringBuffer java.lang.StringBuffer ) { return java.lang.String + int + int + java.lang.String + java.lang.StringBuffer ; }  <METHOD_END>
<METHOD_START> @ Around ( value = STRING , argNames = STRING ) public java.lang.String java.lang.String ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint , int int , int int , java.lang.String java.lang.String , java.lang.StringBuffer java.lang.StringBuffer , java.lang.String java.lang.String ) throws java.lang.Throwable { assertEquals ( java.lang.String + int + int + java.lang.String + java.lang.StringBuffer , org.springframework.aop.aspectj.annotation.ProceedingJoinPoint . proceed ( ) ) ; return java.lang.String + int + int + java.lang.String + java.lang.StringBuffer ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Exception java.lang.Exception ) { this . java.lang.Exception = java.lang.Exception ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) java.lang.Exception { throw java.lang.Exception ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws java.lang.Exception { if ( java.lang.Object instanceof java.lang.Exception ) { throw ( java.lang.Exception ) java.lang.Object ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ AfterReturning ( STRING ) public void void ( ) { ++ int ; }  <METHOD_END>
<METHOD_START> @ AfterThrowing ( STRING ) public void void ( ) { ++ int ; }  <METHOD_END>
<METHOD_START> @ After ( STRING ) public void void ( ) { ++ int ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public int int ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public int int ( ProceedingJoinPoint org.springframework.aop.aspectj.annotation.ProceedingJoinPoint ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ Before ( value = STRING , argNames = STRING ) public void void ( JoinPoint org.springframework.aop.aspectj.annotation.JoinPoint , org.springframework.aop.aspectj.annotation.AbstractMakeModifiable.MutableModifable org.springframework.aop.aspectj.annotation.AbstractMakeModifiable.MutableModifable , java.lang.Object java.lang.Object ) { if ( org.springframework.aop.aspectj.annotation.AbstractMakeModifiable.MutableModifable . boolean ( ) ) { return; } java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( ( ( MethodSignature ) org.springframework.aop.aspectj.annotation.JoinPoint . getSignature ( ) ) . getMethod ( ) ) ; boolean boolean = true ; if ( java.lang.reflect.Method != null ) { try { java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( org.springframework.aop.aspectj.annotation.JoinPoint . getTarget ( ) ) ; boolean = ! ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } else { } if ( boolean ) { org.springframework.aop.aspectj.annotation.AbstractMakeModifiable.MutableModifable . void ( ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) . java.lang.String ( STRING , STRING ) ; try { return java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.reflect.Method ( java.lang.String ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { return null ; } }  <METHOD_END>
<METHOD_START> @ Before ( value = STRING , argNames = STRING ) public void void ( Lockable org.springframework.aop.aspectj.annotation.Lockable ) { if ( org.springframework.aop.aspectj.annotation.Lockable . locked ( ) ) { throw new java.lang.IllegalStateException ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public int int ( ) { return int ++ ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( ) { ++ int ; }  <METHOD_END>
