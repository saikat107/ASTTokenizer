<METHOD_START> @ Before public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { org.springframework.data.mongodb.core.mapreduce.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.mapreduce.MongoTemplate . getCollectionName ( ValueObject .class ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . dropCollection ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . dropCollection ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . dropCollection ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . dropCollection ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . dropCollection ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { void ( ) ; MapReduceResults < ValueObject > org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . mapReduce ( STRING , java.lang.String , java.lang.String , ValueObject .class ) ; for ( ValueObject org.springframework.data.mongodb.core.mapreduce.ValueObject : org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> ) { java.lang.System . java.io.PrintStream . void ( org.springframework.data.mongodb.core.mapreduce.ValueObject ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MapReduceResults < ContentAndVersion > org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ContentAndVersion> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . mapReduce ( STRING , java.lang.String , java.lang.String , new MapReduceOptions ( ) . outputCollection ( STRING ) , ContentAndVersion .class ) ; int int = NUMBER ; for ( ContentAndVersion org.springframework.data.mongodb.core.mapreduce.ContentAndVersion : org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ContentAndVersion> ) { if ( STRING . boolean ( org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . getId ( ) ) ) { assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . getValue ( ) . longValue ( ) ) ; } if ( STRING . boolean ( org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . getId ( ) ) ) { assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . getValue ( ) . longValue ( ) ) ; } if ( STRING . boolean ( org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . getId ( ) ) ) { assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . getValue ( ) . longValue ( ) ) ; } int ++ ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MapReduceResults < NumberAndVersion > org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.NumberAndVersion> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . mapReduce ( STRING , java.lang.String , java.lang.String , new MapReduceOptions ( ) . outputCollection ( STRING ) , NumberAndVersion .class ) ; int int = NUMBER ; for ( NumberAndVersion org.springframework.data.mongodb.core.mapreduce.NumberAndVersion : org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.NumberAndVersion> ) { if ( STRING . boolean ( org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . getId ( ) ) ) { assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . getValue ( ) . longValue ( ) ) ; } if ( STRING . boolean ( org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . getId ( ) ) ) { assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . getValue ( ) . longValue ( ) ) ; } if ( STRING . boolean ( org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . getId ( ) ) ) { assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . getValue ( ) . longValue ( ) ) ; } int ++ ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { NumberAndVersion org.springframework.data.mongodb.core.mapreduce.NumberAndVersion = new NumberAndVersion ( ) ; org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . setNumber ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . setVersion ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . save ( org.springframework.data.mongodb.core.mapreduce.NumberAndVersion , STRING ) ; NumberAndVersion org.springframework.data.mongodb.core.mapreduce.NumberAndVersion = new NumberAndVersion ( ) ; org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . setNumber ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . setVersion ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . save ( org.springframework.data.mongodb.core.mapreduce.NumberAndVersion , STRING ) ; NumberAndVersion org.springframework.data.mongodb.core.mapreduce.NumberAndVersion = new NumberAndVersion ( ) ; org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . setNumber ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . setVersion ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . save ( org.springframework.data.mongodb.core.mapreduce.NumberAndVersion , STRING ) ; NumberAndVersion org.springframework.data.mongodb.core.mapreduce.NumberAndVersion = new NumberAndVersion ( ) ; org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . setNumber ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . setVersion ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . save ( org.springframework.data.mongodb.core.mapreduce.NumberAndVersion , STRING ) ; NumberAndVersion org.springframework.data.mongodb.core.mapreduce.NumberAndVersion = new NumberAndVersion ( ) ; org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . setNumber ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.NumberAndVersion . setVersion ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . save ( org.springframework.data.mongodb.core.mapreduce.NumberAndVersion , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { ContentAndVersion org.springframework.data.mongodb.core.mapreduce.ContentAndVersion = new ContentAndVersion ( ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setDocumentId ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setAuthor ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setContent ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setVersion ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . save ( org.springframework.data.mongodb.core.mapreduce.ContentAndVersion , STRING ) ; ContentAndVersion org.springframework.data.mongodb.core.mapreduce.ContentAndVersion = new ContentAndVersion ( ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setDocumentId ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setAuthor ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setContent ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setVersion ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . save ( org.springframework.data.mongodb.core.mapreduce.ContentAndVersion , STRING ) ; ContentAndVersion org.springframework.data.mongodb.core.mapreduce.ContentAndVersion = new ContentAndVersion ( ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setDocumentId ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setAuthor ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setContent ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setVersion ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . save ( org.springframework.data.mongodb.core.mapreduce.ContentAndVersion , STRING ) ; ContentAndVersion org.springframework.data.mongodb.core.mapreduce.ContentAndVersion = new ContentAndVersion ( ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setDocumentId ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setAuthor ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setContent ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setVersion ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . save ( org.springframework.data.mongodb.core.mapreduce.ContentAndVersion , STRING ) ; ContentAndVersion org.springframework.data.mongodb.core.mapreduce.ContentAndVersion = new ContentAndVersion ( ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setDocumentId ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setAuthor ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setContent ( STRING ) ; org.springframework.data.mongodb.core.mapreduce.ContentAndVersion . setVersion ( NUMBER ) ; org.springframework.data.mongodb.core.mapreduce.MongoTemplate . save ( org.springframework.data.mongodb.core.mapreduce.ContentAndVersion , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; MapReduceResults < ValueObject > org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . mapReduce ( STRING , java.lang.String , java.lang.String , new MapReduceOptions ( ) . scopeVariables ( java.util.Map<java.lang.String,java.lang.Object> ) . outputTypeInline ( ) , ValueObject .class ) ; java.util.Map<java.lang.String,java.lang.Float> < java.lang.String , java.lang.Float > java.util.Map<java.lang.String,java.lang.Float> = java.util.Map<java.lang.String,java.lang.Float> ( org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Query org.springframework.data.mongodb.core.mapreduce.Query = new Query ( where ( STRING ) . ne ( new java.lang.String [] { STRING , STRING } ) ) ; MapReduceResults < ValueObject > org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . mapReduce ( org.springframework.data.mongodb.core.mapreduce.Query , STRING , java.lang.String , java.lang.String , ValueObject .class ) ; java.util.Map<java.lang.String,java.lang.Float> < java.lang.String , java.lang.Float > java.util.Map<java.lang.String,java.lang.Float> = java.util.Map<java.lang.String,java.lang.Float> ( org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoCollection < Document > org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . getDb ( ) . getCollection ( STRING , Document .class ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) . append ( STRING , java.util.Arrays .< java.lang.Double > java.util.List<java.lang.Double> ( NUMBER , NUMBER ) ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) . append ( STRING , java.util.Arrays .< java.lang.Double > java.util.List<java.lang.Double> ( NUMBER , NUMBER ) ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) . append ( STRING , java.util.Arrays .< java.lang.Double > java.util.List<java.lang.Double> ( NUMBER , NUMBER ) ) ) ; Query org.springframework.data.mongodb.core.mapreduce.Query = new Query ( where ( STRING ) . ne ( new java.lang.String [] { STRING , STRING } ) . and ( STRING ) . within ( new Box ( new double [] { NUMBER , NUMBER } , new double [] { NUMBER , NUMBER } ) ) ) ; MapReduceResults < ValueObject > org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . mapReduce ( org.springframework.data.mongodb.core.mapreduce.Query , STRING , java.lang.String , java.lang.String , ValueObject .class ) ; java.util.Map<java.lang.String,java.lang.Float> < java.lang.String , java.lang.Float > java.util.Map<java.lang.String,java.lang.Float> = java.util.Map<java.lang.String,java.lang.Float> ( org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , boolean boolean ) { void ( ) ; MapReduceResults < ValueObject > org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> ; if ( boolean ) { if ( boolean ) { org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . mapReduce ( new Query ( ) , STRING , STRING , STRING , ValueObject .class ) ; } else { org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . mapReduce ( STRING , java.lang.String , java.lang.String , ValueObject .class ) ; } } else { if ( boolean ) { org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . mapReduce ( new Query ( ) , STRING , java.lang.String , java.lang.String , options ( ) . outputCollection ( STRING ) , ValueObject .class ) ; } else { org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . mapReduce ( STRING , java.lang.String , java.lang.String , new MapReduceOptions ( ) . outputCollection ( STRING ) , ValueObject .class ) ; } } java.util.Map<java.lang.String,java.lang.Float> < java.lang.String , java.lang.Float > java.util.Map<java.lang.String,java.lang.Float> = java.util.Map<java.lang.String,java.lang.Float> ( org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> ) ; void ( java.util.Map<java.lang.String,java.lang.Float> ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { MongoCollection < Document > org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> = org.springframework.data.mongodb.core.mapreduce.MongoTemplate . getDb ( ) . getCollection ( STRING , Document .class ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; org.springframework.data.mongodb.core.mapreduce.MongoCollection<org.springframework.data.mongodb.core.mapreduce.Document> . insertOne ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Float> < java.lang.String , java.lang.Float > java.util.Map<java.lang.String,java.lang.Float> ( MapReduceResults < ValueObject > org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> ) { java.util.List<org.springframework.data.mongodb.core.mapreduce.ValueObject> < ValueObject > java.util.List<org.springframework.data.mongodb.core.mapreduce.ValueObject> = new java.util.ArrayList<org.springframework.data.mongodb.core.mapreduce.ValueObject> < ValueObject > ( ) ; for ( ValueObject org.springframework.data.mongodb.core.mapreduce.ValueObject : org.springframework.data.mongodb.core.mapreduce.MapReduceResults<org.springframework.data.mongodb.core.mapreduce.ValueObject> ) { java.util.List<org.springframework.data.mongodb.core.mapreduce.ValueObject> . add ( org.springframework.data.mongodb.core.mapreduce.ValueObject ) ; } java.util.Map<java.lang.String,java.lang.Float> < java.lang.String , java.lang.Float > java.util.Map<java.lang.String,java.lang.Float> = new java.util.HashMap<java.lang.String,java.lang.Float> < java.lang.String , java.lang.Float > ( ) ; for ( ValueObject org.springframework.data.mongodb.core.mapreduce.ValueObject : java.util.List<org.springframework.data.mongodb.core.mapreduce.ValueObject> ) { java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( org.springframework.data.mongodb.core.mapreduce.ValueObject . getId ( ) , org.springframework.data.mongodb.core.mapreduce.ValueObject . getValue ( ) ) ; } return java.util.Map<java.lang.String,java.lang.Float> ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Float> < java.lang.String , java.lang.Float > java.util.Map<java.lang.String,java.lang.Float> ) { assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Float> . java.lang.Float ( STRING ) . int ( ) ) ; }  <METHOD_END>
