<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { if ( this . org.springframework.expression.spel.ast.TypedValue == null ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( int int = NUMBER ; int < getChildCount ( ) ; int ++ ) { java.lang.Object java.lang.Object = this . children [ int ] . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; if ( int > NUMBER && ! java.lang.Object . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object ) ; } this . org.springframework.expression.spel.ast.TypedValue = new TypedValue ( java.lang.StringBuilder . java.lang.String ( ) ) ; } return this . org.springframework.expression.spel.ast.TypedValue ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( this . org.springframework.expression.spel.ast.TypedValue != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( this . org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; } else { for ( int int = NUMBER ; int < getChildCount ( ) ; int ++ ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( getChild ( int ) . toStringAST ( ) ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
