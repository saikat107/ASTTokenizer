<METHOD_START> public void void ( java.lang.Class<? extends org.springframework.orm.jpa.PersistenceProvider> < ? extends PersistenceProvider > java.lang.Class<? extends org.springframework.orm.jpa.PersistenceProvider> ) { this . org.springframework.orm.jpa.PersistenceProvider = BeanUtils . instantiateClass ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( PersistenceProvider org.springframework.orm.jpa.PersistenceProvider ) { this . org.springframework.orm.jpa.PersistenceProvider = org.springframework.orm.jpa.PersistenceProvider ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.PersistenceProvider org.springframework.orm.jpa.PersistenceProvider ( ) { return this . org.springframework.orm.jpa.PersistenceProvider ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , this . java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { if ( java.util.Map<java.lang.String,> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends org.springframework.orm.jpa.EntityManagerFactory> < ? extends EntityManagerFactory > java.lang.Class<? extends org.springframework.orm.jpa.EntityManagerFactory> ) { this . java.lang.Class<? extends org.springframework.orm.jpa.EntityManagerFactory> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends org.springframework.orm.jpa.EntityManager> < ? extends EntityManager > java.lang.Class<? extends org.springframework.orm.jpa.EntityManager> ) { this . java.lang.Class<? extends org.springframework.orm.jpa.EntityManager> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.orm.jpa.EntityManager> < ? extends EntityManager > java.lang.Class<? extends org.springframework.orm.jpa.EntityManager> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( JpaDialect org.springframework.orm.jpa.JpaDialect ) { this . org.springframework.orm.jpa.JpaDialect = org.springframework.orm.jpa.JpaDialect ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.JpaDialect org.springframework.orm.jpa.JpaDialect ( ) { return this . org.springframework.orm.jpa.JpaDialect ; }  <METHOD_END>
<METHOD_START> public void void ( JpaVendorAdapter org.springframework.orm.jpa.JpaVendorAdapter ) { this . org.springframework.orm.jpa.JpaVendorAdapter = org.springframework.orm.jpa.JpaVendorAdapter ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.jpa.JpaVendorAdapter org.springframework.orm.jpa.JpaVendorAdapter ( ) { return this . org.springframework.orm.jpa.JpaVendorAdapter ; }  <METHOD_END>
<METHOD_START> public void void ( AsyncTaskExecutor org.springframework.orm.jpa.AsyncTaskExecutor ) { this . org.springframework.orm.jpa.AsyncTaskExecutor = org.springframework.orm.jpa.AsyncTaskExecutor ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.jpa.AsyncTaskExecutor org.springframework.orm.jpa.AsyncTaskExecutor ( ) { return this . org.springframework.orm.jpa.AsyncTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.orm.jpa.BeanFactory ) { this . org.springframework.orm.jpa.BeanFactory = org.springframework.orm.jpa.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) org.springframework.orm.jpa.PersistenceException { if ( this . org.springframework.orm.jpa.JpaVendorAdapter != null ) { if ( this . org.springframework.orm.jpa.PersistenceProvider == null ) { this . org.springframework.orm.jpa.PersistenceProvider = this . org.springframework.orm.jpa.JpaVendorAdapter . getPersistenceProvider ( ) ; } java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = this . org.springframework.orm.jpa.JpaVendorAdapter . getJpaPropertyMap ( ) ; if ( java.util.Map<java.lang.String,> != null ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,?> < java.lang.String , ? > java.util.Map.Entry<java.lang.String,?> : java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) ) { if ( ! this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,> . getValue ( ) ) ; } } } if ( this . java.lang.Class<> == null ) { this . java.lang.Class<? extends org.springframework.orm.jpa.EntityManagerFactory> = this . org.springframework.orm.jpa.JpaVendorAdapter . getEntityManagerFactoryInterface ( ) ; if ( ! ClassUtils . isVisible ( this . java.lang.Class<> , this . java.lang.ClassLoader ) ) { this . java.lang.Class<? extends org.springframework.orm.jpa.EntityManagerFactory> = EntityManagerFactory .class ; } } if ( this . java.lang.Class<> == null ) { this . java.lang.Class<? extends org.springframework.orm.jpa.EntityManager> = this . org.springframework.orm.jpa.JpaVendorAdapter . getEntityManagerInterface ( ) ; if ( ! ClassUtils . isVisible ( this . java.lang.Class<> , this . java.lang.ClassLoader ) ) { this . java.lang.Class<? extends org.springframework.orm.jpa.EntityManager> = EntityManager .class ; } } if ( this . org.springframework.orm.jpa.JpaDialect == null ) { this . org.springframework.orm.jpa.JpaDialect = this . org.springframework.orm.jpa.JpaVendorAdapter . getJpaDialect ( ) ; } } if ( this . org.springframework.orm.jpa.AsyncTaskExecutor != null ) { this . java.util.concurrent.Future<org.springframework.orm.jpa.EntityManagerFactory> = this . org.springframework.orm.jpa.AsyncTaskExecutor . submit ( new java.util.concurrent.Callable<org.springframework.orm.jpa.EntityManagerFactory> < EntityManagerFactory > ( ) { @ java.lang.Override public org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( ) { return org.springframework.orm.jpa.EntityManagerFactory ( ) ; } } ) ; } else { this . org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ( ) ; } this . org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ( this . org.springframework.orm.jpa.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( ) { return org.springframework.orm.jpa.EntityManagerFactory ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( ) { EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ( ) ; if ( org.springframework.orm.jpa.EntityManagerFactory == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( this . org.springframework.orm.jpa.JpaVendorAdapter != null ) { this . org.springframework.orm.jpa.JpaVendorAdapter . postProcessEntityManagerFactory ( org.springframework.orm.jpa.EntityManagerFactory ) ; } if ( org.springframework.orm.jpa.Log . isInfoEnabled ( ) ) { org.springframework.orm.jpa.Log . info ( STRING + java.lang.String ( ) + STRING ) ; } return org.springframework.orm.jpa.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>> <> ( ) ; if ( this . java.lang.Class<> != null ) { java.util.Set<java.lang.Class<?>> . boolean ( this . java.lang.Class<> ) ; } else if ( org.springframework.orm.jpa.EntityManagerFactory != null ) { java.util.Set<java.lang.Class<?>> . boolean ( ClassUtils . getAllInterfacesForClassAsSet ( org.springframework.orm.jpa.EntityManagerFactory . getClass ( ) , this . java.lang.ClassLoader ) ) ; } else { java.util.Set<java.lang.Class<?>> . boolean ( EntityManagerFactory .class ) ; } java.util.Set<java.lang.Class<?>> . boolean ( EntityManagerFactoryInfo .class ) ; try { return ( EntityManagerFactory ) java.lang.reflect.Proxy . java.lang.Object ( this . java.lang.ClassLoader , java.util.Set<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.Set<java.lang.Class<?>> . int ( ) ] ) , new org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.ManagedEntityManagerFactoryInvocationHandler ( this ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { if ( this . java.lang.Class<> != null ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.Class<> + STRING + STRING , java.lang.IllegalArgumentException ) ; } else { throw new java.lang.IllegalStateException ( STRING + STRING + STRING , java.lang.IllegalArgumentException ) ; } } }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( EntityManagerFactoryInfo .class ) ) { return java.lang.reflect.Method . java.lang.Object ( this , java.lang.Object[] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.Object[] != null && java.lang.Object[] . int > NUMBER && java.lang.Object[] [ NUMBER ] != null && java.lang.Object[] [ NUMBER ] . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) && STRING . boolean ( java.lang.Object[] [ NUMBER ] . java.lang.String ( ) ) ) { EntityManager org.springframework.orm.jpa.EntityManager = ( java.lang.Object[] . int > NUMBER ? org.springframework.orm.jpa.EntityManagerFactory ( ) . createEntityManager ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object[] [ NUMBER ] ) : org.springframework.orm.jpa.EntityManagerFactory ( ) . createEntityManager ( ) ) ; return ExtendedEntityManagerCreator . createApplicationManagedEntityManager ( org.springframework.orm.jpa.EntityManager , this , true ) ; } if ( java.lang.Object[] != null ) { for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { java.lang.Object java.lang.Object = java.lang.Object[] [ int ] ; if ( java.lang.Object instanceof Query && java.lang.reflect.Proxy . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { try { java.lang.Object[] [ int ] = ( ( Query ) java.lang.Object ) . unwrap ( null ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { } } } } java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( org.springframework.orm.jpa.EntityManagerFactory ( ) , java.lang.Object[] ) ; if ( java.lang.Object instanceof EntityManager ) { EntityManager org.springframework.orm.jpa.EntityManager = ( EntityManager ) java.lang.Object ; java.lang.Object = ExtendedEntityManagerCreator . createApplicationManagedEntityManager ( org.springframework.orm.jpa.EntityManager , this , false ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( ) org.springframework.orm.jpa.PersistenceException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.DataAccessException org.springframework.orm.jpa.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { return ( this . org.springframework.orm.jpa.JpaDialect != null ? this . org.springframework.orm.jpa.JpaDialect . translateExceptionIfPossible ( java.lang.RuntimeException ) : EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( java.lang.RuntimeException ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( ) { if ( this . org.springframework.orm.jpa.EntityManagerFactory != null ) { return this . org.springframework.orm.jpa.EntityManagerFactory ; } else { try { return this . java.util.concurrent.Future<org.springframework.orm.jpa.EntityManagerFactory> . get ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.InterruptedException . java.lang.String ( ) ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { throw new java.lang.IllegalStateException ( STRING + java.util.concurrent.ExecutionException . java.lang.String ( ) , java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.PersistenceUnitInfo org.springframework.orm.jpa.PersistenceUnitInfo ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.sql.DataSource javax.sql.DataSource ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( ) { return this . org.springframework.orm.jpa.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.orm.jpa.EntityManagerFactory> < ? extends EntityManagerFactory > java.lang.Class<? extends org.springframework.orm.jpa.EntityManagerFactory> ( ) { return ( this . org.springframework.orm.jpa.EntityManagerFactory != null ? this . org.springframework.orm.jpa.EntityManagerFactory . getClass ( ) : EntityManagerFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.orm.jpa.Log . isInfoEnabled ( ) ) { org.springframework.orm.jpa.Log . info ( STRING + java.lang.String ( ) + STRING ) ; } this . org.springframework.orm.jpa.EntityManagerFactory . close ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { throw new java.io.NotSerializableException ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) java.io.ObjectStreamException { if ( this . org.springframework.orm.jpa.BeanFactory != null && this . java.lang.String != null ) { return new org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.SerializedEntityManagerFactoryBeanReference ( this . org.springframework.orm.jpa.BeanFactory , this . java.lang.String ) ; } else { throw new java.io.NotSerializableException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.orm.jpa.BeanFactory , java.lang.String java.lang.String ) { this . org.springframework.orm.jpa.BeanFactory = org.springframework.orm.jpa.BeanFactory ; this . java.lang.String = BeanFactory . FACTORY_BEAN_PREFIX + java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ) { return this . org.springframework.orm.jpa.BeanFactory . getBean ( this . java.lang.String , org.springframework.orm.jpa.AbstractEntityManagerFactoryBean .class ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.orm.jpa.AbstractEntityManagerFactoryBean org.springframework.orm.jpa.AbstractEntityManagerFactoryBean ) { this . org.springframework.orm.jpa.AbstractEntityManagerFactoryBean = org.springframework.orm.jpa.AbstractEntityManagerFactoryBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { try { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ; if ( java.lang.Class<> == null ) { return this . org.springframework.orm.jpa.AbstractEntityManagerFactoryBean . org.springframework.orm.jpa.EntityManagerFactory ( ) ; } else if ( java.lang.Class<> . boolean ( java.lang.Object ) ) { return java.lang.Object ; } } return this . org.springframework.orm.jpa.AbstractEntityManagerFactoryBean . java.lang.Object ( java.lang.reflect.Method , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } }  <METHOD_END>
