<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String[] ( ) , java.lang.Class<? extends org.springframework.context.annotation.SimpleConfigTests> ( ) ) ; FooService org.springframework.context.annotation.FooService = org.springframework.context.annotation.ClassPathXmlApplicationContext . getBean ( STRING , FooService .class ) ; ServiceInvocationCounter org.springframework.context.annotation.ServiceInvocationCounter = org.springframework.context.annotation.ClassPathXmlApplicationContext . getBean ( STRING , ServiceInvocationCounter .class ) ; java.lang.String java.lang.String = org.springframework.context.annotation.FooService . foo ( NUMBER ) ; assertEquals ( STRING , java.lang.String ) ; java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.context.annotation.FooService . asyncFoo ( NUMBER ) ; assertTrue ( java.util.concurrent.Future<> instanceof java.util.concurrent.FutureTask ) ; assertEquals ( STRING , java.util.concurrent.Future<> . get ( ) ) ; assertEquals ( NUMBER , org.springframework.context.annotation.ServiceInvocationCounter . getCount ( ) ) ; org.springframework.context.annotation.FooService . foo ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.context.annotation.ServiceInvocationCounter . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
