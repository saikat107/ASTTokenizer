<METHOD_START> protected void ( ) { KryoFactory org.springframework.integration.codec.kryo.KryoFactory = ( ) { Kryo kryo = new Kryo ( ) ; configureKryoInstance ( kryo ) ; return kryo ; } ; this . org.springframework.integration.codec.kryo.KryoPool = new KryoPool . KryoPool ( org.springframework.integration.codec.kryo.KryoFactory ) . softReferences ( ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.Object java.lang.Object , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.io.OutputStream , STRING ) ; final Output org.springframework.integration.codec.kryo.Output = ( java.io.OutputStream instanceof Output ? ( Output ) java.io.OutputStream : new Output ( java.io.OutputStream ) ) ; this . org.springframework.integration.codec.kryo.KryoPool . run ( kryo -> { doEncode ( kryo , object , output ) ; return Void .class ; } ) ; org.springframework.integration.codec.kryo.Output . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( byte [] byte[] , java.lang.Class<T> < T > java.lang.Class<T> ) throws java.io.IOException { Assert . notNull ( byte[] , STRING ) ; final Input org.springframework.integration.codec.kryo.Input = new Input ( byte[] ) ; try { return java.lang.Object ( org.springframework.integration.codec.kryo.Input , java.lang.Class<T> ) ; } finally { org.springframework.integration.codec.kryo.Input . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.io.InputStream java.io.InputStream , final java.lang.Class<T> < T > java.lang.Class<T> ) throws java.io.IOException { Assert . notNull ( java.io.InputStream , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; final Input org.springframework.integration.codec.kryo.Input = ( java.io.InputStream instanceof Input ? ( Input ) java.io.InputStream : new Input ( java.io.InputStream ) ) ; T T = null ; try { T = this . org.springframework.integration.codec.kryo.KryoPool . run ( kryo -> doDecode ( kryo , input , type ) ) ; } finally { org.springframework.integration.codec.kryo.Input . close ( ) ; } return T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.lang.Object java.lang.Object ) throws java.io.IOException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; void ( java.lang.Object , java.io.ByteArrayOutputStream ) ; byte [] byte[] = java.io.ByteArrayOutputStream . byte[] ( ) ; java.io.ByteArrayOutputStream . void ( ) ; return byte[] ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( Kryo org.springframework.integration.codec.kryo.Kryo , java.lang.Object java.lang.Object , Output org.springframework.integration.codec.kryo.Output );  <METHOD_END>
<METHOD_START> protected abstract < T > T T ( Kryo org.springframework.integration.codec.kryo.Kryo , Input org.springframework.integration.codec.kryo.Input , java.lang.Class<T> < T > java.lang.Class<T> );  <METHOD_END>
<METHOD_START> protected abstract void void ( Kryo org.springframework.integration.codec.kryo.Kryo );  <METHOD_END>
