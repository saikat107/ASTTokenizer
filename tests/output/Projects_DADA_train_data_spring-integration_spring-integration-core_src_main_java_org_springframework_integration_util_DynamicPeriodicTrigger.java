<METHOD_START> public void ( long long ) { this( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ); }  <METHOD_END>
<METHOD_START> public void ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) { Assert . isTrue ( long >= NUMBER , STRING ) ; Assert . notNull ( java.util.concurrent.TimeUnit , STRING ) ; this . java.util.concurrent.TimeUnit = java.util.concurrent.TimeUnit ; this . long = this . java.util.concurrent.TimeUnit . long ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { Assert . isTrue ( long >= NUMBER , STRING ) ; this . long = this . java.util.concurrent.TimeUnit . long ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( TriggerContext org.springframework.integration.util.TriggerContext ) { if ( org.springframework.integration.util.TriggerContext . lastScheduledExecutionTime ( ) == null ) { return new java.util.Date ( java.lang.System . long ( ) + this . long ) ; } else if ( this . boolean ) { return new java.util.Date ( org.springframework.integration.util.TriggerContext . lastScheduledExecutionTime ( ) . getTime ( ) + this . long ) ; } return new java.util.Date ( org.springframework.integration.util.TriggerContext . lastCompletionTime ( ) . getTime ( ) + this . long ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { Assert . isTrue ( long >= NUMBER , STRING ) ; this . long = this . java.util.concurrent.TimeUnit . long ( long ) ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ( ) { return this . java.util.concurrent.TimeUnit ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) { Assert . notNull ( java.util.concurrent.TimeUnit , STRING ) ; this . java.util.concurrent.TimeUnit = java.util.concurrent.TimeUnit ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.integration.util.DynamicPeriodicTrigger ) ) { return false ; } org.springframework.integration.util.DynamicPeriodicTrigger org.springframework.integration.util.DynamicPeriodicTrigger = ( org.springframework.integration.util.DynamicPeriodicTrigger ) java.lang.Object ; return this . boolean == org.springframework.integration.util.DynamicPeriodicTrigger . boolean && this . long == org.springframework.integration.util.DynamicPeriodicTrigger . long && this . long == org.springframework.integration.util.DynamicPeriodicTrigger . long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . boolean ? NUMBER : NUMBER ) + ( int ) ( NUMBER * this . long ) + ( int ) ( NUMBER * this . long ) ; }  <METHOD_END>
