<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.handler.advice.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.handler.advice.Message<?> ) throws java.lang.Exception { org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata = this . java.util.concurrent.ConcurrentMap<java.lang.Object,org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata> . org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata ( java.lang.Object ) ; if ( org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata == null ) { this . java.util.concurrent.ConcurrentMap<java.lang.Object,org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata> . org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata ( java.lang.Object , new org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata ( ) ) ; org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata = this . java.util.concurrent.ConcurrentMap<java.lang.Object,org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata> . org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata ( java.lang.Object ) ; } if ( org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata . java.util.concurrent.atomic.AtomicInteger ( ) . int ( ) >= this . int && java.lang.System . long ( ) - org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata . long ( ) < this . long ) { throw new org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.CircuitBreakerOpenException ( STRING + java.lang.Object ) ; } try { java.lang.Object java.lang.Object = org.springframework.integration.handler.advice.ExecutionCallback . execute ( ) ; if ( logger . isDebugEnabled ( ) && org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata . java.util.concurrent.atomic.AtomicInteger ( ) . int ( ) > NUMBER ) { logger . debug ( STRING + java.lang.Object ) ; } org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata . java.util.concurrent.atomic.AtomicInteger ( ) . void ( NUMBER ) ; return java.lang.Object ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata . java.util.concurrent.atomic.AtomicInteger ( ) . int ( ) ; org.springframework.integration.handler.advice.RequestHandlerCircuitBreakerAdvice.AdvisedMetadata . void ( java.lang.System . long ( ) ) ; throw this . unwrapExceptionIfNecessary ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> private long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> private void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> private java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ( ) { return this . java.util.concurrent.atomic.AtomicInteger ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
