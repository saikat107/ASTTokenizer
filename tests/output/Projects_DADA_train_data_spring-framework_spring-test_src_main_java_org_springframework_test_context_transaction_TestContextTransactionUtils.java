<METHOD_START> private void ( ) { }  <METHOD_END>
<METHOD_START> public static javax.sql.DataSource javax.sql.DataSource ( TestContext org.springframework.test.context.transaction.TestContext , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.test.context.transaction.TestContext , STRING ) ; BeanFactory org.springframework.test.context.transaction.BeanFactory = org.springframework.test.context.transaction.TestContext . getApplicationContext ( ) . getAutowireCapableBeanFactory ( ) ; try { if ( StringUtils . hasText ( java.lang.String ) ) { return org.springframework.test.context.transaction.BeanFactory . getBean ( java.lang.String , javax.sql.DataSource .class ) ; } } catch ( BeansException org.springframework.test.context.transaction.BeansException ) { org.springframework.test.context.transaction.Log . error ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.test.context.transaction.TestContext ) , org.springframework.test.context.transaction.BeansException ) ; throw org.springframework.test.context.transaction.BeansException ; } try { if ( org.springframework.test.context.transaction.BeanFactory instanceof ListableBeanFactory ) { ListableBeanFactory org.springframework.test.context.transaction.ListableBeanFactory = ( ListableBeanFactory ) org.springframework.test.context.transaction.BeanFactory ; java.util.Map<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > java.util.Map<java.lang.String,javax.sql.DataSource> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.test.context.transaction.ListableBeanFactory , javax.sql.DataSource .class ) ; if ( java.util.Map<java.lang.String,javax.sql.DataSource> . int ( ) == NUMBER ) { return java.util.Map<java.lang.String,javax.sql.DataSource> . java.util.Collection<javax.sql.DataSource> ( ) . java.util.Iterator<javax.sql.DataSource> ( ) . javax.sql.DataSource ( ) ; } try { return org.springframework.test.context.transaction.BeanFactory . getBean ( javax.sql.DataSource .class ) ; } catch ( BeansException org.springframework.test.context.transaction.BeansException ) { void ( org.springframework.test.context.transaction.TestContext , org.springframework.test.context.transaction.BeansException , PlatformTransactionManager .class ) ; } } return org.springframework.test.context.transaction.BeanFactory . getBean ( java.lang.String , javax.sql.DataSource .class ) ; } catch ( BeansException org.springframework.test.context.transaction.BeansException ) { void ( org.springframework.test.context.transaction.TestContext , org.springframework.test.context.transaction.BeansException , javax.sql.DataSource .class ) ; return null ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.test.context.transaction.PlatformTransactionManager org.springframework.test.context.transaction.PlatformTransactionManager ( TestContext org.springframework.test.context.transaction.TestContext , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.test.context.transaction.TestContext , STRING ) ; BeanFactory org.springframework.test.context.transaction.BeanFactory = org.springframework.test.context.transaction.TestContext . getApplicationContext ( ) . getAutowireCapableBeanFactory ( ) ; try { if ( StringUtils . hasText ( java.lang.String ) ) { return org.springframework.test.context.transaction.BeanFactory . getBean ( java.lang.String , PlatformTransactionManager .class ) ; } } catch ( BeansException org.springframework.test.context.transaction.BeansException ) { org.springframework.test.context.transaction.Log . error ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.test.context.transaction.TestContext ) , org.springframework.test.context.transaction.BeansException ) ; throw org.springframework.test.context.transaction.BeansException ; } try { if ( org.springframework.test.context.transaction.BeanFactory instanceof ListableBeanFactory ) { ListableBeanFactory org.springframework.test.context.transaction.ListableBeanFactory = ( ListableBeanFactory ) org.springframework.test.context.transaction.BeanFactory ; java.util.Map<java.lang.String,org.springframework.test.context.transaction.PlatformTransactionManager> < java.lang.String , PlatformTransactionManager > java.util.Map<java.lang.String,org.springframework.test.context.transaction.PlatformTransactionManager> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.test.context.transaction.ListableBeanFactory , PlatformTransactionManager .class ) ; if ( java.util.Map<java.lang.String,org.springframework.test.context.transaction.PlatformTransactionManager> . size ( ) == NUMBER ) { return java.util.Map<java.lang.String,org.springframework.test.context.transaction.PlatformTransactionManager> . values ( ) . iterator ( ) . next ( ) ; } try { return org.springframework.test.context.transaction.BeanFactory . getBean ( PlatformTransactionManager .class ) ; } catch ( BeansException org.springframework.test.context.transaction.BeansException ) { void ( org.springframework.test.context.transaction.TestContext , org.springframework.test.context.transaction.BeansException , PlatformTransactionManager .class ) ; } java.util.Map<java.lang.String,org.springframework.test.context.transaction.TransactionManagementConfigurer> < java.lang.String , TransactionManagementConfigurer > java.util.Map<java.lang.String,org.springframework.test.context.transaction.TransactionManagementConfigurer> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.test.context.transaction.ListableBeanFactory , TransactionManagementConfigurer .class ) ; Assert . state ( java.util.Map<java.lang.String,org.springframework.test.context.transaction.TransactionManagementConfigurer> . size ( ) <= NUMBER , STRING ) ; if ( java.util.Map<java.lang.String,org.springframework.test.context.transaction.TransactionManagementConfigurer> . size ( ) == NUMBER ) { return java.util.Map<java.lang.String,org.springframework.test.context.transaction.TransactionManagementConfigurer> . values ( ) . iterator ( ) . next ( ) . annotationDrivenTransactionManager ( ) ; } } return org.springframework.test.context.transaction.BeanFactory . getBean ( java.lang.String , PlatformTransactionManager .class ) ; } catch ( BeansException org.springframework.test.context.transaction.BeansException ) { void ( org.springframework.test.context.transaction.TestContext , org.springframework.test.context.transaction.BeansException , PlatformTransactionManager .class ) ; return null ; } }  <METHOD_END>
<METHOD_START> private static void void ( TestContext org.springframework.test.context.transaction.TestContext , BeansException org.springframework.test.context.transaction.BeansException , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.test.context.transaction.Log . isDebugEnabled ( ) ) { org.springframework.test.context.transaction.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , org.springframework.test.context.transaction.TestContext ) , org.springframework.test.context.transaction.BeansException ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.test.context.transaction.TransactionAttribute org.springframework.test.context.transaction.TransactionAttribute ( TestContext org.springframework.test.context.transaction.TestContext , TransactionAttribute org.springframework.test.context.transaction.TransactionAttribute ) { Assert . notNull ( org.springframework.test.context.transaction.TestContext , STRING ) ; Assert . notNull ( org.springframework.test.context.transaction.TransactionAttribute , STRING ) ; return new org.springframework.test.context.transaction.TestContextTransactionUtils.TestContextTransactionAttribute ( org.springframework.test.context.transaction.TransactionAttribute , org.springframework.test.context.transaction.TestContext ) ; }  <METHOD_END>
<METHOD_START> public void ( TransactionAttribute org.springframework.test.context.transaction.TransactionAttribute , TestContext org.springframework.test.context.transaction.TestContext ) { super( org.springframework.test.context.transaction.TransactionAttribute ); this . java.lang.String = ClassUtils . getQualifiedMethodName ( org.springframework.test.context.transaction.TestContext . getTestMethod ( ) , org.springframework.test.context.transaction.TestContext . getTestClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
