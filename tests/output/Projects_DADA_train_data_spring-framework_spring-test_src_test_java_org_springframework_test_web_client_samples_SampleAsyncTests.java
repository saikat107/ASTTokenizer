<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; @ java.lang.SuppressWarnings ( STRING ) ListenableFuture < ResponseEntity < Person > > org.springframework.test.web.client.samples.ListenableFuture<org.springframework.test.web.client.samples.ResponseEntity<org.springframework.test.web.client.samples.Person>> = this . org.springframework.test.web.client.samples.AsyncRestTemplate . getForEntity ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( manyTimes ( ) , requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; @ java.lang.SuppressWarnings ( STRING ) ListenableFuture < ResponseEntity < Person > > org.springframework.test.web.client.samples.ListenableFuture<org.springframework.test.web.client.samples.ResponseEntity<org.springframework.test.web.client.samples.Person>> = this . org.springframework.test.web.client.samples.AsyncRestTemplate . getForEntity ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.AsyncRestTemplate . getForEntity ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.AsyncRestTemplate . getForEntity ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.AsyncRestTemplate . getForEntity ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.AsyncRestTemplate . getForEntity ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.test.web.client.samples.Resource = new ClassPathResource ( STRING , this . java.lang.Class<? extends org.springframework.test.web.client.samples.SampleAsyncTests> ( ) ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( org.springframework.test.web.client.samples.Resource , MediaType . APPLICATION_JSON ) ) ; @ java.lang.SuppressWarnings ( STRING ) ListenableFuture < ResponseEntity < Person > > org.springframework.test.web.client.samples.ListenableFuture<org.springframework.test.web.client.samples.ResponseEntity<org.springframework.test.web.client.samples.Person>> = this . org.springframework.test.web.client.samples.AsyncRestTemplate . getForEntity ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_PLAIN ) ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_PLAIN ) ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_PLAIN ) ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_PLAIN ) ) ; @ java.lang.SuppressWarnings ( STRING ) ListenableFuture < ResponseEntity < java.lang.String > > org.springframework.test.web.client.samples.ListenableFuture<org.springframework.test.web.client.samples.ResponseEntity<java.lang.String>> = this . org.springframework.test.web.client.samples.AsyncRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; org.springframework.test.web.client.samples.ListenableFuture<org.springframework.test.web.client.samples.ResponseEntity<java.lang.String>> = this . org.springframework.test.web.client.samples.AsyncRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; try { this . org.springframework.test.web.client.samples.MockRestServiceServer . verify ( ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { assertTrue ( java.lang.AssertionError . java.lang.String ( ) , java.lang.AssertionError . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
