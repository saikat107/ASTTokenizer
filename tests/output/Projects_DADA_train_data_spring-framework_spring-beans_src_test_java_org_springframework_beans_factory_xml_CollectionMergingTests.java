<METHOD_START> @ Before public void void ( ) java.lang.Exception { BeanDefinitionReader org.springframework.beans.factory.xml.BeanDefinitionReader = new XmlBeanDefinitionReader ( this . org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.BeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.xml.CollectionMergingTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.List java.util.List = org.springframework.beans.factory.xml.TestBean . getSomeList ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; assertEquals ( java.util.List . java.lang.Object ( NUMBER ) , STRING ) ; assertEquals ( java.util.List . java.lang.Object ( NUMBER ) , STRING ) ; assertEquals ( java.util.List . java.lang.Object ( NUMBER ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.List java.util.List = org.springframework.beans.factory.xml.TestBean . getSomeList ( ) ; assertNotNull ( java.util.List ) ; assertEquals ( NUMBER , java.util.List . int ( ) ) ; assertNotNull ( java.util.List . java.lang.Object ( NUMBER ) ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) instanceof TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Set java.util.Set = org.springframework.beans.factory.xml.TestBean . getSomeSet ( ) ; assertEquals ( STRING , NUMBER , java.util.Set . int ( ) ) ; assertTrue ( java.util.Set . boolean ( STRING ) ) ; assertTrue ( java.util.Set . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Set java.util.Set = org.springframework.beans.factory.xml.TestBean . getSomeSet ( ) ; assertNotNull ( java.util.Set ) ; assertEquals ( NUMBER , java.util.Set . int ( ) ) ; java.util.Iterator java.util.Iterator = java.util.Set . java.util.Iterator ( ) ; java.util.Iterator . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.util.Iterator . java.lang.Object ( ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof TestBean ) ; assertEquals ( STRING , ( ( TestBean ) java.lang.Object ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Map java.util.Map = org.springframework.beans.factory.xml.TestBean . getSomeMap ( ) ; assertEquals ( STRING , NUMBER , java.util.Map . int ( ) ) ; assertEquals ( java.util.Map . java.lang.Object ( STRING ) , STRING ) ; assertEquals ( java.util.Map . java.lang.Object ( STRING ) , STRING ) ; assertEquals ( java.util.Map . java.lang.Object ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Map java.util.Map = org.springframework.beans.factory.xml.TestBean . getSomeMap ( ) ; assertNotNull ( java.util.Map ) ; assertEquals ( NUMBER , java.util.Map . int ( ) ) ; assertNotNull ( java.util.Map . java.lang.Object ( STRING ) ) ; assertTrue ( java.util.Map . java.lang.Object ( STRING ) instanceof TestBean ) ; assertEquals ( STRING , ( ( TestBean ) java.util.Map . java.lang.Object ( STRING ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.xml.TestBean . getSomeProperties ( ) ; assertEquals ( STRING , NUMBER , java.util.Properties . int ( ) ) ; assertEquals ( java.util.Properties . java.lang.String ( STRING ) , STRING ) ; assertEquals ( java.util.Properties . java.lang.String ( STRING ) , STRING ) ; assertEquals ( java.util.Properties . java.lang.String ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.List java.util.List = org.springframework.beans.factory.xml.TestBean . getSomeList ( ) ; assertEquals ( STRING , NUMBER , java.util.List . int ( ) ) ; assertEquals ( java.util.List . java.lang.Object ( NUMBER ) , STRING ) ; assertEquals ( java.util.List . java.lang.Object ( NUMBER ) , STRING ) ; assertEquals ( java.util.List . java.lang.Object ( NUMBER ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.List java.util.List = org.springframework.beans.factory.xml.TestBean . getSomeList ( ) ; assertNotNull ( java.util.List ) ; assertEquals ( NUMBER , java.util.List . int ( ) ) ; assertNotNull ( java.util.List . java.lang.Object ( NUMBER ) ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) instanceof TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Set java.util.Set = org.springframework.beans.factory.xml.TestBean . getSomeSet ( ) ; assertEquals ( STRING , NUMBER , java.util.Set . int ( ) ) ; assertTrue ( java.util.Set . boolean ( STRING ) ) ; assertTrue ( java.util.Set . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Set java.util.Set = org.springframework.beans.factory.xml.TestBean . getSomeSet ( ) ; assertNotNull ( java.util.Set ) ; assertEquals ( NUMBER , java.util.Set . int ( ) ) ; java.util.Iterator java.util.Iterator = java.util.Set . java.util.Iterator ( ) ; java.util.Iterator . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.util.Iterator . java.lang.Object ( ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof TestBean ) ; assertEquals ( STRING , ( ( TestBean ) java.lang.Object ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Map java.util.Map = org.springframework.beans.factory.xml.TestBean . getSomeMap ( ) ; assertEquals ( STRING , NUMBER , java.util.Map . int ( ) ) ; assertEquals ( java.util.Map . java.lang.Object ( STRING ) , STRING ) ; assertEquals ( java.util.Map . java.lang.Object ( STRING ) , STRING ) ; assertEquals ( java.util.Map . java.lang.Object ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Map java.util.Map = org.springframework.beans.factory.xml.TestBean . getSomeMap ( ) ; assertNotNull ( java.util.Map ) ; assertEquals ( NUMBER , java.util.Map . int ( ) ) ; assertNotNull ( java.util.Map . java.lang.Object ( STRING ) ) ; assertTrue ( java.util.Map . java.lang.Object ( STRING ) instanceof TestBean ) ; assertEquals ( STRING , ( ( TestBean ) java.util.Map . java.lang.Object ( STRING ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Properties java.util.Properties = org.springframework.beans.factory.xml.TestBean . getSomeProperties ( ) ; assertEquals ( STRING , NUMBER , java.util.Properties . int ( ) ) ; assertEquals ( java.util.Properties . java.lang.String ( STRING ) , STRING ) ; assertEquals ( java.util.Properties . java.lang.String ( STRING ) , STRING ) ; assertEquals ( java.util.Properties . java.lang.String ( STRING ) , STRING ) ; }  <METHOD_END>
