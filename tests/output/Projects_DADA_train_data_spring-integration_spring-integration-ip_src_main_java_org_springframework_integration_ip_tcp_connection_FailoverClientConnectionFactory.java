<METHOD_START> public void ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) { super( STRING , NUMBER ); Assert . notEmpty ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> , STRING ) ; this . java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; for ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory : this . java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) { Assert . state ( ! ( this . isSingleUse ( ) ^ org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isSingleUse ( ) ) , STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . enableManualListenerRegistration ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpListener org.springframework.integration.ip.tcp.connection.TcpListener ) { super. registerListener ( org.springframework.integration.ip.tcp.connection.TcpListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpSender org.springframework.integration.ip.tcp.connection.TcpSender ) { for ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory : this . java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) { org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerSender ( org.springframework.integration.ip.tcp.connection.TcpSender ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) java.lang.Exception { TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = this . getTheConnection ( ) ; if ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport != null && org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isOpen ( ) ) { ( ( org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory.FailoverTcpConnection ) org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . void ( ) ; return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; } org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory.FailoverTcpConnection org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory.FailoverTcpConnection = new org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory.FailoverTcpConnection ( this . java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; if ( getListener ( ) != null ) { org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory.FailoverTcpConnection . registerListener ( getListener ( ) ) ; } org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory.FailoverTcpConnection . void ( ) ; return org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory.FailoverTcpConnection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory : this . java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) { org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . enableManualListenerRegistration ( ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . start ( ) ; } this . setActive ( true ) ; super. start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . setActive ( false ) ; for ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory : this . java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) { org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { boolean boolean = true ; for ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory : this . java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) { boolean = ! boolean ? false : org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> private void ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) throws java.lang.Exception { this . java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ; this . java.util.Iterator<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . iterator ( ) ; void ( ) ; this . java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void void ( ) { this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> private synchronized void void ( ) java.lang.Exception { boolean boolean = false ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = null ; if ( ! this . java.util.Iterator<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . hasNext ( ) ) { this . java.util.Iterator<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = this . java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . iterator ( ) ; } boolean boolean = false ; while ( ! boolean ) { try { org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = this . java.util.Iterator<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . next ( ) ; this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getConnectionId ( ) + STRING + org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; } this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . registerListener ( this ) ; this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ; boolean = this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isOpen ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory + STRING + java.lang.Exception . java.lang.String ( ) + STRING ) ; } if ( ! this . java.util.Iterator<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . hasNext ( ) ) { if ( boolean && org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory == null || org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory == org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) { this . boolean = false ; throw java.lang.Exception ; } this . java.util.Iterator<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = this . java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . iterator ( ) ; boolean = true ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . close ( ) ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) throws java.lang.Exception { boolean boolean = false ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = null ; boolean boolean = false ; while ( ! boolean ) { try { org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ; this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . send ( org.springframework.integration.ip.tcp.connection.Message<> ) ; boolean = true ; } catch ( java.lang.Exception java.lang.Exception ) { if ( boolean && org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory == org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) { logger . error ( STRING , java.lang.Exception ) ; this . boolean = false ; throw java.lang.Exception ; } boolean = true ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getConnectionId ( ) + STRING , java.lang.Exception ) ; } this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . close ( ) ; void ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getConnectionId ( ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getPayload ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getHostName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getHostAddress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getPort ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getDeserializerStateKey ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpSender org.springframework.integration.ip.tcp.connection.TcpSender ) { this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . registerSender ( org.springframework.integration.ip.tcp.connection.TcpSender ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String + STRING + this . java.util.concurrent.atomic.AtomicLong ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.SocketInfo org.springframework.integration.ip.tcp.connection.SocketInfo ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getSocketInfo ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isServer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper ) { this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . setMapper ( org.springframework.integration.ip.tcp.connection.TcpMessageMapper ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.Deserializer<?> < ? > org.springframework.integration.ip.tcp.connection.Deserializer<?> ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getDeserializer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Deserializer < ? > org.springframework.integration.ip.tcp.connection.Deserializer<?> ) { this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . setDeserializer ( org.springframework.integration.ip.tcp.connection.Deserializer<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.Serializer<?> < ? > org.springframework.integration.ip.tcp.connection.Serializer<?> ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getSerializer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Serializer < ? > org.springframework.integration.ip.tcp.connection.Serializer<?> ) { this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . setSerializer ( org.springframework.integration.ip.tcp.connection.Serializer<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.net.ssl.SSLSession javax.net.ssl.SSLSession ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getSslSession ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) { if ( this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getConnectionId ( ) . equals ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ) ) { AbstractIntegrationMessageBuilder < ? > org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<?> = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory .this . getMessageBuilderFactory ( ) . fromMessage ( org.springframework.integration.ip.tcp.connection.Message<> ) . setHeader ( IpHeaders . CONNECTION_ID , this . java.lang.String ( ) ) ; if ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . ACTUAL_CONNECTION_ID ) == null ) { org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<> . setHeader ( IpHeaders . ACTUAL_CONNECTION_ID , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ) ; } return this . getListener ( ) . onMessage ( org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<> . build ( ) ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.ip.tcp.connection.Message<> ) ; } return false ; } }  <METHOD_END>
