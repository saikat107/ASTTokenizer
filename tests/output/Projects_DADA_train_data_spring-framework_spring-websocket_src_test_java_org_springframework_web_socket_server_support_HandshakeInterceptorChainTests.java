<METHOD_START> @ Before public void void ( ) { org.springframework.web.socket.server.support.HandshakeInterceptor = mock ( HandshakeInterceptor .class ) ; org.springframework.web.socket.server.support.HandshakeInterceptor = mock ( HandshakeInterceptor .class ) ; org.springframework.web.socket.server.support.HandshakeInterceptor = mock ( HandshakeInterceptor .class ) ; java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> = java.util.Arrays . java.util.List ( org.springframework.web.socket.server.support.HandshakeInterceptor , org.springframework.web.socket.server.support.HandshakeInterceptor , org.springframework.web.socket.server.support.HandshakeInterceptor ) ; org.springframework.web.socket.server.support.WebSocketHandler = mock ( WebSocketHandler .class ) ; java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.socket.server.support.HandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) . willReturn ( true ) ; given ( org.springframework.web.socket.server.support.HandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) . willReturn ( true ) ; given ( org.springframework.web.socket.server.support.HandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) . willReturn ( true ) ; HandshakeInterceptorChain org.springframework.web.socket.server.support.HandshakeInterceptorChain = new HandshakeInterceptorChain ( java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> , org.springframework.web.socket.server.support.WebSocketHandler ) ; org.springframework.web.socket.server.support.HandshakeInterceptorChain . applyBeforeHandshake ( request , response , java.util.Map<java.lang.String,java.lang.Object> ) ; verify ( org.springframework.web.socket.server.support.HandshakeInterceptor ) . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; verify ( org.springframework.web.socket.server.support.HandshakeInterceptor ) . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; verify ( org.springframework.web.socket.server.support.HandshakeInterceptor ) . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; verifyNoMoreInteractions ( org.springframework.web.socket.server.support.HandshakeInterceptor , org.springframework.web.socket.server.support.HandshakeInterceptor , org.springframework.web.socket.server.support.HandshakeInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.socket.server.support.HandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) . willReturn ( true ) ; given ( org.springframework.web.socket.server.support.HandshakeInterceptor . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) . willReturn ( false ) ; HandshakeInterceptorChain org.springframework.web.socket.server.support.HandshakeInterceptorChain = new HandshakeInterceptorChain ( java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> , org.springframework.web.socket.server.support.WebSocketHandler ) ; org.springframework.web.socket.server.support.HandshakeInterceptorChain . applyBeforeHandshake ( request , response , java.util.Map<java.lang.String,java.lang.Object> ) ; verify ( org.springframework.web.socket.server.support.HandshakeInterceptor ) . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; verify ( org.springframework.web.socket.server.support.HandshakeInterceptor ) . afterHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , null ) ; verify ( org.springframework.web.socket.server.support.HandshakeInterceptor ) . beforeHandshake ( request , response , org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; verifyNoMoreInteractions ( org.springframework.web.socket.server.support.HandshakeInterceptor , org.springframework.web.socket.server.support.HandshakeInterceptor , org.springframework.web.socket.server.support.HandshakeInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HandshakeInterceptorChain org.springframework.web.socket.server.support.HandshakeInterceptorChain = new HandshakeInterceptorChain ( java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> , org.springframework.web.socket.server.support.WebSocketHandler ) ; org.springframework.web.socket.server.support.HandshakeInterceptorChain . applyAfterHandshake ( request , response , null ) ; verifyNoMoreInteractions ( org.springframework.web.socket.server.support.HandshakeInterceptor , org.springframework.web.socket.server.support.HandshakeInterceptor , org.springframework.web.socket.server.support.HandshakeInterceptor ) ; }  <METHOD_END>
