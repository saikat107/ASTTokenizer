<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.test.context.ConfigurableApplicationContext , MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { SpringBootTest org.springframework.boot.test.context.SpringBootTest = AnnotatedElementUtils . getMergedAnnotation ( org.springframework.boot.test.context.MergedContextConfiguration . getTestClass ( ) , SpringBootTest .class ) ; if ( org.springframework.boot.test.context.SpringBootTest . webEnvironment ( ) . isEmbedded ( ) ) { void ( org.springframework.boot.test.context.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.boot.test.context.ConfigurableApplicationContext ) { ConfigurableListableBeanFactory org.springframework.boot.test.context.ConfigurableListableBeanFactory = org.springframework.boot.test.context.ConfigurableApplicationContext . getBeanFactory ( ) ; if ( org.springframework.boot.test.context.ConfigurableListableBeanFactory instanceof BeanDefinitionRegistry ) { void ( org.springframework.boot.test.context.ConfigurableApplicationContext , ( BeanDefinitionRegistry ) org.springframework.boot.test.context.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.boot.test.context.ConfigurableApplicationContext , BeanDefinitionRegistry org.springframework.boot.test.context.BeanDefinitionRegistry ) { org.springframework.boot.test.context.BeanDefinitionRegistry . registerBeanDefinition ( TestRestTemplate .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.boot.test.context.SpringBootTestContextCustomizer.TestRestTemplateFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Class<? extends org.springframework.boot.test.context.SpringBootTestContextCustomizer> ( ) . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null || java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) != java.lang.Class<? extends org.springframework.boot.test.context.SpringBootTestContextCustomizer> ( ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.boot.test.context.ApplicationContext )				throws org.springframework.boot.test.context.BeansException { RestTemplateBuilder org.springframework.boot.test.context.RestTemplateBuilder = org.springframework.boot.test.context.RestTemplateBuilder ( org.springframework.boot.test.context.ApplicationContext ) ; boolean boolean = boolean ( org.springframework.boot.test.context.ApplicationContext ) ; TestRestTemplate org.springframework.boot.test.context.TestRestTemplate = new TestRestTemplate ( org.springframework.boot.test.context.RestTemplateBuilder . build ( ) , null , null , boolean ? org.springframework.boot.test.context.HttpClientOption[] : org.springframework.boot.test.context.HttpClientOption[] ) ; LocalHostUriTemplateHandler org.springframework.boot.test.context.LocalHostUriTemplateHandler = new LocalHostUriTemplateHandler ( org.springframework.boot.test.context.ApplicationContext . getEnvironment ( ) , boolean ? STRING : STRING ) ; org.springframework.boot.test.context.TestRestTemplate . setUriTemplateHandler ( org.springframework.boot.test.context.LocalHostUriTemplateHandler ) ; this . org.springframework.boot.test.context.TestRestTemplate = org.springframework.boot.test.context.TestRestTemplate ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ApplicationContext org.springframework.boot.test.context.ApplicationContext ) { try { AbstractServletWebServerFactory org.springframework.boot.test.context.AbstractServletWebServerFactory = org.springframework.boot.test.context.ApplicationContext . getBean ( AbstractServletWebServerFactory .class ) ; return org.springframework.boot.test.context.AbstractServletWebServerFactory . getSsl ( ) != null && org.springframework.boot.test.context.AbstractServletWebServerFactory . getSsl ( ) . isEnabled ( ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.test.context.NoSuchBeanDefinitionException ) { return false ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.context.RestTemplateBuilder org.springframework.boot.test.context.RestTemplateBuilder ( ApplicationContext org.springframework.boot.test.context.ApplicationContext ) { try { return org.springframework.boot.test.context.ApplicationContext . getBean ( RestTemplateBuilder .class ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.test.context.NoSuchBeanDefinitionException ) { return new RestTemplateBuilder ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return TestRestTemplate .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.context.TestRestTemplate org.springframework.boot.test.context.TestRestTemplate ( ) java.lang.Exception { return this . org.springframework.boot.test.context.TestRestTemplate ; }  <METHOD_END>
