<METHOD_START> public void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable , java.util.concurrent.ThreadPoolExecutor java.util.concurrent.ThreadPoolExecutor ) { if ( ! java.util.concurrent.ThreadPoolExecutor . boolean ( ) ) { try { java.util.concurrent.BlockingQueue<java.lang.Runnable> < java.lang.Runnable > java.util.concurrent.BlockingQueue<java.lang.Runnable> = java.util.concurrent.ThreadPoolExecutor . java.util.concurrent.BlockingQueue<java.lang.Runnable> ( ) ; if ( org.springframework.integration.util.Log . isDebugEnabled ( ) ) { org.springframework.integration.util.Log . debug ( STRING + this . long + STRING ) ; } if ( ! java.util.concurrent.BlockingQueue<java.lang.Runnable> . boolean ( java.lang.Runnable , this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { throw new java.util.concurrent.RejectedExecutionException ( STRING ) ; } if ( org.springframework.integration.util.Log . isDebugEnabled ( ) ) { org.springframework.integration.util.Log . debug ( STRING ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.util.concurrent.RejectedExecutionException ( STRING , java.lang.InterruptedException ) ; } } else { throw new java.util.concurrent.RejectedExecutionException ( STRING ) ; } }  <METHOD_END>
