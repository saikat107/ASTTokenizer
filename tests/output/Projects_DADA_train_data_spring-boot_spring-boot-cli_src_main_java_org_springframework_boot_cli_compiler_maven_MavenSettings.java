<METHOD_START> public void ( Settings org.springframework.boot.cli.compiler.maven.Settings , SettingsDecryptionResult org.springframework.boot.cli.compiler.maven.SettingsDecryptionResult ) { this . boolean = org.springframework.boot.cli.compiler.maven.Settings . isOffline ( ) ; this . org.springframework.boot.cli.compiler.maven.MirrorSelector = org.springframework.boot.cli.compiler.maven.MirrorSelector ( org.springframework.boot.cli.compiler.maven.Settings ) ; this . org.springframework.boot.cli.compiler.maven.AuthenticationSelector = org.springframework.boot.cli.compiler.maven.AuthenticationSelector ( org.springframework.boot.cli.compiler.maven.SettingsDecryptionResult ) ; this . org.springframework.boot.cli.compiler.maven.ProxySelector = org.springframework.boot.cli.compiler.maven.ProxySelector ( org.springframework.boot.cli.compiler.maven.SettingsDecryptionResult ) ; this . java.lang.String = org.springframework.boot.cli.compiler.maven.Settings . getLocalRepository ( ) ; this . java.util.List<org.springframework.boot.cli.compiler.maven.Profile> = java.util.List<org.springframework.boot.cli.compiler.maven.Profile> ( org.springframework.boot.cli.compiler.maven.Settings ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.maven.MirrorSelector org.springframework.boot.cli.compiler.maven.MirrorSelector ( Settings org.springframework.boot.cli.compiler.maven.Settings ) { DefaultMirrorSelector org.springframework.boot.cli.compiler.maven.DefaultMirrorSelector = new DefaultMirrorSelector ( ) ; for ( Mirror org.springframework.boot.cli.compiler.maven.Mirror : org.springframework.boot.cli.compiler.maven.Settings . getMirrors ( ) ) { org.springframework.boot.cli.compiler.maven.DefaultMirrorSelector . add ( org.springframework.boot.cli.compiler.maven.Mirror . getId ( ) , org.springframework.boot.cli.compiler.maven.Mirror . getUrl ( ) , org.springframework.boot.cli.compiler.maven.Mirror . getLayout ( ) , false , org.springframework.boot.cli.compiler.maven.Mirror . getMirrorOf ( ) , org.springframework.boot.cli.compiler.maven.Mirror . getMirrorOfLayouts ( ) ) ; } return org.springframework.boot.cli.compiler.maven.DefaultMirrorSelector ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.maven.AuthenticationSelector org.springframework.boot.cli.compiler.maven.AuthenticationSelector ( SettingsDecryptionResult org.springframework.boot.cli.compiler.maven.SettingsDecryptionResult ) { DefaultAuthenticationSelector org.springframework.boot.cli.compiler.maven.DefaultAuthenticationSelector = new DefaultAuthenticationSelector ( ) ; for ( Server org.springframework.boot.cli.compiler.maven.Server : org.springframework.boot.cli.compiler.maven.SettingsDecryptionResult . getServers ( ) ) { AuthenticationBuilder org.springframework.boot.cli.compiler.maven.AuthenticationBuilder = new AuthenticationBuilder ( ) ; org.springframework.boot.cli.compiler.maven.AuthenticationBuilder . addUsername ( org.springframework.boot.cli.compiler.maven.Server . getUsername ( ) ) . addPassword ( org.springframework.boot.cli.compiler.maven.Server . getPassword ( ) ) ; org.springframework.boot.cli.compiler.maven.AuthenticationBuilder . addPrivateKey ( org.springframework.boot.cli.compiler.maven.Server . getPrivateKey ( ) , org.springframework.boot.cli.compiler.maven.Server . getPassphrase ( ) ) ; org.springframework.boot.cli.compiler.maven.DefaultAuthenticationSelector . add ( org.springframework.boot.cli.compiler.maven.Server . getId ( ) , org.springframework.boot.cli.compiler.maven.AuthenticationBuilder . build ( ) ) ; } return new ConservativeAuthenticationSelector ( org.springframework.boot.cli.compiler.maven.DefaultAuthenticationSelector ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.maven.ProxySelector org.springframework.boot.cli.compiler.maven.ProxySelector ( SettingsDecryptionResult org.springframework.boot.cli.compiler.maven.SettingsDecryptionResult ) { DefaultProxySelector org.springframework.boot.cli.compiler.maven.DefaultProxySelector = new DefaultProxySelector ( ) ; for ( Proxy org.springframework.boot.cli.compiler.maven.Proxy : org.springframework.boot.cli.compiler.maven.SettingsDecryptionResult . getProxies ( ) ) { Authentication org.springframework.boot.cli.compiler.maven.Authentication = new AuthenticationBuilder ( ) . addUsername ( org.springframework.boot.cli.compiler.maven.Proxy . getUsername ( ) ) . addPassword ( org.springframework.boot.cli.compiler.maven.Proxy . getPassword ( ) ) . build ( ) ; org.springframework.boot.cli.compiler.maven.DefaultProxySelector . add ( new org . org.eclipse . org.eclipse . org.eclipse . org.eclipse ( org.springframework.boot.cli.compiler.maven.Proxy . getProtocol ( ) , org.springframework.boot.cli.compiler.maven.Proxy . getHost ( ) , org.springframework.boot.cli.compiler.maven.Proxy . getPort ( ) , org.springframework.boot.cli.compiler.maven.Authentication ) , org.springframework.boot.cli.compiler.maven.Proxy . getNonProxyHosts ( ) ) ; } return org.springframework.boot.cli.compiler.maven.DefaultProxySelector ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.compiler.maven.Profile> < Profile > java.util.List<org.springframework.boot.cli.compiler.maven.Profile> ( Settings org.springframework.boot.cli.compiler.maven.Settings ) { org.springframework.boot.cli.compiler.maven.MavenSettings.SpringBootCliModelProblemCollector org.springframework.boot.cli.compiler.maven.MavenSettings.SpringBootCliModelProblemCollector = new org.springframework.boot.cli.compiler.maven.MavenSettings.SpringBootCliModelProblemCollector ( ) ; java.util.List<org.apache.maven.model.Profile> < org . org.apache . org.apache . org.apache . org.apache > java.util.List<org.apache.maven.model.Profile> = org.springframework.boot.cli.compiler.maven.DefaultProfileSelector ( ) . getActiveProfiles ( java.util.List<org.apache.maven.model.Profile> ( org.springframework.boot.cli.compiler.maven.Settings . getProfiles ( ) ) , new org.springframework.boot.cli.compiler.maven.MavenSettings.SpringBootCliProfileActivationContext ( org.springframework.boot.cli.compiler.maven.Settings . getActiveProfiles ( ) ) , org.springframework.boot.cli.compiler.maven.MavenSettings.SpringBootCliModelProblemCollector ) ; if ( ! org.springframework.boot.cli.compiler.maven.MavenSettings.SpringBootCliModelProblemCollector . java.util.List<org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest> ( ) . isEmpty ( ) ) { throw new java.lang.IllegalStateException ( java.lang.String ( org.springframework.boot.cli.compiler.maven.MavenSettings.SpringBootCliModelProblemCollector ) ) ; } java.util.List<org.springframework.boot.cli.compiler.maven.Profile> < Profile > java.util.List<org.springframework.boot.cli.compiler.maven.Profile> = new java.util.ArrayList<org.springframework.boot.cli.compiler.maven.Profile> <> ( ) ; java.util.Map<java.lang.String,org.springframework.boot.cli.compiler.maven.Profile> < java.lang.String , Profile > java.util.Map<java.lang.String,org.springframework.boot.cli.compiler.maven.Profile> = org.springframework.boot.cli.compiler.maven.Settings . getProfilesAsMap ( ) ; for ( org . org.apache . org.apache . org.apache . org.apache org.apache.maven.model.Profile : java.util.List<org.apache.maven.model.Profile> ) { java.util.List<org.springframework.boot.cli.compiler.maven.Profile> . add ( java.util.Map<java.lang.String,org.springframework.boot.cli.compiler.maven.Profile> . get ( org.apache.maven.model.Profile . getId ( ) ) ) ; } return java.util.List<org.springframework.boot.cli.compiler.maven.Profile> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( org.springframework.boot.cli.compiler.maven.MavenSettings.SpringBootCliModelProblemCollector org.springframework.boot.cli.compiler.maven.MavenSettings.SpringBootCliModelProblemCollector ) { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter ( java.io.StringWriter ) ; java.io.PrintWriter . void ( STRING ) ; for ( ModelProblemCollectorRequest org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest : org.springframework.boot.cli.compiler.maven.MavenSettings.SpringBootCliModelProblemCollector . java.util.List<org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest> ( ) ) { java.io.PrintWriter . void ( STRING + org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest . getMessage ( ) + ( org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest . getLocation ( ) != null ? STRING + org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest . getLocation ( ) : STRING ) ) ; if ( org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest . getException ( ) != null ) { java.io.PrintWriter . void ( java.lang.String ( org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest . getException ( ) , STRING ) ) ; } } return java.io.StringWriter . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception , java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String ( java.lang.Exception ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter ( java.io.StringWriter ) ; java.lang.Exception . void ( java.io.PrintWriter ) ; return java.io.StringWriter . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter ( java.io.StringWriter ) ; java.lang.String java.lang.String ; java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader ( new java.io.StringReader ( java.lang.String ) ) ; try { while ( ( java.lang.String = java.io.BufferedReader . java.lang.String ( ) ) != null ) { java.io.PrintWriter . void ( java.lang.String + java.lang.String ) ; } } catch ( java.io.IOException java.io.IOException ) { return java.lang.String ; } return java.io.StringWriter . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.maven.DefaultProfileSelector org.springframework.boot.cli.compiler.maven.DefaultProfileSelector ( ) { DefaultProfileSelector org.springframework.boot.cli.compiler.maven.DefaultProfileSelector = new DefaultProfileSelector ( ) ; org.springframework.boot.cli.compiler.maven.DefaultProfileSelector . addProfileActivator ( new FileProfileActivator ( ) . setPathTranslator ( new DefaultPathTranslator ( ) ) ) ; org.springframework.boot.cli.compiler.maven.DefaultProfileSelector . addProfileActivator ( new JdkVersionProfileActivator ( ) ) ; org.springframework.boot.cli.compiler.maven.DefaultProfileSelector . addProfileActivator ( new PropertyProfileActivator ( ) ) ; org.springframework.boot.cli.compiler.maven.DefaultProfileSelector . addProfileActivator ( new OperatingSystemProfileActivator ( ) ) ; return org.springframework.boot.cli.compiler.maven.DefaultProfileSelector ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.apache.maven.model.Profile> < org . org.apache . org.apache . org.apache . org.apache > java.util.List<org.apache.maven.model.Profile> ( java.util.List<org.springframework.boot.cli.compiler.maven.Profile> < Profile > java.util.List<org.springframework.boot.cli.compiler.maven.Profile> ) { java.util.List<org.apache.maven.model.Profile> < org . org.apache . org.apache . org.apache . org.apache > java.util.List<org.apache.maven.model.Profile> = new java.util.ArrayList<org.apache.maven.model.Profile> <> ( ) ; for ( Profile org.springframework.boot.cli.compiler.maven.Profile : java.util.List<org.springframework.boot.cli.compiler.maven.Profile> ) { org . org.apache . org.apache . org.apache . org.apache org.apache.maven.model.Profile = new org . org.apache . org.apache . org.apache . org.apache ( ) ; org.apache.maven.model.Profile . setId ( org.springframework.boot.cli.compiler.maven.Profile . getId ( ) ) ; if ( org.springframework.boot.cli.compiler.maven.Profile . getActivation ( ) != null ) { org.apache.maven.model.Profile . setActivation ( org.apache.maven.model.Activation ( org.springframework.boot.cli.compiler.maven.Profile . getActivation ( ) ) ) ; } java.util.List<org.apache.maven.model.Profile> . add ( org.apache.maven.model.Profile ) ; } return java.util.List<org.apache.maven.model.Profile> ; }  <METHOD_END>
<METHOD_START> private org . org.apache . org.apache . org.apache . org.apache.maven.model.Activation org.apache.maven.model.Activation ( Activation org.springframework.boot.cli.compiler.maven.Activation ) { org . org.apache . org.apache . org.apache . org.apache org.apache.maven.model.Activation = new org . org.apache . org.apache . org.apache . org.apache ( ) ; org.apache.maven.model.Activation . setActiveByDefault ( org.springframework.boot.cli.compiler.maven.Activation . isActiveByDefault ( ) ) ; if ( org.springframework.boot.cli.compiler.maven.Activation . getFile ( ) != null ) { ActivationFile org.springframework.boot.cli.compiler.maven.ActivationFile = new ActivationFile ( ) ; org.springframework.boot.cli.compiler.maven.ActivationFile . setExists ( org.springframework.boot.cli.compiler.maven.Activation . getFile ( ) . getExists ( ) ) ; org.springframework.boot.cli.compiler.maven.ActivationFile . setMissing ( org.springframework.boot.cli.compiler.maven.Activation . getFile ( ) . getMissing ( ) ) ; org.apache.maven.model.Activation . setFile ( org.springframework.boot.cli.compiler.maven.ActivationFile ) ; } org.apache.maven.model.Activation . setJdk ( org.springframework.boot.cli.compiler.maven.Activation . getJdk ( ) ) ; if ( org.springframework.boot.cli.compiler.maven.Activation . getOs ( ) != null ) { ActivationOS org.springframework.boot.cli.compiler.maven.ActivationOS = new ActivationOS ( ) ; org.springframework.boot.cli.compiler.maven.ActivationOS . setArch ( org.springframework.boot.cli.compiler.maven.Activation . getOs ( ) . getArch ( ) ) ; org.springframework.boot.cli.compiler.maven.ActivationOS . setFamily ( org.springframework.boot.cli.compiler.maven.Activation . getOs ( ) . getFamily ( ) ) ; org.springframework.boot.cli.compiler.maven.ActivationOS . setName ( org.springframework.boot.cli.compiler.maven.Activation . getOs ( ) . getName ( ) ) ; org.springframework.boot.cli.compiler.maven.ActivationOS . setVersion ( org.springframework.boot.cli.compiler.maven.Activation . getOs ( ) . getVersion ( ) ) ; org.apache.maven.model.Activation . setOs ( org.springframework.boot.cli.compiler.maven.ActivationOS ) ; } if ( org.springframework.boot.cli.compiler.maven.Activation . getProperty ( ) != null ) { ActivationProperty org.springframework.boot.cli.compiler.maven.ActivationProperty = new ActivationProperty ( ) ; org.springframework.boot.cli.compiler.maven.ActivationProperty . setName ( org.springframework.boot.cli.compiler.maven.Activation . getProperty ( ) . getName ( ) ) ; org.springframework.boot.cli.compiler.maven.ActivationProperty . setValue ( org.springframework.boot.cli.compiler.maven.Activation . getProperty ( ) . getValue ( ) ) ; org.apache.maven.model.Activation . setProperty ( org.springframework.boot.cli.compiler.maven.ActivationProperty ) ; } return org.apache.maven.model.Activation ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.cli.compiler.maven.MirrorSelector org.springframework.boot.cli.compiler.maven.MirrorSelector ( ) { return this . org.springframework.boot.cli.compiler.maven.MirrorSelector ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.cli.compiler.maven.AuthenticationSelector org.springframework.boot.cli.compiler.maven.AuthenticationSelector ( ) { return this . org.springframework.boot.cli.compiler.maven.AuthenticationSelector ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.cli.compiler.maven.ProxySelector org.springframework.boot.cli.compiler.maven.ProxySelector ( ) { return this . org.springframework.boot.cli.compiler.maven.ProxySelector ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.cli.compiler.maven.Profile> < Profile > java.util.List<org.springframework.boot.cli.compiler.maven.Profile> ( ) { return this . java.util.List<org.springframework.boot.cli.compiler.maven.Profile> ; }  <METHOD_END>
<METHOD_START> void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.Collections . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return ( java.util.Map ) java.lang.System . java.util.Properties ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.File java.io.File ( ) { return new java.io.File ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ModelProblemCollectorRequest org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest ) { this . java.util.List<org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest> . add ( org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest ) ; }  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest> < ModelProblemCollectorRequest > java.util.List<org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest> ( ) { return this . java.util.List<org.springframework.boot.cli.compiler.maven.ModelProblemCollectorRequest> ; }  <METHOD_END>
