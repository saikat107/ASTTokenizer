<METHOD_START> public void ( ) { setNestedTransactionAllowed ( true ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { this(); void ( javax.sql.DataSource ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource ) { if ( javax.sql.DataSource instanceof TransactionAwareDataSourceProxy ) { this . javax.sql.DataSource = ( ( TransactionAwareDataSourceProxy ) javax.sql.DataSource ) . getTargetDataSource ( ) ; } else { this . javax.sql.DataSource = javax.sql.DataSource ; } }  <METHOD_END>
<METHOD_START> public javax.sql.DataSource javax.sql.DataSource ( ) { return this . javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( javax.sql.DataSource ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return javax.sql.DataSource ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject = new org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject ( ) ; org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . setSavepointAllowed ( isNestedTransactionAllowed ( ) ) ; ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . getResource ( this . javax.sql.DataSource ) ; org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . void ( org.springframework.jdbc.datasource.ConnectionHolder , false ) ; return org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Object java.lang.Object ) { org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject = ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject ) java.lang.Object ; return ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) != null && org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . isTransactionActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.jdbc.datasource.TransactionDefinition ) { org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject = ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject ) java.lang.Object ; java.sql.Connection java.sql.Connection = null ; try { if ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) == null || org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . isSynchronizedWithTransaction ( ) ) { java.sql.Connection java.sql.Connection = this . javax.sql.DataSource . java.sql.Connection ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.sql.Connection + STRING ) ; } org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . void ( new ConnectionHolder ( java.sql.Connection ) , true ) ; } org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . setSynchronizedWithTransaction ( true ) ; java.sql.Connection = org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . getConnection ( ) ; java.lang.Integer java.lang.Integer = DataSourceUtils . prepareConnectionForTransaction ( java.sql.Connection , org.springframework.jdbc.datasource.TransactionDefinition ) ; org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . setPreviousIsolationLevel ( java.lang.Integer ) ; if ( java.sql.Connection . boolean ( ) ) { org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . void ( true ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.sql.Connection + STRING ) ; } java.sql.Connection . void ( false ) ; } void ( java.sql.Connection , org.springframework.jdbc.datasource.TransactionDefinition ) ; org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . setTransactionActive ( true ) ; int int = determineTimeout ( org.springframework.jdbc.datasource.TransactionDefinition ) ; if ( int != TransactionDefinition . TIMEOUT_DEFAULT ) { org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . setTimeoutInSeconds ( int ) ; } if ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . boolean ( ) ) { TransactionSynchronizationManager . bindResource ( javax.sql.DataSource ( ) , org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . boolean ( ) ) { DataSourceUtils . releaseConnection ( java.sql.Connection , this . javax.sql.DataSource ) ; org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . void ( null , false ) ; } throw new CannotCreateTransactionException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject = ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject ) java.lang.Object ; org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . void ( null ) ; return TransactionSynchronizationManager . unbindResource ( this . javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { TransactionSynchronizationManager . bindResource ( this . javax.sql.DataSource , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.jdbc.datasource.DefaultTransactionStatus ) { org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject = ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject ) org.springframework.jdbc.datasource.DefaultTransactionStatus . getTransaction ( ) ; java.sql.Connection java.sql.Connection = org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . getConnection ( ) ; if ( org.springframework.jdbc.datasource.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + java.sql.Connection + STRING ) ; } try { java.sql.Connection . void ( ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { throw new TransactionSystemException ( STRING , java.sql.SQLException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.jdbc.datasource.DefaultTransactionStatus ) { org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject = ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject ) org.springframework.jdbc.datasource.DefaultTransactionStatus . getTransaction ( ) ; java.sql.Connection java.sql.Connection = org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . getConnection ( ) ; if ( org.springframework.jdbc.datasource.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + java.sql.Connection + STRING ) ; } try { java.sql.Connection . void ( ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { throw new TransactionSystemException ( STRING , java.sql.SQLException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.jdbc.datasource.DefaultTransactionStatus ) { org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject = ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject ) org.springframework.jdbc.datasource.DefaultTransactionStatus . getTransaction ( ) ; if ( org.springframework.jdbc.datasource.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . getConnection ( ) + STRING ) ; } org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject = ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject ) java.lang.Object ; if ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . boolean ( ) ) { TransactionSynchronizationManager . unbindResource ( this . javax.sql.DataSource ) ; } java.sql.Connection java.sql.Connection = org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . getConnection ( ) ; try { if ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . boolean ( ) ) { java.sql.Connection . void ( true ) ; } DataSourceUtils . resetConnectionAfterTransaction ( java.sql.Connection , org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getPreviousIsolationLevel ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . debug ( STRING , java.lang.Throwable ) ; } if ( org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . boolean ( ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.sql.Connection + STRING ) ; } DataSourceUtils . releaseConnection ( java.sql.Connection , this . javax.sql.DataSource ) ; } org.springframework.jdbc.datasource.DataSourceTransactionManager.DataSourceTransactionObject . getConnectionHolder ( ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.sql.Connection java.sql.Connection , TransactionDefinition org.springframework.jdbc.datasource.TransactionDefinition )			throws java.sql.SQLException { if ( boolean ( ) && org.springframework.jdbc.datasource.TransactionDefinition . isReadOnly ( ) ) { java.sql.Statement java.sql.Statement = java.sql.Connection . java.sql.Statement ( ) ; try { java.sql.Statement . int ( STRING ) ; } finally { java.sql.Statement . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder , boolean boolean ) { super. setConnectionHolder ( org.springframework.jdbc.datasource.ConnectionHolder ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ) { getConnectionHolder ( ) . setRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return getConnectionHolder ( ) . isRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { TransactionSynchronizationUtils . triggerFlush ( ) ; } }  <METHOD_END>
