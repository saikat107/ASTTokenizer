<METHOD_START> @ Test public void void ( ) { SystemProperties . doWithSystemProperties ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , STRING , STRING , STRING , STRING ) ; } } , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SystemProperties . doWithSystemProperties ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , STRING , STRING ) ; } } , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SystemProperties . doWithSystemProperties ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , STRING , STRING , STRING , STRING , STRING ) ; } } , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SystemProperties . doWithSystemProperties ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , STRING , STRING , STRING , STRING , STRING ) ; } } , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SystemProperties . doWithSystemProperties ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , STRING , STRING , STRING , STRING , STRING , STRING ) ; } } , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> = RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , STRING , STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> , java.lang.String ... java.lang.String[] ) { assertThat ( java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> ) . hasSize ( java.lang.String[] . int ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( RepositoryConfiguration org.springframework.boot.cli.compiler.RepositoryConfiguration : java.util.List<org.springframework.boot.cli.compiler.RepositoryConfiguration> ) { java.util.Set<java.lang.String> . boolean ( org.springframework.boot.cli.compiler.RepositoryConfiguration . getName ( ) ) ; } assertThat ( java.util.Set<java.lang.String> ) . containsOnly ( java.lang.String[] ) ; }  <METHOD_END>
