<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.config.annotation.TaskScheduler ) { super( org.springframework.web.socket.config.annotation.TaskScheduler ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> ( ) { return new LinkedMultiValueMap <> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> , SockJsService org.springframework.web.socket.config.annotation.SockJsService , WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String java.lang.String ) { SockJsHttpRequestHandler org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler = new SockJsHttpRequestHandler ( org.springframework.web.socket.config.annotation.SockJsService , org.springframework.web.socket.config.annotation.WebSocketHandler ) ; org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . add ( org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> , WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler , HandshakeInterceptor [] org.springframework.web.socket.config.annotation.HandshakeInterceptor[] , java.lang.String java.lang.String ) { WebSocketHttpRequestHandler org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler = new WebSocketHttpRequestHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.HandshakeHandler ) ; if ( ! ObjectUtils . isEmpty ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ) { org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . setHandshakeInterceptors ( java.util.Arrays . java.util.List ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ) ; } org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . add ( org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler , java.lang.String ) ; }  <METHOD_END>
