<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( MessageConverter org.springframework.messaging.handler.annotation.support.MessageConverter ) { this . org.springframework.messaging.handler.annotation.support.MessageConverter = org.springframework.messaging.handler.annotation.support.MessageConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter ) { return Message .class . boolean ( org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter , Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.messaging.handler.annotation.support.MethodParameter . getParameterType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.messaging.handler.annotation.support.MethodParameter ) ; if ( ! java.lang.Class<> . boolean ( org.springframework.messaging.handler.annotation.support.Message<> . getClass ( ) ) ) { throw new MethodArgumentTypeMismatchException ( org.springframework.messaging.handler.annotation.support.Message<> , org.springframework.messaging.handler.annotation.support.MethodParameter , STRING + ClassUtils . getDescriptiveType ( org.springframework.messaging.handler.annotation.support.Message<> ) + STRING + ClassUtils . getQualifiedName ( java.lang.Class<> ) + STRING ) ; } java.lang.Object java.lang.Object = org.springframework.messaging.handler.annotation.support.Message<> . getPayload ( ) ; if ( java.lang.Object == null || java.lang.Class<> . boolean ( java.lang.Object ) ) { return org.springframework.messaging.handler.annotation.support.Message<> ; } if ( boolean ( java.lang.Object ) ) { throw new MessageConversionException ( org.springframework.messaging.handler.annotation.support.Message<> , STRING + ClassUtils . getDescriptiveType ( java.lang.Object ) + STRING + ClassUtils . getQualifiedName ( java.lang.Class<> ) + STRING ) ; } java.lang.Object = java.lang.Object ( org.springframework.messaging.handler.annotation.support.Message<> , org.springframework.messaging.handler.annotation.support.MethodParameter , java.lang.Class<> ) ; return MessageBuilder . createMessage ( java.lang.Object , org.springframework.messaging.handler.annotation.support.Message<> . getHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter ) { java.lang.reflect.Type java.lang.reflect.Type = org.springframework.messaging.handler.annotation.support.MethodParameter . getGenericParameterType ( ) ; ResolvableType org.springframework.messaging.handler.annotation.support.ResolvableType = ResolvableType . forType ( java.lang.reflect.Type ) . as ( Message .class ) ; return org.springframework.messaging.handler.annotation.support.ResolvableType . getGeneric ( NUMBER ) . resolve ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return true ; } else if ( java.lang.Object instanceof byte [] ) { return ( ( byte [] ) java.lang.Object ) . int == NUMBER ; } else if ( java.lang.Object instanceof java.lang.String ) { return ! StringUtils . hasText ( ( java.lang.String ) java.lang.Object ) ; } else { return false ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message < ? > org.springframework.messaging.handler.annotation.support.Message<?> , MethodParameter org.springframework.messaging.handler.annotation.support.MethodParameter , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Object java.lang.Object = null ; if ( this . org.springframework.messaging.handler.annotation.support.MessageConverter instanceof SmartMessageConverter ) { SmartMessageConverter org.springframework.messaging.handler.annotation.support.SmartMessageConverter = ( SmartMessageConverter ) this . org.springframework.messaging.handler.annotation.support.MessageConverter ; java.lang.Object = org.springframework.messaging.handler.annotation.support.SmartMessageConverter . fromMessage ( org.springframework.messaging.handler.annotation.support.Message<> , java.lang.Class<> , org.springframework.messaging.handler.annotation.support.MethodParameter ) ; } else if ( this . org.springframework.messaging.handler.annotation.support.MessageConverter != null ) { java.lang.Object = this . org.springframework.messaging.handler.annotation.support.MessageConverter . fromMessage ( org.springframework.messaging.handler.annotation.support.Message<> , java.lang.Class<> ) ; } if ( java.lang.Object == null ) { throw new MessageConversionException ( org.springframework.messaging.handler.annotation.support.Message<> , STRING + ClassUtils . getDescriptiveType ( org.springframework.messaging.handler.annotation.support.Message<> . getPayload ( ) ) + STRING + ClassUtils . getQualifiedName ( java.lang.Class<> ) + STRING ) ; } return java.lang.Object ; }  <METHOD_END>
