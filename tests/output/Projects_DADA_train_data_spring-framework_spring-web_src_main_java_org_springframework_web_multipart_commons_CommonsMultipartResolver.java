<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( ServletContext org.springframework.web.multipart.commons.ServletContext ) { this(); void ( org.springframework.web.multipart.commons.ServletContext ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.multipart.commons.FileUpload org.springframework.web.multipart.commons.FileUpload ( FileItemFactory org.springframework.web.multipart.commons.FileItemFactory ) { return new ServletFileUpload ( org.springframework.web.multipart.commons.FileItemFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.multipart.commons.ServletContext ) { if ( ! isUploadTempDirSpecified ( ) ) { getFileItemFactory ( ) . setRepository ( WebUtils . getTempDir ( org.springframework.web.multipart.commons.ServletContext ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.web.multipart.commons.HttpServletRequest ) { return ( org.springframework.web.multipart.commons.HttpServletRequest != null && ServletFileUpload . isMultipartContent ( org.springframework.web.multipart.commons.HttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.multipart.commons.MultipartHttpServletRequest org.springframework.web.multipart.commons.MultipartHttpServletRequest ( final HttpServletRequest org.springframework.web.multipart.commons.HttpServletRequest ) throws org.springframework.web.multipart.commons.MultipartException { Assert . notNull ( org.springframework.web.multipart.commons.HttpServletRequest , STRING ) ; if ( this . boolean ) { return new DefaultMultipartHttpServletRequest ( org.springframework.web.multipart.commons.HttpServletRequest ) { @ java.lang.Override protected void void ( ) { MultipartParsingResult org.springframework.web.multipart.commons.MultipartParsingResult = org.springframework.web.multipart.commons.MultipartParsingResult ( org.springframework.web.multipart.commons.HttpServletRequest ) ; setMultipartFiles ( org.springframework.web.multipart.commons.MultipartParsingResult . getMultipartFiles ( ) ) ; setMultipartParameters ( org.springframework.web.multipart.commons.MultipartParsingResult . getMultipartParameters ( ) ) ; setMultipartParameterContentTypes ( org.springframework.web.multipart.commons.MultipartParsingResult . getMultipartParameterContentTypes ( ) ) ; } } ; } else { MultipartParsingResult org.springframework.web.multipart.commons.MultipartParsingResult = org.springframework.web.multipart.commons.MultipartParsingResult ( org.springframework.web.multipart.commons.HttpServletRequest ) ; return new DefaultMultipartHttpServletRequest ( org.springframework.web.multipart.commons.HttpServletRequest , org.springframework.web.multipart.commons.MultipartParsingResult . getMultipartFiles ( ) , org.springframework.web.multipart.commons.MultipartParsingResult . getMultipartParameters ( ) , org.springframework.web.multipart.commons.MultipartParsingResult . getMultipartParameterContentTypes ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { MultipartParsingResult org.springframework.web.multipart.commons.MultipartParsingResult = org.springframework.web.multipart.commons.MultipartParsingResult ( org.springframework.web.multipart.commons.HttpServletRequest ) ; setMultipartFiles ( org.springframework.web.multipart.commons.MultipartParsingResult . getMultipartFiles ( ) ) ; setMultipartParameters ( org.springframework.web.multipart.commons.MultipartParsingResult . getMultipartParameters ( ) ) ; setMultipartParameterContentTypes ( org.springframework.web.multipart.commons.MultipartParsingResult . getMultipartParameterContentTypes ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.multipart.commons.MultipartParsingResult org.springframework.web.multipart.commons.MultipartParsingResult ( HttpServletRequest org.springframework.web.multipart.commons.HttpServletRequest ) throws org.springframework.web.multipart.commons.MultipartException { java.lang.String java.lang.String = java.lang.String ( org.springframework.web.multipart.commons.HttpServletRequest ) ; FileUpload org.springframework.web.multipart.commons.FileUpload = prepareFileUpload ( java.lang.String ) ; try { java.util.List<org.springframework.web.multipart.commons.FileItem> < FileItem > java.util.List<org.springframework.web.multipart.commons.FileItem> = ( ( ServletFileUpload ) org.springframework.web.multipart.commons.FileUpload ) . parseRequest ( org.springframework.web.multipart.commons.HttpServletRequest ) ; return parseFileItems ( java.util.List<org.springframework.web.multipart.commons.FileItem> , java.lang.String ) ; } catch ( FileUploadBase . FileUploadBase FileUploadBase.SizeLimitExceededException ) { throw new MaxUploadSizeExceededException ( org.springframework.web.multipart.commons.FileUpload . getSizeMax ( ) , FileUploadBase.SizeLimitExceededException ) ; } catch ( FileUploadBase . FileUploadBase FileUploadBase.FileSizeLimitExceededException ) { throw new MaxUploadSizeExceededException ( org.springframework.web.multipart.commons.FileUpload . getFileSizeMax ( ) , FileUploadBase.FileSizeLimitExceededException ) ; } catch ( FileUploadException org.springframework.web.multipart.commons.FileUploadException ) { throw new MultipartException ( STRING , org.springframework.web.multipart.commons.FileUploadException ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( HttpServletRequest org.springframework.web.multipart.commons.HttpServletRequest ) { java.lang.String java.lang.String = org.springframework.web.multipart.commons.HttpServletRequest . getCharacterEncoding ( ) ; if ( java.lang.String == null ) { java.lang.String = getDefaultEncoding ( ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MultipartHttpServletRequest org.springframework.web.multipart.commons.MultipartHttpServletRequest ) { if ( org.springframework.web.multipart.commons.MultipartHttpServletRequest != null ) { try { cleanupFileItems ( org.springframework.web.multipart.commons.MultipartHttpServletRequest . getMultiFileMap ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
