<METHOD_START> @ Bean @ ConditionalOnMissingBean ( HiddenHttpMethodFilter .class ) public org.springframework.boot.autoconfigure.web.servlet.OrderedHiddenHttpMethodFilter org.springframework.boot.autoconfigure.web.servlet.OrderedHiddenHttpMethodFilter ( ) { return new OrderedHiddenHttpMethodFilter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( HttpPutFormContentFilter .class ) @ ConditionalOnProperty ( prefix = STRING , name = STRING , matchIfMissing = true ) public org.springframework.boot.autoconfigure.web.servlet.OrderedHttpPutFormContentFilter org.springframework.boot.autoconfigure.web.servlet.OrderedHttpPutFormContentFilter ( ) { return new OrderedHttpPutFormContentFilter ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ResourceProperties org.springframework.boot.autoconfigure.web.servlet.ResourceProperties , WebMvcProperties org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties , ListableBeanFactory org.springframework.boot.autoconfigure.web.servlet.ListableBeanFactory , HttpMessageConverters org.springframework.boot.autoconfigure.web.servlet.HttpMessageConverters , ObjectProvider < org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer > org.springframework.boot.autoconfigure.web.servlet.ObjectProvider<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer> ) { this . org.springframework.boot.autoconfigure.web.servlet.ResourceProperties = org.springframework.boot.autoconfigure.web.servlet.ResourceProperties ; this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties = org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties ; this . org.springframework.boot.autoconfigure.web.servlet.ListableBeanFactory = org.springframework.boot.autoconfigure.web.servlet.ListableBeanFactory ; this . org.springframework.boot.autoconfigure.web.servlet.HttpMessageConverters = org.springframework.boot.autoconfigure.web.servlet.HttpMessageConverters ; this . org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer = org.springframework.boot.autoconfigure.web.servlet.ObjectProvider<org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.web.servlet.HttpMessageConverter<?>> ) { java.util.List<org.springframework.boot.autoconfigure.web.servlet.HttpMessageConverter<?>> . addAll ( this . org.springframework.boot.autoconfigure.web.servlet.HttpMessageConverters . getConverters ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncSupportConfigurer org.springframework.boot.autoconfigure.web.servlet.AsyncSupportConfigurer ) { java.lang.Long java.lang.Long = this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getAsync ( ) . getRequestTimeout ( ) ; if ( java.lang.Long != null ) { org.springframework.boot.autoconfigure.web.servlet.AsyncSupportConfigurer . setDefaultTimeout ( java.lang.Long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContentNegotiationConfigurer org.springframework.boot.autoconfigure.web.servlet.ContentNegotiationConfigurer ) { java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.MediaType> = this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getMediaTypes ( ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.MediaType> < java.lang.String , MediaType > java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.MediaType> : java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.MediaType> . entrySet ( ) ) { org.springframework.boot.autoconfigure.web.servlet.ContentNegotiationConfigurer . mediaType ( java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.MediaType> . getKey ( ) , java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.MediaType> . getValue ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.web.servlet.InternalResourceViewResolver org.springframework.boot.autoconfigure.web.servlet.InternalResourceViewResolver ( ) { InternalResourceViewResolver org.springframework.boot.autoconfigure.web.servlet.InternalResourceViewResolver = new InternalResourceViewResolver ( ) ; org.springframework.boot.autoconfigure.web.servlet.InternalResourceViewResolver . setPrefix ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getView ( ) . getPrefix ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.InternalResourceViewResolver . setSuffix ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getView ( ) . getSuffix ( ) ) ; return org.springframework.boot.autoconfigure.web.servlet.InternalResourceViewResolver ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( View .class ) @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.web.servlet.BeanNameViewResolver org.springframework.boot.autoconfigure.web.servlet.BeanNameViewResolver ( ) { BeanNameViewResolver org.springframework.boot.autoconfigure.web.servlet.BeanNameViewResolver = new BeanNameViewResolver ( ) ; org.springframework.boot.autoconfigure.web.servlet.BeanNameViewResolver . setOrder ( Ordered . LOWEST_PRECEDENCE - NUMBER ) ; return org.springframework.boot.autoconfigure.web.servlet.BeanNameViewResolver ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( ViewResolver .class ) @ ConditionalOnMissingBean ( name = STRING , value = ContentNegotiatingViewResolver .class ) public org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver ( BeanFactory org.springframework.boot.autoconfigure.web.servlet.BeanFactory ) { ContentNegotiatingViewResolver org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver = new ContentNegotiatingViewResolver ( ) ; org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver . setContentNegotiationManager ( org.springframework.boot.autoconfigure.web.servlet.BeanFactory . getBean ( ContentNegotiationManager .class ) ) ; org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver . setOrder ( Ordered . HIGHEST_PRECEDENCE ) ; return org.springframework.boot.autoconfigure.web.servlet.ContentNegotiatingViewResolver ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean @ ConditionalOnProperty ( prefix = STRING , name = STRING ) public org.springframework.boot.autoconfigure.web.servlet.LocaleResolver org.springframework.boot.autoconfigure.web.servlet.LocaleResolver ( ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getLocaleResolver ( ) == WebMvcProperties . LocaleResolver . FIXED ) { return new FixedLocaleResolver ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getLocale ( ) ) ; } AcceptHeaderLocaleResolver org.springframework.boot.autoconfigure.web.servlet.AcceptHeaderLocaleResolver = new AcceptHeaderLocaleResolver ( ) ; org.springframework.boot.autoconfigure.web.servlet.AcceptHeaderLocaleResolver . setDefaultLocale ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getLocale ( ) ) ; return org.springframework.boot.autoconfigure.web.servlet.AcceptHeaderLocaleResolver ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnProperty ( prefix = STRING , name = STRING ) public org.springframework.boot.autoconfigure.web.servlet.Formatter<java.util.Date> < java.util.Date > org.springframework.boot.autoconfigure.web.servlet.Formatter<java.util.Date> ( ) { return new DateFormatter ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getDateFormat ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.MessageCodesResolver org.springframework.boot.autoconfigure.web.servlet.MessageCodesResolver ( ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getMessageCodesResolverFormat ( ) != null ) { DefaultMessageCodesResolver org.springframework.boot.autoconfigure.web.servlet.DefaultMessageCodesResolver = new DefaultMessageCodesResolver ( ) ; org.springframework.boot.autoconfigure.web.servlet.DefaultMessageCodesResolver . setMessageCodeFormatter ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getMessageCodesResolverFormat ( ) ) ; return org.springframework.boot.autoconfigure.web.servlet.DefaultMessageCodesResolver ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FormatterRegistry org.springframework.boot.autoconfigure.web.servlet.FormatterRegistry ) { for ( Converter < ? , ? > org.springframework.boot.autoconfigure.web.servlet.Converter<?,?> : java.util.Collection<org.springframework.boot.autoconfigure.web.servlet.Converter> ( Converter .class ) ) { org.springframework.boot.autoconfigure.web.servlet.FormatterRegistry . addConverter ( org.springframework.boot.autoconfigure.web.servlet.Converter<,> ) ; } for ( GenericConverter org.springframework.boot.autoconfigure.web.servlet.GenericConverter : java.util.Collection<org.springframework.boot.autoconfigure.web.servlet.GenericConverter> ( GenericConverter .class ) ) { org.springframework.boot.autoconfigure.web.servlet.FormatterRegistry . addConverter ( org.springframework.boot.autoconfigure.web.servlet.GenericConverter ) ; } for ( Formatter < ? > org.springframework.boot.autoconfigure.web.servlet.Formatter<?> : java.util.Collection<org.springframework.boot.autoconfigure.web.servlet.Formatter> ( Formatter .class ) ) { org.springframework.boot.autoconfigure.web.servlet.FormatterRegistry . addFormatter ( org.springframework.boot.autoconfigure.web.servlet.Formatter<> ) ; } }  <METHOD_END>
<METHOD_START> private < T > java.util.Collection<T> < T > java.util.Collection<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return this . org.springframework.boot.autoconfigure.web.servlet.ListableBeanFactory . getBeansOfType ( java.lang.Class<T> ) . values ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceHandlerRegistry org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistry ) { if ( ! this . org.springframework.boot.autoconfigure.web.servlet.ResourceProperties . isAddMappings ( ) ) { org.springframework.boot.autoconfigure.web.servlet.Log . debug ( STRING ) ; return; } java.lang.Integer java.lang.Integer = this . org.springframework.boot.autoconfigure.web.servlet.ResourceProperties . getCachePeriod ( ) ; if ( ! org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistry . hasMappingForPattern ( STRING ) ) { void ( org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistry . addResourceHandler ( STRING ) . addResourceLocations ( STRING ) . setCachePeriod ( java.lang.Integer ) ) ; } java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getStaticPathPattern ( ) ; if ( ! org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistry . hasMappingForPattern ( java.lang.String ) ) { void ( org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistry . addResourceHandler ( java.lang.String ) . addResourceLocations ( this . org.springframework.boot.autoconfigure.web.servlet.ResourceProperties . getStaticLocations ( ) ) . setCachePeriod ( java.lang.Integer ) ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.WelcomePageHandlerMapping org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.WelcomePageHandlerMapping ( ResourceProperties org.springframework.boot.autoconfigure.web.servlet.ResourceProperties ) { return new org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.WelcomePageHandlerMapping ( org.springframework.boot.autoconfigure.web.servlet.ResourceProperties . getWelcomePage ( ) , this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . getStaticPathPattern ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ResourceHandlerRegistration org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistration ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer != null ) { this . org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer . void ( org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistration ) ; } }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( { RequestContextListener .class , RequestContextFilter .class } ) public static org.springframework.boot.autoconfigure.web.servlet.RequestContextFilter org.springframework.boot.autoconfigure.web.servlet.RequestContextFilter ( ) { return new OrderedRequestContextFilter ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ResourceProperties org.springframework.boot.autoconfigure.web.servlet.ResourceProperties ) { this . org.springframework.boot.autoconfigure.web.servlet.ResourceProperties = org.springframework.boot.autoconfigure.web.servlet.ResourceProperties ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.SimpleUrlHandlerMapping org.springframework.boot.autoconfigure.web.servlet.SimpleUrlHandlerMapping ( ) { SimpleUrlHandlerMapping org.springframework.boot.autoconfigure.web.servlet.SimpleUrlHandlerMapping = new SimpleUrlHandlerMapping ( ) ; org.springframework.boot.autoconfigure.web.servlet.SimpleUrlHandlerMapping . setOrder ( Ordered . HIGHEST_PRECEDENCE + NUMBER ) ; org.springframework.boot.autoconfigure.web.servlet.SimpleUrlHandlerMapping . setUrlMap ( java.util.Collections . java.util.Map ( STRING , org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler ( ) ) ) ; return org.springframework.boot.autoconfigure.web.servlet.SimpleUrlHandlerMapping ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler ( ) { ResourceHttpRequestHandler org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler = new ResourceHttpRequestHandler ( ) ; org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler . setLocations ( this . org.springframework.boot.autoconfigure.web.servlet.ResourceProperties . getFaviconLocations ( ) ) ; return org.springframework.boot.autoconfigure.web.servlet.ResourceHttpRequestHandler ; }  <METHOD_END>
<METHOD_START> public void ( ObjectProvider < WebMvcProperties > org.springframework.boot.autoconfigure.web.servlet.ObjectProvider<org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties> , ObjectProvider < WebMvcRegistrations > org.springframework.boot.autoconfigure.web.servlet.ObjectProvider<org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations> , ListableBeanFactory org.springframework.boot.autoconfigure.web.servlet.ListableBeanFactory ) { this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties = org.springframework.boot.autoconfigure.web.servlet.ObjectProvider<org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations = org.springframework.boot.autoconfigure.web.servlet.ObjectProvider<org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations> . getIfUnique ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.ListableBeanFactory = org.springframework.boot.autoconfigure.web.servlet.ListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter ( ) { RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter = super. requestMappingHandlerAdapter ( ) ; org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter . setIgnoreDefaultModelOnRedirect ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties == null ? true : this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . isIgnoreDefaultModelOnRedirect ( ) ) ; return org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerAdapter ( ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations != null && this . org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations . getRequestMappingHandlerAdapter ( ) != null ) { return this . org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations . getRequestMappingHandlerAdapter ( ) ; } return super. createRequestMappingHandlerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerMapping org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerMapping ( ) { return super. requestMappingHandlerMapping ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.Validator org.springframework.boot.autoconfigure.web.servlet.Validator ( ) { if ( ! ClassUtils . isPresent ( STRING , java.lang.Class<? extends org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.EnableWebMvcConfiguration> ( ) . java.lang.ClassLoader ( ) ) ) { return super. mvcValidator ( ) ; } return SpringValidator . get ( getApplicationContext ( ) , getValidator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerMapping org.springframework.boot.autoconfigure.web.servlet.RequestMappingHandlerMapping ( ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations != null && this . org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations . getRequestMappingHandlerMapping ( ) != null ) { return this . org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations . getRequestMappingHandlerMapping ( ) ; } return super. createRequestMappingHandlerMapping ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.web.servlet.ConfigurableWebBindingInitializer org.springframework.boot.autoconfigure.web.servlet.ConfigurableWebBindingInitializer ( ) { try { return this . org.springframework.boot.autoconfigure.web.servlet.ListableBeanFactory . getBean ( ConfigurableWebBindingInitializer .class ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.autoconfigure.web.servlet.NoSuchBeanDefinitionException ) { return super. getConfigurableWebBindingInitializer ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.web.servlet.ExceptionHandlerExceptionResolver org.springframework.boot.autoconfigure.web.servlet.ExceptionHandlerExceptionResolver ( ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations != null && this . org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations . getExceptionHandlerExceptionResolver ( ) != null ) { return this . org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations . getExceptionHandlerExceptionResolver ( ) ; } return super. createExceptionHandlerExceptionResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver> ) { super. configureHandlerExceptionResolvers ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver> ) ; if ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver> . isEmpty ( ) ) { addDefaultHandlerExceptionResolvers ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver> ) ; } if ( this . org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties . isLogResolvedException ( ) ) { for ( HandlerExceptionResolver org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver : java.util.List<org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver> ) { if ( org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver instanceof AbstractHandlerExceptionResolver ) { ( ( AbstractHandlerExceptionResolver ) org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver ) . setWarnLogCategory ( org.springframework.boot.autoconfigure.web.servlet.HandlerExceptionResolver . getClass ( ) . getName ( ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.ResourceChainResourceHandlerRegistrationCustomizer org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.ResourceChainResourceHandlerRegistrationCustomizer ( ) { return new org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.ResourceChainResourceHandlerRegistrationCustomizer ( ) ; }  <METHOD_END>
<METHOD_START> void void ( ResourceHandlerRegistration org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistration );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceHandlerRegistration org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistration ) { ResourceProperties . ResourceProperties ResourceProperties.Chain = this . org.springframework.boot.autoconfigure.web.servlet.ResourceProperties . getChain ( ) ; void ( ResourceProperties.Chain , org.springframework.boot.autoconfigure.web.servlet.ResourceHandlerRegistration . resourceChain ( ResourceProperties.Chain . isCache ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ResourceProperties . ResourceProperties ResourceProperties.Chain , ResourceChainRegistration org.springframework.boot.autoconfigure.web.servlet.ResourceChainRegistration ) { Strategy org.springframework.boot.autoconfigure.web.servlet.Strategy = ResourceProperties.Chain . getStrategy ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.Strategy . getFixed ( ) . isEnabled ( ) || org.springframework.boot.autoconfigure.web.servlet.Strategy . getContent ( ) . isEnabled ( ) ) { org.springframework.boot.autoconfigure.web.servlet.ResourceChainRegistration . addResolver ( org.springframework.boot.autoconfigure.web.servlet.ResourceResolver ( org.springframework.boot.autoconfigure.web.servlet.Strategy ) ) ; } if ( ResourceProperties.Chain . isGzipped ( ) ) { org.springframework.boot.autoconfigure.web.servlet.ResourceChainRegistration . addResolver ( new GzipResourceResolver ( ) ) ; } if ( ResourceProperties.Chain . isHtmlApplicationCache ( ) ) { org.springframework.boot.autoconfigure.web.servlet.ResourceChainRegistration . addTransformer ( new AppCacheManifestTransformer ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.web.servlet.ResourceResolver org.springframework.boot.autoconfigure.web.servlet.ResourceResolver ( ResourceProperties . ResourceProperties ResourceProperties.Strategy ) { VersionResourceResolver org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver = new VersionResourceResolver ( ) ; if ( ResourceProperties.Strategy . getFixed ( ) . isEnabled ( ) ) { java.lang.String java.lang.String = ResourceProperties.Strategy . getFixed ( ) . getVersion ( ) ; java.lang.String [] java.lang.String[] = ResourceProperties.Strategy . getFixed ( ) . getPaths ( ) ; org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver . addFixedVersionStrategy ( java.lang.String , java.lang.String[] ) ; } if ( ResourceProperties.Strategy . getContent ( ) . isEnabled ( ) ) { java.lang.String [] java.lang.String[] = ResourceProperties.Strategy . getContent ( ) . getPaths ( ) ; org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver . addContentVersionStrategy ( java.lang.String[] ) ; } return org.springframework.boot.autoconfigure.web.servlet.VersionResourceResolver ; }  <METHOD_END>
<METHOD_START> private void ( Resource org.springframework.boot.autoconfigure.web.servlet.Resource , java.lang.String java.lang.String ) { if ( org.springframework.boot.autoconfigure.web.servlet.Resource != null && STRING . boolean ( java.lang.String ) ) { org.springframework.boot.autoconfigure.web.servlet.Log . info ( STRING + org.springframework.boot.autoconfigure.web.servlet.Resource ) ; ParameterizableViewController org.springframework.boot.autoconfigure.web.servlet.ParameterizableViewController = new ParameterizableViewController ( ) ; org.springframework.boot.autoconfigure.web.servlet.ParameterizableViewController . setViewName ( STRING ) ; setRootHandler ( org.springframework.boot.autoconfigure.web.servlet.ParameterizableViewController ) ; setOrder ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest ) throws java.lang.Exception { for ( MediaType org.springframework.boot.autoconfigure.web.servlet.MediaType : java.util.List<org.springframework.boot.autoconfigure.web.servlet.MediaType> ( org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest ) ) { if ( org.springframework.boot.autoconfigure.web.servlet.MediaType . includes ( MediaType . TEXT_HTML ) ) { return super. getHandlerInternal ( org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.autoconfigure.web.servlet.MediaType> < MediaType > java.util.List<org.springframework.boot.autoconfigure.web.servlet.MediaType> ( HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest ) { java.lang.String java.lang.String = org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest . getHeader ( HttpHeaders . ACCEPT ) ; return MediaType . parseMediaTypes ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : STRING ) ; }  <METHOD_END>
