<METHOD_START> @ Bean org.springframework.data.rest.webmvc.jpa.RepositoryRestConfigurer org.springframework.data.rest.webmvc.jpa.RepositoryRestConfigurer ( ) { return new RepositoryRestConfigurerAdapter ( ) { @ java.lang.Override public void void ( RepositoryRestConfiguration org.springframework.data.rest.webmvc.jpa.RepositoryRestConfiguration ) { org.springframework.data.rest.webmvc.jpa.RepositoryRestConfiguration . getCorsRegistry ( ) . addMapping ( STRING ) . allowedMethods ( STRING , STRING , STRING ) . allowedOrigins ( STRING ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RepositoryRestConfiguration org.springframework.data.rest.webmvc.jpa.RepositoryRestConfiguration ) { org.springframework.data.rest.webmvc.jpa.RepositoryRestConfiguration . getCorsRegistry ( ) . addMapping ( STRING ) . allowedMethods ( STRING , STRING , STRING ) . allowedOrigins ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; mvc . perform ( options ( org.springframework.data.rest.webmvc.jpa.Link . expand ( ) . getHref ( ) ) . header ( HttpHeaders . ORIGIN , STRING ) . header ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN , STRING ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_METHODS , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; mvc . perform ( options ( org.springframework.data.rest.webmvc.jpa.Link . expand ( ) . getHref ( ) ) . header ( HttpHeaders . ORIGIN , STRING ) . header ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN , STRING ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_METHODS , STRING ) ) ; mvc . perform ( get ( org.springframework.data.rest.webmvc.jpa.Link . expand ( ) . getHref ( ) ) . header ( HttpHeaders . ORIGIN , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( options ( STRING ) . header ( HttpHeaders . ORIGIN , STRING ) . header ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . longValue ( HttpHeaders . ACCESS_CONTROL_MAX_AGE , NUMBER ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN , STRING ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_METHODS , containsString ( STRING ) ) ) ; mvc . perform ( get ( STRING ) . header ( HttpHeaders . ORIGIN , STRING ) . accept ( MediaType . APPLICATION_XML ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( options ( STRING ) . header ( HttpHeaders . ORIGIN , STRING ) . header ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . longValue ( HttpHeaders . ACCESS_CONTROL_MAX_AGE , NUMBER ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN , STRING ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_METHODS , containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; mvc . perform ( options ( org.springframework.data.rest.webmvc.jpa.Link . expand ( ) . getHref ( ) ) . header ( HttpHeaders . ORIGIN , STRING ) . header ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . longValue ( HttpHeaders . ACCESS_CONTROL_MAX_AGE , NUMBER ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN , STRING ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS , STRING ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_METHODS , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( options ( STRING ) . header ( HttpHeaders . ORIGIN , STRING ) . header ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . longValue ( HttpHeaders . ACCESS_CONTROL_MAX_AGE , NUMBER ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN , STRING ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS , STRING ) ) . andExpect ( header ( ) . string ( HttpHeaders . ACCESS_CONTROL_ALLOW_METHODS , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET , path = STRING , produces = MediaType . APPLICATION_PDF_VALUE ) void void ( ) {}  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET , path = STRING , produces = MediaType . APPLICATION_PDF_VALUE ) @ CrossOrigin ( maxAge = NUMBER ) void void ( ) {}  <METHOD_END>
<METHOD_START> @ GetMapping ( value = STRING , produces = MediaType . APPLICATION_XML_VALUE ) @ CrossOrigin ( maxAge = NUMBER ) void void ( @ PathVariable java.lang.String java.lang.String ) {}  <METHOD_END>
