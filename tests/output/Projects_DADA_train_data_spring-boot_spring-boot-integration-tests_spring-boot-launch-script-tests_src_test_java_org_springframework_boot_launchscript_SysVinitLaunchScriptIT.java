<METHOD_START> @ Parameters ( name = STRING ) public static java.util.List<java.lang.Object[]> < java.lang.Object [] > java.util.List<java.lang.Object[]> ( ) { java.util.List<java.lang.Object[]> < java.lang.Object [] > java.util.List<java.lang.Object[]> = new java.util.ArrayList<java.lang.Object[]> <> ( ) ; for ( java.io.File java.io.File : new java.io.File ( STRING ) . java.io.File[] ( ) ) { for ( java.io.File java.io.File : java.io.File . java.io.File[] ( ) ) { java.util.List<java.lang.Object[]> . boolean ( new java.lang.Object [] { java.io.File . java.lang.String ( ) , java.io.File . java.lang.String ( ) } ) ; } } return java.util.List<java.lang.Object[]> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . RED , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . GREEN , STRING + java.lang.String ( java.lang.String ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . RED , STRING + java.lang.String ( java.lang.String ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . YELLOW , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . YELLOW , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . YELLOW , STRING + java.lang.String ( java.lang.String ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . YELLOW , STRING ) ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . GREEN , STRING + java.lang.String ( java.lang.String ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . GREEN , STRING + java.lang.String ( STRING , java.lang.String ) + STRING ) ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . GREEN , STRING + java.lang.String ( STRING , java.lang.String ) + STRING ) ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . GREEN , STRING + java.lang.String ( STRING , java.lang.String ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . GREEN , STRING + java.lang.String ( java.lang.String ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeThat ( this . java.lang.String , is ( not ( STRING ) ) ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . GREEN , STRING + java.lang.String ( java.lang.String ) + STRING ) ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . GREEN , STRING + java.lang.String ( java.lang.String ) + STRING ) ) ; assertThat ( java.lang.String ) . has ( org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor . GREEN , STRING + java.lang.String ( java.lang.String ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { assertThat ( java.lang.String ( java.lang.String ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.Exception { DockerClient org.springframework.boot.launchscript.DockerClient = org.springframework.boot.launchscript.DockerClient ( ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.launchscript.DockerClient ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.launchscript.DockerClient , java.lang.String , java.lang.String ) ; try { void ( org.springframework.boot.launchscript.DockerClient , java.lang.String , java.lang.String ) ; org.springframework.boot.launchscript.DockerClient . startContainerCmd ( java.lang.String ) . exec ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; AttachContainerResultCallback org.springframework.boot.launchscript.AttachContainerResultCallback = org.springframework.boot.launchscript.DockerClient . attachContainerCmd ( java.lang.String ) . withStdOut ( true ) . withStdErr ( true ) . withFollowStream ( true ) . withLogs ( true ) . exec ( new AttachContainerResultCallback ( ) { @ java.lang.Override public void void ( Frame org.springframework.boot.launchscript.Frame ) { java.lang.StringBuilder . java.lang.StringBuilder ( new java.lang.String ( org.springframework.boot.launchscript.Frame . getPayload ( ) ) ) ; super. onNext ( org.springframework.boot.launchscript.Frame ) ; } } ) ; org.springframework.boot.launchscript.AttachContainerResultCallback . awaitCompletion ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . close ( ) ; org.springframework.boot.launchscript.DockerClient . waitContainerCmd ( java.lang.String ) . exec ( ) ; return java.lang.StringBuilder . java.lang.String ( ) ; } finally { org.springframework.boot.launchscript.DockerClient . removeContainerCmd ( java.lang.String ) . exec ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Frame org.springframework.boot.launchscript.Frame ) { java.lang.StringBuilder . java.lang.StringBuilder ( new java.lang.String ( org.springframework.boot.launchscript.Frame . getPayload ( ) ) ) ; super. onNext ( org.springframework.boot.launchscript.Frame ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.launchscript.DockerClient org.springframework.boot.launchscript.DockerClient ( ) { DockerClientConfig org.springframework.boot.launchscript.DockerClientConfig = DockerClientConfig . createDefaultConfigBuilder ( ) . withVersion ( STRING ) . build ( ) ; DockerClient org.springframework.boot.launchscript.DockerClient = DockerClientBuilder . getInstance ( org.springframework.boot.launchscript.DockerClientConfig ) . withDockerCmdExecFactory ( this . org.springframework.boot.launchscript.SysVinitLaunchScriptIT.SpringBootDockerCmdExecFactory ) . build ( ) ; return org.springframework.boot.launchscript.DockerClient ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( DockerClient org.springframework.boot.launchscript.DockerClient ) { BuildImageResultCallback org.springframework.boot.launchscript.BuildImageResultCallback = new BuildImageResultCallback ( ) ; java.lang.String java.lang.String = STRING + this . java.lang.String + STRING + this . java.lang.String + STRING ; java.lang.String java.lang.String = STRING + this . java.lang.String . java.lang.String ( ) + STRING + this . java.lang.String ; org.springframework.boot.launchscript.DockerClient . buildImageCmd ( new java.io.File ( java.lang.String ) ) . withTag ( java.lang.String ) . exec ( org.springframework.boot.launchscript.BuildImageResultCallback ) ; java.lang.String java.lang.String = org.springframework.boot.launchscript.BuildImageResultCallback . awaitImageId ( ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( DockerClient org.springframework.boot.launchscript.DockerClient , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.boot.launchscript.DockerClient . createContainerCmd ( java.lang.String ) . withTty ( false ) . withCmd ( STRING , STRING , STRING + java.lang.String + STRING + java.lang.String ) . exec ( ) . getId ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( DockerClient org.springframework.boot.launchscript.DockerClient , final java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( org.springframework.boot.launchscript.DockerClient , java.lang.String , java.io.File ( ) ) ; void ( org.springframework.boot.launchscript.DockerClient , java.lang.String , new java.io.File ( STRING ) ) ; void ( org.springframework.boot.launchscript.DockerClient , java.lang.String , new java.io.File ( STRING + java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( DockerClient org.springframework.boot.launchscript.DockerClient , final java.lang.String java.lang.String , final java.io.File java.io.File ) { this . org.springframework.boot.launchscript.SysVinitLaunchScriptIT.SpringBootDockerCmdExecFactory . org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmdExec ( ) . exec ( new org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmd ( java.lang.String , java.io.File ) ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( ) { java.io.File java.io.File = new java.io.File ( STRING ) ; for ( java.io.File java.io.File : java.io.File . java.io.File[] ( ) ) { if ( java.io.File . java.lang.String ( ) . boolean ( STRING ) && java.io.File . java.lang.String ( ) . boolean ( STRING ) && ! java.io.File . java.lang.String ( ) . boolean ( STRING ) ) { return java.io.File ; } } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.launchscript.Condition<java.lang.String> < java.lang.String > org.springframework.boot.launchscript.Condition<java.lang.String> ( AnsiColor org.springframework.boot.launchscript.AnsiColor , java.lang.String java.lang.String ) { java.lang.String java.lang.String = char + STRING + org.springframework.boot.launchscript.AnsiColor + STRING + java.lang.String + char + STRING ; return new Condition < java.lang.String > ( ) { @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return containsString ( java.lang.String ) . matches ( java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return containsString ( java.lang.String ) . matches ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING + java.lang.String + STRING , java.util.regex.Pattern . int ) ; java . util . regex . java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; if ( java.util.regex.Matcher . boolean ( ) ) { return java.util.regex.Matcher . java.lang.String ( NUMBER ) ; } throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( WebTarget org.springframework.boot.launchscript.WebTarget , DockerClientConfig org.springframework.boot.launchscript.DockerClientConfig ) { super( org.springframework.boot.launchscript.WebTarget , org.springframework.boot.launchscript.DockerClientConfig ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Void java.lang.Void ( org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmd org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmd ) { try { java.io.InputStream java.io.InputStream = new java.io.FileInputStream ( CompressArchiveUtil . archiveTARFiles ( org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmd . java.io.File ( ) . java.io.File ( ) , java.util.Arrays . java.util.List<java.io.File> ( org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmd . java.io.File ( ) ) , org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmd . java.io.File ( ) . java.lang.String ( ) ) ) ; WebTarget org.springframework.boot.launchscript.WebTarget = getBaseResource ( ) . path ( STRING ) . resolveTemplate ( STRING , org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmd . java.lang.String ( ) ) ; org.springframework.boot.launchscript.WebTarget . queryParam ( STRING , STRING ) . queryParam ( STRING , false ) . request ( ) . put ( Entity . entity ( java.io.InputStream , STRING ) ) . close ( ) ; return null ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.io.File java.io.File ) { this . java.lang.String = java.lang.String ; this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) { return this . java.io.File ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> private void ( ) { withClientRequestFilters ( new ClientRequestFilter ( ) { @ java.lang.Override public void void ( ClientRequestContext org.springframework.boot.launchscript.ClientRequestContext )						throws java.io.IOException { org.springframework.boot.launchscript.ClientRequestContext . getHeaders ( ) . add ( STRING , STRING ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ClientRequestContext org.springframework.boot.launchscript.ClientRequestContext )						throws java.io.IOException { org.springframework.boot.launchscript.ClientRequestContext . getHeaders ( ) . add ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmdExec org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmdExec ( ) { return new org.springframework.boot.launchscript.SysVinitLaunchScriptIT.CopyToContainerCmdExec ( getBaseResource ( ) , getDockerClientConfig ( ) ) ; }  <METHOD_END>
