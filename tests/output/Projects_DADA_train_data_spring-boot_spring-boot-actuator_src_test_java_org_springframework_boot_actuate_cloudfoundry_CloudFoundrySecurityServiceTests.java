<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockServerRestTemplateCustomizer org.springframework.boot.actuate.cloudfoundry.MockServerRestTemplateCustomizer = new MockServerRestTemplateCustomizer ( ) ; RestTemplateBuilder org.springframework.boot.actuate.cloudfoundry.RestTemplateBuilder = new RestTemplateBuilder ( org.springframework.boot.actuate.cloudfoundry.MockServerRestTemplateCustomizer ) ; this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService = new CloudFoundrySecurityService ( org.springframework.boot.actuate.cloudfoundry.RestTemplateBuilder , java.lang.String , false ) ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer = org.springframework.boot.actuate.cloudfoundry.MockServerRestTemplateCustomizer . getServer ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RestTemplateBuilder org.springframework.boot.actuate.cloudfoundry.RestTemplateBuilder = new RestTemplateBuilder ( ) ; this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService = new CloudFoundrySecurityService ( org.springframework.boot.actuate.cloudfoundry.RestTemplateBuilder , java.lang.String , true ) ; RestTemplate org.springframework.boot.actuate.cloudfoundry.RestTemplate = ( RestTemplate ) ReflectionTestUtils . getField ( this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService , STRING ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.RestTemplate . getRequestFactory ( ) ) . isInstanceOf ( SkipSslVerificationHttpRequestFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RestTemplateBuilder org.springframework.boot.actuate.cloudfoundry.RestTemplateBuilder = new RestTemplateBuilder ( ) ; this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService = new CloudFoundrySecurityService ( org.springframework.boot.actuate.cloudfoundry.RestTemplateBuilder , java.lang.String , false ) ; RestTemplate org.springframework.boot.actuate.cloudfoundry.RestTemplate = ( RestTemplate ) ReflectionTestUtils . getField ( this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService , STRING ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.RestTemplate . getRequestFactory ( ) ) . isNotInstanceOf ( SkipSslVerificationHttpRequestFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String ) ) . andExpect ( header ( STRING , STRING ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; AccessLevel org.springframework.boot.actuate.cloudfoundry.AccessLevel = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getAccessLevel ( STRING , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . verify ( ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.AccessLevel ) . isEqualTo ( AccessLevel . FULL ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String ) ) . andExpect ( header ( STRING , STRING ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; AccessLevel org.springframework.boot.actuate.cloudfoundry.AccessLevel = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getAccessLevel ( STRING , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . verify ( ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.AccessLevel ) . isEqualTo ( AccessLevel . RESTRICTED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String ) ) . andExpect ( header ( STRING , STRING ) ) . andRespond ( withUnauthorizedRequest ( ) ) ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . INVALID_TOKEN ) ) ; this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getAccessLevel ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String ) ) . andExpect ( header ( STRING , STRING ) ) . andRespond ( withStatus ( HttpStatus . FORBIDDEN ) ) ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . ACCESS_DENIED ) ) ; this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getAccessLevel ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String ) ) . andExpect ( header ( STRING , STRING ) ) . andRespond ( withServerError ( ) ) ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . SERVICE_UNAVAILABLE ) ) ; this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getAccessLevel ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String + STRING ) ) . andRespond ( withSuccess ( STRING , MediaType . APPLICATION_JSON ) ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; java.lang.String java.lang.String = STRING + java.lang.String . java.lang.String ( STRING , STRING ) + STRING ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String + STRING ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . fetchTokenKeys ( ) ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . verify ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String + STRING ) ) . andRespond ( withSuccess ( STRING + java.lang.String + STRING , MediaType . APPLICATION_JSON ) ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String + STRING ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . fetchTokenKeys ( ) ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . verify ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String + STRING ) ) . andRespond ( withSuccess ( STRING + java.lang.String + STRING , MediaType . APPLICATION_JSON ) ) ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String + STRING ) ) . andRespond ( withServerError ( ) ) ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . SERVICE_UNAVAILABLE ) ) ; this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . fetchTokenKeys ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String + STRING ) ) . andRespond ( withSuccess ( STRING + java.lang.String + STRING , MediaType . APPLICATION_JSON ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getUaaUrl ( ) ; this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . verify ( ) ; assertThat ( java.lang.String ) . isEqualTo ( java.lang.String ) ; java.lang.String = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getUaaUrl ( ) ; assertThat ( java.lang.String ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.MockRestServiceServer . expect ( requestTo ( java.lang.String + STRING ) ) . andRespond ( withServerError ( ) ) ; this . org.springframework.boot.actuate.cloudfoundry.ExpectedException . expect ( AuthorizationExceptionMatcher . withReason ( Reason . SERVICE_UNAVAILABLE ) ) ; this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getUaaUrl ( ) ; }  <METHOD_END>
