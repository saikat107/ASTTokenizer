<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.couchbase.repository.CustomUserRepository = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.IndexManager ) . getRepository ( CustomUserRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.repository.Bucket . query ( ViewQuery . from ( STRING , STRING ) . stale ( Stale . FALSE ) ) ; java.lang.Iterable<org.springframework.data.couchbase.repository.User> < User > java.lang.Iterable<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.CustomUserRepository . findAll ( ) ; int int = NUMBER ; for ( final User org.springframework.data.couchbase.repository.User : java.lang.Iterable<org.springframework.data.couchbase.repository.User> ) { int ++ ; } assertThat ( int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ViewResult org.springframework.data.couchbase.repository.ViewResult = org.springframework.data.couchbase.repository.Bucket . query ( ViewQuery . from ( STRING , STRING ) . reduce ( ) . stale ( Stale . FALSE ) ) ; final java.lang.Object java.lang.Object = org.springframework.data.couchbase.repository.ViewResult . allRows ( ) . get ( NUMBER ) . value ( ) ; final long long = org.springframework.data.couchbase.repository.CustomUserRepository . count ( ) ; assertThat ( long , is ( NUMBER ) ) ; assertThat ( java.lang.Object , instanceOf ( java.lang.Number .class ) ) ; assertThat ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) , is ( long ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<org.springframework.data.couchbase.repository.User> < User > java.lang.Iterable<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.CustomUserRepository . findRandomMethodName ( ) ; assertNotNull ( java.lang.Iterable<org.springframework.data.couchbase.repository.User> ) ; assertTrue ( java.lang.Iterable<org.springframework.data.couchbase.repository.User> . iterator ( ) . hasNext ( ) ) ; try { org.springframework.data.couchbase.repository.CustomUserRepository . findIncorrectExplicitView ( ) ; fail ( STRING ) ; } catch ( InvalidDataAccessResourceUsageException org.springframework.data.couchbase.repository.InvalidDataAccessResourceUsageException ) { assertTrue ( org.springframework.data.couchbase.repository.InvalidDataAccessResourceUsageException . getMessage ( ) , org.springframework.data.couchbase.repository.InvalidDataAccessResourceUsageException . getMessage ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = PropertyReferenceException .class ) public void void ( ) { org.springframework.data.couchbase.repository.CustomUserRepository . findAllByUsernameEqualAndUserblablaIs ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = org.springframework.data.couchbase.repository.CustomUserRepository . countByUsernameGreaterThanEqualAndUsernameLessThan ( STRING , STRING ) ; assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JsonObject org.springframework.data.couchbase.repository.JsonObject = org.springframework.data.couchbase.repository.CustomUserRepository . findByAgeLessThan ( NUMBER ) ; assertNotNull ( org.springframework.data.couchbase.repository.JsonObject ) ; assertEquals ( NUMBER , ( long ) org.springframework.data.couchbase.repository.JsonObject . getLong ( STRING ) ) ; assertEquals ( NUMBER , ( long ) org.springframework.data.couchbase.repository.JsonObject . getLong ( STRING ) ) ; assertEquals ( NUMBER , ( long ) org.springframework.data.couchbase.repository.JsonObject . getLong ( STRING ) ) ; assertEquals ( NUMBER , ( long ) org.springframework.data.couchbase.repository.JsonObject . getLong ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String , java.lang.String , java.lang.String ) ; User org.springframework.data.couchbase.repository.User = org.springframework.data.couchbase.repository.CustomUserRepository . findByUsernameIs ( java.lang.String ) . get ( NUMBER ) ; User org.springframework.data.couchbase.repository.User = org.springframework.data.couchbase.repository.CustomUserRepository . findByUsernameIs ( java.lang.String ) . get ( NUMBER ) ; User org.springframework.data.couchbase.repository.User = org.springframework.data.couchbase.repository.CustomUserRepository . findByUsernameIs ( java.lang.String ) . get ( NUMBER ) ; java.util.List<org.springframework.data.couchbase.repository.User> < User > java.util.List<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.CustomUserRepository . findAllByUsernameIn ( java.util.List<java.lang.String> ) ; java.util.List<org.springframework.data.couchbase.repository.User> < User > java.util.List<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.CustomUserRepository . findByUsernameGreaterThanEqualAndUsernameLessThanEqual ( java.lang.String , java.lang.String ) ; java.util.List<org.springframework.data.couchbase.repository.User> < User > java.util.List<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.CustomUserRepository . findByUsernameBetween ( java.lang.String , java.lang.String ) ; java.util.List<org.springframework.data.couchbase.repository.User> < User > java.util.List<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.CustomUserRepository . findTop3ByUsernameGreaterThanEqual ( java.lang.String ) ; assertNotNull ( org.springframework.data.couchbase.repository.User ) ; assertNotNull ( org.springframework.data.couchbase.repository.User ) ; assertNotNull ( org.springframework.data.couchbase.repository.User ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.User . getUsername ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.User . getUsername ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.repository.User . getUsername ( ) ) ; java.util.List<org.springframework.data.couchbase.repository.User> < User > java.util.List<org.springframework.data.couchbase.repository.User> = java.util.Arrays . java.util.List ( org.springframework.data.couchbase.repository.User , org.springframework.data.couchbase.repository.User , org.springframework.data.couchbase.repository.User ) ; assertEquals ( java.util.List<org.springframework.data.couchbase.repository.User> , java.util.List<org.springframework.data.couchbase.repository.User> ) ; assertEquals ( java.util.List<org.springframework.data.couchbase.repository.User> , java.util.List<org.springframework.data.couchbase.repository.User> ) ; assertEquals ( java.util.List<org.springframework.data.couchbase.repository.User> , java.util.List<org.springframework.data.couchbase.repository.User> ) ; assertEquals ( java.util.List<org.springframework.data.couchbase.repository.User> , java.util.List<org.springframework.data.couchbase.repository.User> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.couchbase.repository.User> < User > java.util.List<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.CustomUserRepository . findAllByUsername ( ) ; assertNotNull ( java.util.List<org.springframework.data.couchbase.repository.User> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.User> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.couchbase.repository.CustomUserRepository . findByIncorrectView ( ) ; fail ( STRING ) ; } catch ( InvalidDataAccessResourceUsageException org.springframework.data.couchbase.repository.InvalidDataAccessResourceUsageException ) { assertTrue ( org.springframework.data.couchbase.repository.InvalidDataAccessResourceUsageException . getMessage ( ) , org.springframework.data.couchbase.repository.InvalidDataAccessResourceUsageException . getMessage ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = org.springframework.data.couchbase.repository.CustomUserRepository . countCustomFindAllView ( ) ; assertEquals ( NUMBER , long ) ; try { org.springframework.data.couchbase.repository.CustomUserRepository . countCustomFindInvalid ( ) ; fail ( STRING ) ; } catch ( InvalidDataAccessResourceUsageException org.springframework.data.couchbase.repository.InvalidDataAccessResourceUsageException ) { assertTrue ( org.springframework.data.couchbase.repository.InvalidDataAccessResourceUsageException . getMessage ( ) , org.springframework.data.couchbase.repository.InvalidDataAccessResourceUsageException . getMessage ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
