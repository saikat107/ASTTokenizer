<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.condition.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.autoconfigure.condition.ExpectedException . expectMessage ( STRING + org.springframework.boot.autoconfigure.condition.SpringBootConditionTests.ErrorOnClass .class . java.lang.String ( ) ) ; new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.condition.SpringBootConditionTests.ErrorOnClass .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.condition.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.autoconfigure.condition.ExpectedException . expectMessage ( STRING + org.springframework.boot.autoconfigure.condition.SpringBootConditionTests.ErrorOnMethod .class . java.lang.String ( ) + STRING ) ; new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.condition.SpringBootConditionTests.ErrorOnMethod .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Conditional ( org.springframework.boot.autoconfigure.condition.SpringBootConditionTests.AlwaysThrowsCondition .class ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
