<METHOD_START> public void ( ) { this( new DefaultResourceLoader ( ) , null ); }  <METHOD_END>
<METHOD_START> public void ( ResourceLoader org.springframework.core.io.ResourceLoader , PropertyResolver org.springframework.core.io.PropertyResolver ) { this( org.springframework.core.io.ResourceLoader , org.springframework.core.io.PropertyResolver , true ); }  <METHOD_END>
<METHOD_START> public void ( ResourceLoader org.springframework.core.io.ResourceLoader , PropertyResolver org.springframework.core.io.PropertyResolver , boolean boolean ) { Assert . notNull ( org.springframework.core.io.ResourceLoader , STRING ) ; this . org.springframework.core.io.ResourceLoader = org.springframework.core.io.ResourceLoader ; this . org.springframework.core.io.PropertyResolver = org.springframework.core.io.PropertyResolver ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) . java.lang.String ( ) ; void ( this . org.springframework.core.io.ResourceLoader . getResource ( java.lang.String ) ) ; } else { void ( null ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( this . org.springframework.core.io.PropertyResolver == null ) { this . org.springframework.core.io.PropertyResolver = new StandardEnvironment ( ) ; } return ( this . boolean ? this . org.springframework.core.io.PropertyResolver . resolvePlaceholders ( java.lang.String ) : this . org.springframework.core.io.PropertyResolver . resolveRequiredPlaceholders ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { Resource org.springframework.core.io.Resource = ( Resource ) java.lang.Object ( ) ; try { return ( org.springframework.core.io.Resource != null ? org.springframework.core.io.Resource . getURL ( ) . toExternalForm ( ) : STRING ) ; } catch ( java.io.IOException java.io.IOException ) { return null ; } }  <METHOD_END>
