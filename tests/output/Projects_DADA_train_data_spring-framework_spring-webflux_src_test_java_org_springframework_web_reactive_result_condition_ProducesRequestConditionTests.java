<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.Object> ( ) , org.springframework.web.reactive.result.condition.ProducesRequestCondition . getProducibleMediaTypes ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING , STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( ) ; ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) > NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) < NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) < NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) > NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) < NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) > NUMBER ) ; org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) > NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) < NUMBER ) ; org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) == NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) == NUMBER ) ; org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) > NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; int int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING + int , int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING , STRING ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING , STRING ) ; ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; int int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING + int , int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING , STRING ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING , STRING ) ; ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = get ( STRING ) . header ( STRING , STRING , STRING ) . toExchange ( ) ; int int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING + int , int > NUMBER ) ; org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING , STRING ) . toExchange ( ) ; int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING + int , int > NUMBER ) ; int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING + int , int < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertTrue ( STRING , org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) < NUMBER ) ; assertTrue ( STRING , org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) > NUMBER ) ; org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) < NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) > NUMBER ) ; org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( ) ; org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) < NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) > NUMBER ) ; org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) < NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) < NUMBER ) ; assertTrue ( org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; int int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING , int < NUMBER ) ; int = org.springframework.web.reactive.result.condition.ProducesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertTrue ( STRING , int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = org.springframework.web.reactive.result.condition.ProducesRequestCondition . combine ( org.springframework.web.reactive.result.condition.ProducesRequestCondition ) ; assertEquals ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ProducesRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = org.springframework.web.reactive.result.condition.ProducesRequestCondition . combine ( org.springframework.web.reactive.result.condition.ProducesRequestCondition ) ; assertEquals ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , org.springframework.web.reactive.result.condition.ProducesRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING } ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( java.lang.String[] , java.lang.String[] ) ; void ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.result.condition.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING , STRING ) ; ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition = org.springframework.web.reactive.result.condition.ProducesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; void ( org.springframework.web.reactive.result.condition.ProducesRequestCondition , STRING ) ; org.springframework.web.reactive.result.condition.ProducesRequestCondition = new ProducesRequestCondition ( STRING ) ; org.springframework.web.reactive.result.condition.ProducesRequestCondition = org.springframework.web.reactive.result.condition.ProducesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.ServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.condition.ProducesRequestCondition ) ; }  <METHOD_END>
<METHOD_START> private void void ( ProducesRequestCondition org.springframework.web.reactive.result.condition.ProducesRequestCondition , java.lang.String ... java.lang.String[] ) { java.util.Collection<ProducesRequestCondition.ProduceMediaTypeExpression> < ProducesRequestCondition . ProducesRequestCondition > java.util.Collection<ProducesRequestCondition.ProduceMediaTypeExpression> = org.springframework.web.reactive.result.condition.ProducesRequestCondition . getContent ( ) ; assertEquals ( STRING , java.util.Collection<ProducesRequestCondition.ProduceMediaTypeExpression> . size ( ) , java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { boolean boolean = false ; for ( ProducesRequestCondition . ProducesRequestCondition ProducesRequestCondition.ProduceMediaTypeExpression : java.util.Collection<ProducesRequestCondition.ProduceMediaTypeExpression> ) { java.lang.String java.lang.String = ProducesRequestCondition.ProduceMediaTypeExpression . getMediaType ( ) . toString ( ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { boolean = true ; break; } } if ( ! boolean ) { fail ( STRING + java.lang.String + STRING ) ; } } }  <METHOD_END>
