<METHOD_START> public void void ( java.net.Proxy java.net.Proxy ) { this . java.net.Proxy = java.net.Proxy ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( AsyncListenableTaskExecutor org.springframework.http.client.AsyncListenableTaskExecutor ) { this . org.springframework.http.client.AsyncListenableTaskExecutor = org.springframework.http.client.AsyncListenableTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpRequest org.springframework.http.client.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) throws java.io.IOException { java.net.HttpURLConnection java.net.HttpURLConnection = java.net.HttpURLConnection ( java.net.URI . java.net.URL ( ) , this . java.net.Proxy ) ; void ( java.net.HttpURLConnection , org.springframework.http.client.HttpMethod . name ( ) ) ; if ( this . boolean ) { return new SimpleBufferingClientHttpRequest ( java.net.HttpURLConnection , this . boolean ) ; } else { return new SimpleStreamingClientHttpRequest ( java.net.HttpURLConnection , this . int , this . boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.AsyncClientHttpRequest org.springframework.http.client.AsyncClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) throws java.io.IOException { Assert . state ( this . org.springframework.http.client.AsyncListenableTaskExecutor != null , STRING ) ; java.net.HttpURLConnection java.net.HttpURLConnection = java.net.HttpURLConnection ( java.net.URI . java.net.URL ( ) , this . java.net.Proxy ) ; void ( java.net.HttpURLConnection , org.springframework.http.client.HttpMethod . name ( ) ) ; if ( this . boolean ) { return new SimpleBufferingAsyncClientHttpRequest ( java.net.HttpURLConnection , this . boolean , this . org.springframework.http.client.AsyncListenableTaskExecutor ) ; } else { return new SimpleStreamingAsyncClientHttpRequest ( java.net.HttpURLConnection , this . int , this . boolean , this . org.springframework.http.client.AsyncListenableTaskExecutor ) ; } }  <METHOD_END>
<METHOD_START> protected java.net.HttpURLConnection java.net.HttpURLConnection ( java.net.URL java.net.URL , java.net.Proxy java.net.Proxy ) throws java.io.IOException { java.net.URLConnection java.net.URLConnection = ( java.net.Proxy != null ? java.net.URL . java.net.URLConnection ( java.net.Proxy ) : java.net.URL . java.net.URLConnection ( ) ) ; if ( ! java.net.HttpURLConnection .class . boolean ( java.net.URLConnection ) ) { throw new java.lang.IllegalStateException ( STRING + java.net.URL + STRING + java.net.URLConnection ) ; } return ( java.net.HttpURLConnection ) java.net.URLConnection ; }  <METHOD_END>
<METHOD_START> protected void void ( java.net.HttpURLConnection java.net.HttpURLConnection , java.lang.String java.lang.String ) throws java.io.IOException { if ( this . int >= NUMBER ) { java.net.HttpURLConnection . void ( this . int ) ; } if ( this . int >= NUMBER ) { java.net.HttpURLConnection . void ( this . int ) ; } java.net.HttpURLConnection . void ( true ) ; if ( STRING . boolean ( java.lang.String ) ) { java.net.HttpURLConnection . void ( true ) ; } else { java.net.HttpURLConnection . void ( false ) ; } if ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) { java.net.HttpURLConnection . void ( true ) ; } else { java.net.HttpURLConnection . void ( false ) ; } java.net.HttpURLConnection . void ( java.lang.String ) ; }  <METHOD_END>
