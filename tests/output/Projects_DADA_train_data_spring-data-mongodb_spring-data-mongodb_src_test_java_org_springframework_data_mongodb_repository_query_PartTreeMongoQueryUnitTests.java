<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.repository.query.MongoMappingContext = new MongoMappingContext ( ) ; DbRefResolver org.springframework.data.mongodb.repository.query.DbRefResolver = new DefaultDbRefResolver ( mock ( MongoDbFactory .class ) ) ; MongoConverter org.springframework.data.mongodb.repository.query.MongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.repository.query.DbRefResolver , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; when ( org.springframework.data.mongodb.repository.query.MongoOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.mongodb.repository.query.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.mongodb.repository.query.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mongodb.core.query.Query ( STRING , new java.lang.Object [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.core.query.Query ( STRING , new java.lang.Object [] { STRING } ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getFieldsObject ( ) , is ( new Document ( ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.core.query.Query ( STRING , new java.lang.Object [] { STRING , STRING } ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getFieldsObject ( ) , is ( new Document ( ) . append ( STRING , NUMBER ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.core.query.Query ( STRING , new java.lang.Object [] { STRING , STRING } ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getFieldsObject ( ) , is ( new Document ( ) . append ( STRING , NUMBER ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.core.query.Query ( STRING , new java.lang.Object [] { STRING , TextCriteria . forDefaultLanguage ( ) . matching ( STRING ) } ) ; assertThat ( org.springframework.data.mongodb.core.query.Query , isTextQuery ( ) . searchingFor ( STRING ) . where ( new Criteria ( STRING ) . is ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.mongodb.repository.query.ExpectedException . expectCause ( is ( org . hamcrest . Matchers .< java.lang.Throwable > instanceOf ( JSONParseException .class ) ) ) ; org.springframework.data.mongodb.core.query.Query ( STRING , new java.lang.Object [] { NUMBER } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.query.Query ( STRING , new java.lang.Object [ NUMBER ] ) . getFieldsObject ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.repository.query.Document = org.springframework.data.mongodb.core.query.Query ( STRING , new java.lang.Object [ NUMBER ] ) . getFieldsObject ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.repository.query.Document = org.springframework.data.mongodb.core.query.Query ( STRING , new java.lang.Object [] { NUMBER } ) . getFieldsObject ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.repository.query.Document = org.springframework.data.mongodb.core.query.Query ( STRING , org.springframework.data.mongodb.repository.query.PartTreeMongoQueryUnitTests.ExtendedProjection .class ) . getFieldsObject ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.core.query.Query ( STRING , Sex . FEMALE ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) . get ( STRING ) , is ( ( java.lang.Object ) Sex . FEMALE ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getFieldsObject ( ) . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core.query.Query org.springframework.data.mongodb.core.query.Query ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ java.lang.Object[] . int ] ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { java.lang.Class<?>[] [ int ] = java.lang.Object[] [ int ] . java.lang.Class<? extends java.lang.Object> ( ) ; } PartTreeMongoQuery org.springframework.data.mongodb.repository.query.PartTreeMongoQuery = org.springframework.data.mongodb.repository.query.PartTreeMongoQuery ( java.lang.String , java.lang.Class<?>[] ) ; MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.PartTreeMongoQuery . getQueryMethod ( ) , java.lang.Object[] ) ; return org.springframework.data.mongodb.repository.query.PartTreeMongoQuery . createQuery ( new ConvertingParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoOperations . getConverter ( ) , org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.PartTreeMongoQuery org.springframework.data.mongodb.repository.query.PartTreeMongoQuery ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { try { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.PartTreeMongoQueryUnitTests.Repo .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; ProjectionFactory org.springframework.data.mongodb.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = new MongoQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.mongodb.repository.query.PartTreeMongoQueryUnitTests.Repo .class ) , org.springframework.data.mongodb.repository.query.ProjectionFactory , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; return new PartTreeMongoQuery ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , org.springframework.data.mongodb.repository.query.MongoOperations ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalArgumentException ( java.lang.NoSuchMethodException . java.lang.String ( ) , java.lang.NoSuchMethodException ) ; } catch ( java.lang.SecurityException java.lang.SecurityException ) { throw new java.lang.IllegalArgumentException ( java.lang.SecurityException . java.lang.String ( ) , java.lang.SecurityException ) ; } }  <METHOD_END>
<METHOD_START> @ Query ( fields = STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( fields = STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( fields = STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( fields = STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.String java.lang.String , TextCriteria org.springframework.data.mongodb.repository.query.TextCriteria );  <METHOD_END>
<METHOD_START> @ Query ( fields = STRING ) org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.Person org.springframework.data.mongodb.repository.query.Person ( )  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.PartTreeMongoQueryUnitTests.PersonProjection org.springframework.data.mongodb.repository.query.PartTreeMongoQueryUnitTests.PersonProjection ( )  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.PartTreeMongoQueryUnitTests.PersonDto org.springframework.data.mongodb.repository.query.PartTreeMongoQueryUnitTests.PersonDto ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> );  <METHOD_END>
<METHOD_START> @ Query ( fields = STRING ) java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( Sex org.springframework.data.mongodb.repository.query.Sex );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
