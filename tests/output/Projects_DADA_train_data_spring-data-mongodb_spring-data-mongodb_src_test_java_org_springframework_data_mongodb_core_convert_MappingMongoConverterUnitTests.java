<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.core.convert.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.convert.MongoMappingContext . setApplicationContext ( org.springframework.data.mongodb.core.convert.ApplicationContext ) ; org.springframework.data.mongodb.core.convert.MongoMappingContext . afterPropertiesSet ( ) ; org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address .class ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.convert.DbRefResolver , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address . java.lang.String = STRING ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) . toString ( ) , is ( STRING ) ) ; assertThat ( org.bson.Document . get ( STRING ) . toString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.convert.DbRefResolver , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . org.springframework.data.mongodb.core.convert.LocalDate = new LocalDate ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( java.util.Date .class ) ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . org.springframework.data.mongodb.core.convert.LocalDate , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.convert.DbRefResolver , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; LocalDate org.springframework.data.mongodb.core.convert.LocalDate = new LocalDate ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . convertToMongoType ( org.springframework.data.mongodb.core.convert.LocalDate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.util.Locale,java.lang.String> < java.util.Locale , java.lang.String > java.util.Map<java.util.Locale,java.lang.String> = java.util.Collections . java.util.Map<java.util.Locale,java.lang.String> ( java.util.Locale . java.util.Locale , STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( java.util.Map<java.util.Locale,java.lang.String> , org.bson.Document ) ; assertThat ( org.bson.Document . get ( java.util.Locale . java.util.Locale . java.lang.String ( ) ) . toString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( java.util.Locale . java.util.Locale . java.lang.String ( ) , STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.util.Locale,java.lang.String> . java.lang.String ( java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , new LocalDate ( ) ) ; org.bson.Document . put ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class . java.lang.String ( ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact .class , org.bson.Document ) , is ( instanceOf ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , new LocalDate ( ) ) ; org.bson.Document . put ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class . java.lang.String ( ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BirthDateContainer .class , org.bson.Document ) , is ( instanceOf ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BirthDateContainer .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person , org.bson.Document ) ; assertThat ( org.bson.Document . containsKey ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) , is ( true ) ) ; assertThat ( org.bson.Document . get ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) . toString ( ) , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum = org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( java.lang.String .class ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) . toString ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum> ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( java.util.List .class ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) org.bson.Document . get ( STRING ) ; assertThat ( java.util.List<java.lang.Object> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum> , is ( instanceOf ( java.util.List .class ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum> , hasItem ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String = STRING ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person , org.bson.Document ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.bson.Document . put ( STRING , STRING ) ; BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( org.bson.Document ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.bson.Document . put ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.util.Set<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact> ( ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact ) org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper , org.bson.Document ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.List .class ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ; assertThat ( org.bson.Document . get ( STRING ) . toString ( ) , is ( STRING ) ) ; assertThat ( ( java.lang.String ) org.bson.Document . get ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class . java.lang.String ( ) ) ; org.bson.Document . put ( STRING , STRING ) ; BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper .class , new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact> . int ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact = org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact , is ( instanceOf ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class ) ) ) ; assertThat ( ( ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ) org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact ) . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.LocaleWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.LocaleWrapper = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.LocaleWrapper ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.LocaleWrapper . java.util.Locale = java.util.Locale . java.util.Locale ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.LocaleWrapper , org.bson.Document ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.lang.String .class ) ) ) ; assertThat ( java.lang.Object , is ( STRING ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.LocaleWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.LocaleWrapper = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.LocaleWrapper .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.LocaleWrapper . java.util.Locale , is ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > ( ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . java.util.Map<java.lang.String,java.lang.String> ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . java.util.Map<java.lang.String,java.lang.String> ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNestedMaps org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNestedMaps = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNestedMaps ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNestedMaps . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> = new java.util.LinkedHashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> < java.lang.String , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > > ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNestedMaps . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> ( STRING , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNestedMaps , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNestedMaps org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNestedMaps = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNestedMaps .class , org.bson.Document ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> < java.lang.String , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> = org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNestedMaps . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> ; assertThat ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> . java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> ( STRING ) , is ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer . java.math.BigDecimal = java.math.BigDecimal . java.math.BigDecimal ( NUMBER ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer . java.util.Map<java.lang.String,java.math.BigDecimal> = java.util.Collections . java.util.Map<java.lang.String,java.math.BigDecimal> ( STRING , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer . java.math.BigDecimal ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( java.lang.String .class ) ) ) ; assertThat ( ( java.lang.String ) org.bson.Document . get ( STRING ) , is ( STRING ) ) ; assertThat ( ( ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ) . get ( STRING ) , is ( instanceOf ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.bson.Document . put ( STRING , new org . org.bson . org.bson ( STRING , STRING ) ) ; BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( STRING ) ; org.bson.Document . put ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer . java.math.BigDecimal , is ( java.math.BigDecimal . java.math.BigDecimal ( NUMBER ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer . java.util.Map<java.lang.String,java.math.BigDecimal> . java.math.BigDecimal ( STRING ) , is ( java.math.BigDecimal . java.math.BigDecimal ( NUMBER ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.BigDecimalContainer . java.util.List<java.math.BigDecimal> . java.math.BigDecimal ( NUMBER ) , is ( java.math.BigDecimal . java.math.BigDecimal ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<java.util.List<java.lang.String>> = java.util.Arrays . java.util.List<java.util.List<java.lang.String>> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper , org.bson.Document ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.List .class ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ; assertThat ( java.util.List<java.lang.Object> . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.util.Set<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> = java.util.Collections . java.util.Set<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class , org.bson.Document ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonPojoStringId org.springframework.data.mongodb.core.convert.PersonPojoStringId = new PersonPojoStringId ( STRING , STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.PersonPojoStringId , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( java.lang.String .class ) ) ) ; PersonPojoStringId org.springframework.data.mongodb.core.convert.PersonPojoStringId = new PersonPojoStringId ( new ObjectId ( ) . toString ( ) , STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.PersonPojoStringId , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( ObjectId .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithSortedMap org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithSortedMap = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithSortedMap .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithSortedMap , is ( instanceOf ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithSortedMap .class ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithSortedMap . java.util.SortedMap<java.lang.String,java.lang.String> , is ( instanceOf ( java.util.SortedMap .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverter . convertToMongoType ( null ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> < org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address > org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> < org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address > ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address . java.lang.String = STRING ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> , org.bson.Document ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; assertTypeHint ( org.bson.Document , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address .class ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address .class . java.lang.String ( ) ) ; org.bson.Document . put ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<?> < ? > org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<?> = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType .class , new org . org.bson . org.bson ( STRING , org.bson.Document ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<> . content , is ( instanceOf ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.util.Locale,java.lang.String> = java.util.Collections . java.util.Map<java.util.Locale,java.lang.String> ( java.util.Locale . java.util.Locale , null ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty , org.bson.Document ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; assertThat ( ( ( org . org.bson . org.bson ) java.lang.Object ) . keySet ( ) , hasItem ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithBigIntegerId org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithBigIntegerId = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithBigIntegerId ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithBigIntegerId . java.math.BigInteger = java.math.BigInteger . java.math.BigInteger ( NUMBER ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithBigIntegerId , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { ObjectId org.springframework.data.mongodb.core.convert.ObjectId = new ObjectId ( ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverter . convertToMongoType ( org.springframework.data.mongodb.core.convert.ObjectId ) , is ( org.springframework.data.mongodb.core.convert.ObjectId ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Collections . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty , org.bson.Document ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) java.lang.Object ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.List .class ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ; assertThat ( java.util.List<java.lang.Object> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.util.List<java.lang.String>> , is ( not ( nullValue ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty , org.bson.Document ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) java.lang.Object ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( BasicDBList .class ) ) ) ; BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = ( BasicDBList ) java.lang.Object ; assertThat ( org.springframework.data.mongodb.core.convert.BasicDBList . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.BasicDBList . get ( NUMBER ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> , is ( not ( nullValue ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( new org . org.bson . org.bson ( STRING , STRING ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty .class , org.bson.Document ) ; java.lang.Object java.lang.Object = ( ( java.util.List<?> < ? > ) org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . get ( NUMBER ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.Map .class ) ) ) ; assertThat ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . append ( STRING , STRING ) ; org.bson.Document . append ( STRING , org.bson.Document ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , org.bson.Document ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty .class , org.bson.Document ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.Map .class ) ) ) ; java.lang.Object java.lang.Object = ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.Map .class ) ) ) ; assertThat ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . append ( STRING , STRING ) ; org.bson.Document . append ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( org.bson.Document ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty .class , org.bson.Document ) ; java.lang.Object java.lang.Object = ( ( java.util.List<?> < ? > ) org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . get ( NUMBER ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.Map .class ) ) ) ; java.lang.Object java.lang.Object = ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.Map .class ) ) ) ; assertThat ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.util.Locale> < java.lang.String , java.util.Locale > java.util.Map<java.lang.String,java.util.Locale> = java.util.Collections . java.util.Map<java.lang.String,java.util.Locale> ( STRING , java.util.Locale . java.util.Locale ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<java.util.Map<java.lang.String,java.util.Locale>> = new java.util.ArrayList<java.util.Map<java.lang.String,java.util.Locale>> < java.util.Map<java.lang.String,java.util.Locale> < java.lang.String , java.util.Locale > > ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<java.util.Map<java.lang.String,java.util.Locale>> . boolean ( java.util.Map<java.lang.String,java.util.Locale> ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper , org.bson.Document ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) org.bson.Document . get ( STRING ) ; assertThat ( java.util.List<java.lang.Object> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<java.lang.Object> . int ( ) , is ( NUMBER ) ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( ( java.lang.String ) org.bson.Document . get ( STRING ) , is ( java.util.Locale . java.util.Locale . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( org.bson.Document ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<java.util.Map<java.lang.String,java.util.Locale>> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<java.util.Map<java.lang.String,java.util.Locale>> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<java.util.Map<java.lang.String,java.util.Locale>> . java.util.Map<java.lang.String,java.util.Locale> ( NUMBER ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<java.util.Map<java.lang.String,java.util.Locale>> . java.util.Map<java.lang.String,java.util.Locale> ( NUMBER ) . java.util.Locale ( STRING ) , is ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.util.List<java.util.Locale>> < java.lang.String , java.util.List<java.util.Locale> < java.util.Locale > > java.util.Map<java.lang.String,java.util.List<java.util.Locale>> = java.util.Collections . java.util.Map<java.lang.String,java.util.List<java.util.Locale>> ( STRING , java.util.Arrays . java.util.List<java.util.Locale> ( java.util.Locale . java.util.Locale ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( java.util.Map<java.lang.String,java.util.List<java.util.Locale>> , org.bson.Document ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( notNullValue ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( BasicDBList .class ) ) ) ; BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = ( BasicDBList ) org.bson.Document . get ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.BasicDBList . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.BasicDBList . get ( NUMBER ) , is ( java.util.Locale . java.util.Locale . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.List<java.lang.String> ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( java.util.Map<java.lang.String,java.lang.Object> , org.bson.Document ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( java.util.Map .class , org.bson.Document ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> . int ( ) , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertTrue ( java.util.List .class . boolean ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ( java.util.List ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( java.util.List<java.lang.String> . int ( ) , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING } ) public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING } ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty , org.bson.Document ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) java.lang.Object ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( BasicDBList .class ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ; assertThat ( java.util.List<java.lang.Object> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> , hasItem ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.bson.Document , org.bson.Document ) ; org.bson.Document . remove ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) ; assertThat ( org.bson.Document , is ( org.bson.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , STRING ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org . org.bson . org.bson .class , org.bson.Document ) ; assertThat ( org.bson.Document , is ( org.bson.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>> < java.lang.String , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>> = new java.util.HashMap<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>> < java.lang.String , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String> < java.lang.String > > ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String> ( STRING , new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String> < java.lang.String > ( STRING ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>>> < java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>> < java.lang.String , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String> < java.lang.String > > > org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>>> = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>>> < java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>> < java.lang.String , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String> < java.lang.String > > > ( java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>> ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A<java.lang.String>>> , org.bson.Document ) ; assertThat ( org.bson.Document . get ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A .class . java.lang.String ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( java.util.HashMap .class . java.lang.String ( ) ) ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.bson.Document . get ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.A .class . java.lang.String ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( java.lang.String .class . java.lang.String ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithIntId org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithIntId = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithIntId ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithIntId . int = NUMBER ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithIntId , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact> ( new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( ) , null ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper , org.bson.Document ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.Collection .class ) ) ) ; assertThat ( ( ( java.util.Collection<?> < ? > ) java.lang.Object ) . int ( ) , is ( NUMBER ) ) ; assertThat ( ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object , hasItem ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.bson.Document . put ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DefaultedConstructorArgument org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DefaultedConstructorArgument = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DefaultedConstructorArgument .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DefaultedConstructorArgument . int , is ( - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.bson.Document . put ( STRING , NUMBER ) ; org.bson.Document . put ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DefaultedConstructorArgument org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DefaultedConstructorArgument = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DefaultedConstructorArgument .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DefaultedConstructorArgument . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MappingInstantiationException .class ) public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DefaultedConstructorArgument .class , org.bson.Document ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute . java.lang.Object = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute ( NUMBER ) . java.lang.String , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute . java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute ( NUMBER ) . java.lang.Object , is ( instanceOf ( java.util.Collection .class ) ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = ( java.util.Collection<java.lang.String> < java.lang.String > ) org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute ( NUMBER ) . java.lang.Object ; assertThat ( java.util.Collection<java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.Collection<java.lang.String> , hasItems ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MappingException .class ) public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , new org . org.bson . org.bson ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverter . setMapKeyDotReplacement ( STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , org.bson.Document ) ; assertThat ( ( java.lang.String ) org.bson.Document . get ( STRING ) , is ( STRING ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverter . setMapKeyDotReplacement ( STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( java.util.Map .class , org.bson.Document ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) , is ( STRING ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address . java.lang.String = STRING ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.MappingMongoConverter . convertToMongoType ( java.util.Collections . java.util.Set<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address ) , ClassTypeInformation . OBJECT ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.List .class ) ) ) ; java.util.Set<?> < ? > java.util.Set<?> = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( java.util.Set .class , ( org . org.bson . org.bson ) java.lang.Object ) ; assertThat ( java.util.Set<> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.Set<> . java.util.Iterator<> ( ) . next ( ) , is ( instanceOf ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , STRING ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Outer org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Outer = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Outer .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Outer . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Outer.Inner , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Outer . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Outer.Inner . java.lang.String , is ( STRING ) ) ; void ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Outer . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Outer.Inner , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Outer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new BasicDBList ( ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.Set<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact> , is ( notNullValue ( ) ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.CollectionWrapper . java.util.Set<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact> . boolean ( new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Contact ( ) {} ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DBRef org.springframework.data.mongodb.core.convert.DBRef = new DBRef ( STRING , NUMBER ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.DBRef ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper . org.springframework.data.mongodb.core.convert.DBRef , is ( org.springframework.data.mongodb.core.convert.DBRef ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DBRef org.springframework.data.mongodb.core.convert.DBRef = new DBRef ( STRING , NUMBER ) ; BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( org.springframework.data.mongodb.core.convert.DBRef ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper . java.util.List<org.springframework.data.mongodb.core.convert.DBRef> , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper . java.util.List<org.springframework.data.mongodb.core.convert.DBRef> , hasItem ( org.springframework.data.mongodb.core.convert.DBRef ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DBRef org.springframework.data.mongodb.core.convert.DBRef = mock ( DBRef .class ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.DBRef ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DBRef> . entrySet ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.DBRef> . values ( ) , hasItem ( org.springframework.data.mongodb.core.convert.DBRef ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { when ( org.springframework.data.mongodb.core.convert.DbRefResolver . fetch ( Mockito . any ( DBRef .class ) ) ) . thenReturn ( new org . org.bson . org.bson ( ) ) ; DBRef org.springframework.data.mongodb.core.convert.DBRef = mock ( DBRef .class ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.DBRef ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper .class , org.bson.Document ) ; Matcher org.springframework.data.mongodb.core.convert.Matcher = instanceOf ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person>> ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.DBRefWrapper . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> . java.util.Collection<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> ( ) , hasItem ( org.springframework.data.mongodb.core.convert.Matcher ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.URLWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.URLWrapper = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.URLWrapper ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.URLWrapper . java.net.URL = new java.net.URL ( STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.URLWrapper , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.URLWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.URLWrapper = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.URLWrapper .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.URLWrapper . java.net.URL , is ( new java.net.URL ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ComplexId org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ComplexId = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ComplexId ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ComplexId . java.lang.Long = NUMBER ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithComplexId org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithComplexId = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithComplexId ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithComplexId . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ComplexId = org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ComplexId ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithComplexId , org.bson.Document ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( notNullValue ( ) ) ) ; assertThat ( java.lang.Object , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; assertThat ( ( ( org . org.bson . org.bson ) java.lang.Object ) . get ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , NUMBER ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithComplexId org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithComplexId = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithComplexId .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithComplexId . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ComplexId , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithComplexId . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ComplexId . java.lang.Long , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( STRING ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.String[]> , is ( notNullValue ( ) ) ) ; java.lang.String [] java.lang.String[] = org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ; assertThat ( java.lang.String[] , is ( notNullValue ( ) ) ) ; assertThat ( java.lang.String[] , is ( arrayWithSize ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new BasicDBList ( ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypWithCollectionConstructor org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypWithCollectionConstructor = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypWithCollectionConstructor .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypWithCollectionConstructor . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { try { assertThat ( ReflectionTestUtils . getField ( java.lang.Object , STRING + int ) , is ( java.lang.Object ) ) ; return; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } } fail ( java.lang.String . java.lang.String ( STRING , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DBRef org.springframework.data.mongodb.core.convert.DBRef = new DBRef ( STRING , STRING ) ; MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = mock ( MongoPersistentProperty .class ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverter . createDBRef ( org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) , is ( org.springframework.data.mongodb.core.convert.DBRef ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Aliased org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Aliased = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Aliased ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Aliased . java.lang.String = STRING ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Aliased , org.bson.Document ) ; assertTypeHint ( org.bson.Document , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ThrowableWrapper org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ThrowableWrapper = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ThrowableWrapper ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ThrowableWrapper . java.lang.Throwable = new java.lang.Exception ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ThrowableWrapper , org.bson.Document ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = org . org.bson . Document . parse ( STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ObjectContainer .class , org.bson.Document ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> = new java.util.HashMap<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> < java.lang.String , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person > ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( STRING , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ) ; CustomConversions org.springframework.data.mongodb.core.convert.CustomConversions = new CustomConversions ( java.util.Arrays . java.util.List<T> ( new Converter < org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person , org . org.bson . org.bson > ( ) { @ java.lang.Override public org . org.bson . org.bson.Document org.bson.Document ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ) { return new org . org.bson . org.bson ( ) . append ( STRING , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String ) . append ( STRING , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class . java.lang.String ( ) ) ; } } , new Converter < org . org.bson . org.bson , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person > ( ) { @ java.lang.Override public org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( org . org.bson . org.bson org.bson.Document ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String = org.bson.Document . get ( STRING ) . toString ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String = STRING ; return org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ; } } ) ) ; MongoMappingContext org.springframework.data.mongodb.core.convert.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.convert.MongoMappingContext . setSimpleTypeHolder ( org.springframework.data.mongodb.core.convert.CustomConversions . getSimpleTypeHolder ( ) ) ; org.springframework.data.mongodb.core.convert.MongoMappingContext . afterPropertiesSet ( ) ; MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.convert.DbRefResolver , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . setCustomConversions ( org.springframework.data.mongodb.core.convert.CustomConversions ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> , is ( notNullValue ( ) ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> , is ( notNullValue ( ) ) ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.lang.Object , is ( notNullValue ( ) ) ) ; assertThat ( java.lang.Object , is ( instanceOf ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class ) ) ) ; assertThat ( ( ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ) java.lang.Object ) . java.lang.String , is ( STRING ) ) ; assertThat ( ( ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ) java.lang.Object ) . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org . org.bson . org.bson.Document org.bson.Document ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ) { return new org . org.bson . org.bson ( ) . append ( STRING , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String ) . append ( STRING , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( org . org.bson . org.bson org.bson.Document ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String = org.bson.Document . get ( STRING ) . toString ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String = STRING ; return org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( java.lang.String .class , org.bson.Document ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NestedType org.springframework.data.mongodb.core.convert.NestedType = new NestedType ( ) ; nested . c = STRING ; ProjectingType org.springframework.data.mongodb.core.convert.ProjectingType = new ProjectingType ( ) ; type . name = STRING ; type . foo = STRING ; type . a = org.springframework.data.mongodb.core.convert.NestedType ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.ProjectingType , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; org . org.bson . org.bson org.bson.Document = DocumentTestUtils . getAsDocument ( org.bson.Document , STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address . java.lang.String = STRING ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.MappingMongoConverter . convertToMongoType ( java.util.Collections . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address ) , ClassTypeInformation . from ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.InterfaceType .class ) ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.List .class ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ; assertThat ( java.util.List<java.lang.Object> , hasSize ( NUMBER ) ) ; assertTypeHint ( getAsDocument ( java.util.List<java.lang.Object> , NUMBER ) , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.MappingMongoConverter . convertToMongoType ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.List .class ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ; assertThat ( java.util.List<java.lang.Object> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , instanceOf ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address . java.lang.String = STRING ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.MappingMongoConverter . convertToMongoType ( new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address [] { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address } , ClassTypeInformation . OBJECT ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.List .class ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ; assertThat ( java.util.List<java.lang.Object> , hasSize ( NUMBER ) ) ; assertTypeHint ( getAsDocument ( java.util.List<java.lang.Object> , NUMBER ) , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.MappingMongoConverter . convertToMongoType ( new java.lang.String [] { STRING } ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.List .class ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ; assertThat ( java.util.List<java.lang.Object> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , instanceOf ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.BasicDBList ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . java.util.EnumSet<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum> , is ( instanceOf ( java.util.EnumSet .class ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . java.util.EnumSet<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . java.util.EnumSet<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum> , hasItem ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty .class , new org . org.bson . org.bson ( STRING , org.bson.Document ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . java.util.EnumMap<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum,java.lang.String> , is ( instanceOf ( java.util.EnumMap .class ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . java.util.EnumMap<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum,java.lang.String> . int ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty . java.util.EnumMap<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum,java.lang.String> . java.lang.String ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.bson.Document ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.TreeMap<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.TreeMap<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( STRING ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.TreeMap<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( STRING ) . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.TreeMap<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> = new java.util.TreeMap<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> < java.lang.String , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person > ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty . java.util.TreeMap<java.lang.String,org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person> . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ( STRING , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Person ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapProperty , org.bson.Document ) ; org . org.bson . org.bson org.bson.Document = getAsDocument ( org.bson.Document , STRING ) ; org . org.bson . org.bson org.bson.Document = getAsDocument ( org.bson.Document , STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox . org.springframework.data.mongodb.core.convert.Box = new Box ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox , org.bson.Document ) ; assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) new org . org.bson . org.bson ( ) . append ( STRING , org.bson.Document ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox . org.springframework.data.mongodb.core.convert.Box . getFirst ( ) ) ) . append ( STRING , org.bson.Document ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox . org.springframework.data.mongodb.core.convert.Box . getSecond ( ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> private static org . org.bson . org.bson.Document org.bson.Document ( Point org.springframework.data.mongodb.core.convert.Point ) { return new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.Point . getX ( ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Point . getY ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox . org.springframework.data.mongodb.core.convert.Box = new Box ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox . org.springframework.data.mongodb.core.convert.Box , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoBox . org.springframework.data.mongodb.core.convert.Box ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon . org.springframework.data.mongodb.core.convert.Polygon = new Polygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon , org.bson.Document ) ; assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.bson.Document> < org . org.bson . org.bson > java.util.List<org.bson.Document> = ( java.util.List<org.bson.Document> < org . org.bson . org.bson > ) org.bson.Document . get ( STRING ) ; assertThat ( java.util.List<org.bson.Document> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.bson.Document> , Matchers .< org . org.bson . org.bson > hasItems ( org.bson.Document ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon . org.springframework.data.mongodb.core.convert.Polygon . getPoints ( ) . get ( NUMBER ) ) , org.bson.Document ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon . org.springframework.data.mongodb.core.convert.Polygon . getPoints ( ) . get ( NUMBER ) ) , org.bson.Document ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon . org.springframework.data.mongodb.core.convert.Polygon . getPoints ( ) . get ( NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon . org.springframework.data.mongodb.core.convert.Polygon = new Polygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon . org.springframework.data.mongodb.core.convert.Polygon , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoPolygon . org.springframework.data.mongodb.core.convert.Polygon ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle ( ) ; Circle org.springframework.data.mongodb.core.convert.Circle = new Circle ( new Point ( NUMBER , NUMBER ) , NUMBER ) ; Distance org.springframework.data.mongodb.core.convert.Distance = org.springframework.data.mongodb.core.convert.Circle . getRadius ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle . org.springframework.data.mongodb.core.convert.Circle = org.springframework.data.mongodb.core.convert.Circle ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle , org.bson.Document ) ; assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.Circle . getCenter ( ) . getX ( ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Circle . getCenter ( ) . getY ( ) ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Distance . getNormalizedValue ( ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Distance . getMetric ( ) . toString ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle . org.springframework.data.mongodb.core.convert.Circle = new Circle ( new Point ( NUMBER , NUMBER ) , NUMBER ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle . org.springframework.data.mongodb.core.convert.Circle , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoCircle . org.springframework.data.mongodb.core.convert.Circle ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere ( ) ; Sphere org.springframework.data.mongodb.core.convert.Sphere = new Sphere ( new Point ( NUMBER , NUMBER ) , NUMBER ) ; Distance org.springframework.data.mongodb.core.convert.Distance = org.springframework.data.mongodb.core.convert.Sphere . getRadius ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere . org.springframework.data.mongodb.core.convert.Sphere = org.springframework.data.mongodb.core.convert.Sphere ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere , org.bson.Document ) ; assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.Sphere . getCenter ( ) . getX ( ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Sphere . getCenter ( ) . getY ( ) ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Distance . getNormalizedValue ( ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Distance . getMetric ( ) . toString ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere ( ) ; Sphere org.springframework.data.mongodb.core.convert.Sphere = new Sphere ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) ) ; Distance org.springframework.data.mongodb.core.convert.Distance = org.springframework.data.mongodb.core.convert.Sphere . getRadius ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere . org.springframework.data.mongodb.core.convert.Sphere = org.springframework.data.mongodb.core.convert.Sphere ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere , org.bson.Document ) ; assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.Sphere . getCenter ( ) . getX ( ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Sphere . getCenter ( ) . getY ( ) ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Distance . getNormalizedValue ( ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Distance . getMetric ( ) . toString ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere . org.springframework.data.mongodb.core.convert.Sphere = new Sphere ( new Point ( NUMBER , NUMBER ) , NUMBER ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere . org.springframework.data.mongodb.core.convert.Sphere , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoSphere . org.springframework.data.mongodb.core.convert.Sphere ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape ( ) ; Sphere org.springframework.data.mongodb.core.convert.Sphere = new Sphere ( new Point ( NUMBER , NUMBER ) , NUMBER ) ; Distance org.springframework.data.mongodb.core.convert.Distance = org.springframework.data.mongodb.core.convert.Sphere . getRadius ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape . org.springframework.data.mongodb.core.convert.Shape = org.springframework.data.mongodb.core.convert.Sphere ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape , org.bson.Document ) ; assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.convert.Sphere . getCenter ( ) . getX ( ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Sphere . getCenter ( ) . getY ( ) ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Distance . getNormalizedValue ( ) ) . append ( STRING , org.springframework.data.mongodb.core.convert.Distance . getMetric ( ) . toString ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape ( ) ; Sphere org.springframework.data.mongodb.core.convert.Sphere = new Sphere ( new Point ( NUMBER , NUMBER ) , NUMBER ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape . org.springframework.data.mongodb.core.convert.Shape = org.springframework.data.mongodb.core.convert.Sphere ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithGeoShape . org.springframework.data.mongodb.core.convert.Shape , is ( org.springframework.data.mongodb.core.convert.Sphere ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithTextScoreProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithTextScoreProperty = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithTextScoreProperty ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithTextScoreProperty . java.lang.Float = java.lang.Float . float ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithTextScoreProperty , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithTextScoreProperty org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithTextScoreProperty = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithTextScoreProperty .class , new org . org.bson . org.bson ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithTextScoreProperty . java.lang.Float , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProxyFactory org.springframework.data.mongodb.core.convert.ProxyFactory = new ProxyFactory ( ) ; org.springframework.data.mongodb.core.convert.ProxyFactory . setTargetClass ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType .class ) ; org.springframework.data.mongodb.core.convert.ProxyFactory . setProxyTargetClass ( true ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<?> < ? > org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<?> = ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<?> < ? > ) org.springframework.data.mongodb.core.convert.ProxyFactory . getProxy ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType<> , org.bson.Document ) ; assertTypeHint ( org.bson.Document , org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.GenericType .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LazyLoadingProxy org.springframework.data.mongodb.core.convert.LazyLoadingProxy = mock ( LazyLoadingProxy .class ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.LazyLoadingProxy , org.bson.Document ) ; verify ( org.springframework.data.mongodb.core.convert.LazyLoadingProxy , times ( NUMBER ) ) . getTarget ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( STRING ) ; java.util.List<java.lang.Object> . boolean ( STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( java.util.List<java.lang.Object> ) ; java.util.List<java.lang.Object> . boolean ( java.util.List<java.lang.Object> ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , java.util.List<java.lang.Object> ) ; org.springframework.data.mongodb.core.convert.ExpectedException . expect ( MappingException .class ) ; org.springframework.data.mongodb.core.convert.ExpectedException . expectMessage ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item .class . java.lang.String ( ) ) ; org.springframework.data.mongodb.core.convert.ExpectedException . expectMessage ( java.util.ArrayList .class . java.lang.String ( ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Item .class , org.bson.Document ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . append ( STRING , new DBRef ( STRING , STRING ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithExplicitlyNamedDBRefProperty .class , org.bson.Document ) ; verify ( org.springframework.data.mongodb.core.convert.DbRefResolver , times ( NUMBER ) ) . resolveDbRef ( Mockito . any ( MongoPersistentProperty .class ) , Mockito . any ( DBRef .class ) , Mockito . any ( DbRefResolverCallback .class ) , Mockito . any ( DbRefProxyHandler .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithExplicitlyRenamedField = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithExplicitlyRenamedField ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithExplicitlyRenamedField . java.lang.String = STRING ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( STRING ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( new org . org.bson . org.bson ( ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) . append ( STRING , STRING ) . append ( STRING , new org . org.bson . org.bson ( STRING , STRING ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithExplicitlyRenamedField , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.RootForClassWithExplicitlyRenamedIdField . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithExplicitlyRenamedField . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNamedIdField org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNamedIdField = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNamedIdField .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithNamedIdField . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithExplicitlyRenamedField org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithExplicitlyRenamedField = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithExplicitlyRenamedField .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithExplicitlyRenamedField . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithAnnotatedIdField org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithAnnotatedIdField = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithAnnotatedIdField .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithAnnotatedIdField . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithLocalDateTime org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithLocalDateTime = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithLocalDateTime ( ) ; java.time.LocalDateTime java.time.LocalDateTime = org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithLocalDateTime . java.time.LocalDateTime ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithLocalDateTime , org.bson.Document ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( java.util.Date .class ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithLocalDateTime .class , org.bson.Document ) . date , is ( java.time.LocalDateTime ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithOptional org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithOptional = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithOptional ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithOptional . java.util.Optional<java.time.LocalDateTime> = java.util.Optional . java.util.Optional<java.time.LocalDateTime> ( java.time.LocalDateTime . java.time.LocalDateTime ( ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithOptional , org.bson.Document ) ; assertThat ( getAsDocument ( org.bson.Document , STRING ) , is ( new org . org.bson . org.bson ( ) ) ) ; org . org.bson . org.bson org.bson.Document = getAsDocument ( org.bson.Document , STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( java.util.Date .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.LocalDateTime java.time.LocalDateTime = java.time.LocalDateTime . java.time.LocalDateTime ( ) ; java.util.Date java.util.Date = java.util.Date . java.util.Date ( java.time.LocalDateTime . java.time.ZonedDateTime ( java.time.ZoneId ( ) ) . java.time.Instant ( ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , java.util.Date ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , org.bson.Document ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithOptional org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithOptional = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithOptional .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithOptional . java.util.Optional<java.lang.String> , is ( java.util.Optional .< java.lang.String > java.util.Optional<java.lang.String> ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithOptional . java.util.Optional<java.time.LocalDateTime> , is ( java.util.Optional . java.util.Optional<java.time.LocalDateTime> ( java.time.LocalDateTime ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.convert.DbRefResolver , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . setCustomConversions ( new CustomConversions ( java.util.Arrays . java.util.List<java.lang.Object> ( new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.FooBarEnumToStringConverter ( ) , new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.StringToFooNumConverter ( ) ) ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey . java.util.Map<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum,java.lang.String> = new java.util.HashMap<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum,java.lang.String> < org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum , java.lang.String > ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey . java.util.Map<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum,java.lang.String> . java.lang.String ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum , STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey .class , org.bson.Document ) . map , is ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey . java.util.Map<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum,java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.convert.DbRefResolver , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . setCustomConversions ( new CustomConversions ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.FooBarEnumToStringConverter> ( new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.FooBarEnumToStringConverter ( ) ) ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey = new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey . java.util.Map<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum,java.lang.String> = new java.util.HashMap<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum,java.lang.String> < org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum , java.lang.String > ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey . java.util.Map<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum,java.lang.String> . java.lang.String ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum , STRING ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey . java.util.Map<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum,java.lang.String> . java.lang.String ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum , STRING ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . write ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey , org.bson.Document ) ; org . org.bson . org.bson org.bson.Document = DocumentTestUtils . getAsDocument ( org.bson.Document , STRING ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappingMongoConverter org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.convert.DbRefResolver , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . setCustomConversions ( new CustomConversions ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.StringToFooNumConverter> ( new org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.StringToFooNumConverter ( ) ) ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , STRING ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey . java.util.Map<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum,java.lang.String> . java.lang.String ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithIntId .class , new org . org.bson . org.bson ( ) ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , STRING ) ) ; org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithPropertyInNestedField org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithPropertyInNestedField = org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithPropertyInNestedField .class , org.bson.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.TypeWithPropertyInNestedField . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MappingMongoConverter . read ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithEnumProperty .class , org.bson.Document ) . enumSet , is ( java.util.EnumSet . java.util.EnumSet<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum> ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.SampleEnum .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( ) {}  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( ) {		}  <METHOD_END>
<METHOD_START> abstract void void ( )  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( java.util.Set<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> < org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address > java.util.Set<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> ) { this . java.util.Set<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> = java.util.Set<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Address> ; }  <METHOD_END>
<METHOD_START> public void ( T T ) { this . java.lang.String = T . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; this . T = T ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , @ Value ( STRING ) int int , double double ) { this . java.lang.String = java.lang.String ; this . int = int ; this . double = double ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> < org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute > java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> ) { this . java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> = java.util.List<org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.Attribute> ; }  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( @ Value ( STRING ) int int ) { int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( @ Value ( STRING ) org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.PrimitiveContainer org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.PrimitiveContainer ) { org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.PrimitiveContainer = org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.PrimitiveContainer ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.PrimitiveContainer org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.PrimitiveContainer ( ) { return org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.PrimitiveContainer ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithIntId org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithIntId ( ) { return org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithIntId ; }  <METHOD_END>
<METHOD_START> void ( ) { this . java.time.LocalDateTime = java.time.LocalDateTime . java.time.LocalDateTime ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum ) { if ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum == null ) { return null ; } return org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum . boolean ( org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum ) ? STRING : STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum ( java.lang.String java.lang.String ) { if ( java.lang.String == null ) { return null ; } if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum ; } if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum . org.springframework.data.mongodb.core.convert.MappingMongoConverterUnitTests.ClassWithMapUsingEnumAsKey.FooBarEnum ; } throw new ConversionNotSupportedException ( java.lang.String , java.lang.String .class , null ) ; }  <METHOD_END>
