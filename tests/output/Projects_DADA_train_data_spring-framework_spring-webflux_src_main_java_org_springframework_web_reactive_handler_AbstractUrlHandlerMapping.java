<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public final java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( this . java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.handler.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.handler.Mono<java.lang.Object> ( ServerWebExchange org.springframework.web.reactive.handler.ServerWebExchange ) { java.lang.String java.lang.String = getPathHelper ( ) . getLookupPathForRequest ( org.springframework.web.reactive.handler.ServerWebExchange ) ; java.lang.Object java.lang.Object ; try { java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.web.reactive.handler.ServerWebExchange ) ; } catch ( java.lang.Exception java.lang.Exception ) { return Mono . error ( java.lang.Exception ) ; } if ( java.lang.Object != null && logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.Object ) ; } else if ( java.lang.Object == null && logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String + STRING ) ; } return Mono . justOrEmpty ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , ServerWebExchange org.springframework.web.reactive.handler.ServerWebExchange ) throws java.lang.Exception { java.lang.Object java.lang.Object = this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object != null ) { return java.lang.Object ( java.lang.Object , java.lang.String , java.lang.String , org.springframework.web.reactive.handler.ServerWebExchange ) ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { if ( getPathMatcher ( ) . match ( java.lang.String , java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } else if ( boolean ( ) ) { if ( ! java.lang.String . boolean ( STRING ) && getPathMatcher ( ) . match ( java.lang.String + STRING , java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String + STRING ) ; } } } java.lang.String java.lang.String = null ; java.util.Comparator<java.lang.String> < java.lang.String > java.util.Comparator<java.lang.String> = getPathMatcher ( ) . getPatternComparator ( java.lang.String ) ; if ( ! java.util.List<java.lang.String> . boolean ( ) ) { java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.util.List<java.lang.String> ) ; } java.lang.String = java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; } if ( java.lang.String != null ) { java.lang.Object = this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { if ( java.lang.String . boolean ( STRING ) ) { java.lang.Object = this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ) ; } if ( java.lang.Object == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } } java.lang.String java.lang.String = getPathMatcher ( ) . extractPathWithinPattern ( java.lang.String , java.lang.String ) ; return java.lang.Object ( java.lang.Object , java.lang.String , java.lang.String , org.springframework.web.reactive.handler.ServerWebExchange ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.String java.lang.String , ServerWebExchange org.springframework.web.reactive.handler.ServerWebExchange ) throws java.lang.Exception { if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; java.lang.Object = getApplicationContext ( ) . getBean ( java.lang.String ) ; } void ( java.lang.Object , org.springframework.web.reactive.handler.ServerWebExchange ) ; org.springframework.web.reactive.handler.ServerWebExchange . getAttributes ( ) . put ( PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , java.lang.String ) ; org.springframework.web.reactive.handler.ServerWebExchange . getAttributes ( ) . put ( BEST_MATCHING_PATTERN_ATTRIBUTE , java.lang.String ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.Object java.lang.Object , ServerWebExchange org.springframework.web.reactive.handler.ServerWebExchange ) throws java.lang.Exception {	}  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String [] java.lang.String[] , java.lang.String java.lang.String ) throws org.springframework.web.reactive.handler.BeansException , java.lang.IllegalStateException { Assert . notNull ( java.lang.String[] , STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { void ( java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.web.reactive.handler.BeansException , java.lang.IllegalStateException { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; java.lang.Object java.lang.Object = java.lang.Object ; if ( ! this . boolean && java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( getApplicationContext ( ) . isSingleton ( java.lang.String ) ) { java.lang.Object = getApplicationContext ( ) . getBean ( java.lang.String ) ; } } java.lang.Object java.lang.Object = this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object != null ) { if ( java.lang.Object != java.lang.Object ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String ( java.lang.Object ) + STRING + java.lang.String + STRING + java.lang.String ( java.lang.Object ) + STRING ) ; } } else { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + java.lang.String + STRING + java.lang.String ( java.lang.Object ) ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { return STRING + ( java.lang.Object instanceof java.lang.String ? STRING + java.lang.Object + STRING : STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; }  <METHOD_END>
