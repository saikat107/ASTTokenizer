<METHOD_START> @ java.lang.Override public void void ( BootstrapContext org.springframework.test.context.support.BootstrapContext ) { this . org.springframework.test.context.support.BootstrapContext = org.springframework.test.context.support.BootstrapContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.context.support.BootstrapContext org.springframework.test.context.support.BootstrapContext ( ) { return this . org.springframework.test.context.support.BootstrapContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.context.support.TestContext org.springframework.test.context.support.TestContext ( ) { return new DefaultTestContext ( org.springframework.test.context.support.BootstrapContext ( ) . getTestClass ( ) , org.springframework.test.context.support.MergedContextConfiguration ( ) , org.springframework.test.context.support.CacheAwareContextLoaderDelegate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.util.List<org.springframework.test.context.support.TestExecutionListener> < TestExecutionListener > java.util.List<org.springframework.test.context.support.TestExecutionListener> ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.BootstrapContext ( ) . getTestClass ( ) ; java.lang.Class<org.springframework.test.context.support.TestExecutionListeners> < TestExecutionListeners > java.lang.Class<org.springframework.test.context.support.TestExecutionListeners> = TestExecutionListeners .class ; java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> < java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener> < ? extends TestExecutionListener > > java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> = new java.util.ArrayList<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> <> ( ) ; boolean boolean = false ; AnnotationDescriptor < TestExecutionListeners > org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> = MetaAnnotationUtils . findAnnotationDescriptor ( java.lang.Class<> , java.lang.Class<org.springframework.test.context.support.TestExecutionListeners> ) ; if ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> == null ) { if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) ) ) ; } boolean = true ; java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> . addAll ( java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> ( ) ) ; } else { while ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> != null ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> . getDeclaringClass ( ) ; TestExecutionListeners org.springframework.test.context.support.TestExecutionListeners = org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> . synthesizeAnnotation ( ) ; if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( java.lang.String . java.lang.String ( STRING , org.springframework.test.context.support.TestExecutionListeners , java.lang.Class<> . java.lang.String ( ) ) ) ; } boolean boolean = org.springframework.test.context.support.TestExecutionListeners . inheritListeners ( ) ; AnnotationDescriptor < TestExecutionListeners > org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> = MetaAnnotationUtils . findAnnotationDescriptor ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> . getRootDeclaringClass ( ) . getSuperclass ( ) , java.lang.Class<org.springframework.test.context.support.TestExecutionListeners> ) ; if ( ( ! boolean || org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> == null ) && org.springframework.test.context.support.TestExecutionListeners . mergeMode ( ) == MergeMode . MERGE_WITH_DEFAULTS ) { if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING + STRING , org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> . getRootDeclaringClass ( ) . getName ( ) ) ) ; } boolean = true ; java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> . addAll ( java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> ( ) ) ; } java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> . addAll ( NUMBER , java.util.Arrays . java.util.List ( org.springframework.test.context.support.TestExecutionListeners . listeners ( ) ) ) ; org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> = ( boolean ? org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestExecutionListeners> : null ) ; } } if ( boolean ) { java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> < java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener> < ? extends TestExecutionListener > > java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> = new java.util.HashSet<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> <> ( ) ; java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> . addAll ( java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> ) ; java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> . clear ( ) ; java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> . addAll ( java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> ) ; } java.util.List<org.springframework.test.context.support.TestExecutionListener> < TestExecutionListener > java.util.List<org.springframework.test.context.support.TestExecutionListener> = java.util.List<org.springframework.test.context.support.TestExecutionListener> ( java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> ) ; if ( boolean ) { AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.test.context.support.TestExecutionListener> ) ; } if ( org.springframework.test.context.support.Log . isInfoEnabled ( ) ) { org.springframework.test.context.support.Log . info ( java.lang.String . java.lang.String ( STRING , java.util.List<org.springframework.test.context.support.TestExecutionListener> ) ) ; } return java.util.List<org.springframework.test.context.support.TestExecutionListener> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.test.context.support.TestExecutionListener> < TestExecutionListener > java.util.List<org.springframework.test.context.support.TestExecutionListener> ( java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> < java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener> < ? extends TestExecutionListener > > java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> ) { java.util.List<org.springframework.test.context.support.TestExecutionListener> < TestExecutionListener > java.util.List<org.springframework.test.context.support.TestExecutionListener> = new java.util.ArrayList <> ( java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> . size ( ) ) ; for ( java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener> < ? extends TestExecutionListener > java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener> : java.util.List<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> ) { java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError = null ; try { java.util.List<org.springframework.test.context.support.TestExecutionListener> . add ( BeanUtils . instantiateClass ( java.lang.Class<> ) ) ; } catch ( java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError ) { java.lang.NoClassDefFoundError = java.lang.NoClassDefFoundError ; } catch ( BeanInstantiationException org.springframework.test.context.support.BeanInstantiationException ) { if ( org.springframework.test.context.support.BeanInstantiationException . getCause ( ) instanceof java.lang.NoClassDefFoundError ) { java.lang.NoClassDefFoundError = ( java.lang.NoClassDefFoundError ) org.springframework.test.context.support.BeanInstantiationException . getCause ( ) ; } } if ( java.lang.NoClassDefFoundError != null ) { if ( org.springframework.test.context.support.Log . isInfoEnabled ( ) ) { org.springframework.test.context.support.Log . info ( java.lang.String . java.lang.String ( STRING + STRING + STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.NoClassDefFoundError . java.lang.String ( ) ) ) ; } } } return java.util.List<org.springframework.test.context.support.TestExecutionListener> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> < java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener> < ? extends TestExecutionListener > > java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> ( ) { java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> < java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener> < ? extends TestExecutionListener > > java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> = new java.util.LinkedHashSet<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> <> ( ) ; java.lang.ClassLoader java.lang.ClassLoader = java.lang.Class<? extends org.springframework.test.context.support.AbstractTestContextBootstrapper> ( ) . java.lang.ClassLoader ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ( ) ) { try { java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> . add ( ( java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener> < ? extends TestExecutionListener > ) ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } } return java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.TestExecutionListener>> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = SpringFactoriesLoader . loadFactoryNames ( TestExecutionListener .class , java.lang.Class<? extends org.springframework.test.context.support.AbstractTestContextBootstrapper> ( ) . java.lang.ClassLoader ( ) ) ; if ( org.springframework.test.context.support.Log . isInfoEnabled ( ) ) { org.springframework.test.context.support.Log . info ( java.lang.String . java.lang.String ( STRING , SpringFactoriesLoader . FACTORIES_RESOURCE_LOCATION , java.util.List<java.lang.String> ) ) ; } return java.util.Collections . java.util.List<java.lang.String> ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public final org.springframework.test.context.support.MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.BootstrapContext ( ) . getTestClass ( ) ; CacheAwareContextLoaderDelegate org.springframework.test.context.support.CacheAwareContextLoaderDelegate = org.springframework.test.context.support.CacheAwareContextLoaderDelegate ( ) ; if ( MetaAnnotationUtils . findAnnotationDescriptorForTypes ( java.lang.Class<> , ContextConfiguration .class , ContextHierarchy .class ) == null ) { return org.springframework.test.context.support.MergedContextConfiguration ( java.lang.Class<> , org.springframework.test.context.support.CacheAwareContextLoaderDelegate ) ; } if ( AnnotationUtils . findAnnotation ( java.lang.Class<> , ContextHierarchy .class ) != null ) { java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> < java.lang.String , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > > java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> = ContextLoaderUtils . buildContextHierarchyMap ( java.lang.Class<> ) ; MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration = null ; MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration = null ; for ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> : java.util.Map<java.lang.String,java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes>> . values ( ) ) { java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> = new java.util.ArrayList <> ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ; java.util.Collections . void ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ; Assert . notEmpty ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> . get ( NUMBER ) . getDeclaringClass ( ) ; org.springframework.test.context.support.MergedContextConfiguration = org.springframework.test.context.support.MergedContextConfiguration ( java.lang.Class<> , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> , org.springframework.test.context.support.MergedContextConfiguration , org.springframework.test.context.support.CacheAwareContextLoaderDelegate , true ) ; org.springframework.test.context.support.MergedContextConfiguration = org.springframework.test.context.support.MergedContextConfiguration ; } return org.springframework.test.context.support.MergedContextConfiguration ; } else { return org.springframework.test.context.support.MergedContextConfiguration ( java.lang.Class<> , ContextLoaderUtils . resolveContextConfigurationAttributes ( java.lang.Class<> ) , null , org.springframework.test.context.support.CacheAwareContextLoaderDelegate , true ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.support.MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ( java.lang.Class<?> < ? > java.lang.Class<?> , CacheAwareContextLoaderDelegate org.springframework.test.context.support.CacheAwareContextLoaderDelegate ) { java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> = java.util.Collections . java.util.List ( new ContextConfigurationAttributes ( java.lang.Class<> ) ) ; ContextLoader org.springframework.test.context.support.ContextLoader = org.springframework.test.context.support.ContextLoader ( java.lang.Class<> , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ; if ( org.springframework.test.context.support.Log . isInfoEnabled ( ) ) { org.springframework.test.context.support.Log . info ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , org.springframework.test.context.support.ContextLoader . getClass ( ) . getSimpleName ( ) ) ) ; } return org.springframework.test.context.support.MergedContextConfiguration ( java.lang.Class<> , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> , null , org.springframework.test.context.support.CacheAwareContextLoaderDelegate , false ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.context.support.MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> , MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration , CacheAwareContextLoaderDelegate org.springframework.test.context.support.CacheAwareContextLoaderDelegate , boolean boolean ) { Assert . notEmpty ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> , STRING ) ; ContextLoader org.springframework.test.context.support.ContextLoader = org.springframework.test.context.support.ContextLoader ( java.lang.Class<> , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; for ( ContextConfigurationAttributes org.springframework.test.context.support.ContextConfigurationAttributes : java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) { if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( java.lang.String . java.lang.String ( STRING , org.springframework.test.context.support.ContextConfigurationAttributes ) ) ; } if ( org.springframework.test.context.support.ContextLoader instanceof SmartContextLoader ) { SmartContextLoader org.springframework.test.context.support.SmartContextLoader = ( SmartContextLoader ) org.springframework.test.context.support.ContextLoader ; org.springframework.test.context.support.SmartContextLoader . processContextConfiguration ( org.springframework.test.context.support.ContextConfigurationAttributes ) ; java.util.List<java.lang.String> . boolean ( NUMBER , java.util.Arrays . java.util.List ( org.springframework.test.context.support.ContextConfigurationAttributes . getLocations ( ) ) ) ; java.util.List<java.lang.Class<?>> . boolean ( NUMBER , java.util.Arrays . java.util.List ( org.springframework.test.context.support.ContextConfigurationAttributes . getClasses ( ) ) ) ; } else { java.lang.String [] java.lang.String[] = org.springframework.test.context.support.ContextLoader . processLocations ( org.springframework.test.context.support.ContextConfigurationAttributes . getDeclaringClass ( ) , org.springframework.test.context.support.ContextConfigurationAttributes . getLocations ( ) ) ; java.util.List<java.lang.String> . boolean ( NUMBER , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } java.util.List<java.lang.Class<?>> . boolean ( NUMBER , java.util.Arrays . java.util.List ( org.springframework.test.context.support.ContextConfigurationAttributes . getInitializers ( ) ) ) ; if ( ! org.springframework.test.context.support.ContextConfigurationAttributes . isInheritLocations ( ) ) { break; } } java.util.Set<org.springframework.test.context.support.ContextCustomizer> < ContextCustomizer > java.util.Set<org.springframework.test.context.support.ContextCustomizer> = java.util.Set<org.springframework.test.context.support.ContextCustomizer> ( java.lang.Class<> , java.util.Collections . java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ) ; Assert . state ( ! ( boolean && boolean ( java.util.List<java.lang.String> , java.util.List<java.lang.Class<?>> , java.util.List<java.lang.Class<?>> , java.util.Set<org.springframework.test.context.support.ContextCustomizer> ) ) , ( ) String . format ( STRING + STRING , contextLoader . getClass ( ) . getSimpleName ( ) , configAttributesList ) ) ; MergedTestPropertySources org.springframework.test.context.support.MergedTestPropertySources = TestPropertySourceUtils . buildMergedTestPropertySources ( java.lang.Class<> ) ; MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration = new MergedContextConfiguration ( java.lang.Class<> , StringUtils . toStringArray ( java.util.List<java.lang.String> ) , ClassUtils . toClassArray ( java.util.List<java.lang.Class<?>> ) , ApplicationContextInitializerUtils . resolveInitializerClasses ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) , ActiveProfilesUtils . resolveActiveProfiles ( java.lang.Class<> ) , org.springframework.test.context.support.MergedTestPropertySources . getLocations ( ) , org.springframework.test.context.support.MergedTestPropertySources . getProperties ( ) , java.util.Set<org.springframework.test.context.support.ContextCustomizer> , org.springframework.test.context.support.ContextLoader , org.springframework.test.context.support.CacheAwareContextLoaderDelegate , org.springframework.test.context.support.MergedContextConfiguration ) ; return org.springframework.test.context.support.MergedContextConfiguration ( org.springframework.test.context.support.MergedContextConfiguration ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.test.context.support.ContextCustomizer> < ContextCustomizer > java.util.Set<org.springframework.test.context.support.ContextCustomizer> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) { java.util.List<org.springframework.test.context.support.ContextCustomizerFactory> < ContextCustomizerFactory > java.util.List<org.springframework.test.context.support.ContextCustomizerFactory> = java.util.List<org.springframework.test.context.support.ContextCustomizerFactory> ( ) ; java.util.Set<org.springframework.test.context.support.ContextCustomizer> < ContextCustomizer > java.util.Set<org.springframework.test.context.support.ContextCustomizer> = new java.util.LinkedHashSet <> ( java.util.List<org.springframework.test.context.support.ContextCustomizerFactory> . size ( ) ) ; for ( ContextCustomizerFactory org.springframework.test.context.support.ContextCustomizerFactory : java.util.List<org.springframework.test.context.support.ContextCustomizerFactory> ) { ContextCustomizer org.springframework.test.context.support.ContextCustomizer = org.springframework.test.context.support.ContextCustomizerFactory . createContextCustomizer ( java.lang.Class<> , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ; if ( org.springframework.test.context.support.ContextCustomizer != null ) { java.util.Set<org.springframework.test.context.support.ContextCustomizer> . add ( org.springframework.test.context.support.ContextCustomizer ) ; } } return java.util.Set<org.springframework.test.context.support.ContextCustomizer> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.test.context.support.ContextCustomizerFactory> < ContextCustomizerFactory > java.util.List<org.springframework.test.context.support.ContextCustomizerFactory> ( ) { return SpringFactoriesLoader . loadFactories ( ContextCustomizerFactory .class , java.lang.Class<? extends org.springframework.test.context.support.AbstractTestContextBootstrapper> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.test.context.support.ContextLoader org.springframework.test.context.support.ContextLoader ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> , STRING ) ; java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> < ? extends ContextLoader > java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> = java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) ; if ( java.lang.Class<> == null ) { java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> = java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> ( java.lang.Class<> ) ; Assert . state ( java.lang.Class<> != null , STRING ) ; } if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ) ; } return BeanUtils . instantiateClass ( java.lang.Class<> , ContextLoader .class ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> < ? extends ContextLoader > java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> < ContextConfigurationAttributes > java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) { Assert . notNull ( java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> , STRING ) ; for ( ContextConfigurationAttributes org.springframework.test.context.support.ContextConfigurationAttributes : java.util.List<org.springframework.test.context.support.ContextConfigurationAttributes> ) { if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( java.lang.String . java.lang.String ( STRING , org.springframework.test.context.support.ContextConfigurationAttributes ) ) ; } java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> < ? extends ContextLoader > java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> = org.springframework.test.context.support.ContextConfigurationAttributes . getContextLoaderClass ( ) ; if ( ContextLoader .class != java.lang.Class<> ) { if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , org.springframework.test.context.support.ContextConfigurationAttributes ) ) ; } return java.lang.Class<> ; } } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.test.context.support.CacheAwareContextLoaderDelegate org.springframework.test.context.support.CacheAwareContextLoaderDelegate ( ) { return org.springframework.test.context.support.BootstrapContext ( ) . getCacheAwareContextLoaderDelegate ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> < ? extends ContextLoader > java.lang.Class<? extends org.springframework.test.context.support.ContextLoader> ( java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> protected org.springframework.test.context.support.MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ( MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ) { return org.springframework.test.context.support.MergedContextConfiguration ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.util.Collection<?> < ? > ... java.util.Collection<?>[] ) { return java.util.Arrays . java.util.stream.Stream<java.util.Collection<?>> ( java.util.Collection<?>[] ) . boolean ( java.util.Collection :: boolean ) ; }  <METHOD_END>
