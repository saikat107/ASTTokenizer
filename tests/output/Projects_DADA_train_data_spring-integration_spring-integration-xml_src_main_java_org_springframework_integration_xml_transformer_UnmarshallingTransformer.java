<METHOD_START> public void ( Unmarshaller org.springframework.integration.xml.transformer.Unmarshaller ) { this . org.springframework.integration.xml.transformer.Unmarshaller = org.springframework.integration.xml.transformer.Unmarshaller ; if ( ClassUtils . isPresent ( STRING , ClassUtils . getDefaultClassLoader ( ) ) ) { this . org.springframework.integration.xml.transformer.UnmarshallingTransformer.MimeMessageUnmarshallerHelper = new org.springframework.integration.xml.transformer.UnmarshallingTransformer.MimeMessageUnmarshallerHelper ( org.springframework.integration.xml.transformer.Unmarshaller ) ; } }  <METHOD_END>
<METHOD_START> public void void ( SourceFactory org.springframework.integration.xml.transformer.SourceFactory ) { Assert . notNull ( org.springframework.integration.xml.transformer.SourceFactory , STRING ) ; this . org.springframework.integration.xml.transformer.SourceFactory = org.springframework.integration.xml.transformer.SourceFactory ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { javax.xml.transform.Source javax.xml.transform.Source = null ; try { if ( this . org.springframework.integration.xml.transformer.UnmarshallingTransformer.MimeMessageUnmarshallerHelper != null ) { java.lang.Object java.lang.Object = this . org.springframework.integration.xml.transformer.UnmarshallingTransformer.MimeMessageUnmarshallerHelper . java.lang.Object ( java.lang.Object ) ; if ( java.lang.Object != null ) { return java.lang.Object ; } } if ( this . boolean ) { javax.xml.transform.Source = this . org.springframework.integration.xml.transformer.SourceFactory . createSource ( java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { javax.xml.transform.Source = new StringSource ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.io.File ) { javax.xml.transform.Source = new javax.xml.transform.stream.StreamSource ( ( java.io.File ) java.lang.Object ) ; } else if ( java.lang.Object instanceof org.w3c.dom.Document ) { javax.xml.transform.Source = new javax.xml.transform.dom.DOMSource ( ( org.w3c.dom.Document ) java.lang.Object ) ; } else if ( java.lang.Object instanceof javax.xml.transform.Source ) { javax.xml.transform.Source = ( javax.xml.transform.Source ) java.lang.Object ; } else { javax.xml.transform.Source = this . org.springframework.integration.xml.transformer.SourceFactory . createSource ( java.lang.Object ) ; } if ( javax.xml.transform.Source == null ) { throw new MessagingException ( STRING + javax.xml.transform.Source .class . java.lang.String ( ) + STRING ) ; } return this . org.springframework.integration.xml.transformer.Unmarshaller . unmarshal ( javax.xml.transform.Source ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessagingException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> void ( Unmarshaller org.springframework.integration.xml.transformer.Unmarshaller ) { this . org.springframework.integration.xml.transformer.Unmarshaller = org.springframework.integration.xml.transformer.Unmarshaller ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws java.io.IOException { if ( java.lang.Object instanceof org . springframework . org.springframework.ws . org.springframework.ws . org.springframework.ws ) { return org . springframework . org.springframework.ws . support . MarshallingUtils . unmarshal ( this . org.springframework.integration.xml.transformer.Unmarshaller , ( org . springframework . org.springframework.ws . org.springframework.ws . org.springframework.ws ) java.lang.Object ) ; } else { return null ; } }  <METHOD_END>
