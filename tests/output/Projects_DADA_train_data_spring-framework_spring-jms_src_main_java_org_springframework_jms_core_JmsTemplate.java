<METHOD_START> public void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ConnectionFactory org.springframework.jms.core.ConnectionFactory ) { this(); setConnectionFactory ( org.springframework.jms.core.ConnectionFactory ) ; afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { void ( new SimpleMessageConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Destination org.springframework.jms.core.Destination ) { this . java.lang.Object = org.springframework.jms.core.Destination ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.core.Destination org.springframework.jms.core.Destination ( ) { return ( this . java.lang.Object instanceof Destination ? ( Destination ) this . java.lang.Object : null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.core.Queue org.springframework.jms.core.Queue ( ) { Destination org.springframework.jms.core.Destination = org.springframework.jms.core.Destination ( ) ; if ( org.springframework.jms.core.Destination != null && ! ( org.springframework.jms.core.Destination instanceof Queue ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } return ( Queue ) org.springframework.jms.core.Destination ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.Object = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . java.lang.Object instanceof java.lang.String ? ( java.lang.String ) this . java.lang.Object : null ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) java.lang.IllegalStateException { java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.jms.core.MessageConverter ) { this . org.springframework.jms.core.MessageConverter = org.springframework.jms.core.MessageConverter ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.core.MessageConverter org.springframework.jms.core.MessageConverter ( ) { return this . org.springframework.jms.core.MessageConverter ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.core.MessageConverter org.springframework.jms.core.MessageConverter ( ) java.lang.IllegalStateException { MessageConverter org.springframework.jms.core.MessageConverter = org.springframework.jms.core.MessageConverter ( ) ; if ( org.springframework.jms.core.MessageConverter == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } return org.springframework.jms.core.MessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . int = ( boolean ? DeliveryMode . PERSISTENT : DeliveryMode . NON_PERSISTENT ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( SessionCallback < T > org.springframework.jms.core.SessionCallback<T> ) throws org.springframework.jms.core.JmsException { return java.lang.Object ( org.springframework.jms.core.SessionCallback<T> , false ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( SessionCallback < T > org.springframework.jms.core.SessionCallback<T> , boolean boolean ) throws org.springframework.jms.core.JmsException { Assert . notNull ( org.springframework.jms.core.SessionCallback<T> , STRING ) ; Connection org.springframework.jms.core.Connection = null ; Session org.springframework.jms.core.Session = null ; try { Session org.springframework.jms.core.Session = ConnectionFactoryUtils . doGetTransactionalSession ( getConnectionFactory ( ) , this . org.springframework.jms.core.JmsTemplate.JmsTemplateResourceFactory , boolean ) ; if ( org.springframework.jms.core.Session == null ) { org.springframework.jms.core.Connection = createConnection ( ) ; org.springframework.jms.core.Session = createSession ( org.springframework.jms.core.Connection ) ; if ( boolean ) { org.springframework.jms.core.Connection . start ( ) ; } org.springframework.jms.core.Session = org.springframework.jms.core.Session ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jms.core.Session ) ; } return org.springframework.jms.core.SessionCallback<T> . doInJms ( org.springframework.jms.core.Session ) ; } catch ( JMSException org.springframework.jms.core.JMSException ) { throw convertJmsAccessException ( org.springframework.jms.core.JMSException ) ; } finally { JmsUtils . closeSession ( org.springframework.jms.core.Session ) ; ConnectionFactoryUtils . releaseConnection ( org.springframework.jms.core.Connection , getConnectionFactory ( ) , boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( ProducerCallback < T > org.springframework.jms.core.ProducerCallback<T> ) throws org.springframework.jms.core.JmsException { java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.String != null ) { return java.lang.Object ( java.lang.String , org.springframework.jms.core.ProducerCallback<T> ) ; } else { return java.lang.Object ( org.springframework.jms.core.Destination ( ) , org.springframework.jms.core.ProducerCallback<T> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( final Destination org.springframework.jms.core.Destination , final ProducerCallback < T > org.springframework.jms.core.ProducerCallback<T> ) throws org.springframework.jms.core.JmsException { Assert . notNull ( org.springframework.jms.core.ProducerCallback<T> , STRING ) ; return T ( new SessionCallback < T > ( ) { @ java.lang.Override public T T ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { MessageProducer org.springframework.jms.core.MessageProducer = org.springframework.jms.core.MessageProducer ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination ) ; try { return org.springframework.jms.core.ProducerCallback<T> . doInJms ( org.springframework.jms.core.Session , org.springframework.jms.core.MessageProducer ) ; } finally { JmsUtils . closeMessageProducer ( org.springframework.jms.core.MessageProducer ) ; } } } , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { MessageProducer org.springframework.jms.core.MessageProducer = org.springframework.jms.core.MessageProducer ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination ) ; try { return org.springframework.jms.core.ProducerCallback<T> . doInJms ( org.springframework.jms.core.Session , org.springframework.jms.core.MessageProducer ) ; } finally { JmsUtils . closeMessageProducer ( org.springframework.jms.core.MessageProducer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( final java.lang.String java.lang.String , final ProducerCallback < T > org.springframework.jms.core.ProducerCallback<T> ) throws org.springframework.jms.core.JmsException { Assert . notNull ( org.springframework.jms.core.ProducerCallback<T> , STRING ) ; return T ( new SessionCallback < T > ( ) { @ java.lang.Override public T T ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = resolveDestinationName ( org.springframework.jms.core.Session , java.lang.String ) ; MessageProducer org.springframework.jms.core.MessageProducer = org.springframework.jms.core.MessageProducer ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination ) ; try { return org.springframework.jms.core.ProducerCallback<T> . doInJms ( org.springframework.jms.core.Session , org.springframework.jms.core.MessageProducer ) ; } finally { JmsUtils . closeMessageProducer ( org.springframework.jms.core.MessageProducer ) ; } } } , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = resolveDestinationName ( org.springframework.jms.core.Session , java.lang.String ) ; MessageProducer org.springframework.jms.core.MessageProducer = org.springframework.jms.core.MessageProducer ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination ) ; try { return org.springframework.jms.core.ProducerCallback<T> . doInJms ( org.springframework.jms.core.Session , org.springframework.jms.core.MessageProducer ) ; } finally { JmsUtils . closeMessageProducer ( org.springframework.jms.core.MessageProducer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageCreator org.springframework.jms.core.MessageCreator ) throws org.springframework.jms.core.JmsException { Destination org.springframework.jms.core.Destination = org.springframework.jms.core.Destination ( ) ; if ( org.springframework.jms.core.Destination != null ) { void ( org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; } else { void ( java.lang.String ( ) , org.springframework.jms.core.MessageCreator ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final Destination org.springframework.jms.core.Destination , final MessageCreator org.springframework.jms.core.MessageCreator ) throws org.springframework.jms.core.JmsException { T ( new SessionCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { void ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; return null ; } } , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { void ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String , final MessageCreator org.springframework.jms.core.MessageCreator ) throws org.springframework.jms.core.JmsException { T ( new SessionCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = resolveDestinationName ( org.springframework.jms.core.Session , java.lang.String ) ; void ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; return null ; } } , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = resolveDestinationName ( org.springframework.jms.core.Session , java.lang.String ) ; void ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; return null ; }  <METHOD_END>
<METHOD_START> protected void void ( Session org.springframework.jms.core.Session , Destination org.springframework.jms.core.Destination , MessageCreator org.springframework.jms.core.MessageCreator )			throws org.springframework.jms.core.JMSException { Assert . notNull ( org.springframework.jms.core.MessageCreator , STRING ) ; MessageProducer org.springframework.jms.core.MessageProducer = org.springframework.jms.core.MessageProducer ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination ) ; try { Message org.springframework.jms.core.Message = org.springframework.jms.core.MessageCreator . createMessage ( org.springframework.jms.core.Session ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jms.core.Message ) ; } void ( org.springframework.jms.core.MessageProducer , org.springframework.jms.core.Message ) ; if ( org.springframework.jms.core.Session . getTransacted ( ) && boolean ( org.springframework.jms.core.Session ) ) { JmsUtils . commitIfNecessary ( org.springframework.jms.core.Session ) ; } } finally { JmsUtils . closeMessageProducer ( org.springframework.jms.core.MessageProducer ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( MessageProducer org.springframework.jms.core.MessageProducer , Message org.springframework.jms.core.Message ) throws org.springframework.jms.core.JMSException { if ( this . long >= NUMBER ) { if ( java.lang.reflect.Method == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.jms.core.MessageProducer , this . long ) ; } if ( boolean ( ) ) { org.springframework.jms.core.MessageProducer . send ( org.springframework.jms.core.Message , int ( ) , int ( ) , long ( ) ) ; } else { org.springframework.jms.core.MessageProducer . send ( org.springframework.jms.core.Message ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws org.springframework.jms.core.JmsException { Destination org.springframework.jms.core.Destination = org.springframework.jms.core.Destination ( ) ; if ( org.springframework.jms.core.Destination != null ) { void ( org.springframework.jms.core.Destination , java.lang.Object ) ; } else { void ( java.lang.String ( ) , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Destination org.springframework.jms.core.Destination , final java.lang.Object java.lang.Object ) throws org.springframework.jms.core.JmsException { void ( org.springframework.jms.core.Destination , new MessageCreator ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.MessageConverter ( ) . toMessage ( java.lang.Object , org.springframework.jms.core.Session ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.MessageConverter ( ) . toMessage ( java.lang.Object , org.springframework.jms.core.Session ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) throws org.springframework.jms.core.JmsException { void ( java.lang.String , new MessageCreator ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.MessageConverter ( ) . toMessage ( java.lang.Object , org.springframework.jms.core.Session ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.MessageConverter ( ) . toMessage ( java.lang.Object , org.springframework.jms.core.Session ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MessagePostProcessor org.springframework.jms.core.MessagePostProcessor ) throws org.springframework.jms.core.JmsException { Destination org.springframework.jms.core.Destination = org.springframework.jms.core.Destination ( ) ; if ( org.springframework.jms.core.Destination != null ) { void ( org.springframework.jms.core.Destination , java.lang.Object , org.springframework.jms.core.MessagePostProcessor ) ; } else { void ( java.lang.String ( ) , java.lang.Object , org.springframework.jms.core.MessagePostProcessor ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Destination org.springframework.jms.core.Destination , final java.lang.Object java.lang.Object , final MessagePostProcessor org.springframework.jms.core.MessagePostProcessor )			throws org.springframework.jms.core.JmsException { void ( org.springframework.jms.core.Destination , new MessageCreator ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Message org.springframework.jms.core.Message = org.springframework.jms.core.MessageConverter ( ) . toMessage ( java.lang.Object , org.springframework.jms.core.Session ) ; return org.springframework.jms.core.MessagePostProcessor . postProcessMessage ( org.springframework.jms.core.Message ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Message org.springframework.jms.core.Message = org.springframework.jms.core.MessageConverter ( ) . toMessage ( java.lang.Object , org.springframework.jms.core.Session ) ; return org.springframework.jms.core.MessagePostProcessor . postProcessMessage ( org.springframework.jms.core.Message ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , final java.lang.Object java.lang.Object , final MessagePostProcessor org.springframework.jms.core.MessagePostProcessor )		throws org.springframework.jms.core.JmsException { void ( java.lang.String , new MessageCreator ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Message org.springframework.jms.core.Message = org.springframework.jms.core.MessageConverter ( ) . toMessage ( java.lang.Object , org.springframework.jms.core.Session ) ; return org.springframework.jms.core.MessagePostProcessor . postProcessMessage ( org.springframework.jms.core.Message ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Message org.springframework.jms.core.Message = org.springframework.jms.core.MessageConverter ( ) . toMessage ( java.lang.Object , org.springframework.jms.core.Session ) ; return org.springframework.jms.core.MessagePostProcessor . postProcessMessage ( org.springframework.jms.core.Message ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( ) org.springframework.jms.core.JmsException { Destination org.springframework.jms.core.Destination = org.springframework.jms.core.Destination ( ) ; if ( org.springframework.jms.core.Destination != null ) { return org.springframework.jms.core.Message ( org.springframework.jms.core.Destination ) ; } else { return org.springframework.jms.core.Message ( java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Destination org.springframework.jms.core.Destination ) throws org.springframework.jms.core.JmsException { return org.springframework.jms.core.Message ( org.springframework.jms.core.Destination , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( java.lang.String java.lang.String ) throws org.springframework.jms.core.JmsException { return org.springframework.jms.core.Message ( java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( java.lang.String java.lang.String ) throws org.springframework.jms.core.JmsException { Destination org.springframework.jms.core.Destination = org.springframework.jms.core.Destination ( ) ; if ( org.springframework.jms.core.Destination != null ) { return org.springframework.jms.core.Message ( org.springframework.jms.core.Destination , java.lang.String ) ; } else { return org.springframework.jms.core.Message ( java.lang.String ( ) , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( final Destination org.springframework.jms.core.Destination , final java.lang.String java.lang.String ) throws org.springframework.jms.core.JmsException { return T ( new SessionCallback < Message > ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Message ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , java.lang.String ) ; } } , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Message ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) throws org.springframework.jms.core.JmsException { return T ( new SessionCallback < Message > ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = resolveDestinationName ( org.springframework.jms.core.Session , java.lang.String ) ; return org.springframework.jms.core.Message ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , java.lang.String ) ; } } , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = resolveDestinationName ( org.springframework.jms.core.Session , java.lang.String ) ; return org.springframework.jms.core.Message ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session , Destination org.springframework.jms.core.Destination , java.lang.String java.lang.String )			throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Message ( org.springframework.jms.core.Session , org.springframework.jms.core.MessageConsumer ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session , MessageConsumer org.springframework.jms.core.MessageConsumer ) throws org.springframework.jms.core.JMSException { try { long long = long ( ) ; JmsResourceHolder org.springframework.jms.core.JmsResourceHolder = ( JmsResourceHolder ) TransactionSynchronizationManager . getResource ( getConnectionFactory ( ) ) ; if ( org.springframework.jms.core.JmsResourceHolder != null && org.springframework.jms.core.JmsResourceHolder . hasTimeout ( ) ) { long = java.lang.Math . long ( long , org.springframework.jms.core.JmsResourceHolder . getTimeToLiveInMillis ( ) ) ; } Message org.springframework.jms.core.Message = receiveFromConsumer ( org.springframework.jms.core.MessageConsumer , long ) ; if ( org.springframework.jms.core.Session . getTransacted ( ) ) { if ( boolean ( org.springframework.jms.core.Session ) ) { JmsUtils . commitIfNecessary ( org.springframework.jms.core.Session ) ; } } else if ( isClientAcknowledge ( org.springframework.jms.core.Session ) ) { if ( org.springframework.jms.core.Message != null ) { org.springframework.jms.core.Message . acknowledge ( ) ; } } return org.springframework.jms.core.Message ; } finally { JmsUtils . closeMessageConsumer ( org.springframework.jms.core.MessageConsumer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.jms.core.JmsException { return java.lang.Object ( org.springframework.jms.core.Message ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Destination org.springframework.jms.core.Destination ) throws org.springframework.jms.core.JmsException { return java.lang.Object ( org.springframework.jms.core.Message ( org.springframework.jms.core.Destination ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws org.springframework.jms.core.JmsException { return java.lang.Object ( org.springframework.jms.core.Message ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws org.springframework.jms.core.JmsException { return java.lang.Object ( org.springframework.jms.core.Message ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Destination org.springframework.jms.core.Destination , java.lang.String java.lang.String ) throws org.springframework.jms.core.JmsException { return java.lang.Object ( org.springframework.jms.core.Message ( org.springframework.jms.core.Destination , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.core.JmsException { return java.lang.Object ( org.springframework.jms.core.Message ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( Message org.springframework.jms.core.Message ) { if ( org.springframework.jms.core.Message != null ) { try { return org.springframework.jms.core.MessageConverter ( ) . fromMessage ( org.springframework.jms.core.Message ) ; } catch ( JMSException org.springframework.jms.core.JMSException ) { throw convertJmsAccessException ( org.springframework.jms.core.JMSException ) ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( MessageCreator org.springframework.jms.core.MessageCreator ) throws org.springframework.jms.core.JmsException { Destination org.springframework.jms.core.Destination = org.springframework.jms.core.Destination ( ) ; if ( org.springframework.jms.core.Destination != null ) { return org.springframework.jms.core.Message ( org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; } else { return org.springframework.jms.core.Message ( java.lang.String ( ) , org.springframework.jms.core.MessageCreator ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( final Destination org.springframework.jms.core.Destination , final MessageCreator org.springframework.jms.core.MessageCreator ) throws org.springframework.jms.core.JmsException { return T ( new SessionCallback < Message > ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Message ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; } } , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Message ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( final java.lang.String java.lang.String , final MessageCreator org.springframework.jms.core.MessageCreator ) throws org.springframework.jms.core.JmsException { return T ( new SessionCallback < Message > ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = resolveDestinationName ( org.springframework.jms.core.Session , java.lang.String ) ; return org.springframework.jms.core.Message ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; } } , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = resolveDestinationName ( org.springframework.jms.core.Session , java.lang.String ) ; return org.springframework.jms.core.Message ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session , Destination org.springframework.jms.core.Destination , MessageCreator org.springframework.jms.core.MessageCreator )			throws org.springframework.jms.core.JMSException { Assert . notNull ( org.springframework.jms.core.MessageCreator , STRING ) ; TemporaryQueue org.springframework.jms.core.TemporaryQueue = null ; MessageProducer org.springframework.jms.core.MessageProducer = null ; MessageConsumer org.springframework.jms.core.MessageConsumer = null ; try { Message org.springframework.jms.core.Message = org.springframework.jms.core.MessageCreator . createMessage ( org.springframework.jms.core.Session ) ; org.springframework.jms.core.TemporaryQueue = org.springframework.jms.core.Session . createTemporaryQueue ( ) ; org.springframework.jms.core.MessageProducer = org.springframework.jms.core.Session . createProducer ( org.springframework.jms.core.Destination ) ; org.springframework.jms.core.MessageConsumer = org.springframework.jms.core.Session . createConsumer ( org.springframework.jms.core.TemporaryQueue ) ; org.springframework.jms.core.Message . setJMSReplyTo ( org.springframework.jms.core.TemporaryQueue ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jms.core.Message ) ; } void ( org.springframework.jms.core.MessageProducer , org.springframework.jms.core.Message ) ; return receiveFromConsumer ( org.springframework.jms.core.MessageConsumer , long ( ) ) ; } finally { JmsUtils . closeMessageConsumer ( org.springframework.jms.core.MessageConsumer ) ; JmsUtils . closeMessageProducer ( org.springframework.jms.core.MessageProducer ) ; if ( org.springframework.jms.core.TemporaryQueue != null ) { org.springframework.jms.core.TemporaryQueue . delete ( ) ; } } }  <METHOD_END>
<METHOD_START> private < T > T T ( SessionCallback < T > org.springframework.jms.core.SessionCallback<T> , boolean boolean ) throws org.springframework.jms.core.JmsException { Assert . notNull ( org.springframework.jms.core.SessionCallback<T> , STRING ) ; Connection org.springframework.jms.core.Connection = null ; Session org.springframework.jms.core.Session = null ; try { org.springframework.jms.core.Connection = getConnectionFactory ( ) . createConnection ( ) ; org.springframework.jms.core.Session = org.springframework.jms.core.Connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; if ( boolean ) { org.springframework.jms.core.Connection . start ( ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jms.core.Session ) ; } return org.springframework.jms.core.SessionCallback<T> . doInJms ( org.springframework.jms.core.Session ) ; } catch ( JMSException org.springframework.jms.core.JMSException ) { throw convertJmsAccessException ( org.springframework.jms.core.JMSException ) ; } finally { JmsUtils . closeSession ( org.springframework.jms.core.Session ) ; ConnectionFactoryUtils . releaseConnection ( org.springframework.jms.core.Connection , getConnectionFactory ( ) , boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( BrowserCallback < T > org.springframework.jms.core.BrowserCallback<T> ) throws org.springframework.jms.core.JmsException { Queue org.springframework.jms.core.Queue = org.springframework.jms.core.Queue ( ) ; if ( org.springframework.jms.core.Queue != null ) { return java.lang.Object ( org.springframework.jms.core.Queue , org.springframework.jms.core.BrowserCallback<T> ) ; } else { return java.lang.Object ( java.lang.String ( ) , org.springframework.jms.core.BrowserCallback<T> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( Queue org.springframework.jms.core.Queue , BrowserCallback < T > org.springframework.jms.core.BrowserCallback<T> ) throws org.springframework.jms.core.JmsException { return java.lang.Object ( org.springframework.jms.core.Queue , null , org.springframework.jms.core.BrowserCallback<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , BrowserCallback < T > org.springframework.jms.core.BrowserCallback<T> ) throws org.springframework.jms.core.JmsException { return java.lang.Object ( java.lang.String , null , org.springframework.jms.core.BrowserCallback<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , BrowserCallback < T > org.springframework.jms.core.BrowserCallback<T> ) throws org.springframework.jms.core.JmsException { Queue org.springframework.jms.core.Queue = org.springframework.jms.core.Queue ( ) ; if ( org.springframework.jms.core.Queue != null ) { return java.lang.Object ( org.springframework.jms.core.Queue , java.lang.String , org.springframework.jms.core.BrowserCallback<T> ) ; } else { return java.lang.Object ( java.lang.String ( ) , java.lang.String , org.springframework.jms.core.BrowserCallback<T> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( final Queue org.springframework.jms.core.Queue , final java.lang.String java.lang.String , final BrowserCallback < T > org.springframework.jms.core.BrowserCallback<T> )			throws org.springframework.jms.core.JmsException { Assert . notNull ( org.springframework.jms.core.BrowserCallback<T> , STRING ) ; return T ( new SessionCallback < T > ( ) { @ java.lang.Override public T T ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { QueueBrowser org.springframework.jms.core.QueueBrowser = org.springframework.jms.core.QueueBrowser ( org.springframework.jms.core.Session , org.springframework.jms.core.Queue , java.lang.String ) ; try { return org.springframework.jms.core.BrowserCallback<T> . doInJms ( org.springframework.jms.core.Session , org.springframework.jms.core.QueueBrowser ) ; } finally { JmsUtils . closeQueueBrowser ( org.springframework.jms.core.QueueBrowser ) ; } } } , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { QueueBrowser org.springframework.jms.core.QueueBrowser = org.springframework.jms.core.QueueBrowser ( org.springframework.jms.core.Session , org.springframework.jms.core.Queue , java.lang.String ) ; try { return org.springframework.jms.core.BrowserCallback<T> . doInJms ( org.springframework.jms.core.Session , org.springframework.jms.core.QueueBrowser ) ; } finally { JmsUtils . closeQueueBrowser ( org.springframework.jms.core.QueueBrowser ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final BrowserCallback < T > org.springframework.jms.core.BrowserCallback<T> )			throws org.springframework.jms.core.JmsException { Assert . notNull ( org.springframework.jms.core.BrowserCallback<T> , STRING ) ; return T ( new SessionCallback < T > ( ) { @ java.lang.Override public T T ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Queue org.springframework.jms.core.Queue = ( Queue ) getDestinationResolver ( ) . resolveDestinationName ( org.springframework.jms.core.Session , java.lang.String , false ) ; QueueBrowser org.springframework.jms.core.QueueBrowser = org.springframework.jms.core.QueueBrowser ( org.springframework.jms.core.Session , org.springframework.jms.core.Queue , java.lang.String ) ; try { return org.springframework.jms.core.BrowserCallback<T> . doInJms ( org.springframework.jms.core.Session , org.springframework.jms.core.QueueBrowser ) ; } finally { JmsUtils . closeQueueBrowser ( org.springframework.jms.core.QueueBrowser ) ; } } } , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { Queue org.springframework.jms.core.Queue = ( Queue ) getDestinationResolver ( ) . resolveDestinationName ( org.springframework.jms.core.Session , java.lang.String , false ) ; QueueBrowser org.springframework.jms.core.QueueBrowser = org.springframework.jms.core.QueueBrowser ( org.springframework.jms.core.Session , org.springframework.jms.core.Queue , java.lang.String ) ; try { return org.springframework.jms.core.BrowserCallback<T> . doInJms ( org.springframework.jms.core.Session , org.springframework.jms.core.QueueBrowser ) ; } finally { JmsUtils . closeQueueBrowser ( org.springframework.jms.core.QueueBrowser ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.Connection org.springframework.jms.core.Connection ( JmsResourceHolder org.springframework.jms.core.JmsResourceHolder ) { return org.springframework.jms.core.JmsResourceHolder . getConnection ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.Session org.springframework.jms.core.Session ( JmsResourceHolder org.springframework.jms.core.JmsResourceHolder ) { return org.springframework.jms.core.JmsResourceHolder . getSession ( ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Session org.springframework.jms.core.Session ) { return isSessionTransacted ( ) && ! ConnectionFactoryUtils . isSessionTransactional ( org.springframework.jms.core.Session , getConnectionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.MessageProducer org.springframework.jms.core.MessageProducer ( Session org.springframework.jms.core.Session , Destination org.springframework.jms.core.Destination ) throws org.springframework.jms.core.JMSException { MessageProducer org.springframework.jms.core.MessageProducer = org.springframework.jms.core.MessageProducer ( org.springframework.jms.core.Session , org.springframework.jms.core.Destination ) ; if ( ! boolean ( ) ) { org.springframework.jms.core.MessageProducer . setDisableMessageID ( true ) ; } if ( ! boolean ( ) ) { org.springframework.jms.core.MessageProducer . setDisableMessageTimestamp ( true ) ; } return org.springframework.jms.core.MessageProducer ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.MessageProducer org.springframework.jms.core.MessageProducer ( Session org.springframework.jms.core.Session , Destination org.springframework.jms.core.Destination ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Session . createProducer ( org.springframework.jms.core.Destination ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.MessageConsumer org.springframework.jms.core.MessageConsumer ( Session org.springframework.jms.core.Session , Destination org.springframework.jms.core.Destination , java.lang.String java.lang.String )			throws org.springframework.jms.core.JMSException { if ( isPubSubDomain ( ) ) { return org.springframework.jms.core.Session . createConsumer ( org.springframework.jms.core.Destination , java.lang.String , boolean ( ) ) ; } else { return org.springframework.jms.core.Session . createConsumer ( org.springframework.jms.core.Destination , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.QueueBrowser org.springframework.jms.core.QueueBrowser ( Session org.springframework.jms.core.Session , Queue org.springframework.jms.core.Queue , java.lang.String java.lang.String )			throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Session . createBrowser ( org.springframework.jms.core.Queue , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Connection org.springframework.jms.core.Connection ( JmsResourceHolder org.springframework.jms.core.JmsResourceHolder ) { return org.springframework.jms.core.JmsTemplate .this . org.springframework.jms.core.Connection ( org.springframework.jms.core.JmsResourceHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Session org.springframework.jms.core.Session ( JmsResourceHolder org.springframework.jms.core.JmsResourceHolder ) { return org.springframework.jms.core.JmsTemplate .this . org.springframework.jms.core.Session ( org.springframework.jms.core.JmsResourceHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Connection org.springframework.jms.core.Connection ( ) org.springframework.jms.core.JMSException { return org.springframework.jms.core.JmsTemplate .this . createConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Session org.springframework.jms.core.Session ( Connection org.springframework.jms.core.Connection ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.JmsTemplate .this . createSession ( org.springframework.jms.core.Connection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.jms.core.JmsTemplate .this . isSessionTransacted ( ) ; }  <METHOD_END>
