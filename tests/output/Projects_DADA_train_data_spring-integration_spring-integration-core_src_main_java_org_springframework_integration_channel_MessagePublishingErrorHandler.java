<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( DestinationResolver < MessageChannel > org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> ) { Assert . notNull ( org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> , STRING ) ; this . org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> = org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.channel.MessageChannel ) { this . org.springframework.integration.channel.MessageChannel = org.springframework.integration.channel.MessageChannel ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.channel.MessageChannel org.springframework.integration.channel.MessageChannel ( ) { java.lang.String java.lang.String = this . java.lang.String ; if ( java.lang.String != null ) { if ( this . org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> != null ) { this . org.springframework.integration.channel.MessageChannel = this . org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> . resolveDestination ( java.lang.String ) ; this . java.lang.String = null ; } } return this . org.springframework.integration.channel.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.channel.BeanFactory ) { Assert . notNull ( org.springframework.integration.channel.BeanFactory , STRING ) ; if ( this . org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> == null ) { this . org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> = new BeanFactoryChannelResolver ( org.springframework.integration.channel.BeanFactory ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( java.lang.Throwable java.lang.Throwable ) { MessageChannel org.springframework.integration.channel.MessageChannel = org.springframework.integration.channel.MessageChannel ( java.lang.Throwable ) ; boolean boolean = false ; if ( org.springframework.integration.channel.MessageChannel != null ) { try { if ( this . long >= NUMBER ) { boolean = org.springframework.integration.channel.MessageChannel . send ( new ErrorMessage ( java.lang.Throwable ) , this . long ) ; } else { boolean = org.springframework.integration.channel.MessageChannel . send ( new ErrorMessage ( java.lang.Throwable ) ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.integration.channel.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.channel.Log . warn ( STRING , java.lang.Throwable ) ; } if ( java.lang.Throwable instanceof java.lang.Error ) { throw ( ( java.lang.Error ) java.lang.Throwable ) ; } } } if ( ! boolean && this . org.springframework.integration.channel.Log . isErrorEnabled ( ) ) { Message < ? > org.springframework.integration.channel.Message<?> = ( java.lang.Throwable instanceof MessagingException ) ? ( ( MessagingException ) java.lang.Throwable ) . getFailedMessage ( ) : null ; if ( org.springframework.integration.channel.Message<> != null ) { this . org.springframework.integration.channel.Log . error ( STRING + org.springframework.integration.channel.Message<> , java.lang.Throwable ) ; } else { this . org.springframework.integration.channel.Log . error ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.channel.MessageChannel org.springframework.integration.channel.MessageChannel ( java.lang.Throwable java.lang.Throwable ) { Message < ? > org.springframework.integration.channel.Message<?> = ( java.lang.Throwable instanceof MessagingException ) ? ( ( MessagingException ) java.lang.Throwable ) . getFailedMessage ( ) : null ; if ( org.springframework.integration.channel.MessageChannel ( ) == null && this . org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> != null ) { this . org.springframework.integration.channel.MessageChannel = this . org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> . resolveDestination ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME ) ; } if ( org.springframework.integration.channel.Message<> == null || org.springframework.integration.channel.Message<> . getHeaders ( ) . getErrorChannel ( ) == null ) { return this . org.springframework.integration.channel.MessageChannel ; } java.lang.Object java.lang.Object = org.springframework.integration.channel.Message<> . getHeaders ( ) . getErrorChannel ( ) ; if ( java.lang.Object instanceof MessageChannel ) { return ( MessageChannel ) java.lang.Object ; } Assert . isInstanceOf ( java.lang.String .class , java.lang.Object , STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; return this . org.springframework.integration.channel.DestinationResolver<org.springframework.integration.channel.MessageChannel> . resolveDestination ( ( java.lang.String ) java.lang.Object ) ; }  <METHOD_END>
