<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation ( java.util.List<? extends org.springframework.data.mongodb.core.aggregation.AggregationOperation> < ? extends AggregationOperation > java.util.List<? extends org.springframework.data.mongodb.core.aggregation.AggregationOperation> ) { return org.springframework.data.mongodb.core.aggregation.Aggregation ( java.util.List<> . java.lang.Object[] ( new AggregationOperation [ java.util.List<> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation ( AggregationOperation ... org.springframework.data.mongodb.core.aggregation.AggregationOperation[] ) { return new org.springframework.data.mongodb.core.aggregation.Aggregation ( org.springframework.data.mongodb.core.aggregation.AggregationOperation[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.Aggregation org.springframework.data.mongodb.core.aggregation.Aggregation ( AggregationOptions org.springframework.data.mongodb.core.aggregation.AggregationOptions ) { Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationOptions , STRING ) ; return new org.springframework.data.mongodb.core.aggregation.Aggregation ( this . java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> , org.springframework.data.mongodb.core.aggregation.AggregationOptions ) ; }  <METHOD_END>
<METHOD_START> public static < T > org.springframework.data.mongodb.core.aggregation.TypedAggregation<T> < T > org.springframework.data.mongodb.core.aggregation.TypedAggregation<T> ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.List<? extends org.springframework.data.mongodb.core.aggregation.AggregationOperation> < ? extends AggregationOperation > java.util.List<? extends org.springframework.data.mongodb.core.aggregation.AggregationOperation> ) { return org.springframework.data.mongodb.core.aggregation.TypedAggregation ( java.lang.Class<T> , java.util.List<> . java.lang.Object[] ( new AggregationOperation [ java.util.List<> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> public static < T > org.springframework.data.mongodb.core.aggregation.TypedAggregation<T> < T > org.springframework.data.mongodb.core.aggregation.TypedAggregation<T> ( java.lang.Class<T> < T > java.lang.Class<T> , AggregationOperation ... org.springframework.data.mongodb.core.aggregation.AggregationOperation[] ) { return new TypedAggregation < T > ( java.lang.Class<T> , org.springframework.data.mongodb.core.aggregation.AggregationOperation[] ) ; }  <METHOD_END>
<METHOD_START> protected void ( AggregationOperation ... org.springframework.data.mongodb.core.aggregation.AggregationOperation[] ) { this( java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> ( org.springframework.data.mongodb.core.aggregation.AggregationOperation[] ) ); }  <METHOD_END>
<METHOD_START> protected static java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> < AggregationOperation > java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> ( AggregationOperation ... org.springframework.data.mongodb.core.aggregation.AggregationOperation[] ) { Assert . notEmpty ( org.springframework.data.mongodb.core.aggregation.AggregationOperation[] , STRING ) ; return java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.aggregation.AggregationOperation[] ) ; }  <METHOD_END>
<METHOD_START> protected void ( java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> < AggregationOperation > java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> ) { this( java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> , org.springframework.data.mongodb.core.aggregation.AggregationOptions ); }  <METHOD_END>
<METHOD_START> protected void ( java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> < AggregationOperation > java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> , AggregationOptions org.springframework.data.mongodb.core.aggregation.AggregationOptions ) { Assert . notNull ( java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> , STRING ) ; Assert . isTrue ( ! java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> . isEmpty ( ) , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.aggregation.AggregationOptions , STRING ) ; for ( AggregationOperation org.springframework.data.mongodb.core.aggregation.AggregationOperation : java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> ) { if ( org.springframework.data.mongodb.core.aggregation.AggregationOperation instanceof OutOperation && ! boolean ( org.springframework.data.mongodb.core.aggregation.AggregationOperation , java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } } this . java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> = java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> ; this . org.springframework.data.mongodb.core.aggregation.AggregationOptions = org.springframework.data.mongodb.core.aggregation.AggregationOptions ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( AggregationOperation org.springframework.data.mongodb.core.aggregation.AggregationOperation , java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> < AggregationOperation > java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> ) { return java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> . indexOf ( org.springframework.data.mongodb.core.aggregation.AggregationOperation ) == java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> . size ( ) - NUMBER ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation ( java.lang.String ... java.lang.String[] ) { return org.springframework.data.mongodb.core.aggregation.ProjectionOperation ( org.springframework.data.mongodb.core.aggregation.Fields ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation ( Fields org.springframework.data.mongodb.core.aggregation.Fields ) { return new ProjectionOperation ( org.springframework.data.mongodb.core.aggregation.Fields ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.UnwindOperation org.springframework.data.mongodb.core.aggregation.UnwindOperation ( java.lang.String java.lang.String ) { return new UnwindOperation ( field ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation ( java.lang.String java.lang.String ) { return ReplaceRootOperation . builder ( ) . withValueOf ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { return ReplaceRootOperation . builder ( ) . withValueOf ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.ReplaceRootOperationBuilder org.springframework.data.mongodb.core.aggregation.ReplaceRootOperationBuilder ( ) { return ReplaceRootOperation . builder ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.UnwindOperation org.springframework.data.mongodb.core.aggregation.UnwindOperation ( java.lang.String java.lang.String , boolean boolean ) { return new UnwindOperation ( field ( java.lang.String ) , boolean ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.UnwindOperation org.springframework.data.mongodb.core.aggregation.UnwindOperation ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new UnwindOperation ( field ( java.lang.String ) , field ( java.lang.String ) , false ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.UnwindOperation org.springframework.data.mongodb.core.aggregation.UnwindOperation ( java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean ) { return new UnwindOperation ( field ( java.lang.String ) , field ( java.lang.String ) , boolean ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.GroupOperation org.springframework.data.mongodb.core.aggregation.GroupOperation ( java.lang.String ... java.lang.String[] ) { return org.springframework.data.mongodb.core.aggregation.GroupOperation ( org.springframework.data.mongodb.core.aggregation.Fields ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.GroupOperation org.springframework.data.mongodb.core.aggregation.GroupOperation ( Fields org.springframework.data.mongodb.core.aggregation.Fields ) { return new GroupOperation ( org.springframework.data.mongodb.core.aggregation.Fields ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.StartWithBuilder org.springframework.data.mongodb.core.aggregation.StartWithBuilder ( java.lang.String java.lang.String ) { return GraphLookupOperation . builder ( ) . from ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.SortOperation org.springframework.data.mongodb.core.aggregation.SortOperation ( Sort org.springframework.data.mongodb.core.aggregation.Sort ) { return new SortOperation ( org.springframework.data.mongodb.core.aggregation.Sort ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.SortOperation org.springframework.data.mongodb.core.aggregation.SortOperation ( Direction org.springframework.data.mongodb.core.aggregation.Direction , java.lang.String ... java.lang.String[] ) { return new SortOperation ( new Sort ( org.springframework.data.mongodb.core.aggregation.Direction , java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.SkipOperation org.springframework.data.mongodb.core.aggregation.SkipOperation ( int int ) { return new SkipOperation ( int ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.SkipOperation org.springframework.data.mongodb.core.aggregation.SkipOperation ( long long ) { return new SkipOperation ( long ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.LimitOperation org.springframework.data.mongodb.core.aggregation.LimitOperation ( long long ) { return new LimitOperation ( long ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.MatchOperation org.springframework.data.mongodb.core.aggregation.MatchOperation ( Criteria org.springframework.data.mongodb.core.aggregation.Criteria ) { return new MatchOperation ( org.springframework.data.mongodb.core.aggregation.Criteria ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.MatchOperation org.springframework.data.mongodb.core.aggregation.MatchOperation ( CriteriaDefinition org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ) { return new MatchOperation ( org.springframework.data.mongodb.core.aggregation.CriteriaDefinition ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.OutOperation org.springframework.data.mongodb.core.aggregation.OutOperation ( java.lang.String java.lang.String ) { return new OutOperation ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.BucketOperation org.springframework.data.mongodb.core.aggregation.BucketOperation ( java.lang.String java.lang.String ) { return new BucketOperation ( field ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.BucketOperation org.springframework.data.mongodb.core.aggregation.BucketOperation ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression ) { return new BucketOperation ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.BucketAutoOperation org.springframework.data.mongodb.core.aggregation.BucketAutoOperation ( java.lang.String java.lang.String , int int ) { return new BucketAutoOperation ( field ( java.lang.String ) , int ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.BucketAutoOperation org.springframework.data.mongodb.core.aggregation.BucketAutoOperation ( AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression , int int ) { return new BucketAutoOperation ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , int ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.FacetOperation org.springframework.data.mongodb.core.aggregation.FacetOperation ( ) { return FacetOperation . EMPTY ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.FacetOperationBuilder org.springframework.data.mongodb.core.aggregation.FacetOperationBuilder ( AggregationOperation ... org.springframework.data.mongodb.core.aggregation.AggregationOperation[] ) { return org.springframework.data.mongodb.core.aggregation.FacetOperation ( ) . and ( org.springframework.data.mongodb.core.aggregation.AggregationOperation[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.LookupOperation org.springframework.data.mongodb.core.aggregation.LookupOperation ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.aggregation.LookupOperation ( field ( java.lang.String ) , field ( java.lang.String ) , field ( java.lang.String ) , field ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.LookupOperation org.springframework.data.mongodb.core.aggregation.LookupOperation ( Field org.springframework.data.mongodb.core.aggregation.Field , Field org.springframework.data.mongodb.core.aggregation.Field , Field org.springframework.data.mongodb.core.aggregation.Field , Field org.springframework.data.mongodb.core.aggregation.Field ) { return new LookupOperation ( org.springframework.data.mongodb.core.aggregation.Field , org.springframework.data.mongodb.core.aggregation.Field , org.springframework.data.mongodb.core.aggregation.Field , org.springframework.data.mongodb.core.aggregation.Field ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.CountOperationBuilder org.springframework.data.mongodb.core.aggregation.CountOperationBuilder ( ) { return new CountOperationBuilder ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields ( java.lang.String ... java.lang.String[] ) { return Fields . fields ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.Fields org.springframework.data.mongodb.core.aggregation.Fields ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return Fields . from ( field ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.aggregation.GeoNearOperation org.springframework.data.mongodb.core.aggregation.GeoNearOperation ( NearQuery org.springframework.data.mongodb.core.aggregation.NearQuery , java.lang.String java.lang.String ) { return new GeoNearOperation ( org.springframework.data.mongodb.core.aggregation.NearQuery , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static AggregationOptions . AggregationOptions.Builder AggregationOptions.Builder ( ) { return new AggregationOptions . AggregationOptions ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( java.lang.String java.lang.String , AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) { java.util.List<org.springframework.data.mongodb.core.aggregation.Document> < Document > java.util.List<org.springframework.data.mongodb.core.aggregation.Document> = AggregationOperationRenderer . toDocument ( java.util.List<org.springframework.data.mongodb.core.aggregation.AggregationOperation> , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( STRING , java.lang.String ) ; org.springframework.data.mongodb.core.aggregation.Document . put ( STRING , java.util.List<org.springframework.data.mongodb.core.aggregation.Document> ) ; org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.AggregationOptions . applyAndReturnPotentiallyChangedCommand ( org.springframework.data.mongodb.core.aggregation.Document ) ; return org.springframework.data.mongodb.core.aggregation.Document ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return SerializationUtils . serializeToJsonSafely ( org.springframework.data.mongodb.core.aggregation.Document ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.String java.lang.String ) { if ( java.lang.String == null || ! java.lang.String . boolean ( java.lang.String ) || java.lang.String . int ( ) <= NUMBER ) { return false ; } int int = java.lang.String . int ( '.' ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int == - NUMBER ? java.lang.String . int ( ) : int ) ; for ( org.springframework.data.mongodb.core.aggregation.Aggregation.SystemVariable org.springframework.data.mongodb.core.aggregation.Aggregation.SystemVariable : org.springframework.data.mongodb.core.aggregation.Aggregation.SystemVariable[] ( ) ) { if ( org.springframework.data.mongodb.core.aggregation.Aggregation.SystemVariable . java.lang.String ( ) . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( java.lang.String ( ) ) ; }  <METHOD_END>
