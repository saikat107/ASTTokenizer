<METHOD_START> @ Test public void void ( ) java.lang.Exception { SftpPersistentAcceptOnceFileListFilter org.springframework.integration.sftp.filters.SftpPersistentAcceptOnceFileListFilter = new SftpPersistentAcceptOnceFileListFilter ( new SimpleMetadataStore ( ) , STRING ) ; ChannelSftp org.springframework.integration.sftp.filters.ChannelSftp = new ChannelSftp ( ) ; SftpATTRS org.springframework.integration.sftp.filters.SftpATTRS = mock ( SftpATTRS .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> < LsEntry > java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> = ( java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> < LsEntry > ) LsEntry .class . java.lang.reflect.Constructor<?>[] ( ) [ NUMBER ] ; java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> . setAccessible ( true ) ; LsEntry org.springframework.integration.sftp.filters.LsEntry = java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> . newInstance ( org.springframework.integration.sftp.filters.ChannelSftp , STRING , STRING , org.springframework.integration.sftp.filters.SftpATTRS ) ; LsEntry org.springframework.integration.sftp.filters.LsEntry = java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> . newInstance ( org.springframework.integration.sftp.filters.ChannelSftp , STRING , STRING , org.springframework.integration.sftp.filters.SftpATTRS ) ; LsEntry org.springframework.integration.sftp.filters.LsEntry = java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> . newInstance ( org.springframework.integration.sftp.filters.ChannelSftp , STRING , STRING , org.springframework.integration.sftp.filters.SftpATTRS ) ; LsEntry [] org.springframework.integration.sftp.filters.LsEntry[] = new LsEntry [] { org.springframework.integration.sftp.filters.LsEntry , org.springframework.integration.sftp.filters.LsEntry , org.springframework.integration.sftp.filters.LsEntry } ; java.util.List<org.springframework.integration.sftp.filters.LsEntry> < LsEntry > java.util.List<org.springframework.integration.sftp.filters.LsEntry> = org.springframework.integration.sftp.filters.SftpPersistentAcceptOnceFileListFilter . filterFiles ( org.springframework.integration.sftp.filters.LsEntry[] ) ; assertTrue ( java.util.Arrays . boolean ( org.springframework.integration.sftp.filters.LsEntry[] , java.util.List<org.springframework.integration.sftp.filters.LsEntry> . toArray ( ) ) ) ; java.util.List<org.springframework.integration.sftp.filters.LsEntry> < LsEntry > java.util.List<org.springframework.integration.sftp.filters.LsEntry> = org.springframework.integration.sftp.filters.SftpPersistentAcceptOnceFileListFilter . filterFiles ( org.springframework.integration.sftp.filters.LsEntry[] ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.sftp.filters.LsEntry> . size ( ) ) ; org.springframework.integration.sftp.filters.SftpPersistentAcceptOnceFileListFilter . rollback ( java.util.List<org.springframework.integration.sftp.filters.LsEntry> . get ( NUMBER ) , java.util.List<org.springframework.integration.sftp.filters.LsEntry> ) ; java.util.List<org.springframework.integration.sftp.filters.LsEntry> = org.springframework.integration.sftp.filters.SftpPersistentAcceptOnceFileListFilter . filterFiles ( org.springframework.integration.sftp.filters.LsEntry[] ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.sftp.filters.LsEntry> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.sftp.filters.LsEntry> . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.sftp.filters.LsEntry> . get ( NUMBER ) . getFilename ( ) ) ; java.util.List<org.springframework.integration.sftp.filters.LsEntry> = org.springframework.integration.sftp.filters.SftpPersistentAcceptOnceFileListFilter . filterFiles ( org.springframework.integration.sftp.filters.LsEntry[] ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.sftp.filters.LsEntry> . size ( ) ) ; org.springframework.integration.sftp.filters.SftpPersistentAcceptOnceFileListFilter . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SftpPersistentAcceptOnceFileListFilter org.springframework.integration.sftp.filters.SftpPersistentAcceptOnceFileListFilter = new SftpPersistentAcceptOnceFileListFilter ( new SimpleMetadataStore ( ) , STRING ) ; ChannelSftp org.springframework.integration.sftp.filters.ChannelSftp = new ChannelSftp ( ) ; SftpATTRS org.springframework.integration.sftp.filters.SftpATTRS = mock ( SftpATTRS .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> < LsEntry > java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> = ( java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> < LsEntry > ) LsEntry .class . java.lang.reflect.Constructor<?>[] ( ) [ NUMBER ] ; java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> . setAccessible ( true ) ; LsEntry org.springframework.integration.sftp.filters.LsEntry = java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> . newInstance ( org.springframework.integration.sftp.filters.ChannelSftp , STRING , STRING , org.springframework.integration.sftp.filters.SftpATTRS ) ; LsEntry org.springframework.integration.sftp.filters.LsEntry = java.lang.reflect.Constructor<org.springframework.integration.sftp.filters.LsEntry> . newInstance ( org.springframework.integration.sftp.filters.ChannelSftp , STRING , STRING , org.springframework.integration.sftp.filters.SftpATTRS ) ; LsEntry [] org.springframework.integration.sftp.filters.LsEntry[] = new LsEntry [] { org.springframework.integration.sftp.filters.LsEntry , org.springframework.integration.sftp.filters.LsEntry } ; java.util.List<org.springframework.integration.sftp.filters.LsEntry> < LsEntry > java.util.List<org.springframework.integration.sftp.filters.LsEntry> = org.springframework.integration.sftp.filters.SftpPersistentAcceptOnceFileListFilter . filterFiles ( org.springframework.integration.sftp.filters.LsEntry[] ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.sftp.filters.LsEntry> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.sftp.filters.LsEntry> . get ( NUMBER ) . getFilename ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.sftp.filters.LsEntry> . get ( NUMBER ) . getFilename ( ) ) ; org.springframework.integration.sftp.filters.SftpPersistentAcceptOnceFileListFilter . close ( ) ; }  <METHOD_END>
