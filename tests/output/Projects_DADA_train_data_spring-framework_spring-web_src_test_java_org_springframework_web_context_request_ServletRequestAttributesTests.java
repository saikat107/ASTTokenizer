<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ServletRequestAttributes ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; org.springframework.web.context.request.ServletRequestAttributes . setAttribute ( java.lang.String , java.io.Serializable , RequestAttributes . SCOPE_REQUEST ) ; java.lang.Object java.lang.Object = org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( java.lang.String ) ; assertSame ( java.io.Serializable , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; org.springframework.web.context.request.MockHttpServletRequest . close ( ) ; try { org.springframework.web.context.request.ServletRequestAttributes . setAttribute ( java.lang.String , java.io.Serializable , RequestAttributes . SCOPE_REQUEST ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpSession org.springframework.web.context.request.MockHttpSession = new MockHttpSession ( ) ; org.springframework.web.context.request.MockHttpSession . setAttribute ( java.lang.String , java.io.Serializable ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.context.request.MockHttpServletRequest . setSession ( org.springframework.web.context.request.MockHttpSession ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; org.springframework.web.context.request.ServletRequestAttributes . setAttribute ( java.lang.String , java.io.Serializable , RequestAttributes . SCOPE_SESSION ) ; assertSame ( java.io.Serializable , org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpSession org.springframework.web.context.request.MockHttpSession = new MockHttpSession ( ) ; org.springframework.web.context.request.MockHttpSession . setAttribute ( java.lang.String , java.io.Serializable ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.context.request.MockHttpServletRequest . setSession ( org.springframework.web.context.request.MockHttpSession ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; assertSame ( java.io.Serializable , org.springframework.web.context.request.ServletRequestAttributes . getAttribute ( java.lang.String , RequestAttributes . SCOPE_SESSION ) ) ; org.springframework.web.context.request.ServletRequestAttributes . requestCompleted ( ) ; org.springframework.web.context.request.MockHttpServletRequest . close ( ) ; org.springframework.web.context.request.ServletRequestAttributes . setAttribute ( java.lang.String , java.io.Serializable , RequestAttributes . SCOPE_SESSION ) ; assertSame ( java.io.Serializable , org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.context.request.HttpServletRequest = mock ( HttpServletRequest .class ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.HttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.context.request.ServletRequestAttributes . getAttribute ( java.lang.String , RequestAttributes . SCOPE_SESSION ) ; assertNull ( java.lang.Object ) ; verify ( org.springframework.web.context.request.HttpServletRequest ) . getSession ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpSession org.springframework.web.context.request.MockHttpSession = new MockHttpSession ( ) ; org.springframework.web.context.request.MockHttpSession . setAttribute ( java.lang.String , java.io.Serializable ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.context.request.MockHttpServletRequest . setSession ( org.springframework.web.context.request.MockHttpSession ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; org.springframework.web.context.request.ServletRequestAttributes . removeAttribute ( java.lang.String , RequestAttributes . SCOPE_SESSION ) ; java.lang.Object java.lang.Object = org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.context.request.HttpServletRequest = mock ( HttpServletRequest .class ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.HttpServletRequest ) ; org.springframework.web.context.request.ServletRequestAttributes . removeAttribute ( java.lang.String , RequestAttributes . SCOPE_SESSION ) ; verify ( org.springframework.web.context.request.HttpServletRequest ) . getSession ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpServletRequest org.springframework.web.context.request.HttpServletRequest = mock ( HttpServletRequest .class ) ; HttpSession org.springframework.web.context.request.HttpSession = mock ( HttpSession .class ) ; given ( org.springframework.web.context.request.HttpServletRequest . getSession ( anyBoolean ( ) ) ) . willReturn ( org.springframework.web.context.request.HttpSession ) ; given ( org.springframework.web.context.request.HttpSession . getAttribute ( java.lang.String ) ) . willReturn ( java.io.Serializable ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.HttpServletRequest ) ; assertSame ( java.io.Serializable , org.springframework.web.context.request.ServletRequestAttributes . getAttribute ( java.lang.String , RequestAttributes . SCOPE_SESSION ) ) ; org.springframework.web.context.request.ServletRequestAttributes . requestCompleted ( ) ; verify ( org.springframework.web.context.request.HttpSession , times ( NUMBER ) ) . getAttribute ( java.lang.String ) ; verify ( org.springframework.web.context.request.HttpSession ) . setAttribute ( java.lang.String , java.io.Serializable ) ; verifyNoMoreInteractions ( org.springframework.web.context.request.HttpSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new java.lang.Character ( 'x' ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( java.lang.Boolean . java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new java.lang.Float ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new java.math.BigInteger ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { HttpServletRequest org.springframework.web.context.request.HttpServletRequest = mock ( HttpServletRequest .class ) ; HttpSession org.springframework.web.context.request.HttpSession = mock ( HttpSession .class ) ; given ( org.springframework.web.context.request.HttpServletRequest . getSession ( anyBoolean ( ) ) ) . willReturn ( org.springframework.web.context.request.HttpSession ) ; given ( org.springframework.web.context.request.HttpSession . getAttribute ( java.lang.String ) ) . willReturn ( java.lang.Object ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.HttpServletRequest ) ; org.springframework.web.context.request.ServletRequestAttributes . getAttribute ( java.lang.String , RequestAttributes . SCOPE_SESSION ) ; org.springframework.web.context.request.ServletRequestAttributes . requestCompleted ( ) ; verify ( org.springframework.web.context.request.HttpSession , times ( NUMBER ) ) . getAttribute ( java.lang.String ) ; verifyNoMoreInteractions ( org.springframework.web.context.request.HttpSession ) ; }  <METHOD_END>
