<METHOD_START> @ java.lang.Override public void void ( org.w3c.dom.Document org.w3c.dom.Document , XmlReaderContext org.springframework.beans.factory.xml.XmlReaderContext ) { this . org.springframework.beans.factory.xml.XmlReaderContext = org.springframework.beans.factory.xml.XmlReaderContext ; org.springframework.beans.factory.xml.Log . debug ( STRING ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( ) ; void ( org.w3c.dom.Element ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.beans.factory.xml.XmlReaderContext org.springframework.beans.factory.xml.XmlReaderContext ( ) { return this . org.springframework.beans.factory.xml.XmlReaderContext ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( org.w3c.dom.Element org.w3c.dom.Element ) { return org.springframework.beans.factory.xml.XmlReaderContext ( ) . extractSource ( org.w3c.dom.Element ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element ) { BeanDefinitionParserDelegate org.springframework.beans.factory.xml.BeanDefinitionParserDelegate = this . org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ; this . org.springframework.beans.factory.xml.BeanDefinitionParserDelegate = org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ( org.springframework.beans.factory.xml.XmlReaderContext ( ) , org.w3c.dom.Element , org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ) ; if ( this . org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . isDefaultNamespace ( org.w3c.dom.Element ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , BeanDefinitionParserDelegate . MULTI_VALUE_ATTRIBUTE_DELIMITERS ) ; if ( ! org.springframework.beans.factory.xml.XmlReaderContext ( ) . getEnvironment ( ) . acceptsProfiles ( java.lang.String[] ) ) { if ( org.springframework.beans.factory.xml.Log . isInfoEnabled ( ) ) { org.springframework.beans.factory.xml.Log . info ( STRING + java.lang.String + STRING + org.springframework.beans.factory.xml.XmlReaderContext ( ) . getResource ( ) ) ; } return; } } } void ( org.w3c.dom.Element ) ; void ( org.w3c.dom.Element , this . org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ) ; void ( org.w3c.dom.Element ) ; this . org.springframework.beans.factory.xml.BeanDefinitionParserDelegate = org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.xml.BeanDefinitionParserDelegate org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ( XmlReaderContext org.springframework.beans.factory.xml.XmlReaderContext , org.w3c.dom.Element org.w3c.dom.Element , BeanDefinitionParserDelegate org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ) { BeanDefinitionParserDelegate org.springframework.beans.factory.xml.BeanDefinitionParserDelegate = new BeanDefinitionParserDelegate ( org.springframework.beans.factory.xml.XmlReaderContext ) ; org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . initDefaults ( org.w3c.dom.Element , org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ) ; return org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ; }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , BeanDefinitionParserDelegate org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ) { if ( org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . isDefaultNamespace ( org.w3c.dom.Element ) ) { org.w3c.dom.NodeList org.w3c.dom.NodeList = org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ; for ( int int = NUMBER ; int < org.w3c.dom.NodeList . int ( ) ; int ++ ) { org.w3c.dom.Node org.w3c.dom.Node = org.w3c.dom.NodeList . org.w3c.dom.Node ( int ) ; if ( org.w3c.dom.Node instanceof org.w3c.dom.Element ) { org.w3c.dom.Element org.w3c.dom.Element = ( org.w3c.dom.Element ) org.w3c.dom.Node ; if ( org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . isDefaultNamespace ( org.w3c.dom.Element ) ) { void ( org.w3c.dom.Element , org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ) ; } else { org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . parseCustomElement ( org.w3c.dom.Element ) ; } } } } else { org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . parseCustomElement ( org.w3c.dom.Element ) ; } }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , BeanDefinitionParserDelegate org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ) { if ( org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . nodeNameEquals ( org.w3c.dom.Element , java.lang.String ) ) { void ( org.w3c.dom.Element ) ; } else if ( org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . nodeNameEquals ( org.w3c.dom.Element , java.lang.String ) ) { void ( org.w3c.dom.Element ) ; } else if ( org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . nodeNameEquals ( org.w3c.dom.Element , java.lang.String ) ) { void ( org.w3c.dom.Element , org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ) ; } else if ( org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . nodeNameEquals ( org.w3c.dom.Element , java.lang.String ) ) { void ( org.w3c.dom.Element ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.beans.factory.xml.XmlReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; return; } java.lang.String = org.springframework.beans.factory.xml.XmlReaderContext ( ) . getEnvironment ( ) . resolveRequiredPlaceholders ( java.lang.String ) ; java.util.Set<org.springframework.beans.factory.xml.Resource> < Resource > java.util.Set<org.springframework.beans.factory.xml.Resource> = new java.util.LinkedHashSet<org.springframework.beans.factory.xml.Resource> <> ( NUMBER ) ; boolean boolean = false ; try { boolean = ResourcePatternUtils . isUrl ( java.lang.String ) || ResourceUtils . toURI ( java.lang.String ) . isAbsolute ( ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { } if ( boolean ) { try { int int = org.springframework.beans.factory.xml.XmlReaderContext ( ) . getReader ( ) . loadBeanDefinitions ( java.lang.String , java.util.Set<org.springframework.beans.factory.xml.Resource> ) ; if ( org.springframework.beans.factory.xml.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.xml.Log . debug ( STRING + int + STRING + java.lang.String + STRING ) ; } } catch ( BeanDefinitionStoreException org.springframework.beans.factory.xml.BeanDefinitionStoreException ) { org.springframework.beans.factory.xml.XmlReaderContext ( ) . error ( STRING + java.lang.String + STRING , org.w3c.dom.Element , org.springframework.beans.factory.xml.BeanDefinitionStoreException ) ; } } else { try { int int ; Resource org.springframework.beans.factory.xml.Resource = org.springframework.beans.factory.xml.XmlReaderContext ( ) . getResource ( ) . createRelative ( java.lang.String ) ; if ( org.springframework.beans.factory.xml.Resource . exists ( ) ) { int = org.springframework.beans.factory.xml.XmlReaderContext ( ) . getReader ( ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.Resource ) ; java.util.Set<org.springframework.beans.factory.xml.Resource> . add ( org.springframework.beans.factory.xml.Resource ) ; } else { java.lang.String java.lang.String = org.springframework.beans.factory.xml.XmlReaderContext ( ) . getResource ( ) . getURL ( ) . toString ( ) ; int = org.springframework.beans.factory.xml.XmlReaderContext ( ) . getReader ( ) . loadBeanDefinitions ( StringUtils . applyRelativePath ( java.lang.String , java.lang.String ) , java.util.Set<org.springframework.beans.factory.xml.Resource> ) ; } if ( org.springframework.beans.factory.xml.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.xml.Log . debug ( STRING + int + STRING + java.lang.String + STRING ) ; } } catch ( java.io.IOException java.io.IOException ) { org.springframework.beans.factory.xml.XmlReaderContext ( ) . error ( STRING , org.w3c.dom.Element , java.io.IOException ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.xml.BeanDefinitionStoreException ) { org.springframework.beans.factory.xml.XmlReaderContext ( ) . error ( STRING + java.lang.String + STRING , org.w3c.dom.Element , org.springframework.beans.factory.xml.BeanDefinitionStoreException ) ; } } Resource [] org.springframework.beans.factory.xml.Resource[] = java.util.Set<org.springframework.beans.factory.xml.Resource> . toArray ( new Resource [ java.util.Set<org.springframework.beans.factory.xml.Resource> . size ( ) ] ) ; org.springframework.beans.factory.xml.XmlReaderContext ( ) . fireImportProcessed ( java.lang.String , org.springframework.beans.factory.xml.Resource[] , java.lang.Object ( org.w3c.dom.Element ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; boolean boolean = true ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.beans.factory.xml.XmlReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; boolean = false ; } if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.beans.factory.xml.XmlReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; boolean = false ; } if ( boolean ) { try { org.springframework.beans.factory.xml.XmlReaderContext ( ) . getRegistry ( ) . registerAlias ( java.lang.String , java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.beans.factory.xml.XmlReaderContext ( ) . error ( STRING + java.lang.String + STRING + java.lang.String + STRING , org.w3c.dom.Element , java.lang.Exception ) ; } org.springframework.beans.factory.xml.XmlReaderContext ( ) . fireAliasRegistered ( java.lang.String , java.lang.String , java.lang.Object ( org.w3c.dom.Element ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , BeanDefinitionParserDelegate org.springframework.beans.factory.xml.BeanDefinitionParserDelegate ) { BeanDefinitionHolder org.springframework.beans.factory.xml.BeanDefinitionHolder = org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . parseBeanDefinitionElement ( org.w3c.dom.Element ) ; if ( org.springframework.beans.factory.xml.BeanDefinitionHolder != null ) { org.springframework.beans.factory.xml.BeanDefinitionHolder = org.springframework.beans.factory.xml.BeanDefinitionParserDelegate . decorateBeanDefinitionIfRequired ( org.w3c.dom.Element , org.springframework.beans.factory.xml.BeanDefinitionHolder ) ; try { BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.beans.factory.xml.BeanDefinitionHolder , org.springframework.beans.factory.xml.XmlReaderContext ( ) . getRegistry ( ) ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.xml.BeanDefinitionStoreException ) { org.springframework.beans.factory.xml.XmlReaderContext ( ) . error ( STRING + org.springframework.beans.factory.xml.BeanDefinitionHolder . getBeanName ( ) + STRING , org.w3c.dom.Element , org.springframework.beans.factory.xml.BeanDefinitionStoreException ) ; } org.springframework.beans.factory.xml.XmlReaderContext ( ) . fireComponentRegistered ( new BeanComponentDefinition ( org.springframework.beans.factory.xml.BeanDefinitionHolder ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element ) {	}  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element ) {	}  <METHOD_END>
