<METHOD_START> @ Before public void void ( ) { this . org.springframework.core.convert.support.GenericConversionService = new DefaultConversionService ( ) ; this . org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.ByteBufferConverterTests.ByteArrayToOtherTypeConverter ( ) ) ; this . org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.ByteBufferConverterTests.OtherTypeToByteArrayConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER } ; java.nio.ByteBuffer java.nio.ByteBuffer = this . org.springframework.core.convert.support.GenericConversionService . convert ( byte[] , java.nio.ByteBuffer .class ) ; assertThat ( java.nio.ByteBuffer . byte[] ( ) , not ( sameInstance ( byte[] ) ) ) ; assertThat ( java.nio.ByteBuffer . byte[] ( ) , equalTo ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER } ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; byte [] byte[] = this . org.springframework.core.convert.support.GenericConversionService . convert ( java.nio.ByteBuffer , byte [] .class ) ; assertThat ( byte[] , not ( sameInstance ( byte[] ) ) ) ; assertThat ( byte[] , equalTo ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER } ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; org.springframework.core.convert.support.ByteBufferConverterTests.OtherType org.springframework.core.convert.support.ByteBufferConverterTests.OtherType = this . org.springframework.core.convert.support.GenericConversionService . convert ( java.nio.ByteBuffer , org.springframework.core.convert.support.ByteBufferConverterTests.OtherType .class ) ; assertThat ( org.springframework.core.convert.support.ByteBufferConverterTests.OtherType . byte[] , not ( sameInstance ( byte[] ) ) ) ; assertThat ( org.springframework.core.convert.support.ByteBufferConverterTests.OtherType . byte[] , equalTo ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER } ; org.springframework.core.convert.support.ByteBufferConverterTests.OtherType org.springframework.core.convert.support.ByteBufferConverterTests.OtherType = new org.springframework.core.convert.support.ByteBufferConverterTests.OtherType ( byte[] ) ; java.nio.ByteBuffer java.nio.ByteBuffer = this . org.springframework.core.convert.support.GenericConversionService . convert ( org.springframework.core.convert.support.ByteBufferConverterTests.OtherType , java.nio.ByteBuffer .class ) ; assertThat ( java.nio.ByteBuffer . byte[] ( ) , not ( sameInstance ( byte[] ) ) ) ; assertThat ( java.nio.ByteBuffer . byte[] ( ) , equalTo ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER } ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer java.nio.ByteBuffer = this . org.springframework.core.convert.support.GenericConversionService . convert ( java.nio.ByteBuffer , java.nio.ByteBuffer .class ) ; assertThat ( java.nio.ByteBuffer , not ( sameInstance ( java.nio.ByteBuffer . java.nio.Buffer ( ) ) ) ) ; assertThat ( java.nio.ByteBuffer , equalTo ( java.nio.ByteBuffer . java.nio.Buffer ( ) ) ) ; assertThat ( java.nio.ByteBuffer , equalTo ( java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ) ) ; assertThat ( java.nio.ByteBuffer . byte[] ( ) , equalTo ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> public void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.convert.support.ByteBufferConverterTests.OtherType org.springframework.core.convert.support.ByteBufferConverterTests.OtherType ( byte [] byte[] ) { return new org.springframework.core.convert.support.ByteBufferConverterTests.OtherType ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( org.springframework.core.convert.support.ByteBufferConverterTests.OtherType org.springframework.core.convert.support.ByteBufferConverterTests.OtherType ) { return org.springframework.core.convert.support.ByteBufferConverterTests.OtherType . byte[] ; }  <METHOD_END>
