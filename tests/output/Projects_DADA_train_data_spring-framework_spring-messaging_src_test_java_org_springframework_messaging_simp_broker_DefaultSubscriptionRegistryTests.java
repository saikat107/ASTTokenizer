<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( null , java.lang.String , java.lang.String ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , null , java.lang.String ) ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , null ) ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING + org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; java.lang.String java.lang.String = STRING ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String ) ) ; } MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; java.lang.String java.lang.String = STRING ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String ) ) ; } } MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ) ; assertEquals ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ) ; assertEquals ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING + org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.broker.Message<?> = org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String , java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String , java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterAllSubscriptions ( java.lang.String ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String ) ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String , java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String ) ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String ) ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String ) ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterAllSubscriptions ( java.lang.String ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterAllSubscriptions ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String ) ) ; Message < ? > org.springframework.messaging.simp.broker.Message<?> = org.springframework.messaging.simp.broker.Message<?> ( STRING ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING + org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; org.springframework.messaging.simp.broker.Message<?> = org.springframework.messaging.simp.broker.Message<?> ( STRING ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING + org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; org.springframework.messaging.simp.broker.Message<?> = org.springframework.messaging.simp.broker.Message<?> ( STRING ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING + org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String , java.lang.String ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setNativeHeader ( STRING , STRING ) ; Message < ? > org.springframework.messaging.simp.broker.Message<?> = MessageBuilder . createMessage ( STRING , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING ) ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING ) ) ; org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; java.lang.String java.lang.String = STRING ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String ) ) ; } } this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING + org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ) ; assertEquals ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; java.lang.String java.lang.String = STRING ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String ) ) ; } } this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterAllSubscriptions ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterAllSubscriptions ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( java.lang.String ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING + org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.List<java.lang.String> , java.util.List<java.lang.String> ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterAllSubscriptions ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING + org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> , NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> = org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . entrySet ( ) . iterator ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> ( ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) ; assertNotNull ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) . iterator ( ) ; java.util.Iterator<java.lang.String> . java.lang.String ( ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . unregisterSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING ) ) ; java.util.Iterator<java.lang.String> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . setCacheLimit ( NUMBER ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) . size ( ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) . size ( ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . registerSubscription ( org.springframework.messaging.simp.broker.Message<?> ( STRING , STRING , STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) . size ( ) ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry . findSubscriptions ( org.springframework.messaging.simp.broker.Message<?> ( STRING ) ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.broker.Message<?> < ? > org.springframework.messaging.simp.broker.Message<?> ( java.lang.String java.lang.String ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; return MessageBuilder . createMessage ( STRING , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.broker.Message<?> < ? > org.springframework.messaging.simp.broker.Message<?> ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.messaging.simp.broker.Message<?> ( java.lang.String , java.lang.String , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.broker.Message<?> < ? > org.springframework.messaging.simp.broker.Message<?> ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . SUBSCRIBE ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSubscriptionId ( java.lang.String ) ; if ( java.lang.String != null ) { org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; } if ( java.lang.String != null ) { org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setNativeHeader ( STRING , java.lang.String ) ; } return MessageBuilder . createMessage ( STRING , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.broker.Message<?> < ? > org.springframework.messaging.simp.broker.Message<?> ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . UNSUBSCRIBE ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSubscriptionId ( java.lang.String ) ; return MessageBuilder . createMessage ( STRING , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.util.Collections . void ( java.util.List<java.lang.String> ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
