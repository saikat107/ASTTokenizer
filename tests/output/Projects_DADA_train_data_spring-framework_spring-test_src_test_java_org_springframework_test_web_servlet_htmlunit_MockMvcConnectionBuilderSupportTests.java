<METHOD_START> @ Before public void void ( ) { when ( this . org.springframework.test.web.servlet.htmlunit.WebClient . getWebConnection ( ) ) . thenReturn ( mock ( WebConnection .class ) ) ; this . org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport = new MockMvcWebConnectionBuilderSupport ( this . org.springframework.test.web.servlet.htmlunit.WebApplicationContext ) {} ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MockMvcWebConnectionBuilderSupport ( ( MockMvc ) null ) {} ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MockMvcWebConnectionBuilderSupport ( ( WebApplicationContext ) null ) {} ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection = this . org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport . createConnection ( this . org.springframework.test.web.servlet.htmlunit.WebClient ) ; void ( org.springframework.test.web.servlet.htmlunit.WebConnection , STRING ) ; void ( org.springframework.test.web.servlet.htmlunit.WebConnection , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc = MockMvcBuilders . webAppContextSetup ( org.springframework.test.web.servlet.htmlunit.WebApplicationContext ) . build ( ) ; WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection = new MockMvcWebConnectionBuilderSupport ( org.springframework.test.web.servlet.htmlunit.MockMvc ) {} . createConnection ( this . org.springframework.test.web.servlet.htmlunit.WebClient ) ; void ( org.springframework.test.web.servlet.htmlunit.WebConnection , STRING ) ; void ( org.springframework.test.web.servlet.htmlunit.WebConnection , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection = this . org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport . useMockMvcForHosts ( STRING ) . createConnection ( this . org.springframework.test.web.servlet.htmlunit.WebClient ) ; void ( org.springframework.test.web.servlet.htmlunit.WebConnection , STRING ) ; void ( org.springframework.test.web.servlet.htmlunit.WebConnection , STRING ) ; void ( org.springframework.test.web.servlet.htmlunit.WebConnection , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection = this . org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport . alwaysUseMockMvc ( ) . createConnection ( this . org.springframework.test.web.servlet.htmlunit.WebClient ) ; void ( org.springframework.test.web.servlet.htmlunit.WebConnection , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection = this . org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport . createConnection ( this . org.springframework.test.web.servlet.htmlunit.WebClient ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse ( org.springframework.test.web.servlet.htmlunit.WebConnection , STRING ) . getContentAsString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection = this . org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport . contextPath ( STRING ) . createConnection ( this . org.springframework.test.web.servlet.htmlunit.WebClient ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse ( org.springframework.test.web.servlet.htmlunit.WebConnection , STRING ) . getContentAsString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection , java.lang.String java.lang.String ) throws java.lang.Exception { assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse ( org.springframework.test.web.servlet.htmlunit.WebConnection , java.lang.String ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection , java.lang.String java.lang.String ) throws java.lang.Exception { assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse ( org.springframework.test.web.servlet.htmlunit.WebConnection , java.lang.String ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.servlet.htmlunit.WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse ( WebConnection org.springframework.test.web.servlet.htmlunit.WebConnection , java.lang.String java.lang.String ) throws java.io.IOException { return org.springframework.test.web.servlet.htmlunit.WebConnection . getResponse ( new WebRequest ( new java.net.URL ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public java.lang.String java.lang.String ( HttpServletRequest org.springframework.test.web.servlet.htmlunit.HttpServletRequest ) { return org.springframework.test.web.servlet.htmlunit.HttpServletRequest . getContextPath ( ) ; }  <METHOD_END>
