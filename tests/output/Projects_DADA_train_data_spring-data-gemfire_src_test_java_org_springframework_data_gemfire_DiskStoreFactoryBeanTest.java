<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.DiskStoreFactoryBean . setBeanName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.DiskStoreFactoryBean . validateCompactionThreshold ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.DiskStoreFactoryBean . validateCompactionThreshold ( NUMBER ) ; org.springframework.data.gemfire.DiskStoreFactoryBean . validateCompactionThreshold ( NUMBER ) ; org.springframework.data.gemfire.DiskStoreFactoryBean . validateCompactionThreshold ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { org.springframework.data.gemfire.DiskStoreFactoryBean . validateCompactionThreshold ( - NUMBER ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.DiskStoreFactoryBean . getName ( ) , - NUMBER ) , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { org.springframework.data.gemfire.DiskStoreFactoryBean . validateCompactionThreshold ( NUMBER ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.DiskStoreFactoryBean . getName ( ) , NUMBER ) , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.DiskStoreFactoryBean . setCompactionThreshold ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { org.springframework.data.gemfire.DiskStoreFactoryBean . setCompactionThreshold ( NUMBER ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.DiskStoreFactoryBean . getName ( ) , NUMBER ) , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { try { org.springframework.data.gemfire.DiskStoreFactoryBean . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; throw java.lang.IllegalStateException ; } }  <METHOD_END>
