<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonToObjectTransformer org.springframework.integration.json.JsonToObjectTransformer = new JsonToObjectTransformer ( TestPerson .class ) ; java.lang.String java.lang.String = STRING + STRING ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonToObjectTransformer . transform ( new GenericMessage <> ( java.lang.String ) ) ; TestPerson org.springframework.integration.json.TestPerson = ( TestPerson ) org.springframework.integration.json.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getFirstName ( ) ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getLastName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.json.TestPerson . getAge ( ) ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getAddress ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectMapper org.springframework.integration.json.ObjectMapper = new ObjectMapper ( ) ; org.springframework.integration.json.ObjectMapper . configure ( JsonParser . Feature . ALLOW_UNQUOTED_FIELD_NAMES , java.lang.Boolean . java.lang.Boolean ) ; org.springframework.integration.json.ObjectMapper . configure ( JsonParser . Feature . ALLOW_SINGLE_QUOTES , java.lang.Boolean . java.lang.Boolean ) ; JsonToObjectTransformer org.springframework.integration.json.JsonToObjectTransformer = new JsonToObjectTransformer ( TestPerson .class , new Jackson2JsonObjectMapper ( org.springframework.integration.json.ObjectMapper ) ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonToObjectTransformer . transform ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; TestPerson org.springframework.integration.json.TestPerson = ( TestPerson ) org.springframework.integration.json.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getFirstName ( ) ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getLastName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.json.TestPerson . getAge ( ) ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getAddress ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonToObjectTransformer org.springframework.integration.json.JsonToObjectTransformer = new JsonToObjectTransformer ( TestPerson .class , new BoonJsonObjectMapper ( ) ) ; java.lang.String java.lang.String = STRING + STRING ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonToObjectTransformer . transform ( new GenericMessage < java.lang.String > ( java.lang.String ) ) ; TestPerson org.springframework.integration.json.TestPerson = ( TestPerson ) org.springframework.integration.json.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getFirstName ( ) ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getLastName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.json.TestPerson . getAge ( ) ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getAddress ( ) . toString ( ) ) ; }  <METHOD_END>
