<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Cache ) ; Region org.springframework.data.gemfire.Region = org.springframework.data.gemfire.Cache . getRegion ( STRING ) ; assertNotNull ( org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; Region org.springframework.data.gemfire.Region = org.springframework.data.gemfire.Region . getSubregion ( STRING ) ; assertNotNull ( org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; Region org.springframework.data.gemfire.Region = org.springframework.data.gemfire.Cache . getRegion ( STRING ) ; assertSame ( org.springframework.data.gemfire.Region , org.springframework.data.gemfire.Region ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; RegionAttributes org.springframework.data.gemfire.RegionAttributes = org.springframework.data.gemfire.Region . getAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.RegionAttributes ) ; assertEquals ( DataPolicy . PERSISTENT_REPLICATE , org.springframework.data.gemfire.RegionAttributes . getDataPolicy ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.RegionAttributes . getConcurrencyLevel ( ) ) ; assertTrue ( org.springframework.data.gemfire.RegionAttributes . isDiskSynchronous ( ) ) ; assertTrue ( org.springframework.data.gemfire.RegionAttributes . getIgnoreJTA ( ) ) ; assertFalse ( org.springframework.data.gemfire.RegionAttributes . getIndexMaintenanceSynchronous ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.RegionAttributes . getInitialCapacity ( ) ) ; assertEquals ( java.lang.Long .class , org.springframework.data.gemfire.RegionAttributes . getKeyConstraint ( ) ) ; assertEquals ( Scope . DISTRIBUTED_ACK , org.springframework.data.gemfire.RegionAttributes . getScope ( ) ) ; assertTrue ( org.springframework.data.gemfire.RegionAttributes . getStatisticsEnabled ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.data.gemfire.RegionAttributes . getValueConstraint ( ) ) ; assertNotNull ( org.springframework.data.gemfire.RegionAttributes . getCacheListeners ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.RegionAttributes . getCacheListeners ( ) . length ) ; assertTrue ( org.springframework.data.gemfire.RegionAttributes . getCacheListeners ( ) [ NUMBER ] instanceof SimpleCacheListener ) ; assertTrue ( org.springframework.data.gemfire.RegionAttributes . getCacheLoader ( ) instanceof SimpleCacheLoader ) ; assertTrue ( org.springframework.data.gemfire.RegionAttributes . getCacheWriter ( ) instanceof SimpleCacheWriter ) ; EvictionAttributes org.springframework.data.gemfire.EvictionAttributes = org.springframework.data.gemfire.RegionAttributes . getEvictionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.EvictionAttributes ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.EvictionAttributes . getAction ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.EvictionAttributes . getMaximum ( ) ) ; MembershipAttributes org.springframework.data.gemfire.MembershipAttributes = org.springframework.data.gemfire.RegionAttributes . getMembershipAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.MembershipAttributes ) ; assertNotNull ( org.springframework.data.gemfire.MembershipAttributes . getRequiredRoles ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.MembershipAttributes . getRequiredRoles ( ) . size ( ) ) ; assertTrue ( org.springframework.data.gemfire.MembershipAttributes . getRequiredRoles ( ) . iterator ( ) . next ( ) . getName ( ) . equalsIgnoreCase ( STRING ) ) ; assertEquals ( LossAction . LIMITED_ACCESS , org.springframework.data.gemfire.MembershipAttributes . getLossAction ( ) ) ; assertEquals ( ResumptionAction . REINITIALIZE , org.springframework.data.gemfire.MembershipAttributes . getResumptionAction ( ) ) ; SubscriptionAttributes org.springframework.data.gemfire.SubscriptionAttributes = org.springframework.data.gemfire.RegionAttributes . getSubscriptionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.SubscriptionAttributes ) ; assertEquals ( InterestPolicy . CACHE_CONTENT , org.springframework.data.gemfire.SubscriptionAttributes . getInterestPolicy ( ) ) ; }  <METHOD_END>
