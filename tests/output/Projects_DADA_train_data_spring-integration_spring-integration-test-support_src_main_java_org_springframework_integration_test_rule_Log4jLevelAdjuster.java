<METHOD_START> public void ( Level org.springframework.integration.test.rule.Level , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.integration.test.rule.Level = org.springframework.integration.test.rule.Level ; this . java.lang.Class<?>[] = java.lang.Class<?>[] ; this . java.lang.String[] = new java.lang.String [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> public void ( Level org.springframework.integration.test.rule.Level , java.lang.String ... java.lang.String[] ) { this . org.springframework.integration.test.rule.Level = org.springframework.integration.test.rule.Level ; this . java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ NUMBER ] ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> < java.lang.String > ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; java.util.Set<java.lang.String> . boolean ( java.lang.Class<? extends org.springframework.integration.test.rule.Log4jLevelAdjuster> ( ) . java.lang.Package ( ) . java.lang.String ( ) ) ; this . java.lang.String[] = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.util.Set<java.lang.String> ) . java.lang.String[] ( new java.lang.String [ java.util.Set<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.test.rule.Statement org.springframework.integration.test.rule.Statement ( final Statement org.springframework.integration.test.rule.Statement , final FrameworkMethod org.springframework.integration.test.rule.FrameworkMethod , java.lang.Object java.lang.Object ) { return new Statement ( ) { @ java.lang.Override public void void ( ) java.lang.Throwable { java.util.Map<java.lang.Class<?>,org.springframework.integration.test.rule.Level> < java.lang.Class<?> < ? > , Level > java.util.Map<java.lang.Class<?>,org.springframework.integration.test.rule.Level> = new java.util.HashMap<java.lang.Class<?>,org.springframework.integration.test.rule.Level> < java.lang.Class<?> < ? > , Level > ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.Map<java.lang.Class<?>,org.springframework.integration.test.rule.Level> . put ( java.lang.Class<> , LogManager . getLogger ( java.lang.Class<> ) . getEffectiveLevel ( ) ) ; LogManager . getLogger ( java.lang.Class<> ) . setLevel ( org.springframework.integration.test.rule.Level ) ; } java.util.Map<java.lang.String,org.springframework.integration.test.rule.Level> < java.lang.String , Level > java.util.Map<java.lang.String,org.springframework.integration.test.rule.Level> = new java.util.HashMap<java.lang.String,org.springframework.integration.test.rule.Level> < java.lang.String , Level > ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Map<java.lang.String,org.springframework.integration.test.rule.Level> . put ( java.lang.String , LogManager . getLogger ( java.lang.String ) . getEffectiveLevel ( ) ) ; LogManager . getLogger ( java.lang.String ) . setLevel ( org.springframework.integration.test.rule.Level ) ; } org.springframework.integration.test.rule.Log . debug ( STRING + STRING + java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) + STRING + java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) + STRING + org.springframework.integration.test.rule.FrameworkMethod . getName ( ) ) ; try { org.springframework.integration.test.rule.Statement . evaluate ( ) ; } finally { org.springframework.integration.test.rule.Log . debug ( STRING + STRING + java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) + STRING + java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) + STRING + org.springframework.integration.test.rule.FrameworkMethod . getName ( ) ) ; for ( @ java.lang.SuppressWarnings ( STRING ) java.lang.Class java.lang.Class : java.lang.Class<?>[] ) { LogManager . getLogger ( java.lang.Class ) . setLevel ( java.util.Map<java.lang.Class<?>,org.springframework.integration.test.rule.Level> . get ( java.lang.Class ) ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { LogManager . getLogger ( java.lang.String ) . setLevel ( java.util.Map<java.lang.String,org.springframework.integration.test.rule.Level> . get ( java.lang.String ) ) ; } } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { java.util.Map<java.lang.Class<?>,org.springframework.integration.test.rule.Level> < java.lang.Class<?> < ? > , Level > java.util.Map<java.lang.Class<?>,org.springframework.integration.test.rule.Level> = new java.util.HashMap<java.lang.Class<?>,org.springframework.integration.test.rule.Level> < java.lang.Class<?> < ? > , Level > ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.Map<java.lang.Class<?>,org.springframework.integration.test.rule.Level> . put ( java.lang.Class<> , LogManager . getLogger ( java.lang.Class<> ) . getEffectiveLevel ( ) ) ; LogManager . getLogger ( java.lang.Class<> ) . setLevel ( org.springframework.integration.test.rule.Level ) ; } java.util.Map<java.lang.String,org.springframework.integration.test.rule.Level> < java.lang.String , Level > java.util.Map<java.lang.String,org.springframework.integration.test.rule.Level> = new java.util.HashMap<java.lang.String,org.springframework.integration.test.rule.Level> < java.lang.String , Level > ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Map<java.lang.String,org.springframework.integration.test.rule.Level> . put ( java.lang.String , LogManager . getLogger ( java.lang.String ) . getEffectiveLevel ( ) ) ; LogManager . getLogger ( java.lang.String ) . setLevel ( org.springframework.integration.test.rule.Level ) ; } org.springframework.integration.test.rule.Log . debug ( STRING + STRING + java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) + STRING + java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) + STRING + org.springframework.integration.test.rule.FrameworkMethod . getName ( ) ) ; try { org.springframework.integration.test.rule.Statement . evaluate ( ) ; } finally { org.springframework.integration.test.rule.Log . debug ( STRING + STRING + java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) + STRING + java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) + STRING + org.springframework.integration.test.rule.FrameworkMethod . getName ( ) ) ; for ( @ java.lang.SuppressWarnings ( STRING ) java.lang.Class java.lang.Class : java.lang.Class<?>[] ) { LogManager . getLogger ( java.lang.Class ) . setLevel ( java.util.Map<java.lang.Class<?>,org.springframework.integration.test.rule.Level> . get ( java.lang.Class ) ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { LogManager . getLogger ( java.lang.String ) . setLevel ( java.util.Map<java.lang.String,org.springframework.integration.test.rule.Level> . get ( java.lang.String ) ) ; } } }  <METHOD_END>
