<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . canRead ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . canRead ( java.util.Map .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . canWrite ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . canWrite ( java.util.Map .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . canRead ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . canWrite ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean = ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean ) org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . read ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean .class , org.springframework.http.converter.json.MockHttpInputMessage ) ; assertEquals ( STRING , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . int ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . float ( ) , NUMBER ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . java.lang.String[] ( ) ) ; assertTrue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . boolean ( ) ) ; assertArrayEquals ( new byte [] { NUMBER , NUMBER } , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.HashMap<java.lang.String,java.lang.Object> = ( java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . read ( java.util.HashMap .class , org.springframework.http.converter.json.MockHttpInputMessage ) ; assertEquals ( STRING , java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( NUMBER , java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( NUMBER , ( java.lang.Double ) java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) , NUMBER ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertEquals ( java.util.List<java.lang.String> , java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean = new org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( NUMBER ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( NUMBER ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( true ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( new byte [] { NUMBER , NUMBER } ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . write ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertEquals ( STRING , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.converter.json.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MediaType org.springframework.http.converter.json.MediaType = new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . write ( java.lang.String , org.springframework.http.converter.json.MediaType , org.springframework.http.converter.json.MockHttpOutputMessage ) ; assertEquals ( STRING , STRING + java.lang.String + STRING , org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; assertEquals ( STRING , org.springframework.http.converter.json.MediaType , org.springframework.http.converter.json.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMessageNotReadableException .class ) public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . read ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean .class , org.springframework.http.converter.json.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . read ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean .class , org.springframework.http.converter.json.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { MappingJackson2HttpMessageConverter org.springframework.http.converter.json.MappingJackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter ( ) { @ java.lang.Override protected org.springframework.http.converter.json.JavaType org.springframework.http.converter.json.JavaType ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.reflect.Type instanceof java.lang.Class && java.util.List .class . boolean ( ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ) ) { return new ObjectMapper ( ) . getTypeFactory ( ) . constructCollectionType ( java.util.ArrayList .class , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean .class ) ; } else { return super. getJavaType ( java.lang.reflect.Type , java.lang.Class<> ) ; } } } ; java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean > java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> = ( java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean > ) org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . read ( java.util.List .class , org.springframework.http.converter.json.MockHttpInputMessage ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> . int ( ) ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean = java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> . org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean ( NUMBER ) ; assertEquals ( STRING , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . int ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . float ( ) , NUMBER ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . java.lang.String[] ( ) ) ; assertTrue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . boolean ( ) ) ; assertArrayEquals ( new byte [] { NUMBER , NUMBER } , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.converter.json.JavaType org.springframework.http.converter.json.JavaType ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.reflect.Type instanceof java.lang.Class && java.util.List .class . boolean ( ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ) ) { return new ObjectMapper ( ) . getTypeFactory ( ) . constructCollectionType ( java.util.ArrayList .class , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean .class ) ; } else { return super. getJavaType ( java.lang.reflect.Type , java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { ParameterizedTypeReference < java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean > > org.springframework.http.converter.json.ParameterizedTypeReference<java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean>> = new ParameterizedTypeReference < java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean > > ( ) {} ; java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; MappingJackson2HttpMessageConverter org.springframework.http.converter.json.MappingJackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter ( ) ; java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean > java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> = ( java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean > ) org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . read ( org.springframework.http.converter.json.ParameterizedTypeReference<java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean>> . getType ( ) , null , org.springframework.http.converter.json.MockHttpInputMessage ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> . int ( ) ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean = java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> . org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean ( NUMBER ) ; assertEquals ( STRING , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . int ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . float ( ) , NUMBER ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . java.lang.String[] ( ) ) ; assertTrue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . boolean ( ) ) ; assertArrayEquals ( new byte [] { NUMBER , NUMBER } , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.PrettyPrintBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.PrettyPrintBean = new org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.PrettyPrintBean ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.PrettyPrintBean . void ( STRING ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . setPrettyPrint ( true ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.PrettyPrintBean , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertEquals ( STRING + java.lang.String + STRING + java.lang.String + STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.json.MockHttpOutputMessage . getHeaders ( ) . setContentType ( MediaType . TEXT_EVENT_STREAM ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.PrettyPrintBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.PrettyPrintBean = new org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.PrettyPrintBean ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.PrettyPrintBean . void ( STRING ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . setPrettyPrint ( true ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.PrettyPrintBean , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . setPrefixJson ( true ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( STRING , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; assertEquals ( STRING , org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . setJsonPrefix ( STRING ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( STRING , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; assertEquals ( STRING , org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean = new org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; MappingJacksonValue org.springframework.http.converter.json.MappingJacksonValue = new MappingJacksonValue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean ) ; org.springframework.http.converter.json.MappingJacksonValue . setSerializationView ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyJacksonView1 .class ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( org.springframework.http.converter.json.MappingJacksonValue , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean = new org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; MappingJacksonValue org.springframework.http.converter.json.MappingJacksonValue = new MappingJacksonValue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean ) ; org.springframework.http.converter.json.MappingJacksonValue . setSerializationView ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyJacksonView3 .class ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( org.springframework.http.converter.json.MappingJacksonValue , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonFilteredBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonFilteredBean = new org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonFilteredBean ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonFilteredBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonFilteredBean . void ( STRING ) ; MappingJacksonValue org.springframework.http.converter.json.MappingJacksonValue = new MappingJacksonValue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonFilteredBean ) ; FilterProvider org.springframework.http.converter.json.FilterProvider = new SimpleFilterProvider ( ) . addFilter ( STRING , SimpleBeanPropertyFilter . serializeAllExcept ( STRING ) ) ; org.springframework.http.converter.json.MappingJacksonValue . setFilters ( org.springframework.http.converter.json.FilterProvider ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( org.springframework.http.converter.json.MappingJacksonValue , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MappingJacksonValue org.springframework.http.converter.json.MappingJacksonValue = new MappingJacksonValue ( STRING ) ; org.springframework.http.converter.json.MappingJacksonValue . setSerializationView ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyJacksonView1 .class ) ; org.springframework.http.converter.json.MappingJacksonValue . setJsonpFunction ( STRING ) ; MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( org.springframework.http.converter.json.MappingJacksonValue , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; assertEquals ( STRING STRING , org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean = new org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; MappingJacksonValue org.springframework.http.converter.json.MappingJacksonValue = new MappingJacksonValue ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.JacksonViewBean ) ; org.springframework.http.converter.json.MappingJacksonValue . setSerializationView ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyJacksonView1 .class ) ; org.springframework.http.converter.json.MappingJacksonValue . setJsonpFunction ( STRING ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( org.springframework.http.converter.json.MappingJacksonValue , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertThat ( java.lang.String , startsWith ( STRING STRING ) ) ; assertThat ( java.lang.String , endsWith ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean = new org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( NUMBER ) ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean , org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyInterface .class , org.springframework.http.converter.json.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean > java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> = new java.util.ArrayList<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> <> ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean = new org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( NUMBER ) ; java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> . boolean ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean = new org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean ( ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( STRING ) ; org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean . void ( NUMBER ) ; java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> . boolean ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean ) ; ParameterizedTypeReference < java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyInterface> < org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyInterface > > org.springframework.http.converter.json.ParameterizedTypeReference<java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyInterface>> = new ParameterizedTypeReference < java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyInterface> < org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyInterface > > ( ) {} ; this . org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . writeInternal ( java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyBean> , org.springframework.http.converter.json.ParameterizedTypeReference<java.util.List<org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.MyInterface>> . getType ( ) , org.springframework.http.converter.json.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; try { org.springframework.http.converter.json.MappingJackson2HttpMessageConverter . read ( org.springframework.http.converter.json.MappingJackson2HttpMessageConverterTests.BeanWithNoDefaultConstructor .class , org.springframework.http.converter.json.MockHttpInputMessage ) ; } catch ( HttpMessageNotReadableException org.springframework.http.converter.json.HttpMessageNotReadableException ) { assertTrue ( org.springframework.http.converter.json.HttpMessageNotReadableException . getErrorStatus ( ) . isPresent ( ) ) ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.http.converter.json.HttpMessageNotReadableException . getErrorStatus ( ) . get ( ) ) ; return; } fail ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return byte[] ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public float float ( ) { return float ; }  <METHOD_END>
<METHOD_START> public void void ( float float ) { this . float = float ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
