<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String[] = new java.lang.String [] { java.lang.String } ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( JobDetail ... org.springframework.scheduling.quartz.JobDetail[] ) { this . java.util.List<org.springframework.scheduling.quartz.JobDetail> = new java.util.ArrayList <> ( java.util.Arrays . java.util.List ( org.springframework.scheduling.quartz.JobDetail[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.scheduling.quartz.Calendar> < java.lang.String , Calendar > java.util.Map<java.lang.String,org.springframework.scheduling.quartz.Calendar> ) { this . java.util.Map<java.lang.String,org.springframework.scheduling.quartz.Calendar> = java.util.Map<java.lang.String,org.springframework.scheduling.quartz.Calendar> ; }  <METHOD_END>
<METHOD_START> public void void ( Trigger ... org.springframework.scheduling.quartz.Trigger[] ) { this . java.util.List<org.springframework.scheduling.quartz.Trigger> = java.util.Arrays . java.util.List ( org.springframework.scheduling.quartz.Trigger[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( SchedulerListener ... org.springframework.scheduling.quartz.SchedulerListener[] ) { this . org.springframework.scheduling.quartz.SchedulerListener[] = org.springframework.scheduling.quartz.SchedulerListener[] ; }  <METHOD_END>
<METHOD_START> public void void ( JobListener ... org.springframework.scheduling.quartz.JobListener[] ) { this . org.springframework.scheduling.quartz.JobListener[] = org.springframework.scheduling.quartz.JobListener[] ; }  <METHOD_END>
<METHOD_START> public void void ( TriggerListener ... org.springframework.scheduling.quartz.TriggerListener[] ) { this . org.springframework.scheduling.quartz.TriggerListener[] = org.springframework.scheduling.quartz.TriggerListener[] ; }  <METHOD_END>
<METHOD_START> public void void ( PlatformTransactionManager org.springframework.scheduling.quartz.PlatformTransactionManager ) { this . org.springframework.scheduling.quartz.PlatformTransactionManager = org.springframework.scheduling.quartz.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.scheduling.quartz.ResourceLoader ) { this . org.springframework.scheduling.quartz.ResourceLoader = org.springframework.scheduling.quartz.ResourceLoader ; }  <METHOD_END>
<METHOD_START> protected void void ( ) org.springframework.scheduling.quartz.SchedulerException { TransactionStatus org.springframework.scheduling.quartz.TransactionStatus = null ; if ( this . org.springframework.scheduling.quartz.PlatformTransactionManager != null ) { org.springframework.scheduling.quartz.TransactionStatus = this . org.springframework.scheduling.quartz.PlatformTransactionManager . getTransaction ( new DefaultTransactionDefinition ( ) ) ; } try { if ( this . java.lang.String[] != null ) { ClassLoadHelper org.springframework.scheduling.quartz.ClassLoadHelper = new ResourceLoaderClassLoadHelper ( this . org.springframework.scheduling.quartz.ResourceLoader ) ; org.springframework.scheduling.quartz.ClassLoadHelper . initialize ( ) ; XMLSchedulingDataProcessor org.springframework.scheduling.quartz.XMLSchedulingDataProcessor = new XMLSchedulingDataProcessor ( org.springframework.scheduling.quartz.ClassLoadHelper ) ; for ( java.lang.String java.lang.String : this . java.lang.String[] ) { org.springframework.scheduling.quartz.XMLSchedulingDataProcessor . processFileAndScheduleJobs ( java.lang.String , org.springframework.scheduling.quartz.Scheduler ( ) ) ; } } if ( this . java.util.List<org.springframework.scheduling.quartz.JobDetail> != null ) { for ( JobDetail org.springframework.scheduling.quartz.JobDetail : this . java.util.List<org.springframework.scheduling.quartz.JobDetail> ) { boolean ( org.springframework.scheduling.quartz.JobDetail ) ; } } else { this . java.util.List<org.springframework.scheduling.quartz.JobDetail> = new java.util.LinkedList <> ( ) ; } if ( this . java.util.Map<java.lang.String,org.springframework.scheduling.quartz.Calendar> != null ) { for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,org.springframework.scheduling.quartz.Calendar> . keySet ( ) ) { Calendar org.springframework.scheduling.quartz.Calendar = this . java.util.Map<java.lang.String,org.springframework.scheduling.quartz.Calendar> . get ( java.lang.String ) ; org.springframework.scheduling.quartz.Scheduler ( ) . addCalendar ( java.lang.String , org.springframework.scheduling.quartz.Calendar , true , true ) ; } } if ( this . java.util.List<org.springframework.scheduling.quartz.Trigger> != null ) { for ( Trigger org.springframework.scheduling.quartz.Trigger : this . java.util.List<org.springframework.scheduling.quartz.Trigger> ) { boolean ( org.springframework.scheduling.quartz.Trigger ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.scheduling.quartz.TransactionStatus != null ) { try { this . org.springframework.scheduling.quartz.PlatformTransactionManager . rollback ( org.springframework.scheduling.quartz.TransactionStatus ) ; } catch ( TransactionException org.springframework.scheduling.quartz.TransactionException ) { org.springframework.scheduling.quartz.Log . error ( STRING , java.lang.Throwable ) ; throw org.springframework.scheduling.quartz.TransactionException ; } } if ( java.lang.Throwable instanceof SchedulerException ) { throw ( SchedulerException ) java.lang.Throwable ; } if ( java.lang.Throwable instanceof java.lang.Exception ) { throw new SchedulerException ( STRING + java.lang.Throwable . java.lang.String ( ) , java.lang.Throwable ) ; } throw new SchedulerException ( STRING + java.lang.Throwable . java.lang.String ( ) ) ; } if ( org.springframework.scheduling.quartz.TransactionStatus != null ) { this . org.springframework.scheduling.quartz.PlatformTransactionManager . commit ( org.springframework.scheduling.quartz.TransactionStatus ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( JobDetail org.springframework.scheduling.quartz.JobDetail ) throws org.springframework.scheduling.quartz.SchedulerException { if ( this . boolean || org.springframework.scheduling.quartz.Scheduler ( ) . getJobDetail ( org.springframework.scheduling.quartz.JobDetail . getKey ( ) ) == null ) { org.springframework.scheduling.quartz.Scheduler ( ) . addJob ( org.springframework.scheduling.quartz.JobDetail , true ) ; return true ; } else { return false ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( Trigger org.springframework.scheduling.quartz.Trigger ) throws org.springframework.scheduling.quartz.SchedulerException { boolean boolean = ( org.springframework.scheduling.quartz.Scheduler ( ) . getTrigger ( org.springframework.scheduling.quartz.Trigger . getKey ( ) ) != null ) ; if ( boolean && ! this . boolean ) { return false ; } JobDetail org.springframework.scheduling.quartz.JobDetail = ( JobDetail ) org.springframework.scheduling.quartz.Trigger . getJobDataMap ( ) . remove ( STRING ) ; if ( boolean ) { if ( org.springframework.scheduling.quartz.JobDetail != null && ! this . java.util.List<org.springframework.scheduling.quartz.JobDetail> . contains ( org.springframework.scheduling.quartz.JobDetail ) && boolean ( org.springframework.scheduling.quartz.JobDetail ) ) { this . java.util.List<org.springframework.scheduling.quartz.JobDetail> . add ( org.springframework.scheduling.quartz.JobDetail ) ; } org.springframework.scheduling.quartz.Scheduler ( ) . rescheduleJob ( org.springframework.scheduling.quartz.Trigger . getKey ( ) , org.springframework.scheduling.quartz.Trigger ) ; } else { try { if ( org.springframework.scheduling.quartz.JobDetail != null && ! this . java.util.List<org.springframework.scheduling.quartz.JobDetail> . contains ( org.springframework.scheduling.quartz.JobDetail ) && ( this . boolean || org.springframework.scheduling.quartz.Scheduler ( ) . getJobDetail ( org.springframework.scheduling.quartz.JobDetail . getKey ( ) ) == null ) ) { org.springframework.scheduling.quartz.Scheduler ( ) . scheduleJob ( org.springframework.scheduling.quartz.JobDetail , org.springframework.scheduling.quartz.Trigger ) ; this . java.util.List<org.springframework.scheduling.quartz.JobDetail> . add ( org.springframework.scheduling.quartz.JobDetail ) ; } else { org.springframework.scheduling.quartz.Scheduler ( ) . scheduleJob ( org.springframework.scheduling.quartz.Trigger ) ; } } catch ( ObjectAlreadyExistsException org.springframework.scheduling.quartz.ObjectAlreadyExistsException ) { if ( org.springframework.scheduling.quartz.Log . isDebugEnabled ( ) ) { org.springframework.scheduling.quartz.Log . debug ( STRING + org.springframework.scheduling.quartz.ObjectAlreadyExistsException . getMessage ( ) + STRING ) ; } if ( this . boolean ) { org.springframework.scheduling.quartz.Scheduler ( ) . rescheduleJob ( org.springframework.scheduling.quartz.Trigger . getKey ( ) , org.springframework.scheduling.quartz.Trigger ) ; } } } return true ; }  <METHOD_END>
<METHOD_START> protected void void ( ) org.springframework.scheduling.quartz.SchedulerException { ListenerManager org.springframework.scheduling.quartz.ListenerManager = org.springframework.scheduling.quartz.Scheduler ( ) . getListenerManager ( ) ; if ( this . org.springframework.scheduling.quartz.SchedulerListener[] != null ) { for ( SchedulerListener org.springframework.scheduling.quartz.SchedulerListener : this . org.springframework.scheduling.quartz.SchedulerListener[] ) { org.springframework.scheduling.quartz.ListenerManager . addSchedulerListener ( org.springframework.scheduling.quartz.SchedulerListener ) ; } } if ( this . org.springframework.scheduling.quartz.JobListener[] != null ) { for ( JobListener org.springframework.scheduling.quartz.JobListener : this . org.springframework.scheduling.quartz.JobListener[] ) { org.springframework.scheduling.quartz.ListenerManager . addJobListener ( org.springframework.scheduling.quartz.JobListener ) ; } } if ( this . org.springframework.scheduling.quartz.TriggerListener[] != null ) { for ( TriggerListener org.springframework.scheduling.quartz.TriggerListener : this . org.springframework.scheduling.quartz.TriggerListener[] ) { org.springframework.scheduling.quartz.ListenerManager . addTriggerListener ( org.springframework.scheduling.quartz.TriggerListener ) ; } } }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.scheduling.quartz.Scheduler org.springframework.scheduling.quartz.Scheduler ( )  <METHOD_END>
