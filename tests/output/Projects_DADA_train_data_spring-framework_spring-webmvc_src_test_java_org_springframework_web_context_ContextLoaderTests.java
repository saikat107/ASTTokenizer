<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING + STRING ) ; ServletContextListener org.springframework.web.context.ServletContextListener = new ContextLoaderListener ( ) ; ServletContextEvent org.springframework.web.context.ServletContextEvent = new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ; org.springframework.web.context.ServletContextListener . contextInitialized ( org.springframework.web.context.ServletContextEvent ) ; WebApplicationContext org.springframework.web.context.WebApplicationContext = ( WebApplicationContext ) org.springframework.web.context.MockServletContext . getAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; assertTrue ( STRING , org.springframework.web.context.WebApplicationContext instanceof XmlWebApplicationContext ) ; assertTrue ( WebApplicationContextUtils . getRequiredWebApplicationContext ( org.springframework.web.context.MockServletContext ) instanceof XmlWebApplicationContext ) ; LifecycleBean org.springframework.web.context.LifecycleBean = ( LifecycleBean ) org.springframework.web.context.WebApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.web.context.WebApplicationContext . containsBean ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.context.WebApplicationContext . containsBean ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.context.WebApplicationContext . containsBean ( STRING ) ) ; assertTrue ( STRING , ! org.springframework.web.context.LifecycleBean . isDestroyed ( ) ) ; assertFalse ( org.springframework.web.context.WebApplicationContext . containsBean ( STRING ) ) ; assertFalse ( org.springframework.web.context.WebApplicationContext . containsBean ( STRING ) ) ; org.springframework.web.context.ServletContextListener . contextDestroyed ( org.springframework.web.context.ServletContextEvent ) ; assertTrue ( STRING , org.springframework.web.context.LifecycleBean . isDestroyed ( ) ) ; assertNull ( org.springframework.web.context.MockServletContext . getAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ) ; assertNull ( WebApplicationContextUtils . getWebApplicationContext ( org.springframework.web.context.MockServletContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; final java.lang.String java.lang.String = STRING ; final MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; ServletContextListener org.springframework.web.context.ServletContextListener = new ContextLoaderListener ( ) { @ java.lang.Override protected void void ( ServletContext org.springframework.web.context.ServletContext , ConfigurableWebApplicationContext org.springframework.web.context.ConfigurableWebApplicationContext ) { assertNotNull ( STRING , org.springframework.web.context.ServletContext ) ; assertEquals ( STRING , org.springframework.web.context.ServletContext , org.springframework.web.context.ServletContext ) ; assertFalse ( STRING , org.springframework.web.context.ConfigurableWebApplicationContext . isActive ( ) ) ; java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.context.ServletContextListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ) ; assertEquals ( STRING , java.lang.String , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ServletContext org.springframework.web.context.ServletContext , ConfigurableWebApplicationContext org.springframework.web.context.ConfigurableWebApplicationContext ) { assertNotNull ( STRING , org.springframework.web.context.ServletContext ) ; assertEquals ( STRING , org.springframework.web.context.ServletContext , org.springframework.web.context.ServletContext ) ; assertFalse ( STRING , org.springframework.web.context.ConfigurableWebApplicationContext . isActive ( ) ) ; java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONTEXT_INITIALIZER_CLASSES_PARAM , StringUtils . arrayToCommaDelimitedString ( new java.lang.Object [] { org.springframework.web.context.ContextLoaderTests.TestContextInitializer .class . java.lang.String ( ) , org.springframework.web.context.ContextLoaderTests.TestWebContextInitializer .class . java.lang.String ( ) } ) ) ; ContextLoaderListener org.springframework.web.context.ContextLoaderListener = new ContextLoaderListener ( ) ; org.springframework.web.context.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ) ; WebApplicationContext org.springframework.web.context.WebApplicationContext = WebApplicationContextUtils . getRequiredWebApplicationContext ( org.springframework.web.context.MockServletContext ) ; TestBean org.springframework.web.context.TestBean = org.springframework.web.context.WebApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.web.context.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.web.context.WebApplicationContext . getServletContext ( ) . getAttribute ( STRING ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . GLOBAL_INITIALIZER_CLASSES_PARAM , StringUtils . arrayToCommaDelimitedString ( new java.lang.Object [] { org.springframework.web.context.ContextLoaderTests.TestContextInitializer .class . java.lang.String ( ) , org.springframework.web.context.ContextLoaderTests.TestWebContextInitializer .class . java.lang.String ( ) } ) ) ; ContextLoaderListener org.springframework.web.context.ContextLoaderListener = new ContextLoaderListener ( ) ; org.springframework.web.context.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ) ; WebApplicationContext org.springframework.web.context.WebApplicationContext = WebApplicationContextUtils . getRequiredWebApplicationContext ( org.springframework.web.context.MockServletContext ) ; TestBean org.springframework.web.context.TestBean = org.springframework.web.context.WebApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.web.context.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.web.context.WebApplicationContext . getServletContext ( ) . getAttribute ( STRING ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONTEXT_INITIALIZER_CLASSES_PARAM , org.springframework.web.context.ContextLoaderTests.TestContextInitializer .class . java.lang.String ( ) ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . GLOBAL_INITIALIZER_CLASSES_PARAM , org.springframework.web.context.ContextLoaderTests.TestWebContextInitializer .class . java.lang.String ( ) ) ; ContextLoaderListener org.springframework.web.context.ContextLoaderListener = new ContextLoaderListener ( ) ; org.springframework.web.context.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ) ; WebApplicationContext org.springframework.web.context.WebApplicationContext = WebApplicationContextUtils . getRequiredWebApplicationContext ( org.springframework.web.context.MockServletContext ) ; TestBean org.springframework.web.context.TestBean = org.springframework.web.context.WebApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.web.context.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.web.context.WebApplicationContext . getServletContext ( ) . getAttribute ( STRING ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; ContextLoaderListener org.springframework.web.context.ContextLoaderListener = new ContextLoaderListener ( ) ; org.springframework.web.context.ContextLoaderListener . setContextInitializers ( new org.springframework.web.context.ContextLoaderTests.TestContextInitializer ( ) , new org.springframework.web.context.ContextLoaderTests.TestWebContextInitializer ( ) ) ; org.springframework.web.context.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ) ; WebApplicationContext org.springframework.web.context.WebApplicationContext = WebApplicationContextUtils . getRequiredWebApplicationContext ( org.springframework.web.context.MockServletContext ) ; TestBean org.springframework.web.context.TestBean = org.springframework.web.context.WebApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.web.context.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.web.context.WebApplicationContext . getServletContext ( ) . getAttribute ( STRING ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONTEXT_INITIALIZER_CLASSES_PARAM , org.springframework.web.context.ContextLoaderTests.TestContextInitializer .class . java.lang.String ( ) ) ; ContextLoaderListener org.springframework.web.context.ContextLoaderListener = new ContextLoaderListener ( ) ; org.springframework.web.context.ContextLoaderListener . setContextInitializers ( new org.springframework.web.context.ContextLoaderTests.TestWebContextInitializer ( ) ) ; org.springframework.web.context.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ) ; WebApplicationContext org.springframework.web.context.WebApplicationContext = WebApplicationContextUtils . getRequiredWebApplicationContext ( org.springframework.web.context.MockServletContext ) ; TestBean org.springframework.web.context.TestBean = org.springframework.web.context.WebApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.web.context.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.web.context.WebApplicationContext . getServletContext ( ) . getAttribute ( STRING ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . GLOBAL_INITIALIZER_CLASSES_PARAM , org.springframework.web.context.ContextLoaderTests.TestWebContextInitializer .class . java.lang.String ( ) ) ; ContextLoaderListener org.springframework.web.context.ContextLoaderListener = new ContextLoaderListener ( ) ; org.springframework.web.context.ContextLoaderListener . setContextInitializers ( new org.springframework.web.context.ContextLoaderTests.TestContextInitializer ( ) ) ; org.springframework.web.context.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ) ; WebApplicationContext org.springframework.web.context.WebApplicationContext = WebApplicationContextUtils . getRequiredWebApplicationContext ( org.springframework.web.context.MockServletContext ) ; TestBean org.springframework.web.context.TestBean = org.springframework.web.context.WebApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.web.context.TestBean . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.web.context.WebApplicationContext . getServletContext ( ) . getAttribute ( STRING ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( STRING , STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONTEXT_INITIALIZER_CLASSES_PARAM , org.springframework.web.context.ContextLoaderTests.EnvApplicationContextInitializer .class . java.lang.String ( ) ) ; ContextLoaderListener org.springframework.web.context.ContextLoaderListener = new ContextLoaderListener ( ) ; org.springframework.web.context.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONTEXT_INITIALIZER_CLASSES_PARAM , StringUtils . arrayToCommaDelimitedString ( new java.lang.Object [] { org.springframework.web.context.ContextLoaderTests.UnknownContextInitializer .class . java.lang.String ( ) } ) ) ; ContextLoaderListener org.springframework.web.context.ContextLoaderListener = new ContextLoaderListener ( ) ; try { org.springframework.web.context.ContextLoaderListener . contextInitialized ( new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ) ; fail ( STRING ) ; } catch ( ApplicationContextException org.springframework.web.context.ApplicationContextException ) { assertTrue ( org.springframework.web.context.ApplicationContextException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONTEXT_CLASS_PARAM , STRING ) ; ServletContextListener org.springframework.web.context.ServletContextListener = new ContextLoaderListener ( ) ; ServletContextEvent org.springframework.web.context.ServletContextEvent = new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ; org.springframework.web.context.ServletContextListener . contextInitialized ( org.springframework.web.context.ServletContextEvent ) ; WebApplicationContext org.springframework.web.context.WebApplicationContext = ( WebApplicationContext ) org.springframework.web.context.MockServletContext . getAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; assertTrue ( STRING , org.springframework.web.context.WebApplicationContext instanceof SimpleWebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONFIG_LOCATION_PARAM , STRING ) ; ServletContextListener org.springframework.web.context.ServletContextListener = new ContextLoaderListener ( ) ; ServletContextEvent org.springframework.web.context.ServletContextEvent = new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ; try { org.springframework.web.context.ServletContextListener . contextInitialized ( org.springframework.web.context.ServletContextEvent ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.web.context.BeanDefinitionStoreException ) { assertTrue ( org.springframework.web.context.BeanDefinitionStoreException . getCause ( ) instanceof java.io.FileNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.MockServletContext . addInitParameter ( ContextLoader . CONTEXT_CLASS_PARAM , STRING ) ; ServletContextListener org.springframework.web.context.ServletContextListener = new ContextLoaderListener ( ) ; ServletContextEvent org.springframework.web.context.ServletContextEvent = new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ; try { org.springframework.web.context.ServletContextListener . contextInitialized ( org.springframework.web.context.ServletContextEvent ) ; fail ( STRING ) ; } catch ( ApplicationContextException org.springframework.web.context.ApplicationContextException ) { assertTrue ( org.springframework.web.context.ApplicationContextException . getCause ( ) instanceof java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; ServletContextListener org.springframework.web.context.ServletContextListener = new ContextLoaderListener ( ) ; ServletContextEvent org.springframework.web.context.ServletContextEvent = new ServletContextEvent ( org.springframework.web.context.MockServletContext ) ; try { org.springframework.web.context.ServletContextListener . contextInitialized ( org.springframework.web.context.ServletContextEvent ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.web.context.BeanDefinitionStoreException ) { assertTrue ( org.springframework.web.context.BeanDefinitionStoreException . getCause ( ) instanceof java.io.IOException ) ; assertTrue ( org.springframework.web.context.BeanDefinitionStoreException . getCause ( ) . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DispatcherServlet org.springframework.web.context.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.context.DispatcherServlet . setContextClass ( XmlWebApplicationContext .class ) ; try { org.springframework.web.context.DispatcherServlet . init ( new MockServletConfig ( new MockServletContext ( STRING ) , STRING ) ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.web.context.BeanDefinitionStoreException ) { assertTrue ( org.springframework.web.context.BeanDefinitionStoreException . getCause ( ) instanceof java.io.IOException ) ; assertTrue ( org.springframework.web.context.BeanDefinitionStoreException . getCause ( ) . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DispatcherServlet org.springframework.web.context.DispatcherServlet = new DispatcherServlet ( ) ; org.springframework.web.context.DispatcherServlet . setContextConfigLocation ( STRING + STRING ) ; org.springframework.web.context.DispatcherServlet . init ( new MockServletConfig ( new MockServletContext ( STRING ) , STRING ) ) ; assertTrue ( org.springframework.web.context.DispatcherServlet . getWebApplicationContext ( ) . containsBean ( STRING ) ) ; assertTrue ( org.springframework.web.context.DispatcherServlet . getWebApplicationContext ( ) . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ApplicationContext org.springframework.web.context.ApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; assertTrue ( STRING , org.springframework.web.context.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.context.ApplicationContext . containsBean ( STRING ) ) ; assertFalse ( STRING , org.springframework.web.context.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( STRING , ( ( TestBean ) org.springframework.web.context.ApplicationContext . getBean ( STRING ) ) . getSpouse ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( ( ( TestBean ) org.springframework.web.context.ApplicationContext . getBean ( STRING ) ) . getName ( ) ) ) ; org.springframework.web.context.ApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING , STRING } ) ; assertTrue ( STRING , org.springframework.web.context.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.context.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.context.ApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { try { new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING , STRING } ) { @ java.lang.Override public void void ( ) org.springframework.web.context.BeansException { try { super. refresh ( ) ; } catch ( BeanCreationException org.springframework.web.context.BeanCreationException ) { DefaultListableBeanFactory org.springframework.web.context.DefaultListableBeanFactory = ( DefaultListableBeanFactory ) getBeanFactory ( ) ; assertEquals ( NUMBER , org.springframework.web.context.DefaultListableBeanFactory . getSingletonCount ( ) ) ; throw org.springframework.web.context.BeanCreationException ; } } } ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.web.context.BeanCreationException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.web.context.BeansException { try { super. refresh ( ) ; } catch ( BeanCreationException org.springframework.web.context.BeanCreationException ) { DefaultListableBeanFactory org.springframework.web.context.DefaultListableBeanFactory = ( DefaultListableBeanFactory ) getBeanFactory ( ) ; assertEquals ( NUMBER , org.springframework.web.context.DefaultListableBeanFactory . getSingletonCount ( ) ) ; throw org.springframework.web.context.BeanCreationException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.web.context.ConfigurableApplicationContext ) { ConfigurableEnvironment org.springframework.web.context.ConfigurableEnvironment = org.springframework.web.context.ConfigurableApplicationContext . getEnvironment ( ) ; org.springframework.web.context.ConfigurableEnvironment . getPropertySources ( ) . addFirst ( new PropertySource < java.lang.Object > ( STRING ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return STRING . boolean ( java.lang.String ) ? STRING : null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return STRING . boolean ( java.lang.String ) ? STRING : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableWebApplicationContext org.springframework.web.context.ConfigurableWebApplicationContext ) { ServletContext org.springframework.web.context.ServletContext = org.springframework.web.context.ConfigurableWebApplicationContext . getServletContext ( ) ; org.springframework.web.context.ServletContext . setAttribute ( STRING , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableWebApplicationContext org.springframework.web.context.ConfigurableWebApplicationContext ) { java.lang.String java.lang.String = org.springframework.web.context.ConfigurableWebApplicationContext . getEnvironment ( ) . getRequiredProperty ( STRING ) ; assertThat ( java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.web.context.ContextLoaderTests.UnknownApplicationContext org.springframework.web.context.ContextLoaderTests.UnknownApplicationContext ) { org.springframework.web.context.ContextLoaderTests.UnknownApplicationContext . void ( ) ; }  <METHOD_END>
