<METHOD_START> public void ( ProjectionDefinitions org.springframework.data.rest.webmvc.support.ProjectionDefinitions , ProjectionFactory org.springframework.data.rest.webmvc.support.ProjectionFactory , java.lang.String java.lang.String , ResourceMappings org.springframework.data.rest.webmvc.support.ResourceMappings ) { super( org.springframework.data.rest.webmvc.support.ProjectionFactory , org.springframework.data.rest.webmvc.support.ResourceMappings ); Assert . notNull ( org.springframework.data.rest.webmvc.support.ProjectionDefinitions , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.support.ProjectionFactory , STRING ) ; this . org.springframework.data.rest.webmvc.support.ProjectionFactory = org.springframework.data.rest.webmvc.support.ProjectionFactory ; this . org.springframework.data.rest.webmvc.support.ProjectionDefinitions = org.springframework.data.rest.webmvc.support.ProjectionDefinitions ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ( java.lang.Object , new Converter < java.lang.Object , java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ( java.lang.Object , new Converter < java.lang.Object , java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return org.springframework.data.rest.webmvc.support.PersistentEntityProjector .super. projectExcerpt ( java.lang.Object ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return org.springframework.data.rest.webmvc.support.PersistentEntityProjector .super. projectExcerpt ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , Converter < java.lang.Object , java.lang.Object > org.springframework.data.rest.webmvc.support.Converter<java.lang.Object,java.lang.Object> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.support.Converter<java.lang.Object,java.lang.Object> , STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { return org.springframework.data.rest.webmvc.support.Converter<java.lang.Object,java.lang.Object> . convert ( java.lang.Object ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.webmvc.support.ProjectionDefinitions . getProjectionType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String ) ; return java.lang.Class<> == null ? org.springframework.data.rest.webmvc.support.Converter<java.lang.Object,java.lang.Object> . convert ( java.lang.Object ) : org.springframework.data.rest.webmvc.support.ProjectionFactory . createProjection ( java.lang.Class<> , java.lang.Object ) ; }  <METHOD_END>
