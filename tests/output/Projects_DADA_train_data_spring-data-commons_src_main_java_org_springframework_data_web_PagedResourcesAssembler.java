<METHOD_START> public void ( HateoasPageableHandlerMethodArgumentResolver org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver , UriComponents org.springframework.data.web.UriComponents ) { this . org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver = org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver == null ? new HateoasPageableHandlerMethodArgumentResolver ( ) : org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver ; this . org.springframework.data.web.UriComponents = org.springframework.data.web.UriComponents ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<T>> < Resource < T > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<T>> ( Page < T > org.springframework.data.web.Page<T> ) { return org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<T>> ( org.springframework.data.web.Page<T> , new org.springframework.data.web.PagedResourcesAssembler.SimplePagedResourceAssembler <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<T>> < Resource < T > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<T>> ( Page < T > org.springframework.data.web.Page<T> , Link org.springframework.data.web.Link ) { return org.springframework.data.web.PagedResources ( org.springframework.data.web.Page<T> , new org.springframework.data.web.PagedResourcesAssembler.SimplePagedResourceAssembler <> ( ) , org.springframework.data.web.Link ) ; }  <METHOD_END>
<METHOD_START> public < R extends org.springframework.data.web.ResourceSupport > org.springframework.data.web.PagedResources<R> < R > org.springframework.data.web.PagedResources<R> ( Page < T > org.springframework.data.web.Page<T> , ResourceAssembler < T , R > org.springframework.data.web.ResourceAssembler<T,R> ) { return org.springframework.data.web.PagedResources ( org.springframework.data.web.Page<T> , org.springframework.data.web.ResourceAssembler<T,R> , null ) ; }  <METHOD_END>
<METHOD_START> public < R extends org.springframework.data.web.ResourceSupport > org.springframework.data.web.PagedResources<R> < R > org.springframework.data.web.PagedResources<R> ( Page < T > org.springframework.data.web.Page<T> , ResourceAssembler < T , R > org.springframework.data.web.ResourceAssembler<T,R> , Link org.springframework.data.web.Link ) { Assert . notNull ( org.springframework.data.web.Link , STRING ) ; return org.springframework.data.web.PagedResources ( org.springframework.data.web.Page<T> , org.springframework.data.web.ResourceAssembler<T,R> , org.springframework.data.web.Link ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.web.PagedResources<?> < ? > org.springframework.data.web.PagedResources<?> ( Page < ? > org.springframework.data.web.Page<?> , java.lang.Class<?> < ? > java.lang.Class<?> , Link org.springframework.data.web.Link ) { Assert . notNull ( org.springframework.data.web.Page<> , STRING ) ; Assert . isTrue ( ! org.springframework.data.web.Page<> . hasContent ( ) , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; PageMetadata org.springframework.data.web.PageMetadata = org.springframework.data.web.PageMetadata ( org.springframework.data.web.Page<> ) ; EmbeddedWrapper org.springframework.data.web.EmbeddedWrapper = org.springframework.data.web.EmbeddedWrappers . emptyCollectionOf ( java.lang.Class<> ) ; java.util.List<org.springframework.data.web.EmbeddedWrapper> < EmbeddedWrapper > java.util.List<org.springframework.data.web.EmbeddedWrapper> = java.util.Collections . java.util.List ( org.springframework.data.web.EmbeddedWrapper ) ; return org.springframework.data.web.PagedResources ( new PagedResources <> ( java.util.List<org.springframework.data.web.EmbeddedWrapper> , org.springframework.data.web.PageMetadata ) , org.springframework.data.web.Page<> , org.springframework.data.web.Link ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public org.springframework.data.web.Link org.springframework.data.web.Link ( Link org.springframework.data.web.Link ) { Assert . notNull ( org.springframework.data.web.Link , STRING ) ; return org.springframework.data.web.Link ( new UriTemplate ( org.springframework.data.web.Link . getHref ( ) ) , null , org.springframework.data.web.Link . getRel ( ) ) ; }  <METHOD_END>
<METHOD_START> protected < R extends org.springframework.data.web.ResourceSupport , S > org.springframework.data.web.PagedResources<R> < R > org.springframework.data.web.PagedResources<R> ( java.util.List<R> < R > java.util.List<R> , PageMetadata org.springframework.data.web.PageMetadata , Page < S > org.springframework.data.web.Page<S> ) { Assert . notNull ( java.util.List<R> , STRING ) ; Assert . notNull ( org.springframework.data.web.PageMetadata , STRING ) ; Assert . notNull ( org.springframework.data.web.Page<S> , STRING ) ; return new PagedResources <> ( java.util.List<R> , org.springframework.data.web.PageMetadata ) ; }  <METHOD_END>
<METHOD_START> private < S , R extends org.springframework.data.web.ResourceSupport > org.springframework.data.web.PagedResources<R> < R > org.springframework.data.web.PagedResources<R> ( Page < S > org.springframework.data.web.Page<S> , ResourceAssembler < S , R > org.springframework.data.web.ResourceAssembler<S,R> , Link org.springframework.data.web.Link ) { Assert . notNull ( org.springframework.data.web.Page<S> , STRING ) ; Assert . notNull ( org.springframework.data.web.ResourceAssembler<S,R> , STRING ) ; java.util.List<R> < R > java.util.List<R> = new java.util.ArrayList <> ( org.springframework.data.web.Page<S> . getNumberOfElements ( ) ) ; for ( S S : org.springframework.data.web.Page<S> ) { java.util.List<R> . boolean ( org.springframework.data.web.ResourceAssembler<S,R> . toResource ( S ) ) ; } PagedResources < R > org.springframework.data.web.PagedResources<R> = org.springframework.data.web.PagedResources ( java.util.List<R> , org.springframework.data.web.PageMetadata ( org.springframework.data.web.Page<S> ) , org.springframework.data.web.Page<S> ) ; return org.springframework.data.web.PagedResources ( org.springframework.data.web.PagedResources<R> , org.springframework.data.web.Page<S> , org.springframework.data.web.Link ) ; }  <METHOD_END>
<METHOD_START> private < R > org.springframework.data.web.PagedResources<R> < R > org.springframework.data.web.PagedResources<R> ( PagedResources < R > org.springframework.data.web.PagedResources<R> , Page < ? > org.springframework.data.web.Page<?> , Link org.springframework.data.web.Link ) { UriTemplate org.springframework.data.web.UriTemplate = org.springframework.data.web.UriTemplate ( org.springframework.data.web.Link ) ; boolean boolean = org.springframework.data.web.Page<> . hasPrevious ( ) || org.springframework.data.web.Page<> . hasNext ( ) ; if ( boolean || boolean ) { org.springframework.data.web.PagedResources<R> . add ( org.springframework.data.web.Link ( org.springframework.data.web.UriTemplate , PageRequest . of ( NUMBER , org.springframework.data.web.Page<> . getSize ( ) , org.springframework.data.web.Page<> . getSort ( ) ) , Link . REL_FIRST ) ) ; } if ( org.springframework.data.web.Page<> . hasPrevious ( ) ) { org.springframework.data.web.PagedResources<R> . add ( org.springframework.data.web.Link ( org.springframework.data.web.UriTemplate , org.springframework.data.web.Page<> . previousPageable ( ) , Link . REL_PREVIOUS ) ) ; } org.springframework.data.web.PagedResources<R> . add ( org.springframework.data.web.Link ( org.springframework.data.web.UriTemplate , null , Link . REL_SELF ) ) ; if ( org.springframework.data.web.Page<> . hasNext ( ) ) { org.springframework.data.web.PagedResources<R> . add ( org.springframework.data.web.Link ( org.springframework.data.web.UriTemplate , org.springframework.data.web.Page<> . nextPageable ( ) , Link . REL_NEXT ) ) ; } if ( boolean || boolean ) { int int = org.springframework.data.web.Page<> . getTotalPages ( ) == NUMBER ? NUMBER : org.springframework.data.web.Page<> . getTotalPages ( ) - NUMBER ; org.springframework.data.web.PagedResources<R> . add ( org.springframework.data.web.Link ( org.springframework.data.web.UriTemplate , PageRequest . of ( int , org.springframework.data.web.Page<> . getSize ( ) , org.springframework.data.web.Page<> . getSort ( ) ) , Link . REL_LAST ) ) ; } return org.springframework.data.web.PagedResources<R> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.web.UriTemplate org.springframework.data.web.UriTemplate ( Link org.springframework.data.web.Link ) { java.lang.String java.lang.String = org.springframework.data.web.Link != null ? org.springframework.data.web.Link . getHref ( ) : org.springframework.data.web.UriComponents == null ? ServletUriComponentsBuilder . fromCurrentRequest ( ) . build ( ) . toString ( ) : org.springframework.data.web.UriComponents . toString ( ) ; return new UriTemplate ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.web.Link org.springframework.data.web.Link ( UriTemplate org.springframework.data.web.UriTemplate , Pageable org.springframework.data.web.Pageable , java.lang.String java.lang.String ) { UriComponentsBuilder org.springframework.data.web.UriComponentsBuilder = fromUri ( org.springframework.data.web.UriTemplate . expand ( ) ) ; org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . enhance ( org.springframework.data.web.UriComponentsBuilder , org.springframework.data.web.MethodParameter ( ) , org.springframework.data.web.Pageable ) ; return new Link ( new UriTemplate ( org.springframework.data.web.UriComponentsBuilder . build ( ) . toString ( ) ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.web.MethodParameter org.springframework.data.web.MethodParameter ( ) { return null ; }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.data.web.PageMetadata org.springframework.data.web.PageMetadata ( Page < T > org.springframework.data.web.Page<T> ) { Assert . notNull ( org.springframework.data.web.Page<T> , STRING ) ; return new PageMetadata ( org.springframework.data.web.Page<T> . getSize ( ) , org.springframework.data.web.Page<T> . getNumber ( ) , org.springframework.data.web.Page<T> . getTotalElements ( ) , org.springframework.data.web.Page<T> . getTotalPages ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.web.Resource<T> < T > org.springframework.data.web.Resource<T> ( T T ) { return new Resource <> ( T ) ; }  <METHOD_END>
