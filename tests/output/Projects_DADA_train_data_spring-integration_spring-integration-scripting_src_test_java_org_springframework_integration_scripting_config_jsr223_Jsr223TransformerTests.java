<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.scripting.config.jsr223.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.scripting.config.jsr223.QueueChannel . setBeanName ( STRING ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { Message < ? > org.springframework.integration.scripting.config.jsr223.Message<?> = MessageBuilder . withPayload ( STRING + int ) . setReplyChannel ( org.springframework.integration.scripting.config.jsr223.QueueChannel ) . build ( ) ; this . org.springframework.integration.scripting.config.jsr223.MessageChannel . send ( org.springframework.integration.scripting.config.jsr223.Message<> ) ; } assertEquals ( STRING , org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.scripting.config.jsr223.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.scripting.config.jsr223.QueueChannel . setBeanName ( STRING ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { Message < ? > org.springframework.integration.scripting.config.jsr223.Message<?> = MessageBuilder . withPayload ( STRING + int ) . setReplyChannel ( org.springframework.integration.scripting.config.jsr223.QueueChannel ) . build ( ) ; this . org.springframework.integration.scripting.config.jsr223.MessageChannel . send ( org.springframework.integration.scripting.config.jsr223.Message<> ) ; } assertEquals ( STRING , org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) . getPayload ( ) . toString ( ) ) ; assertNull ( org.springframework.integration.scripting.config.jsr223.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.scripting.config.jsr223.MessageChannel . send ( new GenericMessage < java.lang.Object > ( int ) ) ; } java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new java.util.HashSet<java.lang.Object> < java.lang.Object > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.scripting.config.jsr223.Message<?> = this . org.springframework.integration.scripting.config.jsr223.PollableChannel . receive ( NUMBER ) ; java.util.Set<java.lang.Object> . boolean ( org.springframework.integration.scripting.config.jsr223.Message<> . getPayload ( ) ) ; } assertEquals ( NUMBER , java.util.Set<java.lang.Object> . int ( ) ) ; }  <METHOD_END>
