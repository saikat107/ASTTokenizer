<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.Collection<? extends org.springframework.cache.support.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.support.Cache> = java.util.Collection<? extends org.springframework.cache.support.Cache> ( ) ; synchronized ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> ) { this . java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( ) ; this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> . clear ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.util.Collection<> . int ( ) ) ; for ( Cache org.springframework.cache.support.Cache : java.util.Collection<> ) { java.lang.String java.lang.String = org.springframework.cache.support.Cache . getName ( ) ; this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> . put ( java.lang.String , org.springframework.cache.support.Cache ( org.springframework.cache.support.Cache ) ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } this . java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( java.util.Set<java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> protected abstract java.util.Collection<? extends org.springframework.cache.support.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.support.Cache> ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.support.Cache org.springframework.cache.support.Cache ( java.lang.String java.lang.String ) { Cache org.springframework.cache.support.Cache = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> . get ( java.lang.String ) ; if ( org.springframework.cache.support.Cache != null ) { return org.springframework.cache.support.Cache ; } else { synchronized ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> ) { org.springframework.cache.support.Cache = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> . get ( java.lang.String ) ; if ( org.springframework.cache.support.Cache == null ) { org.springframework.cache.support.Cache = org.springframework.cache.support.Cache ( java.lang.String ) ; if ( org.springframework.cache.support.Cache != null ) { org.springframework.cache.support.Cache = org.springframework.cache.support.Cache ( org.springframework.cache.support.Cache ) ; this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> . put ( java.lang.String , org.springframework.cache.support.Cache ) ; void ( java.lang.String ) ; } } return org.springframework.cache.support.Cache ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.cache.support.Cache org.springframework.cache.support.Cache ( java.lang.String java.lang.String ) { return this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected final void void ( Cache org.springframework.cache.support.Cache ) { java.lang.String java.lang.String = org.springframework.cache.support.Cache . getName ( ) ; synchronized ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> ) { if ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> . put ( java.lang.String , org.springframework.cache.support.Cache ( org.springframework.cache.support.Cache ) ) == null ) { void ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( this . java.util.Set<java.lang.String> . int ( ) + NUMBER ) ; java.util.Set<java.lang.String> . boolean ( this . java.util.Set<java.lang.String> ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.support.Cache org.springframework.cache.support.Cache ( Cache org.springframework.cache.support.Cache ) { return org.springframework.cache.support.Cache ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.support.Cache org.springframework.cache.support.Cache ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
