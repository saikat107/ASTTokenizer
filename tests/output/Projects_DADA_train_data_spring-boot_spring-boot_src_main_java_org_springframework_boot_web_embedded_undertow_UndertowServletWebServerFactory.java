<METHOD_START> public void ( ) { super(); getJsp ( ) . setRegistered ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { super( int ); getJsp ( ) . setRegistered ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { super( java.lang.String , int ); getJsp ( ) . setRegistered ( false ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer> < ? extends UndertowBuilderCustomizer > java.util.Collection<? extends org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer> ) { Assert . notNull ( java.util.Collection<> , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer> = new java.util.ArrayList <> ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer> < UndertowBuilderCustomizer > java.util.Collection<org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer> ( ) { return this . java.util.List<org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer> ; }  <METHOD_END>
<METHOD_START> public void void ( UndertowBuilderCustomizer ... org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] ) { Assert . notNull ( org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer> . addAll ( java.util.Arrays . java.util.List ( org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<? extends org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer> < ? extends UndertowDeploymentInfoCustomizer > java.util.Collection<? extends org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer> ) { Assert . notNull ( java.util.Collection<> , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer> = new java.util.ArrayList <> ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer> < UndertowDeploymentInfoCustomizer > java.util.Collection<org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer> ( ) { return this . java.util.List<org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer> ; }  <METHOD_END>
<METHOD_START> public void void ( UndertowDeploymentInfoCustomizer ... org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] ) { Assert . notNull ( org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] , STRING ) ; this . java.util.List<org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer> . addAll ( java.util.Arrays . java.util.List ( org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.embedded.undertow.WebServer org.springframework.boot.web.embedded.undertow.WebServer ( ServletContextInitializer ... org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] ) { DeploymentManager org.springframework.boot.web.embedded.undertow.DeploymentManager = org.springframework.boot.web.embedded.undertow.DeploymentManager ( org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] ) ; int int = getPort ( ) ; Builder org.springframework.boot.web.embedded.undertow.Builder = org.springframework.boot.web.embedded.undertow.Builder ( int ) ; return org.springframework.boot.web.embedded.undertow.UndertowServletWebServer ( org.springframework.boot.web.embedded.undertow.Builder , org.springframework.boot.web.embedded.undertow.DeploymentManager , int ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.Builder org.springframework.boot.web.embedded.undertow.Builder ( int int ) { Builder org.springframework.boot.web.embedded.undertow.Builder = Undertow . builder ( ) ; if ( this . java.lang.Integer != null ) { org.springframework.boot.web.embedded.undertow.Builder . setBufferSize ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { org.springframework.boot.web.embedded.undertow.Builder . setIoThreads ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { org.springframework.boot.web.embedded.undertow.Builder . setWorkerThreads ( this . java.lang.Integer ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.boot.web.embedded.undertow.Builder . setDirectBuffers ( this . java.lang.Boolean ) ; } if ( getSsl ( ) != null && getSsl ( ) . isEnabled ( ) ) { void ( getSsl ( ) , int , org.springframework.boot.web.embedded.undertow.Builder ) ; } else { org.springframework.boot.web.embedded.undertow.Builder . addHttpListener ( int , java.lang.String ( ) ) ; } for ( UndertowBuilderCustomizer org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer : this . java.util.List<org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer> ) { org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer . customize ( org.springframework.boot.web.embedded.undertow.Builder ) ; } return org.springframework.boot.web.embedded.undertow.Builder ; }  <METHOD_END>
<METHOD_START> private void void ( Ssl org.springframework.boot.web.embedded.undertow.Ssl , int int , Builder org.springframework.boot.web.embedded.undertow.Builder ) { try { javax.net.ssl.SSLContext javax.net.ssl.SSLContext = javax.net.ssl.SSLContext . javax.net.ssl.SSLContext ( org.springframework.boot.web.embedded.undertow.Ssl . getProtocol ( ) ) ; javax.net.ssl.SSLContext . void ( javax.net.ssl.KeyManager[] ( ) , javax.net.ssl.TrustManager[] ( ) , null ) ; org.springframework.boot.web.embedded.undertow.Builder . addHttpsListener ( int , java.lang.String ( ) , javax.net.ssl.SSLContext ) ; org.springframework.boot.web.embedded.undertow.Builder . setSocketOption ( Options . SSL_CLIENT_AUTH_MODE , org.springframework.boot.web.embedded.undertow.SslClientAuthMode ( org.springframework.boot.web.embedded.undertow.Ssl ) ) ; if ( org.springframework.boot.web.embedded.undertow.Ssl . getEnabledProtocols ( ) != null ) { org.springframework.boot.web.embedded.undertow.Builder . setSocketOption ( Options . SSL_ENABLED_PROTOCOLS , Sequence . of ( org.springframework.boot.web.embedded.undertow.Ssl . getEnabledProtocols ( ) ) ) ; } if ( org.springframework.boot.web.embedded.undertow.Ssl . getCiphers ( ) != null ) { org.springframework.boot.web.embedded.undertow.Builder . setSocketOption ( Options . SSL_ENABLED_CIPHER_SUITES , Sequence . of ( org.springframework.boot.web.embedded.undertow.Ssl . getCiphers ( ) ) ) ; } } catch ( java.security.NoSuchAlgorithmException java.security.NoSuchAlgorithmException ) { throw new java.lang.IllegalStateException ( java.security.NoSuchAlgorithmException ) ; } catch ( java.security.KeyManagementException java.security.KeyManagementException ) { throw new java.lang.IllegalStateException ( java.security.KeyManagementException ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { if ( getAddress ( ) == null ) { return STRING ; } return getAddress ( ) . getHostAddress ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.SslClientAuthMode org.springframework.boot.web.embedded.undertow.SslClientAuthMode ( Ssl org.springframework.boot.web.embedded.undertow.Ssl ) { if ( org.springframework.boot.web.embedded.undertow.Ssl . getClientAuth ( ) == ClientAuth . NEED ) { return SslClientAuthMode . REQUIRED ; } if ( org.springframework.boot.web.embedded.undertow.Ssl . getClientAuth ( ) == ClientAuth . WANT ) { return SslClientAuthMode . REQUESTED ; } return SslClientAuthMode . NOT_REQUESTED ; }  <METHOD_END>
<METHOD_START> private javax.net.ssl.KeyManager [] javax.net.ssl.KeyManager[] ( ) { try { java.security.KeyStore java.security.KeyStore = java.security.KeyStore ( ) ; javax.net.ssl.KeyManagerFactory javax.net.ssl.KeyManagerFactory = javax.net.ssl.KeyManagerFactory . javax.net.ssl.KeyManagerFactory ( javax.net.ssl.KeyManagerFactory . java.lang.String ( ) ) ; Ssl org.springframework.boot.web.embedded.undertow.Ssl = getSsl ( ) ; char [] char[] = ( org.springframework.boot.web.embedded.undertow.Ssl . getKeyPassword ( ) != null ? org.springframework.boot.web.embedded.undertow.Ssl . getKeyPassword ( ) . toCharArray ( ) : null ) ; if ( char[] == null && org.springframework.boot.web.embedded.undertow.Ssl . getKeyStorePassword ( ) != null ) { char[] = org.springframework.boot.web.embedded.undertow.Ssl . getKeyStorePassword ( ) . toCharArray ( ) ; } javax.net.ssl.KeyManagerFactory . void ( java.security.KeyStore , char[] ) ; return javax.net.ssl.KeyManager[] ( org.springframework.boot.web.embedded.undertow.Ssl , javax.net.ssl.KeyManagerFactory . javax.net.ssl.KeyManager[] ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private javax.net.ssl.KeyManager [] javax.net.ssl.KeyManager[] ( Ssl org.springframework.boot.web.embedded.undertow.Ssl , javax.net.ssl.KeyManager [] javax.net.ssl.KeyManager[] ) { for ( int int = NUMBER ; int < javax.net.ssl.KeyManager[] . int ; int ++ ) { if ( javax.net.ssl.KeyManager[] [ int ] instanceof javax.net.ssl.X509ExtendedKeyManager ) { javax.net.ssl.KeyManager[] [ int ] = new org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.ConfigurableAliasKeyManager ( ( javax.net.ssl.X509ExtendedKeyManager ) javax.net.ssl.KeyManager[] [ int ] , org.springframework.boot.web.embedded.undertow.Ssl . getKeyAlias ( ) ) ; } } return javax.net.ssl.KeyManager[] ; }  <METHOD_END>
<METHOD_START> private java.security.KeyStore java.security.KeyStore ( ) java.lang.Exception { if ( getSslStoreProvider ( ) != null ) { return getSslStoreProvider ( ) . getKeyStore ( ) ; } Ssl org.springframework.boot.web.embedded.undertow.Ssl = getSsl ( ) ; return java.security.KeyStore ( org.springframework.boot.web.embedded.undertow.Ssl . getKeyStoreType ( ) , org.springframework.boot.web.embedded.undertow.Ssl . getKeyStore ( ) , org.springframework.boot.web.embedded.undertow.Ssl . getKeyStorePassword ( ) ) ; }  <METHOD_END>
<METHOD_START> private javax.net.ssl.TrustManager [] javax.net.ssl.TrustManager[] ( ) { try { java.security.KeyStore java.security.KeyStore = java.security.KeyStore ( ) ; javax.net.ssl.TrustManagerFactory javax.net.ssl.TrustManagerFactory = javax.net.ssl.TrustManagerFactory . javax.net.ssl.TrustManagerFactory ( javax.net.ssl.TrustManagerFactory . java.lang.String ( ) ) ; javax.net.ssl.TrustManagerFactory . void ( java.security.KeyStore ) ; return javax.net.ssl.TrustManagerFactory . javax.net.ssl.TrustManager[] ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.security.KeyStore java.security.KeyStore ( ) java.lang.Exception { if ( getSslStoreProvider ( ) != null ) { return getSslStoreProvider ( ) . getTrustStore ( ) ; } Ssl org.springframework.boot.web.embedded.undertow.Ssl = getSsl ( ) ; return java.security.KeyStore ( org.springframework.boot.web.embedded.undertow.Ssl . getTrustStoreType ( ) , org.springframework.boot.web.embedded.undertow.Ssl . getTrustStore ( ) , org.springframework.boot.web.embedded.undertow.Ssl . getTrustStorePassword ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.security.KeyStore java.security.KeyStore ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String )			throws java.lang.Exception { java.lang.String = ( java.lang.String == null ? STRING : java.lang.String ) ; if ( java.lang.String == null ) { return null ; } java.security.KeyStore java.security.KeyStore = java.security.KeyStore . java.security.KeyStore ( java.lang.String ) ; java.net.URL java.net.URL = ResourceUtils . getURL ( java.lang.String ) ; java.security.KeyStore . void ( java.net.URL . java.io.InputStream ( ) , java.lang.String == null ? null : java.lang.String . char[] ( ) ) ; return java.security.KeyStore ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.DeploymentManager org.springframework.boot.web.embedded.undertow.DeploymentManager ( ServletContextInitializer ... org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] ) { DeploymentInfo org.springframework.boot.web.embedded.undertow.DeploymentInfo = Servlets . deployment ( ) ; void ( org.springframework.boot.web.embedded.undertow.DeploymentInfo , org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] ) ; org.springframework.boot.web.embedded.undertow.DeploymentInfo . setClassLoader ( java.lang.ClassLoader ( ) ) ; org.springframework.boot.web.embedded.undertow.DeploymentInfo . setContextPath ( getContextPath ( ) ) ; org.springframework.boot.web.embedded.undertow.DeploymentInfo . setDisplayName ( getDisplayName ( ) ) ; org.springframework.boot.web.embedded.undertow.DeploymentInfo . setDeploymentName ( STRING ) ; if ( isRegisterDefaultServlet ( ) ) { org.springframework.boot.web.embedded.undertow.DeploymentInfo . addServlet ( Servlets . servlet ( STRING , DefaultServlet .class ) ) ; } void ( org.springframework.boot.web.embedded.undertow.DeploymentInfo ) ; org.springframework.boot.web.embedded.undertow.DeploymentInfo . setServletStackTraces ( ServletStackTraces . NONE ) ; org.springframework.boot.web.embedded.undertow.DeploymentInfo . setResourceManager ( org.springframework.boot.web.embedded.undertow.ResourceManager ( ) ) ; void ( org.springframework.boot.web.embedded.undertow.DeploymentInfo ) ; for ( UndertowDeploymentInfoCustomizer org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer : this . java.util.List<org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer> ) { org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer . customize ( org.springframework.boot.web.embedded.undertow.DeploymentInfo ) ; } if ( boolean ( ) ) { void ( org.springframework.boot.web.embedded.undertow.DeploymentInfo ) ; } if ( isPersistSession ( ) ) { java.io.File java.io.File = getValidSessionStoreDir ( ) ; org.springframework.boot.web.embedded.undertow.DeploymentInfo . setSessionPersistenceManager ( new FileSessionPersistence ( java.io.File ) ) ; } void ( org.springframework.boot.web.embedded.undertow.DeploymentInfo ) ; DeploymentManager org.springframework.boot.web.embedded.undertow.DeploymentManager = Servlets . newContainer ( ) . addDeployment ( org.springframework.boot.web.embedded.undertow.DeploymentInfo ) ; org.springframework.boot.web.embedded.undertow.DeploymentManager . deploy ( ) ; SessionManager org.springframework.boot.web.embedded.undertow.SessionManager = org.springframework.boot.web.embedded.undertow.DeploymentManager . getDeployment ( ) . getSessionManager ( ) ; int int = ( getSessionTimeout ( ) > NUMBER ? getSessionTimeout ( ) : - NUMBER ) ; org.springframework.boot.web.embedded.undertow.SessionManager . setDefaultSessionTimeout ( int ) ; return org.springframework.boot.web.embedded.undertow.DeploymentManager ; }  <METHOD_END>
<METHOD_START> private void void ( DeploymentInfo org.springframework.boot.web.embedded.undertow.DeploymentInfo ) { org.springframework.boot.web.embedded.undertow.DeploymentInfo . addInitialHandlerChainWrapper ( new HandlerWrapper ( ) { @ java.lang.Override public org.springframework.boot.web.embedded.undertow.HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler ( HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler ) { return org.springframework.boot.web.embedded.undertow.AccessLogHandler ( org.springframework.boot.web.embedded.undertow.HttpHandler ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.embedded.undertow.HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler ( HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler ) { return org.springframework.boot.web.embedded.undertow.AccessLogHandler ( org.springframework.boot.web.embedded.undertow.HttpHandler ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.AccessLogHandler org.springframework.boot.web.embedded.undertow.AccessLogHandler ( HttpHandler org.springframework.boot.web.embedded.undertow.HttpHandler ) { try { void ( ) ; java.lang.String java.lang.String = ( this . java.lang.String != null ? this . java.lang.String : STRING ) ; AccessLogReceiver org.springframework.boot.web.embedded.undertow.AccessLogReceiver = new DefaultAccessLogReceiver ( org.springframework.boot.web.embedded.undertow.XnioWorker ( ) , this . java.io.File , java.lang.String , this . java.lang.String , this . boolean ) ; java.lang.String java.lang.String = ( this . java.lang.String != null ) ? this . java.lang.String : STRING ; return new AccessLogHandler ( org.springframework.boot.web.embedded.undertow.HttpHandler , org.springframework.boot.web.embedded.undertow.AccessLogReceiver , java.lang.String , Undertow .class . java.lang.ClassLoader ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { Assert . state ( this . java.io.File != null , STRING ) ; if ( ! this . java.io.File . boolean ( ) && ! this . java.io.File . boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + this . java.io.File + STRING ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.XnioWorker org.springframework.boot.web.embedded.undertow.XnioWorker ( ) java.io.IOException { Xnio org.springframework.boot.web.embedded.undertow.Xnio = Xnio . getInstance ( Undertow .class . java.lang.ClassLoader ( ) ) ; return org.springframework.boot.web.embedded.undertow.Xnio . createWorker ( OptionMap . builder ( ) . set ( Options . THREAD_DAEMON , true ) . getMap ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( DeploymentInfo org.springframework.boot.web.embedded.undertow.DeploymentInfo ) { for ( java.util.Map . java.util.Map.Entry<java.util.Locale,java.nio.charset.Charset> < java.util.Locale , java.nio.charset.Charset > java.util.Map.Entry<java.util.Locale,java.nio.charset.Charset> : getLocaleCharsetMappings ( ) . entrySet ( ) ) { java.util.Locale java.util.Locale = java.util.Map.Entry<java.util.Locale,java.nio.charset.Charset> . java.util.Locale ( ) ; java.nio.charset.Charset java.nio.charset.Charset = java.util.Map.Entry<java.util.Locale,java.nio.charset.Charset> . java.nio.charset.Charset ( ) ; org.springframework.boot.web.embedded.undertow.DeploymentInfo . addLocaleCharsetMapping ( java.util.Locale . java.lang.String ( ) , java.nio.charset.Charset . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( DeploymentInfo org.springframework.boot.web.embedded.undertow.DeploymentInfo , ServletContextInitializer ... org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] ) { ServletContextInitializer [] org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] = mergeInitializers ( org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] ) ; org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.Initializer org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.Initializer = new org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.Initializer ( org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] ) ; org.springframework.boot.web.embedded.undertow.DeploymentInfo . addServletContainerInitalizer ( new ServletContainerInitializerInfo ( org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.Initializer .class , new ImmediateInstanceFactory < ServletContainerInitializer > ( org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.Initializer ) , java.util.Set<java.lang.Class<?>> ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.ClassLoader java.lang.ClassLoader ( ) { if ( this . org.springframework.boot.web.embedded.undertow.ResourceLoader != null ) { return this . org.springframework.boot.web.embedded.undertow.ResourceLoader . getClassLoader ( ) ; } return java.lang.Class<? extends org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory> ( ) . java.lang.ClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.embedded.undertow.ResourceManager org.springframework.boot.web.embedded.undertow.ResourceManager ( ) { java.io.File java.io.File = java.io.File ( ) ; java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = getUrlsOfJarsWithMetaInfResources ( ) ; java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = new java.util.ArrayList<java.net.URL> < java.net.URL > ( ) ; java.util.List<org.springframework.boot.web.embedded.undertow.ResourceManager> < ResourceManager > java.util.List<org.springframework.boot.web.embedded.undertow.ResourceManager> = new java.util.ArrayList<org.springframework.boot.web.embedded.undertow.ResourceManager> < ResourceManager > ( ) ; ResourceManager org.springframework.boot.web.embedded.undertow.ResourceManager = java.io.File . boolean ( ) ? new FileResourceManager ( java.io.File , NUMBER ) : new JarResourceManager ( java.io.File ) ; java.util.List<org.springframework.boot.web.embedded.undertow.ResourceManager> . add ( org.springframework.boot.web.embedded.undertow.ResourceManager ) ; for ( java.net.URL java.net.URL : java.util.List<java.net.URL> ) { if ( STRING . boolean ( java.net.URL . java.lang.String ( ) ) ) { java.io.File java.io.File = new java.io.File ( java.net.URL . java.lang.String ( ) ) ; if ( java.io.File . boolean ( ) ) { try { java.util.List<java.net.URL> . boolean ( new java.net.URL ( STRING + java.net.URL + STRING ) ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new java.lang.RuntimeException ( java.net.MalformedURLException ) ; } } else { java.util.List<org.springframework.boot.web.embedded.undertow.ResourceManager> . add ( new FileResourceManager ( new java.io.File ( java.io.File , STRING ) , NUMBER ) ) ; } } else { java.util.List<java.net.URL> . boolean ( java.net.URL ) ; } } java.util.List<org.springframework.boot.web.embedded.undertow.ResourceManager> . add ( new org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.MetaInfResourcesResourceManager ( java.util.List<java.net.URL> ) ) ; return new CompositeResourceManager ( java.util.List<org.springframework.boot.web.embedded.undertow.ResourceManager> . toArray ( new ResourceManager [ java.util.List<org.springframework.boot.web.embedded.undertow.ResourceManager> . size ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( ) { try { java.io.File java.io.File = getValidDocumentRoot ( ) ; java.io.File = ( java.io.File != null ? java.io.File : createTempDir ( STRING ) ) ; return java.io.File . java.io.File ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( DeploymentInfo org.springframework.boot.web.embedded.undertow.DeploymentInfo ) { for ( ErrorPage org.springframework.boot.web.embedded.undertow.ErrorPage : getErrorPages ( ) ) { org.springframework.boot.web.embedded.undertow.DeploymentInfo . addErrorPage ( io.undertow.servlet.api.ErrorPage ( org.springframework.boot.web.embedded.undertow.ErrorPage ) ) ; } }  <METHOD_END>
<METHOD_START> private io . io . io . io . io.undertow.servlet.api.ErrorPage io.undertow.servlet.api.ErrorPage ( ErrorPage org.springframework.boot.web.embedded.undertow.ErrorPage ) { if ( org.springframework.boot.web.embedded.undertow.ErrorPage . getStatus ( ) != null ) { return new io . io . io . io . io ( org.springframework.boot.web.embedded.undertow.ErrorPage . getPath ( ) , org.springframework.boot.web.embedded.undertow.ErrorPage . getStatusCode ( ) ) ; } if ( org.springframework.boot.web.embedded.undertow.ErrorPage . getException ( ) != null ) { return new io . io . io . io . io ( org.springframework.boot.web.embedded.undertow.ErrorPage . getPath ( ) , org.springframework.boot.web.embedded.undertow.ErrorPage . getException ( ) ) ; } return new io . io . io . io . io ( org.springframework.boot.web.embedded.undertow.ErrorPage . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( DeploymentInfo org.springframework.boot.web.embedded.undertow.DeploymentInfo ) { for ( Mapping org.springframework.boot.web.embedded.undertow.Mapping : getMimeMappings ( ) ) { org.springframework.boot.web.embedded.undertow.DeploymentInfo . addMimeMapping ( new MimeMapping ( org.springframework.boot.web.embedded.undertow.Mapping . getExtension ( ) , org.springframework.boot.web.embedded.undertow.Mapping . getMimeType ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.embedded.undertow.UndertowServletWebServer org.springframework.boot.web.embedded.undertow.UndertowServletWebServer ( Builder org.springframework.boot.web.embedded.undertow.Builder , DeploymentManager org.springframework.boot.web.embedded.undertow.DeploymentManager , int int ) { return new UndertowServletWebServer ( org.springframework.boot.web.embedded.undertow.Builder , org.springframework.boot.web.embedded.undertow.DeploymentManager , getContextPath ( ) , boolean ( ) , int >= NUMBER , getCompression ( ) , getServerHeader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.boot.web.embedded.undertow.ResourceLoader ) { this . org.springframework.boot.web.embedded.undertow.ResourceLoader = org.springframework.boot.web.embedded.undertow.ResourceLoader ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public void void ( java.lang.Integer java.lang.Integer ) {	}  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> private void ( java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ) { this . java.util.List<java.net.URL> = java.util.List<java.net.URL> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.embedded.undertow.Resource org.springframework.boot.web.embedded.undertow.Resource ( java.lang.String java.lang.String ) { for ( java.net.URL java.net.URL : this . java.util.List<java.net.URL> ) { try { java.net.URL java.net.URL = new java.net.URL ( java.net.URL + STRING + java.lang.String ) ; java.net.URLConnection java.net.URLConnection = java.net.URL . java.net.URLConnection ( ) ; if ( java.net.URLConnection . int ( ) >= NUMBER ) { return new URLResource ( java.net.URL , java.net.URLConnection , java.lang.String ) ; } } catch ( java.io.IOException java.io.IOException ) { } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceChangeListener org.springframework.boot.web.embedded.undertow.ResourceChangeListener ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceChangeListener org.springframework.boot.web.embedded.undertow.ResourceChangeListener ) {		}  <METHOD_END>
<METHOD_START> void ( ServletContextInitializer [] org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] ) { this . org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] = org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> , ServletContext org.springframework.boot.web.embedded.undertow.ServletContext )				throws org.springframework.boot.web.embedded.undertow.ServletException { for ( ServletContextInitializer org.springframework.boot.web.embedded.undertow.ServletContextInitializer : this . org.springframework.boot.web.embedded.undertow.ServletContextInitializer[] ) { org.springframework.boot.web.embedded.undertow.ServletContextInitializer . onStartup ( org.springframework.boot.web.embedded.undertow.ServletContext ) ; } }  <METHOD_END>
<METHOD_START> void ( javax.net.ssl.X509ExtendedKeyManager javax.net.ssl.X509ExtendedKeyManager , java.lang.String java.lang.String ) { this . javax.net.ssl.X509ExtendedKeyManager = javax.net.ssl.X509ExtendedKeyManager ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String [] java.lang.String[] , java.security.Principal [] java.security.Principal[] , javax.net.ssl.SSLEngine javax.net.ssl.SSLEngine ) { return this . javax.net.ssl.X509ExtendedKeyManager . java.lang.String ( java.lang.String[] , java.security.Principal[] , javax.net.ssl.SSLEngine ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.security.Principal [] java.security.Principal[] , javax.net.ssl.SSLEngine javax.net.ssl.SSLEngine ) { if ( this . java.lang.String == null ) { return this . javax.net.ssl.X509ExtendedKeyManager . java.lang.String ( java.lang.String , java.security.Principal[] , javax.net.ssl.SSLEngine ) ; } return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String [] java.lang.String[] , java.security.Principal [] java.security.Principal[] , java.net.Socket java.net.Socket ) { return this . javax.net.ssl.X509ExtendedKeyManager . java.lang.String ( java.lang.String[] , java.security.Principal[] , java.net.Socket ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.security.Principal [] java.security.Principal[] , java.net.Socket java.net.Socket ) { return this . javax.net.ssl.X509ExtendedKeyManager . java.lang.String ( java.lang.String , java.security.Principal[] , java.net.Socket ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] ( java.lang.String java.lang.String ) { return this . javax.net.ssl.X509ExtendedKeyManager . java.security.cert.X509Certificate[] ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String , java.security.Principal [] java.security.Principal[] ) { return this . javax.net.ssl.X509ExtendedKeyManager . java.lang.String[] ( java.lang.String , java.security.Principal[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.PrivateKey java.security.PrivateKey ( java.lang.String java.lang.String ) { return this . javax.net.ssl.X509ExtendedKeyManager . java.security.PrivateKey ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String , java.security.Principal [] java.security.Principal[] ) { return this . javax.net.ssl.X509ExtendedKeyManager . java.lang.String[] ( java.lang.String , java.security.Principal[] ) ; }  <METHOD_END>
