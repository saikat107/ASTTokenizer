<METHOD_START> @ Test public void void ( ) java.lang.Exception { final FTPClient org.springframework.integration.ftp.session.FTPClient = mock ( FTPClient .class ) ; DefaultFtpSessionFactory org.springframework.integration.ftp.session.DefaultFtpSessionFactory = new DefaultFtpSessionFactory ( ) { @ java.lang.Override protected org.springframework.integration.ftp.session.FTPClient org.springframework.integration.ftp.session.FTPClient ( ) { return org.springframework.integration.ftp.session.FTPClient ; } } ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setUsername ( STRING ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setConnectTimeout ( NUMBER ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setDefaultTimeout ( NUMBER ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setDataTimeout ( NUMBER ) ; doReturn ( NUMBER ) . when ( org.springframework.integration.ftp.session.FTPClient ) . getReplyCode ( ) ; doReturn ( true ) . when ( org.springframework.integration.ftp.session.FTPClient ) . login ( STRING , null ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . getSession ( ) ; verify ( org.springframework.integration.ftp.session.FTPClient ) . setConnectTimeout ( NUMBER ) ; verify ( org.springframework.integration.ftp.session.FTPClient ) . setDefaultTimeout ( NUMBER ) ; verify ( org.springframework.integration.ftp.session.FTPClient ) . setDataTimeout ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.ftp.session.FTPClient org.springframework.integration.ftp.session.FTPClient ( ) { return org.springframework.integration.ftp.session.FTPClient ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFtpSessionFactory org.springframework.integration.ftp.session.DefaultFtpSessionFactory = new DefaultFtpSessionFactory ( ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setControlEncoding ( STRING ) ; Assert . assertEquals ( STRING , STRING , TestUtils . getPropertyValue ( org.springframework.integration.ftp.session.DefaultFtpSessionFactory , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultFtpSessionFactory org.springframework.integration.ftp.session.DefaultFtpSessionFactory = new DefaultFtpSessionFactory ( ) ; Assert . assertEquals ( STRING , STRING , TestUtils . getPropertyValue ( org.springframework.integration.ftp.session.DefaultFtpSessionFactory , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { DefaultFtpSessionFactory org.springframework.integration.ftp.session.DefaultFtpSessionFactory = new DefaultFtpSessionFactory ( ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setControlEncoding ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { DefaultFtpSessionFactory org.springframework.integration.ftp.session.DefaultFtpSessionFactory = new DefaultFtpSessionFactory ( ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setControlEncoding ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultFtpSessionFactory org.springframework.integration.ftp.session.DefaultFtpSessionFactory = new DefaultFtpSessionFactory ( ) ; java.lang.reflect.Field [] java.lang.reflect.Field[] = FTPClient .class . java.lang.reflect.Field[] ( ) ; for ( java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[] ) { if ( java.lang.reflect.Field . java.lang.String ( ) . boolean ( STRING ) ) { try { int int = java.lang.reflect.Field . int ( null ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setClientMode ( int ) ; if ( ! ( int == FTPClient . ACTIVE_LOCAL_DATA_CONNECTION_MODE || int == FTPClient . PASSIVE_LOCAL_DATA_CONNECTION_MODE ) ) { fail ( ) ; } } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } catch ( java.lang.Throwable java.lang.Throwable ) { fail ( ) ; } } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.ftp.session.SessionFactory = Mockito . mock ( SessionFactory .class ) ; Session org.springframework.integration.ftp.session.Session = Mockito . mock ( Session .class ) ; Session org.springframework.integration.ftp.session.Session = Mockito . mock ( Session .class ) ; Mockito . when ( org.springframework.integration.ftp.session.Session . isOpen ( ) ) . thenReturn ( true ) ; Mockito . when ( org.springframework.integration.ftp.session.Session . isOpen ( ) ) . thenReturn ( false ) ; Mockito . when ( org.springframework.integration.ftp.session.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.ftp.session.Session ) ; Mockito . when ( org.springframework.integration.ftp.session.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.ftp.session.Session ) ; CachingSessionFactory org.springframework.integration.ftp.session.CachingSessionFactory = new CachingSessionFactory ( org.springframework.integration.ftp.session.SessionFactory , NUMBER ) ; Session org.springframework.integration.ftp.session.Session = org.springframework.integration.ftp.session.CachingSessionFactory . getSession ( ) ; Session org.springframework.integration.ftp.session.Session = org.springframework.integration.ftp.session.CachingSessionFactory . getSession ( ) ; org.springframework.integration.ftp.session.Session . close ( ) ; Session org.springframework.integration.ftp.session.Session = org.springframework.integration.ftp.session.CachingSessionFactory . getSession ( ) ; assertEquals ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.session.Session , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.ftp.session.Session , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.ftp.session.SessionFactory = Mockito . mock ( SessionFactory .class ) ; Session org.springframework.integration.ftp.session.Session = Mockito . mock ( Session .class ) ; Mockito . when ( org.springframework.integration.ftp.session.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.ftp.session.Session ) ; CachingSessionFactory org.springframework.integration.ftp.session.CachingSessionFactory = new CachingSessionFactory ( org.springframework.integration.ftp.session.SessionFactory , NUMBER ) ; Session org.springframework.integration.ftp.session.Session = org.springframework.integration.ftp.session.CachingSessionFactory . getSession ( ) ; org.springframework.integration.ftp.session.Session . close ( ) ; Session org.springframework.integration.ftp.session.Session = org.springframework.integration.ftp.session.CachingSessionFactory . getSession ( ) ; org.springframework.integration.ftp.session.Session . close ( ) ; assertEquals ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.session.Session , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.ftp.session.Session , STRING ) ) ; Mockito . verify ( org.springframework.integration.ftp.session.SessionFactory , Mockito . times ( NUMBER ) ) . getSession ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) java.lang.Exception { SessionFactory org.springframework.integration.ftp.session.SessionFactory = Mockito . mock ( SessionFactory .class ) ; Session org.springframework.integration.ftp.session.Session = Mockito . mock ( Session .class ) ; Mockito . when ( org.springframework.integration.ftp.session.SessionFactory . getSession ( ) ) . thenReturn ( org.springframework.integration.ftp.session.Session ) ; CachingSessionFactory org.springframework.integration.ftp.session.CachingSessionFactory = new CachingSessionFactory ( org.springframework.integration.ftp.session.SessionFactory , NUMBER ) ; org.springframework.integration.ftp.session.CachingSessionFactory . setSessionWaitTimeout ( NUMBER ) ; org.springframework.integration.ftp.session.CachingSessionFactory . getSession ( ) ; org.springframework.integration.ftp.session.CachingSessionFactory . getSession ( ) ; org.springframework.integration.ftp.session.CachingSessionFactory . getSession ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; DefaultFtpSessionFactory org.springframework.integration.ftp.session.DefaultFtpSessionFactory = new DefaultFtpSessionFactory ( ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setHost ( STRING ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setPassword ( STRING ) ; org.springframework.integration.ftp.session.DefaultFtpSessionFactory . setUsername ( STRING ) ; final CachingSessionFactory org.springframework.integration.ftp.session.CachingSessionFactory = new CachingSessionFactory ( org.springframework.integration.ftp.session.DefaultFtpSessionFactory , NUMBER ) ; final java.util.Random java.util.Random = new java.util.Random ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.concurrent.ExecutorService . void ( ( ) { try { Session org.springframework.integration.ftp.session.Session = org.springframework.integration.ftp.session.CachingSessionFactory . getSession ( ) ; java.lang.Thread . void ( java.util.Random . int ( NUMBER ) ) ; org.springframework.integration.ftp.session.Session . close ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ) ; } java.util.concurrent.ExecutorService . void ( ) ; java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
