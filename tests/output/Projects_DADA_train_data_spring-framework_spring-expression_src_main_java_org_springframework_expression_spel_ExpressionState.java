<METHOD_START> public void ( EvaluationContext org.springframework.expression.spel.EvaluationContext ) { this( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.EvaluationContext . getRootObject ( ) , new SpelParserConfiguration ( false , false ) ); }  <METHOD_END>
<METHOD_START> public void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration ) { this( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.EvaluationContext . getRootObject ( ) , org.springframework.expression.spel.SpelParserConfiguration ); }  <METHOD_END>
<METHOD_START> public void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , TypedValue org.springframework.expression.spel.TypedValue ) { this( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.TypedValue , new SpelParserConfiguration ( false , false ) ); }  <METHOD_END>
<METHOD_START> public void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , TypedValue org.springframework.expression.spel.TypedValue , SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration ) { Assert . notNull ( org.springframework.expression.spel.EvaluationContext , STRING ) ; Assert . notNull ( org.springframework.expression.spel.SpelParserConfiguration , STRING ) ; this . org.springframework.expression.spel.EvaluationContext = org.springframework.expression.spel.EvaluationContext ; this . org.springframework.expression.spel.TypedValue = org.springframework.expression.spel.TypedValue ; this . org.springframework.expression.spel.SpelParserConfiguration = org.springframework.expression.spel.SpelParserConfiguration ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> == null ) { this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> = new java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> <> ( ) ; this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> . boolean ( new org.springframework.expression.spel.ExpressionState.VariableScope ( ) ) ; } if ( this . java.util.Stack<org.springframework.expression.spel.TypedValue> == null ) { this . java.util.Stack<org.springframework.expression.spel.TypedValue> = new java.util.Stack <> ( ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( ) { if ( this . java.util.Stack<org.springframework.expression.spel.TypedValue> == null || this . java.util.Stack<org.springframework.expression.spel.TypedValue> . isEmpty ( ) ) { return this . org.springframework.expression.spel.TypedValue ; } return this . java.util.Stack<org.springframework.expression.spel.TypedValue> . peek ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( TypedValue org.springframework.expression.spel.TypedValue ) { if ( this . java.util.Stack<org.springframework.expression.spel.TypedValue> == null ) { this . java.util.Stack<org.springframework.expression.spel.TypedValue> = new java.util.Stack <> ( ) ; } this . java.util.Stack<org.springframework.expression.spel.TypedValue> . push ( org.springframework.expression.spel.TypedValue ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( this . java.util.Stack<org.springframework.expression.spel.TypedValue> == null ) { this . java.util.Stack<org.springframework.expression.spel.TypedValue> = new java.util.Stack <> ( ) ; } this . java.util.Stack<org.springframework.expression.spel.TypedValue> . pop ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( ) { return this . org.springframework.expression.spel.TypedValue ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( ) { if ( this . java.util.Stack<org.springframework.expression.spel.TypedValue> == null || this . java.util.Stack<org.springframework.expression.spel.TypedValue> . isEmpty ( ) ) { return this . org.springframework.expression.spel.TypedValue ; } return this . java.util.Stack<org.springframework.expression.spel.TypedValue> . peek ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . org.springframework.expression.spel.EvaluationContext . setVariable ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = this . org.springframework.expression.spel.EvaluationContext . lookupVariable ( java.lang.String ) ; if ( java.lang.Object == null ) { return TypedValue . NULL ; } else { return new TypedValue ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.TypeComparator org.springframework.expression.spel.TypeComparator ( ) { return this . org.springframework.expression.spel.EvaluationContext . getTypeComparator ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws org.springframework.expression.spel.EvaluationException { return this . org.springframework.expression.spel.EvaluationContext . getTypeLocator ( ) . findType ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.expression.spel.TypeDescriptor ) throws org.springframework.expression.spel.EvaluationException { return this . org.springframework.expression.spel.EvaluationContext . getTypeConverter ( ) . convertValue ( java.lang.Object , TypeDescriptor . forObject ( java.lang.Object ) , org.springframework.expression.spel.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.TypeConverter org.springframework.expression.spel.TypeConverter ( ) { return this . org.springframework.expression.spel.EvaluationContext . getTypeConverter ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( TypedValue org.springframework.expression.spel.TypedValue , TypeDescriptor org.springframework.expression.spel.TypeDescriptor ) throws org.springframework.expression.spel.EvaluationException { java.lang.Object java.lang.Object = org.springframework.expression.spel.TypedValue . getValue ( ) ; return this . org.springframework.expression.spel.EvaluationContext . getTypeConverter ( ) . convertValue ( java.lang.Object , TypeDescriptor . forObject ( java.lang.Object ) , org.springframework.expression.spel.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { void ( ) ; this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> . org.springframework.expression.spel.ExpressionState.VariableScope ( new org.springframework.expression.spel.ExpressionState.VariableScope ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; this . java.util.Stack<org.springframework.expression.spel.TypedValue> . push ( org.springframework.expression.spel.TypedValue ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( ) ; this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> . org.springframework.expression.spel.ExpressionState.VariableScope ( new org.springframework.expression.spel.ExpressionState.VariableScope ( java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ) ) ; this . java.util.Stack<org.springframework.expression.spel.TypedValue> . push ( org.springframework.expression.spel.TypedValue ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { void ( ) ; this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> . org.springframework.expression.spel.ExpressionState.VariableScope ( new org.springframework.expression.spel.ExpressionState.VariableScope ( java.lang.String , java.lang.Object ) ) ; this . java.util.Stack<org.springframework.expression.spel.TypedValue> . push ( org.springframework.expression.spel.TypedValue ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( ) ; this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> . org.springframework.expression.spel.ExpressionState.VariableScope ( ) ; this . java.util.Stack<org.springframework.expression.spel.TypedValue> . pop ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { void ( ) ; this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> . org.springframework.expression.spel.ExpressionState.VariableScope ( ) . void ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { void ( ) ; int int = this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> . int ( ) - NUMBER ; for ( int int = int ; int >= NUMBER ; int -- ) { if ( this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> . org.springframework.expression.spel.ExpressionState.VariableScope ( int ) . boolean ( java.lang.String ) ) { return this . java.util.Stack<org.springframework.expression.spel.ExpressionState.VariableScope> . org.springframework.expression.spel.ExpressionState.VariableScope ( int ) . java.lang.Object ( java.lang.String ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( Operation org.springframework.expression.spel.Operation , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.EvaluationException { OperatorOverloader org.springframework.expression.spel.OperatorOverloader = this . org.springframework.expression.spel.EvaluationContext . getOperatorOverloader ( ) ; if ( org.springframework.expression.spel.OperatorOverloader . overridesOperation ( org.springframework.expression.spel.Operation , java.lang.Object , java.lang.Object ) ) { java.lang.Object java.lang.Object = org.springframework.expression.spel.OperatorOverloader . operate ( org.springframework.expression.spel.Operation , java.lang.Object , java.lang.Object ) ; return new TypedValue ( java.lang.Object ) ; } else { java.lang.String java.lang.String = ( java.lang.Object == null ? STRING : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; java.lang.String java.lang.String = ( java.lang.Object == null ? STRING : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; throw new SpelEvaluationException ( SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES , org.springframework.expression.spel.Operation , java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.expression.spel.PropertyAccessor> < PropertyAccessor > java.util.List<org.springframework.expression.spel.PropertyAccessor> ( ) { return this . org.springframework.expression.spel.EvaluationContext . getPropertyAccessors ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.EvaluationContext org.springframework.expression.spel.EvaluationContext ( ) { return this . org.springframework.expression.spel.EvaluationContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration ( ) { return this . org.springframework.expression.spel.SpelParserConfiguration ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ; }  <METHOD_END>
