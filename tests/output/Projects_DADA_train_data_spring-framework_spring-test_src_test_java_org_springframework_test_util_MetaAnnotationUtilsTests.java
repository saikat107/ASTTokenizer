<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { void ( java.lang.Class<> , java.lang.Class<> , java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { void ( java.lang.Class<> , java.lang.Class<> , java.lang.Class<> , java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { AnnotationDescriptor < Component > org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> = findAnnotationDescriptor ( java.lang.Class<> , Component .class ) ; assertNotNull ( STRING , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> ) ; assertEquals ( STRING , java.lang.Class<> , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getRootDeclaringClass ( ) ) ; assertEquals ( STRING , java.lang.Class<> , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getDeclaringClass ( ) ) ; assertEquals ( STRING , Component .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getAnnotationType ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getAnnotation ( ) . value ( ) ) ; assertNotNull ( STRING , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getComposedAnnotation ( ) ) ; assertEquals ( STRING , java.lang.Class<> , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getComposedAnnotationType ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { void ( java.lang.Class<> , java.lang.Class<> , java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { void ( java.lang.Class<> , java.lang.Class<> , java.lang.Class<> , java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.lang.Class<org.springframework.test.util.Component> < Component > java.lang.Class<org.springframework.test.util.Component> = Component .class ; UntypedAnnotationDescriptor org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( java.lang.Class<> , Service .class , java.lang.Class<org.springframework.test.util.Component> , Order .class , Transactional .class ) ; assertNotNull ( STRING , org.springframework.test.util.UntypedAnnotationDescriptor ) ; assertEquals ( STRING , java.lang.Class<> , org.springframework.test.util.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; assertEquals ( STRING , java.lang.Class<> , org.springframework.test.util.UntypedAnnotationDescriptor . getDeclaringClass ( ) ) ; assertEquals ( STRING , java.lang.Class<org.springframework.test.util.Component> , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotationType ( ) ) ; assertEquals ( STRING , java.lang.String , ( ( Component ) org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotation ( ) ) . value ( ) ) ; assertNotNull ( STRING , org.springframework.test.util.UntypedAnnotationDescriptor . getComposedAnnotation ( ) ) ; assertEquals ( STRING , java.lang.Class<> , org.springframework.test.util.UntypedAnnotationDescriptor . getComposedAnnotationType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.NonAnnotatedInterface .class , Transactional .class ) ) ; assertNull ( findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.NonAnnotatedClass .class , Transactional .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationClass .class , findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationClass .class , Transactional .class ) . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationClass .class , findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.SubInheritedAnnotationClass .class , Transactional .class ) . getRootDeclaringClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Transactional org.springframework.test.util.Transactional = org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class . A ( Transactional .class ) ; AnnotationDescriptor < Transactional > org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> ; org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> = findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class , Transactional .class ) ; assertNotNull ( org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Transactional , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> . getAnnotation ( ) ) ; org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> = findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.SubInheritedAnnotationInterface .class , Transactional .class ) ; assertNotNull ( org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.SubInheritedAnnotationInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Transactional , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> . getAnnotation ( ) ) ; org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> = findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.SubSubInheritedAnnotationInterface .class , Transactional .class ) ; assertNotNull ( org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.SubSubInheritedAnnotationInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Transactional , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Transactional> . getAnnotation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationClass .class , findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationClass .class , Order .class ) . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationClass .class , findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.SubNonInheritedAnnotationClass .class , Order .class ) . getRootDeclaringClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Order org.springframework.test.util.Order = org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationInterface .class . A ( Order .class ) ; AnnotationDescriptor < Order > org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> ; org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> = findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationInterface .class , Order .class ) ; assertNotNull ( org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Order , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> . getAnnotation ( ) ) ; org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> = findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.SubNonInheritedAnnotationInterface .class , Order .class ) ; assertNotNull ( org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.SubNonInheritedAnnotationInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Order , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Order> . getAnnotation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.test.util.MetaAnnotationUtilsTests.HasMetaComponentAnnotation .class , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.Meta1 .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<org.springframework.test.util.Component> < Component > java.lang.Class<org.springframework.test.util.Component> = Component .class ; AnnotationDescriptor < Component > org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> = findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.HasLocalAndMetaComponentAnnotation .class , java.lang.Class<org.springframework.test.util.Component> ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.HasLocalAndMetaComponentAnnotation .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getRootDeclaringClass ( ) ) ; assertEquals ( java.lang.Class<org.springframework.test.util.Component> , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getAnnotationType ( ) ) ; assertNull ( org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getComposedAnnotation ( ) ) ; assertNull ( org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getComposedAnnotationType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.util.MetaAnnotationUtilsTests.InterfaceWithMetaAnnotation .class , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.Meta1 .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Component org.springframework.test.util.Component = AnnotationUtils . findAnnotation ( org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithMetaAnnotatedInterface .class , Component .class ) ; AnnotationDescriptor < Component > org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> ; org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> = findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithMetaAnnotatedInterface .class , Component .class ) ; assertNotNull ( org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithMetaAnnotatedInterface .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.Meta1 .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Component , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getAnnotation ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.Meta1 .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> . getComposedAnnotation ( ) . annotationType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationDescriptor < ContextConfiguration > org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.ContextConfiguration> = findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.MetaAnnotatedAndSuperAnnotatedContextConfigClass .class , ContextConfiguration .class ) ; assertNotNull ( STRING , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.ContextConfiguration> ) ; assertEquals ( STRING , org.springframework.test.util.MetaAnnotationUtilsTests.MetaAnnotatedAndSuperAnnotatedContextConfigClass .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.ContextConfiguration> . getRootDeclaringClass ( ) ) ; assertEquals ( STRING , org.springframework.test.util.MetaAnnotationUtilsTests.MetaConfig .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.ContextConfiguration> . getDeclaringClass ( ) ) ; assertEquals ( STRING , ContextConfiguration .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.ContextConfiguration> . getAnnotationType ( ) ) ; assertNotNull ( STRING , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.ContextConfiguration> . getComposedAnnotation ( ) ) ; assertEquals ( STRING , org.springframework.test.util.MetaAnnotationUtilsTests.MetaConfig .class , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.ContextConfiguration> . getComposedAnnotationType ( ) ) ; assertArrayEquals ( STRING , new java.lang.Class [] { java.lang.String .class } , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.ContextConfiguration> . getAnnotationAttributes ( ) . getClassArray ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface .class , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.Meta2 .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.util.MetaAnnotationUtilsTests.SubClassWithLocalMetaAnnotationAndMetaAnnotatedInterface .class , org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface .class , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.Meta2 .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass> < org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass > java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass> = org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass .class ; void ( java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass> , java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass> , org.springframework.test.util.MetaAnnotationUtilsTests.Meta2 .class , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.MetaMeta .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass> < org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass > java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass> = org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass .class ; void ( java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass> , java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass> , org.springframework.test.util.MetaAnnotationUtilsTests.Meta2 .class , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMeta .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationDescriptor < Component > org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> = findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationClass .class , Component .class ) ; assertNull ( STRING , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationDescriptor < Component > org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> = findAnnotationDescriptor ( org.springframework.test.util.MetaAnnotationUtilsTests.MetaCycleAnnotatedClass .class , Component .class ) ; assertNull ( STRING , org.springframework.test.util.AnnotationDescriptor<org.springframework.test.util.Component> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertNull ( findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.NonAnnotatedInterface .class , Transactional .class , Component .class ) ) ; assertNull ( findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.NonAnnotatedClass .class , Transactional .class , Order .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationClass .class , findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationClass .class , Transactional .class ) . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationClass .class , findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.SubInheritedAnnotationClass .class , Transactional .class ) . getRootDeclaringClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { Transactional org.springframework.test.util.Transactional = org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class . A ( Transactional .class ) ; UntypedAnnotationDescriptor org.springframework.test.util.UntypedAnnotationDescriptor ; org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class , Transactional .class ) ; assertNotNull ( org.springframework.test.util.UntypedAnnotationDescriptor ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Transactional , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotation ( ) ) ; org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.SubInheritedAnnotationInterface .class , Transactional .class ) ; assertNotNull ( org.springframework.test.util.UntypedAnnotationDescriptor ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.SubInheritedAnnotationInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Transactional , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotation ( ) ) ; org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.SubSubInheritedAnnotationInterface .class , Transactional .class ) ; assertNotNull ( org.springframework.test.util.UntypedAnnotationDescriptor ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.SubSubInheritedAnnotationInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Transactional , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationClass .class , findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationClass .class , Order .class ) . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationClass .class , findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.SubNonInheritedAnnotationClass .class , Order .class ) . getRootDeclaringClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { Order org.springframework.test.util.Order = org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationInterface .class . A ( Order .class ) ; UntypedAnnotationDescriptor org.springframework.test.util.UntypedAnnotationDescriptor ; org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationInterface .class , Order .class ) ; assertNotNull ( org.springframework.test.util.UntypedAnnotationDescriptor ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Order , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotation ( ) ) ; org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.SubNonInheritedAnnotationInterface .class , Order .class ) ; assertNotNull ( org.springframework.test.util.UntypedAnnotationDescriptor ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.SubNonInheritedAnnotationInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.NonInheritedAnnotationInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Order , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.Class<org.springframework.test.util.Component> < Component > java.lang.Class<org.springframework.test.util.Component> = Component .class ; UntypedAnnotationDescriptor org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.HasLocalAndMetaComponentAnnotation .class , Transactional .class , java.lang.Class<org.springframework.test.util.Component> , Order .class ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.HasLocalAndMetaComponentAnnotation .class , org.springframework.test.util.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; assertEquals ( java.lang.Class<org.springframework.test.util.Component> , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotationType ( ) ) ; assertNull ( org.springframework.test.util.UntypedAnnotationDescriptor . getComposedAnnotation ( ) ) ; assertNull ( org.springframework.test.util.UntypedAnnotationDescriptor . getComposedAnnotationType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.HasMetaComponentAnnotation> < org.springframework.test.util.MetaAnnotationUtilsTests.HasMetaComponentAnnotation > java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.HasMetaComponentAnnotation> = org.springframework.test.util.MetaAnnotationUtilsTests.HasMetaComponentAnnotation .class ; void ( java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.HasMetaComponentAnnotation> , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.Meta1 .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.util.MetaAnnotationUtilsTests.MetaConfigWithDefaultAttributesTestCase .class ; java.lang.Class<org.springframework.test.util.ContextConfiguration> < ContextConfiguration > java.lang.Class<org.springframework.test.util.ContextConfiguration> = ContextConfiguration .class ; UntypedAnnotationDescriptor org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( java.lang.Class<> , Service .class , ContextConfiguration .class , Order .class , Transactional .class ) ; assertNotNull ( org.springframework.test.util.UntypedAnnotationDescriptor ) ; assertEquals ( java.lang.Class<> , org.springframework.test.util.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; assertEquals ( java.lang.Class<org.springframework.test.util.ContextConfiguration> , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotationType ( ) ) ; assertArrayEquals ( new java.lang.Class [] {} , ( ( ContextConfiguration ) org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotation ( ) ) . value ( ) ) ; assertArrayEquals ( new java.lang.Class [] { org.springframework.test.util.MetaAnnotationUtilsTests.MetaConfig . org.springframework.test.util.MetaAnnotationUtilsTests.MetaConfig.DevConfig .class , org.springframework.test.util.MetaAnnotationUtilsTests.MetaConfig . org.springframework.test.util.MetaAnnotationUtilsTests.MetaConfig.ProductionConfig .class } , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotationAttributes ( ) . getClassArray ( STRING ) ) ; assertNotNull ( org.springframework.test.util.UntypedAnnotationDescriptor . getComposedAnnotation ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.MetaConfig .class , org.springframework.test.util.UntypedAnnotationDescriptor . getComposedAnnotationType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.util.MetaAnnotationUtilsTests.MetaConfigWithOverriddenAttributesTestCase .class ; java.lang.Class<org.springframework.test.util.ContextConfiguration> < ContextConfiguration > java.lang.Class<org.springframework.test.util.ContextConfiguration> = ContextConfiguration .class ; UntypedAnnotationDescriptor org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( java.lang.Class<> , Service .class , ContextConfiguration .class , Order .class , Transactional .class ) ; assertNotNull ( org.springframework.test.util.UntypedAnnotationDescriptor ) ; assertEquals ( java.lang.Class<> , org.springframework.test.util.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; assertEquals ( java.lang.Class<org.springframework.test.util.ContextConfiguration> , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotationType ( ) ) ; assertArrayEquals ( new java.lang.Class [] {} , ( ( ContextConfiguration ) org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotation ( ) ) . value ( ) ) ; assertArrayEquals ( new java.lang.Class [] { org.springframework.test.util.MetaAnnotationUtilsTests .class } , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotationAttributes ( ) . getClassArray ( STRING ) ) ; assertNotNull ( org.springframework.test.util.UntypedAnnotationDescriptor . getComposedAnnotation ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.MetaConfig .class , org.springframework.test.util.UntypedAnnotationDescriptor . getComposedAnnotationType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.InterfaceWithMetaAnnotation> < org.springframework.test.util.MetaAnnotationUtilsTests.InterfaceWithMetaAnnotation > java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.InterfaceWithMetaAnnotation> = org.springframework.test.util.MetaAnnotationUtilsTests.InterfaceWithMetaAnnotation .class ; void ( java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.InterfaceWithMetaAnnotation> , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.Meta1 .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Component org.springframework.test.util.Component = AnnotationUtils . findAnnotation ( org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithMetaAnnotatedInterface .class , Component .class ) ; UntypedAnnotationDescriptor org.springframework.test.util.UntypedAnnotationDescriptor ; org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithMetaAnnotatedInterface .class , Service .class , Component .class , Order .class , Transactional .class ) ; assertNotNull ( org.springframework.test.util.UntypedAnnotationDescriptor ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithMetaAnnotatedInterface .class , org.springframework.test.util.UntypedAnnotationDescriptor . getRootDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.Meta1 .class , org.springframework.test.util.UntypedAnnotationDescriptor . getDeclaringClass ( ) ) ; assertEquals ( org.springframework.test.util.Component , org.springframework.test.util.UntypedAnnotationDescriptor . getAnnotation ( ) ) ; assertEquals ( org.springframework.test.util.MetaAnnotationUtilsTests.Meta1 .class , org.springframework.test.util.UntypedAnnotationDescriptor . getComposedAnnotation ( ) . annotationType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface> < org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface > java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface> = org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface .class ; void ( java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface> , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.Meta2 .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.util.MetaAnnotationUtilsTests.SubClassWithLocalMetaAnnotationAndMetaAnnotatedInterface .class , org.springframework.test.util.MetaAnnotationUtilsTests.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface .class , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.Meta2 .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass> < org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass > java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass> = org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass .class ; void ( java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass> , java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaAnnotatedClass> , org.springframework.test.util.MetaAnnotationUtilsTests.Meta2 .class , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.MetaMeta .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass> < org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass > java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass> = org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass .class ; void ( java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass> , java.lang.Class<org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMetaAnnotatedClass> , org.springframework.test.util.MetaAnnotationUtilsTests.Meta2 .class , STRING , org.springframework.test.util.MetaAnnotationUtilsTests.MetaMetaMeta .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { UntypedAnnotationDescriptor org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.InheritedAnnotationClass .class , Service .class , Component .class , Order .class ) ; assertNull ( STRING , org.springframework.test.util.UntypedAnnotationDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { UntypedAnnotationDescriptor org.springframework.test.util.UntypedAnnotationDescriptor = findAnnotationDescriptorForTypes ( org.springframework.test.util.MetaAnnotationUtilsTests.MetaCycleAnnotatedClass .class , Service .class , Component .class , Order .class ) ; assertNull ( STRING , org.springframework.test.util.UntypedAnnotationDescriptor ) ; }  <METHOD_END>
