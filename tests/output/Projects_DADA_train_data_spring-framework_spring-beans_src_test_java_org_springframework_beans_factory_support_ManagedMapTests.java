<METHOD_START> @ Test public void void ( ) { ManagedMap org.springframework.beans.factory.support.ManagedMap = new ManagedMap ( ) ; org.springframework.beans.factory.support.ManagedMap . put ( STRING , STRING ) ; org.springframework.beans.factory.support.ManagedMap . put ( STRING , STRING ) ; ManagedMap org.springframework.beans.factory.support.ManagedMap = new ManagedMap ( ) ; org.springframework.beans.factory.support.ManagedMap . put ( STRING , STRING ) ; org.springframework.beans.factory.support.ManagedMap . setMergeEnabled ( true ) ; java.util.Map java.util.Map = ( java.util.Map ) org.springframework.beans.factory.support.ManagedMap . merge ( org.springframework.beans.factory.support.ManagedMap ) ; assertEquals ( STRING , NUMBER , java.util.Map . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ManagedMap org.springframework.beans.factory.support.ManagedMap = new ManagedMap ( ) ; org.springframework.beans.factory.support.ManagedMap . setMergeEnabled ( true ) ; assertSame ( org.springframework.beans.factory.support.ManagedMap , org.springframework.beans.factory.support.ManagedMap . merge ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ManagedMap org.springframework.beans.factory.support.ManagedMap = new ManagedMap ( ) ; org.springframework.beans.factory.support.ManagedMap . setMergeEnabled ( true ) ; org.springframework.beans.factory.support.ManagedMap . merge ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { new ManagedMap ( ) . merge ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ManagedMap org.springframework.beans.factory.support.ManagedMap = new ManagedMap ( ) ; org.springframework.beans.factory.support.ManagedMap . put ( STRING , STRING ) ; org.springframework.beans.factory.support.ManagedMap . put ( STRING , STRING ) ; ManagedMap org.springframework.beans.factory.support.ManagedMap = new ManagedMap ( ) ; org.springframework.beans.factory.support.ManagedMap . setMergeEnabled ( true ) ; java.util.Map java.util.Map = ( java.util.Map ) org.springframework.beans.factory.support.ManagedMap . merge ( org.springframework.beans.factory.support.ManagedMap ) ; assertEquals ( STRING , NUMBER , java.util.Map . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ManagedMap org.springframework.beans.factory.support.ManagedMap = new ManagedMap ( ) ; org.springframework.beans.factory.support.ManagedMap . put ( STRING , STRING ) ; org.springframework.beans.factory.support.ManagedMap . put ( STRING , STRING ) ; ManagedMap org.springframework.beans.factory.support.ManagedMap = new ManagedMap ( ) ; org.springframework.beans.factory.support.ManagedMap . put ( STRING , STRING ) ; org.springframework.beans.factory.support.ManagedMap . setMergeEnabled ( true ) ; java.util.Map java.util.Map = ( java.util.Map ) org.springframework.beans.factory.support.ManagedMap . merge ( org.springframework.beans.factory.support.ManagedMap ) ; assertEquals ( STRING , NUMBER , java.util.Map . int ( ) ) ; assertEquals ( STRING , STRING , java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
