<METHOD_START> private void ( Message < T > org.springframework.messaging.support.Message<T> ) { Assert . notNull ( org.springframework.messaging.support.Message<T> , STRING ) ; this . T = org.springframework.messaging.support.Message<T> . getPayload ( ) ; this . org.springframework.messaging.support.Message<T> = org.springframework.messaging.support.Message<T> ; this . org.springframework.messaging.support.MessageHeaderAccessor = new MessageHeaderAccessor ( org.springframework.messaging.support.Message<T> ) ; }  <METHOD_END>
<METHOD_START> private void ( T T , MessageHeaderAccessor org.springframework.messaging.support.MessageHeaderAccessor ) { Assert . notNull ( T , STRING ) ; Assert . notNull ( org.springframework.messaging.support.MessageHeaderAccessor , STRING ) ; this . T = T ; this . org.springframework.messaging.support.Message<T> = null ; this . org.springframework.messaging.support.MessageHeaderAccessor = org.springframework.messaging.support.MessageHeaderAccessor ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( MessageHeaderAccessor org.springframework.messaging.support.MessageHeaderAccessor ) { Assert . notNull ( org.springframework.messaging.support.MessageHeaderAccessor , STRING ) ; this . org.springframework.messaging.support.MessageHeaderAccessor = org.springframework.messaging.support.MessageHeaderAccessor ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . org.springframework.messaging.support.MessageHeaderAccessor . setHeader ( java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . org.springframework.messaging.support.MessageHeaderAccessor . setHeaderIfAbsent ( java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( java.lang.String ... java.lang.String[] ) { this . org.springframework.messaging.support.MessageHeaderAccessor . removeHeaders ( java.lang.String[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( java.lang.String java.lang.String ) { this . org.springframework.messaging.support.MessageHeaderAccessor . removeHeader ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . org.springframework.messaging.support.MessageHeaderAccessor . copyHeaders ( java.util.Map<java.lang.String,> ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . org.springframework.messaging.support.MessageHeaderAccessor . copyHeadersIfAbsent ( java.util.Map<java.lang.String,> ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( MessageChannel org.springframework.messaging.support.MessageChannel ) { this . org.springframework.messaging.support.MessageHeaderAccessor . setReplyChannel ( org.springframework.messaging.support.MessageChannel ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( java.lang.String java.lang.String ) { this . org.springframework.messaging.support.MessageHeaderAccessor . setReplyChannelName ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( MessageChannel org.springframework.messaging.support.MessageChannel ) { this . org.springframework.messaging.support.MessageHeaderAccessor . setErrorChannel ( org.springframework.messaging.support.MessageChannel ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( java.lang.String java.lang.String ) { this . org.springframework.messaging.support.MessageHeaderAccessor . setErrorChannelName ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.messaging.support.Message<T> < T > org.springframework.messaging.support.Message<T> ( ) { if ( this . org.springframework.messaging.support.Message<T> != null && ! this . org.springframework.messaging.support.MessageHeaderAccessor . isModified ( ) ) { return this . org.springframework.messaging.support.Message<T> ; } MessageHeaders org.springframework.messaging.support.MessageHeaders = this . org.springframework.messaging.support.MessageHeaderAccessor . toMessageHeaders ( ) ; if ( this . T instanceof java.lang.Throwable ) { return ( Message < T > ) new ErrorMessage ( ( java.lang.Throwable ) this . T , org.springframework.messaging.support.MessageHeaders ) ; } else { return new GenericMessage <> ( this . T , org.springframework.messaging.support.MessageHeaders ) ; } }  <METHOD_END>
<METHOD_START> public static < T > org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( Message < T > org.springframework.messaging.support.Message<T> ) { return new org.springframework.messaging.support.MessageBuilder <> ( org.springframework.messaging.support.Message<T> ) ; }  <METHOD_END>
<METHOD_START> public static < T > org.springframework.messaging.support.MessageBuilder<T> < T > org.springframework.messaging.support.MessageBuilder<T> ( T T ) { return new org.springframework.messaging.support.MessageBuilder <> ( T , new MessageHeaderAccessor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > org.springframework.messaging.support.Message<T> < T > org.springframework.messaging.support.Message<T> ( T T , MessageHeaders org.springframework.messaging.support.MessageHeaders ) { Assert . notNull ( T , STRING ) ; Assert . notNull ( org.springframework.messaging.support.MessageHeaders , STRING ) ; if ( T instanceof java.lang.Throwable ) { return ( Message < T > ) new ErrorMessage ( ( java.lang.Throwable ) T , org.springframework.messaging.support.MessageHeaders ) ; } else { return new GenericMessage <> ( T , org.springframework.messaging.support.MessageHeaders ) ; } }  <METHOD_END>
