<METHOD_START> protected void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { this . org.springframework.boot.web.servlet.TypeFilter = new AnnotationTypeFilter ( java.lang.Class<> ) ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> org.springframework.boot.web.servlet.TypeFilter org.springframework.boot.web.servlet.TypeFilter ( ) { return this . org.springframework.boot.web.servlet.TypeFilter ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.String [] java.lang.String[] = ( java.lang.String [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.String [] java.lang.String[] = ( java.lang.String [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; if ( java.lang.String[] . int > NUMBER ) { Assert . state ( java.lang.String[] . int == NUMBER , STRING ) ; return java.lang.String[] ; } return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> protected final java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; for ( AnnotationAttributes org.springframework.boot.web.servlet.AnnotationAttributes : ( AnnotationAttributes [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.boot.web.servlet.AnnotationAttributes . get ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.boot.web.servlet.AnnotationAttributes . get ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> void void ( ScannedGenericBeanDefinition org.springframework.boot.web.servlet.ScannedGenericBeanDefinition , BeanDefinitionRegistry org.springframework.boot.web.servlet.BeanDefinitionRegistry ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.web.servlet.ScannedGenericBeanDefinition . getMetadata ( ) . getAnnotationAttributes ( this . java.lang.Class<> . java.lang.String ( ) ) ; if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.boot.web.servlet.ScannedGenericBeanDefinition , org.springframework.boot.web.servlet.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ScannedGenericBeanDefinition org.springframework.boot.web.servlet.ScannedGenericBeanDefinition , BeanDefinitionRegistry org.springframework.boot.web.servlet.BeanDefinitionRegistry );  <METHOD_END>
