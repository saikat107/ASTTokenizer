<METHOD_START> public void ( CassandraQueryMethod org.springframework.data.cassandra.repository.query.CassandraQueryMethod , CassandraOperations org.springframework.data.cassandra.repository.query.CassandraOperations ) { Assert . notNull ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.repository.query.CassandraOperations , STRING ) ; this . org.springframework.data.cassandra.repository.query.CassandraQueryMethod = org.springframework.data.cassandra.repository.query.CassandraQueryMethod ; this . org.springframework.data.cassandra.repository.query.CassandraOperations = org.springframework.data.cassandra.repository.query.CassandraOperations ; this . org.springframework.data.cassandra.repository.query.EntityInstantiators = new EntityInstantiators ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.query.CassandraQueryMethod org.springframework.data.cassandra.repository.query.CassandraQueryMethod ( ) { return org.springframework.data.cassandra.repository.query.CassandraQueryMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor = new ConvertingParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraOperations . getConverter ( ) , new CassandraParametersParameterAccessor ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod , java.lang.Object[] ) ) ; ResultProcessor org.springframework.data.cassandra.repository.query.ResultProcessor = org.springframework.data.cassandra.repository.query.CassandraQueryMethod . getResultProcessor ( ) . withDynamicProjection ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; CassandraQueryExecution org.springframework.data.cassandra.repository.query.CassandraQueryExecution = org.springframework.data.cassandra.repository.query.CassandraQueryExecution ( java.lang.String , org.springframework.data.cassandra.repository.query.CassandraParameterAccessor , new ResultProcessingConverter ( org.springframework.data.cassandra.repository.query.ResultProcessor , org.springframework.data.cassandra.repository.query.CassandraOperations . getConverter ( ) . getMappingContext ( ) , org.springframework.data.cassandra.repository.query.EntityInstantiators ) ) ; org.springframework.data.cassandra.repository.query.AbstractCassandraQuery.CassandraReturnedType org.springframework.data.cassandra.repository.query.AbstractCassandraQuery.CassandraReturnedType = new org.springframework.data.cassandra.repository.query.AbstractCassandraQuery.CassandraReturnedType ( org.springframework.data.cassandra.repository.query.ResultProcessor . getReturnedType ( ) , org.springframework.data.cassandra.repository.query.CassandraOperations . getConverter ( ) . getCustomConversions ( ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ( org.springframework.data.cassandra.repository.query.AbstractCassandraQuery.CassandraReturnedType . boolean ( ) ? org.springframework.data.cassandra.repository.query.AbstractCassandraQuery.CassandraReturnedType . java.lang.Class<?> ( ) : org.springframework.data.cassandra.repository.query.AbstractCassandraQuery.CassandraReturnedType . java.lang.Class<?> ( ) ) ; return org.springframework.data.cassandra.repository.query.CassandraQueryExecution . execute ( java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.CassandraQueryExecution org.springframework.data.cassandra.repository.query.CassandraQueryExecution ( java.lang.String java.lang.String , CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor , Converter < java.lang.Object , java.lang.Object > org.springframework.data.cassandra.repository.query.Converter<java.lang.Object,java.lang.Object> ) { return new ResultProcessingExecution ( org.springframework.data.cassandra.repository.query.CassandraQueryExecution ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor , org.springframework.data.cassandra.repository.query.Converter<java.lang.Object,java.lang.Object> ) , org.springframework.data.cassandra.repository.query.Converter<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.repository.query.CassandraQueryExecution org.springframework.data.cassandra.repository.query.CassandraQueryExecution ( CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor , Converter < java.lang.Object , java.lang.Object > org.springframework.data.cassandra.repository.query.Converter<java.lang.Object,java.lang.Object> ) { if ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod . isCollectionQuery ( ) ) { return new CollectionExecution ( org.springframework.data.cassandra.repository.query.CassandraOperations ) ; } else if ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod . isResultSetQuery ( ) ) { return new ResultSetQuery ( org.springframework.data.cassandra.repository.query.CassandraOperations ) ; } else if ( org.springframework.data.cassandra.repository.query.CassandraQueryMethod . isStreamQuery ( ) ) { return new StreamExecution ( org.springframework.data.cassandra.repository.query.CassandraOperations , org.springframework.data.cassandra.repository.query.Converter<java.lang.Object,java.lang.Object> ) ; } else { return new SingleEntityExecution ( org.springframework.data.cassandra.repository.query.CassandraOperations ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public java.lang.Object java.lang.Object ( ResultSet org.springframework.data.cassandra.repository.query.ResultSet , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ; if ( ClassUtils . isAssignable ( java.util.SortedSet .class , java.lang.Class<> ) ) { java.util.Collection<java.lang.Object> = new java.util.TreeSet<java.lang.Object> <> ( ) ; } else if ( ClassUtils . isAssignable ( java.util.Set .class , java.lang.Class<> ) ) { java.util.Collection<java.lang.Object> = new java.util.HashSet<java.lang.Object> <> ( ) ; } else { java.util.Collection<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; } CassandraConverter org.springframework.data.cassandra.repository.query.CassandraConverter = org.springframework.data.cassandra.repository.query.CassandraOperations . getConverter ( ) ; for ( Row org.springframework.data.cassandra.repository.query.Row : org.springframework.data.cassandra.repository.query.ResultSet ) { java.util.Collection<java.lang.Object> . boolean ( org.springframework.data.cassandra.repository.query.CassandraConverter . read ( java.lang.Class<> , org.springframework.data.cassandra.repository.query.Row ) ) ; } return java.util.Collection<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public java.lang.Object java.lang.Object ( ResultSet org.springframework.data.cassandra.repository.query.ResultSet , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Object java.lang.Object = ( org.springframework.data.cassandra.repository.query.ResultSet . isExhausted ( ) ? null : org.springframework.data.cassandra.repository.query.CassandraOperations . getConverter ( ) . read ( java.lang.Class<> , org.springframework.data.cassandra.repository.query.ResultSet . one ( ) ) ) ; void ( org.springframework.data.cassandra.repository.query.ResultSet ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( ResultSet org.springframework.data.cassandra.repository.query.ResultSet ) { if ( org.springframework.data.cassandra.repository.query.Logger . isWarnEnabled ( ) && ! org.springframework.data.cassandra.repository.query.ResultSet . isExhausted ( ) ) { int int = NUMBER ; while ( org.springframework.data.cassandra.repository.query.ResultSet . one ( ) != null ) { int ++ ; } org.springframework.data.cassandra.repository.query.Logger . warn ( STRING , int , int == NUMBER ? STRING : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected void void ( java.util.Iterator<org.springframework.data.cassandra.repository.query.Row> < Row > java.util.Iterator<org.springframework.data.cassandra.repository.query.Row> ) { if ( org.springframework.data.cassandra.repository.query.Logger . isWarnEnabled ( ) && java.util.Iterator<org.springframework.data.cassandra.repository.query.Row> . hasNext ( ) ) { int int = NUMBER ; while ( java.util.Iterator<org.springframework.data.cassandra.repository.query.Row> . hasNext ( ) ) { int ++ ; java.util.Iterator<org.springframework.data.cassandra.repository.query.Row> . next ( ) ; } org.springframework.data.cassandra.repository.query.Logger . warn ( STRING , int , int == NUMBER ? STRING : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public void void ( ConversionService org.springframework.data.cassandra.repository.query.ConversionService ) { throw new java.lang.UnsupportedOperationException ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public org.springframework.data.cassandra.repository.query.ConversionService org.springframework.data.cassandra.repository.query.ConversionService ( ) { return org.springframework.data.cassandra.repository.query.CassandraOperations . getConverter ( ) . getConversionService ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor );  <METHOD_END>
<METHOD_START> boolean boolean ( ) { if ( ! org.springframework.data.cassandra.repository.query.ReturnedType . isProjecting ( ) ) { return false ; } if ( ClassUtils . isAssignable ( java.util.Map .class , org.springframework.data.cassandra.repository.query.ReturnedType . getReturnedType ( ) ) ) { return false ; } if ( org.springframework.data.cassandra.repository.query.CustomConversions . hasCustomWriteTarget ( org.springframework.data.cassandra.repository.query.ReturnedType . getReturnedType ( ) ) ) { return false ; } return ! org.springframework.data.cassandra.repository.query.CustomConversions . isSimpleType ( org.springframework.data.cassandra.repository.query.ReturnedType . getReturnedType ( ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.cassandra.repository.query.ReturnedType . getDomainType ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.cassandra.repository.query.ReturnedType . getReturnedType ( ) ; }  <METHOD_END>
