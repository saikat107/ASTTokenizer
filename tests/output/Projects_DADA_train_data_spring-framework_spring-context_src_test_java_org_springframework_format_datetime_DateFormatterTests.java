<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER ) ; assertThat ( org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.format.datetime.DateFormatter . parse ( STRING , java.util.Locale . java.util.Locale ) , is ( java.util.Date ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( STRING ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER ) ; assertThat ( org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.format.datetime.DateFormatter . parse ( STRING , java.util.Locale . java.util.Locale ) , is ( java.util.Date ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; org.springframework.format.datetime.DateFormatter . setStyle ( java.text.DateFormat . int ) ; java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER ) ; assertThat ( org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.format.datetime.DateFormatter . parse ( STRING , java.util.Locale . java.util.Locale ) , is ( java.util.Date ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; org.springframework.format.datetime.DateFormatter . setStyle ( java.text.DateFormat . int ) ; java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER ) ; assertThat ( org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.format.datetime.DateFormatter . parse ( STRING , java.util.Locale . java.util.Locale ) , is ( java.util.Date ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; org.springframework.format.datetime.DateFormatter . setStyle ( java.text.DateFormat . int ) ; java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER ) ; assertThat ( org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.format.datetime.DateFormatter . parse ( STRING , java.util.Locale . java.util.Locale ) , is ( java.util.Date ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; org.springframework.format.datetime.DateFormatter . setStyle ( java.text.DateFormat . int ) ; java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER ) ; assertThat ( org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.format.datetime.DateFormatter . parse ( STRING , java.util.Locale . java.util.Locale ) , is ( java.util.Date ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; org.springframework.format.datetime.DateFormatter . setIso ( ISO . DATE ) ; java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.format.datetime.DateFormatter . parse ( STRING , java.util.Locale . java.util.Locale ) , is ( java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; org.springframework.format.datetime.DateFormatter . setIso ( ISO . TIME ) ; java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.format.datetime.DateFormatter . parse ( STRING , java.util.Locale . java.util.Locale ) , is ( java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; org.springframework.format.datetime.DateFormatter . setIso ( ISO . DATE_TIME ) ; java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.format.datetime.DateFormatter . parse ( STRING , java.util.Locale . java.util.Locale ) , is ( java.util.Date ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING } ; for ( java.lang.String java.lang.String : java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = java.lang.String + java.lang.String ; if ( ! java.lang.String . boolean ( STRING ) ) { java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; if ( java.lang.String . boolean ( STRING ) ) { java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; } void ( java.lang.String , java.util.Locale . java.util.Locale , java.util.Date ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.util.Locale java.util.Locale , java.util.Date java.util.Date ) throws java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; org.springframework.format.datetime.DateFormatter . setStylePattern ( java.lang.String ) ; DateTimeFormatter org.springframework.format.datetime.DateTimeFormatter = DateTimeFormat . forStyle ( java.lang.String ) . withLocale ( java.util.Locale ) . withZone ( DateTimeZone . UTC ) ; java.lang.String java.lang.String = org.springframework.format.datetime.DateTimeFormatter . print ( java.util.Date . long ( ) ) ; assertThat ( STRING + java.lang.String , org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( STRING + java.lang.String , org.springframework.format.datetime.DateFormatter . parse ( java.lang.String , java.util.Locale ) , is ( equalTo ( java.util.Date ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setStylePattern ( STRING ) ; org.springframework.format.datetime.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.format.datetime.ExpectedException . expectMessage ( STRING ) ; org.springframework.format.datetime.DateFormatter . parse ( STRING , java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateFormatter org.springframework.format.datetime.DateFormatter = new DateFormatter ( ) ; org.springframework.format.datetime.DateFormatter . setTimeZone ( java.util.TimeZone ) ; org.springframework.format.datetime.DateFormatter . setStyle ( java.text.DateFormat . int ) ; org.springframework.format.datetime.DateFormatter . setStylePattern ( STRING ) ; org.springframework.format.datetime.DateFormatter . setIso ( ISO . DATE_TIME ) ; org.springframework.format.datetime.DateFormatter . setPattern ( STRING ) ; java.util.Date java.util.Date = java.util.Date ( NUMBER , java.util.Calendar . int , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; assertThat ( STRING , org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; org.springframework.format.datetime.DateFormatter . setPattern ( STRING ) ; assertThat ( STRING , org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; org.springframework.format.datetime.DateFormatter . setIso ( ISO . NONE ) ; assertThat ( STRING , org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; org.springframework.format.datetime.DateFormatter . setStylePattern ( STRING ) ; assertThat ( STRING , org.springframework.format.datetime.DateFormatter . print ( java.util.Date , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Date java.util.Date ( int int , int int , int int ) { return java.util.Date ( int , int , int , NUMBER , NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private java.util.Date java.util.Date ( int int , int int , int int , int int , int int , int int , int int ) { java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.Locale . java.util.Locale ) ; java.util.Calendar . void ( java.util.TimeZone ) ; java.util.Calendar . void ( ) ; java.util.Calendar . void ( java.util.Calendar . int , int ) ; java.util.Calendar . void ( java.util.Calendar . int , int ) ; java.util.Calendar . void ( java.util.Calendar . int , int ) ; java.util.Calendar . void ( java.util.Calendar . int , int ) ; java.util.Calendar . void ( java.util.Calendar . int , int ) ; java.util.Calendar . void ( java.util.Calendar . int , int ) ; java.util.Calendar . void ( java.util.Calendar . int , int ) ; return java.util.Calendar . java.util.Date ( ) ; }  <METHOD_END>
