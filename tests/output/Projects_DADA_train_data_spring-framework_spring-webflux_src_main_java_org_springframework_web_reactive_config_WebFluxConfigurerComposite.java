<METHOD_START> public void void ( java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> < WebFluxConfigurer > java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> ) { if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> ) ) { this . java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> . addAll ( java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RequestedContentTypeResolverBuilder org.springframework.web.reactive.config.RequestedContentTypeResolverBuilder ) { this . java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> . forEach ( delegate -> delegate . configureContentTypeResolver ( builder ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CorsRegistry org.springframework.web.reactive.config.CorsRegistry ) { this . java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> . forEach ( delegate -> delegate . addCorsMappings ( registry ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PathMatchConfigurer org.springframework.web.reactive.config.PathMatchConfigurer ) { this . java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> . forEach ( delegate -> delegate . configurePathMatching ( configurer ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceHandlerRegistry org.springframework.web.reactive.config.ResourceHandlerRegistry ) { this . java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> . forEach ( delegate -> delegate . addResourceHandlers ( registry ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ArgumentResolverConfigurer org.springframework.web.reactive.config.ArgumentResolverConfigurer ) { this . java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> . forEach ( delegate -> delegate . configureArgumentResolvers ( configurer ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServerCodecConfigurer org.springframework.web.reactive.config.ServerCodecConfigurer ) { this . java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> . forEach ( delegate -> delegate . configureHttpMessageCodecs ( configurer ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FormatterRegistry org.springframework.web.reactive.config.FormatterRegistry ) { this . java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> . forEach ( delegate -> delegate . addFormatters ( registry ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.config.Validator> < Validator > java.util.Optional<org.springframework.web.reactive.config.Validator> ( ) { return java.util.Optional ( WebFluxConfigurer :: getValidator , Validator .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.config.MessageCodesResolver> < MessageCodesResolver > java.util.Optional<org.springframework.web.reactive.config.MessageCodesResolver> ( ) { return java.util.Optional ( WebFluxConfigurer :: getMessageCodesResolver , MessageCodesResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.reactive.config.ViewResolverRegistry ) { this . java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> . forEach ( delegate -> delegate . configureViewResolvers ( registry ) ) ; }  <METHOD_END>
<METHOD_START> private < T > java.util.Optional<T> < T > java.util.Optional<T> ( java.util.function.Function<org.springframework.web.reactive.config.WebFluxConfigurer,java.util.Optional<T>> < WebFluxConfigurer , java.util.Optional<T> < T > > java.util.function.Function<org.springframework.web.reactive.config.WebFluxConfigurer,java.util.Optional<T>> , java.lang.Class<T> < T > java.lang.Class<T> ) { java.util.List<java.util.Optional<T>> < java.util.Optional<T> < T > > java.util.List<java.util.Optional<T>> = this . java.util.List<org.springframework.web.reactive.config.WebFluxConfigurer> . stream ( ) . map ( java.util.function.Function<org.springframework.web.reactive.config.WebFluxConfigurer,java.util.Optional<T>> ) . filter ( java.util.Optional :: isPresent ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; if ( java.util.List<java.util.Optional<T>> . boolean ( ) ) { return java.util.Optional . java.util.Optional<T> ( ) ; } else if ( java.util.List<java.util.Optional<T>> . int ( ) == NUMBER ) { return java.util.List<java.util.Optional<T>> . java.util.Optional<T> ( NUMBER ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<T> . java.lang.String ( ) + STRING ) ; } }  <METHOD_END>
