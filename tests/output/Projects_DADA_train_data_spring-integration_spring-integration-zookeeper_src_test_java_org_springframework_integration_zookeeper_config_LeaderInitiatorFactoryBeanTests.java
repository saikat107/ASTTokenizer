<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.integration.zookeeper.config.CuratorFramework = createNewClient ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { if ( org.springframework.integration.zookeeper.config.CuratorFramework != null ) { org.springframework.integration.zookeeper.config.CuratorFramework . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.integration.zookeeper.config.LeaderInitiatorFactoryBeanTests.Config . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( this . org.springframework.integration.zookeeper.config.LeaderInitiatorFactoryBeanTests.Config . java.util.List<org.springframework.integration.zookeeper.config.AbstractLeaderEvent> . get ( NUMBER ) , instanceOf ( OnGrantedEvent .class ) ) ; this . org.springframework.integration.zookeeper.config.LeaderInitiator . stop ( ) ; assertTrue ( this . org.springframework.integration.zookeeper.config.LeaderInitiatorFactoryBeanTests.Config . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( this . org.springframework.integration.zookeeper.config.LeaderInitiatorFactoryBeanTests.Config . java.util.List<org.springframework.integration.zookeeper.config.AbstractLeaderEvent> . get ( NUMBER ) , instanceOf ( OnRevokedEvent .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; LeaderInitiator org.springframework.integration.zookeeper.config.LeaderInitiator = new LeaderInitiator ( org.springframework.integration.zookeeper.config.CuratorFramework , new DefaultCandidate ( ) ) ; org.springframework.integration.zookeeper.config.LeaderInitiator . setLeaderEventPublisher ( new DefaultLeaderEventPublisher ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.zookeeper.config.Context , java.lang.String java.lang.String ) { try { throw new java.lang.RuntimeException ( STRING ) ; } finally { java.util.concurrent.CountDownLatch . void ( ) ; } } } ) ; org.springframework.integration.zookeeper.config.LeaderInitiator . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( org.springframework.integration.zookeeper.config.LeaderInitiator . getContext ( ) . isLeader ( ) ) ; org.springframework.integration.zookeeper.config.LeaderInitiator . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.zookeeper.config.Context , java.lang.String java.lang.String ) { try { throw new java.lang.RuntimeException ( STRING ) ; } finally { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.zookeeper.config.LeaderInitiatorFactoryBean org.springframework.integration.zookeeper.config.LeaderInitiatorFactoryBean ( CuratorFramework org.springframework.integration.zookeeper.config.CuratorFramework ) { return new LeaderInitiatorFactoryBean ( ) . setClient ( org.springframework.integration.zookeeper.config.CuratorFramework ) . setPath ( STRING ) . setRole ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.zookeeper.config.CuratorFramework org.springframework.integration.zookeeper.config.CuratorFramework ( ) { return org.springframework.integration.zookeeper.config.LeaderInitiatorFactoryBeanTests . org.springframework.integration.zookeeper.config.CuratorFramework ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.zookeeper.config.ApplicationListener<?> < ? > org.springframework.integration.zookeeper.config.ApplicationListener<?> ( ) { return event -> { events . add ( ( AbstractLeaderEvent ) event ) ; latch1 . countDown ( ) ; latch2 . countDown ( ) ; } ; }  <METHOD_END>
