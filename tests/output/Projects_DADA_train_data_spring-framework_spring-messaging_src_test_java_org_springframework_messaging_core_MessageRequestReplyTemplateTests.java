<METHOD_START> @ Before public void void ( ) { this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate = new org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate ( ) ; this . org.springframework.messaging.core.TestMessagePostProcessor = new TestMessagePostProcessor ( ) ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . setDefaultDestination ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; Message < ? > org.springframework.messaging.core.Message<?> = this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . sendAndReceive ( org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertSame ( org.springframework.messaging.core.Message<> , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> ) ; assertSame ( org.springframework.messaging.core.Message<> , org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.Object > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; Message < ? > org.springframework.messaging.core.Message<?> = this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . sendAndReceive ( STRING , org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertSame ( org.springframework.messaging.core.Message<> , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> ) ; assertSame ( org.springframework.messaging.core.Message<> , org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . setDefaultDestination ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . convertSendAndReceive ( STRING , java.lang.String .class ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertSame ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertSame ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . convertSendAndReceive ( STRING , STRING , java.lang.String .class ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertSame ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertSame ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . convertSendAndReceive ( STRING , STRING , this . java.util.Map<java.lang.String,java.lang.Object> , java.lang.String .class ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertSame ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertSame ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . setDefaultDestination ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . convertSendAndReceive ( STRING , java.lang.String .class , this . org.springframework.messaging.core.TestMessagePostProcessor ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertSame ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertSame ( STRING , java.lang.String ) ; assertSame ( this . org.springframework.messaging.core.TestMessagePostProcessor . getMessage ( ) , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . convertSendAndReceive ( STRING , STRING , java.lang.String .class , this . org.springframework.messaging.core.TestMessagePostProcessor ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertSame ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertSame ( STRING , java.lang.String ) ; assertSame ( this . org.springframework.messaging.core.TestMessagePostProcessor . getMessage ( ) , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . convertSendAndReceive ( STRING , STRING , this . java.util.Map<java.lang.String,java.lang.Object> , java.lang.String .class , this . org.springframework.messaging.core.TestMessagePostProcessor ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertSame ( STRING , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertSame ( STRING , java.lang.String ) ; assertSame ( this . org.springframework.messaging.core.TestMessagePostProcessor . getMessage ( ) , this . org.springframework.messaging.core.MessageRequestReplyTemplateTests.TestMessagingTemplate . org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.messaging.core.Message<?> ) { this . org.springframework.messaging.core.Message<?> = org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , Message < ? > org.springframework.messaging.core.Message<?> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this . org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( java.lang.String java.lang.String , Message < ? > org.springframework.messaging.core.Message<?> ) { this . java.lang.String = java.lang.String ; this . org.springframework.messaging.core.Message<?> = org.springframework.messaging.core.Message<> ; return this . org.springframework.messaging.core.Message<> ; }  <METHOD_END>
