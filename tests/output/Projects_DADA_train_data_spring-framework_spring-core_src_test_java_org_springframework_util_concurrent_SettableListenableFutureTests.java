<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.util.concurrent.ExecutionException , java.lang.InterruptedException { java.lang.String java.lang.String = STRING ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( java.lang.String ) ) ; assertThat ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . get ( ) , equalTo ( java.lang.String ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( STRING ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.util.concurrent.ExecutionException , java.lang.InterruptedException { java.lang.Throwable java.lang.Throwable = new java.lang.RuntimeException ( ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . setException ( java.lang.Throwable ) ) ; try { org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException . java.lang.Throwable ( ) , equalTo ( java.lang.Throwable ) ) ; } assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.util.concurrent.ExecutionException , java.lang.InterruptedException { java.lang.Throwable java.lang.Throwable = new java.lang.OutOfMemoryError ( ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . setException ( java.lang.Throwable ) ) ; try { org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException . java.lang.Throwable ( ) , equalTo ( java.lang.Throwable ) ) ; } assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; final java.lang.String [] java.lang.String[] = new java.lang.String [ NUMBER ] ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . addCallback ( new ListenableFutureCallback < java.lang.String > ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.lang.String[] [ NUMBER ] = java.lang.String ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( STRING ) ; } } ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( java.lang.String ) ; assertThat ( java.lang.String[] [ NUMBER ] , equalTo ( java.lang.String ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.lang.String[] [ NUMBER ] = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; final java.lang.String [] java.lang.String[] = new java.lang.String [ NUMBER ] ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . addCallback ( new ListenableFutureCallback < java.lang.String > ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.lang.String[] [ NUMBER ] = java.lang.String ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( STRING ) ; } } ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( java.lang.String ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , equalTo ( java.lang.String ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.lang.String[] [ NUMBER ] = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Throwable java.lang.Throwable = new java.lang.RuntimeException ( ) ; final java.lang.Throwable [] java.lang.Throwable[] = new java.lang.Throwable [ NUMBER ] ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . addCallback ( new ListenableFutureCallback < java.lang.String > ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) { fail ( STRING ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { java.lang.Throwable[] [ NUMBER ] = java.lang.Throwable ; } } ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . setException ( java.lang.Throwable ) ; assertThat ( java.lang.Throwable[] [ NUMBER ] , equalTo ( java.lang.Throwable ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { java.lang.Throwable[] [ NUMBER ] = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Throwable java.lang.Throwable = new java.lang.RuntimeException ( ) ; final java.lang.Throwable [] java.lang.Throwable[] = new java.lang.Throwable [ NUMBER ] ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . addCallback ( new ListenableFutureCallback < java.lang.String > ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) { fail ( STRING ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { java.lang.Throwable[] [ NUMBER ] = java.lang.Throwable ; } } ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . setException ( java.lang.Throwable ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . setException ( new java.lang.IllegalArgumentException ( ) ) ) ; assertThat ( java.lang.Throwable[] [ NUMBER ] , equalTo ( java.lang.Throwable ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { java.lang.Throwable[] [ NUMBER ] = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.util.concurrent.ExecutionException , java.lang.InterruptedException { org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( null ) ; assertNull ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . get ( ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.util.concurrent.ExecutionException , java.lang.InterruptedException { final java.lang.String java.lang.String = STRING ; new java.lang.Thread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( java.lang.String ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( java.lang.InterruptedException ) ; } } } ) . void ( ) ; java.lang.String java.lang.String = org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . get ( ) ; assertThat ( java.lang.String , equalTo ( java.lang.String ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( java.lang.String ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( java.lang.InterruptedException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.util.concurrent.ExecutionException , java.lang.InterruptedException { try { org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; fail ( STRING ) ; } catch ( java.util.concurrent.TimeoutException java.util.concurrent.TimeoutException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.util.concurrent.ExecutionException , java.lang.InterruptedException , java.util.concurrent.TimeoutException { final java.lang.String java.lang.String = STRING ; new java.lang.Thread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( java.lang.String ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( java.lang.InterruptedException ) ; } } } ) . void ( ) ; java.lang.String java.lang.String = org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( java.lang.String , equalTo ( java.lang.String ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( java.lang.String ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( java.lang.InterruptedException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . cancel ( true ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( STRING ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . cancel ( true ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture = new org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture ( ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture . cancel ( true ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture . boolean ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture = new org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture ( ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture . cancel ( false ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture . boolean ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFutureTests.InterruptibleSettableListenableFuture . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( STRING ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . cancel ( true ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . cancel ( true ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . setException ( new java.lang.RuntimeException ( ) ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . setException ( new java.lang.RuntimeException ( ) ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . cancel ( true ) ) ; assertFalse ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.util.concurrent.ExecutionException , java.lang.InterruptedException { org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . cancel ( true ) ; try { org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.CancellationException java.util.concurrent.CancellationException ) { } assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.util.concurrent.ExecutionException , java.util.concurrent.TimeoutException , java.lang.InterruptedException { new java.lang.Thread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . cancel ( true ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( java.lang.InterruptedException ) ; } } } ) . void ( ) ; try { org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; fail ( STRING ) ; } catch ( java.util.concurrent.CancellationException java.util.concurrent.CancellationException ) { } assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . cancel ( true ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( java.lang.InterruptedException ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { ListenableFutureCallback org.springframework.util.concurrent.ListenableFutureCallback = mock ( ListenableFutureCallback .class ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . addCallback ( org.springframework.util.concurrent.ListenableFutureCallback ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . cancel ( true ) ; verify ( org.springframework.util.concurrent.ListenableFutureCallback ) . onFailure ( any ( java.util.concurrent.CancellationException .class ) ) ; verifyNoMoreInteractions ( org.springframework.util.concurrent.ListenableFutureCallback ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . set ( STRING ) ; verifyNoMoreInteractions ( org.springframework.util.concurrent.ListenableFutureCallback ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { ListenableFutureCallback org.springframework.util.concurrent.ListenableFutureCallback = mock ( ListenableFutureCallback .class ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . addCallback ( org.springframework.util.concurrent.ListenableFutureCallback ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . cancel ( true ) ; verify ( org.springframework.util.concurrent.ListenableFutureCallback ) . onFailure ( any ( java.util.concurrent.CancellationException .class ) ) ; verifyNoMoreInteractions ( org.springframework.util.concurrent.ListenableFutureCallback ) ; org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . setException ( new java.lang.RuntimeException ( ) ) ; verifyNoMoreInteractions ( org.springframework.util.concurrent.ListenableFutureCallback ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isCancelled ( ) ) ; assertTrue ( org.springframework.util.concurrent.SettableListenableFuture<java.lang.String> . isDone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return boolean ; }  <METHOD_END>
