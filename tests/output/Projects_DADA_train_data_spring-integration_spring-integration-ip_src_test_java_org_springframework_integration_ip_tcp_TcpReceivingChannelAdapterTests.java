<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . afterPropertiesSet ( ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicReference<java.net.ServerSocket> < java.net.ServerSocket > java.util.concurrent.atomic.AtomicReference<java.net.ServerSocket> = new java.util.concurrent.atomic.AtomicReference<java.net.ServerSocket> < java.net.ServerSocket > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { try { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER , NUMBER ) ; java.util.concurrent.atomic.AtomicReference<java.net.ServerSocket> . void ( java.net.ServerSocket ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.net.Socket . void ( ) ; java.net.ServerSocket . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( ! java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { java.lang.Exception . void ( ) ; } } } } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , java.util.concurrent.atomic.AtomicReference<java.net.ServerSocket> . java.net.ServerSocket ( ) . int ( ) ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractClientConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . setSoTimeout ( java.lang.Integer . int ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractClientConnectionFactory ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setClientMode ( true ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setRetryInterval ( NUMBER ) ; ThreadPoolTaskScheduler org.springframework.integration.ip.tcp.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.ip.tcp.ThreadPoolTaskScheduler . setPoolSize ( NUMBER ) ; org.springframework.integration.ip.tcp.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setTaskScheduler ( org.springframework.integration.ip.tcp.ThreadPoolTaskScheduler ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . stop ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . start ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . stop ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . stop ( ) ; java.util.concurrent.atomic.AtomicReference<java.net.ServerSocket> . java.net.ServerSocket ( ) . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER , NUMBER ) ; java.util.concurrent.atomic.AtomicReference<java.net.ServerSocket> . void ( java.net.ServerSocket ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.net.Socket . void ( ) ; java.net.ServerSocket . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( ! java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { java.lang.Exception . void ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setSoTimeout ( NUMBER ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . getPort ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.net.Socket . java.io.OutputStream ( ) . void ( ( STRING + int + STRING ) . byte[] ( ) ) ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Set<java.lang.String> . boolean ( new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING + int ) ) ; } org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; TcpSendingMessageHandler org.springframework.integration.ip.tcp.TcpSendingMessageHandler = new TcpSendingMessageHandler ( ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; byte [] byte[] = new byte [ NUMBER ] ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; TcpSendingMessageHandler org.springframework.integration.ip.tcp.TcpSendingMessageHandler = new TcpSendingMessageHandler ( ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . setConnectionFactory ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . start ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . getPort ( ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; byte [] byte[] = new byte [ NUMBER ] ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSingleUse ( true ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; java.util.Set<java.lang.String> . boolean ( new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Set<java.lang.String> . boolean ( new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setSingleUse ( true ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . getPort ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; java.util.Set<java.lang.String> . boolean ( new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Set<java.lang.String> . boolean ( new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.InputStream java.io.InputStream , byte [] byte[] ) throws java.io.IOException { for ( int int = NUMBER ; int < byte[] . int ; int ++ ) { byte[] [ int ] = ( byte ) java.io.InputStream . int ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSingleUse ( true ) ; TcpSendingMessageHandler org.springframework.integration.ip.tcp.TcpSendingMessageHandler = new TcpSendingMessageHandler ( ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; byte [] byte[] = new byte [ NUMBER ] ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setSingleUse ( true ) ; TcpSendingMessageHandler org.springframework.integration.ip.tcp.TcpSendingMessageHandler = new TcpSendingMessageHandler ( ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . setConnectionFactory ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . start ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . getPort ( ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; byte [] byte[] = new byte [ NUMBER ] ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setSingleUse ( true ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setBacklog ( NUMBER ) ; TcpSendingMessageHandler org.springframework.integration.ip.tcp.TcpSendingMessageHandler = new TcpSendingMessageHandler ( ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . setConnectionFactory ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory ) ; java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . setTaskExecutor ( java.util.concurrent.Executor ) ; org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . start ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . getPort ( ) ; java.util.List<java.net.Socket> < java.net.Socket > java.util.List<java.net.Socket> = new java.util.LinkedList<java.net.Socket> < java.net.Socket > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; java.net.Socket . java.io.OutputStream ( ) . void ( ( STRING + int + STRING ) . byte[] ( ) ) ; java.util.List<java.net.Socket> . boolean ( java.net.Socket ) ; } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; } byte [] byte[] = new byte [ NUMBER ] ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { void ( java.util.List<java.net.Socket> . java.net.Socket ( NUMBER ) . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING + int + STRING , new java.lang.String ( byte[] ) ) ; } org.springframework.integration.ip.tcp.TcpNioServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; void ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) throws java.lang.Exception { org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSerializer ( new DefaultSerializer ( ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setDeserializer ( new DefaultDeserializer ( ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSingleUse ( false ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; TcpConnectionInterceptorFactoryChain org.springframework.integration.ip.tcp.TcpConnectionInterceptorFactoryChain = new TcpConnectionInterceptorFactoryChain ( ) ; org.springframework.integration.ip.tcp.TcpConnectionInterceptorFactoryChain . setInterceptors ( new TcpConnectionInterceptorFactory [] { newInterceptorFactory ( ) , newInterceptorFactory ( ) } ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setInterceptorFactoryChain ( org.springframework.integration.ip.tcp.TcpConnectionInterceptorFactoryChain ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSoTimeout ( NUMBER ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Set<java.lang.String> . boolean ( ( java.lang.String ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Set<java.lang.String> . boolean ( ( java.lang.String ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) throws java.lang.Exception { org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSerializer ( new DefaultSerializer ( ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setDeserializer ( new DefaultDeserializer ( ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSingleUse ( true ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSoTimeout ( NUMBER ) ; TcpConnectionInterceptorFactoryChain org.springframework.integration.ip.tcp.TcpConnectionInterceptorFactoryChain = new TcpConnectionInterceptorFactoryChain ( ) ; org.springframework.integration.ip.tcp.TcpConnectionInterceptorFactoryChain . setInterceptors ( new TcpConnectionInterceptorFactory [] { newInterceptorFactory ( ) , newInterceptorFactory ( ) } ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setInterceptorFactoryChain ( org.springframework.integration.ip.tcp.TcpConnectionInterceptorFactoryChain ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new java.util.HashSet<java.lang.Object> < java.lang.Object > ( ) ; java.util.Set<java.lang.Object> . boolean ( org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.Set<java.lang.Object> . boolean ( org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ; assertTrue ( java.util.Set<java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.Object> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) throws java.lang.Exception { org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSerializer ( new DefaultSerializer ( ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setDeserializer ( new DefaultDeserializer ( ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSingleUse ( true ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSoTimeout ( NUMBER ) ; TcpConnectionInterceptorFactoryChain org.springframework.integration.ip.tcp.TcpConnectionInterceptorFactoryChain = new TcpConnectionInterceptorFactoryChain ( ) ; org.springframework.integration.ip.tcp.TcpConnectionInterceptorFactoryChain . setInterceptors ( new TcpConnectionInterceptorFactory [] { newInterceptorFactory ( ) , newInterceptorFactory ( ) } ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setInterceptorFactoryChain ( org.springframework.integration.ip.tcp.TcpConnectionInterceptorFactoryChain ) ; TcpSendingMessageHandler org.springframework.integration.ip.tcp.TcpSendingMessageHandler = new TcpSendingMessageHandler ( ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . void ( NUMBER ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; new java.io.ObjectOutputStream ( java.net.Socket . java.io.OutputStream ( ) ) . void ( STRING ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.TcpSendingMessageHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; assertEquals ( STRING , new java.io.ObjectInputStream ( java.net.Socket . java.io.InputStream ( ) ) . java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; noopPublisher ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.ByteArrayCrLfSerializer ) ; TcpReceivingChannelAdapter org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter = new TcpReceivingChannelAdapter ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; SubscribableChannel org.springframework.integration.ip.tcp.SubscribableChannel = new DirectChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.tcp.SubscribableChannel ) ; ServiceActivatingHandler org.springframework.integration.ip.tcp.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.ip.tcp.TcpReceivingChannelAdapterTests.FailingService ( ) ) ; org.springframework.integration.ip.tcp.SubscribableChannel . subscribe ( org.springframework.integration.ip.tcp.ServiceActivatingHandler ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . setErrorChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , ( ( java.lang.Exception ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) . java.lang.Throwable ( ) . java.lang.String ( ) ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , ( ( java.lang.Exception ) org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) . java.lang.Throwable ( ) . java.lang.String ( ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( byte [] byte[] ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
