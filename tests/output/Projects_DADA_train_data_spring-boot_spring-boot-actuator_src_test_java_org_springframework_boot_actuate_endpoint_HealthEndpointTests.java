<METHOD_START> public void ( ) { super( org.springframework.boot.actuate.endpoint.HealthEndpointTests.Config .class , HealthEndpoint .class , STRING , false , STRING ); }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( getEndpointBean ( ) . invoke ( ) . getStatus ( ) ) . isEqualTo ( Status . UNKNOWN ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.HealthEndpoint org.springframework.boot.actuate.endpoint.HealthEndpoint ( HealthAggregator org.springframework.boot.actuate.endpoint.HealthAggregator , java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> < java.lang.String , HealthIndicator > java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> ) { return new HealthEndpoint ( org.springframework.boot.actuate.endpoint.HealthAggregator , java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.HealthIndicator> ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.HealthIndicator org.springframework.boot.actuate.endpoint.HealthIndicator ( ) { return new HealthIndicator ( ) { @ java.lang.Override public org.springframework.boot.actuate.endpoint.Health org.springframework.boot.actuate.endpoint.Health ( ) { return new Health . Health ( ) . status ( STRING ) . build ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.endpoint.Health org.springframework.boot.actuate.endpoint.Health ( ) { return new Health . Health ( ) . status ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.HealthAggregator org.springframework.boot.actuate.endpoint.HealthAggregator ( ) { return new OrderedHealthAggregator ( ) ; }  <METHOD_END>
