<METHOD_START> void ( java.lang.String java.lang.String ) { this( java.lang.String . byte[] ( java.nio.charset.Charset ) ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( byte [] byte[] ) { this( byte[] , NUMBER , byte[] . int ); }  <METHOD_END>
<METHOD_START> void ( byte [] byte[] , int int , int int ) { if ( int < NUMBER || int < NUMBER || ( int + int ) > byte[] . int ) { throw new java.lang.IndexOutOfBoundsException ( ) ; } this . byte[] = byte[] ; this . int = int ; this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ) { if ( this == org.springframework.boot.loader.jar.AsciiBytes ) { return true ; } if ( org.springframework.boot.loader.jar.AsciiBytes . int > this . int ) { return false ; } for ( int int = NUMBER ; int < org.springframework.boot.loader.jar.AsciiBytes . int ; int ++ ) { if ( this . byte[] [ int + this . int ] != org.springframework.boot.loader.jar.AsciiBytes . byte[] [ int + org.springframework.boot.loader.jar.AsciiBytes . int ] ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ) { if ( this == org.springframework.boot.loader.jar.AsciiBytes ) { return true ; } if ( org.springframework.boot.loader.jar.AsciiBytes . int > this . int ) { return false ; } for ( int int = NUMBER ; int < org.springframework.boot.loader.jar.AsciiBytes . int ; int ++ ) { if ( this . byte[] [ this . int + ( this . int - NUMBER ) - int ] != org.springframework.boot.loader.jar.AsciiBytes . byte[] [ org.springframework.boot.loader.jar.AsciiBytes . int + ( org.springframework.boot.loader.jar.AsciiBytes . int - NUMBER ) - int ] ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ( int int ) { return org.springframework.boot.loader.jar.AsciiBytes ( int , this . int ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ( int int , int int ) { int int = int - int ; if ( this . int + int > this . byte[] . int ) { throw new java.lang.IndexOutOfBoundsException ( ) ; } return new org.springframework.boot.loader.jar.AsciiBytes ( this . byte[] , this . int + int , int ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ( java.lang.String java.lang.String ) { if ( java.lang.String == null || java.lang.String . boolean ( ) ) { return this ; } return org.springframework.boot.loader.jar.AsciiBytes ( java.lang.String . byte[] ( java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ( org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ) { if ( org.springframework.boot.loader.jar.AsciiBytes == null || org.springframework.boot.loader.jar.AsciiBytes . int ( ) == NUMBER ) { return this ; } return org.springframework.boot.loader.jar.AsciiBytes ( org.springframework.boot.loader.jar.AsciiBytes . byte[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ( byte [] byte[] ) { if ( byte[] == null || byte[] . int == NUMBER ) { return this ; } byte [] byte[] = new byte [ this . int + byte[] . int ] ; java.lang.System . void ( this . byte[] , this . int , byte[] , NUMBER , this . int ) ; java.lang.System . void ( byte[] , NUMBER , byte[] , this . int , byte[] . int ) ; return new org.springframework.boot.loader.jar.AsciiBytes ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( this . java.lang.String == null ) { this . java.lang.String = new java.lang.String ( this . byte[] , this . int , this . int , java.nio.charset.Charset ) ; } return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = this . int ; if ( int == NUMBER && this . byte[] . int > NUMBER ) { for ( int int = this . int ; int < this . int + this . int ; int ++ ) { int int = this . byte[] [ int ] ; if ( int < NUMBER ) { int = int & NUMBER ; int int ; int int = NUMBER ; if ( int < NUMBER ) { int = NUMBER ; int += NUMBER << NUMBER ; } else if ( int < NUMBER ) { int = NUMBER ; int += ( NUMBER << NUMBER ) + ( NUMBER << NUMBER ) ; } else { int = NUMBER ; int += ( NUMBER << NUMBER ) + ( NUMBER << NUMBER ) + ( NUMBER << NUMBER ) ; } for ( int int = NUMBER ; int < int ; int ++ ) { int = ( int << NUMBER ) + ( this . byte[] [ ++ int ] & NUMBER ) ; } int -= int ; } if ( int <= NUMBER ) { int = NUMBER * int + int ; } else { int = NUMBER * int + ( ( int >> NUMBER ) + NUMBER ) ; int = NUMBER * int + ( ( int & NUMBER ) + NUMBER ) ; } } this . int = int ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return false ; } if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( org.springframework.boot.loader.jar.AsciiBytes .class ) ) { org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = ( org.springframework.boot.loader.jar.AsciiBytes ) java.lang.Object ; if ( this . int == org.springframework.boot.loader.jar.AsciiBytes . int ) { for ( int int = NUMBER ; int < this . int ; int ++ ) { if ( this . byte[] [ this . int + int ] != org.springframework.boot.loader.jar.AsciiBytes . byte[] [ org.springframework.boot.loader.jar.AsciiBytes . int + int ] ) { return false ; } } return true ; } } return false ; }  <METHOD_END>
<METHOD_START> static java.lang.String java.lang.String ( byte [] byte[] ) { return new java.lang.String ( byte[] , java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> public static int int ( java.lang.String java.lang.String ) { return java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> public static int int ( int int , java.lang.String java.lang.String ) { for ( int int = NUMBER ; int < java.lang.String . int ( ) ; int ++ ) { int = NUMBER * int + java.lang.String . char ( int ) ; } return int ; }  <METHOD_END>
