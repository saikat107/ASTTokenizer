<METHOD_START> public void ( ) { super(); java.util.Date = new java.util.Date ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( TriggerContext org.springframework.integration.test.util.TriggerContext ) { if ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) ) { this . java.util.concurrent.CountDownLatch . void ( ) ; return null ; } return this . java.util.Date ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ( ( java.util.Date == null ) ? NUMBER : java.util.Date . int ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( java.lang.Class<? extends org.springframework.integration.test.util.OnlyOnceTrigger> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.integration.test.util.OnlyOnceTrigger org.springframework.integration.test.util.OnlyOnceTrigger = ( org.springframework.integration.test.util.OnlyOnceTrigger ) java.lang.Object ; if ( java.util.Date == null ) { if ( org.springframework.integration.test.util.OnlyOnceTrigger . java.util.Date != null ) { return false ; } } else if ( ! java.util.Date . boolean ( org.springframework.integration.test.util.OnlyOnceTrigger . java.util.Date ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { try { if ( ! this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { throw new java.lang.RuntimeException ( STRING ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( STRING ) ; } }  <METHOD_END>
