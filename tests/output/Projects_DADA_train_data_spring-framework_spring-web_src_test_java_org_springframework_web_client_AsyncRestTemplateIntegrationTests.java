<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> . get ( ) ; assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; assertFalse ( STRING , org.springframework.web.client.ResponseEntity<java.lang.String> . getHeaders ( ) . isEmpty ( ) ) ; assertEquals ( STRING , textContentType , org.springframework.web.client.ResponseEntity<java.lang.String> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , HttpStatus . OK , org.springframework.web.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class , STRING ) ; java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> . get ( ) ; java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < ResponseEntity < java.lang.String > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class , STRING ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> . addCallback ( new ListenableFutureCallback < ResponseEntity < java.lang.String > > ( ) { @ java.lang.Override public void void ( ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> ) { assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; assertFalse ( STRING , org.springframework.web.client.ResponseEntity<java.lang.String> . getHeaders ( ) . isEmpty ( ) ) ; assertEquals ( STRING , textContentType , org.springframework.web.client.ResponseEntity<java.lang.String> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , HttpStatus . OK , org.springframework.web.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> ) { assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; assertFalse ( STRING , org.springframework.web.client.ResponseEntity<java.lang.String> . getHeaders ( ) . isEmpty ( ) ) ; assertEquals ( STRING , textContentType , org.springframework.web.client.ResponseEntity<java.lang.String> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , HttpStatus . OK , org.springframework.web.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < ResponseEntity < java.lang.String > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class , STRING ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> . addCallback ( ( entity ) -> { assertEquals ( STRING , helloWorld , entity . getBody ( ) ) ; assertFalse ( STRING , entity . getHeaders ( ) . isEmpty ( ) ) ; assertEquals ( STRING , textContentType , entity . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , HttpStatus . OK , entity . getStatusCode ( ) ) ; } , ex -> fail ( ex . getMessage ( ) ) ) ; void ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class ) ; ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> . get ( ) ; assertNull ( STRING , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<byte[]>> < ResponseEntity < byte [] > > java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<byte[]>> = org.springframework.web.client.AsyncRestTemplate . getForEntity ( baseUrl + STRING , byte [] .class ) ; ResponseEntity < byte [] > org.springframework.web.client.ResponseEntity<byte[]> = java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<byte[]>> . get ( ) ; assertArrayEquals ( STRING , helloWorld . getBytes ( STRING ) , org.springframework.web.client.ResponseEntity<byte[]> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class ) ; ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> . get ( ) ; assertEquals ( STRING , HttpStatus . NO_CONTENT , org.springframework.web.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertNull ( STRING , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class ) ; ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> . get ( ) ; assertEquals ( STRING , HttpStatus . NOT_MODIFIED , org.springframework.web.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertNull ( STRING , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Future<org.springframework.web.client.HttpHeaders> < HttpHeaders > java.util.concurrent.Future<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.AsyncRestTemplate . headForHeaders ( baseUrl + STRING ) ; HttpHeaders org.springframework.web.client.HttpHeaders = java.util.concurrent.Future<org.springframework.web.client.HttpHeaders> . get ( ) ; assertTrue ( STRING , org.springframework.web.client.HttpHeaders . containsKey ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.AsyncRestTemplate . headForHeaders ( baseUrl + STRING ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> . addCallback ( new ListenableFutureCallback < HttpHeaders > ( ) { @ java.lang.Override public void void ( HttpHeaders org.springframework.web.client.HttpHeaders ) { assertTrue ( STRING , org.springframework.web.client.HttpHeaders . containsKey ( STRING ) ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpHeaders org.springframework.web.client.HttpHeaders ) { assertTrue ( STRING , org.springframework.web.client.HttpHeaders . containsKey ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < HttpHeaders > org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.AsyncRestTemplate . headForHeaders ( baseUrl + STRING ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> . addCallback ( result -> assertTrue ( STRING , result . containsKey ( STRING ) ) , ex -> fail ( ex . getMessage ( ) ) ) ; void ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.HttpHeaders> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld , org.springframework.web.client.HttpHeaders ) ; java.util.concurrent.Future<java.net.URI> < java.net.URI > java.util.concurrent.Future<java.net.URI> = org.springframework.web.client.AsyncRestTemplate . postForLocation ( baseUrl + STRING , org.springframework.web.client.HttpEntity<java.lang.String> , STRING ) ; java.net.URI java.net.URI = java.util.concurrent.Future<java.net.URI> . java.net.URI ( ) ; assertEquals ( STRING , new java.net.URI ( baseUrl + STRING ) , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld , org.springframework.web.client.HttpHeaders ) ; final java.net.URI java.net.URI = new java.net.URI ( baseUrl + STRING ) ; ListenableFuture < java.net.URI > org.springframework.web.client.ListenableFuture<java.net.URI> = org.springframework.web.client.AsyncRestTemplate . postForLocation ( baseUrl + STRING , org.springframework.web.client.HttpEntity<java.lang.String> , STRING ) ; org.springframework.web.client.ListenableFuture<java.net.URI> . addCallback ( new ListenableFutureCallback < java.net.URI > ( ) { @ java.lang.Override public void void ( java.net.URI java.net.URI ) { assertEquals ( STRING , java.net.URI , java.net.URI ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<java.net.URI> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.net.URI java.net.URI ) { assertEquals ( STRING , java.net.URI , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld , org.springframework.web.client.HttpHeaders ) ; final java.net.URI java.net.URI = new java.net.URI ( baseUrl + STRING ) ; ListenableFuture < java.net.URI > org.springframework.web.client.ListenableFuture<java.net.URI> = org.springframework.web.client.AsyncRestTemplate . postForLocation ( baseUrl + STRING , org.springframework.web.client.HttpEntity<java.lang.String> , STRING ) ; org.springframework.web.client.ListenableFuture<java.net.URI> . addCallback ( result -> assertEquals ( STRING , expected , result ) , ex -> fail ( ex . getMessage ( ) ) ) ; void ( org.springframework.web.client.ListenableFuture<java.net.URI> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld ) ; java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . postForEntity ( baseUrl + STRING , org.springframework.web.client.HttpEntity<java.lang.String> , java.lang.String .class , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> . get ( ) ; assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld ) ; ListenableFuture < ResponseEntity < java.lang.String > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . postForEntity ( baseUrl + STRING , org.springframework.web.client.HttpEntity<java.lang.String> , java.lang.String .class , STRING ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> . addCallback ( new ListenableFutureCallback < ResponseEntity < java.lang.String > > ( ) { @ java.lang.Override public void void ( ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> ) { assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> ) { assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld ) ; ListenableFuture < ResponseEntity < java.lang.String > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . postForEntity ( baseUrl + STRING , org.springframework.web.client.HttpEntity<java.lang.String> , java.lang.String .class , STRING ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> . addCallback ( result -> assertEquals ( STRING , helloWorld , result . getBody ( ) ) , ex -> fail ( ex . getMessage ( ) ) ) ; void ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld ) ; java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.web.client.AsyncRestTemplate . put ( baseUrl + STRING , org.springframework.web.client.HttpEntity<java.lang.String> , STRING ) ; java.util.concurrent.Future<> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld ) ; ListenableFuture < ? > org.springframework.web.client.ListenableFuture<?> = org.springframework.web.client.AsyncRestTemplate . put ( baseUrl + STRING , org.springframework.web.client.HttpEntity<java.lang.String> , STRING ) ; org.springframework.web.client.ListenableFuture<> . addCallback ( new ListenableFutureCallback < java.lang.Object > ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { assertNull ( java.lang.Object ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.web.client.AsyncRestTemplate . delete ( new java.net.URI ( baseUrl + STRING ) ) ; java.util.concurrent.Future<> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < ? > org.springframework.web.client.ListenableFuture<?> = org.springframework.web.client.AsyncRestTemplate . delete ( new java.net.URI ( baseUrl + STRING ) ) ; org.springframework.web.client.ListenableFuture<> . addCallback ( new ListenableFutureCallback < java.lang.Object > ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { assertNull ( java.lang.Object ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < ? > org.springframework.web.client.ListenableFuture<?> = org.springframework.web.client.AsyncRestTemplate . delete ( new java.net.URI ( baseUrl + STRING ) ) ; org.springframework.web.client.ListenableFuture<> . addCallback ( Assert :: assertNull , ex -> fail ( ex . getMessage ( ) ) ) ; void ( org.springframework.web.client.ListenableFuture<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final HttpClientErrorException [] org.springframework.web.client.HttpClientErrorException[] = new HttpClientErrorException [ NUMBER ] ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; ListenableFuture < ? > org.springframework.web.client.ListenableFuture<?> = org.springframework.web.client.AsyncRestTemplate . execute ( baseUrl + STRING , HttpMethod . GET , null , null ) ; org.springframework.web.client.ListenableFuture<> . addCallback ( new ListenableFutureCallback < java.lang.Object > ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { fail ( STRING ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable instanceof HttpClientErrorException ) ; org.springframework.web.client.HttpClientErrorException[] [ NUMBER ] = ( HttpClientErrorException ) java.lang.Throwable ; java.util.concurrent.CountDownLatch . void ( ) ; } } ) ; try { org.springframework.web.client.ListenableFuture<> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { java.lang.Throwable java.lang.Throwable = java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ; assertTrue ( java.lang.Throwable instanceof HttpClientErrorException ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertSame ( org.springframework.web.client.HttpClientErrorException[] [ NUMBER ] , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable instanceof HttpClientErrorException ) ; org.springframework.web.client.HttpClientErrorException[] [ NUMBER ] = ( HttpClientErrorException ) java.lang.Throwable ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> = org.springframework.web.client.AsyncRestTemplate . execute ( baseUrl + STRING , HttpMethod . GET , null , null ) ; java.util.concurrent.Future<> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertTrue ( java.util.concurrent.ExecutionException . java.lang.Throwable ( ) instanceof HttpClientErrorException ) ; HttpClientErrorException org.springframework.web.client.HttpClientErrorException = ( HttpClientErrorException ) java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.client.HttpClientErrorException . getStatusCode ( ) ) ; assertNotNull ( org.springframework.web.client.HttpClientErrorException . getStatusText ( ) ) ; assertNotNull ( org.springframework.web.client.HttpClientErrorException . getResponseBodyAsString ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < ? > org.springframework.web.client.ListenableFuture<?> = org.springframework.web.client.AsyncRestTemplate . execute ( baseUrl + STRING , HttpMethod . GET , null , null ) ; org.springframework.web.client.ListenableFuture<> . addCallback ( new ListenableFutureCallback < java.lang.Object > ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { fail ( STRING ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable instanceof HttpClientErrorException ) ; HttpClientErrorException org.springframework.web.client.HttpClientErrorException = ( HttpClientErrorException ) java.lang.Throwable ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.client.HttpClientErrorException . getStatusCode ( ) ) ; assertNotNull ( org.springframework.web.client.HttpClientErrorException . getStatusText ( ) ) ; assertNotNull ( org.springframework.web.client.HttpClientErrorException . getResponseBodyAsString ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable instanceof HttpClientErrorException ) ; HttpClientErrorException org.springframework.web.client.HttpClientErrorException = ( HttpClientErrorException ) java.lang.Throwable ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.client.HttpClientErrorException . getStatusCode ( ) ) ; assertNotNull ( org.springframework.web.client.HttpClientErrorException . getStatusText ( ) ) ; assertNotNull ( org.springframework.web.client.HttpClientErrorException . getResponseBodyAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < ? > org.springframework.web.client.ListenableFuture<?> = org.springframework.web.client.AsyncRestTemplate . execute ( baseUrl + STRING , HttpMethod . GET , null , null ) ; org.springframework.web.client.ListenableFuture<> . addCallback ( result -> fail ( STRING ) , ex -> { assertTrue ( ex instanceof HttpClientErrorException ) ; HttpClientErrorException hcex = ( HttpClientErrorException ) ex ; assertEquals ( HttpStatus . NOT_FOUND , hcex . getStatusCode ( ) ) ; assertNotNull ( hcex . getStatusText ( ) ) ; assertNotNull ( hcex . getResponseBodyAsString ( ) ) ; } ) ; void ( org.springframework.web.client.ListenableFuture<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { java.util.concurrent.Future<java.lang.Void> < java.lang.Void > java.util.concurrent.Future<java.lang.Void> = org.springframework.web.client.AsyncRestTemplate . execute ( baseUrl + STRING , HttpMethod . GET , null , null ) ; java.util.concurrent.Future<java.lang.Void> . java.lang.Void ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertTrue ( java.util.concurrent.ExecutionException . java.lang.Throwable ( ) instanceof HttpServerErrorException ) ; HttpServerErrorException org.springframework.web.client.HttpServerErrorException = ( HttpServerErrorException ) java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.web.client.HttpServerErrorException . getStatusCode ( ) ) ; assertNotNull ( org.springframework.web.client.HttpServerErrorException . getStatusText ( ) ) ; assertNotNull ( org.springframework.web.client.HttpServerErrorException . getResponseBodyAsString ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < java.lang.Void > org.springframework.web.client.ListenableFuture<java.lang.Void> = org.springframework.web.client.AsyncRestTemplate . execute ( baseUrl + STRING , HttpMethod . GET , null , null ) ; org.springframework.web.client.ListenableFuture<java.lang.Void> . addCallback ( new ListenableFutureCallback < java.lang.Void > ( ) { @ java.lang.Override public void void ( java.lang.Void java.lang.Void ) { fail ( STRING ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable instanceof HttpServerErrorException ) ; HttpServerErrorException org.springframework.web.client.HttpServerErrorException = ( HttpServerErrorException ) java.lang.Throwable ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.web.client.HttpServerErrorException . getStatusCode ( ) ) ; assertNotNull ( org.springframework.web.client.HttpServerErrorException . getStatusText ( ) ) ; assertNotNull ( org.springframework.web.client.HttpServerErrorException . getResponseBodyAsString ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<java.lang.Void> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Void java.lang.Void ) { fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable instanceof HttpServerErrorException ) ; HttpServerErrorException org.springframework.web.client.HttpServerErrorException = ( HttpServerErrorException ) java.lang.Throwable ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.web.client.HttpServerErrorException . getStatusCode ( ) ) ; assertNotNull ( org.springframework.web.client.HttpServerErrorException . getStatusText ( ) ) ; assertNotNull ( org.springframework.web.client.HttpServerErrorException . getResponseBodyAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < java.lang.Void > org.springframework.web.client.ListenableFuture<java.lang.Void> = org.springframework.web.client.AsyncRestTemplate . execute ( baseUrl + STRING , HttpMethod . GET , null , null ) ; org.springframework.web.client.ListenableFuture<java.lang.Void> . addCallback ( result -> fail ( STRING ) , ex -> { assertTrue ( ex instanceof HttpServerErrorException ) ; HttpServerErrorException hsex = ( HttpServerErrorException ) ex ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , hsex . getStatusCode ( ) ) ; assertNotNull ( hsex . getStatusText ( ) ) ; assertNotNull ( hsex . getResponseBodyAsString ( ) ) ; } ) ; void ( org.springframework.web.client.ListenableFuture<java.lang.Void> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.Future<java.util.Set<org.springframework.web.client.HttpMethod>> < java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > > java.util.concurrent.Future<java.util.Set<org.springframework.web.client.HttpMethod>> = org.springframework.web.client.AsyncRestTemplate . optionsForAllow ( new java.net.URI ( baseUrl + STRING ) ) ; java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.client.HttpMethod> = java.util.concurrent.Future<java.util.Set<org.springframework.web.client.HttpMethod>> . get ( ) ; assertEquals ( STRING , java.util.EnumSet . java.util.EnumSet ( HttpMethod . GET , HttpMethod . OPTIONS , HttpMethod . HEAD , HttpMethod . TRACE ) , java.util.Set<org.springframework.web.client.HttpMethod> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > > org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> = org.springframework.web.client.AsyncRestTemplate . optionsForAllow ( new java.net.URI ( baseUrl + STRING ) ) ; org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> . addCallback ( new ListenableFutureCallback < java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > > ( ) { @ java.lang.Override public void void ( java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.client.HttpMethod> ) { assertEquals ( STRING , java.util.EnumSet . java.util.EnumSet ( HttpMethod . GET , HttpMethod . OPTIONS , HttpMethod . HEAD , HttpMethod . TRACE ) , java.util.Set<org.springframework.web.client.HttpMethod> ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.client.HttpMethod> ) { assertEquals ( STRING , java.util.EnumSet . java.util.EnumSet ( HttpMethod . GET , HttpMethod . OPTIONS , HttpMethod . HEAD , HttpMethod . TRACE ) , java.util.Set<org.springframework.web.client.HttpMethod> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > > org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> = org.springframework.web.client.AsyncRestTemplate . optionsForAllow ( new java.net.URI ( baseUrl + STRING ) ) ; org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> . addCallback ( result -> assertEquals ( STRING , EnumSet . of ( HttpMethod . GET , HttpMethod . OPTIONS , HttpMethod . HEAD , HttpMethod . TRACE ) , result ) , ex -> fail ( ex . getMessage ( ) ) ) ; void ( org.springframework.web.client.ListenableFuture<java.util.Set<org.springframework.web.client.HttpMethod>> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; HttpEntity < ? > org.springframework.web.client.HttpEntity<?> = new HttpEntity ( org.springframework.web.client.HttpHeaders ) ; java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . exchange ( baseUrl + STRING , HttpMethod . GET , org.springframework.web.client.HttpEntity<> , java.lang.String .class , STRING ) ; ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.String>> . get ( ) ; assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; HttpEntity < ? > org.springframework.web.client.HttpEntity<?> = new HttpEntity ( org.springframework.web.client.HttpHeaders ) ; ListenableFuture < ResponseEntity < java.lang.String > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . exchange ( baseUrl + STRING , HttpMethod . GET , org.springframework.web.client.HttpEntity<> , java.lang.String .class , STRING ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> . addCallback ( new ListenableFutureCallback < ResponseEntity < java.lang.String > > ( ) { @ java.lang.Override public void void ( ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> ) { assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> ) { assertEquals ( STRING , helloWorld , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; HttpEntity < ? > org.springframework.web.client.HttpEntity<?> = new HttpEntity ( org.springframework.web.client.HttpHeaders ) ; ListenableFuture < ResponseEntity < java.lang.String > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . exchange ( baseUrl + STRING , HttpMethod . GET , org.springframework.web.client.HttpEntity<> , java.lang.String .class , STRING ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> . addCallback ( result -> assertEquals ( STRING , helloWorld , result . getBody ( ) ) , ex -> fail ( ex . getMessage ( ) ) ) ; void ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; org.springframework.web.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld , org.springframework.web.client.HttpHeaders ) ; java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.Void>> < ResponseEntity < java.lang.Void > > java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.Void>> = org.springframework.web.client.AsyncRestTemplate . exchange ( baseUrl + STRING , HttpMethod . POST , org.springframework.web.client.HttpEntity<java.lang.String> , java.lang.Void .class , STRING ) ; ResponseEntity < java.lang.Void > org.springframework.web.client.ResponseEntity<java.lang.Void> = java.util.concurrent.Future<org.springframework.web.client.ResponseEntity<java.lang.Void>> . get ( ) ; assertEquals ( STRING , new java.net.URI ( baseUrl + STRING ) , org.springframework.web.client.ResponseEntity<java.lang.Void> . getHeaders ( ) . getLocation ( ) ) ; assertFalse ( org.springframework.web.client.ResponseEntity<java.lang.Void> . hasBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; org.springframework.web.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld , org.springframework.web.client.HttpHeaders ) ; ListenableFuture < ResponseEntity < java.lang.Void > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.Void>> = org.springframework.web.client.AsyncRestTemplate . exchange ( baseUrl + STRING , HttpMethod . POST , org.springframework.web.client.HttpEntity<java.lang.String> , java.lang.Void .class , STRING ) ; final java.net.URI java.net.URI = new java.net.URI ( baseUrl + STRING ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.Void>> . addCallback ( new ListenableFutureCallback < ResponseEntity < java.lang.Void > > ( ) { @ java.lang.Override public void void ( ResponseEntity < java.lang.Void > org.springframework.web.client.ResponseEntity<java.lang.Void> ) { assertEquals ( STRING , java.net.URI , org.springframework.web.client.ResponseEntity<java.lang.Void> . getHeaders ( ) . getLocation ( ) ) ; assertFalse ( org.springframework.web.client.ResponseEntity<java.lang.Void> . hasBody ( ) ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } } ) ; void ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.Void>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResponseEntity < java.lang.Void > org.springframework.web.client.ResponseEntity<java.lang.Void> ) { assertEquals ( STRING , java.net.URI , org.springframework.web.client.ResponseEntity<java.lang.Void> . getHeaders ( ) . getLocation ( ) ) ; assertFalse ( org.springframework.web.client.ResponseEntity<java.lang.Void> . hasBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; org.springframework.web.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( helloWorld , org.springframework.web.client.HttpHeaders ) ; ListenableFuture < ResponseEntity < java.lang.Void > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.Void>> = org.springframework.web.client.AsyncRestTemplate . exchange ( baseUrl + STRING , HttpMethod . POST , org.springframework.web.client.HttpEntity<java.lang.String> , java.lang.Void .class , STRING ) ; final java.net.URI java.net.URI = new java.net.URI ( baseUrl + STRING ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.Void>> . addCallback ( result -> { assertEquals ( STRING , expected , result . getHeaders ( ) . getLocation ( ) ) ; assertFalse ( result . hasBody ( ) ) ; } , ex -> fail ( ex . getMessage ( ) ) ) ; void ( org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.Void>> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; Resource org.springframework.web.client.Resource = new ClassPathResource ( STRING ) ; org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , org.springframework.web.client.Resource ) ; HttpEntity < MultiValueMap < java.lang.String , java.lang.Object > > org.springframework.web.client.HttpEntity<org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object>> = new HttpEntity <> ( org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object> ) ; java.util.concurrent.Future<java.net.URI> < java.net.URI > java.util.concurrent.Future<java.net.URI> = org.springframework.web.client.AsyncRestTemplate . postForLocation ( baseUrl + STRING , org.springframework.web.client.HttpEntity<org.springframework.web.client.MultiValueMap<java.lang.String,java.lang.Object>> ) ; java.util.concurrent.Future<java.net.URI> . java.net.URI ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor = new org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor ( ) ; org.springframework.web.client.AsyncRestTemplate . setInterceptors ( java.util.Collections . java.util.List<org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor> ( org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor ) ) ; ListenableFuture < ResponseEntity < java.lang.String > > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> = org.springframework.web.client.AsyncRestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class ) ; org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor . org.springframework.web.client.ClientHttpResponse ) ; assertEquals ( HttpStatus . OK , org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor . org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) ; assertNull ( org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor . java.lang.Throwable ) ; assertEquals ( helloWorld , org.springframework.web.client.ListenableFuture<org.springframework.web.client.ResponseEntity<java.lang.String>> . get ( ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor = new org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor ( ) ; org.springframework.web.client.AsyncRestTemplate . setInterceptors ( java.util.Collections . java.util.List<org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor> ( org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor ) ) ; org.springframework.web.client.AsyncRestTemplate . getForEntity ( baseUrl + STRING , java.lang.String .class ) ; org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor . org.springframework.web.client.ClientHttpResponse ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor . org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) ; assertNull ( org.springframework.web.client.AsyncRestTemplateIntegrationTests.RequestInterceptor . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> private void void ( ListenableFuture < ? > org.springframework.web.client.ListenableFuture<?> ) { while ( ! org.springframework.web.client.ListenableFuture<> . isDone ( ) ) {		} }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ListenableFuture<org.springframework.web.client.ClientHttpResponse> < ClientHttpResponse > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ClientHttpResponse> ( HttpRequest org.springframework.web.client.HttpRequest , byte [] byte[] , AsyncClientHttpRequestExecution org.springframework.web.client.AsyncClientHttpRequestExecution ) throws java.io.IOException { ListenableFuture < ClientHttpResponse > org.springframework.web.client.ListenableFuture<org.springframework.web.client.ClientHttpResponse> = org.springframework.web.client.AsyncClientHttpRequestExecution . executeAsync ( org.springframework.web.client.HttpRequest , byte[] ) ; org.springframework.web.client.ListenableFuture<org.springframework.web.client.ClientHttpResponse> . addCallback ( resp -> { response = resp ; this . latch . countDown ( ) ; } , ex -> { exception = ex ; this . latch . countDown ( ) ; } ) ; return org.springframework.web.client.ListenableFuture<org.springframework.web.client.ClientHttpResponse> ; }  <METHOD_END>
