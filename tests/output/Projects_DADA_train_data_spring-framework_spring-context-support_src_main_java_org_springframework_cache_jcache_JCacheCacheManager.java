<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( CacheManager org.springframework.cache.jcache.CacheManager ) { this . javax.cache.CacheManager = org.springframework.cache.jcache.CacheManager ; }  <METHOD_END>
<METHOD_START> public void void ( javax . javax.cache . javax.cache javax.cache.CacheManager ) { this . javax.cache.CacheManager = javax.cache.CacheManager ; }  <METHOD_END>
<METHOD_START> public javax . javax.cache . javax.cache.CacheManager javax.cache.CacheManager ( ) { return this . javax.cache.CacheManager ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( javax.cache.CacheManager ( ) == null ) { void ( Caching . getCachingProvider ( ) . getCacheManager ( ) ) ; } super. afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<org.springframework.cache.jcache.Cache> < Cache > java.util.Collection<org.springframework.cache.jcache.Cache> ( ) { java.util.Collection<org.springframework.cache.jcache.Cache> < Cache > java.util.Collection<org.springframework.cache.jcache.Cache> = new java.util.LinkedHashSet<org.springframework.cache.jcache.Cache> <> ( ) ; for ( java.lang.String java.lang.String : javax.cache.CacheManager ( ) . getCacheNames ( ) ) { javax . javax.cache . javax.cache < java.lang.Object , java.lang.Object > jcache = javax.cache.CacheManager ( ) . getCache ( java.lang.String ) ; java.util.Collection<org.springframework.cache.jcache.Cache> . add ( new JCacheCache ( jcache , boolean ( ) ) ) ; } return java.util.Collection<org.springframework.cache.jcache.Cache> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.Cache org.springframework.cache.jcache.Cache ( java.lang.String java.lang.String ) { javax . javax.cache . javax.cache < java.lang.Object , java.lang.Object > jcache = javax.cache.CacheManager ( ) . getCache ( java.lang.String ) ; if ( jcache != null ) { return new JCacheCache ( jcache , boolean ( ) ) ; } return null ; }  <METHOD_END>
