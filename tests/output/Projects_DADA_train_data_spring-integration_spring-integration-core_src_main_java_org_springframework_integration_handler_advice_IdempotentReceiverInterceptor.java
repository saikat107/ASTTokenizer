<METHOD_START> public void ( MessageSelector org.springframework.integration.handler.advice.MessageSelector ) { Assert . notNull ( org.springframework.integration.handler.advice.MessageSelector , STRING ) ; this . org.springframework.integration.handler.advice.MessageSelector = org.springframework.integration.handler.advice.MessageSelector ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.integration.handler.advice.MessagingTemplate . setSendTimeout ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.handler.advice.MessageChannel ) { this . org.springframework.integration.handler.advice.MessageChannel = org.springframework.integration.handler.advice.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.handler.advice.BeanFactory ) throws org.springframework.integration.handler.advice.BeansException { this . org.springframework.integration.handler.advice.BeanFactory = org.springframework.integration.handler.advice.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.handler.advice.MessageBuilderFactory org.springframework.integration.handler.advice.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.handler.advice.BeanFactory != null ) { this . org.springframework.integration.handler.advice.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.handler.advice.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.handler.advice.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.integration.handler.advice.MethodInvocation , Message < ? > org.springframework.integration.handler.advice.Message<?> ) throws java.lang.Throwable { boolean boolean = this . org.springframework.integration.handler.advice.MessageSelector . accept ( org.springframework.integration.handler.advice.Message<> ) ; if ( ! boolean ) { boolean boolean = false ; if ( this . org.springframework.integration.handler.advice.MessageChannel != null ) { this . org.springframework.integration.handler.advice.MessagingTemplate . send ( this . org.springframework.integration.handler.advice.MessageChannel , org.springframework.integration.handler.advice.Message<> ) ; boolean = true ; } if ( this . boolean ) { throw new MessageRejectedException ( org.springframework.integration.handler.advice.Message<> , STRING + this + STRING + org.springframework.integration.handler.advice.Message<> ) ; } if ( ! boolean ) { org.springframework.integration.handler.advice.MethodInvocation . getArguments ( ) [ NUMBER ] = org.springframework.integration.handler.advice.MessageBuilderFactory ( ) . fromMessage ( org.springframework.integration.handler.advice.Message<> ) . setHeader ( IntegrationMessageHeaderAccessor . DUPLICATE_MESSAGE , true ) . build ( ) ; } else { return null ; } } return org.springframework.integration.handler.advice.MethodInvocation . proceed ( ) ; }  <METHOD_END>
