<METHOD_START> public void ( java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> < DeferredResultProcessingInterceptor > java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> ) { this . java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> = java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> ; }  <METHOD_END>
<METHOD_START> public void void ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , DeferredResult < ? > org.springframework.web.context.request.async.DeferredResult<?> ) throws java.lang.Exception { for ( DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor : this . java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> ) { org.springframework.web.context.request.async.DeferredResultProcessingInterceptor . beforeConcurrentHandling ( org.springframework.web.context.request.async.NativeWebRequest , org.springframework.web.context.request.async.DeferredResult<> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , DeferredResult < ? > org.springframework.web.context.request.async.DeferredResult<?> ) throws java.lang.Exception { for ( DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor : this . java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> ) { org.springframework.web.context.request.async.DeferredResultProcessingInterceptor . preProcess ( org.springframework.web.context.request.async.NativeWebRequest , org.springframework.web.context.request.async.DeferredResult<> ) ; this . int ++ ; } }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , DeferredResult < ? > org.springframework.web.context.request.async.DeferredResult<?> , java.lang.Object java.lang.Object ) { try { for ( int int = this . int ; int >= NUMBER ; int -- ) { this . java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> . get ( int ) . postProcess ( org.springframework.web.context.request.async.NativeWebRequest , org.springframework.web.context.request.async.DeferredResult<> , java.lang.Object ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { return java.lang.Throwable ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , DeferredResult < ? > org.springframework.web.context.request.async.DeferredResult<?> ) throws java.lang.Exception { for ( DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor : this . java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> ) { if ( org.springframework.web.context.request.async.DeferredResult<> . isSetOrExpired ( ) ) { return; } if ( ! org.springframework.web.context.request.async.DeferredResultProcessingInterceptor . handleTimeout ( org.springframework.web.context.request.async.NativeWebRequest , org.springframework.web.context.request.async.DeferredResult<> ) ) { break; } } }  <METHOD_END>
<METHOD_START> public void void ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , DeferredResult < ? > org.springframework.web.context.request.async.DeferredResult<?> ) { for ( int int = this . int ; int >= NUMBER ; int -- ) { try { this . java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> . get ( int ) . afterCompletion ( org.springframework.web.context.request.async.NativeWebRequest , org.springframework.web.context.request.async.DeferredResult<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.context.request.async.Log . error ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
