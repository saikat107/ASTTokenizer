<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.transformer.SyslogToMapTransformer . transformPayload ( java.lang.String . byte[] ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . FACILITY ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . SEVERITY ) ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . TIMESTAMP ) ; assertTrue ( java.lang.Object instanceof java.util.Date || java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . HOST ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . TAG ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . MESSAGE ) ) ; java.lang.String [] java.lang.String[] = { SyslogToMapTransformer . FACILITY , SyslogToMapTransformer . SEVERITY , SyslogToMapTransformer . TIMESTAMP , SyslogToMapTransformer . HOST , SyslogToMapTransformer . TAG , SyslogToMapTransformer . MESSAGE } ; java.lang.Object [] java.lang.Object[] = { NUMBER , NUMBER , java.lang.Object , STRING , STRING , STRING } ; void ( java.lang.String[] , java.lang.Object[] , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.transformer.SyslogToMapTransformer . transformPayload ( java.lang.String . byte[] ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( java.lang.String , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . UNDECODED ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.transformer.SyslogToMapTransformer . transformPayload ( java.lang.String . byte[] ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( java.lang.String , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . UNDECODED ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.transformer.SyslogToMapTransformer . transformPayload ( java.lang.String . byte[] ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . FACILITY ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . SEVERITY ) ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . TIMESTAMP ) ; assertTrue ( java.lang.Object instanceof java.util.Date || java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . HOST ) ) ; assertFalse ( java.util.Map<java.lang.String,> . boolean ( SyslogToMapTransformer . TAG ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . MESSAGE ) ) ; java.lang.String [] java.lang.String[] = { SyslogToMapTransformer . FACILITY , SyslogToMapTransformer . SEVERITY , SyslogToMapTransformer . TIMESTAMP , SyslogToMapTransformer . HOST , SyslogToMapTransformer . MESSAGE } ; java.lang.Object [] java.lang.Object[] = { NUMBER , NUMBER , java.lang.Object , STRING , STRING } ; void ( java.lang.String[] , java.lang.Object[] , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.transformer.SyslogToMapTransformer . transformPayload ( java.lang.String . byte[] ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . FACILITY ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . SEVERITY ) ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . TIMESTAMP ) ; assertTrue ( java.lang.Object instanceof java.util.Date || java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . HOST ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . TAG ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( SyslogToMapTransformer . MESSAGE ) ) ; java.lang.String [] java.lang.String[] = { SyslogToMapTransformer . FACILITY , SyslogToMapTransformer . SEVERITY , SyslogToMapTransformer . TIMESTAMP , SyslogToMapTransformer . HOST , SyslogToMapTransformer . TAG , SyslogToMapTransformer . MESSAGE } ; java.lang.Object [] java.lang.Object[] = { NUMBER , NUMBER , java.lang.Object , STRING , STRING , STRING } ; void ( java.lang.String[] , java.lang.Object[] , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String [] java.lang.String[] , java.lang.Object [] java.lang.Object[] , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { int int = NUMBER ; for ( java.util.Map.Entry<java.lang.String,?> < java.lang.String , ? > java.util.Map.Entry<java.lang.String,?> : java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) ) { assertEquals ( java.lang.String[] [ int ++ ] , java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) ) ; } int = NUMBER ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) ) { assertEquals ( java.lang.String[] [ int ++ ] , java.lang.String ) ; } int = NUMBER ; for ( java.lang.Object java.lang.Object : java.util.Map<java.lang.String,> . java.util.Collection<> ( ) ) { assertEquals ( java.lang.Object[] [ int ++ ] , java.lang.Object ) ; } }  <METHOD_END>
