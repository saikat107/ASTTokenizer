<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.io.IOException .class , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.io.IOException .class , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.io.IOException [] .class , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.io.IOException [] .class , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( int [] [] .class , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( int [] [] .class , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.lang.Integer . java.lang.Class<java.lang.Integer> , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.lang.Integer . java.lang.Class<java.lang.Integer> , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.lang.Byte . java.lang.Class<java.lang.Byte> , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.lang.Byte . java.lang.Class<java.lang.Byte> , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.lang.Character . java.lang.Class<java.lang.Character> , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.lang.Character . java.lang.Class<java.lang.Character> , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.lang.Short . java.lang.Class<java.lang.Short> , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.lang.Short . java.lang.Class<java.lang.Short> , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.lang.Long . java.lang.Class<java.lang.Long> , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.lang.Long . java.lang.Class<java.lang.Long> , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.lang.Float . java.lang.Class<java.lang.Float> , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.lang.Float . java.lang.Class<java.lang.Float> , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.lang.Double . java.lang.Class<java.lang.Double> , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.lang.Double . java.lang.Class<java.lang.Double> , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; void ( org.springframework.expression.spel.Expression ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> < java.lang.String > [] java.util.List<java.lang.String>[] = new java.util.List [] { new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) } ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String>[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String>[] ) ) ; int [] int[] = new int [] { NUMBER , NUMBER , NUMBER } ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( int[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( int[] ) ) ; java.lang.String java.lang.String = null ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ) ; java.lang.String = STRING ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( ) ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , java.lang.String .class ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new StandardEvaluationContext ( ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Object .class ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Object .class ) ; assertEquals ( null , java.lang.Object ) ; assertEquals ( null , java.lang.Object ) ; assertEquals ( null , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; double double = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Double . java.lang.Class<java.lang.Double> ) ; void ( org.springframework.expression.spel.Expression ) ; double double = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Double . java.lang.Class<java.lang.Double> ) ; assertEquals ( NUMBER , double , NUMBER ) ; assertEquals ( NUMBER , double , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List ) org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.util.List<> . java.lang.String ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; java.util.List<?> = ( java.util.List ) org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.util.List<> . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = null ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( NUMBER , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( NUMBER , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List ) org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.util.List<> . java.lang.String ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; java.util.List<?> = ( java.util.List ) org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.util.List<> . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; int int = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; void ( org.springframework.expression.spel.Expression ) ; int int = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( java.lang.Integer .class ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.expression.spel.Expression . getValue ( null , java.lang.Integer .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; long long = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Long . java.lang.Class<java.lang.Long> ) ; void ( org.springframework.expression.spel.Expression ) ; long long = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Long . java.lang.Class<java.lang.Long> ) ; assertEquals ( NUMBER , long ) ; assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( true , boolean ) ; assertTrue ( SpelCompiler . compile ( org.springframework.expression.spel.Expression ) ) ; boolean boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( true , boolean ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( false , boolean ) ; assertTrue ( SpelCompiler . compile ( org.springframework.expression.spel.Expression ) ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( false , boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; float float = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Float . java.lang.Class<java.lang.Float> ) ; void ( org.springframework.expression.spel.Expression ) ; float float = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Float . java.lang.Class<java.lang.Float> ) ; assertEquals ( NUMBER , float , NUMBER ) ; assertEquals ( NUMBER , float , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; SpelCompiler . compile ( org.springframework.expression.spel.Expression ) ; boolean boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( false , boolean ) ; assertEquals ( false , boolean ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; void ( org.springframework.expression.spel.Expression ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( true , boolean ) ; assertEquals ( true , boolean ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; void ( org.springframework.expression.spel.Expression ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( true , boolean ) ; assertEquals ( true , boolean ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; void ( org.springframework.expression.spel.Expression ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( true , boolean ) ; assertEquals ( true , boolean ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 = new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; void ( org.springframework.expression.spel.Expression ) ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( true , boolean ) ; assertEquals ( true , boolean ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 . boolean = true ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 . boolean = true ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 . boolean = false ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 . boolean = true ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( boolean ) ; boolean boolean = false ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( boolean ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) java.lang.Object ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; SpelCompiler . compile ( org.springframework.expression.spel.Expression ) ; boolean boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( false , boolean ) ; assertEquals ( false , boolean ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; SpelCompiler . compile ( org.springframework.expression.spel.Expression ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( false , boolean ) ; assertEquals ( false , boolean ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; SpelCompiler . compile ( org.springframework.expression.spel.Expression ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( false , boolean ) ; assertEquals ( false , boolean ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; SpelCompiler . compile ( org.springframework.expression.spel.Expression ) ; boolean = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertEquals ( true , boolean ) ; assertEquals ( true , boolean ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 = new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 . boolean = false ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 . boolean = false ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 . boolean = true ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 . boolean = false ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( boolean ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 . boolean = true ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 . boolean = true ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass4 , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; assertTrue ( boolean ) ; boolean boolean = true ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( boolean ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) java.lang.Object ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( ) ) ; boolean boolean = true ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( false , org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; boolean = false ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( true , org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; boolean boolean = true ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; void ( org.springframework.expression.spel.Expression ) ; boolean = false ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; boolean = true ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String java.lang.String = STRING ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String , java.lang.String .class ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( java.lang.String , java.lang.String .class ) ; assertEquals ( java.lang.String , java.lang.String ) ; assertEquals ( java.lang.String , java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; int int = ( java.lang.Integer ) org.springframework.expression.spel.Expression . getValue ( NUMBER ) ; assertEquals ( NUMBER , int ) ; void ( org.springframework.expression.spel.Expression ) ; int = ( java.lang.Integer ) org.springframework.expression.spel.Expression . getValue ( NUMBER ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String ... java.lang.String[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = null ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.DelegatingStringFormat .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Object [] .class ) ) ; ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . setEvaluationContext ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new java.lang.Object [] { STRING } ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.DelegatingStringFormat .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Object [] .class ) ) ; ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . setEvaluationContext ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new java.lang.Object [] { STRING } ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.DelegatingStringFormat .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Object [] .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . setEvaluationContext ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.expression.spel.SpelCompilationCoverageTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , java.lang.reflect.Method ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( 'b' , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( 'b' , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , STRING ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; java.lang.reflect.Method = java.lang.Math .class . java.lang.reflect.Method ( STRING , java.lang.Double . java.lang.Class<java.lang.Double> , java.lang.Double . java.lang.Class<java.lang.Double> ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , java.lang.reflect.Method ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) . toString ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new java.lang.Object [] { STRING } ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod .class . java.lang.reflect.Method ( STRING , java.lang.Object .class , java.lang.Object .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) . toString ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new java.lang.Object [] { STRING } ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod .class . java.lang.reflect.Method ( STRING , java.lang.Object .class , java.lang.Object .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) . toString ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new java.lang.Object [] { STRING } ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 .class . java.lang.reflect.Method ( STRING , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; int [] int[] = new int [] { NUMBER , NUMBER , NUMBER } ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , int[] ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Integer .class ) . toString ( ) ) ; assertFalse ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 .class . java.lang.reflect.Method ( STRING , java.lang.String [] .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 .class . java.lang.reflect.Method ( STRING , java.lang.Object [] .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 .class . java.lang.reflect.Method ( STRING , java.lang.String [] .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String [] .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 .class . java.lang.reflect.Method ( STRING , char [] .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 .class . java.lang.reflect.Method ( STRING , int [] .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 .class . java.lang.reflect.Method ( STRING , double [] .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 .class . java.lang.reflect.Method ( STRING , float [] .class ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new java.lang.String [] { STRING , STRING , STRING } ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new int [] { NUMBER , NUMBER , NUMBER } ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new double [] { NUMBER , NUMBER , NUMBER } ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new float [] { NUMBER , NUMBER , NUMBER } ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 ( ) ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 ( ) ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 ( ) ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 ( ) ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 ( ) ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.SomeCompareMethod2 ( ) ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertTrue ( ( ( SpelNodeImpl ) ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) ) . isCompilable ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.expression.spel.SpelCompilationCoverageTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String [] .class ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , java.lang.reflect.Method ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , STRING ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , NUMBER ) ; try { assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertTrue ( org.springframework.expression.spel.SpelEvaluationException . getCause ( ) instanceof java.lang.ClassCastException ) ; } org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , STRING ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( 'a' , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( 'a' , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , STRING ) ; assertEquals ( '1' , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , NUMBER ) ; try { assertEquals ( '4' , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertTrue ( org.springframework.expression.spel.SpelEvaluationException . getCause ( ) instanceof java.lang.ClassCastException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( java.lang.String ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 = new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 ( ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 . java.lang.String = null ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 . void ( ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 . java.lang.String = STRING ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 . void ( ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 . java.lang.String = null ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass7 ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Double java.lang.Double = NUMBER ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( java.lang.Double ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( java.lang.Double ) ) ; java.lang.Integer java.lang.Integer = NUMBER ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( java.lang.Integer ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( java.lang.Integer ) ) ; java.lang.Float java.lang.Float = NUMBER ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( java.lang.Float ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( java.lang.Float ) ) ; long long = NUMBER ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( long ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( long ) ) ; boolean boolean = true ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( boolean ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration = new SpelParserConfiguration ( SpelCompilerMode . MIXED , java.lang.ClassLoader . java.lang.ClassLoader ( ) ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , new java.lang.String ( STRING ) ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SpelCompilationCoverageTests.MyContext ( java.util.Map<java.lang.String,java.lang.String> ) ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . compileExpression ( ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( new java.lang.String ( STRING ) ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( java.util.List<java.lang.String> ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.Apple org.springframework.expression.spel.SpelCompilationCoverageTests.Apple = new org.springframework.expression.spel.SpelCompilationCoverageTests.Apple ( NUMBER ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.Apple org.springframework.expression.spel.SpelCompilationCoverageTests.Apple = new org.springframework.expression.spel.SpelCompilationCoverageTests.Apple ( NUMBER ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.Apple ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.Apple ) ; boolean boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertEquals ( org.springframework.expression.spel.SpelCompilationCoverageTests.Apple , org.springframework.expression.spel.SpelCompilationCoverageTests.Apple . java.lang.Object ) ; assertFalse ( boolean ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.Apple . void ( NUMBER ) ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertEquals ( org.springframework.expression.spel.SpelCompilationCoverageTests.Apple , org.springframework.expression.spel.SpelCompilationCoverageTests.Apple . java.lang.Object ) ; assertTrue ( boolean ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.Apple = new org.springframework.expression.spel.SpelCompilationCoverageTests.Apple ( NUMBER ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.Apple = new org.springframework.expression.spel.SpelCompilationCoverageTests.Apple ( NUMBER ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.Apple ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.Apple ) ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertFalse ( boolean ) ; assertEquals ( org.springframework.expression.spel.SpelCompilationCoverageTests.Apple , org.springframework.expression.spel.SpelCompilationCoverageTests.Apple . java.lang.Object ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.Apple . void ( NUMBER ) ; boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertTrue ( boolean ) ; assertEquals ( org.springframework.expression.spel.SpelCompilationCoverageTests.Apple , org.springframework.expression.spel.SpelCompilationCoverageTests.Apple . java.lang.Object ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( new java.lang.String ( STRING ) ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( java.util.List<java.lang.String> ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX = new org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ( ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX = new org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ( ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , java.lang.String java.lang.String , int int ) { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( java.lang.String ) ; assertEquals ( int , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( int , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , java.lang.String java.lang.String , float float ) { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( java.lang.String ) ; assertEquals ( float , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( float , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , java.lang.String java.lang.String , long long ) { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( java.lang.String ) ; assertEquals ( long , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( long , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , java.lang.String java.lang.String , double double ) { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( java.lang.String ) ; assertEquals ( double , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( double , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Greeter ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX = new org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ( ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX = new org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ( ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX = new org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX ( ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; void ( org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; org.springframework.expression.spel.Expression . getValue ( ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( - NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . IMMEDIATE , java.lang.Class<? extends org.springframework.expression.spel.SpelCompilationCoverageTests> ( ) . java.lang.ClassLoader ( ) ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.Person3 org.springframework.expression.spel.SpelCompilationCoverageTests.Person3 = new org.springframework.expression.spel.SpelCompilationCoverageTests.Person3 ( STRING , NUMBER ) ; SpelExpression org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new java.lang.Object [] { NUMBER } ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.Person3 ) ; org.springframework.expression.spel.SpelExpression . setEvaluationContext ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.SpelExpression ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) . toString ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) . toString ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( java.lang.String .class ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; java.lang.String java.lang.String = org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper .class . java.lang.String ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING + java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING + java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING + java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING + java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper . org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper . org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper . org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper . org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper . org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper . org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.Class<? extends org.springframework.expression.spel.SpelCompilationCoverageTests> ( ) . java.lang.String ( ) ; java.lang.String java.lang.String = STRING + java.lang.String + STRING ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , ( ( org.springframework.expression.spel.SpelCompilationCoverageTests.Obj ) org.springframework.expression.spel.Expression . getValue ( new java.lang.Object [] { STRING } ) ) . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , ( ( org.springframework.expression.spel.SpelCompilationCoverageTests.Obj ) org.springframework.expression.spel.Expression . getValue ( new java.lang.Object [] { STRING } ) ) . java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( java.lang.String + STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new int [] { NUMBER , NUMBER , NUMBER } , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new int [] { NUMBER , NUMBER , NUMBER } , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.Person org.springframework.expression.spel.SpelCompilationCoverageTests.Person = new org.springframework.expression.spel.SpelCompilationCoverageTests.Person ( NUMBER ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new java.lang.Object [] { org.springframework.expression.spel.SpelCompilationCoverageTests.Person . int ( ) } ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.Person ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . IMMEDIATE , java.lang.Class<? extends org.springframework.expression.spel.SpelCompilationCoverageTests> ( ) . java.lang.ClassLoader ( ) ) ) ; SpelExpression org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new java.lang.Object [] { org.springframework.expression.spel.SpelCompilationCoverageTests.Person . int ( ) } ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.Person ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; PersonInOtherPackage org.springframework.expression.spel.PersonInOtherPackage = new PersonInOtherPackage ( NUMBER ) ; org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new java.lang.Object [] { org.springframework.expression.spel.PersonInOtherPackage . getAge ( ) } ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.PersonInOtherPackage ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; assertTrue ( org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.SpelExpression = org.springframework.expression.spel.SpelExpressionParser . parseRaw ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( new java.lang.Object [] { org.springframework.expression.spel.PersonInOtherPackage . getAge ( ) } ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.PersonInOtherPackage ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; java.lang.String java.lang.String = STRING ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING + java.lang.String + STRING ) ; assertEquals ( java.lang.String , org.springframework.expression.spel.Expression . getValue ( ) . getClass ( ) . getName ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( java.lang.String , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass8 org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass8 = ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass8 ) java.lang.Object ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass8 . int ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass8 . java.lang.String ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass8 . double , NUMBER ) ; assertEquals ( true , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass8 . boolean ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING + java.lang.String + STRING ) ; assertEquals ( java.lang.String , org.springframework.expression.spel.Expression . getValue ( ) . getClass ( ) . getName ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( java.lang.String , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING + java.lang.String + STRING ) ; assertEquals ( java.lang.String , org.springframework.expression.spel.Expression . getValue ( ) . getClass ( ) . getName ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( java.lang.String , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass8 = ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass8 ) java.lang.Object ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass8 . int ) ; java.lang.String java.lang.String = STRING ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING + java.lang.String + STRING ) ; assertEquals ( java.lang.String , org.springframework.expression.spel.Expression . getValue ( ) . getClass ( ) . getName ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 = new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass10 . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 = new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . int ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . int ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . int ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . int ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 = new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . int ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . int ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . int ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . int ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.String .class ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; void ( org.springframework.expression.spel.Expression ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 = new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ( ) ; int [] int[] = new int [] { NUMBER , NUMBER , NUMBER } ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( int[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( int[] ) ) ; try { assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.lang.String[] ) ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertTrue ( org.springframework.expression.spel.SpelEvaluationException . getCause ( ) instanceof java.lang.ClassCastException ) ; } SpelCompiler . revertToInterpreted ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String[] ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String = STRING ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String = STRING ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.Object = STRING ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.String ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . void ( ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 . java.lang.Object = new java.lang.Integer ( NUMBER ) ; try { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass5 ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertTrue ( org.springframework.expression.spel.SpelEvaluationException . getCause ( ) instanceof java.lang.ClassCastException ) ; } org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( 'a' , org.springframework.expression.spel.Expression . getValue ( STRING ) ) ; void ( org.springframework.expression.spel.Expression ) ; try { org.springframework.expression.spel.Expression . getValue ( new java.lang.Integer ( NUMBER ) ) ; fail ( ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException ) { assertTrue ( org.springframework.expression.spel.SpelEvaluationException . getCause ( ) instanceof java.lang.ClassCastException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; int int = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; void ( org.springframework.expression.spel.Expression ) ; int int = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.String .class ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass1 ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.String .class ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( NUMBER , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; int int = org.springframework.expression.spel.Expression . getValue ( new java.lang.Integer ( NUMBER ) , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; void ( org.springframework.expression.spel.Expression ) ; int int = org.springframework.expression.spel.Expression . getValue ( new java.lang.Integer ( NUMBER ) , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; int int = org.springframework.expression.spel.Expression . getValue ( STRING , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; void ( org.springframework.expression.spel.Expression ) ; int int = org.springframework.expression.spel.Expression . getValue ( STRING , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; char char = org.springframework.expression.spel.Expression . getValue ( STRING , java.lang.Character . java.lang.Class<java.lang.Character> ) ; assertEquals ( 'c' , char ) ; void ( org.springframework.expression.spel.Expression ) ; char char = org.springframework.expression.spel.Expression . getValue ( STRING , java.lang.Character . java.lang.Class<java.lang.Character> ) ; assertEquals ( 'c' , char ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.Payload org.springframework.expression.spel.SpelCompilationCoverageTests.Payload = new org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) . toString ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) . toString ( ) ) ; org.springframework.expression.spel.SpelNodeImpl = org.springframework.expression.spel.SpelNodeImpl ( ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) . getClass ( ) . getName ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) . getClass ( ) . getName ( ) ) ; org.springframework.expression.spel.SpelNodeImpl = org.springframework.expression.spel.SpelNodeImpl ( ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) . getClass ( ) . getName ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) . getClass ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) . getClass ( ) . getName ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) . getClass ( ) . getName ( ) ) ; org.springframework.expression.spel.SpelNodeImpl = org.springframework.expression.spel.SpelNodeImpl ( ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.Expression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.lang.String> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.lang.String> ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 = new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SpelCompilationCoverageTests.HttpServlet3RequestFactory . org.springframework.expression.spel.SpelCompilationCoverageTests.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; java.lang.Number [] java.lang.Number[] = new java.lang.Number [] { NUMBER , NUMBER , NUMBER } ; int [] int[] = new int [] { NUMBER , NUMBER , NUMBER } ; double [] double[] = new double [] { NUMBER , NUMBER , NUMBER } ; long [] long[] = new long [] { NUMBER , NUMBER , NUMBER } ; short [] short[] = new short [] { ( short ) NUMBER , ( short ) NUMBER , ( short ) NUMBER } ; float [] float[] = new float [] { NUMBER , NUMBER , NUMBER } ; byte [] byte[] = new byte [] { ( byte ) NUMBER , ( byte ) NUMBER , ( byte ) NUMBER } ; char [] char[] = new char [] { 'a' , 'b' , 'c' } ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String[] ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.lang.Number[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.lang.Number[] ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( int[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( int[] ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( double[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( double[] ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( long[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( long[] ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( ( short ) NUMBER , org.springframework.expression.spel.Expression . getValue ( short[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( ( short ) NUMBER , org.springframework.expression.spel.Expression . getValue ( short[] ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( float[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( float[] ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( ( byte ) NUMBER , org.springframework.expression.spel.Expression . getValue ( byte[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( ( byte ) NUMBER , org.springframework.expression.spel.Expression . getValue ( byte[] ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( 'b' , org.springframework.expression.spel.Expression . getValue ( char[] ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( 'b' , org.springframework.expression.spel.Expression . getValue ( char[] ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String> ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.Integer> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.Integer> ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.lang.Integer> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.lang.Integer> ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 = new org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.TestClass6 ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.util.List<java.lang.String[]> < java.lang.String [] > java.util.List<java.lang.String[]> = new java.util.ArrayList<java.lang.String[]> <> ( ) ; java.util.List<java.lang.String[]> . boolean ( new java.lang.String [] { STRING , STRING , STRING } ) ; java.util.List<java.lang.String[]> . boolean ( new java.lang.String [] { STRING , STRING , STRING } ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String[]> ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String[]> ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String[]> ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String[]> ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.util.List<java.lang.Integer[]> < java.lang.Integer [] > java.util.List<java.lang.Integer[]> = new java.util.ArrayList<java.lang.Integer[]> <> ( ) ; java.util.List<java.lang.Integer[]> . boolean ( new java.lang.Integer [] { NUMBER , NUMBER , NUMBER } ) ; java.util.List<java.lang.Integer[]> . boolean ( new java.lang.Integer [] { NUMBER , NUMBER , NUMBER } ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.Integer[]> ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.Integer[]> ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.Integer[]> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.Integer[]> ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.util.List<java.lang.String> < java.lang.String > [] java.util.List<java.lang.String>[] = new java.util.ArrayList [ NUMBER ] ; java.util.List<java.lang.String>[] [ NUMBER ] = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String>[] [ NUMBER ] . boolean ( STRING ) ; java.util.List<java.lang.String>[] [ NUMBER ] . boolean ( STRING ) ; java.util.List<java.lang.String>[] [ NUMBER ] . boolean ( STRING ) ; java.util.List<java.lang.String>[] [ NUMBER ] = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String>[] [ NUMBER ] . boolean ( STRING ) ; java.util.List<java.lang.String>[] [ NUMBER ] . boolean ( STRING ) ; java.util.List<java.lang.String>[] [ NUMBER ] . boolean ( STRING ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String>[] ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String>[] ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String>[] ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.lang.String>[] ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.lang.String [] [] java.lang.String[][] = new java.lang.String [] [] { new java.lang.String [] { STRING , STRING , STRING } , new java.lang.String [] { STRING , STRING , STRING } } ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.lang.String[][] ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.lang.String[][] ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.lang.String[][] ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.lang.String[][] ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; int [] [] int[][] = new int [] [] { new int [] { NUMBER , NUMBER , NUMBER } , new int [] { NUMBER , NUMBER , NUMBER } } ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( int[][] ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( int[][] ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( int[][] ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( int[][] ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.List<java.util.List<java.lang.String>> = new java.util.ArrayList<java.util.List<java.lang.String>> <> ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.util.List<java.lang.String>> . boolean ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.util.List<java.lang.String>> . boolean ( java.util.List<java.lang.String> ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.util.List<java.lang.String>> ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.util.List<java.lang.String>> ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.util.List<java.lang.String>> ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.List<java.util.List<java.lang.String>> ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>> <> ( ) ; java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.List<java.lang.String> ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.util.Map<java.lang.String,int[]> < java.lang.String , int [] > java.util.Map<java.lang.String,int[]> = new java.util.HashMap<java.lang.String,int[]> <> ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelCompilationCoverageTests.CompilableMapAccessor ( ) ) ; java.util.Map<java.lang.String,int[]> . int[] ( STRING , new int [] { NUMBER , NUMBER , NUMBER } ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,int[]> ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,int[]> ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,int[]> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,int[]> ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.util.Map<java.lang.String,int[]> ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.util.Map<java.lang.String,int[]> ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.util.Map<java.lang.String,int[]> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.util.Map<java.lang.String,int[]> ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.util.Map<java.lang.String,int[]> ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.util.Map<java.lang.String,int[]> ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > [] java.util.Map<java.lang.String,java.lang.String>[] = new java.util.Map [ NUMBER ] ; java.util.Map<java.lang.String,java.lang.String>[] [ NUMBER ] = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String>[] [ NUMBER ] . java.lang.String ( STRING , STRING ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.lang.String>[] ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.lang.String>[] ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.lang.String>[] ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.String ( org.springframework.expression.spel.Expression . getValue ( java.util.Map<java.lang.String,java.lang.String>[] ) ) ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.FooObject ( ) ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.FooString ( ) ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.Payload org.springframework.expression.spel.SpelCompilationCoverageTests.Payload = new org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ( ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelNodeImpl ( ) . getExitDescriptor ( ) ) ; Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) ; SpelExpression org.springframework.expression.spel.SpelExpression = ( SpelExpression ) org.springframework.expression.spel.Expression ; Ternary org.springframework.expression.spel.Ternary = ( Ternary ) org.springframework.expression.spel.SpelExpression . getAST ( ) ; OpLT org.springframework.expression.spel.OpLT = ( OpLT ) org.springframework.expression.spel.Ternary . getChild ( NUMBER ) ; CompoundExpression org.springframework.expression.spel.CompoundExpression = ( CompoundExpression ) org.springframework.expression.spel.OpLT . getLeftOperand ( ) ; java.lang.String java.lang.String = org.springframework.expression.spel.CompoundExpression . getExitDescriptor ( ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , org.springframework.expression.spel.OpLT . getExitDescriptor ( ) ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) ; assertEquals ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload , java.lang.Object ) ; assertEquals ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload , java.lang.Object ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.Payload . org.springframework.expression.spel.SpelCompilationCoverageTests.Two[] [ NUMBER ] . org.springframework.expression.spel.SpelCompilationCoverageTests.Three . double = NUMBER ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2Holder org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2Holder = new org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2Holder ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.SpelCompilationCoverageTests.MyAccessor ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2Holder ) ; assertEquals ( STRING , java.lang.Object ) ; void ( org.springframework.expression.spel.Expression ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2Holder ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) , java.lang.Boolean .class ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper <> ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertFalse ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertTrue ( org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.GenericMessageTestHelper2 <> ( NUMBER ) , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration = new SpelParserConfiguration ( SpelCompilerMode . IMMEDIATE , java.lang.Class<? extends org.springframework.expression.spel.SpelCompilationCoverageTests> ( ) . java.lang.ClassLoader ( ) ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage = new org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage ( ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.MyMessage ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration = new SpelParserConfiguration ( SpelCompilerMode . IMMEDIATE , null ) ; Expression org.springframework.expression.spel.Expression ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , null ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new int [] { NUMBER , NUMBER , NUMBER } ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration = new SpelParserConfiguration ( SpelCompilerMode . IMMEDIATE , null ) ; Expression org.springframework.expression.spel.Expression ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; assertEquals ( null , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( null , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , null ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; org.springframework.expression.spel.Expression = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) . parseExpression ( STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new int [] { NUMBER , NUMBER , NUMBER } ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , new org.springframework.expression.spel.SpelCompilationCoverageTests.Foo ( ) , java.lang.String .class ) ) ; void ( org.springframework.expression.spel.Expression ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.SpelNodeImpl org.springframework.expression.spel.SpelNodeImpl ( ) { SpelExpression org.springframework.expression.spel.SpelExpression = ( SpelExpression ) org.springframework.expression.spel.Expression ; SpelNode org.springframework.expression.spel.SpelNode = org.springframework.expression.spel.SpelExpression . getAST ( ) ; return ( SpelNodeImpl ) org.springframework.expression.spel.SpelNode ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( java.lang.Object instanceof java.util.List ) { java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; for ( java.lang.Object java.lang.Object : java.util.List<> ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } else if ( java.lang.Object instanceof java.lang.Object [] ) { java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) java.lang.Object ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } else if ( java.lang.Object instanceof int [] ) { int [] int[] = ( int [] ) java.lang.Object ; for ( int int : int[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( int ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } else { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object . java.lang.String ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( Expression org.springframework.expression.spel.Expression ) { assertTrue ( SpelCompiler . compile ( org.springframework.expression.spel.Expression ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Expression org.springframework.expression.spel.Expression ) { assertFalse ( SpelCompiler . compile ( org.springframework.expression.spel.Expression ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.Expression org.springframework.expression.spel.Expression ( java.lang.String java.lang.String ) { return parser . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( Expression org.springframework.expression.spel.Expression ) { try { java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; fail ( STRING + java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> private void void ( Expression org.springframework.expression.spel.Expression ) { try { java.lang.reflect.Field java.lang.reflect.Field = SpelExpression .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.Object java.lang.Object = java.lang.reflect.Field . java.lang.Object ( org.springframework.expression.spel.Expression ) ; assertNotNull ( java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( java.lang.Exception . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> org.springframework.expression.spel.SpelCompilationCoverageTests.MessageHeaders org.springframework.expression.spel.SpelCompilationCoverageTests.MessageHeaders ( )  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) java.util.List java.util.List ( )  <METHOD_END>
<METHOD_START> int [] int[] ( )  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.SpelCompilationCoverageTests.MessageHeaders org.springframework.expression.spel.SpelCompilationCoverageTests.MessageHeaders ( ) { org.springframework.expression.spel.SpelCompilationCoverageTests.MessageHeaders org.springframework.expression.spel.SpelCompilationCoverageTests.MessageHeaders = new org.springframework.expression.spel.SpelCompilationCoverageTests.MessageHeaders ( ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.MessageHeaders . java.lang.Object ( STRING , STRING ) ; org.springframework.expression.spel.SpelCompilationCoverageTests.MessageHeaders . java.lang.Object ( STRING , STRING ) ; return org.springframework.expression.spel.SpelCompilationCoverageTests.MessageHeaders ; }  <METHOD_END>
<METHOD_START> public int [] int[] ( ) { return new int [] { NUMBER , NUMBER } ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public java.util.List java.util.List ( ) { java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.List . boolean ( STRING ) ; java.util.List . boolean ( STRING ) ; return java.util.List ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> void ( T T ) { this . T = T ; }  <METHOD_END>
<METHOD_START> public T T ( ) { return T ; }  <METHOD_END>
<METHOD_START> void ( T T ) { this . T = T ; }  <METHOD_END>
<METHOD_START> public T T ( ) { return T ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class [] { org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2 .class } ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return true ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2 org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2 = ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2 ) java.lang.Object ; return new TypedValue ( org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2 . java.lang.Object ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return false ; }  <METHOD_END>
<METHOD_START> public void void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.AccessException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , MethodVisitor org.springframework.expression.spel.MethodVisitor , CodeFlow org.springframework.expression.spel.CodeFlow ) { if ( java.lang.reflect.Method == null ) { try { java.lang.reflect.Method = org.springframework.expression.spel.SpelCompilationCoverageTests.Payload2 .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; } catch ( java.lang.Exception java.lang.Exception ) {				} } java.lang.String java.lang.String = org.springframework.expression.spel.CodeFlow . lastDescriptor ( ) ; java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) . java.lang.String ( '.' , '/' ) ; if ( java.lang.String == null ) { org.springframework.expression.spel.CodeFlow . loadTarget ( org.springframework.expression.spel.MethodVisitor ) ; } if ( java.lang.String == null || ! java.lang.String . boolean ( java.lang.String . java.lang.String ( NUMBER ) ) ) { org.springframework.expression.spel.MethodVisitor . visitTypeInsn ( CHECKCAST , java.lang.String ) ; } org.springframework.expression.spel.MethodVisitor . visitLdcInsn ( java.lang.String ) ; org.springframework.expression.spel.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , java.lang.String , java.lang.reflect.Method . java.lang.String ( ) , CodeFlow . createSignatureDescriptor ( java.lang.reflect.Method ) , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ; return java.util.Map<,> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ; java.lang.Object java.lang.Object = java.util.Map<,> . get ( java.lang.String ) ; if ( java.lang.Object == null && ! java.util.Map<,> . boolean ( java.lang.String ) ) { throw new org.springframework.expression.spel.SpelCompilationCoverageTests.MapAccessException ( java.lang.String ) ; } return new TypedValue ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.AccessException { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class [] { java.util.Map .class } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , MethodVisitor org.springframework.expression.spel.MethodVisitor , CodeFlow org.springframework.expression.spel.CodeFlow ) { java.lang.String java.lang.String = org.springframework.expression.spel.CodeFlow . lastDescriptor ( ) ; if ( java.lang.String == null ) { org.springframework.expression.spel.CodeFlow . loadTarget ( org.springframework.expression.spel.MethodVisitor ) ; } org.springframework.expression.spel.MethodVisitor . visitLdcInsn ( java.lang.String ) ; org.springframework.expression.spel.MethodVisitor . visitMethodInsn ( INVOKEINTERFACE , STRING , STRING , STRING , true ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( null ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.SpelCompilationCoverageTests.Two [] org.springframework.expression.spel.SpelCompilationCoverageTests.Two[] ( ) { return org.springframework.expression.spel.SpelCompilationCoverageTests.Two[] ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { return java.lang.String ; } else if ( java.lang.String . boolean ( STRING ) ) { return java.lang.String ; } return null ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.SpelCompilationCoverageTests.Three org.springframework.expression.spel.SpelCompilationCoverageTests.Three ( ) { return org.springframework.expression.spel.SpelCompilationCoverageTests.Three ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public double double ( ) { return double ; }  <METHOD_END>
<METHOD_START> public void ( ) { org.springframework.expression.spel.SpelCompilationCoverageTests.PayloadX = this ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.lang.String = null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.lang.String = STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { if ( java.lang.String[] == null ) { java.lang.String = STRING ; } else { java.lang.String = STRING ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String += java.lang.String ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { java.lang.String = STRING + java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object ... java.lang.Object[] ) { if ( java.lang.Object[] == null ) { java.lang.String = STRING ; } else { java.lang.String = STRING ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { java.lang.String += java.lang.Object ; } } }  <METHOD_END>
<METHOD_START> public void void ( ) { int = NUMBER ; int = NUMBER ; java.lang.String = null ; java.lang.String = null ; java.lang.String = null ; }  <METHOD_END>
<METHOD_START> public void void ( ) { int = NUMBER ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { int = NUMBER ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static long long ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Number java.lang.Number ) { java.lang.String = java.lang.Number . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { int = int ; }  <METHOD_END>
<METHOD_START> public static void void ( int int ) { int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { if ( java.lang.String[] == null ) { java.lang.String = STRING ; } else { java.lang.String = STRING ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String += java.lang.String ; } } }  <METHOD_END>
<METHOD_START> public void void ( int ... int[] ) { if ( int[] == null ) { int = NUMBER ; } else { int = NUMBER ; for ( int int : int[] ) { int += int ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { if ( java.lang.String[] == null ) { java.lang.String = java.lang.String + STRING ; } else { java.lang.String = java.lang.String + STRING ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String += java.lang.String ; } } }  <METHOD_END>
<METHOD_START> public void void ( boolean ... boolean[] ) { java.lang.String = STRING ; if ( boolean[] != null ) { java.lang.String = STRING ; for ( boolean boolean : boolean[] ) { java.lang.String += java.lang.Boolean . java.lang.String ( boolean ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( short ... short[] ) { java.lang.String = STRING ; if ( short[] != null ) { java.lang.String = STRING ; for ( short short : short[] ) { this . java.lang.String += java.lang.Short . java.lang.String ( short ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( double ... double[] ) { java.lang.String = STRING ; if ( double[] != null ) { java.lang.String = STRING ; for ( double double : double[] ) { this . java.lang.String += java.lang.Double . java.lang.String ( double ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( float ... float[] ) { java.lang.String = STRING ; if ( float[] != null ) { java.lang.String = STRING ; for ( float float : float[] ) { this . java.lang.String += java.lang.Float . java.lang.String ( float ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( long ... long[] ) { java.lang.String = STRING ; if ( long[] != null ) { java.lang.String = STRING ; for ( long long : long[] ) { this . java.lang.String += java.lang.Long . java.lang.String ( long ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( byte ... byte[] ) { java.lang.String = STRING ; if ( byte[] != null ) { java.lang.String = STRING ; for ( java.lang.Byte java.lang.Byte : byte[] ) { this . java.lang.String += java.lang.Byte . java.lang.String ( java.lang.Byte ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( char ... char[] ) { java.lang.String = STRING ; if ( char[] != null ) { java.lang.String = STRING ; for ( char char : char[] ) { this . java.lang.String += java.lang.Character . java.lang.String ( char ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String [] ... java.lang.String[][] ) { if ( java.lang.String[][] == null ) { java.lang.String = java.lang.String + STRING ; } else { java.lang.String = java.lang.String + STRING ; for ( java.lang.String [] java.lang.String[] : java.lang.String[][] ) { java.lang.String += STRING ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String += java.lang.String ; } java.lang.String += STRING ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , int [] ... int[][] ) { if ( int[][] == null ) { java.lang.String = java.lang.String + STRING ; } else { java.lang.String = java.lang.String + STRING ; for ( int [] int[] : int[][] ) { java.lang.String += STRING ; for ( int int : int[] ) { java.lang.String += java.lang.Integer . java.lang.String ( int ) ; } java.lang.String += STRING ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object ... java.lang.Object[] ) { if ( java.lang.Object[] == null ) { java.lang.String = STRING ; } else { java.lang.String = STRING ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { java.lang.String += java.lang.Object ; } } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { java.lang.String java.lang.String = STRING ; java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer ( java.lang.String ) ; java.lang.String = java.util.StringTokenizer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( int int , java.lang.String java.lang.String , double double , boolean boolean ) { this . int = int ; this . java.lang.String = java.lang.String ; this . double = double ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.Integer java.lang.Integer ) { this . int = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( int ... int[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( int int : int[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Integer . java.lang.String ( int ) ) ; } java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Float java.lang.Float , int ... int[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Float . java.lang.String ( java.lang.Float ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; for ( int int : int[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Integer . java.lang.String ( int ) ) ; } java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( int [] int[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( int int : int[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Integer . java.lang.String ( int ) ) ; } java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( int int ) {		}  <METHOD_END>
<METHOD_START> static org.springframework.expression.spel.SpelCompilationCoverageTests.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper org.springframework.expression.spel.SpelCompilationCoverageTests.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper ( ) { org.springframework.expression.spel.SpelCompilationCoverageTests.HttpServlet3RequestFactory org.springframework.expression.spel.SpelCompilationCoverageTests.HttpServlet3RequestFactory = new org.springframework.expression.spel.SpelCompilationCoverageTests.HttpServlet3RequestFactory ( ) ; return org.springframework.expression.spel.SpelCompilationCoverageTests.HttpServlet3RequestFactory .new org.springframework.expression.spel.SpelCompilationCoverageTests.HttpServlet3RequestFactory.Servlet3SecurityContextHolderAwareRequestWrapper ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> static int int ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { return - NUMBER ; }  <METHOD_END>
<METHOD_START> public static int int ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { return - NUMBER ; }  <METHOD_END>
<METHOD_START> public static int int ( int int ) { return - int ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String ... java.lang.String[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.Object ... java.lang.Object[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object . java.lang.String ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String [] java.lang.String[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( char ... char[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( char char : char[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( char ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static int int ( int ... int[] ) { int int = NUMBER ; for ( int int : int[] ) { int += int ; } return int ; }  <METHOD_END>
<METHOD_START> public static int int ( double ... double[] ) { int int = NUMBER ; for ( double double : double[] ) { int += double ; } return int ; }  <METHOD_END>
<METHOD_START> public static int int ( float ... float[] ) { int int = NUMBER ; for ( float float : float[] ) { int += float ; } return int ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return java.lang.String . java.lang.String ( java.lang.String , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper ( ) { return org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper ( ) { return org.springframework.expression.spel.SpelCompilationCoverageTests.StaticsHelper ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.expression.spel.SpelCompilationCoverageTests.Apple org.springframework.expression.spel.SpelCompilationCoverageTests.Apple ) { this . java.lang.Object = org.springframework.expression.spel.SpelCompilationCoverageTests.Apple ; if ( this . int < org.springframework.expression.spel.SpelCompilationCoverageTests.Apple . int ) { return - NUMBER ; } else if ( this . int > org.springframework.expression.spel.SpelCompilationCoverageTests.Apple . int ) { return + NUMBER ; } else { return NUMBER ; } }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
