<METHOD_START> protected void ( CacheErrorHandler org.springframework.cache.jcache.interceptor.CacheErrorHandler ) { super( org.springframework.cache.jcache.interceptor.CacheErrorHandler ); }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( CacheOperationInvocationContext < O > org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<O> , CacheOperationInvoker org.springframework.cache.jcache.interceptor.CacheOperationInvoker )			throws java.lang.Throwable ;  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.Cache org.springframework.cache.jcache.interceptor.Cache ( CacheOperationInvocationContext < O > org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<O> ) { java.util.Collection<? extends org.springframework.cache.jcache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.jcache.interceptor.Cache> = org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<O> . getOperation ( ) . getCacheResolver ( ) . resolveCaches ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<O> ) ; Cache org.springframework.cache.jcache.interceptor.Cache = org.springframework.cache.jcache.interceptor.Cache ( java.util.Collection<> ) ; if ( org.springframework.cache.jcache.interceptor.Cache == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<O> . getOperation ( ) ) ; } return org.springframework.cache.jcache.interceptor.Cache ; }  <METHOD_END>
<METHOD_START> static org.springframework.cache.jcache.interceptor.Cache org.springframework.cache.jcache.interceptor.Cache ( java.util.Collection<? extends org.springframework.cache.jcache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.jcache.interceptor.Cache> ) { if ( CollectionUtils . isEmpty ( java.util.Collection<> ) ) { return null ; } else if ( java.util.Collection<> . int ( ) == NUMBER ) { return java.util.Collection<> . java.util.Iterator<> ( ) . next ( ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.util.Collection<> + STRING ) ; } }  <METHOD_END>
