<METHOD_START> @ Before public void void ( ) { void ( ) ; this . org.springframework.data.rest.tests.TestMvcClient = new TestMvcClient ( org.springframework.data.rest.tests.MockMvc , org.springframework.data.rest.tests.LinkDiscoverers ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . org.springframework.data.rest.tests.MockMvc = MockMvcBuilders . webAppContextSetup ( org.springframework.data.rest.tests.WebApplicationContext ) . defaultRequest ( get ( STRING ) . accept ( TestMvcClient . DEFAULT_MEDIA_TYPE ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.rest.tests.MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ( Link org.springframework.data.rest.tests.Link , java.lang.Object java.lang.Object , MediaType org.springframework.data.rest.tests.MediaType ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.data.rest.tests.Link . isTemplated ( ) ? org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) : org.springframework.data.rest.tests.Link . getHref ( ) ; MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = org.springframework.data.rest.tests.MockMvc . perform ( post ( java.lang.String ) . content ( java.lang.Object . java.lang.String ( ) ) . contentType ( org.springframework.data.rest.tests.MediaType ) ) . andExpect ( status ( ) . isCreated ( ) ) . andExpect ( header ( ) . string ( STRING , is ( notNullValue ( ) ) ) ) . andReturn ( ) . getResponse ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { return org.springframework.data.rest.tests.MockHttpServletResponse ; } return org.springframework.data.rest.tests.TestMvcClient . request ( org.springframework.data.rest.tests.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.rest.tests.MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ( Link org.springframework.data.rest.tests.Link , java.lang.Object java.lang.Object , MediaType org.springframework.data.rest.tests.MediaType ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.data.rest.tests.Link . isTemplated ( ) ? org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) : org.springframework.data.rest.tests.Link . getHref ( ) ; MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = org.springframework.data.rest.tests.MockMvc . perform ( put ( java.lang.String ) . content ( java.lang.Object . java.lang.String ( ) ) . contentType ( org.springframework.data.rest.tests.MediaType ) ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) . andReturn ( ) . getResponse ( ) ; return StringUtils . hasText ( org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ) ? org.springframework.data.rest.tests.MockHttpServletResponse : org.springframework.data.rest.tests.TestMvcClient . request ( org.springframework.data.rest.tests.Link ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.rest.tests.MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ( Link org.springframework.data.rest.tests.Link , java.lang.Object java.lang.Object , MediaType org.springframework.data.rest.tests.MediaType ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.data.rest.tests.Link . isTemplated ( ) ? org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) : org.springframework.data.rest.tests.Link . getHref ( ) ; MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = org.springframework.data.rest.tests.MockMvc . perform ( MockMvcRequestBuilders . request ( HttpMethod . PATCH , java.lang.String ) . content ( java.lang.Object . java.lang.String ( ) ) . contentType ( org.springframework.data.rest.tests.MediaType ) ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) . andReturn ( ) . getResponse ( ) ; return StringUtils . hasText ( org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ) ? org.springframework.data.rest.tests.MockHttpServletResponse : org.springframework.data.rest.tests.TestMvcClient . request ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Link org.springframework.data.rest.tests.Link ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.data.rest.tests.Link . isTemplated ( ) ? org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) : org.springframework.data.rest.tests.Link . getHref ( ) ; org.springframework.data.rest.tests.MockMvc . perform ( delete ( java.lang.String ) ) . andExpect ( status ( ) . isNoContent ( ) ) . andReturn ( ) . getResponse ( ) ; org.springframework.data.rest.tests.MockMvc . perform ( get ( java.lang.String ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.rest.tests.Link org.springframework.data.rest.tests.Link ( java.lang.String java.lang.String , MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ) throws java.lang.Exception { return org.springframework.data.rest.tests.Link ( java.lang.String , org.springframework.data.rest.tests.MockHttpServletResponse , true ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ) throws java.lang.Exception { org.springframework.data.rest.tests.Link ( java.lang.String , org.springframework.data.rest.tests.MockHttpServletResponse , false ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.rest.tests.Link org.springframework.data.rest.tests.Link ( java.lang.String java.lang.String , MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse , boolean boolean )			throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; try { java.lang.String java.lang.String = JsonPath .< JSONArray > read ( java.lang.String , java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ) . get ( NUMBER ) . toString ( ) ; java.lang.String java.lang.String = STRING ; if ( boolean ) { assertThat ( java.lang.String ) . as ( java.lang.String , STRING , java.lang.String ) . isNotNull ( ) ; } else { assertThat ( java.lang.String ) . as ( java.lang.String , STRING , java.lang.String ) . isNull ( ) ; } return new Link ( java.lang.String , java.lang.String ) ; } catch ( InvalidPathException org.springframework.data.rest.tests.InvalidPathException ) { if ( boolean ) { fail ( STRING ) ; } return null ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; Link org.springframework.data.rest.tests.Link = org.springframework.data.rest.tests.TestMvcClient . getDiscoverer ( org.springframework.data.rest.tests.MockHttpServletResponse ) . findLinkWithRel ( java.lang.String , java.lang.String ) ; assertThat ( org.springframework.data.rest.tests.Link ) . as ( STRING , java.lang.String , org.springframework.data.rest.tests.Link ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < T > T T ( java.lang.String java.lang.String , MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; java.lang.Object java.lang.Object = JsonPath . read ( java.lang.String , java.lang.String ) ; assertThat ( java.lang.Object ) . as ( STRING , java.lang.String , java.lang.String ) . isNotNull ( ) ; if ( java.lang.Object instanceof JSONArray ) { JSONArray org.springframework.data.rest.tests.JSONArray = ( JSONArray ) java.lang.Object ; assertThat ( org.springframework.data.rest.tests.JSONArray . size ( ) ) . isGreaterThan ( NUMBER ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ) throws java.lang.Exception { try { java.lang.Object java.lang.Object = JsonPath . read ( org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) , java.lang.String ) ; if ( java.lang.Object != null ) { fail ( STRING + java.lang.String + STRING + java.lang.Object . java.lang.String ( ) ) ; } } catch ( InvalidPathException org.springframework.data.rest.tests.InvalidPathException ) {} }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String , MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse )			throws java.lang.Exception { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.data.rest.tests.MockHttpServletResponse ) ; java.lang.String java.lang.String = STRING ; if ( java.lang.Object instanceof JSONArray ) { java.lang.String = ( ( JSONArray ) java.lang.Object ) . toJSONString ( ) ; } else { java.lang.String = java.lang.Object != null ? java.lang.Object . java.lang.String ( ) : null ; } assertThat ( java.lang.String ) . isEqualTo ( java.lang.String ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.rest.tests.ResultMatcher org.springframework.data.rest.tests.ResultMatcher ( final java.lang.String java.lang.String ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.data.rest.tests.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = org.springframework.data.rest.tests.MvcResult . getResponse ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( org.springframework.data.rest.tests.TestMvcClient . getDiscoverer ( org.springframework.data.rest.tests.MockHttpServletResponse ) . findLinkWithRel ( java.lang.String , java.lang.String ) ) . as ( STRING , java.lang.String , java.lang.String ) . isNull ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.data.rest.tests.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = org.springframework.data.rest.tests.MvcResult . getResponse ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( org.springframework.data.rest.tests.TestMvcClient . getDiscoverer ( org.springframework.data.rest.tests.MockHttpServletResponse ) . findLinkWithRel ( java.lang.String , java.lang.String ) ) . as ( STRING , java.lang.String , java.lang.String ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) java.lang.Exception { return java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.rest.tests.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.data.rest.tests.MultiValueMap<java.lang.String,java.lang.String> ( ) { return new LinkedMultiValueMap < java.lang.String , java.lang.String > ( NUMBER ) ; }  <METHOD_END>
