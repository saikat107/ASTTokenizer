<METHOD_START> @ java.lang.Override public int int ( ) { return LOWEST_PRECEDENCE ; }  <METHOD_END>
<METHOD_START> public void void ( JmsListenerEndpointRegistry org.springframework.jms.annotation.JmsListenerEndpointRegistry ) { this . org.springframework.jms.annotation.JmsListenerEndpointRegistry = org.springframework.jms.annotation.JmsListenerEndpointRegistry ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHandlerMethodFactory org.springframework.jms.annotation.MessageHandlerMethodFactory ) { this . org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.MessageHandlerMethodFactoryAdapter . void ( org.springframework.jms.annotation.MessageHandlerMethodFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.jms.annotation.BeanFactory ) { this . org.springframework.jms.annotation.BeanFactory = org.springframework.jms.annotation.BeanFactory ; if ( org.springframework.jms.annotation.BeanFactory instanceof ConfigurableBeanFactory ) { this . org.springframework.jms.annotation.StringValueResolver = new EmbeddedValueResolver ( ( ConfigurableBeanFactory ) org.springframework.jms.annotation.BeanFactory ) ; } this . org.springframework.jms.annotation.JmsListenerEndpointRegistrar . setBeanFactory ( org.springframework.jms.annotation.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.Set<java.lang.Class<?>> . void ( ) ; if ( this . org.springframework.jms.annotation.BeanFactory instanceof ListableBeanFactory ) { java.util.Map<java.lang.String,org.springframework.jms.annotation.JmsListenerConfigurer> < java.lang.String , JmsListenerConfigurer > java.util.Map<java.lang.String,org.springframework.jms.annotation.JmsListenerConfigurer> = ( ( ListableBeanFactory ) this . org.springframework.jms.annotation.BeanFactory ) . getBeansOfType ( JmsListenerConfigurer .class ) ; for ( JmsListenerConfigurer org.springframework.jms.annotation.JmsListenerConfigurer : java.util.Map<java.lang.String,org.springframework.jms.annotation.JmsListenerConfigurer> . values ( ) ) { org.springframework.jms.annotation.JmsListenerConfigurer . configureJmsListeners ( this . org.springframework.jms.annotation.JmsListenerEndpointRegistrar ) ; } } if ( this . org.springframework.jms.annotation.JmsListenerEndpointRegistrar . getEndpointRegistry ( ) == null ) { if ( this . org.springframework.jms.annotation.JmsListenerEndpointRegistry == null ) { Assert . state ( this . org.springframework.jms.annotation.BeanFactory != null , STRING ) ; this . org.springframework.jms.annotation.JmsListenerEndpointRegistry = this . org.springframework.jms.annotation.BeanFactory . getBean ( JmsListenerConfigUtils . JMS_LISTENER_ENDPOINT_REGISTRY_BEAN_NAME , JmsListenerEndpointRegistry .class ) ; } this . org.springframework.jms.annotation.JmsListenerEndpointRegistrar . setEndpointRegistry ( this . org.springframework.jms.annotation.JmsListenerEndpointRegistry ) ; } if ( this . java.lang.String != null ) { this . org.springframework.jms.annotation.JmsListenerEndpointRegistrar . setContainerFactoryBeanName ( this . java.lang.String ) ; } MessageHandlerMethodFactory org.springframework.jms.annotation.MessageHandlerMethodFactory = this . org.springframework.jms.annotation.JmsListenerEndpointRegistrar . getMessageHandlerMethodFactory ( ) ; if ( org.springframework.jms.annotation.MessageHandlerMethodFactory != null ) { this . org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.MessageHandlerMethodFactoryAdapter . void ( org.springframework.jms.annotation.MessageHandlerMethodFactory ) ; } this . org.springframework.jms.annotation.JmsListenerEndpointRegistrar . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RootBeanDefinition org.springframework.jms.annotation.RootBeanDefinition , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.jms.annotation.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.jms.annotation.BeansException { if ( ! this . java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = AopUtils . getTargetClass ( java.lang.Object ) ; java.util.Map<java.lang.reflect.Method,java.util.Set<org.springframework.jms.annotation.JmsListener>> < java.lang.reflect.Method , java.util.Set<org.springframework.jms.annotation.JmsListener> < JmsListener > > java.util.Map<java.lang.reflect.Method,java.util.Set<org.springframework.jms.annotation.JmsListener>> = MethodIntrospector . selectMethods ( java.lang.Class<> , new MethodIntrospector . MethodIntrospector < java.util.Set<org.springframework.jms.annotation.JmsListener> < JmsListener > > ( ) { @ Override public Set < JmsListener > inspect ( Method method ) { Set < JmsListener > listenerMethods = AnnotatedElementUtils . getMergedRepeatableAnnotations ( method , JmsListener .class , JmsListeners .class ) ; return ( ! listenerMethods . isEmpty ( ) ? listenerMethods : null ) ; } } ) ; if ( java.util.Map<java.lang.reflect.Method,java.util.Set<org.springframework.jms.annotation.JmsListener>> . isEmpty ( ) ) { this . java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( org.springframework.jms.annotation.Log . isTraceEnabled ( ) ) { org.springframework.jms.annotation.Log . trace ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } } else { for ( java.util.Map . java.util.Map.Entry<java.lang.reflect.Method,java.util.Set<org.springframework.jms.annotation.JmsListener>> < java.lang.reflect.Method , java.util.Set<org.springframework.jms.annotation.JmsListener> < JmsListener > > java.util.Map.Entry<java.lang.reflect.Method,java.util.Set<org.springframework.jms.annotation.JmsListener>> : java.util.Map<java.lang.reflect.Method,java.util.Set<org.springframework.jms.annotation.JmsListener>> . entrySet ( ) ) { java.lang.reflect.Method java.lang.reflect.Method = java.util.Map.Entry<java.lang.reflect.Method,java.util.Set<org.springframework.jms.annotation.JmsListener>> . getKey ( ) ; for ( JmsListener org.springframework.jms.annotation.JmsListener : java.util.Map.Entry<java.lang.reflect.Method,java.util.Set<org.springframework.jms.annotation.JmsListener>> . getValue ( ) ) { void ( org.springframework.jms.annotation.JmsListener , java.lang.reflect.Method , java.lang.Object ) ; } } if ( org.springframework.jms.annotation.Log . isDebugEnabled ( ) ) { org.springframework.jms.annotation.Log . debug ( java.util.Map<java.lang.reflect.Method,java.util.Set<org.springframework.jms.annotation.JmsListener>> . size ( ) + STRING + java.lang.String + STRING + java.util.Map<java.lang.reflect.Method,java.util.Set<org.springframework.jms.annotation.JmsListener>> ) ; } } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Override public Set < JmsListener > inspect ( Method method ) { Set < JmsListener > listenerMethods = AnnotatedElementUtils . getMergedRepeatableAnnotations ( method , JmsListener .class , JmsListeners .class ) ; return ( ! listenerMethods . isEmpty ( ) ? listenerMethods : null ) ; }  <METHOD_END>
<METHOD_START> protected void void ( JmsListener org.springframework.jms.annotation.JmsListener , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object ) { java.lang.reflect.Method java.lang.reflect.Method = AopUtils . selectInvocableMethod ( java.lang.reflect.Method , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint = org.springframework.jms.annotation.MethodJmsListenerEndpoint ( ) ; org.springframework.jms.annotation.MethodJmsListenerEndpoint . setBean ( java.lang.Object ) ; org.springframework.jms.annotation.MethodJmsListenerEndpoint . setMethod ( java.lang.reflect.Method ) ; org.springframework.jms.annotation.MethodJmsListenerEndpoint . setMostSpecificMethod ( java.lang.reflect.Method ) ; org.springframework.jms.annotation.MethodJmsListenerEndpoint . setMessageHandlerMethodFactory ( this . org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.MessageHandlerMethodFactoryAdapter ) ; org.springframework.jms.annotation.MethodJmsListenerEndpoint . setEmbeddedValueResolver ( this . org.springframework.jms.annotation.StringValueResolver ) ; org.springframework.jms.annotation.MethodJmsListenerEndpoint . setBeanFactory ( this . org.springframework.jms.annotation.BeanFactory ) ; org.springframework.jms.annotation.MethodJmsListenerEndpoint . setId ( java.lang.String ( org.springframework.jms.annotation.JmsListener ) ) ; org.springframework.jms.annotation.MethodJmsListenerEndpoint . setDestination ( java.lang.String ( org.springframework.jms.annotation.JmsListener . destination ( ) ) ) ; if ( StringUtils . hasText ( org.springframework.jms.annotation.JmsListener . selector ( ) ) ) { org.springframework.jms.annotation.MethodJmsListenerEndpoint . setSelector ( java.lang.String ( org.springframework.jms.annotation.JmsListener . selector ( ) ) ) ; } if ( StringUtils . hasText ( org.springframework.jms.annotation.JmsListener . subscription ( ) ) ) { org.springframework.jms.annotation.MethodJmsListenerEndpoint . setSubscription ( java.lang.String ( org.springframework.jms.annotation.JmsListener . subscription ( ) ) ) ; } if ( StringUtils . hasText ( org.springframework.jms.annotation.JmsListener . concurrency ( ) ) ) { org.springframework.jms.annotation.MethodJmsListenerEndpoint . setConcurrency ( java.lang.String ( org.springframework.jms.annotation.JmsListener . concurrency ( ) ) ) ; } JmsListenerContainerFactory < ? > org.springframework.jms.annotation.JmsListenerContainerFactory<?> = null ; java.lang.String java.lang.String = java.lang.String ( org.springframework.jms.annotation.JmsListener . containerFactory ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { Assert . state ( this . org.springframework.jms.annotation.BeanFactory != null , STRING ) ; try { org.springframework.jms.annotation.JmsListenerContainerFactory<?> = this . org.springframework.jms.annotation.BeanFactory . getBean ( java.lang.String , JmsListenerContainerFactory .class ) ; } catch ( NoSuchBeanDefinitionException org.springframework.jms.annotation.NoSuchBeanDefinitionException ) { throw new BeanInitializationException ( STRING + java.lang.reflect.Method + STRING + JmsListenerContainerFactory .class . java.lang.String ( ) + STRING + java.lang.String + STRING , org.springframework.jms.annotation.NoSuchBeanDefinitionException ) ; } } this . org.springframework.jms.annotation.JmsListenerEndpointRegistrar . registerEndpoint ( org.springframework.jms.annotation.MethodJmsListenerEndpoint , org.springframework.jms.annotation.JmsListenerContainerFactory<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.annotation.MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint ( ) { return new MethodJmsListenerEndpoint ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( JmsListener org.springframework.jms.annotation.JmsListener ) { if ( StringUtils . hasText ( org.springframework.jms.annotation.JmsListener . id ( ) ) ) { return java.lang.String ( org.springframework.jms.annotation.JmsListener . id ( ) ) ; } else { return STRING + this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return ( this . org.springframework.jms.annotation.StringValueResolver != null ? this . org.springframework.jms.annotation.StringValueResolver . resolveStringValue ( java.lang.String ) : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHandlerMethodFactory org.springframework.jms.annotation.MessageHandlerMethodFactory ) { this . org.springframework.jms.annotation.MessageHandlerMethodFactory = org.springframework.jms.annotation.MessageHandlerMethodFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.annotation.InvocableHandlerMethod org.springframework.jms.annotation.InvocableHandlerMethod ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { return org.springframework.jms.annotation.MessageHandlerMethodFactory ( ) . createInvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.annotation.MessageHandlerMethodFactory org.springframework.jms.annotation.MessageHandlerMethodFactory ( ) { if ( this . org.springframework.jms.annotation.MessageHandlerMethodFactory == null ) { this . org.springframework.jms.annotation.MessageHandlerMethodFactory = org.springframework.jms.annotation.MessageHandlerMethodFactory ( ) ; } return this . org.springframework.jms.annotation.MessageHandlerMethodFactory ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.annotation.MessageHandlerMethodFactory org.springframework.jms.annotation.MessageHandlerMethodFactory ( ) { DefaultMessageHandlerMethodFactory org.springframework.jms.annotation.DefaultMessageHandlerMethodFactory = new DefaultMessageHandlerMethodFactory ( ) ; org.springframework.jms.annotation.DefaultMessageHandlerMethodFactory . setBeanFactory ( org.springframework.jms.annotation.BeanFactory ) ; org.springframework.jms.annotation.DefaultMessageHandlerMethodFactory . afterPropertiesSet ( ) ; return org.springframework.jms.annotation.DefaultMessageHandlerMethodFactory ; }  <METHOD_END>
