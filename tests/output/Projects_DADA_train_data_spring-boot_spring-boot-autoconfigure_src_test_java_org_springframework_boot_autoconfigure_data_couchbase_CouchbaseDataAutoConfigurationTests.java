<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBeansOfType ( IndexManager .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfigurationTests.CustomCouchbaseConfiguration .class ) ; CouchbaseTemplate org.springframework.boot.autoconfigure.data.couchbase.CouchbaseTemplate = this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBean ( CouchbaseTemplate .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.couchbase.CouchbaseTemplate . getDefaultConsistency ( ) ) . isEqualTo ( Consistency . STRONGLY_CONSISTENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( CouchbaseTestConfigurer .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBeansOfType ( ValidatingCouchbaseEventListener .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( CouchbaseTestConfigurer .class ) ; IndexManager org.springframework.boot.autoconfigure.data.couchbase.IndexManager = this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBean ( IndexManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.couchbase.IndexManager . isIgnoreViews ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.data.couchbase.IndexManager . isIgnoreN1qlPrimary ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.data.couchbase.IndexManager . isIgnoreN1qlSecondary ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( CouchbaseTestConfigurer .class , STRING ) ; IndexManager org.springframework.boot.autoconfigure.data.couchbase.IndexManager = this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBean ( IndexManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.couchbase.IndexManager . isIgnoreViews ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.autoconfigure.data.couchbase.IndexManager . isIgnoreN1qlPrimary ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.autoconfigure.data.couchbase.IndexManager . isIgnoreN1qlSecondary ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( CouchbaseTestConfigurer .class , STRING ) ; SpringBootCouchbaseDataConfiguration org.springframework.boot.autoconfigure.data.couchbase.SpringBootCouchbaseDataConfiguration = this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBean ( SpringBootCouchbaseDataConfiguration .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.couchbase.SpringBootCouchbaseDataConfiguration . getDefaultConsistency ( ) ) . isEqualTo ( Consistency . EVENTUALLY_CONSISTENT ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfigurationTests.EntityScanConfig .class ) ; CouchbaseMappingContext org.springframework.boot.autoconfigure.data.couchbase.CouchbaseMappingContext = this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBean ( CouchbaseMappingContext .class ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = ( java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.data.couchbase.CouchbaseMappingContext , STRING ) ; assertThat ( java.util.Set<java.lang.Class<?>> ) . containsOnly ( City .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfigurationTests.CustomConversionsConfig .class ) ; CouchbaseTemplate org.springframework.boot.autoconfigure.data.couchbase.CouchbaseTemplate = this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBean ( CouchbaseTemplate .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.couchbase.CouchbaseTemplate . getConverter ( ) . getConversionService ( ) . canConvert ( CouchbaseProperties .class , java.lang.Boolean .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext , java.lang.String[] ) ; if ( java.lang.Class<> != null ) { org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; } org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , ValidationAutoConfiguration .class , CouchbaseAutoConfiguration .class , CouchbaseDataAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.data.couchbase.CouchbaseConfigurer org.springframework.boot.autoconfigure.data.couchbase.CouchbaseConfigurer ( ) { return new CouchbaseTestConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.data.couchbase.Consistency org.springframework.boot.autoconfigure.data.couchbase.Consistency ( ) { return Consistency . STRONGLY_CONSISTENT ; }  <METHOD_END>
<METHOD_START> @ Bean ( BeanNames . COUCHBASE_CUSTOM_CONVERSIONS ) public org.springframework.boot.autoconfigure.data.couchbase.CustomConversions org.springframework.boot.autoconfigure.data.couchbase.CustomConversions ( ) { return new CustomConversions ( java.util.Collections . java.util.List<org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfigurationTests.MyConverter> ( new org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfigurationTests.MyConverter ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( CouchbaseProperties org.springframework.boot.autoconfigure.data.couchbase.CouchbaseProperties ) { return true ; }  <METHOD_END>
