<METHOD_START> void ( AnnotationAttributeExtractor < ? > org.springframework.core.annotation.AnnotationAttributeExtractor<?> ) { Assert . notNull ( org.springframework.core.annotation.AnnotationAttributeExtractor<> , STRING ) ; this . org.springframework.core.annotation.AnnotationAttributeExtractor<?> = org.springframework.core.annotation.AnnotationAttributeExtractor<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( ReflectionUtils . isEqualsMethod ( java.lang.reflect.Method ) ) { return boolean ( java.lang.Object[] [ NUMBER ] ) ; } if ( ReflectionUtils . isHashCodeMethod ( java.lang.reflect.Method ) ) { return int ( ) ; } if ( ReflectionUtils . isToStringMethod ( java.lang.reflect.Method ) ) { return java.lang.String ( ) ; } if ( AnnotationUtils . isAnnotationTypeMethod ( java.lang.reflect.Method ) ) { return java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; } if ( ! AnnotationUtils . isAttributeMethod ( java.lang.reflect.Method ) ) { throw new AnnotationConfigurationException ( java.lang.String . java.lang.String ( STRING , java.lang.reflect.Method , java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ) ; } return java.lang.Object ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return this . org.springframework.core.annotation.AnnotationAttributeExtractor<> . getAnnotationType ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; java.lang.Object java.lang.Object = this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { java.lang.Object = this . org.springframework.core.annotation.AnnotationAttributeExtractor<> . getAttributeValue ( java.lang.reflect.Method ) ; if ( java.lang.Object == null ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , this . org.springframework.core.annotation.AnnotationAttributeExtractor<> . getClass ( ) . getName ( ) , java.lang.String , this . org.springframework.core.annotation.AnnotationAttributeExtractor<> . getSource ( ) ) ; throw new java.lang.IllegalStateException ( java.lang.String ) ; } if ( java.lang.Object instanceof java.lang.annotation.Annotation ) { java.lang.Object = AnnotationUtils . synthesizeAnnotation ( ( java.lang.annotation.Annotation ) java.lang.Object , this . org.springframework.core.annotation.AnnotationAttributeExtractor<> . getAnnotatedElement ( ) ) ; } else if ( java.lang.Object instanceof java.lang.annotation.Annotation [] ) { java.lang.Object = AnnotationUtils . synthesizeAnnotationArray ( ( java.lang.annotation.Annotation [] ) java.lang.Object , this . org.springframework.core.annotation.AnnotationAttributeExtractor<> . getAnnotatedElement ( ) ) ; } this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.lang.Object = java.lang.Object ( java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof boolean [] ) { return ( ( boolean [] ) java.lang.Object ) . java.lang.Object ( ) ; } if ( java.lang.Object instanceof byte [] ) { return ( ( byte [] ) java.lang.Object ) . java.lang.Object ( ) ; } if ( java.lang.Object instanceof char [] ) { return ( ( char [] ) java.lang.Object ) . java.lang.Object ( ) ; } if ( java.lang.Object instanceof double [] ) { return ( ( double [] ) java.lang.Object ) . java.lang.Object ( ) ; } if ( java.lang.Object instanceof float [] ) { return ( ( float [] ) java.lang.Object ) . java.lang.Object ( ) ; } if ( java.lang.Object instanceof int [] ) { return ( ( int [] ) java.lang.Object ) . java.lang.Object ( ) ; } if ( java.lang.Object instanceof long [] ) { return ( ( long [] ) java.lang.Object ) . java.lang.Object ( ) ; } if ( java.lang.Object instanceof short [] ) { return ( ( short [] ) java.lang.Object ) . java.lang.Object ( ) ; } return ( ( java.lang.Object [] ) java.lang.Object ) . java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . boolean ( java.lang.Object ) ) { return false ; } for ( java.lang.reflect.Method java.lang.reflect.Method : AnnotationUtils . getAttributeMethods ( java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object ) ; if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> private int int ( ) { int int = NUMBER ; for ( java.lang.reflect.Method java.lang.reflect.Method : AnnotationUtils . getAttributeMethods ( java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.reflect.Method ) ; int int ; if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { int = int ( java.lang.Object ) ; } else { int = java.lang.Object . int ( ) ; } int += ( NUMBER * java.lang.reflect.Method . java.lang.String ( ) . int ( ) ) ^ int ; } return int ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof boolean [] ) { return java.util.Arrays . int ( ( boolean [] ) java.lang.Object ) ; } if ( java.lang.Object instanceof byte [] ) { return java.util.Arrays . int ( ( byte [] ) java.lang.Object ) ; } if ( java.lang.Object instanceof char [] ) { return java.util.Arrays . int ( ( char [] ) java.lang.Object ) ; } if ( java.lang.Object instanceof double [] ) { return java.util.Arrays . int ( ( double [] ) java.lang.Object ) ; } if ( java.lang.Object instanceof float [] ) { return java.util.Arrays . int ( ( float [] ) java.lang.Object ) ; } if ( java.lang.Object instanceof int [] ) { return java.util.Arrays . int ( ( int [] ) java.lang.Object ) ; } if ( java.lang.Object instanceof long [] ) { return java.util.Arrays . int ( ( long [] ) java.lang.Object ) ; } if ( java.lang.Object instanceof short [] ) { return java.util.Arrays . int ( ( short [] ) java.lang.Object ) ; } return java.util.Arrays . int ( ( java.lang.Object [] ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) . java.lang.StringBuilder ( STRING ) ; java.util.Iterator<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Iterator<java.lang.reflect.Method> = AnnotationUtils . getAttributeMethods ( java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) . iterator ( ) ; while ( java.util.Iterator<java.lang.reflect.Method> . boolean ( ) ) { java.lang.reflect.Method java.lang.reflect.Method = java.util.Iterator<java.lang.reflect.Method> . java.lang.reflect.Method ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.reflect.Method . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '=' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.Object ( java.lang.reflect.Method ) ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Iterator<java.lang.reflect.Method> . boolean ( ) ? STRING : STRING ) ; } return java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Object [] ) { return STRING + StringUtils . arrayToDelimitedString ( ( java.lang.Object [] ) java.lang.Object , STRING ) + STRING ; } return java.lang.String . java.lang.String ( java.lang.Object ) ; }  <METHOD_END>
