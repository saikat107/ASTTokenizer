<METHOD_START> public void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ; this . java.lang.String = java.lang.String ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return StringUtils . toStringArray ( this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Runnable java.lang.Runnable ) { synchronized ( java.lang.Object ( ) ) { if ( boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String ( ) + STRING ) ; } this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String + java.lang.String , java.lang.Runnable ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { synchronized ( java.lang.Object ( ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { java.lang.Object java.lang.Object = this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { java.lang.Object = this . java.util.Map<java.lang.String,java.lang.Object> ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) != null ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { synchronized ( java.lang.Object ( ) ) { if ( ! boolean ( ) ) { void ( ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Boolean . java.lang.Boolean ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { if ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) . boolean ( java.lang.String ) ) { try { ( ( java.lang.Runnable ) java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) . void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.messaging.simp.Log . error ( STRING , java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> public static org.springframework.messaging.simp.SimpAttributes org.springframework.messaging.simp.SimpAttributes ( Message < ? > org.springframework.messaging.simp.Message<?> ) { Assert . notNull ( org.springframework.messaging.simp.Message<> , STRING ) ; MessageHeaders org.springframework.messaging.simp.MessageHeaders = org.springframework.messaging.simp.Message<> . getHeaders ( ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getSessionId ( org.springframework.messaging.simp.MessageHeaders ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = SimpMessageHeaderAccessor . getSessionAttributes ( org.springframework.messaging.simp.MessageHeaders ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.messaging.simp.Message<> ) ; } if ( java.util.Map<java.lang.String,java.lang.Object> == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.messaging.simp.Message<> ) ; } return new org.springframework.messaging.simp.SimpAttributes ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
