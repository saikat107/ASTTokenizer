<METHOD_START> void ( java.lang.Thread.UncaughtExceptionHandler java.lang.Thread.UncaughtExceptionHandler ) { this . java.lang.Thread.UncaughtExceptionHandler = java.lang.Thread.UncaughtExceptionHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Thread java.lang.Thread , java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof org.springframework.boot.devtools.restart.SilentExitExceptionHandler.SilentExitException ) { if ( boolean ( java.lang.Thread ) ) { void ( ) ; } return; } if ( this . java.lang.Thread.UncaughtExceptionHandler != null ) { this . java.lang.Thread.UncaughtExceptionHandler . void ( java.lang.Thread , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Thread java.lang.Thread ) { for ( java.lang.Thread java.lang.Thread : java.lang.Thread[] ( ) ) { if ( java.lang.Thread != java.lang.Thread && java.lang.Thread . boolean ( ) && ! java.lang.Thread . boolean ( ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> protected java.lang.Thread [] java.lang.Thread[] ( ) { java.lang.ThreadGroup java.lang.ThreadGroup = java.lang.ThreadGroup ( ) ; java.lang.Thread [] java.lang.Thread[] = new java.lang.Thread [ NUMBER ] ; int int = java.lang.ThreadGroup . int ( java.lang.Thread[] ) ; while ( int == java.lang.Thread[] . int ) { java.lang.Thread[] = new java.lang.Thread [ java.lang.Thread[] . int * NUMBER ] ; int = java.lang.ThreadGroup . int ( java.lang.Thread[] ) ; } return java.util.Arrays . java.lang.Thread[] ( java.lang.Thread[] , int ) ; }  <METHOD_END>
<METHOD_START> private java.lang.ThreadGroup java.lang.ThreadGroup ( ) { java.lang.ThreadGroup java.lang.ThreadGroup = java.lang.Thread . java.lang.Thread ( ) . java.lang.ThreadGroup ( ) ; while ( java.lang.ThreadGroup . java.lang.ThreadGroup ( ) != null ) { java.lang.ThreadGroup = java.lang.ThreadGroup . java.lang.ThreadGroup ( ) ; } return java.lang.ThreadGroup ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { java.lang.System . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.Thread java.lang.Thread ) { java.lang.Thread.UncaughtExceptionHandler java.lang.Thread.UncaughtExceptionHandler = java.lang.Thread . java.lang.Thread.UncaughtExceptionHandler ( ) ; if ( ! ( java.lang.Thread.UncaughtExceptionHandler instanceof org.springframework.boot.devtools.restart.SilentExitExceptionHandler ) ) { java.lang.Thread.UncaughtExceptionHandler = new org.springframework.boot.devtools.restart.SilentExitExceptionHandler ( java.lang.Thread.UncaughtExceptionHandler ) ; java.lang.Thread . void ( java.lang.Thread.UncaughtExceptionHandler ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( ) { throw new org.springframework.boot.devtools.restart.SilentExitExceptionHandler.SilentExitException ( ) ; }  <METHOD_END>
