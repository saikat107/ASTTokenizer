<METHOD_START> @ Bean @ ConditionalOnMissingBean public org . org.neo4j . org.neo4j . org.neo4j . org.neo4j.ogm.config.Configuration org.neo4j.ogm.config.Configuration ( Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ) { org . org.neo4j . org.neo4j . org.neo4j . org.neo4j org.neo4j.ogm.config.Configuration = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties . createConfiguration ( ) ; return org.neo4j.ogm.config.Configuration ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.data.neo4j.SessionFactory org.springframework.boot.autoconfigure.data.neo4j.SessionFactory ( org . org.neo4j . org.neo4j . org.neo4j . org.neo4j org.neo4j.ogm.config.Configuration , ApplicationContext org.springframework.boot.autoconfigure.data.neo4j.ApplicationContext , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.data.neo4j.EventListener> < EventListener > > org.springframework.boot.autoconfigure.data.neo4j.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.data.neo4j.EventListener>> ) { SessionFactory org.springframework.boot.autoconfigure.data.neo4j.SessionFactory = new SessionFactory ( org.neo4j.ogm.config.Configuration , java.lang.String[] ( org.springframework.boot.autoconfigure.data.neo4j.ApplicationContext ) ) ; java.util.List<org.springframework.boot.autoconfigure.data.neo4j.EventListener> < EventListener > java.util.List<org.springframework.boot.autoconfigure.data.neo4j.EventListener> = org.springframework.boot.autoconfigure.data.neo4j.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.data.neo4j.EventListener>> . getIfAvailable ( ) ; if ( java.util.List<org.springframework.boot.autoconfigure.data.neo4j.EventListener> != null ) { for ( EventListener org.springframework.boot.autoconfigure.data.neo4j.EventListener : java.util.List<org.springframework.boot.autoconfigure.data.neo4j.EventListener> ) { org.springframework.boot.autoconfigure.data.neo4j.SessionFactory . register ( org.springframework.boot.autoconfigure.data.neo4j.EventListener ) ; } } return org.springframework.boot.autoconfigure.data.neo4j.SessionFactory ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( PlatformTransactionManager .class ) public org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager ( SessionFactory org.springframework.boot.autoconfigure.data.neo4j.SessionFactory , Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties , ObjectProvider < TransactionManagerCustomizers > org.springframework.boot.autoconfigure.data.neo4j.ObjectProvider<org.springframework.boot.autoconfigure.data.neo4j.TransactionManagerCustomizers> ) { return org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager ( new Neo4jTransactionManager ( org.springframework.boot.autoconfigure.data.neo4j.SessionFactory ) , org.springframework.boot.autoconfigure.data.neo4j.ObjectProvider<org.springframework.boot.autoconfigure.data.neo4j.TransactionManagerCustomizers> . getIfAvailable ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager ( Neo4jTransactionManager org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager , TransactionManagerCustomizers org.springframework.boot.autoconfigure.data.neo4j.TransactionManagerCustomizers ) { if ( org.springframework.boot.autoconfigure.data.neo4j.TransactionManagerCustomizers != null ) { org.springframework.boot.autoconfigure.data.neo4j.TransactionManagerCustomizers . customize ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager ) ; } return org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( ApplicationContext org.springframework.boot.autoconfigure.data.neo4j.ApplicationContext ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = EntityScanPackages . get ( org.springframework.boot.autoconfigure.data.neo4j.ApplicationContext ) . getPackageNames ( ) ; if ( java.util.List<java.lang.String> . boolean ( ) && AutoConfigurationPackages . has ( org.springframework.boot.autoconfigure.data.neo4j.ApplicationContext ) ) { java.util.List<java.lang.String> = AutoConfigurationPackages . get ( org.springframework.boot.autoconfigure.data.neo4j.ApplicationContext ) ; } return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.data.neo4j.OpenSessionInViewInterceptor org.springframework.boot.autoconfigure.data.neo4j.OpenSessionInViewInterceptor ( ) { return new OpenSessionInViewInterceptor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( InterceptorRegistry org.springframework.boot.autoconfigure.data.neo4j.InterceptorRegistry ) { org.springframework.boot.autoconfigure.data.neo4j.InterceptorRegistry . addWebRequestInterceptor ( org.springframework.boot.autoconfigure.data.neo4j.OpenSessionInViewInterceptor ( ) ) ; }  <METHOD_END>
