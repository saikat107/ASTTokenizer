<METHOD_START> public void ( ) { setOrder ( Ordered . LOWEST_PRECEDENCE - NUMBER ) ; setInitAnnotationType ( javax.annotation.PostConstruct .class ) ; setDestroyAnnotationType ( javax.annotation.PreDestroy .class ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( BeanFactory org.springframework.context.annotation.BeanFactory ) { Assert . notNull ( org.springframework.context.annotation.BeanFactory , STRING ) ; this . org.springframework.context.annotation.BeanFactory = org.springframework.context.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> public void void ( BeanFactory org.springframework.context.annotation.BeanFactory ) { Assert . notNull ( org.springframework.context.annotation.BeanFactory , STRING ) ; this . org.springframework.context.annotation.BeanFactory = org.springframework.context.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.context.annotation.BeanFactory ) { Assert . notNull ( org.springframework.context.annotation.BeanFactory , STRING ) ; this . org.springframework.context.annotation.BeanFactory = org.springframework.context.annotation.BeanFactory ; if ( this . org.springframework.context.annotation.BeanFactory == null ) { this . org.springframework.context.annotation.BeanFactory = org.springframework.context.annotation.BeanFactory ; } if ( org.springframework.context.annotation.BeanFactory instanceof ConfigurableBeanFactory ) { this . org.springframework.context.annotation.StringValueResolver = new EmbeddedValueResolver ( ( ConfigurableBeanFactory ) org.springframework.context.annotation.BeanFactory ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { super. postProcessMergedBeanDefinition ( org.springframework.context.annotation.RootBeanDefinition , java.lang.Class<> , java.lang.String ) ; if ( java.lang.Class<> != null ) { InjectionMetadata org.springframework.context.annotation.InjectionMetadata = org.springframework.context.annotation.InjectionMetadata ( java.lang.String , java.lang.Class<> , null ) ; org.springframework.context.annotation.InjectionMetadata . checkConfigMembers ( org.springframework.context.annotation.RootBeanDefinition ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) throws org.springframework.context.annotation.BeansException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.context.annotation.BeansException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.PropertyValues org.springframework.context.annotation.PropertyValues ( PropertyValues org.springframework.context.annotation.PropertyValues , java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.context.annotation.BeansException { InjectionMetadata org.springframework.context.annotation.InjectionMetadata = org.springframework.context.annotation.InjectionMetadata ( java.lang.String , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , org.springframework.context.annotation.PropertyValues ) ; try { org.springframework.context.annotation.InjectionMetadata . inject ( java.lang.Object , java.lang.String , org.springframework.context.annotation.PropertyValues ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( java.lang.String , STRING , java.lang.Throwable ) ; } return org.springframework.context.annotation.PropertyValues ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.InjectionMetadata org.springframework.context.annotation.InjectionMetadata ( java.lang.String java.lang.String , final java.lang.Class<?> < ? > java.lang.Class<?> , PropertyValues org.springframework.context.annotation.PropertyValues ) { java.lang.String java.lang.String = ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String : java.lang.Class<> . java.lang.String ( ) ) ; InjectionMetadata org.springframework.context.annotation.InjectionMetadata = this . java.util.Map<java.lang.String,org.springframework.context.annotation.InjectionMetadata> . get ( java.lang.String ) ; if ( InjectionMetadata . needsRefresh ( org.springframework.context.annotation.InjectionMetadata , java.lang.Class<> ) ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.context.annotation.InjectionMetadata> ) { org.springframework.context.annotation.InjectionMetadata = this . java.util.Map<java.lang.String,org.springframework.context.annotation.InjectionMetadata> . get ( java.lang.String ) ; if ( InjectionMetadata . needsRefresh ( org.springframework.context.annotation.InjectionMetadata , java.lang.Class<> ) ) { if ( org.springframework.context.annotation.InjectionMetadata != null ) { org.springframework.context.annotation.InjectionMetadata . clear ( org.springframework.context.annotation.PropertyValues ) ; } org.springframework.context.annotation.InjectionMetadata = org.springframework.context.annotation.InjectionMetadata ( java.lang.Class<> ) ; this . java.util.Map<java.lang.String,org.springframework.context.annotation.InjectionMetadata> . put ( java.lang.String , org.springframework.context.annotation.InjectionMetadata ) ; } } } return org.springframework.context.annotation.InjectionMetadata ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.InjectionMetadata org.springframework.context.annotation.InjectionMetadata ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.LinkedList<InjectionMetadata.InjectedElement> < InjectionMetadata . InjectionMetadata > java.util.LinkedList<InjectionMetadata.InjectedElement> = new java.util.LinkedList<InjectionMetadata.InjectedElement> <> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> ; do { final java.util.LinkedList<InjectionMetadata.InjectedElement> < InjectionMetadata . InjectionMetadata > java.util.LinkedList<InjectionMetadata.InjectedElement> = new java.util.LinkedList<InjectionMetadata.InjectedElement> <> ( ) ; ReflectionUtils . doWithLocalFields ( java.lang.Class<> , new ReflectionUtils . ReflectionUtils ( ) { @ java.lang.Override public void void ( java.lang.reflect.Field java.lang.reflect.Field ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { if ( java.lang.Class<> != null && java.lang.reflect.Field . boolean ( java.lang.Class<> ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.WebServiceRefElement ( java.lang.reflect.Field , java.lang.reflect.Field , null ) ) ; } else if ( java.lang.Class<> != null && java.lang.reflect.Field . boolean ( java.lang.Class<> ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.EjbRefElement ( java.lang.reflect.Field , java.lang.reflect.Field , null ) ) ; } else if ( java.lang.reflect.Field . boolean ( javax.annotation.Resource .class ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.reflect.Field . java.lang.Class<?> ( ) . java.lang.String ( ) ) ) { java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.ResourceElement ( java.lang.reflect.Field , java.lang.reflect.Field , null ) ) ; } } } } ) ; ReflectionUtils . doWithLocalMethods ( java.lang.Class<> , new ReflectionUtils . ReflectionUtils ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { java.lang.reflect.Method java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; if ( ! BridgeMethodResolver . isVisibilityBridgeMethodPair ( java.lang.reflect.Method , java.lang.reflect.Method ) ) { return; } if ( java.lang.reflect.Method . boolean ( ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ) ) { if ( java.lang.Class<> != null && java.lang.reflect.Method . boolean ( java.lang.Class<> ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( java.lang.reflect.Method . int ( ) != NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method ) ; } java.beans.PropertyDescriptor java.beans.PropertyDescriptor = BeanUtils . findPropertyForMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.WebServiceRefElement ( java.lang.reflect.Method , java.lang.reflect.Method , java.beans.PropertyDescriptor ) ) ; } else if ( java.lang.Class<> != null && java.lang.reflect.Method . boolean ( java.lang.Class<> ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( java.lang.reflect.Method . int ( ) != NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method ) ; } java.beans.PropertyDescriptor java.beans.PropertyDescriptor = BeanUtils . findPropertyForMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.EjbRefElement ( java.lang.reflect.Method , java.lang.reflect.Method , java.beans.PropertyDescriptor ) ) ; } else if ( java.lang.reflect.Method . boolean ( javax.annotation.Resource .class ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; if ( java.lang.Class<?>[] . int != NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method ) ; } if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.Class<?>[] [ NUMBER ] . java.lang.String ( ) ) ) { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = BeanUtils . findPropertyForMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.ResourceElement ( java.lang.reflect.Method , java.lang.reflect.Method , java.beans.PropertyDescriptor ) ) ; } } } } } ) ; java.util.LinkedList<InjectionMetadata.InjectedElement> . addAll ( NUMBER , java.util.LinkedList<InjectionMetadata.InjectedElement> ) ; java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } while ( java.lang.Class<> != null && java.lang.Class<> != java.lang.Object .class ); return new InjectionMetadata ( java.lang.Class<> , java.util.LinkedList<InjectionMetadata.InjectedElement> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Field java.lang.reflect.Field ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { if ( java.lang.Class<> != null && java.lang.reflect.Field . boolean ( java.lang.Class<> ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.WebServiceRefElement ( java.lang.reflect.Field , java.lang.reflect.Field , null ) ) ; } else if ( java.lang.Class<> != null && java.lang.reflect.Field . boolean ( java.lang.Class<> ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.EjbRefElement ( java.lang.reflect.Field , java.lang.reflect.Field , null ) ) ; } else if ( java.lang.reflect.Field . boolean ( javax.annotation.Resource .class ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Field . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.reflect.Field . java.lang.Class<?> ( ) . java.lang.String ( ) ) ) { java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.ResourceElement ( java.lang.reflect.Field , java.lang.reflect.Field , null ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { java.lang.reflect.Method java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; if ( ! BridgeMethodResolver . isVisibilityBridgeMethodPair ( java.lang.reflect.Method , java.lang.reflect.Method ) ) { return; } if ( java.lang.reflect.Method . boolean ( ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ) ) { if ( java.lang.Class<> != null && java.lang.reflect.Method . boolean ( java.lang.Class<> ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( java.lang.reflect.Method . int ( ) != NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method ) ; } java.beans.PropertyDescriptor java.beans.PropertyDescriptor = BeanUtils . findPropertyForMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.WebServiceRefElement ( java.lang.reflect.Method , java.lang.reflect.Method , java.beans.PropertyDescriptor ) ) ; } else if ( java.lang.Class<> != null && java.lang.reflect.Method . boolean ( java.lang.Class<> ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( java.lang.reflect.Method . int ( ) != NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method ) ; } java.beans.PropertyDescriptor java.beans.PropertyDescriptor = BeanUtils . findPropertyForMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.EjbRefElement ( java.lang.reflect.Method , java.lang.reflect.Method , java.beans.PropertyDescriptor ) ) ; } else if ( java.lang.reflect.Method . boolean ( javax.annotation.Resource .class ) ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; if ( java.lang.Class<?>[] . int != NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method ) ; } if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.Class<?>[] [ NUMBER ] . java.lang.String ( ) ) ) { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = BeanUtils . findPropertyForMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; java.util.LinkedList<InjectionMetadata.InjectedElement> . add ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.ResourceElement ( java.lang.reflect.Method , java.lang.reflect.Method , java.beans.PropertyDescriptor ) ) ; } } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( final org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement , final java.lang.String java.lang.String ) { TargetSource org.springframework.context.annotation.TargetSource = new TargetSource ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.Class<> ; } @ java.lang.Override public boolean boolean ( ) { return false ; } @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return java.lang.Object ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement , java.lang.String ) ; } @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} } ; ProxyFactory org.springframework.context.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.context.annotation.ProxyFactory . setTargetSource ( org.springframework.context.annotation.TargetSource ) ; if ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.Class<> . boolean ( ) ) { org.springframework.context.annotation.ProxyFactory . addInterface ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.Class<> ) ; } java.lang.ClassLoader java.lang.ClassLoader = ( this . org.springframework.context.annotation.BeanFactory instanceof ConfigurableBeanFactory ? ( ( ConfigurableBeanFactory ) this . org.springframework.context.annotation.BeanFactory ) . getBeanClassLoader ( ) : null ) ; return org.springframework.context.annotation.ProxyFactory . getProxy ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return java.lang.Object ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement , java.lang.String java.lang.String ) throws org.springframework.context.annotation.BeansException { if ( StringUtils . hasLength ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.String ) ) { return this . org.springframework.context.annotation.BeanFactory . getBean ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.String , org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.Class<> ) ; } if ( this . boolean ) { return this . org.springframework.context.annotation.BeanFactory . getBean ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.String , org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.Class<> ) ; } if ( this . org.springframework.context.annotation.BeanFactory == null ) { throw new NoSuchBeanDefinitionException ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.Class<> , STRING ) ; } return java.lang.Object ( this . org.springframework.context.annotation.BeanFactory , org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( BeanFactory org.springframework.context.annotation.BeanFactory , org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement , java.lang.String java.lang.String )			throws org.springframework.context.annotation.BeansException { java.lang.Object java.lang.Object ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ; java.lang.String java.lang.String = org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.String ; if ( this . boolean && org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . boolean && org.springframework.context.annotation.BeanFactory instanceof AutowireCapableBeanFactory && ! org.springframework.context.annotation.BeanFactory . containsBean ( java.lang.String ) ) { java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; java.lang.Object = ( ( AutowireCapableBeanFactory ) org.springframework.context.annotation.BeanFactory ) . resolveDependency ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . org.springframework.context.annotation.DependencyDescriptor ( ) , java.lang.String , java.util.Set<java.lang.String> , null ) ; } else { java.lang.Object = org.springframework.context.annotation.BeanFactory . getBean ( java.lang.String , org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupElement . java.lang.Class<> ) ; java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) ; } if ( org.springframework.context.annotation.BeanFactory instanceof ConfigurableBeanFactory ) { ConfigurableBeanFactory org.springframework.context.annotation.ConfigurableBeanFactory = ( ConfigurableBeanFactory ) org.springframework.context.annotation.BeanFactory ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( org.springframework.context.annotation.ConfigurableBeanFactory . containsBean ( java.lang.String ) ) { org.springframework.context.annotation.ConfigurableBeanFactory . registerDependentBean ( java.lang.String , java.lang.String ) ; } } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Member java.lang.reflect.Member , java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { super( java.lang.reflect.Member , java.beans.PropertyDescriptor ); }  <METHOD_END>
<METHOD_START> public final java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public final java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public final org.springframework.context.annotation.DependencyDescriptor org.springframework.context.annotation.DependencyDescriptor ( ) { if ( this . isField ) { return new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupDependencyDescriptor ( ( java.lang.reflect.Field ) this . member , this . java.lang.Class<> ) ; } else { return new org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.LookupDependencyDescriptor ( ( java.lang.reflect.Method ) this . member , this . java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Member java.lang.reflect.Member , java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { super( java.lang.reflect.Member , java.beans.PropertyDescriptor ); javax.annotation.Resource javax.annotation.Resource = java.lang.reflect.AnnotatedElement . javax.annotation.Resource ( javax.annotation.Resource .class ) ; java.lang.String java.lang.String = javax.annotation.Resource . java.lang.String ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = javax.annotation.Resource . java.lang.Class<?> ( ) ; this . boolean = ! StringUtils . hasLength ( java.lang.String ) ; if ( this . boolean ) { java.lang.String = this . member . getName ( ) ; if ( this . member instanceof java.lang.reflect.Method && java.lang.String . boolean ( STRING ) && java.lang.String . int ( ) > NUMBER ) { java.lang.String = java.beans.Introspector . java.lang.String ( java.lang.String . java.lang.String ( NUMBER ) ) ; } } else if ( org.springframework.context.annotation.StringValueResolver != null ) { java.lang.String = org.springframework.context.annotation.StringValueResolver . resolveStringValue ( java.lang.String ) ; } if ( java.lang.Class<> != null && java.lang.Object .class != java.lang.Class<> ) { checkResourceType ( java.lang.Class<> ) ; } else { java.lang.Class<?> = getResourceType ( ) ; } this . java.lang.String = java.lang.String ; this . java.lang.Class<?> = java.lang.Class<> ; java.lang.String java.lang.String = ( java.lang.reflect.Method != null ? ( java.lang.String ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , javax.annotation.Resource ) : null ) ; this . java.lang.String = ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String : javax.annotation.Resource . java.lang.String ( ) ) ; Lazy org.springframework.context.annotation.Lazy = java.lang.reflect.AnnotatedElement . T ( Lazy .class ) ; this . boolean = ( org.springframework.context.annotation.Lazy != null && org.springframework.context.annotation.Lazy . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return ( this . boolean ? java.lang.Object ( this , java.lang.String ) : java.lang.Object ( this , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Member java.lang.reflect.Member , java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { super( java.lang.reflect.Member , java.beans.PropertyDescriptor ); javax.xml.ws.WebServiceRef javax.xml.ws.WebServiceRef = java.lang.reflect.AnnotatedElement . javax.xml.ws.WebServiceRef ( javax.xml.ws.WebServiceRef .class ) ; java.lang.String java.lang.String = javax.xml.ws.WebServiceRef . java.lang.String ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = javax.xml.ws.WebServiceRef . java.lang.Class<?> ( ) ; this . boolean = ! StringUtils . hasLength ( java.lang.String ) ; if ( this . boolean ) { java.lang.String = this . member . getName ( ) ; if ( this . member instanceof java.lang.reflect.Method && java.lang.String . boolean ( STRING ) && java.lang.String . int ( ) > NUMBER ) { java.lang.String = java.beans.Introspector . java.lang.String ( java.lang.String . java.lang.String ( NUMBER ) ) ; } } if ( java.lang.Class<> != null && java.lang.Object .class != java.lang.Class<> ) { checkResourceType ( java.lang.Class<> ) ; } else { java.lang.Class<?> = getResourceType ( ) ; } this . java.lang.String = java.lang.String ; this . java.lang.Class<?> = java.lang.Class<> ; if ( javax.xml.ws.Service .class . boolean ( java.lang.Class<> ) ) { this . java.lang.Class<?> = java.lang.Class<> ; } else { this . java.lang.Class<?> = javax.xml.ws.WebServiceRef . java.lang.Class<? extends javax.xml.ws.Service> ( ) ; } this . java.lang.String = javax.xml.ws.WebServiceRef . java.lang.String ( ) ; this . java.lang.String = javax.xml.ws.WebServiceRef . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { javax.xml.ws.Service javax.xml.ws.Service ; try { javax.xml.ws.Service = ( javax.xml.ws.Service ) java.lang.Object ( this , java.lang.String ) ; } catch ( NoSuchBeanDefinitionException org.springframework.context.annotation.NoSuchBeanDefinitionException ) { if ( javax.xml.ws.Service .class == this . java.lang.Class<> ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.String + STRING + STRING + STRING + STRING ) ; } if ( StringUtils . hasLength ( this . java.lang.String ) ) { try { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = this . java.lang.Class<> . java.lang.reflect.Constructor<> ( java.net.URL .class , javax.xml.namespace.QName .class ) ; javax.xml.ws.WebServiceClient javax.xml.ws.WebServiceClient = this . java.lang.Class<> . javax.xml.ws.WebServiceClient ( javax.xml.ws.WebServiceClient .class ) ; if ( javax.xml.ws.WebServiceClient == null ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.Class<> . java.lang.String ( ) + STRING ) ; } javax.xml.ws.Service = ( javax.xml.ws.Service ) BeanUtils . instantiateClass ( java.lang.reflect.Constructor<> , new java.net.URL ( this . java.lang.String ) , new javax.xml.namespace.QName ( javax.xml.ws.WebServiceClient . java.lang.String ( ) , javax.xml.ws.WebServiceClient . java.lang.String ( ) ) ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.Class<> . java.lang.String ( ) + STRING + this . java.lang.String + STRING ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.String + STRING ) ; } } else { javax.xml.ws.Service = ( javax.xml.ws.Service ) BeanUtils . instantiateClass ( this . java.lang.Class<> ) ; } } return javax.xml.ws.Service . getPort ( this . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Member java.lang.reflect.Member , java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { super( java.lang.reflect.Member , java.beans.PropertyDescriptor ); EJB org.springframework.context.annotation.EJB = java.lang.reflect.AnnotatedElement . T ( EJB .class ) ; java.lang.String java.lang.String = org.springframework.context.annotation.EJB . beanName ( ) ; java.lang.String java.lang.String = org.springframework.context.annotation.EJB . name ( ) ; this . boolean = ! StringUtils . hasLength ( java.lang.String ) ; if ( this . boolean ) { java.lang.String = this . member . getName ( ) ; if ( this . member instanceof java.lang.reflect.Method && java.lang.String . boolean ( STRING ) && java.lang.String . int ( ) > NUMBER ) { java.lang.String = java.beans.Introspector . java.lang.String ( java.lang.String . java.lang.String ( NUMBER ) ) ; } } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.annotation.EJB . beanInterface ( ) ; if ( java.lang.Class<> != null && java.lang.Object .class != java.lang.Class<> ) { checkResourceType ( java.lang.Class<> ) ; } else { java.lang.Class<?> = getResourceType ( ) ; } this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.String = org.springframework.context.annotation.EJB . mappedName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { if ( StringUtils . hasLength ( this . java.lang.String ) ) { if ( org.springframework.context.annotation.BeanFactory != null && org.springframework.context.annotation.BeanFactory . containsBean ( this . java.lang.String ) ) { java.lang.Object java.lang.Object = org.springframework.context.annotation.BeanFactory . getBean ( this . java.lang.String , this . java.lang.Class<> ) ; if ( org.springframework.context.annotation.BeanFactory instanceof ConfigurableBeanFactory ) { ( ( ConfigurableBeanFactory ) org.springframework.context.annotation.BeanFactory ) . registerDependentBean ( this . java.lang.String , java.lang.String ) ; } return java.lang.Object ; } else if ( this . boolean && ! StringUtils . hasLength ( this . java.lang.String ) ) { throw new NoSuchBeanDefinitionException ( this . java.lang.String , STRING ) ; } } return java.lang.Object ( this , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Field java.lang.reflect.Field , java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.reflect.Field , true ); this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { super( new MethodParameter ( java.lang.reflect.Method , NUMBER ) , true ); this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
