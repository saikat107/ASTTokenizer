<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.data.cassandra.config.ConfigurableListableBeanFactory ) throws org.springframework.data.cassandra.config.BeansException { if ( ! ( org.springframework.data.cassandra.config.ConfigurableListableBeanFactory instanceof BeanDefinitionRegistry ) ) { return; } void ( ( BeanDefinitionRegistry ) org.springframework.data.cassandra.config.ConfigurableListableBeanFactory , org.springframework.data.cassandra.config.ConfigurableListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.data.cassandra.config.BeanDefinitionRegistry , ListableBeanFactory org.springframework.data.cassandra.config.ListableBeanFactory ) { BeanDefinitionHolder [] org.springframework.data.cassandra.config.BeanDefinitionHolder[] = getBeanDefinitionsOfType ( org.springframework.data.cassandra.config.BeanDefinitionRegistry , org.springframework.data.cassandra.config.ListableBeanFactory , CassandraOperations .class , true , true ) ; if ( templateBeans . length >= NUMBER ) { return; } java.lang.String java.lang.String = java.lang.String ( org.springframework.data.cassandra.config.BeanDefinitionRegistry , org.springframework.data.cassandra.config.ListableBeanFactory ) ; BeanDefinitionHolder [] org.springframework.data.cassandra.config.BeanDefinitionHolder[] = getBeanDefinitionsOfType ( org.springframework.data.cassandra.config.BeanDefinitionRegistry , org.springframework.data.cassandra.config.ListableBeanFactory , MappingCassandraConverter .class , true , false ) ; if ( converterBeans . length > NUMBER ) { throw java.lang.IllegalStateException ( converterBeans . length , CassandraConverter .class , CassandraTemplate .class ) ; } if ( converterBeans . length == NUMBER ) { org.springframework.data.cassandra.config.BeanDefinitionHolder ( org.springframework.data.cassandra.config.BeanDefinitionRegistry , java.lang.String , org.springframework.data.cassandra.config.BeanDefinitionHolder[] [ NUMBER ] . getBeanName ( ) ) ; return; } BeanDefinitionHolder [] org.springframework.data.cassandra.config.BeanDefinitionHolder[] = getBeanDefinitionsOfType ( org.springframework.data.cassandra.config.BeanDefinitionRegistry , org.springframework.data.cassandra.config.ListableBeanFactory , CassandraMappingContext .class , true , false ) ; if ( contextBeans . length > NUMBER ) { throw java.lang.IllegalStateException ( contextBeans . length , MappingCassandraConverter .class , CassandraMappingContext .class ) ; } BeanDefinitionHolder org.springframework.data.cassandra.config.BeanDefinitionHolder = contextBeans . length == NUMBER ? org.springframework.data.cassandra.config.BeanDefinitionHolder[] [ NUMBER ] : org.springframework.data.cassandra.config.BeanDefinitionHolder ( org.springframework.data.cassandra.config.BeanDefinitionRegistry ) ; BeanDefinitionHolder org.springframework.data.cassandra.config.BeanDefinitionHolder = org.springframework.data.cassandra.config.BeanDefinitionHolder ( org.springframework.data.cassandra.config.BeanDefinitionRegistry , org.springframework.data.cassandra.config.BeanDefinitionHolder . getBeanName ( ) ) ; org.springframework.data.cassandra.config.BeanDefinitionHolder ( org.springframework.data.cassandra.config.BeanDefinitionRegistry , java.lang.String , org.springframework.data.cassandra.config.BeanDefinitionHolder . getBeanName ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( BeanDefinitionRegistry org.springframework.data.cassandra.config.BeanDefinitionRegistry , ListableBeanFactory org.springframework.data.cassandra.config.ListableBeanFactory ) { BeanDefinitionHolder [] org.springframework.data.cassandra.config.BeanDefinitionHolder[] = getBeanDefinitionsOfType ( org.springframework.data.cassandra.config.BeanDefinitionRegistry , org.springframework.data.cassandra.config.ListableBeanFactory , Session .class , true , true ) ; if ( sessionBeans . length == NUMBER ) { return org.springframework.data.cassandra.config.BeanDefinitionHolder[] [ NUMBER ] . getBeanName ( ) ; } throw java.lang.IllegalStateException ( sessionBeans . length , CassandraTemplate .class , Session .class , CassandraSessionFactoryBean .class ) ; }  <METHOD_END>
<METHOD_START> private java.lang.IllegalStateException java.lang.IllegalStateException ( int int , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , int , int == NUMBER ? STRING : STRING , StringUtils . collectionToCommaDelimitedString ( java.util.Collection<java.lang.String> ( java.lang.Class<?>[] ) ) , int == NUMBER ? STRING : STRING , java.lang.Class<> . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.config.BeanDefinitionHolder org.springframework.data.cassandra.config.BeanDefinitionHolder ( BeanDefinitionRegistry org.springframework.data.cassandra.config.BeanDefinitionRegistry ) { BeanDefinitionHolder org.springframework.data.cassandra.config.BeanDefinitionHolder = new BeanDefinitionHolder ( BeanDefinitionBuilder . genericBeanDefinition ( BasicCassandraMappingContext .class ) . getBeanDefinition ( ) , DefaultBeanNames . CONTEXT ) ; org.springframework.data.cassandra.config.BeanDefinitionRegistry . registerBeanDefinition ( org.springframework.data.cassandra.config.BeanDefinitionHolder . getBeanName ( ) , org.springframework.data.cassandra.config.BeanDefinitionHolder . getBeanDefinition ( ) ) ; return org.springframework.data.cassandra.config.BeanDefinitionHolder ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.config.BeanDefinitionHolder org.springframework.data.cassandra.config.BeanDefinitionHolder ( BeanDefinitionRegistry org.springframework.data.cassandra.config.BeanDefinitionRegistry , java.lang.String java.lang.String ) { BeanDefinition org.springframework.data.cassandra.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( MappingCassandraConverter .class ) . addConstructorArgReference ( java.lang.String ) . getBeanDefinition ( ) ; BeanDefinitionHolder org.springframework.data.cassandra.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.data.cassandra.config.BeanDefinition , DefaultBeanNames . CONVERTER ) ; org.springframework.data.cassandra.config.BeanDefinitionRegistry . registerBeanDefinition ( org.springframework.data.cassandra.config.BeanDefinitionHolder . getBeanName ( ) , org.springframework.data.cassandra.config.BeanDefinitionHolder . getBeanDefinition ( ) ) ; return org.springframework.data.cassandra.config.BeanDefinitionHolder ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.config.BeanDefinitionHolder org.springframework.data.cassandra.config.BeanDefinitionHolder ( BeanDefinitionRegistry org.springframework.data.cassandra.config.BeanDefinitionRegistry , java.lang.String java.lang.String , java.lang.String java.lang.String ) { BeanDefinition org.springframework.data.cassandra.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( CassandraTemplate .class ) . addConstructorArgReference ( java.lang.String ) . addConstructorArgReference ( java.lang.String ) . getBeanDefinition ( ) ; BeanDefinitionHolder org.springframework.data.cassandra.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.data.cassandra.config.BeanDefinition , DefaultBeanNames . DATA_TEMPLATE ) ; org.springframework.data.cassandra.config.BeanDefinitionRegistry . registerBeanDefinition ( org.springframework.data.cassandra.config.BeanDefinitionHolder . getBeanName ( ) , org.springframework.data.cassandra.config.BeanDefinitionHolder . getBeanDefinition ( ) ) ; return org.springframework.data.cassandra.config.BeanDefinitionHolder ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.List<java.lang.String> . boolean ( java.lang.Class<> . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
