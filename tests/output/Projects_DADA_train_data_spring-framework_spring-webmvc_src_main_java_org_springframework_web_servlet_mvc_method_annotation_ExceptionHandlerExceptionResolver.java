<METHOD_START> public void ( ) { StringHttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.StringHttpMessageConverter = new StringHttpMessageConverter ( ) ; org.springframework.web.servlet.mvc.method.annotation.StringHttpMessageConverter . setWriteAcceptCharset ( false ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList <> ( ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new ByteArrayHttpMessageConverter ( ) ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( org.springframework.web.servlet.mvc.method.annotation.StringHttpMessageConverter ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new SourceHttpMessageConverter <> ( ) ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new AllEncompassingFormHttpMessageConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) { this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) { return this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) { if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> == null ) { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite = null ; } else { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite . addResolvers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ) { this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) { return this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ) { if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> == null ) { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite = null ; } else { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite = new HandlerMethodReturnValueHandlerComposite ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite . addHandlers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( ) { return this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> public void void ( ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ) { this . org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager = org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<?>> < ResponseBodyAdvice < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<?>> ) { this . java.util.List<java.lang.Object> . void ( ) ; if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<?>> != null ) { this . java.util.List<java.lang.Object> . boolean ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice<?>> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.web.servlet.mvc.method.annotation.ApplicationContext ) { this . org.springframework.web.servlet.mvc.method.annotation.ApplicationContext = org.springframework.web.servlet.mvc.method.annotation.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.mvc.method.annotation.ApplicationContext org.springframework.web.servlet.mvc.method.annotation.ApplicationContext ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; if ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite == null ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) . addResolvers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) ; } if ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite == null ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite = new HandlerMethodReturnValueHandlerComposite ( ) . addHandlers ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( org.springframework.web.servlet.mvc.method.annotation.ApplicationContext ( ) == null ) { return; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.web.servlet.mvc.method.annotation.ApplicationContext ( ) ) ; } java.util.List<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean> < ControllerAdviceBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean> = ControllerAdviceBean . findAnnotatedBeans ( org.springframework.web.servlet.mvc.method.annotation.ApplicationContext ( ) ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean> ) ; for ( ControllerAdviceBean org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean : java.util.List<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean> ) { ExceptionHandlerMethodResolver org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver = new ExceptionHandlerMethodResolver ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean . getBeanType ( ) ) ; if ( org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver . hasExceptionMappings ( ) ) { this . java.util.Map<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> . put ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean , org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean ) ; } } if ( ResponseBodyAdvice .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean . getBeanType ( ) ) ) { this . java.util.List<java.lang.Object> . boolean ( org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean ) ; } } } }  <METHOD_END>
<METHOD_START> public java.util.Map<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> < ControllerAdviceBean , ExceptionHandlerMethodResolver > java.util.Map<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> ( ) { return java.util.Collections . java.util.Map<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> ( this . java.util.Map<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new SessionAttributeMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RequestAttributeMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletRequestMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletResponseMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new RedirectAttributesMethodArgumentResolver ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ModelMethodProcessor ( ) ) ; if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) != null ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . addAll ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ( ) ) ; } return java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ModelAndViewMethodReturnValueHandler ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ModelMethodProcessor ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ViewMethodReturnValueHandler ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new HttpEntityMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( ) , this . org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager , this . java.util.List<java.lang.Object> ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ModelAttributeMethodProcessor ( false ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new RequestResponseBodyMethodProcessor ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( ) , this . org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager , this . java.util.List<java.lang.Object> ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ViewNameMethodReturnValueHandler ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new MapMethodProcessor ( ) ) ; if ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) != null ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . addAll ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ( ) ) ; } java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> . add ( new ModelAttributeMethodProcessor ( true ) ) ; return java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.Exception java.lang.Exception ) { ServletInvocableHandlerMethod org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod = org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.Exception ) ; if ( org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod == null ) { return null ; } org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod . setHandlerMethodArgumentResolvers ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolverComposite ) ; org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod . setHandlerMethodReturnValueHandlers ( this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite ) ; ServletWebRequest org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) ; ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod ) ; } java.lang.Throwable java.lang.Throwable = java.lang.Exception . java.lang.Throwable ( ) ; if ( java.lang.Throwable != null ) { org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod . invokeAndHandle ( org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , java.lang.Exception , java.lang.Throwable , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; } else { org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod . invokeAndHandle ( org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable != java.lang.Exception && logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod , java.lang.Throwable ) ; } return null ; } if ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) { return new ModelAndView ( ) ; } else { ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap = org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) ; HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getStatus ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = new ModelAndView ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getViewName ( ) , org.springframework.web.servlet.mvc.method.annotation.ModelMap , org.springframework.web.servlet.mvc.method.annotation.HttpStatus ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndView . setViewName ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getViewName ( ) ) ; if ( ! org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isViewReference ( ) ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndView . setView ( ( View ) org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getView ( ) ) ; } if ( org.springframework.web.servlet.mvc.method.annotation.ModelMap instanceof RedirectAttributes ) { java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( ( RedirectAttributes ) org.springframework.web.servlet.mvc.method.annotation.ModelMap ) . getFlashAttributes ( ) ; org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest = org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . getNativeRequest ( HttpServletRequest .class ) ; RequestContextUtils . getOutputFlashMap ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) . putAll ( java.util.Map<java.lang.String,> ) ; } return org.springframework.web.servlet.mvc.method.annotation.ModelAndView ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod ( HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.Exception java.lang.Exception ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod != null ? org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getBeanType ( ) : null ) ; if ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod != null ) { ExceptionHandlerMethodResolver org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver = this . java.util.Map<java.lang.Class<?>,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> . get ( java.lang.Class<> ) ; if ( org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver == null ) { org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver = new ExceptionHandlerMethodResolver ( java.lang.Class<> ) ; this . java.util.Map<java.lang.Class<?>,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> . put ( java.lang.Class<> , org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver ) ; } java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver . resolveMethod ( java.lang.Exception ) ; if ( java.lang.reflect.Method != null ) { return new ServletInvocableHandlerMethod ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getBean ( ) , java.lang.reflect.Method ) ; } } for ( java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> < ControllerAdviceBean , ExceptionHandlerMethodResolver > java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> : this . java.util.Map<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> . entrySet ( ) ) { if ( java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> . getKey ( ) . isApplicableToBeanType ( java.lang.Class<> ) ) { ExceptionHandlerMethodResolver org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver = java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> . getValue ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver . resolveMethod ( java.lang.Exception ) ; if ( java.lang.reflect.Method != null ) { return new ServletInvocableHandlerMethod ( java.util.Map.Entry<org.springframework.web.servlet.mvc.method.annotation.ControllerAdviceBean,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerMethodResolver> . getKey ( ) . resolveBean ( ) , java.lang.reflect.Method ) ; } } } return null ; }  <METHOD_END>
