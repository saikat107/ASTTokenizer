<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( this . boolean && ! StringUtils . hasLength ( java.lang.String ) ) { void ( null ) ; } else if ( java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } else if ( boolean ( java.lang.String ) ) { void ( java.lang.String ) ; } else if ( java.lang.String . int ( ) == NUMBER ) { void ( java.lang.Character . java.lang.Character ( java.lang.String . char ( NUMBER ) ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.String . int ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.Object java.lang.Object = java.lang.Object ( ) ; return ( java.lang.Object != null ? java.lang.Object . java.lang.String ( ) : STRING ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return ( java.lang.String . boolean ( java.lang.String ) && java.lang.String . int ( ) == int ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { int int = java.lang.Integer . int ( java.lang.String . java.lang.String ( java.lang.String . int ( ) ) , NUMBER ) ; void ( java.lang.Character . java.lang.Character ( ( char ) int ) ) ; }  <METHOD_END>
