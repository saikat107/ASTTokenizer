<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.util.ResizableByteArrayOutputStream = new ResizableByteArrayOutputStream ( int ) ; this . byte[] = STRING . byte[] ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( int , this . org.springframework.util.ResizableByteArrayOutputStream . capacity ( ) ) ; this . org.springframework.util.ResizableByteArrayOutputStream . write ( byte[] ) ; int int = NUMBER ; this . org.springframework.util.ResizableByteArrayOutputStream . resize ( int ) ; assertEquals ( int , this . org.springframework.util.ResizableByteArrayOutputStream . capacity ( ) ) ; void ( this . org.springframework.util.ResizableByteArrayOutputStream ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( int , this . org.springframework.util.ResizableByteArrayOutputStream . capacity ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.util.ResizableByteArrayOutputStream . write ( NUMBER ) ; } assertEquals ( NUMBER , this . org.springframework.util.ResizableByteArrayOutputStream . capacity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( int , this . org.springframework.util.ResizableByteArrayOutputStream . capacity ( ) ) ; this . org.springframework.util.ResizableByteArrayOutputStream . write ( byte[] ) ; this . org.springframework.util.ResizableByteArrayOutputStream . grow ( NUMBER ) ; assertEquals ( this . byte[] . int + NUMBER , this . org.springframework.util.ResizableByteArrayOutputStream . capacity ( ) ) ; void ( this . org.springframework.util.ResizableByteArrayOutputStream ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.ResizableByteArrayOutputStream . write ( byte[] ) ; void ( this . org.springframework.util.ResizableByteArrayOutputStream ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { this . org.springframework.util.ResizableByteArrayOutputStream . write ( byte[] ) ; this . org.springframework.util.ResizableByteArrayOutputStream . resize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ResizableByteArrayOutputStream org.springframework.util.ResizableByteArrayOutputStream ) { assertArrayEquals ( byte[] , org.springframework.util.ResizableByteArrayOutputStream . toByteArray ( ) ) ; }  <METHOD_END>
