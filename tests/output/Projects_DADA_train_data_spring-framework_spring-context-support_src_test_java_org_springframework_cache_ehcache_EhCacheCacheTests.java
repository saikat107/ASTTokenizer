<METHOD_START> @ Before public void void ( ) { org.springframework.cache.ehcache.CacheManager = new CacheManager ( new Configuration ( ) . name ( STRING ) . defaultCache ( new CacheConfiguration ( STRING , NUMBER ) ) ) ; org.springframework.cache.ehcache.Ehcache = new net . net . net . net ( new CacheConfiguration ( CACHE_NAME , NUMBER ) ) ; org.springframework.cache.ehcache.CacheManager . addCache ( org.springframework.cache.ehcache.Ehcache ) ; org.springframework.cache.ehcache.EhCacheCache = new EhCacheCache ( org.springframework.cache.ehcache.Ehcache ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.cache.ehcache.CacheManager . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cache.ehcache.EhCacheCache org.springframework.cache.ehcache.EhCacheCache ( ) { return org.springframework.cache.ehcache.EhCacheCache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cache.ehcache.Ehcache org.springframework.cache.ehcache.Ehcache ( ) { return org.springframework.cache.ehcache.Ehcache ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . LONG_RUNNING ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; Element org.springframework.cache.ehcache.Element = new Element ( java.lang.String , java.lang.String ) ; org.springframework.cache.ehcache.Element . setTimeToLive ( NUMBER ) ; org.springframework.cache.ehcache.Ehcache . put ( org.springframework.cache.ehcache.Element ) ; assertEquals ( java.lang.String , org.springframework.cache.ehcache.EhCacheCache . get ( java.lang.String ) . get ( ) ) ; java.lang.Thread . void ( NUMBER * NUMBER ) ; assertNull ( org.springframework.cache.ehcache.EhCacheCache . get ( java.lang.String ) ) ; }  <METHOD_END>
