<METHOD_START> @ Before public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.jpa.repository.support.PersistenceExceptionTranslator> < java.lang.String , PersistenceExceptionTranslator > java.util.Map<java.lang.String,org.springframework.data.jpa.repository.support.PersistenceExceptionTranslator> = new java.util.HashMap<java.lang.String,org.springframework.data.jpa.repository.support.PersistenceExceptionTranslator> <> ( ) ; java.util.Map<java.lang.String,org.springframework.data.jpa.repository.support.PersistenceExceptionTranslator> . put ( STRING , org.springframework.data.jpa.repository.support.PersistenceExceptionTranslator ) ; when ( org.springframework.data.jpa.repository.support.ListableBeanFactory . getBeansOfType ( eq ( PersistenceExceptionTranslator .class ) , anyBoolean ( ) , anyBoolean ( ) ) ) . thenReturn ( java.util.Map<java.lang.String,org.springframework.data.jpa.repository.support.PersistenceExceptionTranslator> ) ; when ( org.springframework.data.jpa.repository.support.EntityManager . getMetamodel ( ) ) . thenReturn ( org.springframework.data.jpa.repository.support.Metamodel ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.StubRepositoryFactorySupport = Mockito . spy ( new org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.StubRepositoryFactorySupport ( org.springframework.data.jpa.repository.support.Repository<,> ) ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean<org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.SimpleSampleRepository,org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.User,java.lang.Integer> = new org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.DummyJpaRepositoryFactoryBean <> ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.SimpleSampleRepository .class ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean<org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.SimpleSampleRepository,org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.User,java.lang.Integer> . setEntityManager ( org.springframework.data.jpa.repository.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean<org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.SimpleSampleRepository,org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.User,java.lang.Integer> . setBeanFactory ( org.springframework.data.jpa.repository.support.ListableBeanFactory ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean<org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.SimpleSampleRepository,org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.User,java.lang.Integer> . afterPropertiesSet ( ) ; assertNotNull ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean<org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.SimpleSampleRepository,org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.User,java.lang.Integer> . getObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean<org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.SimpleSampleRepository,org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.User,java.lang.Integer> . setBeanFactory ( mock ( BeanFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new JpaRepositoryFactoryBean < Repository < java.lang.Object , java.lang.Long > , java.lang.Object , java.lang.Long > ( null ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ) { super( java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.support.RepositoryFactorySupport org.springframework.data.jpa.repository.support.RepositoryFactorySupport ( ) { return org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBeanUnitTests.StubRepositoryFactorySupport ; }  <METHOD_END>
<METHOD_START> private void ( Repository < ? , ? > org.springframework.data.jpa.repository.support.Repository<?,?> ) { this . org.springframework.data.jpa.repository.support.Repository<?,?> = org.springframework.data.jpa.repository.support.Repository<,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { return ( T ) org.springframework.data.jpa.repository.support.Repository<,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , ID extends java.io.Serializable > org.springframework.data.jpa.repository.support.EntityInformation<T,ID> < T , ID > org.springframework.data.jpa.repository.support.EntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( RepositoryInformation org.springframework.data.jpa.repository.support.RepositoryInformation ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( RepositoryMetadata org.springframework.data.jpa.repository.support.RepositoryMetadata ) { return null ; }  <METHOD_END>
