<METHOD_START> @ java.lang.Override public org.springframework.boot.gradle.testkit.Statement org.springframework.boot.gradle.testkit.Statement ( Statement org.springframework.boot.gradle.testkit.Statement , Description org.springframework.boot.gradle.testkit.Description ) { java.net.URL java.net.URL = java.net.URL ( org.springframework.boot.gradle.testkit.Description ) ; if ( java.net.URL != null ) { org.springframework.boot.gradle.testkit.GradleBuild ( java.net.URL . java.lang.String ( ) ) ; } return this . org.springframework.boot.gradle.testkit.TemporaryFolder . apply ( new Statement ( ) { @ java.lang.Override public void void ( ) java.lang.Throwable { void ( ) ; try { org.springframework.boot.gradle.testkit.Statement . evaluate ( ) ; } finally { void ( ) ; } } } , org.springframework.boot.gradle.testkit.Description ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { void ( ) ; try { org.springframework.boot.gradle.testkit.Statement . evaluate ( ) ; } finally { void ( ) ; } }  <METHOD_END>
<METHOD_START> private java.net.URL java.net.URL ( Description org.springframework.boot.gradle.testkit.Description ) { java.net.URL java.net.URL = java.net.URL ( org.springframework.boot.gradle.testkit.Description ) ; if ( java.net.URL != null ) { return java.net.URL ; } return java.net.URL ( org.springframework.boot.gradle.testkit.Description . getTestClass ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.net.URL java.net.URL ( Description org.springframework.boot.gradle.testkit.Description ) { return org.springframework.boot.gradle.testkit.Description . getTestClass ( ) . getResource ( org.springframework.boot.gradle.testkit.Description . getTestClass ( ) . getSimpleName ( ) + STRING + org.springframework.boot.gradle.testkit.Description . getMethodName ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> private java.net.URL java.net.URL ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . java.net.URL ( java.lang.Class<> . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException { this . java.io.File = this . org.springframework.boot.gradle.testkit.TemporaryFolder . newFolder ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.boot.gradle.testkit.GradleBuild .this . java.lang.String = null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return java.lang.String ( STRING ) + STRING + java.lang.String ( STRING ) + STRING + java.lang.String ( STRING ) + STRING + java.lang.String ( LaunchScript .class ) + STRING + java.lang.String ( ClassVisitor .class ) + STRING + java.lang.String ( DependencyManagementPlugin .class ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return new java.io.File ( java.lang.String ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . java.security.ProtectionDomain ( ) . java.security.CodeSource ( ) . java.net.URL ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.gradle.testkit.GradleBuild org.springframework.boot.gradle.testkit.GradleBuild ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.gradle.testkit.BuildResult org.springframework.boot.gradle.testkit.BuildResult ( java.lang.String ... java.lang.String[] ) { try { return org.springframework.boot.gradle.testkit.GradleRunner ( java.lang.String[] ) . build ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.boot.gradle.testkit.BuildResult org.springframework.boot.gradle.testkit.BuildResult ( java.lang.String ... java.lang.String[] ) { try { return org.springframework.boot.gradle.testkit.GradleRunner ( java.lang.String[] ) . buildAndFail ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.boot.gradle.testkit.GradleRunner org.springframework.boot.gradle.testkit.GradleRunner ( java.lang.String ... java.lang.String[] ) throws java.io.IOException { java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.FileReader ( this . java.lang.String ) ) . replace ( STRING , java.lang.String ( ) ) ; FileCopyUtils . copy ( java.lang.String , new java.io.FileWriter ( new java.io.File ( this . java.io.File , STRING ) ) ) ; GradleRunner org.springframework.boot.gradle.testkit.GradleRunner = GradleRunner . create ( ) . withProjectDir ( this . java.io.File ) . forwardOutput ( ) ; if ( this . java.lang.String != null ) { org.springframework.boot.gradle.testkit.GradleRunner . withGradleVersion ( this . java.lang.String ) ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING + java.lang.String ( ) ) ; java.util.List<java.lang.String> . boolean ( STRING + java.lang.String ( ) ) ; java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; return org.springframework.boot.gradle.testkit.GradleRunner . withArguments ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) { return this . java.io.File ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.gradle.testkit.GradleBuild org.springframework.boot.gradle.testkit.GradleBuild ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( ) { return java.lang.String ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { javax.xml.xpath.XPathFactory javax.xml.xpath.XPathFactory = javax.xml.xpath.XPathFactory . javax.xml.xpath.XPathFactory ( ) ; javax.xml.xpath.XPath javax.xml.xpath.XPath = javax.xml.xpath.XPathFactory . javax.xml.xpath.XPath ( ) ; javax.xml.xpath.XPathExpression javax.xml.xpath.XPathExpression = javax.xml.xpath.XPath . javax.xml.xpath.XPathExpression ( java.lang.String ) ; java.lang.String java.lang.String = javax.xml.xpath.XPathExpression . java.lang.String ( new org.xml.sax.InputSource ( new java.io.FileReader ( STRING ) ) ) ; return java.lang.String ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
