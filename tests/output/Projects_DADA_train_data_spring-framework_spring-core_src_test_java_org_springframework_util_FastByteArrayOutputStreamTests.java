<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream = new FastByteArrayOutputStream ( int ) ; this . byte[] = STRING . byte[] ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; assertEquals ( this . org.springframework.util.FastByteArrayOutputStream . size ( ) , this . byte[] . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; int int = this . org.springframework.util.FastByteArrayOutputStream . size ( ) ; this . org.springframework.util.FastByteArrayOutputStream . resize ( NUMBER ) ; void ( this . org.springframework.util.FastByteArrayOutputStream ) ; assertEquals ( int , this . org.springframework.util.FastByteArrayOutputStream . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.util.FastByteArrayOutputStream . resize ( NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.util.FastByteArrayOutputStream . write ( NUMBER ) ; } assertEquals ( NUMBER , this . org.springframework.util.FastByteArrayOutputStream . size ( ) ) ; assertArrayEquals ( this . org.springframework.util.FastByteArrayOutputStream . toByteArray ( ) , new byte [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; void ( this . org.springframework.util.FastByteArrayOutputStream ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; void ( this . org.springframework.util.FastByteArrayOutputStream ) ; this . org.springframework.util.FastByteArrayOutputStream . reset ( ) ; assertEquals ( NUMBER , this . org.springframework.util.FastByteArrayOutputStream . size ( ) ) ; this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; void ( this . org.springframework.util.FastByteArrayOutputStream ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.io.IOException .class ) public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . close ( ) ; this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; void ( this . org.springframework.util.FastByteArrayOutputStream ) ; assertSame ( this . org.springframework.util.FastByteArrayOutputStream . toByteArrayUnsafe ( ) , this . org.springframework.util.FastByteArrayOutputStream . toByteArrayUnsafe ( ) ) ; assertArrayEquals ( this . org.springframework.util.FastByteArrayOutputStream . toByteArray ( ) , this . byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; void ( this . org.springframework.util.FastByteArrayOutputStream ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; this . org.springframework.util.FastByteArrayOutputStream . writeTo ( java.io.ByteArrayOutputStream ) ; assertArrayEquals ( java.io.ByteArrayOutputStream . byte[] ( ) , this . byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; this . org.springframework.util.FastByteArrayOutputStream . resize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; assertNotNull ( this . org.springframework.util.FastByteArrayOutputStream . getInputStream ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; assertEquals ( this . org.springframework.util.FastByteArrayOutputStream . getInputStream ( ) . available ( ) , this . byte[] . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; java.io.InputStream java.io.InputStream = this . org.springframework.util.FastByteArrayOutputStream . getInputStream ( ) ; assertEquals ( java.io.InputStream . int ( ) , this . byte[] [ NUMBER ] ) ; assertEquals ( java.io.InputStream . int ( ) , this . byte[] [ NUMBER ] ) ; assertEquals ( java.io.InputStream . int ( ) , this . byte[] [ NUMBER ] ) ; assertEquals ( java.io.InputStream . int ( ) , this . byte[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; java.io.InputStream java.io.InputStream = this . org.springframework.util.FastByteArrayOutputStream . getInputStream ( ) ; byte [] byte[] = new byte [ java.io.InputStream . int ( ) ] ; int int = java.io.InputStream . int ( byte[] ) ; assertEquals ( this . byte[] . int , int ) ; assertArrayEquals ( this . byte[] , byte[] ) ; assertEquals ( NUMBER , java.io.InputStream . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; java.io.InputStream java.io.InputStream = org.springframework.util.FastByteArrayOutputStream . getInputStream ( ) ; byte [] byte[] = new byte [ java.io.InputStream . int ( ) + NUMBER ] ; int int = java.io.InputStream . int ( byte[] ) ; assertEquals ( this . byte[] . int , int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { assertEquals ( this . byte[] [ int ] , byte[] [ int ] ) ; } assertEquals ( NUMBER , byte[] [ this . byte[] . int ] ) ; assertEquals ( NUMBER , java.io.InputStream . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; java.io.InputStream java.io.InputStream = this . org.springframework.util.FastByteArrayOutputStream . getInputStream ( ) ; assertEquals ( java.io.InputStream . int ( ) , this . byte[] [ NUMBER ] ) ; assertEquals ( java.io.InputStream . long ( NUMBER ) , NUMBER ) ; assertEquals ( java.io.InputStream . int ( ) , this . byte[] [ NUMBER ] ) ; assertEquals ( this . byte[] . int - NUMBER , java.io.InputStream . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; java.io.InputStream java.io.InputStream = this . org.springframework.util.FastByteArrayOutputStream . getInputStream ( ) ; assertEquals ( java.io.InputStream . long ( NUMBER ) , this . byte[] . int ) ; assertEquals ( NUMBER , java.io.InputStream . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; java.io.InputStream java.io.InputStream = this . org.springframework.util.FastByteArrayOutputStream . getInputStream ( ) ; DigestUtils . appendMd5DigestAsHex ( java.io.InputStream , java.lang.StringBuilder ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.String java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.util.FastByteArrayOutputStream . write ( this . byte[] ) ; } java.io.InputStream java.io.InputStream = this . org.springframework.util.FastByteArrayOutputStream . getInputStream ( ) ; DigestUtils . appendMd5DigestAsHex ( java.io.InputStream , java.lang.StringBuilder ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.String java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( FastByteArrayOutputStream org.springframework.util.FastByteArrayOutputStream ) { assertArrayEquals ( this . byte[] , org.springframework.util.FastByteArrayOutputStream . toByteArray ( ) ) ; }  <METHOD_END>
