<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.context.event.BeanFactory ) { setBeanFactory ( org.springframework.context.event.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> protected java.util.concurrent.Executor java.util.concurrent.Executor ( ) { return this . java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( ErrorHandler org.springframework.context.event.ErrorHandler ) { this . org.springframework.context.event.ErrorHandler = org.springframework.context.event.ErrorHandler ; }  <METHOD_END>
<METHOD_START> protected org.springframework.context.event.ErrorHandler org.springframework.context.event.ErrorHandler ( ) { return this . org.springframework.context.event.ErrorHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) { void ( org.springframework.context.event.ApplicationEvent , org.springframework.context.event.ResolvableType ( org.springframework.context.event.ApplicationEvent ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final ApplicationEvent org.springframework.context.event.ApplicationEvent , ResolvableType org.springframework.context.event.ResolvableType ) { ResolvableType org.springframework.context.event.ResolvableType = ( org.springframework.context.event.ResolvableType != null ? org.springframework.context.event.ResolvableType : org.springframework.context.event.ResolvableType ( org.springframework.context.event.ApplicationEvent ) ) ; for ( final ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> : getApplicationListeners ( org.springframework.context.event.ApplicationEvent , org.springframework.context.event.ResolvableType ) ) { java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executor ( ) ; if ( java.util.concurrent.Executor != null ) { java.util.concurrent.Executor . void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { void ( org.springframework.context.event.ApplicationListener<> , org.springframework.context.event.ApplicationEvent ) ; } } ) ; } else { void ( org.springframework.context.event.ApplicationListener<> , org.springframework.context.event.ApplicationEvent ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( org.springframework.context.event.ApplicationListener<> , org.springframework.context.event.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.event.ResolvableType org.springframework.context.event.ResolvableType ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) { return ResolvableType . forInstance ( org.springframework.context.event.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected void void ( ApplicationListener org.springframework.context.event.ApplicationListener , ApplicationEvent org.springframework.context.event.ApplicationEvent ) { ErrorHandler org.springframework.context.event.ErrorHandler = org.springframework.context.event.ErrorHandler ( ) ; if ( org.springframework.context.event.ErrorHandler != null ) { try { org.springframework.context.event.ApplicationListener . onApplicationEvent ( org.springframework.context.event.ApplicationEvent ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.context.event.ErrorHandler . handleError ( java.lang.Throwable ) ; } } else { try { org.springframework.context.event.ApplicationListener . onApplicationEvent ( org.springframework.context.event.ApplicationEvent ) ; } catch ( java.lang.ClassCastException java.lang.ClassCastException ) { java.lang.String java.lang.String = java.lang.ClassCastException . java.lang.String ( ) ; if ( java.lang.String == null || java.lang.String . boolean ( org.springframework.context.event.ApplicationEvent . getClass ( ) . getName ( ) ) ) { Log org.springframework.context.event.Log = LogFactory . getLog ( java.lang.Class<? extends org.springframework.context.event.SimpleApplicationEventMulticaster> ( ) ) ; if ( org.springframework.context.event.Log . isDebugEnabled ( ) ) { org.springframework.context.event.Log . debug ( STRING + org.springframework.context.event.ApplicationListener , java.lang.ClassCastException ) ; } } else { throw java.lang.ClassCastException ; } } } }  <METHOD_END>
