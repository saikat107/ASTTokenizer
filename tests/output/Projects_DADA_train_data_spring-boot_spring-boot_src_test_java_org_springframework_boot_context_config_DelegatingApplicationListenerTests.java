<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.context.config.StaticApplicationContext != null ) { this . org.springframework.boot.context.config.StaticApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StaticApplicationContext , STRING + org.springframework.boot.context.config.DelegatingApplicationListenerTests.MockInitB .class . java.lang.String ( ) + STRING + org.springframework.boot.context.config.DelegatingApplicationListenerTests.MockInitA .class . java.lang.String ( ) ) ; this . org.springframework.boot.context.config.DelegatingApplicationListener . onApplicationEvent ( new ApplicationEnvironmentPreparedEvent ( new SpringApplication ( ) , new java.lang.String [ NUMBER ] , this . org.springframework.boot.context.config.StaticApplicationContext . getEnvironment ( ) ) ) ; this . org.springframework.boot.context.config.StaticApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , this . org.springframework.boot.context.config.DelegatingApplicationListener ) ; this . org.springframework.boot.context.config.StaticApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.config.StaticApplicationContext . getBeanFactory ( ) . getSingleton ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.context.config.StaticApplicationContext . getBeanFactory ( ) . getSingleton ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.config.DelegatingApplicationListener . onApplicationEvent ( new ApplicationEnvironmentPreparedEvent ( new SpringApplication ( ) , new java.lang.String [ NUMBER ] , this . org.springframework.boot.context.config.StaticApplicationContext . getEnvironment ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( this . org.springframework.boot.context.config.StaticApplicationContext , STRING ) ; this . org.springframework.boot.context.config.DelegatingApplicationListener . onApplicationEvent ( new ApplicationEnvironmentPreparedEvent ( new SpringApplication ( ) , new java.lang.String [ NUMBER ] , this . org.springframework.boot.context.config.StaticApplicationContext . getEnvironment ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextRefreshedEvent org.springframework.boot.context.config.ContextRefreshedEvent ) { ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) org.springframework.boot.context.config.ContextRefreshedEvent . getApplicationContext ( ) ; org.springframework.boot.context.config.ConfigurableApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextRefreshedEvent org.springframework.boot.context.config.ContextRefreshedEvent ) { ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) org.springframework.boot.context.config.ContextRefreshedEvent . getApplicationContext ( ) ; assertThat ( org.springframework.boot.context.config.ConfigurableApplicationContext . getBeanFactory ( ) . getSingleton ( STRING ) ) . isEqualTo ( STRING ) ; org.springframework.boot.context.config.ConfigurableApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , STRING ) ; }  <METHOD_END>
