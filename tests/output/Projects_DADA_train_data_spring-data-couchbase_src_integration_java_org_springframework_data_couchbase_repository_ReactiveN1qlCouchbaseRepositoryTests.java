<METHOD_START> @ Before public void void ( ) java.lang.Exception { ReactiveRepositoryFactorySupport org.springframework.data.couchbase.repository.ReactiveRepositoryFactorySupport = new ReactiveCouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.ReactiveRepositoryOperationsMapping , org.springframework.data.couchbase.repository.IndexManager ) ; org.springframework.data.couchbase.repository.ReactivePartySortingRepository = org.springframework.data.couchbase.repository.ReactiveRepositoryFactorySupport . getRepository ( ReactivePartySortingRepository .class ) ; org.springframework.data.couchbase.repository.ReactivePartyRepository = org.springframework.data.couchbase.repository.ReactiveRepositoryFactorySupport . getRepository ( ReactivePartyRepository .class ) ; org.springframework.data.couchbase.repository.ItemRepository = org.springframework.data.couchbase.repository.ReactiveRepositoryFactorySupport . getRepository ( ItemRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { try { org.springframework.data.couchbase.repository.ItemRepository . delete ( java.lang.String ) ; } catch ( DataRetrievalFailureException org.springframework.data.couchbase.repository.DataRetrievalFailureException ) {} try { org.springframework.data.couchbase.repository.ReactivePartyRepository . delete ( java.lang.String ) ; } catch ( DataRetrievalFailureException org.springframework.data.couchbase.repository.DataRetrievalFailureException ) {} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<org.springframework.data.couchbase.repository.Party> < Party > java.lang.Iterable<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.ReactivePartySortingRepository . findAll ( new Sort ( Sort . Direction . DESC , STRING ) ) . collectList ( ) . block ( ) ; long long = java.lang.Long . long ; for ( Party org.springframework.data.couchbase.repository.Party : java.lang.Iterable<org.springframework.data.couchbase.repository.Party> ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getAttendees ( ) <= long ) ; long = org.springframework.data.couchbase.repository.Party . getAttendees ( ) ; } assertFalse ( STRING , long == java.lang.Long . long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<org.springframework.data.couchbase.repository.Party> < Party > java.lang.Iterable<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.ReactivePartySortingRepository . findAll ( new Sort ( Sort . Direction . DESC , STRING ) ) . collectList ( ) . block ( ) ; java.lang.String java.lang.String = null ; for ( Party org.springframework.data.couchbase.repository.Party : java.lang.Iterable<org.springframework.data.couchbase.repository.Party> ) { if ( java.lang.String != null ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getDescription ( ) . compareTo ( java.lang.String ) <= NUMBER ) ; } java.lang.String = org.springframework.data.couchbase.repository.Party . getDescription ( ) ; } assertNotNull ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Iterable<org.springframework.data.couchbase.repository.Party> < Party > java.lang.Iterable<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.ReactivePartySortingRepository . findAll ( new Sort ( new Sort . Sort ( Sort . Direction . DESC , STRING ) . ignoreCase ( ) ) ) . collectList ( ) . block ( ) ; java.lang.String java.lang.String = null ; for( Party org.springframework.data.couchbase.repository.Party : java.lang.Iterable<org.springframework.data.couchbase.repository.Party> ) { if ( java.lang.String != null ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getDescription ( ) . compareToIgnoreCase ( java.lang.String ) <= NUMBER ) ; } java.lang.String = org.springframework.data.couchbase.repository.Party . getDescription ( ) ; } assertNotNull ( STRING , java.lang.String ) ; }  <METHOD_END>
