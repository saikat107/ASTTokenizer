<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element , AbstractBeanDefinition org.springframework.data.mongodb.config.AbstractBeanDefinition , ParserContext org.springframework.data.mongodb.config.ParserContext )			throws org.springframework.data.mongodb.config.BeanDefinitionStoreException { java.lang.String java.lang.String = super. resolveId ( org.w3c.dom.Element , org.springframework.data.mongodb.config.AbstractBeanDefinition , org.springframework.data.mongodb.config.ParserContext ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : BeanNames . GRID_FS_TEMPLATE_BEAN_NAME ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.config.AbstractBeanDefinition org.springframework.data.mongodb.config.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.mongodb.config.ParserContext ) { BeanComponentDefinitionBuilder org.springframework.data.mongodb.config.BeanComponentDefinitionBuilder = new BeanComponentDefinitionBuilder ( org.w3c.dom.Element , org.springframework.data.mongodb.config.ParserContext ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; BeanDefinitionBuilder org.springframework.data.mongodb.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( GridFsTemplate .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } else { org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgReference ( BeanNames . DB_FACTORY_BEAN_NAME ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } else { org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgReference ( BeanNames . DEFAULT_CONVERTER_BEAN_NAME ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; } return ( AbstractBeanDefinition ) org.springframework.data.mongodb.config.BeanComponentDefinitionBuilder . getComponentIdButFallback ( org.springframework.data.mongodb.config.BeanDefinitionBuilder , BeanNames . GRID_FS_TEMPLATE_BEAN_NAME ) . getBeanDefinition ( ) ; }  <METHOD_END>
