<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . void ( ) ; this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriter . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriter . increment ( new Delta <> ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . void ( ) ; assertThat ( this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . java.util.List<java.lang.String> ( ) . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriter . set ( new Metric <> ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . void ( ) ; assertThat ( this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . java.util.List<java.lang.String> ( ) . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriter . set ( new Metric <> ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . void ( ) ; assertThat ( this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . java.util.List<java.lang.String> ( ) . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriter . set ( new Metric <> ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . void ( ) ; assertThat ( this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . java.util.List<java.lang.String> ( ) . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriter = new StatsdMetricWriter ( STRING , this . int ) ; this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriter . set ( new Metric <> ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . void ( ) ; assertThat ( this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . java.util.List<java.lang.String> ( ) . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriter = new StatsdMetricWriter ( STRING , STRING , this . int ) ; this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriter . set ( new Metric <> ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . void ( ) ; assertThat ( this . org.springframework.boot.actuate.metrics.statsd.StatsdMetricWriterTests.DummyStatsDServer . java.util.List<java.lang.String> ( ) . java.lang.String ( NUMBER ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { try { this . java.net.DatagramSocket = new java.net.DatagramSocket ( int ) ; } catch ( java.net.SocketException java.net.SocketException ) { throw new java.lang.IllegalStateException ( java.net.SocketException ) ; } new java.lang.Thread ( this ) . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.net.DatagramSocket . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.net.DatagramPacket java.net.DatagramPacket = new java.net.DatagramPacket ( new byte [ NUMBER ] , NUMBER ) ; this . java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; this . java.util.List<java.lang.String> . boolean ( new java.lang.String ( java.net.DatagramPacket . byte[] ( ) , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) . java.lang.String ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> public void void ( ) { while ( this . java.util.List<java.lang.String> . boolean ( ) ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return new java.util.ArrayList<java.lang.String> <> ( this . java.util.List<java.lang.String> ) ; }  <METHOD_END>
