<METHOD_START> protected static org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( ) org.springframework.transaction.interceptor.NoTransactionException { return java.lang.ThreadLocal<org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo> . org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.transaction.interceptor.TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ( ) org.springframework.transaction.interceptor.NoTransactionException { org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo = org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( ) ; if ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo == null || org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . org.springframework.transaction.interceptor.TransactionStatus == null ) { throw new NoTransactionException ( STRING ) ; } return org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . org.springframework.transaction.interceptor.TransactionStatus ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected final java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager ) { this . org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.interceptor.PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager ( ) { return this . org.springframework.transaction.interceptor.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { NameMatchTransactionAttributeSource org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource = new NameMatchTransactionAttributeSource ( ) ; org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource . setProperties ( java.util.Properties ) ; this . org.springframework.transaction.interceptor.TransactionAttributeSource = org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionAttributeSource [] org.springframework.transaction.interceptor.TransactionAttributeSource[] ) { this . org.springframework.transaction.interceptor.TransactionAttributeSource = new CompositeTransactionAttributeSource ( org.springframework.transaction.interceptor.TransactionAttributeSource[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionAttributeSource org.springframework.transaction.interceptor.TransactionAttributeSource ) { this . org.springframework.transaction.interceptor.TransactionAttributeSource = org.springframework.transaction.interceptor.TransactionAttributeSource ; }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.interceptor.TransactionAttributeSource org.springframework.transaction.interceptor.TransactionAttributeSource ( ) { return this . org.springframework.transaction.interceptor.TransactionAttributeSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.transaction.interceptor.BeanFactory ) { this . org.springframework.transaction.interceptor.BeanFactory = org.springframework.transaction.interceptor.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.transaction.interceptor.BeanFactory org.springframework.transaction.interceptor.BeanFactory ( ) { return this . org.springframework.transaction.interceptor.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.transaction.interceptor.PlatformTransactionManager ( ) == null && this . org.springframework.transaction.interceptor.BeanFactory == null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } if ( org.springframework.transaction.interceptor.TransactionAttributeSource ( ) == null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , final org.springframework.transaction.interceptor.TransactionAspectSupport.InvocationCallback org.springframework.transaction.interceptor.TransactionAspectSupport.InvocationCallback )			throws java.lang.Throwable { final TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = org.springframework.transaction.interceptor.TransactionAttributeSource ( ) . getTransactionAttribute ( java.lang.reflect.Method , java.lang.Class<> ) ; final PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.PlatformTransactionManager ( org.springframework.transaction.interceptor.TransactionAttribute ) ; final java.lang.String java.lang.String = java.lang.String ( java.lang.reflect.Method , java.lang.Class<> , org.springframework.transaction.interceptor.TransactionAttribute ) ; if ( org.springframework.transaction.interceptor.TransactionAttribute == null || ! ( org.springframework.transaction.interceptor.PlatformTransactionManager instanceof CallbackPreferringPlatformTransactionManager ) ) { org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo = org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionAttribute , java.lang.String ) ; java.lang.Object java.lang.Object = null ; try { java.lang.Object = org.springframework.transaction.interceptor.TransactionAspectSupport.InvocationCallback . java.lang.Object ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo , java.lang.Throwable ) ; throw java.lang.Throwable ; } finally { void ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ) ; } void ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ) ; return java.lang.Object ; } else { try { java.lang.Object java.lang.Object = ( ( CallbackPreferringPlatformTransactionManager ) org.springframework.transaction.interceptor.PlatformTransactionManager ) . execute ( org.springframework.transaction.interceptor.TransactionAttribute , new TransactionCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ) { org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo = org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionAttribute , java.lang.String , org.springframework.transaction.interceptor.TransactionStatus ) ; try { return org.springframework.transaction.interceptor.TransactionAspectSupport.InvocationCallback . java.lang.Object ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.transaction.interceptor.TransactionAttribute . rollbackOn ( java.lang.Throwable ) ) { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Throwable ; } else { throw new org.springframework.transaction.interceptor.TransactionAspectSupport.ThrowableHolderException ( java.lang.Throwable ) ; } } else { return new org.springframework.transaction.interceptor.TransactionAspectSupport.ThrowableHolder ( java.lang.Throwable ) ; } } finally { void ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ) ; } } } ) ; if ( java.lang.Object instanceof org.springframework.transaction.interceptor.TransactionAspectSupport.ThrowableHolder ) { throw ( ( org.springframework.transaction.interceptor.TransactionAspectSupport.ThrowableHolder ) java.lang.Object ) . java.lang.Throwable ( ) ; } else { return java.lang.Object ; } } catch ( org.springframework.transaction.interceptor.TransactionAspectSupport.ThrowableHolderException org.springframework.transaction.interceptor.TransactionAspectSupport.ThrowableHolderException ) { throw org.springframework.transaction.interceptor.TransactionAspectSupport.ThrowableHolderException . java.lang.Throwable ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ) { org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo = org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionAttribute , java.lang.String , org.springframework.transaction.interceptor.TransactionStatus ) ; try { return org.springframework.transaction.interceptor.TransactionAspectSupport.InvocationCallback . java.lang.Object ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.transaction.interceptor.TransactionAttribute . rollbackOn ( java.lang.Throwable ) ) { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Throwable ; } else { throw new org.springframework.transaction.interceptor.TransactionAspectSupport.ThrowableHolderException ( java.lang.Throwable ) ; } } else { return new org.springframework.transaction.interceptor.TransactionAspectSupport.ThrowableHolder ( java.lang.Throwable ) ; } } finally { void ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . java.util.concurrent.ConcurrentMap<java.lang.Object,org.springframework.transaction.interceptor.PlatformTransactionManager> . clear ( ) ; this . org.springframework.transaction.interceptor.BeanFactory = null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.interceptor.PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager ( TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ) { if ( org.springframework.transaction.interceptor.TransactionAttribute == null || this . org.springframework.transaction.interceptor.BeanFactory == null ) { return org.springframework.transaction.interceptor.PlatformTransactionManager ( ) ; } java.lang.String java.lang.String = org.springframework.transaction.interceptor.TransactionAttribute . getQualifier ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { return org.springframework.transaction.interceptor.PlatformTransactionManager ( java.lang.String ) ; } else if ( StringUtils . hasText ( this . java.lang.String ) ) { return org.springframework.transaction.interceptor.PlatformTransactionManager ( this . java.lang.String ) ; } else { PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.PlatformTransactionManager ( ) ; if ( org.springframework.transaction.interceptor.PlatformTransactionManager == null ) { org.springframework.transaction.interceptor.PlatformTransactionManager = this . java.util.concurrent.ConcurrentMap<java.lang.Object,org.springframework.transaction.interceptor.PlatformTransactionManager> . get ( java.lang.Object ) ; if ( org.springframework.transaction.interceptor.PlatformTransactionManager == null ) { org.springframework.transaction.interceptor.PlatformTransactionManager = this . org.springframework.transaction.interceptor.BeanFactory . getBean ( PlatformTransactionManager .class ) ; this . java.util.concurrent.ConcurrentMap<java.lang.Object,org.springframework.transaction.interceptor.PlatformTransactionManager> . putIfAbsent ( java.lang.Object , org.springframework.transaction.interceptor.PlatformTransactionManager ) ; } } return org.springframework.transaction.interceptor.PlatformTransactionManager ; } }  <METHOD_END>
<METHOD_START> private org.springframework.transaction.interceptor.PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager ( java.lang.String java.lang.String ) { PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager = this . java.util.concurrent.ConcurrentMap<java.lang.Object,org.springframework.transaction.interceptor.PlatformTransactionManager> . get ( java.lang.String ) ; if ( org.springframework.transaction.interceptor.PlatformTransactionManager == null ) { org.springframework.transaction.interceptor.PlatformTransactionManager = BeanFactoryAnnotationUtils . qualifiedBeanOfType ( this . org.springframework.transaction.interceptor.BeanFactory , PlatformTransactionManager .class , java.lang.String ) ; this . java.util.concurrent.ConcurrentMap<java.lang.Object,org.springframework.transaction.interceptor.PlatformTransactionManager> . putIfAbsent ( java.lang.String , org.springframework.transaction.interceptor.PlatformTransactionManager ) ; } return org.springframework.transaction.interceptor.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ) { java.lang.String java.lang.String = java.lang.String ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( java.lang.String == null ) { if ( org.springframework.transaction.interceptor.TransactionAttribute instanceof DefaultTransactionAttribute ) { java.lang.String = ( ( DefaultTransactionAttribute ) org.springframework.transaction.interceptor.TransactionAttribute ) . getDescriptor ( ) ; } if ( java.lang.String == null ) { java.lang.String = ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method , java.lang.Class<> ) ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager , TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute , final java.lang.String java.lang.String ) { if ( org.springframework.transaction.interceptor.TransactionAttribute != null && org.springframework.transaction.interceptor.TransactionAttribute . getName ( ) == null ) { org.springframework.transaction.interceptor.TransactionAttribute = new DelegatingTransactionAttribute ( org.springframework.transaction.interceptor.TransactionAttribute ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } } ; } TransactionStatus org.springframework.transaction.interceptor.TransactionStatus = null ; if ( org.springframework.transaction.interceptor.TransactionAttribute != null ) { if ( org.springframework.transaction.interceptor.PlatformTransactionManager != null ) { org.springframework.transaction.interceptor.TransactionStatus = org.springframework.transaction.interceptor.PlatformTransactionManager . getTransaction ( org.springframework.transaction.interceptor.TransactionAttribute ) ; } else { if ( org.springframework.transaction.interceptor.Log . isDebugEnabled ( ) ) { org.springframework.transaction.interceptor.Log . debug ( STRING + java.lang.String + STRING ) ; } } } return org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionAttribute , java.lang.String , org.springframework.transaction.interceptor.TransactionStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager , TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute , java.lang.String java.lang.String , TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ) { org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo = new org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( org.springframework.transaction.interceptor.PlatformTransactionManager , org.springframework.transaction.interceptor.TransactionAttribute , java.lang.String ) ; if ( org.springframework.transaction.interceptor.TransactionAttribute != null ) { if ( org.springframework.transaction.interceptor.Log . isTraceEnabled ( ) ) { org.springframework.transaction.interceptor.Log . trace ( STRING + org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . java.lang.String ( ) + STRING ) ; } org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . void ( org.springframework.transaction.interceptor.TransactionStatus ) ; } else { if ( org.springframework.transaction.interceptor.Log . isTraceEnabled ( ) ) org.springframework.transaction.interceptor.Log . trace ( STRING + java.lang.String + STRING ) ; } org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . void ( ) ; return org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ; }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ) { if ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo != null && org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . boolean ( ) ) { if ( org.springframework.transaction.interceptor.Log . isTraceEnabled ( ) ) { org.springframework.transaction.interceptor.Log . trace ( STRING + org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . java.lang.String ( ) + STRING ) ; } org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . org.springframework.transaction.interceptor.PlatformTransactionManager ( ) . commit ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . org.springframework.transaction.interceptor.TransactionStatus ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo , java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo != null && org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . boolean ( ) ) { if ( org.springframework.transaction.interceptor.Log . isTraceEnabled ( ) ) { org.springframework.transaction.interceptor.Log . trace ( STRING + org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . java.lang.String ( ) + STRING + java.lang.Throwable ) ; } if ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . org.springframework.transaction.interceptor.TransactionAttribute . rollbackOn ( java.lang.Throwable ) ) { try { org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . org.springframework.transaction.interceptor.PlatformTransactionManager ( ) . rollback ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . org.springframework.transaction.interceptor.TransactionStatus ( ) ) ; } catch ( TransactionSystemException org.springframework.transaction.interceptor.TransactionSystemException ) { org.springframework.transaction.interceptor.Log . error ( STRING , java.lang.Throwable ) ; org.springframework.transaction.interceptor.TransactionSystemException . initApplicationException ( java.lang.Throwable ) ; throw org.springframework.transaction.interceptor.TransactionSystemException ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.transaction.interceptor.Log . error ( STRING , java.lang.Throwable ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { org.springframework.transaction.interceptor.Log . error ( STRING , java.lang.Throwable ) ; throw java.lang.Error ; } } else { try { org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . org.springframework.transaction.interceptor.PlatformTransactionManager ( ) . commit ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . org.springframework.transaction.interceptor.TransactionStatus ( ) ) ; } catch ( TransactionSystemException org.springframework.transaction.interceptor.TransactionSystemException ) { org.springframework.transaction.interceptor.Log . error ( STRING , java.lang.Throwable ) ; org.springframework.transaction.interceptor.TransactionSystemException . initApplicationException ( java.lang.Throwable ) ; throw org.springframework.transaction.interceptor.TransactionSystemException ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.transaction.interceptor.Log . error ( STRING , java.lang.Throwable ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { org.springframework.transaction.interceptor.Log . error ( STRING , java.lang.Throwable ) ; throw java.lang.Error ; } } } }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ) { if ( org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo != null ) { org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager , TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute , java.lang.String java.lang.String ) { this . org.springframework.transaction.interceptor.PlatformTransactionManager = org.springframework.transaction.interceptor.PlatformTransactionManager ; this . org.springframework.transaction.interceptor.TransactionAttribute = org.springframework.transaction.interceptor.TransactionAttribute ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.interceptor.PlatformTransactionManager org.springframework.transaction.interceptor.PlatformTransactionManager ( ) { return this . org.springframework.transaction.interceptor.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.interceptor.TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ( ) { return this . org.springframework.transaction.interceptor.TransactionAttribute ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ) { this . org.springframework.transaction.interceptor.TransactionStatus = org.springframework.transaction.interceptor.TransactionStatus ; }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.interceptor.TransactionStatus org.springframework.transaction.interceptor.TransactionStatus ( ) { return this . org.springframework.transaction.interceptor.TransactionStatus ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.transaction.interceptor.TransactionStatus != null ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo = java.lang.ThreadLocal<org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo> . org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ( ) ; java.lang.ThreadLocal<org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo> . void ( this ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.ThreadLocal<org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo> . void ( this . org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.transaction.interceptor.TransactionAttribute . toString ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( ) java.lang.Throwable ;  <METHOD_END>
<METHOD_START> public void ( java.lang.Throwable java.lang.Throwable ) { this . java.lang.Throwable = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> public final java.lang.Throwable java.lang.Throwable ( ) { return this . java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Throwable java.lang.Throwable ) { super( java.lang.Throwable ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Throwable ( ) . java.lang.String ( ) ; }  <METHOD_END>
