<METHOD_START> public java.lang.String java.lang.String ( Query org.springframework.data.jpa.provider.Query ) { return HibernateUtils . getHibernateQuery ( org.springframework.data.jpa.provider.Query ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return java.lang.Object instanceof HibernateProxy ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return ( ( HibernateProxy ) java.lang.Object ) . getHibernateLazyInitializer ( ) . getIdentifier ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Collection<T> < T > java.util.Collection<T> ( java.util.Collection<T> < T > java.util.Collection<T> ) { return java.util.Collection<T> == null || java.util.Collection<T> . boolean ( ) ? null : java.util.Collection<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.provider.CloseableIterator<java.lang.Object> < java.lang.Object > org.springframework.data.jpa.provider.CloseableIterator<java.lang.Object> ( Query org.springframework.data.jpa.provider.Query ) { return new org.springframework.data.jpa.provider.PersistenceProvider.HibernateScrollableResultsIterator ( org.springframework.data.jpa.provider.Query ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( Query org.springframework.data.jpa.provider.Query ) { return ( ( JpaQuery < ? > ) org.springframework.data.jpa.provider.Query ) . getDatabaseQuery ( ) . getJPQLString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Collection<T> < T > java.util.Collection<T> ( java.util.Collection<T> < T > java.util.Collection<T> ) { return java.util.Collection<T> == null || java.util.Collection<T> . boolean ( ) ? null : java.util.Collection<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.provider.CloseableIterator<java.lang.Object> < java.lang.Object > org.springframework.data.jpa.provider.CloseableIterator<java.lang.Object> ( Query org.springframework.data.jpa.provider.Query ) { return new org.springframework.data.jpa.provider.PersistenceProvider.EclipseLinkScrollableResultsIterator<java.lang.Object> < java.lang.Object > ( org.springframework.data.jpa.provider.Query ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( Query org.springframework.data.jpa.provider.Query ) { return ( ( OpenJPAQuery < ? > ) org.springframework.data.jpa.provider.Query ) . getQueryString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return java.lang.Object instanceof PersistenceCapable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return ( ( PersistenceCapable ) java.lang.Object ) . pcFetchObjectId ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.provider.CloseableIterator<java.lang.Object> < java.lang.Object > org.springframework.data.jpa.provider.CloseableIterator<java.lang.Object> ( Query org.springframework.data.jpa.provider.Query ) { return new org.springframework.data.jpa.provider.PersistenceProvider.OpenJpaResultStreamingIterator<java.lang.Object> < java.lang.Object > ( org.springframework.data.jpa.provider.Query ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( Query org.springframework.data.jpa.provider.Query ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return null ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> , java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ) { this . java.lang.Iterable<java.lang.String> = java.lang.Iterable<java.lang.String> ; this . java.lang.Iterable<java.lang.String> = java.lang.Iterable<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.jpa.provider.PersistenceProvider org.springframework.data.jpa.provider.PersistenceProvider ( EntityManager org.springframework.data.jpa.provider.EntityManager ) { Assert . notNull ( org.springframework.data.jpa.provider.EntityManager , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.jpa.provider.EntityManager . getDelegate ( ) . getClass ( ) ; org.springframework.data.jpa.provider.PersistenceProvider org.springframework.data.jpa.provider.PersistenceProvider = org.springframework.data.jpa.provider.ConcurrentReferenceHashMap<java.lang.Class<?>,org.springframework.data.jpa.provider.PersistenceProvider> . get ( java.lang.Class<> ) ; if ( org.springframework.data.jpa.provider.PersistenceProvider != null ) { return org.springframework.data.jpa.provider.PersistenceProvider ; } for ( org.springframework.data.jpa.provider.PersistenceProvider org.springframework.data.jpa.provider.PersistenceProvider : org.springframework.data.jpa.provider.PersistenceProvider[] ( ) ) { for ( java.lang.String java.lang.String : org.springframework.data.jpa.provider.PersistenceProvider . java.lang.Iterable<java.lang.String> ) { if ( isEntityManagerOfType ( org.springframework.data.jpa.provider.EntityManager , java.lang.String ) ) { return org.springframework.data.jpa.provider.PersistenceProvider ( java.lang.Class<> , org.springframework.data.jpa.provider.PersistenceProvider ) ; } } } return org.springframework.data.jpa.provider.PersistenceProvider ( java.lang.Class<> , org.springframework.data.jpa.provider.PersistenceProvider ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.jpa.provider.PersistenceProvider org.springframework.data.jpa.provider.PersistenceProvider ( Metamodel org.springframework.data.jpa.provider.Metamodel ) { Assert . notNull ( org.springframework.data.jpa.provider.Metamodel , STRING ) ; java.lang.Class<? extends org.springframework.data.jpa.provider.Metamodel> < ? extends Metamodel > java.lang.Class<? extends org.springframework.data.jpa.provider.Metamodel> = org.springframework.data.jpa.provider.Metamodel . getClass ( ) ; org.springframework.data.jpa.provider.PersistenceProvider org.springframework.data.jpa.provider.PersistenceProvider = org.springframework.data.jpa.provider.ConcurrentReferenceHashMap<java.lang.Class<?>,org.springframework.data.jpa.provider.PersistenceProvider> . get ( java.lang.Class<> ) ; if ( org.springframework.data.jpa.provider.PersistenceProvider != null ) { return org.springframework.data.jpa.provider.PersistenceProvider ; } for ( org.springframework.data.jpa.provider.PersistenceProvider org.springframework.data.jpa.provider.PersistenceProvider : org.springframework.data.jpa.provider.PersistenceProvider[] ( ) ) { for ( java.lang.String java.lang.String : org.springframework.data.jpa.provider.PersistenceProvider . java.lang.Iterable<java.lang.String> ) { if ( isMetamodelOfType ( org.springframework.data.jpa.provider.Metamodel , java.lang.String ) ) { return org.springframework.data.jpa.provider.PersistenceProvider ( java.lang.Class<> , org.springframework.data.jpa.provider.PersistenceProvider ) ; } } } return org.springframework.data.jpa.provider.PersistenceProvider ( java.lang.Class<> , org.springframework.data.jpa.provider.PersistenceProvider ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.provider.PersistenceProvider org.springframework.data.jpa.provider.PersistenceProvider ( java.lang.Class<?> < ? > java.lang.Class<?> , org.springframework.data.jpa.provider.PersistenceProvider org.springframework.data.jpa.provider.PersistenceProvider ) { org.springframework.data.jpa.provider.ConcurrentReferenceHashMap<java.lang.Class<?>,org.springframework.data.jpa.provider.PersistenceProvider> . put ( java.lang.Class<> , org.springframework.data.jpa.provider.PersistenceProvider ) ; return org.springframework.data.jpa.provider.PersistenceProvider ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public < T > java.util.Collection<T> < T > java.util.Collection<T> ( java.util.Collection<T> < T > java.util.Collection<T> ) { return java.util.Collection<T> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.provider.CloseableIterator<java.lang.Object> < java.lang.Object > org.springframework.data.jpa.provider.CloseableIterator<java.lang.Object> ( Query org.springframework.data.jpa.provider.Query ) { throw new java.lang.UnsupportedOperationException ( STRING + java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Query org.springframework.data.jpa.provider.Query ) { org . org.hibernate . org.hibernate . org.hibernate < ? > query = org.springframework.data.jpa.provider.Query . unwrap ( org . org.hibernate . org.hibernate . org.hibernate .class ) ; this . org.springframework.data.jpa.provider.ScrollableResults = query . setReadOnly ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) . scroll ( ScrollMode . FORWARD_ONLY ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { java.lang.Object [] java.lang.Object[] = org.springframework.data.jpa.provider.ScrollableResults . get ( ) ; return java.lang.Object[] . int == NUMBER ? java.lang.Object[] [ NUMBER ] : java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.jpa.provider.ScrollableResults == null ? false : org.springframework.data.jpa.provider.ScrollableResults . next ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.data.jpa.provider.ScrollableResults != null ) { org.springframework.data.jpa.provider.ScrollableResults . close ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( Query org.springframework.data.jpa.provider.Query ) { org.springframework.data.jpa.provider.Query . setHint ( STRING , true ) ; this . org.springframework.data.jpa.provider.ScrollableCursor = ( ScrollableCursor ) org.springframework.data.jpa.provider.Query . getSingleResult ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.jpa.provider.ScrollableCursor == null ? false : org.springframework.data.jpa.provider.ScrollableCursor . hasNext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) { return ( T ) org.springframework.data.jpa.provider.ScrollableCursor . next ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.data.jpa.provider.ScrollableCursor != null ) { org.springframework.data.jpa.provider.ScrollableCursor . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void ( Query org.springframework.data.jpa.provider.Query ) { OpenJPAQuery org.springframework.data.jpa.provider.OpenJPAQuery = OpenJPAPersistence . cast ( org.springframework.data.jpa.provider.Query ) ; JDBCFetchPlan org.springframework.data.jpa.provider.JDBCFetchPlan = ( JDBCFetchPlan ) org.springframework.data.jpa.provider.OpenJPAQuery . getFetchPlan ( ) ; org.springframework.data.jpa.provider.JDBCFetchPlan . setFetchBatchSize ( NUMBER ) ; org.springframework.data.jpa.provider.JDBCFetchPlan . setResultSetType ( ResultSetType . SCROLL_SENSITIVE ) ; org.springframework.data.jpa.provider.JDBCFetchPlan . setFetchDirection ( FetchDirection . FORWARD ) ; org.springframework.data.jpa.provider.JDBCFetchPlan . setLRSSizeAlgorithm ( LRSSizeAlgorithm . LAST ) ; java.util.List<T> < T > java.util.List<T> = org.springframework.data.jpa.provider.OpenJPAQuery . getResultList ( ) ; java.util.Iterator<T> = java.util.List<T> . java.util.Iterator<T> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.util.Iterator<T> == null ? false : java.util.Iterator<T> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) { return java.util.Iterator<T> . T ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( java.util.Iterator<T> != null ) { OpenJPAPersistence . close ( java.util.Iterator<T> ) ; } }  <METHOD_END>
