<METHOD_START> @ javax.annotation.PostConstruct void void ( ) { org.springframework.data.gemfire.samples.helloworld.Log . info ( STRING + org.springframework.data.gemfire.samples.helloworld.Region<java.lang.String,java.lang.String> . getCache ( ) . getDistributedSystem ( ) . getDistributedMember ( ) . getId ( ) + STRING + org.springframework.data.gemfire.samples.helloworld.Region<java.lang.String,java.lang.String> . getName ( ) + STRING ) ; org.springframework.data.gemfire.samples.helloworld.CommandProcessor . start ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PreDestroy void void ( ) java.lang.Exception { org.springframework.data.gemfire.samples.helloworld.Log . info ( STRING + org.springframework.data.gemfire.samples.helloworld.Region<java.lang.String,java.lang.String> . getCache ( ) . getDistributedSystem ( ) . getDistributedMember ( ) . getId ( ) + STRING + org.springframework.data.gemfire.samples.helloworld.Region<java.lang.String,java.lang.String> . getName ( ) + STRING ) ; org.springframework.data.gemfire.samples.helloworld.CommandProcessor . stop ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { try { org.springframework.data.gemfire.samples.helloworld.CommandProcessor . awaitCommands ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
