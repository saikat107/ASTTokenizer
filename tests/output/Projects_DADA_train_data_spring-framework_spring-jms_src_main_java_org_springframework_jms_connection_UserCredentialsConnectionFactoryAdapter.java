<METHOD_START> public void void ( ConnectionFactory org.springframework.jms.connection.ConnectionFactory ) { Assert . notNull ( org.springframework.jms.connection.ConnectionFactory , STRING ) ; this . org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.jms.connection.ConnectionFactory == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.ThreadLocal<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials> . void ( new org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.lang.ThreadLocal<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) org.springframework.jms.connection.JMSException { org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials = this . java.lang.ThreadLocal<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials> . org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials ( ) ; if ( org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials != null ) { return org.springframework.jms.connection.Connection ( org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials . java.lang.String , org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials . java.lang.String ) ; } else { return org.springframework.jms.connection.Connection ( this . java.lang.String , this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.Connection ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { return org.springframework.jms.connection.ConnectionFactory . createConnection ( java.lang.String , java.lang.String ) ; } else { return org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.jms.connection.QueueConnection org.springframework.jms.connection.QueueConnection ( ) org.springframework.jms.connection.JMSException { org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials = this . java.lang.ThreadLocal<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials> . org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials ( ) ; if ( org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials != null ) { return org.springframework.jms.connection.QueueConnection ( org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials . java.lang.String , org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials . java.lang.String ) ; } else { return org.springframework.jms.connection.QueueConnection ( this . java.lang.String , this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.QueueConnection org.springframework.jms.connection.QueueConnection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.QueueConnection ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.connection.QueueConnection org.springframework.jms.connection.QueueConnection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ( ) ; if ( ! ( org.springframework.jms.connection.ConnectionFactory instanceof QueueConnectionFactory ) ) { throw new javax . javax.jms . javax.jms ( STRING ) ; } QueueConnectionFactory org.springframework.jms.connection.QueueConnectionFactory = ( QueueConnectionFactory ) org.springframework.jms.connection.ConnectionFactory ; if ( StringUtils . hasLength ( java.lang.String ) ) { return org.springframework.jms.connection.QueueConnectionFactory . createQueueConnection ( java.lang.String , java.lang.String ) ; } else { return org.springframework.jms.connection.QueueConnectionFactory . createQueueConnection ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.jms.connection.TopicConnection org.springframework.jms.connection.TopicConnection ( ) org.springframework.jms.connection.JMSException { org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials = this . java.lang.ThreadLocal<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials> . org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials ( ) ; if ( org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials != null ) { return org.springframework.jms.connection.TopicConnection ( org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials . java.lang.String , org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.JmsUserCredentials . java.lang.String ) ; } else { return org.springframework.jms.connection.TopicConnection ( this . java.lang.String , this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.TopicConnection org.springframework.jms.connection.TopicConnection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.TopicConnection ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.connection.TopicConnection org.springframework.jms.connection.TopicConnection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ( ) ; if ( ! ( org.springframework.jms.connection.ConnectionFactory instanceof TopicConnectionFactory ) ) { throw new javax . javax.jms . javax.jms ( STRING ) ; } TopicConnectionFactory org.springframework.jms.connection.TopicConnectionFactory = ( TopicConnectionFactory ) org.springframework.jms.connection.ConnectionFactory ; if ( StringUtils . hasLength ( java.lang.String ) ) { return org.springframework.jms.connection.TopicConnectionFactory . createTopicConnection ( java.lang.String , java.lang.String ) ; } else { return org.springframework.jms.connection.TopicConnectionFactory . createTopicConnection ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.JMSContext org.springframework.jms.connection.JMSContext ( ) { return org.springframework.jms.connection.ConnectionFactory ( ) . createContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.JMSContext org.springframework.jms.connection.JMSContext ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.jms.connection.ConnectionFactory ( ) . createContext ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.JMSContext org.springframework.jms.connection.JMSContext ( java.lang.String java.lang.String , java.lang.String java.lang.String , int int ) { return org.springframework.jms.connection.ConnectionFactory ( ) . createContext ( java.lang.String , java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.JMSContext org.springframework.jms.connection.JMSContext ( int int ) { return org.springframework.jms.connection.ConnectionFactory ( ) . createContext ( int ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.connection.ConnectionFactory org.springframework.jms.connection.ConnectionFactory ( ) { Assert . state ( this . org.springframework.jms.connection.ConnectionFactory != null , STRING ) ; return this . org.springframework.jms.connection.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING + this . java.lang.String + STRING ; }  <METHOD_END>
