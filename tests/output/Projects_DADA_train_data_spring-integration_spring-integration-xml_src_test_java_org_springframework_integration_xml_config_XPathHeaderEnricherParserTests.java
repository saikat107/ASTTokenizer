<METHOD_START> @ Test public void void ( ) java.lang.Exception { EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertEquals ( - NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; SmartLifecycleRoleController org.springframework.integration.xml.config.SmartLifecycleRoleController = org.springframework.integration.xml.config.ApplicationContext . getBean ( SmartLifecycleRoleController .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.xml.config.SmartLifecycle> < SmartLifecycle > java.util.List<org.springframework.integration.xml.config.SmartLifecycle> = ( java.util.List<org.springframework.integration.xml.config.SmartLifecycle> < SmartLifecycle > ) TestUtils . getPropertyValue ( org.springframework.integration.xml.config.SmartLifecycleRoleController , STRING , MultiValueMap .class ) . get ( STRING ) ; assertThat ( java.util.List<org.springframework.integration.xml.config.SmartLifecycle> , contains ( ( SmartLifecycle ) org.springframework.integration.xml.config.EventDrivenConsumer ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.xml.config.Message<?> = this . org.springframework.integration.xml.config.Message<?> ( ) ; assertEquals ( STRING , org.springframework.integration.xml.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.xml.config.Message<?> = this . org.springframework.integration.xml.config.Message<?> ( ) ; assertEquals ( NUMBER , org.springframework.integration.xml.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.xml.config.Message<?> = this . org.springframework.integration.xml.config.Message<?> ( ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.xml.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.xml.config.Message<?> = this . org.springframework.integration.xml.config.Message<?> ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.config.Message<> . getHeaders ( ) . get ( STRING ) ; assertTrue ( java.lang.Object instanceof org.w3c.dom.Node ) ; org.w3c.dom.Node org.w3c.dom.Node = ( org.w3c.dom.Node ) java.lang.Object ; assertEquals ( STRING , org.w3c.dom.Node . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Message < ? > org.springframework.integration.xml.config.Message<?> = this . org.springframework.integration.xml.config.Message<?> ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.config.Message<> . getHeaders ( ) . get ( STRING ) ; assertTrue ( java.util.List .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > java.util.List<org.w3c.dom.Node> = ( java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<org.w3c.dom.Node> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.xml.config.Message<?> = this . org.springframework.integration.xml.config.Message<?> ( ) ; assertEquals ( new java.lang.Double ( NUMBER ) , org.springframework.integration.xml.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( false , this . boolean ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( true , this . boolean ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( true , this . boolean ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( false , this . boolean ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.xml.config.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.xml.config.Message<?> = MessageBuilder . fromMessage ( this . org.springframework.integration.xml.config.Message<> ) . setHeader ( STRING , STRING ) . setReplyChannel ( org.springframework.integration.xml.config.QueueChannel ) . build ( ) ; this . org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) . send ( org.springframework.integration.xml.config.Message<> ) ; Message < ? > org.springframework.integration.xml.config.Message<?> = org.springframework.integration.xml.config.QueueChannel . receive ( ) ; assertEquals ( STRING , org.springframework.integration.xml.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.xml.config.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.xml.config.Message<?> = MessageBuilder . fromMessage ( this . org.springframework.integration.xml.config.Message<> ) . setHeader ( STRING , STRING ) . setReplyChannel ( org.springframework.integration.xml.config.QueueChannel ) . build ( ) ; this . org.springframework.integration.xml.config.ApplicationContext . getBean ( STRING , MessageChannel .class ) . send ( org.springframework.integration.xml.config.Message<> ) ; Message < ? > org.springframework.integration.xml.config.Message<?> = org.springframework.integration.xml.config.QueueChannel . receive ( ) ; assertEquals ( STRING , org.springframework.integration.xml.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.xml.config.Message<?> < ? > org.springframework.integration.xml.config.Message<?> ( ) { this . org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.Message<> ) ; return org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = this . org.springframework.integration.xml.config.ApplicationContext . getBean ( java.lang.String ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; return ( ( java.lang.Boolean ) new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( java.lang.String ) ) . boolean ( ) ; }  <METHOD_END>
