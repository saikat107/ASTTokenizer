<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.reactive.server.samples.WebTestClient . get ( ) . uri ( STRING ) . exchange ( ) . expectStatus ( ) . isOk ( ) . expectHeader ( ) . contentType ( MediaType . APPLICATION_JSON_UTF8 ) . expectBody ( org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person .class ) . value ( ) . isEqualTo ( new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> < org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person > java.util.List<org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> = java.util.Arrays . java.util.List<org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> ( new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) ; this . org.springframework.test.web.reactive.server.samples.WebTestClient . get ( ) . uri ( STRING ) . exchange ( ) . expectStatus ( ) . isOk ( ) . expectHeader ( ) . contentType ( MediaType . APPLICATION_JSON_UTF8 ) . expectBody ( org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person .class ) . list ( ) . isEqualTo ( java.util.List<org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> < java.lang.String , org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person > java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> = new java.util.LinkedHashMap<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> <> ( ) ; java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> . org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> . org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> . org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) ; this . org.springframework.test.web.reactive.server.samples.WebTestClient . get ( ) . uri ( STRING ) . exchange ( ) . expectStatus ( ) . isOk ( ) . expectBody ( ) . map ( java.lang.String .class , org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person .class ) . isEqualTo ( java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FluxExchangeResult < org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person > org.springframework.test.web.reactive.server.samples.FluxExchangeResult<org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> = this . org.springframework.test.web.reactive.server.samples.WebTestClient . get ( ) . uri ( STRING ) . accept ( TEXT_EVENT_STREAM ) . exchange ( ) . expectStatus ( ) . isOk ( ) . expectHeader ( ) . contentType ( TEXT_EVENT_STREAM ) . expectBody ( org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person .class ) . returnResult ( ) ; StepVerifier . create ( org.springframework.test.web.reactive.server.samples.FluxExchangeResult<org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> . getResponseBody ( ) ) . expectNext ( new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) . expectNextCount ( NUMBER ) . consumeNextWith ( person -> assertThat ( person . getName ( ) , endsWith ( STRING ) ) ) . thenCancel ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.reactive.server.samples.WebTestClient . post ( ) . uri ( STRING ) . body ( Mono . just ( new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) , org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person .class ) . exchange ( ) . expectStatus ( ) . isCreated ( ) . expectHeader ( ) . valueEquals ( STRING , STRING ) . expectBody ( ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( @ PathVariable java.lang.String java.lang.String ) { return new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping org.springframework.test.web.reactive.server.samples.Flux<org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> < org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person > org.springframework.test.web.reactive.server.samples.Flux<org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> ( ) { return Flux . just ( new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( params = STRING ) java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> < java.lang.String , org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person > java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> ( ) { java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> < java.lang.String , org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person > java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> = new java.util.LinkedHashMap<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> <> ( ) ; java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> . org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> . org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> . org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING , new org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ( STRING ) ) ; return java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( produces = STRING ) org.springframework.test.web.reactive.server.samples.Flux<org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> < org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person > org.springframework.test.web.reactive.server.samples.Flux<org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> ( ) { return Flux . interval ( java.time.Duration ( NUMBER ) ) . onBackpressureBuffer ( NUMBER ) . map ( index -> new Person ( STRING + index ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping org.springframework.test.web.reactive.server.samples.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.test.web.reactive.server.samples.ResponseEntity<java.lang.String> ( @ RequestBody org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ) { return ResponseEntity . created ( java.net.URI . java.net.URI ( STRING + org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person . java.lang.String ( ) ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ JsonCreator public void ( @ JsonProperty ( STRING ) java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) return true ; if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) return false ; org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person = ( org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person ) java.lang.Object ; return java.lang.String ( ) . boolean ( org.springframework.test.web.reactive.server.samples.ResponseEntityTests.Person . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.String ( ) . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String + STRING ; }  <METHOD_END>
