<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.jpa.repository.User = new User ( STRING , STRING , STRING ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER ) ; org.springframework.data.jpa.repository.User = new User ( STRING , STRING , STRING ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.data.jpa.repository.User = new User ( STRING , STRING , STRING ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER ) ; org.springframework.data.jpa.repository.User = new User ( STRING , STRING , STRING ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER ) ; org.springframework.data.jpa.repository.Role = new Role ( STRING ) ; SampleSecurityContextHolder . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.jpa.repository.Query = org.springframework.data.jpa.repository.EntityManager . createQuery ( STRING ) ; java.lang.Long java.lang.Long = ( java.lang.Long ) org.springframework.data.jpa.repository.Query . getSingleResult ( ) ; void ( ) ; assertThat ( ( java.lang.Long ) org.springframework.data.jpa.repository.Query . getSingleResult ( ) , is ( java.lang.Long + NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . findOne ( java.lang.Integer ) . get ( ) ; assertThat ( org.springframework.data.jpa.repository.User . getFirstname ( ) , is ( org.springframework.data.jpa.repository.User . getFirstname ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.lang.Iterable<org.springframework.data.jpa.repository.User> < User > java.lang.Iterable<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.User . getId ( ) , org.springframework.data.jpa.repository.User . getId ( ) ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findOne ( java.lang.Integer * NUMBER ) , is ( java . util . java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . save ( ( java.util.Collection<org.springframework.data.jpa.repository.User> < User > ) null ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . save ( new java.util.ArrayList<org.springframework.data.jpa.repository.User> < User > ( ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . findOne ( java.lang.Integer ) . get ( ) ; org.springframework.data.jpa.repository.User . setLastname ( STRING ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . findOne ( java.lang.Integer ) . get ( ) ; assertThat ( org.springframework.data.jpa.repository.User . getFirstname ( ) , is ( org.springframework.data.jpa.repository.User . getFirstname ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( java.lang.Integer ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( java.lang.Integer * NUMBER ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.UserRepository . delete ( org.springframework.data.jpa.repository.User . getId ( ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( java.lang.Integer ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findOne ( java.lang.Integer ) , is ( java . util . java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.UserRepository . delete ( org.springframework.data.jpa.repository.User ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( java.lang.Integer ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findOne ( java.lang.Integer ) , is ( java . util . java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( Sort . by ( ASC , STRING ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; Order org.springframework.data.jpa.repository.Order = new Order ( ASC , STRING ) . ignoreCase ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( Sort . by ( org.springframework.data.jpa.repository.Order ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; long long = org.springframework.data.jpa.repository.UserRepository . count ( ) ; org.springframework.data.jpa.repository.UserRepository . delete ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( org.springframework.data.jpa.repository.User . getId ( ) ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( org.springframework.data.jpa.repository.User . getId ( ) ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . count ( ) , is ( long - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; long long = org.springframework.data.jpa.repository.UserRepository . count ( ) ; org.springframework.data.jpa.repository.UserRepository . deleteInBatch ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( org.springframework.data.jpa.repository.User . getId ( ) ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( org.springframework.data.jpa.repository.User . getId ( ) ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . count ( ) , is ( long - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new java.util.ArrayList<org.springframework.data.jpa.repository.User> < User > ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; org.springframework.data.jpa.repository.UserRepository . renameAllUsersTo ( STRING ) ; long long = org.springframework.data.jpa.repository.UserRepository . count ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findByLastname ( STRING ) . size ( ) , is ( java.lang.Long . java.lang.Long ( long ) . int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.UserRepository . findByLastname ( ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastname ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . findByEmailAddress ( STRING ) ; assertThat ( org.springframework.data.jpa.repository.User , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.User , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . count ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findAll ( ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; org.springframework.data.jpa.repository.UserRepository . deleteAll ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . count ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.UserRepository . deleteAllInBatch ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . count ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.User . addColleague ( org.springframework.data.jpa.repository.User ) ; void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . findOne ( org.springframework.data.jpa.repository.User . getId ( ) ) . get ( ) ; assertThat ( org.springframework.data.jpa.repository.User , is ( org.springframework.data.jpa.repository.User ) ) ; java.util.Set<org.springframework.data.jpa.repository.User> < User > java.util.Set<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.User . getColleagues ( ) ; assertThat ( java.util.Set<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.Set<org.springframework.data.jpa.repository.User> . contains ( org.springframework.data.jpa.repository.User ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DataAccessException .class ) public void void ( ) { org.springframework.data.jpa.repository.User . addRole ( new Role ( STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.User . addColleague ( org.springframework.data.jpa.repository.User ) ; void ( ) ; org.springframework.data.jpa.repository.User . addColleague ( new User ( STRING , STRING , STRING ) ) ; org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . findOne ( org.springframework.data.jpa.repository.User . getId ( ) ) . get ( ) ; java.util.Set<org.springframework.data.jpa.repository.User> < User > java.util.Set<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.User . getColleagues ( ) ; assertThat ( java.util.Set<org.springframework.data.jpa.repository.User> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.Set<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = org.springframework.data.jpa.repository.UserRepository . count ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setEmailAddress ( STRING ) ; org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . count ( ) == long + NUMBER , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.UserRepository . someCustomMethod ( new User ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.UserRepository . findByOverrridingMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.repository.UserRepository . findByAnnotatedQuery ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . countWithFirstname ( STRING ) . longValue ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findAll ( where ( userHasFirstname ( STRING ) ) ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findOne ( userHasFirstname ( STRING ) ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findOne ( userHasLastname ( STRING ) ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = IncorrectResultSizeDataAccessException .class ) public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.UserRepository . findOne ( userHasFirstnameLike ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Specification < User > org.springframework.data.jpa.repository.Specification<org.springframework.data.jpa.repository.User> = where ( userHasFirstname ( STRING ) ) . or ( userHasLastname ( STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Specification<org.springframework.data.jpa.repository.User> ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Specification < User > org.springframework.data.jpa.repository.Specification<org.springframework.data.jpa.repository.User> = not ( userHasFirstname ( STRING ) ) . and ( userHasLastname ( STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Specification<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Specification < User > org.springframework.data.jpa.repository.Specification<org.springframework.data.jpa.repository.User> = where ( userHasFirstname ( STRING ) ) . or ( userHasLastname ( STRING ) ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Specification<org.springframework.data.jpa.repository.User> , PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . hasPrevious ( ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; assertTrue ( org.springframework.data.jpa.repository.UserRepository . findByLastnameOrFirstname ( STRING , STRING ) . containsAll ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameOrLastname ( STRING , STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameLikeOrderByFirstnameDesc ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertEquals ( org.springframework.data.jpa.repository.User , java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) ) ; assertEquals ( org.springframework.data.jpa.repository.User , java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) ) ; assertEquals ( org.springframework.data.jpa.repository.User , java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameNotLike ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameNot ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; void ( org.springframework.data.jpa.repository.UserRepository . findAll ( ) , org.springframework.data.jpa.repository.UserRepository . findAll ( ( Specification < User > ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; void ( org.springframework.data.jpa.repository.UserRepository . findAll ( ( Sort ) null ) , org.springframework.data.jpa.repository.UserRepository . findAll ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Pageable org.springframework.data.jpa.repository.Pageable = PageRequest . of ( NUMBER , NUMBER ) ; void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findAll ( ( Specification < User > ) null , org.springframework.data.jpa.repository.Pageable ) , is ( org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Pageable ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findAll ( ( Pageable ) null ) , is ( ( Page < User > ) new PageImpl < User > ( org.springframework.data.jpa.repository.UserRepository . findAll ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; org.springframework.data.jpa.repository.EntityManager . detach ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.UserRepository . delete ( org.springframework.data.jpa.repository.User ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . count ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> ( null ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , anyOf ( hasItem ( org.springframework.data.jpa.repository.User ) , hasItem ( org.springframework.data.jpa.repository.User ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , not ( hasItem ( org.springframework.data.jpa.repository.User ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> ( Sort . by ( Direction . ASC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItem ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , not ( hasItem ( org.springframework.data.jpa.repository.User ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , not ( hasItem ( org.springframework.data.jpa.repository.User ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> ( Sort . by ( Direction . DESC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItem ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , not ( hasItem ( org.springframework.data.jpa.repository.User ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , not ( hasItem ( org.springframework.data.jpa.repository.User ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.UserRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByManagerLastname ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByManagerLastname ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; org.springframework.data.jpa.repository.User . addColleague ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User . addColleague ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.UserRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByColleaguesLastname ( org.springframework.data.jpa.repository.User . getLastname ( ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByColleaguesLastname ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( new User ( STRING , null , STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameNull ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByEmailAddressLike ( STRING , Sort . by ( Direction . ASC , STRING ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findBySpringDataNamedQuery ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Page < java.lang.String > org.springframework.data.jpa.repository.Page<java.lang.String> = org.springframework.data.jpa.repository.UserRepository . findByLastnameGrouped ( PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<java.lang.String> . getTotalPages ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByAgeLessThanEqual ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByAgeGreaterThanEqual ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findNativeByLastname ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.User . setActive ( false ) ; org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByActiveTrue ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.User . setActive ( false ) ; org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByActiveFalse ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.User . addColleague ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = null ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByCreatedAtAfter ( org.springframework.data.jpa.repository.User . getCreatedAt ( ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByCreatedAtBefore ( org.springframework.data.jpa.repository.User . getCreatedAt ( ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameStartingWith ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameEndingWith ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameContaining ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstname ( STRING , null ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameIn ( null , STRING ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItem ( org.springframework.data.jpa.repository.User ) ) ; org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( ( Pageable ) null ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = org.springframework.data.jpa.repository.UserRepository . findOnesByNativeQuery ( ) ; assertThat ( java.util.List<java.lang.Integer> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Integer> , hasItem ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.Set<java.lang.Integer> < java.lang.Integer > java.util.Set<java.lang.Integer> = new java.util.HashSet<java.lang.Integer> < java.lang.Integer > ( ) ; java.util.Set<java.lang.Integer> . boolean ( org.springframework.data.jpa.repository.User . getId ( ) ) ; java.util.Set<java.lang.Integer> . boolean ( org.springframework.data.jpa.repository.User . getId ( ) ) ; java.lang.Iterable<org.springframework.data.jpa.repository.User> < User > java.lang.Iterable<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( java.util.Set<java.lang.Integer> ) ; assertThat ( java.lang.Iterable<org.springframework.data.jpa.repository.User> , is ( Matchers .< User > iterableWithSize ( NUMBER ) ) ) ; assertThat ( java.lang.Iterable<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { org.springframework.data.jpa.repository.EntityManager . persist ( org.springframework.data.jpa.repository.Role ) ; org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.UserRepository . flush ( ) ; java.lang.Integer = org.springframework.data.jpa.repository.User . getId ( ) ; assertThat ( java.lang.Integer , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.User . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.User . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.User . getId ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( java.lang.Integer ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( org.springframework.data.jpa.repository.User . getId ( ) ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( org.springframework.data.jpa.repository.User . getId ( ) ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . exists ( org.springframework.data.jpa.repository.User . getId ( ) ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> private static < T > void void ( java.util.Collection<T> < T > java.util.Collection<T> , java.util.Collection<T> < T > java.util.Collection<T> ) { for ( T T : java.util.Collection<T> ) { assertThat ( T , isIn ( java.util.Collection<T> ) ) ; } for ( T T : java.util.Collection<T> ) { assertThat ( T , isIn ( java.util.Collection<T> ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> ) { void ( ) ; long long = org.springframework.data.jpa.repository.UserRepository . count ( ) ; org.springframework.data.jpa.repository.UserRepository . delete ( java.util.List<org.springframework.data.jpa.repository.User> ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . count ( ) , is ( long ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( PageRequest . of ( NUMBER , NUMBER , Sort . by ( STRING ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . isEmpty ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAllPaged ( PageRequest . of ( NUMBER , NUMBER , Sort . by ( STRING ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( ( int ) org.springframework.data.jpa.repository.UserRepository . count ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( new Specification < User > ( ) { public org.springframework.data.jpa.repository.Predicate org.springframework.data.jpa.repository.Predicate ( Root < User > org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.User> , CriteriaQuery < ? > org.springframework.data.jpa.repository.CriteriaQuery<?> , CriteriaBuilder org.springframework.data.jpa.repository.CriteriaBuilder ) { return org.springframework.data.jpa.repository.CriteriaBuilder . equal ( org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.User> . get ( STRING ) , STRING ) ; } } , PageRequest . of ( NUMBER , NUMBER , Sort . by ( STRING ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.Predicate org.springframework.data.jpa.repository.Predicate ( Root < User > org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.User> , CriteriaQuery < ? > org.springframework.data.jpa.repository.CriteriaQuery<?> , CriteriaBuilder org.springframework.data.jpa.repository.CriteriaBuilder ) { return org.springframework.data.jpa.repository.CriteriaBuilder . equal ( org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.User> . get ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.User . setManager ( null ) ; org.springframework.data.jpa.repository.User . setManager ( null ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( PageRequest . of ( NUMBER , NUMBER , Sort . by ( Sort . Direction . ASC , STRING ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) . getManager ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) . getManager ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) . getManager ( ) . getFirstname ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) . getManager ( ) . getFirstname ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameLike ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameLikeNamed ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . countByLastname ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . countUsersByFirstname ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . existsByLastname ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . existsByLastname ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.repository.UserRepository . findAll ( java.util.Collections .< java.lang.Integer > java.util.Set<java.lang.Integer> ( ) ) , is ( emptyIterable ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findAll ( ( java.lang.Iterable<java.lang.Integer> < java.lang.Integer > ) null ) , is ( emptyIterable ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.data.jpa.repository.UserRepository . findFirstnamesByLastname ( STRING ) ; assertThat ( java.util.List<java.lang.String> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.String> , hasItem ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . getOne ( org.springframework.data.jpa.repository.User . getId ( ) ) ; assertThat ( org.springframework.data.jpa.repository.User , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.Collection<org.springframework.data.jpa.repository.User> < User > java.util.Collection<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByIdIn ( org.springframework.data.jpa.repository.User . getId ( ) , org.springframework.data.jpa.repository.User . getId ( ) ) ; assertThat ( java.util.Collection<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.Collection<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.UserRepository . updateUserActiveState ( false , org.springframework.data.jpa.repository.User . getId ( ) , org.springframework.data.jpa.repository.User . getId ( ) , org.springframework.data.jpa.repository.User . getId ( ) , org.springframework.data.jpa.repository.User . getId ( ) ) ; long long = org.springframework.data.jpa.repository.UserRepository . count ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findByActiveFalse ( ) . size ( ) , is ( ( int ) long ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findByActiveTrue ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAllByOrderByLastnameAsc ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , contains ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.User . getColleagues ( ) . add ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User . getColleagues ( ) . add ( org.springframework.data.jpa.repository.User ) ; void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( Sort . by ( Sort . Direction . ASC , STRING ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.User . getColleagues ( ) . add ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User . getColleagues ( ) . add ( org.springframework.data.jpa.repository.User ) ; void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( PageRequest . of ( NUMBER , NUMBER , Sort . by ( Sort . Direction . ASC , STRING ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.User . setAddress ( new Address ( STRING , STRING , STRING , STRING ) ) ; void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( PageRequest . of ( NUMBER , NUMBER , Sort . by ( Sort . Direction . ASC , STRING ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = STRING . byte[] ( STRING ) ; org.springframework.data.jpa.repository.User . setBinaryData ( byte[] ) ; void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByBinaryData ( byte[] ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) . getBinaryData ( ) , is ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.Collection<org.springframework.data.jpa.repository.User> < User > java.util.Collection<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByIdsCustomWithPositionalVarArgs ( org.springframework.data.jpa.repository.User . getId ( ) , org.springframework.data.jpa.repository.User . getId ( ) ) ; assertThat ( java.util.Collection<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.Collection<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.Collection<org.springframework.data.jpa.repository.User> < User > java.util.Collection<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByIdsCustomWithNamedVarArgs ( org.springframework.data.jpa.repository.User . getId ( ) , org.springframework.data.jpa.repository.User . getId ( ) ) ; assertThat ( java.util.Collection<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.Collection<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.UserRepository . deleteAll ( ) ; SpecialUser org.springframework.data.jpa.repository.SpecialUser = new SpecialUser ( ) ; org.springframework.data.jpa.repository.SpecialUser . setFirstname ( STRING ) ; org.springframework.data.jpa.repository.SpecialUser . setEmailAddress ( STRING ) ; SpecialUser org.springframework.data.jpa.repository.SpecialUser = org.springframework.data.jpa.repository.UserRepository . saveAndFlush ( org.springframework.data.jpa.repository.SpecialUser ) ; assertThat ( org.springframework.data.jpa.repository.SpecialUser . getFirstname ( ) , is ( org.springframework.data.jpa.repository.SpecialUser . getFirstname ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.SpecialUser . getEmailAddress ( ) , is ( org.springframework.data.jpa.repository.SpecialUser . getEmailAddress ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; SpecialUser org.springframework.data.jpa.repository.SpecialUser = new SpecialUser ( ) ; org.springframework.data.jpa.repository.SpecialUser . setFirstname ( STRING ) ; org.springframework.data.jpa.repository.SpecialUser . setEmailAddress ( STRING ) ; org.springframework.data.jpa.repository.UserRepository . saveAndFlush ( org.springframework.data.jpa.repository.SpecialUser ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( Example . of ( new User ( ) , ExampleMatcher . matching ( ) . withIgnorePaths ( STRING , STRING , STRING ) ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; SpecialUser org.springframework.data.jpa.repository.SpecialUser = new SpecialUser ( ) ; org.springframework.data.jpa.repository.SpecialUser . setFirstname ( STRING ) ; org.springframework.data.jpa.repository.SpecialUser . setEmailAddress ( STRING ) ; org.springframework.data.jpa.repository.UserRepository . saveAndFlush ( org.springframework.data.jpa.repository.SpecialUser ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( new User ( ) , matching ( ) . withIgnorePaths ( STRING , STRING , STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; SpecialUser org.springframework.data.jpa.repository.SpecialUser = new SpecialUser ( ) ; org.springframework.data.jpa.repository.SpecialUser . setFirstname ( STRING ) ; org.springframework.data.jpa.repository.SpecialUser . setEmailAddress ( STRING ) ; org.springframework.data.jpa.repository.UserRepository . saveAndFlush ( org.springframework.data.jpa.repository.SpecialUser ) ; Example < SpecialUser > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.SpecialUser> = Example . of ( new SpecialUser ( ) , matching ( ) . withIgnorePaths ( STRING , STRING , STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.SpecialUser> < SpecialUser > java.util.List<org.springframework.data.jpa.repository.SpecialUser> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.SpecialUser> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.SpecialUser> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( PageRequest . of ( NUMBER , NUMBER , Sort . by ( Sort . Direction . ASC , STRING ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( PageRequest . of ( NUMBER , NUMBER , Sort . by ( new Sort . Sort ( Direction . ASC , STRING ) . ignoreCase ( ) ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.User . getAttributes ( ) . add ( STRING ) ; org.springframework.data.jpa.repository.User . getAttributes ( ) . add ( STRING ) ; org.springframework.data.jpa.repository.User . getAttributes ( ) . add ( STRING ) ; void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByAttributesIn ( new java.util.HashSet<java.lang.String> < java.lang.String > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . deleteByLastname ( org.springframework.data.jpa.repository.User . getLastname ( ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItem ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.UserRepository . deleteByLastname ( org.springframework.data.jpa.repository.User . getLastname ( ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . countByLastname ( org.springframework.data.jpa.repository.User . getLastname ( ) ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . removeByLastname ( org.springframework.data.jpa.repository.User . getLastname ( ) ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . removeByLastname ( STRING ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . deleteByLastname ( STRING ) , empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { byte [] byte[] = STRING . byte[] ( STRING ) ; org.springframework.data.jpa.repository.User . setBinaryData ( byte[] ) ; void ( ) ; byte [] byte[] = null ; assertThat ( byte[] . int , is ( byte[] . int ) ) ; assertThat ( byte[] , is ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = STRING . byte[] ( STRING ) ; org.springframework.data.jpa.repository.User . setBinaryData ( byte[] ) ; void ( ) ; byte [] byte[] = org.springframework.data.jpa.repository.UserRepository . findBinaryDataByIdNative ( org.springframework.data.jpa.repository.User . getId ( ) ) ; assertThat ( byte[] . int , is ( byte[] . int ) ) ; assertThat ( byte[] , is ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.User . setFirstname ( null ) ; void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAllByFirstnameLike ( STRING , PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByNamedQueryAndCountProjection ( STRING , PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findFirstByOrderByAgeDesc ( ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findFirst1ByOrderByAgeDesc ( ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findTopByOrderByAgeAsc ( ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findTop1ByOrderByAgeAsc ( ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findFirst2ByOrderByAgeDesc ( ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findTop2ByOrderByAgeDesc ( ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findFirst2UsersBy ( Sort . by ( ASC , STRING ) ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findTop2UsersBy ( Sort . by ( ASC , STRING ) ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findFirst3UsersBy ( PageRequest . of ( NUMBER , NUMBER , ASC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findFirst3UsersBy ( PageRequest . of ( NUMBER , NUMBER , ASC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItems ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findFirst2UsersBy ( PageRequest . of ( NUMBER , NUMBER , ASC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findFirst2UsersBy ( PageRequest . of ( NUMBER , NUMBER , ASC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItems ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; Slice < User > org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findTop3UsersBy ( PageRequest . of ( NUMBER , NUMBER , ASC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; Slice < User > org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findTop3UsersBy ( PageRequest . of ( NUMBER , NUMBER , ASC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItems ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.User ; Slice < User > org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findTop2UsersBy ( PageRequest . of ( NUMBER , NUMBER , ASC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; Slice < User > org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findTop2UsersBy ( PageRequest . of ( NUMBER , NUMBER , ASC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItems ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Optional < User > org.springframework.data.jpa.repository.Optional<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findOptionalByEmailAddress ( STRING ) ; assertThat ( org.springframework.data.jpa.repository.Optional<org.springframework.data.jpa.repository.User> . isPresent ( ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.repository.Optional<org.springframework.data.jpa.repository.User> . get ( ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameAndLastnameWithSpelExpression ( STRING , STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameWithSpelExpression ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findOliverBySpELExpressionWithoutArgumentsWithQuestionmark ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findOliverBySpELExpressionWithoutArgumentsWithColon ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findUsersByAgeForSpELExpressionByIndexedParameter ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findUsersByFirstnameForSpELExpression ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; SampleSecurityContextHolder . getCurrent ( ) . setPrincipal ( org.springframework.data.jpa.repository.User ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findCurrentUserWithCustomQuery ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; SampleSecurityContextHolder . getCurrent ( ) . setPrincipal ( org.springframework.data.jpa.repository.User ) ; java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findCurrentUserWithCustomQuery ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; SampleSecurityContextHolder . getCurrent ( ) . setPrincipal ( org.springframework.data.jpa.repository.User ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameAndCurrentUserWithCustomQuery ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findUsersByFirstnameForSpELExpressionWithParameterVariableOnly ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findUsersByFirstnameForSpELExpressionWithParameterIndexOnly ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findUsersInNativeQueryWithPagination ( PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findUsersInNativeQueryWithPagination ( PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findUsersByFirstnameForSpELExpressionWithParameterIndexOnlyWithEntityExpression ( STRING , STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByAttributesIn ( new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByAgeIn ( java.util.Arrays .< java.lang.Integer > java.util.List<java.lang.Integer> ( ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . queryByAgeIn ( new java.lang.Integer [ NUMBER ] ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . queryByAgeInOrFirstname ( new java.lang.Integer [ NUMBER ] , org.springframework.data.jpa.repository.User . getFirstname ( ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.stream.Stream<org.springframework.data.jpa.repository.User> < User > java.util.stream.Stream<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAllByCustomQueryAndStream ( ) ; final java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = new java.util.ArrayList<org.springframework.data.jpa.repository.User> < User > ( ) ; try { java.util.stream.Stream<org.springframework.data.jpa.repository.User> . forEach ( new java.util.function.Consumer<org.springframework.data.jpa.repository.User> < User > ( ) { @ java.lang.Override public void void ( User org.springframework.data.jpa.repository.User ) { java.util.List<org.springframework.data.jpa.repository.User> . add ( org.springframework.data.jpa.repository.User ) ; } } ) ; } finally { java.util.stream.Stream<org.springframework.data.jpa.repository.User> . close ( ) ; } assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( User org.springframework.data.jpa.repository.User ) { java.util.List<org.springframework.data.jpa.repository.User> . add ( org.springframework.data.jpa.repository.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.stream.Stream<org.springframework.data.jpa.repository.User> < User > java.util.stream.Stream<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . readAllByFirstnameNotNull ( ) ; final java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = new java.util.ArrayList<org.springframework.data.jpa.repository.User> < User > ( ) ; try { java.util.stream.Stream<org.springframework.data.jpa.repository.User> . forEach ( new java.util.function.Consumer<org.springframework.data.jpa.repository.User> < User > ( ) { @ java.lang.Override public void void ( User org.springframework.data.jpa.repository.User ) { java.util.List<org.springframework.data.jpa.repository.User> . add ( org.springframework.data.jpa.repository.User ) ; } } ) ; } finally { java.util.stream.Stream<org.springframework.data.jpa.repository.User> . close ( ) ; } assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( User org.springframework.data.jpa.repository.User ) { java.util.List<org.springframework.data.jpa.repository.User> . add ( org.springframework.data.jpa.repository.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.stream.Stream<org.springframework.data.jpa.repository.User> < User > java.util.stream.Stream<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . streamAllPaged ( PageRequest . of ( NUMBER , NUMBER ) ) ; final java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = new java.util.ArrayList<org.springframework.data.jpa.repository.User> < User > ( ) ; try { java.util.stream.Stream<org.springframework.data.jpa.repository.User> . forEach ( new java.util.function.Consumer<org.springframework.data.jpa.repository.User> < User > ( ) { @ java.lang.Override public void void ( User org.springframework.data.jpa.repository.User ) { java.util.List<org.springframework.data.jpa.repository.User> . add ( org.springframework.data.jpa.repository.User ) ; } } ) ; } finally { java.util.stream.Stream<org.springframework.data.jpa.repository.User> . close ( ) ; } assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( User org.springframework.data.jpa.repository.User ) { java.util.List<org.springframework.data.jpa.repository.User> . add ( org.springframework.data.jpa.repository.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER ) ; org.springframework.data.jpa.repository.User . setCreatedAt ( null ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( of ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setCreatedAt ( null ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( of ( org.springframework.data.jpa.repository.User , ExampleMatcher . matching ( ) . withIgnorePaths ( STRING , STRING , STRING ) ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { org.springframework.data.jpa.repository.UserRepository . findAll ( ( Example < User > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnorePaths ( STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.UserRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setLastname ( STRING ) ; org.springframework.data.jpa.repository.User . setAge ( org.springframework.data.jpa.repository.User . getAge ( ) ) ; org.springframework.data.jpa.repository.User . setCreatedAt ( null ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setCreatedAt ( null ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnorePaths ( STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.jpa.repository.User . setAddress ( new Address ( STRING , STRING , STRING , STRING ) ) ; org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setCreatedAt ( null ) ; org.springframework.data.jpa.repository.User . setAddress ( new Address ( STRING , null , null , null ) ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnorePaths ( STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withStringMatcher ( StringMatcher . STARTING ) . withIgnorePaths ( STRING , STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withStringMatcher ( StringMatcher . ENDING ) . withIgnorePaths ( STRING , STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withStringMatcher ( StringMatcher . REGEX ) ) ; org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnoreCase ( ) . withIgnorePaths ( STRING , STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withStringMatcher ( StringMatcher . STARTING ) . withIgnoreCase ( ) . withIgnorePaths ( STRING , STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . assumeThat ( PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.EntityManager ) , not ( equalTo ( PersistenceProvider . OPEN_JPA ) ) ) ; void ( ) ; org.springframework.data.jpa.repository.User . setAddress ( new Address ( STRING , STRING , STRING , STRING ) ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setEmailAddress ( STRING ) ; org.springframework.data.jpa.repository.User . setActive ( org.springframework.data.jpa.repository.User . isActive ( ) ) ; org.springframework.data.jpa.repository.User . setAge ( org.springframework.data.jpa.repository.User . getAge ( ) ) ; org.springframework.data.jpa.repository.User . setFirstname ( org.springframework.data.jpa.repository.User . getFirstname ( ) ) ; org.springframework.data.jpa.repository.User . setLastname ( org.springframework.data.jpa.repository.User . getLastname ( ) ) ; org.springframework.data.jpa.repository.UserRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( org.springframework.data.jpa.repository.User . getFirstname ( ) ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIncludeNullValues ( ) . withIgnorePaths ( STRING , STRING , STRING , STRING , STRING , STRING ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnoreCase ( ) . withIgnorePaths ( STRING , STRING ) . withMatcher ( STRING , new GenericPropertyMatcher ( ) . startsWith ( ) ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( STRING , STRING , STRING ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER ) ; org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnoreCase ( ) . withIgnorePaths ( STRING , STRING ) . withStringMatcher ( StringMatcher . STARTING ) . withIgnoreCase ( ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> , Sort . by ( DESC , STRING ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { User org.springframework.data.jpa.repository.User = new User ( STRING + int , STRING , STRING + int + STRING ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER + int ) ; org.springframework.data.jpa.repository.UserRepository . save ( org.springframework.data.jpa.repository.User ) ; } User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnoreCase ( ) . withIgnorePaths ( STRING , STRING ) . withStringMatcher ( StringMatcher . STARTING ) . withIgnoreCase ( ) ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> , PageRequest . of ( NUMBER , NUMBER , Sort . by ( DESC , STRING ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . hasNext ( ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnoreCase ( ) . withIgnorePaths ( STRING , STRING ) . withStringMatcher ( StringMatcher . STARTING ) . withIgnoreCase ( ) ) ; org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> , PageRequest . of ( NUMBER , NUMBER , Sort . by ( DESC , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setFirstname ( STRING ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; org.springframework.data.jpa.repository.User . setManager ( org.springframework.data.jpa.repository.User ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnoreCase ( ) . withIgnorePaths ( STRING , STRING ) . withStringMatcher ( StringMatcher . STARTING ) . withIgnoreCase ( ) ) ; org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> , PageRequest . of ( NUMBER , NUMBER , Sort . by ( DESC , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnorePaths ( STRING ) ) ; User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . findOne ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( org.springframework.data.jpa.repository.User , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnorePaths ( STRING ) ) ; long long = org.springframework.data.jpa.repository.UserRepository . count ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( long , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; User org.springframework.data.jpa.repository.User = new User ( ) ; org.springframework.data.jpa.repository.User . setAge ( NUMBER ) ; Example < User > org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> = Example . of ( org.springframework.data.jpa.repository.User , matching ( ) . withIgnorePaths ( STRING ) ) ; boolean boolean = org.springframework.data.jpa.repository.UserRepository . exists ( org.springframework.data.jpa.repository.Example<org.springframework.data.jpa.repository.User> ) ; assertThat ( boolean , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( where ( userHasLastnameLikeWithSort ( STRING ) ) , PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> ( Sort org.springframework.data.jpa.repository.Sort ) { void ( ) ; Specification < User > org.springframework.data.jpa.repository.Specification<org.springframework.data.jpa.repository.User> = where ( userHasFirstname ( STRING ) ) . or ( userHasLastname ( STRING ) ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findAll ( org.springframework.data.jpa.repository.Specification<org.springframework.data.jpa.repository.User> , PageRequest . of ( NUMBER , NUMBER , org.springframework.data.jpa.repository.Sort ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; return org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> ; }  <METHOD_END>
