<METHOD_START> @ Test public void void ( ) { CallableCacheLoaderAdapter < java.lang.String , java.lang.Object > org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> = new CallableCacheLoaderAdapter <> ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> , STRING , org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Object> , STRING ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getCacheLoader ( ) , is ( sameInstance ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getKey ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getRegion ( ) , is ( sameInstance ( org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Object> ) ) ) ; assertThat ( java.lang.String . java.lang.String ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getArgument ( ) ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CallableCacheLoaderAdapter < java.lang.String , java.lang.Object > org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> = new CallableCacheLoaderAdapter <> ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> , STRING , org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Object> ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getCacheLoader ( ) , is ( sameInstance ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getKey ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getRegion ( ) , is ( sameInstance ( org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Object> ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getArgument ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CallableCacheLoaderAdapter < java.lang.String , java.lang.Object > org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> = new CallableCacheLoaderAdapter <> ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getCacheLoader ( ) , is ( sameInstance ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getKey ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getRegion ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getArgument ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.cache.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( STRING ) ; new CallableCacheLoaderAdapter <> ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { CallableCacheLoaderAdapter < java.lang.String , java.lang.Object > org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> = new CallableCacheLoaderAdapter <> ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> , STRING , org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Object> , STRING ) ; when ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> . load ( any ( LoaderHelper .class ) ) ) . thenAnswer ( new Answer < java.lang.String > ( ) { public java.lang.String java.lang.String ( final InvocationOnMock org.springframework.data.gemfire.cache.InvocationOnMock ) throws java.lang.Throwable { LoaderHelper < java.lang.String , java.lang.Object > org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> = org.springframework.data.gemfire.cache.InvocationOnMock . getArgument ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> . getArgument ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> . getKey ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> . getRegion ( ) , is ( sameInstance ( org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Object> ) ) ) ; return STRING ; } } ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . call ( ) , is ( equalTo ( STRING ) ) ) ; verify ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> , times ( NUMBER ) ) . load ( isA ( LoaderHelper .class ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( final InvocationOnMock org.springframework.data.gemfire.cache.InvocationOnMock ) throws java.lang.Throwable { LoaderHelper < java.lang.String , java.lang.Object > org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> = org.springframework.data.gemfire.cache.InvocationOnMock . getArgument ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> . getArgument ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> . getKey ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> . getRegion ( ) , is ( sameInstance ( org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Object> ) ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CallableCacheLoaderAdapter < java.lang.String , java.lang.Object > org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> = new CallableCacheLoaderAdapter <> ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> , null , org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Object> ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getKey ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getRegion ( ) , is ( sameInstance ( org.springframework.data.gemfire.cache.Region<java.lang.String,java.lang.Object> ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . call ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CallableCacheLoaderAdapter < java.lang.String , java.lang.Object > org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> = new CallableCacheLoaderAdapter <> ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> , STRING , null ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getKey ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . getRegion ( ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . call ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new CallableCacheLoaderAdapter <> ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> ) . close ( ) ; verify ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CallableCacheLoaderAdapter < java.lang.String , java.lang.Object > org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> = new CallableCacheLoaderAdapter <> ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> ) ; when ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> . load ( eq ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> ) ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.gemfire.cache.CallableCacheLoaderAdapter<java.lang.String,java.lang.Object> . load ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> ) , is ( equalTo ( STRING ) ) ) ; verify ( org.springframework.data.gemfire.cache.CacheLoader<java.lang.String,java.lang.Object> , times ( NUMBER ) ) . load ( eq ( org.springframework.data.gemfire.cache.LoaderHelper<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
