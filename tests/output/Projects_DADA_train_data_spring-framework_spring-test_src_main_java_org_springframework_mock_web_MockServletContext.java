<METHOD_START> public void ( ) { this( STRING , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , null ); }  <METHOD_END>
<METHOD_START> public void ( ResourceLoader org.springframework.mock.web.ResourceLoader ) { this( STRING , org.springframework.mock.web.ResourceLoader ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , ResourceLoader org.springframework.mock.web.ResourceLoader ) { this . org.springframework.mock.web.ResourceLoader = ( org.springframework.mock.web.ResourceLoader != null ? org.springframework.mock.web.ResourceLoader : new DefaultResourceLoader ( ) ) ; this . java.lang.String = ( java.lang.String != null ? java.lang.String : STRING ) ; java.lang.String java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( WebUtils . TEMP_DIR_CONTEXT_ATTRIBUTE , new java.io.File ( java.lang.String ) ) ; } void ( this . java.lang.String , new MockRequestDispatcher ( this . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String ; } return this . java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = ( java.lang.String != null ? java.lang.String : STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , ServletContext org.springframework.mock.web.ServletContext ) { this . java.util.Map<java.lang.String,org.springframework.mock.web.ServletContext> . put ( java.lang.String , org.springframework.mock.web.ServletContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.ServletContext org.springframework.mock.web.ServletContext ( java.lang.String java.lang.String ) { if ( this . java.lang.String . boolean ( java.lang.String ) ) { return this ; } return this . java.util.Map<java.lang.String,org.springframework.mock.web.ServletContext> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = StringUtils . getFilenameExtension ( java.lang.String ) ; if ( this . java.util.Map<java.lang.String,org.springframework.mock.web.MediaType> . containsKey ( java.lang.String ) ) { return this . java.util.Map<java.lang.String,org.springframework.mock.web.MediaType> . get ( java.lang.String ) . toString ( ) ; } else { return MediaTypeFactory . getMediaType ( java.lang.String ) . map ( MimeType :: toString ) . orElse ( null ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , MediaType org.springframework.mock.web.MediaType ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.mock.web.MediaType> . put ( java.lang.String , org.springframework.mock.web.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String : java.lang.String + STRING ) ; Resource org.springframework.mock.web.Resource = this . org.springframework.mock.web.ResourceLoader . getResource ( java.lang.String ( java.lang.String ) ) ; try { java.io.File java.io.File = org.springframework.mock.web.Resource . getFile ( ) ; java.lang.String [] java.lang.String[] = java.io.File . java.lang.String[] ( ) ; if ( ObjectUtils . isEmpty ( java.lang.String[] ) ) { return null ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = java.lang.String + java.lang.String ; if ( org.springframework.mock.web.Resource . createRelative ( java.lang.String ) . getFile ( ) . isDirectory ( ) ) { java.lang.String += STRING ; } java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } return java.util.Set<java.lang.String> ; } catch ( java.io.IOException java.io.IOException ) { org.springframework.mock.web.Log . warn ( STRING + org.springframework.mock.web.Resource , java.io.IOException ) ; return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( java.lang.String java.lang.String ) throws java.net.MalformedURLException { Resource org.springframework.mock.web.Resource = this . org.springframework.mock.web.ResourceLoader . getResource ( java.lang.String ( java.lang.String ) ) ; if ( ! org.springframework.mock.web.Resource . exists ( ) ) { return null ; } try { return org.springframework.mock.web.Resource . getURL ( ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw java.net.MalformedURLException ; } catch ( java.io.IOException java.io.IOException ) { org.springframework.mock.web.Log . warn ( STRING + org.springframework.mock.web.Resource , java.io.IOException ) ; return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) { Resource org.springframework.mock.web.Resource = this . org.springframework.mock.web.ResourceLoader . getResource ( java.lang.String ( java.lang.String ) ) ; if ( ! org.springframework.mock.web.Resource . exists ( ) ) { return null ; } try { return org.springframework.mock.web.Resource . getInputStream ( ) ; } catch ( java.io.IOException java.io.IOException ) { org.springframework.mock.web.Log . warn ( STRING + org.springframework.mock.web.Resource , java.io.IOException ) ; return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.RequestDispatcher org.springframework.mock.web.RequestDispatcher ( java.lang.String java.lang.String ) { Assert . isTrue ( java.lang.String . boolean ( STRING ) , ( ) STRING + path + STRING ) ; return new MockRequestDispatcher ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.RequestDispatcher org.springframework.mock.web.RequestDispatcher ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,org.springframework.mock.web.RequestDispatcher> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , RequestDispatcher org.springframework.mock.web.RequestDispatcher ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.mock.web.RequestDispatcher , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.mock.web.RequestDispatcher> . put ( java.lang.String , org.springframework.mock.web.RequestDispatcher ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.mock.web.RequestDispatcher> . remove ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; void ( this . java.lang.String ) ; this . java.lang.String = java.lang.String ; void ( this . java.lang.String , new MockRequestDispatcher ( this . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public org.springframework.mock.web.Servlet org.springframework.mock.web.Servlet ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public java.util.Enumeration<org.springframework.mock.web.Servlet> < Servlet > java.util.Enumeration<org.springframework.mock.web.Servlet> ( ) { return java.util.Collections . java.util.Enumeration<org.springframework.mock.web.Servlet> ( java.util.Collections . java.util.Set<org.springframework.mock.web.Servlet> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { return java.util.Collections . java.util.Enumeration<java.lang.String> ( java.util.Collections . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { org.springframework.mock.web.Log . info ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public void void ( java.lang.Exception java.lang.Exception , java.lang.String java.lang.String ) { org.springframework.mock.web.Log . info ( java.lang.String , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { org.springframework.mock.web.Log . info ( java.lang.String , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Resource org.springframework.mock.web.Resource = this . org.springframework.mock.web.ResourceLoader . getResource ( java.lang.String ( java.lang.String ) ) ; try { return org.springframework.mock.web.Resource . getFile ( ) . getAbsolutePath ( ) ; } catch ( java.io.IOException java.io.IOException ) { org.springframework.mock.web.Log . warn ( STRING + org.springframework.mock.web.Resource , java.io.IOException ) ; return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { return java.util.Collections . java.util.Enumeration<java.lang.String> ( this . java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; if ( this . java.util.Map<java.lang.String,java.lang.String> . boolean ( java.lang.String ) ) { return false ; } this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; return true ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { return java.util.Collections . java.util.Enumeration<java.lang.String> ( new java.util.LinkedHashSet<java.lang.String> <> ( this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.String , STRING ) ; if ( java.lang.Object != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } else { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return ClassUtils . getDefaultClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { Assert . hasLength ( java.lang.String , STRING ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( this . java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Set<org.springframework.mock.web.SessionTrackingMode> < SessionTrackingMode > java.util.Set<org.springframework.mock.web.SessionTrackingMode> )			throws java.lang.IllegalStateException , java.lang.IllegalArgumentException { this . java.util.Set<org.springframework.mock.web.SessionTrackingMode> = java.util.Set<org.springframework.mock.web.SessionTrackingMode> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.mock.web.SessionTrackingMode> < SessionTrackingMode > java.util.Set<org.springframework.mock.web.SessionTrackingMode> ( ) { return java.util.Set<org.springframework.mock.web.SessionTrackingMode> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.mock.web.SessionTrackingMode> < SessionTrackingMode > java.util.Set<org.springframework.mock.web.SessionTrackingMode> ( ) { return ( this . java.util.Set<org.springframework.mock.web.SessionTrackingMode> != null ? java.util.Collections . java.util.Set<org.springframework.mock.web.SessionTrackingMode> ( this . java.util.Set<org.springframework.mock.web.SessionTrackingMode> ) : java.util.Set<org.springframework.mock.web.SessionTrackingMode> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.SessionCookieConfig org.springframework.mock.web.SessionCookieConfig ( ) { return this . org.springframework.mock.web.SessionCookieConfig ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.JspConfigDescriptor org.springframework.mock.web.JspConfigDescriptor ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public ServletRegistration . ServletRegistration.Dynamic ServletRegistration.Dynamic ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServletRegistration . ServletRegistration.Dynamic ServletRegistration.Dynamic ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServletRegistration . ServletRegistration.Dynamic ServletRegistration.Dynamic ( java.lang.String java.lang.String , Servlet org.springframework.mock.web.Servlet ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServletRegistration . ServletRegistration.Dynamic ServletRegistration.Dynamic ( java.lang.String java.lang.String , java.lang.Class<? extends org.springframework.mock.web.Servlet> < ? extends Servlet > java.lang.Class<? extends org.springframework.mock.web.Servlet> ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends org.springframework.mock.web.Servlet > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.mock.web.ServletException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.ServletRegistration org.springframework.mock.web.ServletRegistration ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,? extends org.springframework.mock.web.ServletRegistration> < java.lang.String , ? extends ServletRegistration > java.util.Map<java.lang.String,? extends org.springframework.mock.web.ServletRegistration> ( ) { return java.util.Collections . java.util.Map<java.lang.String,org.springframework.mock.web.ServletRegistration> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public FilterRegistration . FilterRegistration.Dynamic FilterRegistration.Dynamic ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public FilterRegistration . FilterRegistration.Dynamic FilterRegistration.Dynamic ( java.lang.String java.lang.String , Filter org.springframework.mock.web.Filter ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public FilterRegistration . FilterRegistration.Dynamic FilterRegistration.Dynamic ( java.lang.String java.lang.String , java.lang.Class<? extends org.springframework.mock.web.Filter> < ? extends Filter > java.lang.Class<? extends org.springframework.mock.web.Filter> ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends org.springframework.mock.web.Filter > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.mock.web.ServletException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.FilterRegistration org.springframework.mock.web.FilterRegistration ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,? extends org.springframework.mock.web.FilterRegistration> < java.lang.String , ? extends FilterRegistration > java.util.Map<java.lang.String,? extends org.springframework.mock.web.FilterRegistration> ( ) { return java.util.Collections . java.util.Map<java.lang.String,org.springframework.mock.web.FilterRegistration> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Class<? extends java.util.EventListener> < ? extends java.util.EventListener > java.lang.Class<? extends java.util.EventListener> ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends java.util.EventListener > void void ( T T ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends java.util.EventListener > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.mock.web.ServletException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
