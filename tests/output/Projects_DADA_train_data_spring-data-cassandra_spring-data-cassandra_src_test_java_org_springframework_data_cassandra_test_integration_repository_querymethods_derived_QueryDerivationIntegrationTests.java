<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { Person .class . java.lang.Package ( ) . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.test.integration.repository.querymethods.derived.SchemaAction org.springframework.data.cassandra.test.integration.repository.querymethods.derived.SchemaAction ( ) { return SchemaAction . RECREATE_DROP_UNUSED ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { deleteAllEntities ( ) ; Person org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person = new Person ( STRING , STRING ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . setNumberOfChildren ( NUMBER ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . setMainAddress ( new Address ( STRING , STRING ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . setAlternativeAddresses ( java.util.Arrays . java.util.List ( new Address ( STRING , STRING ) , new Address ( STRING , STRING ) , new Address ( STRING , STRING ) ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . save ( new Person ( STRING , STRING ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . save ( new Person ( STRING , STRING ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Version = CassandraVersion . get ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> < Person > java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByLastname ( STRING ) ; assertThat ( java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> ) . contains ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person , org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person , org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> < Person > java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByLastname ( STRING , new Sort ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> ) . contains ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person , org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person , org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> < Person > java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByLastnameOrderByFirstnameAsc ( STRING ) ; assertThat ( java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> ) . contains ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person , org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person , org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByFirstnameAndLastname ( STRING , STRING ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { org.springframework.data.cassandra.test.integration.repository.querymethods.derived.CassandraOperations . getCqlOperations ( ) . execute ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; Person org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByMainAddress ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . getMainAddress ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { org.springframework.data.cassandra.test.integration.repository.querymethods.derived.CassandraOperations . getCqlOperations ( ) . execute ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; Person org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByAddress ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . getMainAddress ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonProjection> < PersonProjection > java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonProjection> = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findPersonProjectedBy ( ) ; assertThat ( java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonProjection> ) . hasSize ( NUMBER ) . extracting ( STRING ) . contains ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . getFirstname ( ) , org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . getFirstname ( ) , org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . getFirstname ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonDto> < PersonDto > java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonDto> = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findPersonDtoBy ( ) ; assertThat ( java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonDto> ) . hasSize ( NUMBER ) . extracting ( STRING ) . contains ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . getFirstname ( ) , org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . getFirstname ( ) , org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . getFirstname ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeTrue ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Version . isGreaterThanOrEqualTo ( Version . parse ( STRING ) ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.CassandraOperations . getCqlOperations ( ) . execute ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . setNickname ( STRING ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; PersonDto org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonDto = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findDtoByNicknameStartsWith ( STRING , PersonDto .class ) ; assertThat ( heisenberg . firstname ) . isEqualTo ( STRING ) ; assertThat ( heisenberg . lastname ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.cassandra.test.integration.repository.querymethods.derived.CassandraOperations . getCqlOperations ( ) . execute ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; Person org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByNumberOfChildren ( NumberOfChildren . TWO ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { org.springframework.data.cassandra.test.integration.repository.querymethods.derived.CassandraOperations . getCqlOperations ( ) . execute ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . setCreatedDate ( java.time.LocalDate . java.time.LocalDate ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; Person org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByCreatedDate ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . getCreatedDate ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person = new Person ( STRING , STRING ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> < Person > java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByFirstname ( STRING ) ; assertThat ( java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { assumeTrue ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Version . isGreaterThanOrEqualTo ( Version . parse ( STRING ) ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.CassandraOperations . getCqlOperations ( ) . execute ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . setNickname ( STRING ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByNicknameStartsWith ( STRING ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { assumeTrue ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Version . isGreaterThanOrEqualTo ( Version . parse ( STRING ) ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.CassandraOperations . getCqlOperations ( ) . execute ( STRING + STRING ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person . setNickname ( STRING ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.PersonRepository . findByNicknameContains ( STRING ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.derived.Person ) ; }  <METHOD_END>
