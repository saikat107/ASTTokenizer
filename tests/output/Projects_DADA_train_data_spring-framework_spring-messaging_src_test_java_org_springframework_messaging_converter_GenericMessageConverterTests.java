<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; assertEquals ( NUMBER , org.springframework.messaging.converter.GenericMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.Integer > org.springframework.messaging.converter.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; assertNull ( STRING , org.springframework.messaging.converter.GenericMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<java.lang.Integer> , java.util.Locale .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.messaging.converter.ExpectedException . expect ( MessageConversionException .class ) ; org.springframework.messaging.converter.ExpectedException . expectCause ( isA ( ConversionException .class ) ) ; org.springframework.messaging.converter.GenericMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.Integer .class ) ; }  <METHOD_END>
