<METHOD_START> public void ( java.io.IOException java.io.IOException ) { super( java.io.IOException ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Exception java.lang.Exception ) { super( java.lang.String , java.lang.Exception ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { super( java.lang.String , java.lang.Throwable ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { super( java.lang.String ); for ( java.lang.String java.lang.String : java.lang.String[] ) { void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( java.lang.StringBuilder == null ) return super. getMessage ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( NUMBER ) ; java.lang.StringBuilder . java.lang.StringBuilder ( super. getMessage ( ) ) ; if ( java.lang.StringBuilder . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( '\n' ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.StringBuilder ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( java.lang.StringBuilder == null ) { java.lang.StringBuilder = new java.lang.StringBuilder ( NUMBER ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( '\n' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; }  <METHOD_END>
