<METHOD_START> void ( ) { org.springframework.data.gemfire.repository.query.QueryString = null ; org.springframework.data.gemfire.repository.query.GemfireTemplate = null ; }  <METHOD_END>
<METHOD_START> public void ( GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod , GemfireTemplate org.springframework.data.gemfire.repository.query.GemfireTemplate ) { this( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getAnnotatedQuery ( ) , org.springframework.data.gemfire.repository.query.GemfireQueryMethod , org.springframework.data.gemfire.repository.query.GemfireTemplate ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod , GemfireTemplate org.springframework.data.gemfire.repository.query.GemfireTemplate ) { super( org.springframework.data.gemfire.repository.query.GemfireQueryMethod ); Assert . notNull ( org.springframework.data.gemfire.repository.query.GemfireTemplate , STRING ) ; this . boolean |= ! StringUtils . hasText ( java.lang.String ) ; this . org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getAnnotatedQuery ( ) ) ; this . org.springframework.data.gemfire.repository.query.GemfireTemplate = org.springframework.data.gemfire.repository.query.GemfireTemplate ; if ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . isModifyingQuery ( ) || org.springframework.data.gemfire.repository.query.GemfireQueryMethod . isPageQuery ( ) ) { throw new java.lang.IllegalStateException ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery ( ) { this . boolean = true ; return this ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { QueryMethod org.springframework.data.gemfire.repository.query.QueryMethod = getQueryMethod ( ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = ( boolean ( ) ? this . org.springframework.data.gemfire.repository.query.QueryString : this . org.springframework.data.gemfire.repository.query.QueryString . forRegion ( org.springframework.data.gemfire.repository.query.QueryMethod . getEntityInformation ( ) . getJavaType ( ) , org.springframework.data.gemfire.repository.query.GemfireTemplate . getRegion ( ) ) ) ; ParametersParameterAccessor org.springframework.data.gemfire.repository.query.ParametersParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.gemfire.repository.query.QueryMethod . getParameters ( ) , java.lang.Object[] ) ; for ( java.lang.Integer java.lang.Integer : org.springframework.data.gemfire.repository.query.QueryString . getInParameterIndexes ( ) ) { org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.QueryString . bindIn ( java.util.Collection<?> ( org.springframework.data.gemfire.repository.query.ParametersParameterAccessor . getBindableValue ( java.lang.Integer - NUMBER ) ) ) ; } org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.QueryString ( org.springframework.data.gemfire.repository.query.QueryMethod , org.springframework.data.gemfire.repository.query.QueryString ) ; java.util.Collection<?> < ? > java.util.Collection<?> = java.util.Collection<?> ( org.springframework.data.gemfire.repository.query.GemfireTemplate . find ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) , java.lang.Object[] ) ) ; if ( org.springframework.data.gemfire.repository.query.QueryMethod . isCollectionQuery ( ) ) { return java.util.Collection<> ; } else if ( org.springframework.data.gemfire.repository.query.QueryMethod . isQueryForEntity ( ) ) { if ( java.util.Collection<> . boolean ( ) ) { return null ; } else if ( java.util.Collection<> . int ( ) == NUMBER ) { return java.util.Collection<> . java.util.Iterator<> ( ) . next ( ) ; } else { throw new IncorrectResultSizeDataAccessException ( NUMBER , java.util.Collection<> . int ( ) ) ; } } else if ( boolean ( org.springframework.data.gemfire.repository.query.QueryMethod , java.util.Collection<> ) ) { return java.util.Collection<> . java.util.Iterator<> ( ) . next ( ) ; } else { throw new java.lang.IllegalStateException ( STRING + org.springframework.data.gemfire.repository.query.QueryString . toString ( ) ) ; } }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.repository.query.QueryString org.springframework.data.gemfire.repository.query.QueryString ( QueryMethod org.springframework.data.gemfire.repository.query.QueryMethod , QueryString org.springframework.data.gemfire.repository.query.QueryString ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.QueryString ; if ( org.springframework.data.gemfire.repository.query.QueryMethod instanceof GemfireQueryMethod ) { GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod = ( GemfireQueryMethod ) org.springframework.data.gemfire.repository.query.QueryMethod ; java.lang.String java.lang.String = org.springframework.data.gemfire.repository.query.QueryString . toString ( ) . toUpperCase ( ) ; if ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasImport ( ) && ! QueryString . IMPORT_PATTERN . matcher ( java.lang.String ) . find ( ) ) { org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.QueryString . withImport ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getImport ( ) ) ; } if ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasHint ( ) && ! QueryString . HINT_PATTERN . matcher ( java.lang.String ) . find ( ) ) { org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.QueryString . withHints ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getHints ( ) ) ; } if ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasLimit ( ) && ! QueryString . LIMIT_PATTERN . matcher ( java.lang.String ) . find ( ) ) { org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.QueryString . withLimit ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getLimit ( ) ) ; } if ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasTrace ( ) && ! QueryString . TRACE_PATTERN . matcher ( java.lang.String ) . find ( ) ) { org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.QueryString . withTrace ( ) ; } } return org.springframework.data.gemfire.repository.query.QueryString ; }  <METHOD_END>
<METHOD_START> boolean boolean ( QueryMethod org.springframework.data.gemfire.repository.query.QueryMethod , java.util.Collection<?> < ? > java.util.Collection<?> ) { return ( ! org.springframework.data.gemfire.repository.query.QueryMethod . isCollectionQuery ( ) && org.springframework.data.gemfire.repository.query.QueryMethod . getReturnedObjectType ( ) != null && ! java.lang.Void . java.lang.Class<java.lang.Void> . boolean ( org.springframework.data.gemfire.repository.query.QueryMethod . getReturnedObjectType ( ) ) && java.util.Collection<> != null && java.util.Collection<> . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> java.util.Collection<?> < ? > java.util.Collection<?> ( final java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof SelectResults ) { return ( ( SelectResults ) java.lang.Object ) . asList ( ) ; } if ( java.lang.Object instanceof java.util.Collection ) { return ( java.util.Collection<?> < ? > ) java.lang.Object ; } if ( java.lang.Object == null ) { return java.util.Collections . java.util.List<java.lang.Object> ( ) ; } return ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ? CollectionUtils . arrayToList ( java.lang.Object ) : java.util.Collections . java.util.List<java.lang.Object> ( java.lang.Object ) ) ; }  <METHOD_END>
