<METHOD_START> @ Test public void void ( ) { assertEquals ( org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory . org.springframework.integration.file.remote.session.Session<java.lang.String> , this . org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> . getSession ( STRING ) ) ; assertEquals ( org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory . org.springframework.integration.file.remote.session.Session<java.lang.String> , this . org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> . getSession ( STRING ) ) ; assertEquals ( org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory . org.springframework.integration.file.remote.session.Session<java.lang.String> , this . org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> . getSession ( STRING ) ) ; assertEquals ( org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory . org.springframework.integration.file.remote.session.Session<java.lang.String> , this . org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> . getSession ( ) ) ; this . org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> . setThreadKey ( STRING ) ; assertEquals ( org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory . org.springframework.integration.file.remote.session.Session<java.lang.String> , this . org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> . getSession ( STRING ) ) ; this . org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> . clearThreadKey ( ) ; org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory = new org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory ( ) ; this . org.springframework.integration.file.remote.session.DefaultSessionFactoryLocator<java.lang.String> . addSessionFactory ( STRING , org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory ) ; this . org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> . setThreadKey ( STRING ) ; assertEquals ( org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory . org.springframework.integration.file.remote.session.Session<java.lang.String> , this . org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> . getSession ( STRING ) ) ; this . org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> . clearThreadKey ( ) ; assertSame ( org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory , org.springframework.integration.file.remote.session.DefaultSessionFactoryLocator<java.lang.String> . removeSessionFactory ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.file.remote.session.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.file.remote.session.Message<?> = org.springframework.integration.file.remote.session.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.remote.session.Message<> ) ; verify ( org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory . org.springframework.integration.file.remote.session.Session<java.lang.String> ) . list ( STRING ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> , STRING , java.lang.ThreadLocal .class ) . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory ( ) { return new org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory ( ) { return new org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> < java.lang.String > org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> ( ) { SessionFactoryLocator < java.lang.String > org.springframework.integration.file.remote.session.SessionFactoryLocator<java.lang.String> = org.springframework.integration.file.remote.session.SessionFactoryLocator<java.lang.String> ( ) ; return new DelegatingSessionFactory < java.lang.String > ( org.springframework.integration.file.remote.session.SessionFactoryLocator<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.remote.session.SessionFactoryLocator<java.lang.String> < java.lang.String > org.springframework.integration.file.remote.session.SessionFactoryLocator<java.lang.String> ( ) { java.util.Map<java.lang.Object,org.springframework.integration.file.remote.session.SessionFactory<java.lang.String>> < java.lang.Object , SessionFactory < java.lang.String > > java.util.Map<java.lang.Object,org.springframework.integration.file.remote.session.SessionFactory<java.lang.String>> = new java.util.HashMap<java.lang.Object,org.springframework.integration.file.remote.session.SessionFactory<java.lang.String>> < java.lang.Object , SessionFactory < java.lang.String > > ( ) ; java.util.Map<java.lang.Object,org.springframework.integration.file.remote.session.SessionFactory<java.lang.String>> . put ( STRING , org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory ( ) ) ; org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory = org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory ( ) ; java.util.Map<java.lang.Object,org.springframework.integration.file.remote.session.SessionFactory<java.lang.String>> . put ( STRING , org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory ) ; SessionFactoryLocator < java.lang.String > org.springframework.integration.file.remote.session.SessionFactoryLocator<java.lang.String> = new DefaultSessionFactoryLocator < java.lang.String > ( java.util.Map<java.lang.Object,org.springframework.integration.file.remote.session.SessionFactory<java.lang.String>> , org.springframework.integration.file.remote.session.DelegatingSessionFactoryTests.TestSessionFactory ) ; return org.springframework.integration.file.remote.session.SessionFactoryLocator<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING ) @ Bean org.springframework.integration.file.remote.session.MessageHandler org.springframework.integration.file.remote.session.MessageHandler ( ) { AbstractRemoteFileOutboundGateway < java.lang.String > org.springframework.integration.file.remote.session.AbstractRemoteFileOutboundGateway<java.lang.String> = new AbstractRemoteFileOutboundGateway < java.lang.String > ( org.springframework.integration.file.remote.session.DelegatingSessionFactory<java.lang.String> ( ) , STRING , STRING ) { @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { return false ; } @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { return false ; } @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; } @ java.lang.Override protected java.lang.String java.lang.String ( AbstractFileInfo < java.lang.String > org.springframework.integration.file.remote.session.AbstractFileInfo<java.lang.String> ) { return org.springframework.integration.file.remote.session.AbstractFileInfo<java.lang.String> . getFilename ( ) ; } @ java.lang.Override protected long long ( java.lang.String java.lang.String ) { return NUMBER ; } @ java.lang.Override protected java.util.List<org.springframework.integration.file.remote.session.AbstractFileInfo<java.lang.String>> < AbstractFileInfo < java.lang.String > > java.util.List<org.springframework.integration.file.remote.session.AbstractFileInfo<java.lang.String>> ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { return null ; } @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return null ; } } ; org.springframework.integration.file.remote.session.AbstractRemoteFileOutboundGateway<java.lang.String> . setOutputChannelName ( STRING ) ; org.springframework.integration.file.remote.session.AbstractRemoteFileOutboundGateway<java.lang.String> . setOptions ( STRING ) ; return org.springframework.integration.file.remote.session.AbstractRemoteFileOutboundGateway<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( AbstractFileInfo < java.lang.String > org.springframework.integration.file.remote.session.AbstractFileInfo<java.lang.String> ) { return org.springframework.integration.file.remote.session.AbstractFileInfo<java.lang.String> . getFilename ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected long long ( java.lang.String java.lang.String ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.integration.file.remote.session.AbstractFileInfo<java.lang.String>> < AbstractFileInfo < java.lang.String > > java.util.List<org.springframework.integration.file.remote.session.AbstractFileInfo<java.lang.String>> ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.session.Session<java.lang.String> < java.lang.String > org.springframework.integration.file.remote.session.Session<java.lang.String> ( ) { return this . org.springframework.integration.file.remote.session.Session<java.lang.String> ; }  <METHOD_END>
