<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.mail.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mail.config.MailToStringTransformerParserTests> ( ) ) ; MessageChannel org.springframework.integration.mail.config.MessageChannel = new BeanFactoryChannelResolver ( org.springframework.integration.mail.config.ClassPathXmlApplicationContext ) . resolveDestination ( STRING ) ; PollableChannel org.springframework.integration.mail.config.PollableChannel = ( PollableChannel ) new BeanFactoryChannelResolver ( org.springframework.integration.mail.config.ClassPathXmlApplicationContext ) . resolveDestination ( STRING ) ; MimeMessage org.springframework.integration.mail.config.MimeMessage = Mockito . mock ( MimeMessage .class ) ; Mockito . when ( org.springframework.integration.mail.config.MimeMessage . getContent ( ) ) . thenReturn ( STRING ) ; org.springframework.integration.mail.config.MessageChannel . send ( new GenericMessage < javax . javax.mail . javax.mail > ( org.springframework.integration.mail.config.MimeMessage ) ) ; Message < ? > org.springframework.integration.mail.config.Message<?> = org.springframework.integration.mail.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mail.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mail.config.Message<> . getPayload ( ) ) ; Mockito . verify ( org.springframework.integration.mail.config.MimeMessage ) . getContent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.mail.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mail.config.MailToStringTransformerParserTests> ( ) ) ; MessageChannel org.springframework.integration.mail.config.MessageChannel = new BeanFactoryChannelResolver ( org.springframework.integration.mail.config.ClassPathXmlApplicationContext ) . resolveDestination ( STRING ) ; PollableChannel org.springframework.integration.mail.config.PollableChannel = ( PollableChannel ) new BeanFactoryChannelResolver ( org.springframework.integration.mail.config.ClassPathXmlApplicationContext ) . resolveDestination ( STRING ) ; MimeMessage org.springframework.integration.mail.config.MimeMessage = Mockito . mock ( MimeMessage .class ) ; Mockito . when ( org.springframework.integration.mail.config.MimeMessage . getContent ( ) ) . thenReturn ( STRING ) ; org.springframework.integration.mail.config.MessageChannel . send ( new GenericMessage < javax . javax.mail . javax.mail > ( org.springframework.integration.mail.config.MimeMessage ) ) ; Message < ? > org.springframework.integration.mail.config.Message<?> = org.springframework.integration.mail.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.mail.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.mail.config.Message<> . getPayload ( ) ) ; Mockito . verify ( org.springframework.integration.mail.config.MimeMessage ) . getContent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mail.config.MailToStringTransformerParserTests> ( ) ) . close ( ) ; } catch ( BeanDefinitionStoreException org.springframework.integration.mail.config.BeanDefinitionStoreException ) { assertTrue ( org.springframework.integration.mail.config.BeanDefinitionStoreException . getMessage ( ) . contains ( STRING ) ) ; throw org.springframework.integration.mail.config.BeanDefinitionStoreException ; } }  <METHOD_END>
