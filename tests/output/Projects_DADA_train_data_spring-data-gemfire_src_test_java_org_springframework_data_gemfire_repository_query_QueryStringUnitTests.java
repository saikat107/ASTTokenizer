<METHOD_START> protected Sort . Sort.Order Sort.Order ( java.lang.String java.lang.String ) { return Sort.Order ( java.lang.String , Sort . Direction . ASC ) ; }  <METHOD_END>
<METHOD_START> protected Sort . Sort.Order Sort.Order ( java.lang.String java.lang.String , Sort . Sort Sort.Direction ) { return new Sort . Sort ( Sort.Direction , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.query.Sort org.springframework.data.gemfire.repository.query.Sort ( Sort . Sort ... Sort.Order[] ) { return new Sort ( Sort.Order[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new QueryString ( Person .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new QueryString ( Person .class , true ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.repository.query.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.repository.query.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.query.ExpectedException . expectMessage ( is ( equalTo ( STRING ) ) ) ; new QueryString ( ( java.lang.Class<?> < ? > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; assertThat ( new QueryString ( java.lang.String ) . toString ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( STRING ) ; void ( null ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { org.springframework.data.gemfire.repository.query.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.repository.query.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.query.ExpectedException . expectMessage ( is ( equalTo ( STRING ) ) ) ; new QueryString ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( HINT_PATTERN , STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( boolean ( IMPORT_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( IMPORT_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( IMPORT_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( IMPORT_PATTERN , STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( boolean ( IMPORT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( IMPORT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( IMPORT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( IMPORT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( IMPORT_PATTERN , STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( LIMIT_PATTERN , STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( boolean ( TRACE_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( TRACE_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( TRACE_PATTERN , STRING ) ) . isTrue ( ) ; assertThat ( boolean ( TRACE_PATTERN , STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( boolean ( TRACE_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( TRACE_PATTERN , STRING ) ) . isFalse ( ) ; assertThat ( boolean ( TRACE_PATTERN , STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.util.regex.Pattern java.util.regex.Pattern , java.lang.String java.lang.String ) { return java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( Person .class ) ; when ( org.springframework.data.gemfire.repository.query.Region . getFullPath ( ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . forRegion ( Person .class , org.springframework.data.gemfire.repository.query.Region ) . toString ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.repository.query.Region , times ( NUMBER ) ) . getFullPath ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; when ( org.springframework.data.gemfire.repository.query.Region . getFullPath ( ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . forRegion ( Person .class , org.springframework.data.gemfire.repository.query.Region ) . toString ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.repository.query.Region , times ( NUMBER ) ) . getFullPath ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; when ( org.springframework.data.gemfire.repository.query.Region . getFullPath ( ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . forRegion ( RootUser .class , org.springframework.data.gemfire.repository.query.Region ) . toString ( ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.repository.query.Region , times ( NUMBER ) ) . getFullPath ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . bindIn ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . getInParameterIndexes ( ) ) . isEqualTo ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) . orderBy ( null ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) . orderBy ( org.springframework.data.gemfire.repository.query.Sort ( Sort.Order ( STRING , Sort . Direction . DESC ) , Sort.Order ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) . orderBy ( org.springframework.data.gemfire.repository.query.Sort ( Sort.Order ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new QueryString ( STRING ) . withHints ( STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( new QueryString ( STRING ) . withHints ( STRING , STRING , STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . withHints ( ) ) . isSameAs ( org.springframework.data.gemfire.repository.query.QueryString ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . withHints ( ( java.lang.String [] ) null ) ) . isSameAs ( org.springframework.data.gemfire.repository.query.QueryString ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new QueryString ( STRING ) . withImport ( STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . withImport ( null ) ) . isSameAs ( org.springframework.data.gemfire.repository.query.QueryString ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . withImport ( STRING ) ) . isSameAs ( org.springframework.data.gemfire.repository.query.QueryString ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . withImport ( STRING ) ) . isSameAs ( org.springframework.data.gemfire.repository.query.QueryString ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new QueryString ( STRING ) . withLimit ( NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( new QueryString ( STRING ) . withLimit ( NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( new QueryString ( STRING ) . withLimit ( - NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . withLimit ( null ) ) . isSameAs ( org.springframework.data.gemfire.repository.query.QueryString ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new QueryString ( STRING ) . withTrace ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new QueryString ( STRING ) . withHints ( STRING ) . withTrace ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = new QueryString ( STRING ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . withImport ( STRING ) . withHints ( STRING , STRING ) . withLimit ( NUMBER ) . withTrace ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
