<METHOD_START> protected void ( T T , HandshakeInfo org.springframework.web.reactive.socket.adapter.HandshakeInfo , NettyDataBufferFactory org.springframework.web.reactive.socket.adapter.NettyDataBufferFactory ) { super( T , ObjectUtils . getIdentityHexString ( T ) , org.springframework.web.reactive.socket.adapter.HandshakeInfo , org.springframework.web.reactive.socket.adapter.NettyDataBufferFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.adapter.NettyDataBufferFactory org.springframework.web.reactive.socket.adapter.NettyDataBufferFactory ( ) { return ( NettyDataBufferFactory ) super. bufferFactory ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.socket.adapter.WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ( WebSocketFrame org.springframework.web.reactive.socket.adapter.WebSocketFrame ) { DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = org.springframework.web.reactive.socket.adapter.NettyDataBufferFactory ( ) . wrap ( org.springframework.web.reactive.socket.adapter.WebSocketFrame . content ( ) ) ; return new WebSocketMessage ( java.util.Map<java.lang.Class<?>,WebSocketMessage.Type> . get ( org.springframework.web.reactive.socket.adapter.WebSocketFrame . getClass ( ) ) , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.socket.adapter.WebSocketFrame org.springframework.web.reactive.socket.adapter.WebSocketFrame ( WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ) { ByteBuf org.springframework.web.reactive.socket.adapter.ByteBuf = NettyDataBufferFactory . toByteBuf ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getPayload ( ) ) ; if ( WebSocketMessage . Type . TEXT . equals ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) ) ) { return new TextWebSocketFrame ( org.springframework.web.reactive.socket.adapter.ByteBuf ) ; } else if ( WebSocketMessage . Type . BINARY . equals ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) ) ) { return new BinaryWebSocketFrame ( org.springframework.web.reactive.socket.adapter.ByteBuf ) ; } else if ( WebSocketMessage . Type . PING . equals ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) ) ) { return new PingWebSocketFrame ( org.springframework.web.reactive.socket.adapter.ByteBuf ) ; } else if ( WebSocketMessage . Type . PONG . equals ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) ) ) { return new PongWebSocketFrame ( org.springframework.web.reactive.socket.adapter.ByteBuf ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) ) ; } }  <METHOD_END>
