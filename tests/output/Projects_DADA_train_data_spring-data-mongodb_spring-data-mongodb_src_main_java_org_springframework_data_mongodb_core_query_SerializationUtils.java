<METHOD_START> private void ( ) {	}  <METHOD_END>
<METHOD_START> public static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Document org.springframework.data.mongodb.core.query.Document ) { if ( org.springframework.data.mongodb.core.query.Document == null ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; void ( STRING , org.springframework.data.mongodb.core.query.Document , java.util.Map<java.lang.String,java.lang.Object> ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.lang.Object instanceof Document ) { Document org.springframework.data.mongodb.core.query.Document = ( Document ) java.lang.Object ; java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> = org.springframework.data.mongodb.core.query.Document . entrySet ( ) . iterator ( ) ; java.lang.String java.lang.String = java.lang.String . boolean ( ) ? STRING : java.lang.String + STRING ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> . boolean ( ) ) { java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> = java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> . java.util.Map.Entry<java.lang.String,java.lang.Object> ( ) ; if ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) . boolean ( STRING ) ) { if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { ( ( Document ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) . put ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , new Document ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ) ; } } else { void ( java.lang.String + java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) , java.util.Map<java.lang.String,java.lang.Object> ) ; } } } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } try { return JSON . serialize ( java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Object instanceof java.util.Collection ) { return java.lang.String ( ( java.util.Collection<?> < ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Map ) { return java.lang.String ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof Document ) { return java.lang.String ( ( ( Document ) java.lang.Object ) ) ; } else { return java.lang.String . java.lang.String ( STRING , java.lang.Object . java.lang.String ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { return java.lang.String ( java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) , STRING , STRING , new Converter < java.util.Map.Entry<?,?> < ? , ? > , java.lang.Object > ( ) { public java.lang.Object java.lang.Object ( java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> ) { return java.lang.String . java.lang.String ( STRING , java.util.Map.Entry<,> . getKey ( ) , java.lang.String ( java.util.Map.Entry<,> . getValue ( ) ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> ) { return java.lang.String . java.lang.String ( STRING , java.util.Map.Entry<,> . getKey ( ) , java.lang.String ( java.util.Map.Entry<,> . getValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.util.Collection<?> < ? > java.util.Collection<?> ) { return java.lang.String ( java.util.Collection<> , STRING , STRING , new Converter < java.lang.Object , java.lang.Object > ( ) { public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.String ( java.lang.Object ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.String ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private static < T > java.lang.String java.lang.String ( java.lang.Iterable<T> < T > java.lang.Iterable<T> , java.lang.String java.lang.String , java.lang.String java.lang.String , Converter < ? super T , java.lang.Object > org.springframework.data.mongodb.core.query.Converter<? super T,java.lang.Object> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; java.util.Iterator<T> < T > java.util.Iterator<T> = java.lang.Iterable<T> . java.util.Iterator<T> ( ) ; while ( java.util.Iterator<T> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.mongodb.core.query.Converter<,java.lang.Object> . convert ( java.util.Iterator<T> . T ( ) ) ) ; if ( java.util.Iterator<T> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } return java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.String ( ) ; }  <METHOD_END>
