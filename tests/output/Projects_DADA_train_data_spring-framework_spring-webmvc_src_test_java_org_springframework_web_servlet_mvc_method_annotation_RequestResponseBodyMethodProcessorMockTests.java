<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> = mock ( HttpMessageConverter .class ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> = mock ( HttpMessageConverter .class ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . ALL ) ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> , org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> ) ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Integer . java.lang.Class<java.lang.Integer> ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean .class ) , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING , java.util.Optional .class ) , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING ) , - NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING ) , - NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests> ( ) . java.lang.reflect.Method ( STRING ) , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . read ( eq ( java.lang.String .class ) , isA ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.ValidatingBinderFactory ( ) ) ; assertEquals ( STRING , java.lang.String , java.lang.Object ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { void ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean ( null ) ) ; fail ( STRING ) ; } catch ( MethodArgumentNotValidException org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException ) { assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException . getBindingResult ( ) . getObjectName ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException . getBindingResult ( ) . getErrorCount ( ) ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException . getBindingResult ( ) . getFieldError ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean ) throws java.lang.Exception { MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; @ java.lang.SuppressWarnings ( STRING ) HttpMessageConverter < org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean > org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean> = mock ( HttpMessageConverter .class ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean> . canRead ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean> . read ( eq ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean .class ) , isA ( HttpInputMessage .class ) ) ) . willReturn ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor = new RequestResponseBodyMethodProcessor ( java.util.Collections .< HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean> ) ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.ValidatingBinderFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMediaTypeNotSupportedException .class ) public void void ( ) java.lang.Exception { MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( false ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMediaTypeNotSupportedException .class ) public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . APPLICATION_OCTET_STREAM ) ) . willReturn ( false ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMediaTypeNotSupportedException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMessageNotReadableException .class ) public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( MediaType . TEXT_PLAIN_VALUE ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( new byte [ NUMBER ] ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . read ( eq ( java.lang.String .class ) , isA ( HttpInputMessage .class ) ) ) . willReturn ( null ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.ValidatingBinderFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( new byte [ NUMBER ] ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . APPLICATION_OCTET_STREAM ) ) . willReturn ( false ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.ValidatingBinderFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . read ( eq ( java.lang.String .class ) , isA ( HttpInputMessage .class ) ) ) . willReturn ( STRING ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.ValidatingBinderFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( new byte [ NUMBER ] ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.ValidatingBinderFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( new byte [ NUMBER ] ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . APPLICATION_OCTET_STREAM ) ) . willReturn ( false ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.ValidatingBinderFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . read ( eq ( java.lang.String .class ) , isA ( HttpInputMessage .class ) ) ) . willReturn ( STRING ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.ValidatingBinderFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( new byte [ NUMBER ] ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.ValidatingBinderFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( new byte [ NUMBER ] ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canRead ( java.lang.String .class , MediaType . APPLICATION_OCTET_STREAM ) ) . willReturn ( false ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) , org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.ValidatingBinderFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( true ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) . write ( eq ( java.lang.String ) , eq ( org.springframework.web.servlet.mvc.method.annotation.MediaType ) , isA ( HttpOutputMessage .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( HandlerMapping . PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE , java.util.Collections . java.util.Set ( MediaType . TEXT_HTML ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , MediaType . TEXT_HTML ) ) . willReturn ( true ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) . write ( eq ( java.lang.String ) , eq ( MediaType . TEXT_HTML ) , isA ( HttpOutputMessage .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMediaTypeNotAcceptableException .class ) public void void ( ) java.lang.Exception { MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . APPLICATION_ATOM_XML ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Arrays . java.util.List ( MediaType . TEXT_PLAIN ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( false ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( STRING , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMediaTypeNotAcceptableException .class ) public void void ( ) java.lang.Exception { MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType . toString ( ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( false ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( STRING , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.web.servlet.mvc.method.annotation.Resource = new ByteArrayResource ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> . canWrite ( ByteArrayResource .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . ALL ) ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> . canWrite ( ByteArrayResource .class , MediaType . APPLICATION_OCTET_STREAM ) ) . willReturn ( true ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.Resource , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; then ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.Resource> ) . should ( times ( NUMBER ) ) . write ( any ( ByteArrayResource .class ) , eq ( MediaType . APPLICATION_OCTET_STREAM ) , any ( HttpOutputMessage .class ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType = MediaType . APPLICATION_XHTML_XML ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> < MediaType > java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> = java.util.Collections . java.util.List ( MediaType . valueOf ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> . canWrite ( java.lang.String .class , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) . willReturn ( true ) ; org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor . handleReturnValue ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<java.lang.String> ) . write ( eq ( java.lang.String ) , eq ( org.springframework.web.servlet.mvc.method.annotation.MediaType ) , isA ( HttpOutputMessage .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ ResponseBody public java.lang.String java.lang.String ( @ RequestBody java.lang.String java.lang.String , int int ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( @ Valid @ RequestBody org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests.SimpleBean ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( @ RequestBody ( required = false ) java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( @ RequestBody java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ ResponseBody public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ ResponseBody public org.springframework.web.servlet.mvc.method.annotation.Resource org.springframework.web.servlet.mvc.method.annotation.Resource ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ( NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws java.lang.Exception { LocalValidatorFactoryBean org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean = new LocalValidatorFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean . afterPropertiesSet ( ) ; WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder = new WebDataBinder ( java.lang.Object , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . setValidator ( org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean ) ; return org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
