<METHOD_START> @ Before public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; this . org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( this . org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; org.springframework.beans.factory.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; this . org.springframework.beans.factory.DefaultListableBeanFactory = org.springframework.beans.factory.DefaultListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticListableBeanFactory org.springframework.beans.factory.StaticListableBeanFactory = new StaticListableBeanFactory ( ) ; org.springframework.beans.factory.StaticListableBeanFactory . addBean ( STRING , new TestBean ( ) ) ; org.springframework.beans.factory.StaticListableBeanFactory . addBean ( STRING , new TestBean ( ) ) ; assertTrue ( BeanFactoryUtils . countBeansIncludingAncestors ( org.springframework.beans.factory.StaticListableBeanFactory ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.beans.factory.DefaultListableBeanFactory . getBeanDefinitionCount ( ) == NUMBER ) ; assertTrue ( STRING + BeanFactoryUtils . countBeansIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory ) , BeanFactoryUtils . countBeansIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , NoOp .class ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , IndexedTestBean .class ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.DefaultListableBeanFactory . getBeanNamesForType ( IndexedTestBean .class ) . length == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , ITestBean .class ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticListableBeanFactory org.springframework.beans.factory.StaticListableBeanFactory = new StaticListableBeanFactory ( ) ; org.springframework.beans.factory.StaticListableBeanFactory . addBean ( STRING , new java.lang.Object ( ) ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.beans.factory.StaticListableBeanFactory , ITestBean .class , true , false ) ; assertTrue ( java.util.Map<java.lang.String,> . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticListableBeanFactory org.springframework.beans.factory.StaticListableBeanFactory = new StaticListableBeanFactory ( ) ; TestBean org.springframework.beans.factory.TestBean = new TestBean ( ) ; TestBean org.springframework.beans.factory.TestBean = new TestBean ( ) ; DummyFactory org.springframework.beans.factory.DummyFactory = new DummyFactory ( ) ; DummyFactory org.springframework.beans.factory.DummyFactory = new DummyFactory ( ) ; org.springframework.beans.factory.DummyFactory . setSingleton ( false ) ; org.springframework.beans.factory.StaticListableBeanFactory . addBean ( STRING , org.springframework.beans.factory.TestBean ) ; org.springframework.beans.factory.StaticListableBeanFactory . addBean ( STRING , org.springframework.beans.factory.TestBean ) ; org.springframework.beans.factory.StaticListableBeanFactory . addBean ( STRING , org.springframework.beans.factory.DummyFactory ) ; org.springframework.beans.factory.StaticListableBeanFactory . addBean ( STRING , org.springframework.beans.factory.DummyFactory ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.beans.factory.StaticListableBeanFactory , ITestBean .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( org.springframework.beans.factory.TestBean , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.TestBean , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory . getObject ( ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,> . get ( STRING ) instanceof TestBean ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.beans.factory.StaticListableBeanFactory , DummyFactory .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory , java.util.Map<java.lang.String,> . get ( STRING ) ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.beans.factory.StaticListableBeanFactory , FactoryBean .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.TestBean = new TestBean ( ) ; TestBean org.springframework.beans.factory.TestBean = new TestBean ( ) ; DummyFactory org.springframework.beans.factory.DummyFactory = new DummyFactory ( ) ; DummyFactory org.springframework.beans.factory.DummyFactory = new DummyFactory ( ) ; org.springframework.beans.factory.DummyFactory . setSingleton ( false ) ; this . org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.TestBean ) ; this . org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.TestBean ) ; this . org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.DummyFactory ) ; this . org.springframework.beans.factory.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.DummyFactory ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , ITestBean .class , true , false ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.TestBean , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.TestBean , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory . getObject ( ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,> . get ( STRING ) instanceof TestBean ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , ITestBean .class , false , true ) ; java.lang.Object java.lang.Object = this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.TestBean , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.TestBean , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory . getObject ( ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , ITestBean .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,> . get ( STRING ) instanceof TestBean ) ; assertEquals ( org.springframework.beans.factory.TestBean , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.TestBean , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory . getObject ( ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,> . get ( STRING ) instanceof TestBean ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , DummyFactory .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory , java.util.Map<java.lang.String,> . get ( STRING ) ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , FactoryBean .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.DummyFactory , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , ITestBean .class , true , false ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , ITestBean .class , false , false ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , ITestBean .class , false , true ) ; java.lang.Object java.lang.Object = this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , ITestBean .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( java.lang.Object , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,> . get ( STRING ) instanceof TestBean ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , DummyFactory .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; java.util.Map<java.lang.String,?> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.beans.factory.DefaultListableBeanFactory , FactoryBean .class , true , true ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( this . org.springframework.beans.factory.DefaultListableBeanFactory . getBean ( STRING ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = this . org.springframework.beans.factory.DefaultListableBeanFactory . getDependentBeans ( STRING ) ; assertTrue ( ObjectUtils . isEmpty ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = this . org.springframework.beans.factory.DefaultListableBeanFactory . getDependentBeans ( STRING ) ; assertTrue ( java.util.Arrays . boolean ( new java.lang.String [] { STRING } , java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = this . org.springframework.beans.factory.DefaultListableBeanFactory . getDependentBeans ( STRING ) ; assertTrue ( java.util.Arrays . boolean ( new java.lang.String [] { STRING , STRING } , java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = this . org.springframework.beans.factory.DefaultListableBeanFactory . getDependentBeans ( STRING ) ; assertTrue ( java.util.Arrays . boolean ( new java.lang.String [] { STRING } , java.lang.String[] ) ) ; }  <METHOD_END>
