<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.ftp.outbound.FtpServerOutboundTests.Config . java.lang.String = getTargetLocalDirectoryName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; long long = long ( ) ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( java.lang.String + STRING ) ) ; Message < ? > org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ; assertThat ( java.io.File . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , containsString ( java.lang.String . java.lang.String ( ) ) ) ; boolean ( long , java.io.File ) ; java.lang.String = STRING ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( java.lang.String + STRING ) ) ; org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; java.io.File = ( java.io.File ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ; assertThat ( java.io.File . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , containsString ( java.lang.String . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception . java.lang.Throwable ( ) ; assertNotNull ( java.lang.Throwable ) ; java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; assertThat ( java.lang.Throwable , Matchers . instanceOf ( java.lang.IllegalArgumentException .class ) ) ; assertThat ( java.lang.Throwable . java.lang.String ( ) , Matchers . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.String java.lang.String = STRING ; long long = long ( ) ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( java.lang.String + STRING ) ) ; Message < ? > org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = ( java.util.List<java.io.File> < java.io.File > ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ; assertThat ( java.util.List<java.io.File> . int ( ) , Matchers . greaterThan ( NUMBER ) ) ; boolean boolean = false ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { assertThat ( java.io.File . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , containsString ( java.lang.String ) ) ; if ( java.io.File . java.lang.String ( ) . boolean ( STRING ) ) { boolean = boolean ( long , java.io.File ) ; } } assertTrue ( boolean ) ; java.lang.String = STRING ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( java.lang.String + STRING ) ) ; org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; java.util.List<java.io.File> = ( java.util.List<java.io.File> < java.io.File > ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ; assertThat ( java.util.List<java.io.File> . int ( ) , Matchers . greaterThan ( NUMBER ) ) ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { assertThat ( java.io.File . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , containsString ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { Session < FTPFile > org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> = org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> . getSession ( ) ; ( ( FTPClient ) org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> . getClientInstance ( ) ) . changeWorkingDirectory ( STRING ) ; org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> . close ( ) ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; Message < ? > org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = ( java.util.List<java.io.File> < java.io.File > ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ; assertThat ( java.util.List<java.io.File> . int ( ) , Matchers . greaterThan ( NUMBER ) ) ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { assertThat ( java.io.File . java.lang.String ( ) , isOneOf ( STRING , STRING ) ) ; assertThat ( java.io.File . java.lang.String ( ) , not ( containsString ( STRING ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; long long = long ( ) ; java.io.File java.io.File = new java.io.File ( getSourceRemoteDirectory ( ) , STRING ) ; java.io.File . boolean ( java.lang.System . long ( ) - NUMBER ) ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; Message < ? > org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = ( java.util.List<java.io.File> < java.io.File > ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; boolean boolean = false ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { assertThat ( java.io.File . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , containsString ( java.lang.String ) ) ; if ( java.io.File . java.lang.String ( ) . boolean ( STRING ) ) { boolean = boolean ( long , java.io.File ) ; } } assertTrue ( boolean ) ; assertThat ( java.util.List<java.io.File> . java.io.File ( NUMBER ) . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , containsString ( java.lang.String + STRING ) ) ; java.io.File java.io.File = new java.io.File ( getTargetLocalDirectory ( ) + java.io.File . java.lang.String + STRING , STRING ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; FileUtils . copyFile ( java.io.File , java.io.ByteArrayOutputStream ) ; FileUtils . copyFile ( java.io.File , java.io.ByteArrayOutputStream ) ; java.lang.String java.lang.String = new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; assertEquals ( new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) ) , java.lang.String ) ; long long = java.io.File . long ( ) ; FileUtils . copyInputStreamToFile ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) , java.io.File ) ; long long = java.io.File . long ( ) ; java.io.File . boolean ( long ) ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; FileUtils . copyFile ( java.io.File , java.io.ByteArrayOutputStream ) ; assertEquals ( java.lang.String , new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; java.io.File . boolean ( long ) ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; FileUtils . copyFile ( java.io.File , java.io.ByteArrayOutputStream ) ; assertEquals ( STRING , new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; FileUtils . copyInputStreamToFile ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) , java.io.File ) ; }  <METHOD_END>
<METHOD_START> private long long ( ) { java.io.File java.io.File = new java.io.File ( getSourceRemoteDirectory ( ) , STRING ) ; java.io.File . boolean ( java.lang.System . long ( ) - NUMBER ) ; long long = java.io.File . long ( ) ; assertTrue ( long > NUMBER ) ; return long ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( long long , java.io.File java.io.File ) { assertTrue ( STRING + ( long - java.io.File . long ( ) ) , java.lang.Math . long ( java.io.File . long ( ) - long ) < NUMBER ) ; return true ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.String java.lang.String = STRING ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( java.lang.String + STRING ) ) ; Message < ? > org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = ( java.util.List<java.io.File> < java.io.File > ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { assertThat ( java.io.File . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , containsString ( java.lang.String ) ) ; } assertThat ( java.util.List<java.io.File> . java.io.File ( NUMBER ) . java.lang.String ( ) . java.lang.String ( java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) , STRING ) , containsString ( java.lang.String + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Session < ? > org.springframework.integration.ftp.outbound.Session<?> = this . org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> . getSession ( ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; FileCopyUtils . copy ( org.springframework.integration.ftp.outbound.Session<> . readRaw ( STRING ) , java.io.ByteArrayOutputStream ) ; assertTrue ( org.springframework.integration.ftp.outbound.Session<> . finalizeRaw ( ) ) ; assertEquals ( STRING , new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; FileCopyUtils . copy ( org.springframework.integration.ftp.outbound.Session<> . readRaw ( STRING ) , java.io.ByteArrayOutputStream ) ; assertTrue ( org.springframework.integration.ftp.outbound.Session<> . finalizeRaw ( ) ) ; assertEquals ( STRING , new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; org.springframework.integration.ftp.outbound.Session<> . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RemoteFileTemplate < FTPFile > org.springframework.integration.ftp.outbound.RemoteFileTemplate<org.springframework.integration.ftp.outbound.FTPFile> = new RemoteFileTemplate < FTPFile > ( this . org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> ) ; org.springframework.integration.ftp.outbound.RemoteFileTemplate<org.springframework.integration.ftp.outbound.FTPFile> . setFileNameExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; org.springframework.integration.ftp.outbound.RemoteFileTemplate<org.springframework.integration.ftp.outbound.FTPFile> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ftp.outbound.RemoteFileTemplate<org.springframework.integration.ftp.outbound.FTPFile> . afterPropertiesSet ( ) ; final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; assertTrue ( org.springframework.integration.ftp.outbound.RemoteFileTemplate<org.springframework.integration.ftp.outbound.FTPFile> . get ( new GenericMessage < java.lang.String > ( STRING ) , ( InputStreamCallback ) stream -> FileCopyUtils . copy ( stream , baos1 ) ) ) ; assertEquals ( STRING , new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; assertTrue ( org.springframework.integration.ftp.outbound.RemoteFileTemplate<org.springframework.integration.ftp.outbound.FTPFile> . get ( new GenericMessage < java.lang.String > ( STRING ) , ( InputStreamCallback ) stream -> FileCopyUtils . copy ( stream , baos2 ) ) ) ; assertEquals ( STRING , new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.io.File > ( getSourceLocalDirectory ( ) ) ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> = ( Message < java.util.List<java.lang.String> < java.lang.String > > ) this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . size ( ) ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) , not ( equalTo ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ) ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) ) ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.io.File > ( getSourceLocalDirectory ( ) ) ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> = ( Message < java.util.List<java.lang.String> < java.lang.String > > ) this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . size ( ) ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) , not ( equalTo ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ) ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) , equalTo ( STRING ) ) ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) , equalTo ( STRING ) ) ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) , equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.io.File > ( getSourceLocalDirectory ( ) ) ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> = ( Message < java.util.List<java.lang.String> < java.lang.String > > ) this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . size ( ) ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) , not ( equalTo ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) ) ) ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) , equalTo ( STRING ) ) ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<java.util.List<java.lang.String>> . getPayload ( ) . get ( NUMBER ) , anyOf ( equalTo ( STRING ) , equalTo ( STRING ) , equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FtpRemoteFileTemplate org.springframework.integration.ftp.outbound.FtpRemoteFileTemplate = new FtpRemoteFileTemplate ( org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> ) ; assertFalse ( org.springframework.integration.ftp.outbound.FtpRemoteFileTemplate . exists ( STRING ) ) ; Message < java.lang.String > org.springframework.integration.ftp.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , STRING ) . build ( ) ; org.springframework.integration.ftp.outbound.DirectChannel . send ( org.springframework.integration.ftp.outbound.Message<java.lang.String> ) ; org.springframework.integration.ftp.outbound.DirectChannel . send ( org.springframework.integration.ftp.outbound.Message<java.lang.String> ) ; void ( org.springframework.integration.ftp.outbound.FtpRemoteFileTemplate ) ; org.springframework.integration.ftp.outbound.DirectChannel . send ( org.springframework.integration.ftp.outbound.Message<java.lang.String> ) ; void ( org.springframework.integration.ftp.outbound.FtpRemoteFileTemplate ) ; try { org.springframework.integration.ftp.outbound.DirectChannel . send ( org.springframework.integration.ftp.outbound.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.ftp.outbound.MessagingException ) { assertThat ( org.springframework.integration.ftp.outbound.MessagingException . getCause ( ) . getCause ( ) . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( java.lang.String + STRING ) ) ; Message < ? > org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.ftp.outbound.Message<> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; assertEquals ( STRING , org.springframework.integration.ftp.outbound.Message<> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) ) ; Session < ? > org.springframework.integration.ftp.outbound.Session<?> = ( Session < ? > ) org.springframework.integration.ftp.outbound.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . CLOSEABLE_RESOURCE ) ; assertTrue ( org.springframework.integration.ftp.outbound.Session<> . isOpen ( ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.outbound.Session<> , STRING , java.util.concurrent.atomic.AtomicBoolean .class ) . get ( ) ) ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( java.lang.String + STRING ) ) ; org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.ftp.outbound.Message<> . getHeaders ( ) . get ( FileHeaders . REMOTE_DIRECTORY ) ) ; assertEquals ( STRING , org.springframework.integration.ftp.outbound.Message<> . getHeaders ( ) . get ( FileHeaders . REMOTE_FILE ) ) ; assertSame ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.outbound.Session<> , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.ftp.outbound.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . CLOSEABLE_RESOURCE ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Session < FTPFile > org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> = org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ( ) ; doAnswer ( invocation -> { FTPFile [] files = ( FTPFile [] ) invocation . callRealMethod ( ) ; files = Arrays . copyOf ( files , files . length + NUMBER ) ; FTPFile bogusFile = new FTPFile ( ) ; bogusFile . setName ( STRING ) ; files [ files . length - NUMBER ] = bogusFile ; return files ; } ) . when ( org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ) . list ( STRING ) ; java.lang.String java.lang.String = STRING ; try { this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( java.lang.String + STRING ) ) ; fail ( STRING ) ; } catch ( PartialSuccessException org.springframework.integration.ftp.outbound.PartialSuccessException ) { assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.PartialSuccessException . getDerivedInput ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.PartialSuccessException . getPartialResults ( ) . size ( ) ) ; assertThat ( org.springframework.integration.ftp.outbound.PartialSuccessException . getCause ( ) . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Session < FTPFile > org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> = org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ( ) ; doAnswer ( invocation -> { FTPFile [] files = ( FTPFile [] ) invocation . callRealMethod ( ) ; files = Arrays . copyOf ( files , files . length + NUMBER ) ; FTPFile bogusFile = new FTPFile ( ) ; bogusFile . setName ( STRING ) ; bogusFile . setTimestamp ( Calendar . getInstance ( ) ) ; files [ files . length - NUMBER ] = bogusFile ; return files ; } ) . when ( org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ) . list ( STRING ) ; java.lang.String java.lang.String = STRING ; try { this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.Object > ( java.lang.String + STRING ) ) ; fail ( STRING ) ; } catch ( PartialSuccessException org.springframework.integration.ftp.outbound.PartialSuccessException ) { assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.PartialSuccessException . getDerivedInput ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.PartialSuccessException . getPartialResults ( ) . size ( ) ) ; assertThat ( org.springframework.integration.ftp.outbound.PartialSuccessException . getCause ( ) . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Session < FTPFile > org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> = org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ( ) ; doAnswer ( invocation -> { throw new IOException ( STRING ) ; } ) . when ( org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . contains ( STRING ) ) ; try { this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.io.File > ( getSourceLocalDirectory ( ) ) ) ; fail ( STRING ) ; } catch ( PartialSuccessException org.springframework.integration.ftp.outbound.PartialSuccessException ) { assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.PartialSuccessException . getDerivedInput ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.PartialSuccessException . getPartialResults ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.ftp.outbound.PartialSuccessException . getPartialResults ( ) . iterator ( ) . next ( ) ) ; assertThat ( org.springframework.integration.ftp.outbound.PartialSuccessException . getCause ( ) . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Session < FTPFile > org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> = org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ( ) ; java.io.File java.io.File = new java.io.File ( getSourceLocalDirectory ( ) , STRING ) ; assertTrue ( java.io.File . boolean ( ) ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( java.io.File ) ; java.io.FileOutputStream . void ( STRING . byte[] ( ) ) ; java.io.FileOutputStream . void ( ) ; doAnswer ( invocation -> { throw new IOException ( STRING ) ; } ) . when ( org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ) . write ( Mockito . any ( java.io.InputStream .class ) , Mockito . contains ( STRING ) ) ; try { this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.io.File > ( getSourceLocalDirectory ( ) ) ) ; fail ( STRING ) ; } catch ( PartialSuccessException org.springframework.integration.ftp.outbound.PartialSuccessException ) { assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.PartialSuccessException . getDerivedInput ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.PartialSuccessException . getPartialResults ( ) . size ( ) ) ; assertThat ( org.springframework.integration.ftp.outbound.PartialSuccessException . getCause ( ) , Matchers . instanceOf ( PartialSuccessException .class ) ) ; PartialSuccessException org.springframework.integration.ftp.outbound.PartialSuccessException = ( PartialSuccessException ) org.springframework.integration.ftp.outbound.PartialSuccessException . getCause ( ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.PartialSuccessException . getDerivedInput ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.PartialSuccessException . getPartialResults ( ) . size ( ) ) ; assertThat ( org.springframework.integration.ftp.outbound.PartialSuccessException . getCause ( ) . getMessage ( ) , containsString ( STRING ) ) ; } java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> < FTPFile > org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ( ) { Session < FTPFile > org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> = spy ( this . org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> . getSession ( ) ) ; org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> . close ( ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.concurrent.BlockingQueue<org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile>> < Session < FTPFile > > java.util.concurrent.BlockingQueue<org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile>> = TestUtils . getPropertyValue ( org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> , STRING , java.util.concurrent.BlockingQueue .class ) ; assertNotNull ( java.util.concurrent.BlockingQueue<org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile>> . poll ( ) ) ; java.util.concurrent.BlockingQueue<org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile>> . offer ( org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Set<org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile>> < Session < FTPFile > > java.util.Set<org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile>> = TestUtils . getPropertyValue ( org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> , STRING , java.util.Set .class ) ; java.util.Set<org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile>> . clear ( ) ; java.util.Set<org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile>> . add ( org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ) ; return org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> ; }  <METHOD_END>
<METHOD_START> private void void ( FtpRemoteFileTemplate org.springframework.integration.ftp.outbound.FtpRemoteFileTemplate ) { FTPFile [] org.springframework.integration.ftp.outbound.FTPFile[] = org.springframework.integration.ftp.outbound.FtpRemoteFileTemplate . execute ( session -> session . list ( STRING ) ) ; assertEquals ( NUMBER , files . length ) ; assertEquals ( NUMBER , org.springframework.integration.ftp.outbound.FTPFile[] [ NUMBER ] . getSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { Session < FTPFile > org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> = org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> . getSession ( ) ; ( ( FTPClient ) org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> . getClientInstance ( ) ) . changeWorkingDirectory ( STRING ) ; org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> . close ( ) ; this . org.springframework.integration.ftp.outbound.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) , instanceOf ( java.util.List .class ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ( java.util.List<java.lang.String> < java.lang.String > ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertThat ( java.util.List<java.lang.String> , containsInAnyOrder ( STRING , STRING ) ) ; FTPFile [] org.springframework.integration.ftp.outbound.FTPFile[] = org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> . getSession ( ) . list ( null ) ; for ( FTPFile org.springframework.integration.ftp.outbound.FTPFile : org.springframework.integration.ftp.outbound.FTPFile[] ) { if ( ! org.springframework.integration.ftp.outbound.FTPFile . isDirectory ( ) ) { assertTrue ( java.util.List<java.lang.String> . boolean ( org.springframework.integration.ftp.outbound.FTPFile . getName ( ) ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Session < FTPFile > org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> = org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> . getSession ( ) ; ( ( FTPClient ) org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> . getClientInstance ( ) ) . changeWorkingDirectory ( STRING ) ; org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> . close ( ) ; this . org.springframework.integration.ftp.outbound.SourcePollingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) , instanceOf ( java.io.File .class ) ) ; assertEquals ( STRING , ( ( java.io.File ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ) . java.lang.String ( ) ) ; org.springframework.integration.ftp.outbound.Message<?> = this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ftp.outbound.Message<> ) ; assertThat ( org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) , instanceOf ( java.io.File .class ) ) ; assertEquals ( STRING , ( ( java.io.File ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ) . java.lang.String ( ) ) ; assertNull ( this . org.springframework.integration.ftp.outbound.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.ftp.outbound.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( java.io.File [] java.io.File[] ) { java.io.File [] java.io.File[] = java.util.Arrays . java.io.File[] ( java.io.File[] , java.io.File[] . int ) ; java.util.Arrays . void ( java.io.File[] , ( java.io.File , java.io.File ) -> { if ( java.io.File . boolean ( ) && ! java.io.File . boolean ( ) ) { return NUMBER ; } else if ( ! java.io.File . boolean ( ) && java.io.File . boolean ( ) ) { return - NUMBER ; } else { return java.io.File . java.lang.String ( ) . int ( java.io.File . java.lang.String ( ) ) ; } } ) ; return java.util.Arrays . java.util.List<java.io.File> ( java.io.File[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Session < FTPFile > org.springframework.integration.ftp.outbound.Session<org.springframework.integration.ftp.outbound.FTPFile> , Message < ? > org.springframework.integration.ftp.outbound.Message<?> ) throws java.io.IOException { return ( ( java.lang.String ) org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> < FTPFile > org.springframework.integration.ftp.outbound.SessionFactory<org.springframework.integration.ftp.outbound.FTPFile> ( ) { return org.springframework.integration.ftp.outbound.FtpServerOutboundTests . sessionFactory ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
