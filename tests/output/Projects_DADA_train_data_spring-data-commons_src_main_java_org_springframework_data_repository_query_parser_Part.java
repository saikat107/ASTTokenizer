<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { this( java.lang.String , java.lang.Class<> , false ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( boolean && org.springframework.data.repository.query.parser.Part.IgnoreCaseType != org.springframework.data.repository.query.parser.Part.IgnoreCaseType . org.springframework.data.repository.query.parser.Part.IgnoreCaseType ) { this . org.springframework.data.repository.query.parser.Part.IgnoreCaseType = org.springframework.data.repository.query.parser.Part.IgnoreCaseType . org.springframework.data.repository.query.parser.Part.IgnoreCaseType ; } this . org.springframework.data.repository.query.parser.Part.Type = org.springframework.data.repository.query.parser.Part.Type . org.springframework.data.repository.query.parser.Part.Type ( java.lang.String ) ; this . org.springframework.data.repository.query.parser.PropertyPath = PropertyPath . from ( org.springframework.data.repository.query.parser.Part.Type . java.lang.String ( java.lang.String ) , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String ; if ( java.util.regex.Matcher . boolean ( ) ) { org.springframework.data.repository.query.parser.Part.IgnoreCaseType = org.springframework.data.repository.query.parser.Part.IgnoreCaseType . org.springframework.data.repository.query.parser.Part.IgnoreCaseType ; java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.util.regex.Matcher . int ( ) ) + java.lang.String . java.lang.String ( java.util.regex.Matcher . int ( ) , java.lang.String . int ( ) ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return int ( ) > NUMBER ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return org.springframework.data.repository.query.parser.Part.Type . int ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.parser.PropertyPath org.springframework.data.repository.query.parser.PropertyPath ( ) { return org.springframework.data.repository.query.parser.PropertyPath ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.parser.Part . org.springframework.data.repository.query.parser.Part.Type org.springframework.data.repository.query.parser.Part.Type ( ) { return org.springframework.data.repository.query.parser.Part.Type ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.parser.Part.IgnoreCaseType org.springframework.data.repository.query.parser.Part.IgnoreCaseType ( ) { return org.springframework.data.repository.query.parser.Part.IgnoreCaseType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.repository.query.parser.PropertyPath . getSegment ( ) , org.springframework.data.repository.query.parser.Part.Type , org.springframework.data.repository.query.parser.Part.IgnoreCaseType ) ; }  <METHOD_END>
<METHOD_START> private void ( int int , java.lang.String ... java.lang.String[] ) { this . int = int ; this . java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String ... java.lang.String[] ) { this( NUMBER , java.lang.String[] ); }  <METHOD_END>
<METHOD_START> public static org.springframework.data.repository.query.parser.Part . org.springframework.data.repository.query.parser.Part.Type org.springframework.data.repository.query.parser.Part.Type ( java.lang.String java.lang.String ) { for ( org.springframework.data.repository.query.parser.Part . org.springframework.data.repository.query.parser.Part.Type org.springframework.data.repository.query.parser.Part.Type : java.util.List<org.springframework.data.repository.query.parser.Part.Type> ) { if ( org.springframework.data.repository.query.parser.Part.Type . boolean ( java.lang.String ) ) { return org.springframework.data.repository.query.parser.Part.Type ; } } return org.springframework.data.repository.query.parser.Part.Type ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.List<java.lang.String> ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { if ( java.util.List<java.lang.String> == null ) { return true ; } for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = StringUtils . uncapitalize ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - java.lang.String . int ( ) ) ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.String ( ) , int ( ) , java.util.Collection<java.lang.String> ( ) ) ; }  <METHOD_END>
