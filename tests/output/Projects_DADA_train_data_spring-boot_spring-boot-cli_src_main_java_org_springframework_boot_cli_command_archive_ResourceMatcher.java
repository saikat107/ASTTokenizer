<METHOD_START> void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.util.List<java.lang.String> , java.lang.String[] ) ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.util.List<java.lang.String> , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> < org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> ( java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ) throws java.io.IOException { java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> < org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> = new java.util.ArrayList<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> <> ( ) ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { if ( java.io.File . boolean ( ) ) { java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> . boolean ( new org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource ( java.io.File ) ) ; } else { java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> . boolean ( java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> ( java.io.File ) ) ; } } return java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> < org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> ( java.io.File java.io.File ) throws java.io.IOException { java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> < org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> = new java.util.ArrayList<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> <> ( ) ; PathMatchingResourcePatternResolver org.springframework.boot.cli.command.archive.PathMatchingResourcePatternResolver = new PathMatchingResourcePatternResolver ( new org.springframework.boot.cli.command.archive.ResourceMatcher.FolderResourceLoader ( java.io.File ) ) ; for ( java.lang.String java.lang.String : this . java.util.List<java.lang.String> ) { for ( Resource org.springframework.boot.cli.command.archive.Resource : org.springframework.boot.cli.command.archive.PathMatchingResourcePatternResolver . getResources ( java.lang.String ) ) { java.io.File java.io.File = org.springframework.boot.cli.command.archive.Resource . getFile ( ) ; if ( java.io.File . boolean ( ) ) { org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource = new org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource ( java.io.File , java.io.File ) ; if ( ! boolean ( org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource ) ) { java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> . boolean ( org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource ) ; } } } } return java.util.List<org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource ) { for ( java.lang.String java.lang.String : this . java.util.List<java.lang.String> ) { if ( this . org.springframework.boot.cli.command.archive.AntPathMatcher . match ( java.lang.String , org.springframework.boot.cli.command.archive.ResourceMatcher.MatchedResource . java.lang.String ( ) ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.lang.String [] java.lang.String[] ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; boolean boolean = false ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( java.lang.String . boolean ( STRING ) ) { boolean = true ; java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } else if ( java.lang.String . boolean ( STRING ) ) { boolean = true ; java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } else if ( java.lang.String . java.lang.String ( ) . int ( ) > NUMBER ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) || ! boolean ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } return new java.util.ArrayList<java.lang.String> <> ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> void ( java.io.File java.io.File ) throws java.net.MalformedURLException { super( new org.springframework.boot.cli.command.archive.ResourceMatcher.FolderClassLoader ( java.io.File ) ); this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.cli.command.archive.Resource org.springframework.boot.cli.command.archive.Resource ( java.lang.String java.lang.String ) { return new FileSystemResource ( new java.io.File ( this . java.io.File , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.io.File java.io.File ) throws java.net.MalformedURLException { super( new java.net.URL [] { java.io.File . java.net.URI ( ) . java.net.URL ( ) } ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.net.URL> < java.net.URL > java.util.Enumeration<java.net.URL> ( java.lang.String java.lang.String ) throws java.io.IOException { return java.util.Enumeration<java.net.URL> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( java.lang.String java.lang.String ) { return java.net.URL ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( java.io.File java.io.File ) { this . java.lang.String = java.io.File . java.lang.String ( ) ; this . java.io.File = java.io.File ; this . boolean = this . java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void ( java.io.File java.io.File , java.io.File java.io.File ) { this . java.lang.String = StringUtils . cleanPath ( java.io.File . java.lang.String ( ) . java.lang.String ( java.io.File . java.lang.String ( ) . int ( ) + NUMBER ) ) ; this . java.io.File = java.io.File ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> private void ( java.io.File java.io.File , java.lang.String java.lang.String , boolean boolean ) { this . java.io.File = java.io.File ; this . java.lang.String = java.lang.String ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) { return this . java.io.File ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.io.File . java.lang.String ( ) ; }  <METHOD_END>
