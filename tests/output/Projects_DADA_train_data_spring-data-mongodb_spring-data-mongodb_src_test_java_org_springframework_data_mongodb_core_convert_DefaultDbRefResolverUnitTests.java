<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.mongodb.core.convert.MongoDbFactory . getDb ( ) ) . thenReturn ( org.springframework.data.mongodb.core.convert.MongoDatabase ) ; when ( org.springframework.data.mongodb.core.convert.MongoDatabase . getCollection ( anyString ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.convert.MongoCollection<org.springframework.data.mongodb.core.convert.Document> ) ; when ( org.springframework.data.mongodb.core.convert.MongoCollection<org.springframework.data.mongodb.core.convert.Document> . find ( Mockito . any ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.convert.FindIterable<org.springframework.data.mongodb.core.convert.Document> ) ; org.springframework.data.mongodb.core.convert.DefaultDbRefResolver = new DefaultDbRefResolver ( org.springframework.data.mongodb.core.convert.MongoDbFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { DBRef org.springframework.data.mongodb.core.convert.DBRef = new DBRef ( STRING , new ObjectId ( ) ) ; DBRef org.springframework.data.mongodb.core.convert.DBRef = new DBRef ( STRING , new ObjectId ( ) ) ; org.springframework.data.mongodb.core.convert.DefaultDbRefResolver . bulkFetch ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.DBRef ) ) ; ArgumentCaptor < Document > org.springframework.data.mongodb.core.convert.ArgumentCaptor<org.springframework.data.mongodb.core.convert.Document> = ArgumentCaptor . forClass ( Document .class ) ; verify ( org.springframework.data.mongodb.core.convert.MongoCollection<org.springframework.data.mongodb.core.convert.Document> , times ( NUMBER ) ) . find ( org.springframework.data.mongodb.core.convert.ArgumentCaptor<org.springframework.data.mongodb.core.convert.Document> . capture ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.ArgumentCaptor<org.springframework.data.mongodb.core.convert.Document> . getValue ( ) , STRING ) ; java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> = DocumentTestUtils . getTypedValue ( org.springframework.data.mongodb.core.convert.Document , STRING , java.lang.Iterable .class ) ; assertThat ( java.lang.Iterable<java.lang.Object> , iterableWithSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { DBRef org.springframework.data.mongodb.core.convert.DBRef = new DBRef ( STRING , new ObjectId ( ) ) ; DBRef org.springframework.data.mongodb.core.convert.DBRef = new DBRef ( STRING , new ObjectId ( ) ) ; org.springframework.data.mongodb.core.convert.DefaultDbRefResolver . bulkFetch ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.DBRef ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DefaultDbRefResolver . bulkFetch ( java.util.Collections .< DBRef > java.util.List<org.springframework.data.mongodb.core.convert.DBRef> ( ) ) ; verify ( org.springframework.data.mongodb.core.convert.MongoCollection<org.springframework.data.mongodb.core.convert.Document> , never ( ) ) . find ( Mockito . any ( Document .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( STRING , new ObjectId ( ) ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( STRING , new ObjectId ( ) ) ; DBRef org.springframework.data.mongodb.core.convert.DBRef = new DBRef ( STRING , org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ) ; DBRef org.springframework.data.mongodb.core.convert.DBRef = new DBRef ( STRING , org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ) ; when ( org.springframework.data.mongodb.core.convert.FindIterable<org.springframework.data.mongodb.core.convert.Document> . into ( any ( ) ) ) . then ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.data.mongodb.core.convert.InvocationOnMock ) throws java.lang.Throwable { java.util.Collection<org.springframework.data.mongodb.core.convert.Document> < Document > java.util.Collection<org.springframework.data.mongodb.core.convert.Document> = ( java.util.Collection<org.springframework.data.mongodb.core.convert.Document> < Document > ) org.springframework.data.mongodb.core.convert.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.util.Collection<org.springframework.data.mongodb.core.convert.Document> . add ( org.springframework.data.mongodb.core.convert.Document ) ; java.util.Collection<org.springframework.data.mongodb.core.convert.Document> . add ( org.springframework.data.mongodb.core.convert.Document ) ; return java.util.Collection<org.springframework.data.mongodb.core.convert.Document> ; } } ) ; assertThat ( org.springframework.data.mongodb.core.convert.DefaultDbRefResolver . bulkFetch ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.DBRef ) ) , contains ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.data.mongodb.core.convert.InvocationOnMock ) throws java.lang.Throwable { java.util.Collection<org.springframework.data.mongodb.core.convert.Document> < Document > java.util.Collection<org.springframework.data.mongodb.core.convert.Document> = ( java.util.Collection<org.springframework.data.mongodb.core.convert.Document> < Document > ) org.springframework.data.mongodb.core.convert.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.util.Collection<org.springframework.data.mongodb.core.convert.Document> . add ( org.springframework.data.mongodb.core.convert.Document ) ; java.util.Collection<org.springframework.data.mongodb.core.convert.Document> . add ( org.springframework.data.mongodb.core.convert.Document ) ; return java.util.Collection<org.springframework.data.mongodb.core.convert.Document> ; }  <METHOD_END>
