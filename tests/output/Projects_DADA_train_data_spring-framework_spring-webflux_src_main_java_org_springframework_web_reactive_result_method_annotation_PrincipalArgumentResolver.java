<METHOD_START> public void ( ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return checkParameterTypeNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , java.security.Principal .class :: boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { Assert . isAssignable ( java.security.Principal .class , org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterType ( ) ) ; return org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getPrincipal ( ) . cast ( java.lang.Object .class ) ; }  <METHOD_END>
