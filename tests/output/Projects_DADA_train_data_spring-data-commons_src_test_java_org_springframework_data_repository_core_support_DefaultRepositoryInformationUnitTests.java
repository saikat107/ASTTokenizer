<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepository .class . java.lang.reflect.Method ( STRING , java.lang.Integer .class ) ; RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepository .class ) ; DefaultRepositoryInformation org.springframework.data.repository.core.support.DefaultRepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , java.lang.Class<org.springframework.data.repository.core.support.DummyGenericRepositorySupport> , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformation . getTargetClassMethod ( java.lang.reflect.Method ) ; assertThat ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) . isEqualTo ( java.lang.Class<org.springframework.data.repository.core.support.DummyGenericRepositorySupport> ) ; assertThat ( java.lang.reflect.Method . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepository .class . java.lang.reflect.Method ( STRING , java.lang.Long .class ) ; RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepository .class ) ; DefaultRepositoryInformation org.springframework.data.repository.core.support.DefaultRepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.springframework.data.repository.core.support.DefaultRepositoryInformation . getTargetClassMethod ( java.lang.reflect.Method ) ) . isEqualTo ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Class<>> ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom . java.lang.Class<? extends org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom> ( ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom .class . java.lang.reflect.Method ( STRING , org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom . java.lang.Class<? extends org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom> ( ) . java.lang.reflect.Method ( STRING , org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . getTargetClassMethod ( java.lang.reflect.Method ) ) . isEqualTo ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.ConcreteRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . hasCustomMethod ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { DefaultRepositoryMetadata org.springframework.data.repository.core.support.DefaultRepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.CustomRepository .class ) ; DefaultRepositoryInformation org.springframework.data.repository.core.support.DefaultRepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.DefaultRepositoryMetadata , PagingAndSortingRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.CustomRepository .class . java.lang.reflect.Method ( STRING , Pageable .class ) ; assertThat ( org.springframework.data.repository.core.support.DefaultRepositoryInformation . isBaseClassMethod ( java.lang.reflect.Method ) ) . isTrue ( ) ; java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.CustomRepository .class , STRING ) ; assertThat ( org.springframework.data.repository.core.support.DefaultRepositoryInformation . isBaseClassMethod ( java.lang.reflect.Method ) ) . isTrue ( ) ; assertThat ( org.springframework.data.repository.core.support.DefaultRepositoryInformation . getQueryMethods ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.CustomRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , PagingAndSortingRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . getQueryMethods ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.ConcreteRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.BaseRepository .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.BaseRepository .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; java.lang.Iterable<java.lang.reflect.Method> < java.lang.reflect.Method > java.lang.Iterable<java.lang.reflect.Method> = org.springframework.data.repository.core.support.RepositoryInformation . getQueryMethods ( ) ; assertThat ( java.lang.Iterable<java.lang.reflect.Method> ) . doesNotContain ( java.lang.reflect.Method , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.ConcreteRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.BaseRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.ConcreteRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; java.lang.Iterable<java.lang.reflect.Method> < java.lang.reflect.Method > java.lang.Iterable<java.lang.reflect.Method> = org.springframework.data.repository.core.support.RepositoryInformation . getQueryMethods ( ) ; assertThat ( java.lang.Iterable<java.lang.reflect.Method> ) . contains ( java.lang.reflect.Method ) ; assertThat ( java.lang.Iterable<java.lang.reflect.Method> ) . doesNotContain ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.ConcreteRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.ConcreteRepository .class , STRING ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . getQueryMethods ( ) ) . contains ( java.lang.reflect.Method ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . isQueryMethod ( java.lang.reflect.Method ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.ConcreteRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.BaseRepository .class . java.lang.reflect.Method ( STRING , java.io.Serializable .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . getQueryMethods ( ) ) . contains ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.BossRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.BossRepository .class . java.lang.reflect.Method ( STRING , java.lang.Iterable .class ) ; java.lang.reflect.Method java.lang.reflect.Method = CrudRepository .class . java.lang.reflect.Method ( STRING , java.lang.Iterable .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . getTargetClassMethod ( java.lang.reflect.Method ) ) . isEqualTo ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.CustomDefaultRepositoryMethodsRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . getQueryMethods ( ) ) . allMatch ( method -> ! method . isBridge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Class<>> ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom . java.lang.Class<? extends org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom> ( ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom . java.lang.Class<? extends org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom> ( ) . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . getTargetClassMethod ( java.lang.reflect.Method ) ) . isEqualTo ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.GenericsSaveRepositoryImpl org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.GenericsSaveRepositoryImpl = new org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.GenericsSaveRepositoryImpl ( ) ; RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.GenericsSaveRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , RepositoryFactorySupport .class , java.util.Optional . java.util.Optional<java.lang.Class<>> ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.GenericsSaveRepositoryImpl . java.lang.Class<? extends org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.GenericsSaveRepositoryImpl> ( ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.GenericsSaveRepository .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . isCustomMethod ( java.lang.reflect.Method ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Class<>> ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom . java.lang.Class<? extends org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom> ( ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepository .class . java.lang.reflect.Method ( STRING ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . getQueryMethods ( ) ) . doesNotContain ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , CrudRepository .class , java.util.Optional . java.util.Optional<java.lang.Class<>> ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom . java.lang.Class<? extends org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepositoryCustom> ( ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.FooRepository .class . java.lang.reflect.Method ( STRING ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . getQueryMethods ( ) ) . doesNotContain ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.DummyRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.DummyRepositoryImpl .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.DummyRepository .class . java.lang.reflect.Method ( STRING , java.lang.Iterable .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . getTargetClassMethod ( java.lang.reflect.Method ) ) . isEqualTo ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.DummyRepositoryImpl .class . java.lang.reflect.Method ( STRING , java.lang.Iterable .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.SimpleSaveRepositoryImpl org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.SimpleSaveRepositoryImpl = new org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.SimpleSaveRepositoryImpl ( ) ; RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.SimpleSaveRepository .class ) ; RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation = new DefaultRepositoryInformation ( org.springframework.data.repository.core.support.RepositoryMetadata , RepositoryFactorySupport .class , java.util.Optional . java.util.Optional<java.lang.Class<>> ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.SimpleSaveRepositoryImpl . java.lang.Class<? extends org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.SimpleSaveRepositoryImpl> ( ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.SimpleSaveRepository .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryInformation . isCustomMethod ( java.lang.reflect.Method ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return java.util.Arrays . java.util.stream.Stream<java.lang.reflect.Method> ( java.lang.Class<> . java.lang.reflect.Method[] ( ) ) . java.util.stream.Stream<java.lang.reflect.Method> ( java.lang.reflect.Method -> java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ) . java.util.Optional<java.lang.reflect.Method> ( ) . java.lang.reflect.Method ( ( ) new java.lang.IllegalStateException ( STRING . java.lang.String ( java.lang.String ) . java.lang.String ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> java.util.Optional<org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User> < org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User > java.util.Optional<org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User> ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User ( java.lang.Long java.lang.Long );  <METHOD_END>
<METHOD_START> static void void ( ) {}  <METHOD_END>
<METHOD_START> default void void ( ) {}  <METHOD_END>
<METHOD_START> boolean boolean ( T T );  <METHOD_END>
<METHOD_START> org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User );  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User> < org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User > java.util.Iterator<org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User> ( ) { return java.util.Collections .< org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User > java.util.Set<org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User> ( ) . java.util.Iterator<org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User> ( ) ; }  <METHOD_END>
<METHOD_START> S S ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> S S ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> < K extends S > K K ( K K );  <METHOD_END>
<METHOD_START> void void ( S S );  <METHOD_END>
<METHOD_START> @ org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.MyQuery java.util.Optional<S> < S > java.util.Optional<S> ( ID ID );  <METHOD_END>
<METHOD_START> org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> T T ( ID ID );  <METHOD_END>
<METHOD_START> java.lang.Iterable<T> < T > java.lang.Iterable<T> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.core.support.Page<T> < T > org.springframework.data.repository.core.support.Page<T> ( Pageable org.springframework.data.repository.core.support.Pageable );  <METHOD_END>
<METHOD_START> java.util.List<T> < T > java.util.List<T> ( Sort org.springframework.data.repository.core.support.Sort );  <METHOD_END>
<METHOD_START> boolean boolean ( ID ID );  <METHOD_END>
<METHOD_START> long long ( )  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> @ org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.MyQuery java.util.List<org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User> < org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User > java.util.List<org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User> ( )  <METHOD_END>
<METHOD_START> public < T extends org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.Sample > T T ( T T ) { return T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override < S extends org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.User > java.util.List<S> < S > java.util.List<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> );  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.Sample org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.Sample ( org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.Sample org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.Sample ) { return org.springframework.data.repository.core.support.DefaultRepositoryInformationUnitTests.Sample ; }  <METHOD_END>
