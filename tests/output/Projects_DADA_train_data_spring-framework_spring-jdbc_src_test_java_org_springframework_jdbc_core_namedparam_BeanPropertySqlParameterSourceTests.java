<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new BeanPropertySqlParameterSource ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { BeanPropertySqlParameterSource org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource = new BeanPropertySqlParameterSource ( new TestBean ( ) ) ; org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanPropertySqlParameterSource org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource = new BeanPropertySqlParameterSource ( new TestBean ( STRING , NUMBER ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getReadablePropertyNames ( ) ) . contains ( STRING ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getReadablePropertyNames ( ) ) . contains ( STRING ) ) ; assertEquals ( STRING , org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getValue ( STRING ) ) ; assertEquals ( java.sql.Types . int , org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getSqlType ( STRING ) ) ; assertEquals ( java.sql.Types . int , org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getSqlType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanPropertySqlParameterSource org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource = new BeanPropertySqlParameterSource ( new TestBean ( STRING , NUMBER ) ) ; org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . registerSqlType ( STRING , java.sql.Types . int ) ; assertEquals ( STRING , org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getValue ( STRING ) ) ; assertEquals ( java.sql.Types . int , org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getSqlType ( STRING ) ) ; assertEquals ( java.sql.Types . int , org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getSqlType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanPropertySqlParameterSource org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource = new BeanPropertySqlParameterSource ( new TestBean ( ) ) ; assertFalse ( org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . hasValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { BeanPropertySqlParameterSource org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource = new BeanPropertySqlParameterSource ( new org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSourceTests.NoReadableProperties ( ) ) ; org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . getValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanPropertySqlParameterSource org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource = new BeanPropertySqlParameterSource ( new org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSourceTests.NoReadableProperties ( ) ) ; assertFalse ( org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource . hasValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
