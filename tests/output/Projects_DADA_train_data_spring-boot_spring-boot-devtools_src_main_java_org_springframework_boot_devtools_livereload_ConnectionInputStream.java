<METHOD_START> void ( java.io.InputStream java.io.InputStream ) { super( java.io.InputStream ); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) java.io.IOException { byte [] byte[] = new byte [ int ] ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( int ) ; while ( java.lang.StringBuilder . int ( java.lang.String ) == - NUMBER ) { int int = int ( byte[] , NUMBER , int ) ; java.lang.StringBuilder . java.lang.StringBuilder ( new java.lang.String ( byte[] , NUMBER , int ) ) ; } return java.lang.StringBuilder . java.lang.String ( NUMBER , java.lang.StringBuilder . int ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] , int int , int int ) throws java.io.IOException { while ( int > NUMBER ) { int int = int ( byte[] , int , int ) ; int += int ; int -= int ; } }  <METHOD_END>
<METHOD_START> public int int ( ) java.io.IOException { int int = int ( ) ; if ( int == - NUMBER ) { throw new java.io.IOException ( STRING ) ; } return ( int & NUMBER ) ; }  <METHOD_END>
<METHOD_START> public int int ( byte [] byte[] , int int , int int ) throws java.io.IOException { int int = int ( byte[] , int , int ) ; if ( int == - NUMBER ) { throw new java.io.IOException ( STRING ) ; } return int ; }  <METHOD_END>
