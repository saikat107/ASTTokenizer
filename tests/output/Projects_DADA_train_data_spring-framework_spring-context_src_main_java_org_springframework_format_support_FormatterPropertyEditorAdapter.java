<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( Formatter < ? > org.springframework.format.support.Formatter<?> ) { Assert . notNull ( org.springframework.format.support.Formatter<> , STRING ) ; this . org.springframework.format.support.Formatter<java.lang.Object> = ( Formatter < java.lang.Object > ) org.springframework.format.support.Formatter<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return FormattingConversionService . getFieldType ( this . org.springframework.format.support.Formatter<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( StringUtils . hasText ( java.lang.String ) ) { try { void ( this . org.springframework.format.support.Formatter<java.lang.Object> . parse ( java.lang.String , LocaleContextHolder . getLocale ( ) ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw java.lang.IllegalArgumentException ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } else { void ( null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.Object java.lang.Object = java.lang.Object ( ) ; return ( java.lang.Object != null ? this . org.springframework.format.support.Formatter<java.lang.Object> . print ( java.lang.Object , LocaleContextHolder . getLocale ( ) ) : STRING ) ; }  <METHOD_END>
