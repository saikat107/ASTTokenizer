<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.mustache.web.AnnotationConfigWebApplicationContext . refresh ( ) ; MockServletContext org.springframework.boot.autoconfigure.mustache.web.MockServletContext = new MockServletContext ( ) ; this . org.springframework.boot.autoconfigure.mustache.web.AnnotationConfigWebApplicationContext . setServletContext ( org.springframework.boot.autoconfigure.mustache.web.MockServletContext ) ; org.springframework.boot.autoconfigure.mustache.web.MockServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , this . org.springframework.boot.autoconfigure.mustache.web.AnnotationConfigWebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MustacheView org.springframework.boot.autoconfigure.mustache.web.MustacheView = new MustacheView ( Mustache . compiler ( ) . compile ( STRING ) ) ; org.springframework.boot.autoconfigure.mustache.web.MustacheView . setApplicationContext ( this . org.springframework.boot.autoconfigure.mustache.web.AnnotationConfigWebApplicationContext ) ; org.springframework.boot.autoconfigure.mustache.web.MustacheView . render ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , this . org.springframework.boot.autoconfigure.mustache.web.MockHttpServletRequest , this . org.springframework.boot.autoconfigure.mustache.web.MockHttpServletResponse ) ; assertThat ( this . org.springframework.boot.autoconfigure.mustache.web.MockHttpServletResponse . getContentAsString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
