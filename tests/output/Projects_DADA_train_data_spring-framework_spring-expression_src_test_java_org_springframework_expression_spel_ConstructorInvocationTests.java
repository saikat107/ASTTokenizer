<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluateAndCheckError ( STRING , SpelMessage . CONSTRUCTOR_INVOCATION_PROBLEM ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( int int ) throws java.lang.Exception { int ++ ; if ( int == NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( int == NUMBER ) { throw new java.lang.RuntimeException ( STRING ) ; } if ( int == NUMBER ) { throw new org.springframework.expression.spel.ConstructorInvocationTests.TestException ( ) ; } this . int = int ; }  <METHOD_END>
<METHOD_START> public void ( PlaceOfBirth org.springframework.expression.spel.PlaceOfBirth ) {		}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.ConstructorInvocationTests.Tester ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( java.lang.Object , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , new PlaceOfBirth ( STRING ) ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( NUMBER , java.lang.Object ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; try { java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { int int = java.lang.Exception . java.lang.String ( ) . int ( STRING ) ; if ( int == - NUMBER ) { fail ( STRING + java.lang.Exception . java.lang.String ( ) ) ; } } assertEquals ( NUMBER , org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , NUMBER ) ; try { java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof SpelEvaluationException ) { java.lang.Exception . void ( ) ; fail ( STRING ) ; } } assertEquals ( NUMBER , org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; java.util.List<org.springframework.expression.spel.ConstructorResolver> < ConstructorResolver > java.util.List<org.springframework.expression.spel.ConstructorResolver> = org.springframework.expression.spel.StandardEvaluationContext . getConstructorResolvers ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.expression.spel.ConstructorResolver> . size ( ) ) ; ConstructorResolver org.springframework.expression.spel.ConstructorResolver = new org.springframework.expression.spel.ConstructorInvocationTests.DummyConstructorResolver ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addConstructorResolver ( org.springframework.expression.spel.ConstructorResolver ) ; assertEquals ( NUMBER , org.springframework.expression.spel.StandardEvaluationContext . getConstructorResolvers ( ) . size ( ) ) ; java.util.List<org.springframework.expression.spel.ConstructorResolver> < ConstructorResolver > java.util.List<org.springframework.expression.spel.ConstructorResolver> = new java.util.ArrayList<org.springframework.expression.spel.ConstructorResolver> <> ( ) ; java.util.List<org.springframework.expression.spel.ConstructorResolver> . addAll ( org.springframework.expression.spel.StandardEvaluationContext . getConstructorResolvers ( ) ) ; assertTrue ( org.springframework.expression.spel.StandardEvaluationContext . removeConstructorResolver ( org.springframework.expression.spel.ConstructorResolver ) ) ; assertFalse ( org.springframework.expression.spel.StandardEvaluationContext . removeConstructorResolver ( org.springframework.expression.spel.ConstructorResolver ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.StandardEvaluationContext . getConstructorResolvers ( ) . size ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setConstructorResolvers ( java.util.List<org.springframework.expression.spel.ConstructorResolver> ) ; assertEquals ( NUMBER , org.springframework.expression.spel.StandardEvaluationContext . getConstructorResolvers ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ConstructorExecutor org.springframework.expression.spel.ConstructorExecutor ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.String java.lang.String , java.util.List<org.springframework.expression.spel.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.expression.spel.TypeDescriptor> ) throws org.springframework.expression.spel.AccessException { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Double .class ) ; evaluate ( STRING , NUMBER , java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
