<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.boot.autoconfigure.jmx.Environment ) { this . org.springframework.boot.autoconfigure.jmx.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.jmx.Environment , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.autoconfigure.jmx.BeanFactory ) throws org.springframework.boot.autoconfigure.jmx.BeansException { this . org.springframework.boot.autoconfigure.jmx.BeanFactory = org.springframework.boot.autoconfigure.jmx.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary @ ConditionalOnMissingBean ( value = MBeanExporter .class , search = SearchStrategy . CURRENT ) public org.springframework.boot.autoconfigure.jmx.AnnotationMBeanExporter org.springframework.boot.autoconfigure.jmx.AnnotationMBeanExporter ( ObjectNamingStrategy org.springframework.boot.autoconfigure.jmx.ObjectNamingStrategy ) { AnnotationMBeanExporter org.springframework.boot.autoconfigure.jmx.AnnotationMBeanExporter = new AnnotationMBeanExporter ( ) ; org.springframework.boot.autoconfigure.jmx.AnnotationMBeanExporter . setRegistrationPolicy ( RegistrationPolicy . FAIL_ON_EXISTING ) ; org.springframework.boot.autoconfigure.jmx.AnnotationMBeanExporter . setNamingStrategy ( org.springframework.boot.autoconfigure.jmx.ObjectNamingStrategy ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.jmx.RelaxedPropertyResolver . getProperty ( STRING , STRING ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { org.springframework.boot.autoconfigure.jmx.AnnotationMBeanExporter . setServer ( this . org.springframework.boot.autoconfigure.jmx.BeanFactory . getBean ( java.lang.String , javax.management.MBeanServer .class ) ) ; } return org.springframework.boot.autoconfigure.jmx.AnnotationMBeanExporter ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( value = ObjectNamingStrategy .class , search = SearchStrategy . CURRENT ) public org.springframework.boot.autoconfigure.jmx.ParentAwareNamingStrategy org.springframework.boot.autoconfigure.jmx.ParentAwareNamingStrategy ( ) { ParentAwareNamingStrategy org.springframework.boot.autoconfigure.jmx.ParentAwareNamingStrategy = new ParentAwareNamingStrategy ( new AnnotationJmxAttributeSource ( ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.jmx.RelaxedPropertyResolver . getProperty ( STRING ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { org.springframework.boot.autoconfigure.jmx.ParentAwareNamingStrategy . setDefaultDomain ( java.lang.String ) ; } return org.springframework.boot.autoconfigure.jmx.ParentAwareNamingStrategy ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( javax.management.MBeanServer .class ) public javax.management.MBeanServer javax.management.MBeanServer ( ) { SpecificPlatform org.springframework.boot.autoconfigure.jmx.SpecificPlatform = SpecificPlatform . get ( ) ; if ( org.springframework.boot.autoconfigure.jmx.SpecificPlatform != null ) { return org.springframework.boot.autoconfigure.jmx.SpecificPlatform . getMBeanServer ( ) ; } MBeanServerFactoryBean org.springframework.boot.autoconfigure.jmx.MBeanServerFactoryBean = new MBeanServerFactoryBean ( ) ; org.springframework.boot.autoconfigure.jmx.MBeanServerFactoryBean . setLocateExistingServerIfPossible ( true ) ; org.springframework.boot.autoconfigure.jmx.MBeanServerFactoryBean . afterPropertiesSet ( ) ; return org.springframework.boot.autoconfigure.jmx.MBeanServerFactoryBean . getObject ( ) ; }  <METHOD_END>
