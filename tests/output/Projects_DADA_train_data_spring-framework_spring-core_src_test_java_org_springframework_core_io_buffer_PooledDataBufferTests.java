<METHOD_START> @ Parameterized . Parameterized ( name = STRING ) public static java.lang.Object [] [] java.lang.Object[][] ( ) { return new java.lang.Object [] [] { { new NettyDataBufferFactory ( new UnpooledByteBufAllocator ( true ) ) } , { new NettyDataBufferFactory ( new UnpooledByteBufAllocator ( false ) ) } , { new NettyDataBufferFactory ( new PooledByteBufAllocator ( true ) ) } , { new NettyDataBufferFactory ( new PooledByteBufAllocator ( false ) ) } } ; }  <METHOD_END>
<METHOD_START> private org.springframework.core.io.buffer.PooledDataBuffer org.springframework.core.io.buffer.PooledDataBuffer ( int int ) { return ( PooledDataBuffer ) org.springframework.core.io.buffer.DataBufferFactory . allocateBuffer ( int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PooledDataBuffer org.springframework.core.io.buffer.PooledDataBuffer = org.springframework.core.io.buffer.PooledDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.PooledDataBuffer . write ( ( byte ) 'a' ) ; org.springframework.core.io.buffer.PooledDataBuffer . retain ( ) ; boolean boolean = org.springframework.core.io.buffer.PooledDataBuffer . release ( ) ; assertFalse ( boolean ) ; boolean = org.springframework.core.io.buffer.PooledDataBuffer . release ( ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { PooledDataBuffer org.springframework.core.io.buffer.PooledDataBuffer = org.springframework.core.io.buffer.PooledDataBuffer ( NUMBER ) ; org.springframework.core.io.buffer.PooledDataBuffer . write ( ( byte ) 'a' ) ; org.springframework.core.io.buffer.PooledDataBuffer . release ( ) ; org.springframework.core.io.buffer.PooledDataBuffer . release ( ) ; }  <METHOD_END>
