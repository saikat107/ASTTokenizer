<METHOD_START> public void ( CuratorFramework org.springframework.integration.zookeeper.metadata.CuratorFramework ) throws java.lang.Exception { Assert . notNull ( org.springframework.integration.zookeeper.metadata.CuratorFramework , STRING ) ; this . org.springframework.integration.zookeeper.metadata.CuratorFramework = org.springframework.integration.zookeeper.metadata.CuratorFramework ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . isTrue ( java.lang.String . boolean ( STRING ) , STRING ) ; this . java.lang.String = STRING . boolean ( java.lang.String ) || ! java.lang.String . boolean ( STRING ) ? java.lang.String : java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; synchronized ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> ) { try { void ( java.lang.String , java.lang.String ) ; return null ; } catch ( KeeperException . KeeperException KeeperException.NodeExistsException ) { try { byte [] byte[] = this . org.springframework.integration.zookeeper.metadata.CuratorFramework . getData ( ) . forPath ( java.lang.String ( java.lang.String ) ) ; return IntegrationUtils . bytesToString ( byte[] , this . java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new ZookeeperMetadataStoreException ( STRING + java.lang.String + STRING , KeeperException.NodeExistsException ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new ZookeeperMetadataStoreException ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; synchronized ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> ) { Stat org.springframework.integration.zookeeper.metadata.Stat = new Stat ( ) ; try { byte [] byte[] = this . org.springframework.integration.zookeeper.metadata.CuratorFramework . getData ( ) . storingStatIn ( org.springframework.integration.zookeeper.metadata.Stat ) . forPath ( java.lang.String ( java.lang.String ) ) ; if ( java.lang.String . boolean ( IntegrationUtils . bytesToString ( byte[] , this . java.lang.String ) ) ) { void ( java.lang.String , java.lang.String , org.springframework.integration.zookeeper.metadata.Stat . getVersion ( ) ) ; } return true ; } catch ( KeeperException . KeeperException KeeperException.NoNodeException ) { return false ; } catch ( KeeperException . KeeperException KeeperException.BadVersionException ) { return false ; } catch ( java.lang.Exception java.lang.Exception ) { throw new ZookeeperMetadataStoreException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MetadataStoreListener org.springframework.integration.zookeeper.metadata.MetadataStoreListener ) { this . java.util.List<org.springframework.integration.zookeeper.metadata.MetadataStoreListener> . add ( org.springframework.integration.zookeeper.metadata.MetadataStoreListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MetadataStoreListener org.springframework.integration.zookeeper.metadata.MetadataStoreListener ) { this . java.util.List<org.springframework.integration.zookeeper.metadata.MetadataStoreListener> . remove ( org.springframework.integration.zookeeper.metadata.MetadataStoreListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; synchronized ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> ) { try { Stat org.springframework.integration.zookeeper.metadata.Stat = this . org.springframework.integration.zookeeper.metadata.CuratorFramework . checkExists ( ) . forPath ( java.lang.String ( java.lang.String ) ) ; if ( org.springframework.integration.zookeeper.metadata.Stat == null ) { try { void ( java.lang.String , java.lang.String ) ; } catch ( KeeperException . KeeperException KeeperException.NodeExistsException ) { void ( java.lang.String , java.lang.String , - NUMBER ) ; } } else { void ( java.lang.String , java.lang.String , - NUMBER ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new ZookeeperMetadataStoreException ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; synchronized ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> ) { ChildData org.springframework.integration.zookeeper.metadata.ChildData = this . org.springframework.integration.zookeeper.metadata.PathChildrenCache . getCurrentData ( java.lang.String ( java.lang.String ) ) ; if ( org.springframework.integration.zookeeper.metadata.ChildData == null ) { if ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . boolean ( java.lang.String ) ) { return this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String ) . java.lang.String ( ) ; } else { return null ; } } else { if ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . boolean ( java.lang.String ) ) { if ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String ) . int ( ) >= org.springframework.integration.zookeeper.metadata.ChildData . getStat ( ) . getVersion ( ) ) { return this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String ) . java.lang.String ( ) ; } } return IntegrationUtils . bytesToString ( org.springframework.integration.zookeeper.metadata.ChildData . getData ( ) , this . java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; synchronized ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> ) { try { byte [] byte[] = this . org.springframework.integration.zookeeper.metadata.CuratorFramework . getData ( ) . forPath ( java.lang.String ( java.lang.String ) ) ; this . org.springframework.integration.zookeeper.metadata.CuratorFramework . delete ( ) . forPath ( java.lang.String ( java.lang.String ) ) ; this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String , new org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( null , java.lang.Integer . int ) ) ; return IntegrationUtils . bytesToString ( byte[] , this . java.lang.String ) ; } catch ( KeeperException . KeeperException KeeperException.NoNodeException ) { return null ; } catch ( java.lang.Exception java.lang.Exception ) { throw new ZookeeperMetadataStoreException ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , int int ) throws java.lang.Exception { Stat org.springframework.integration.zookeeper.metadata.Stat = this . org.springframework.integration.zookeeper.metadata.CuratorFramework . setData ( ) . withVersion ( int ) . forPath ( java.lang.String ( java.lang.String ) , IntegrationUtils . stringToBytes ( java.lang.String , this . java.lang.String ) ) ; this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String , new org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String , org.springframework.integration.zookeeper.metadata.Stat . getVersion ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { this . org.springframework.integration.zookeeper.metadata.CuratorFramework . create ( ) . forPath ( java.lang.String ( java.lang.String ) , IntegrationUtils . stringToBytes ( java.lang.String , this . java.lang.String ) ) ; this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String , new org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING . boolean ( java.lang.String ) ? this . java.lang.String : this . java.lang.String + STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! this . boolean ) { synchronized ( this . java.lang.Object ) { if ( ! this . boolean ) { try { this . org.springframework.integration.zookeeper.metadata.CuratorFramework . checkExists ( ) . creatingParentContainersIfNeeded ( ) . forPath ( this . java.lang.String ) ; this . org.springframework.integration.zookeeper.metadata.PathChildrenCache = new PathChildrenCache ( this . org.springframework.integration.zookeeper.metadata.CuratorFramework , this . java.lang.String , true ) ; this . org.springframework.integration.zookeeper.metadata.PathChildrenCache . getListenable ( ) . addListener ( new org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.MetadataStoreListenerInvokingPathChildrenCacheListener ( ) ) ; this . org.springframework.integration.zookeeper.metadata.PathChildrenCache . start ( PathChildrenCache . StartMode . BUILD_INITIAL_CACHE ) ; this . boolean = true ; } catch ( java.lang.Exception java.lang.Exception ) { throw new ZookeeperMetadataStoreException ( STRING , java.lang.Exception ) ; } } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { if ( this . org.springframework.integration.zookeeper.metadata.PathChildrenCache != null ) { CloseableUtils . closeQuietly ( this . org.springframework.integration.zookeeper.metadata.PathChildrenCache ) ; } this . org.springframework.integration.zookeeper.metadata.PathChildrenCache = null ; this . boolean = false ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { void ( ) ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( this . java.lang.String + STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> private int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CuratorFramework org.springframework.integration.zookeeper.metadata.CuratorFramework , PathChildrenCacheEvent org.springframework.integration.zookeeper.metadata.PathChildrenCacheEvent ) throws java.lang.Exception { synchronized ( org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> ) { java.lang.String java.lang.String = org.springframework.integration.zookeeper.metadata.PathChildrenCacheEvent . getData ( ) . getPath ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; byte [] byte[] = org.springframework.integration.zookeeper.metadata.PathChildrenCacheEvent . getData ( ) . getData ( ) ; switch ( org.springframework.integration.zookeeper.metadata.PathChildrenCacheEvent . getType ( ) ) { case CHILD_ADDED : if ( org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . boolean ( java.lang.String ) ) { if ( org.springframework.integration.zookeeper.metadata.PathChildrenCacheEvent . getData ( ) . getStat ( ) . getVersion ( ) >= org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String ) . int ( ) ) { org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String ) ; } } for ( MetadataStoreListener org.springframework.integration.zookeeper.metadata.MetadataStoreListener : org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.List<org.springframework.integration.zookeeper.metadata.MetadataStoreListener> ) { org.springframework.integration.zookeeper.metadata.MetadataStoreListener . onAdd ( java.lang.String , IntegrationUtils . bytesToString ( byte[] , org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.lang.String ) ) ; } break; case CHILD_UPDATED : if ( org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . boolean ( java.lang.String ) ) { if ( org.springframework.integration.zookeeper.metadata.PathChildrenCacheEvent . getData ( ) . getStat ( ) . getVersion ( ) >= org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String ) . int ( ) ) { org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String ) ; } } for ( MetadataStoreListener org.springframework.integration.zookeeper.metadata.MetadataStoreListener : org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.List<org.springframework.integration.zookeeper.metadata.MetadataStoreListener> ) { org.springframework.integration.zookeeper.metadata.MetadataStoreListener . onUpdate ( java.lang.String , IntegrationUtils . bytesToString ( byte[] , org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.lang.String ) ) ; } break; case CHILD_REMOVED : org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData> . org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore.LocalChildData ( java.lang.String ) ; for ( MetadataStoreListener org.springframework.integration.zookeeper.metadata.MetadataStoreListener : org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.util.List<org.springframework.integration.zookeeper.metadata.MetadataStoreListener> ) { org.springframework.integration.zookeeper.metadata.MetadataStoreListener . onRemove ( java.lang.String , IntegrationUtils . bytesToString ( byte[] , org.springframework.integration.zookeeper.metadata.ZookeeperMetadataStore .this . java.lang.String ) ) ; } break; default: break; } } }  <METHOD_END>
