<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean = spy ( new LuceneServiceFactoryBean ( ) ) ; doReturn ( org.springframework.data.gemfire.search.lucene.LuceneService ) . when ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean ) . resolveLuceneService ( eq ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . getCache ( ) ) . isNull ( ) ; org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . setCache ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . getCache ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . setCache ( null ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . getCache ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . getObject ( ) ) . isNull ( ) ; org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . setCache ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . getObject ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.LuceneService ) ; verify ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean , times ( NUMBER ) ) . resolveLuceneService ( eq ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . getCache ( ) ) . isNull ( ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.search.lucene.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . getObject ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . getObjectType ( ) ) . isEqualTo ( LuceneService .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . setCache ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . getObject ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.LuceneService ) ; assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . getObjectType ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.LuceneService . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.search.lucene.LuceneServiceFactoryBean . isSingleton ( ) ) . isTrue ( ) ; }  <METHOD_END>
