<METHOD_START> public void ( HttpHandler org.springframework.http.server.reactive.HttpHandler ) { Assert . notNull ( org.springframework.http.server.reactive.HttpHandler , STRING ) ; this . org.springframework.http.server.reactive.HttpHandler = org.springframework.http.server.reactive.HttpHandler ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ) { Assert . notNull ( org.springframework.http.server.reactive.DataBufferFactory , STRING ) ; this . org.springframework.http.server.reactive.DataBufferFactory = org.springframework.http.server.reactive.DataBufferFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ( ) { return this . org.springframework.http.server.reactive.DataBufferFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.http.server.reactive.ServletRequest , ServletResponse org.springframework.http.server.reactive.ServletResponse ) throws java.io.IOException { AsyncContext org.springframework.http.server.reactive.AsyncContext = org.springframework.http.server.reactive.ServletRequest . startAsync ( ) ; ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest = org.springframework.http.server.reactive.ServerHttpRequest ( ( ( HttpServletRequest ) org.springframework.http.server.reactive.ServletRequest ) , org.springframework.http.server.reactive.AsyncContext ) ; ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse = org.springframework.http.server.reactive.ServerHttpResponse ( ( ( HttpServletResponse ) org.springframework.http.server.reactive.ServletResponse ) , org.springframework.http.server.reactive.AsyncContext ) ; org.springframework.http.server.reactive.AsyncContext . addListener ( org.springframework.http.server.reactive.AsyncListener ) ; org.springframework.http.server.reactive.ServletHttpHandlerAdapter.HandlerResultSubscriber org.springframework.http.server.reactive.ServletHttpHandlerAdapter.HandlerResultSubscriber = new org.springframework.http.server.reactive.ServletHttpHandlerAdapter.HandlerResultSubscriber ( org.springframework.http.server.reactive.AsyncContext ) ; this . org.springframework.http.server.reactive.HttpHandler . handle ( org.springframework.http.server.reactive.ServerHttpRequest , org.springframework.http.server.reactive.ServerHttpResponse ) . subscribe ( org.springframework.http.server.reactive.ServletHttpHandlerAdapter.HandlerResultSubscriber ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.server.reactive.ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest ( HttpServletRequest org.springframework.http.server.reactive.HttpServletRequest , AsyncContext org.springframework.http.server.reactive.AsyncContext ) throws java.io.IOException { return new ServletServerHttpRequest ( org.springframework.http.server.reactive.HttpServletRequest , org.springframework.http.server.reactive.AsyncContext , org.springframework.http.server.reactive.DataBufferFactory ( ) , int ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.server.reactive.ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse ( HttpServletResponse org.springframework.http.server.reactive.HttpServletResponse , AsyncContext org.springframework.http.server.reactive.AsyncContext ) throws java.io.IOException { return new ServletServerHttpResponse ( org.springframework.http.server.reactive.HttpServletResponse , org.springframework.http.server.reactive.AsyncContext , org.springframework.http.server.reactive.DataBufferFactory ( ) , int ( ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( AsyncContext org.springframework.http.server.reactive.AsyncContext , java.lang.Runnable java.lang.Runnable ) { try { if ( org.springframework.http.server.reactive.AsyncContext . getRequest ( ) . isAsyncStarted ( ) ) { java.lang.Runnable . void ( ) ; } } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletConfig org.springframework.http.server.reactive.ServletConfig ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.ServletConfig org.springframework.http.server.reactive.ServletConfig ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) throws java.io.IOException { AsyncContext org.springframework.http.server.reactive.AsyncContext = org.springframework.http.server.reactive.AsyncEvent . getAsyncContext ( ) ; void ( org.springframework.http.server.reactive.AsyncContext , org.springframework.http.server.reactive.AsyncContext :: complete ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) throws java.io.IOException { AsyncContext org.springframework.http.server.reactive.AsyncContext = org.springframework.http.server.reactive.AsyncEvent . getAsyncContext ( ) ; void ( org.springframework.http.server.reactive.AsyncContext , org.springframework.http.server.reactive.AsyncContext :: complete ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) throws java.io.IOException { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) throws java.io.IOException { }  <METHOD_END>
<METHOD_START> void ( AsyncContext org.springframework.http.server.reactive.AsyncContext ) { this . org.springframework.http.server.reactive.AsyncContext = org.springframework.http.server.reactive.AsyncContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Subscription org.springframework.http.server.reactive.Subscription ) { org.springframework.http.server.reactive.Subscription . request ( java.lang.Long . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Void java.lang.Void ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { void ( this . org.springframework.http.server.reactive.AsyncContext , ( ) { logger . error ( STRING , ex ) ; HttpServletResponse response = ( HttpServletResponse ) this . asyncContext . getResponse ( ) ; response . setStatus ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) ; this . asyncContext . complete ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( this . org.springframework.http.server.reactive.AsyncContext , ( ) { logger . debug ( STRING ) ; this . asyncContext . complete ( ) ; } ) ; }  <METHOD_END>
