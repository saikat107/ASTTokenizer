<METHOD_START> @ Test public void void ( ) { org.springframework.aop.framework.PrototypeTargetTests.TestBeanImpl . int = NUMBER ; DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.framework.Resource ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.aop.framework.PrototypeTargetTests.TestBean org.springframework.aop.framework.PrototypeTargetTests.TestBean = ( org.springframework.aop.framework.PrototypeTargetTests.TestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.PrototypeTargetTests.TestBean . void ( ) ; } org.springframework.aop.framework.PrototypeTargetTests.TestInterceptor org.springframework.aop.framework.PrototypeTargetTests.TestInterceptor = ( org.springframework.aop.framework.PrototypeTargetTests.TestInterceptor ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.PrototypeTargetTests.TestBeanImpl . int ) ; assertEquals ( NUMBER , org.springframework.aop.framework.PrototypeTargetTests.TestInterceptor . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.framework.PrototypeTargetTests.TestBeanImpl . int = NUMBER ; DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.framework.Resource ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.aop.framework.PrototypeTargetTests.TestBean org.springframework.aop.framework.PrototypeTargetTests.TestBean = ( org.springframework.aop.framework.PrototypeTargetTests.TestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.PrototypeTargetTests.TestBean . void ( ) ; } org.springframework.aop.framework.PrototypeTargetTests.TestInterceptor org.springframework.aop.framework.PrototypeTargetTests.TestInterceptor = ( org.springframework.aop.framework.PrototypeTargetTests.TestInterceptor ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.PrototypeTargetTests.TestBeanImpl . int ) ; assertEquals ( NUMBER , org.springframework.aop.framework.PrototypeTargetTests.TestInterceptor . int ) ; }  <METHOD_END>
<METHOD_START> public void void ( )  <METHOD_END>
<METHOD_START> public void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { int ++ ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; }  <METHOD_END>
