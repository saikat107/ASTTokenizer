<METHOD_START> @ BeforeClass public static void void ( ) { try { javax.net.ssl.SSLContext javax.net.ssl.SSLContext = javax.net.ssl.SSLContext . javax.net.ssl.SSLContext ( STRING ) ; javax.net.ssl.X509TrustManager javax.net.ssl.X509TrustManager = new javax.net.ssl.X509TrustManager ( ) { @ java.lang.Override public void void ( java . security . cert . java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] , java.lang.String java.lang.String ) throws java . security . cert . java.security.cert.CertificateException {				} @ java.lang.Override public void void ( java . security . cert . java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] , java.lang.String java.lang.String ) throws java . security . cert . java.security.cert.CertificateException {				} @ java.lang.Override public java . security . cert . java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] ( ) { return null ; } } ; javax.net.ssl.SSLContext . void ( null , new javax.net.ssl.TrustManager [] { javax.net.ssl.X509TrustManager } , null ) ; javax.net.ssl.SSLContext . void ( javax.net.ssl.SSLContext ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java . security . cert . java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] , java.lang.String java.lang.String ) throws java . security . cert . java.security.cert.CertificateException {				}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java . security . cert . java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] , java.lang.String java.lang.String ) throws java . security . cert . java.security.cert.CertificateException {				}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java . security . cert . java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RestTemplate sample.tomcat.multiconnector.RestTemplate = new RestTemplate ( ) ; final sample.tomcat.multiconnector.SampleTomcatTwoConnectorsApplicationTests.MySimpleClientHttpRequestFactory sample.tomcat.multiconnector.SampleTomcatTwoConnectorsApplicationTests.MySimpleClientHttpRequestFactory = new sample.tomcat.multiconnector.SampleTomcatTwoConnectorsApplicationTests.MySimpleClientHttpRequestFactory ( new javax.net.ssl.HostnameVerifier ( ) { @ java.lang.Override public boolean boolean ( final java.lang.String java.lang.String , final javax.net.ssl.SSLSession javax.net.ssl.SSLSession ) { return true ; } } ) ; sample.tomcat.multiconnector.RestTemplate . setRequestFactory ( sample.tomcat.multiconnector.SampleTomcatTwoConnectorsApplicationTests.MySimpleClientHttpRequestFactory ) ; ResponseEntity < java.lang.String > sample.tomcat.multiconnector.ResponseEntity<java.lang.String> = sample.tomcat.multiconnector.RestTemplate . getForEntity ( STRING + this . sample.tomcat.multiconnector.ApplicationContext . getBean ( STRING ) + STRING , java.lang.String .class ) ; assertThat ( sample.tomcat.multiconnector.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.tomcat.multiconnector.ResponseEntity<java.lang.String> . getBody ( ) ) . isEqualTo ( STRING ) ; ResponseEntity < java.lang.String > sample.tomcat.multiconnector.ResponseEntity<java.lang.String> = sample.tomcat.multiconnector.RestTemplate . getForEntity ( STRING + this . java.lang.String + STRING , java.lang.String .class ) ; assertThat ( sample.tomcat.multiconnector.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.tomcat.multiconnector.ResponseEntity<java.lang.String> . getBody ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final java.lang.String java.lang.String , final javax.net.ssl.SSLSession javax.net.ssl.SSLSession ) { return true ; }  <METHOD_END>
<METHOD_START> public void ( final javax.net.ssl.HostnameVerifier javax.net.ssl.HostnameVerifier ) { this . javax.net.ssl.HostnameVerifier = javax.net.ssl.HostnameVerifier ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final java.net.HttpURLConnection java.net.HttpURLConnection , final java.lang.String java.lang.String ) throws java.io.IOException { if ( java.net.HttpURLConnection instanceof javax.net.ssl.HttpsURLConnection ) { ( ( javax.net.ssl.HttpsURLConnection ) java.net.HttpURLConnection ) . void ( this . javax.net.ssl.HostnameVerifier ) ; } super. prepareConnection ( java.net.HttpURLConnection , java.lang.String ) ; }  <METHOD_END>
