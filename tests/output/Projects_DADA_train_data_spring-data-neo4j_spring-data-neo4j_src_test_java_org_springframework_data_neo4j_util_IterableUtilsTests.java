<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.data.neo4j.util.GraphDatabaseService = new TestGraphDatabaseFactory ( ) . newImpermanentDatabase ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.data.neo4j.util.GraphDatabaseService . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( contains ( java.util.List<java.lang.String> ( STRING , STRING ) , STRING ) ) ; assertFalse ( contains ( java.util.List<java.lang.String> ( STRING , STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Node org.springframework.data.neo4j.util.Node ; java.lang.Long java.lang.Long ; try ( Transaction org.springframework.data.neo4j.util.Transaction = org.springframework.data.neo4j.util.GraphDatabaseService . beginTx ( ) ) { org.springframework.data.neo4j.util.Node = org.springframework.data.neo4j.util.GraphDatabaseService . createNode ( ) ; java.lang.Long = org.springframework.data.neo4j.util.Node . getId ( ) ; org.springframework.data.neo4j.util.Transaction . success ( ) ; } try ( Transaction org.springframework.data.neo4j.util.Transaction = org.springframework.data.neo4j.util.GraphDatabaseService . beginTx ( ) ) { assertTrue ( contains ( org.springframework.data.neo4j.util.GraphDatabaseService . getAllNodes ( ) , org.springframework.data.neo4j.util.Node ) ) ; org.springframework.data.neo4j.util.Transaction . success ( ) ; } try ( Transaction org.springframework.data.neo4j.util.Transaction = org.springframework.data.neo4j.util.GraphDatabaseService . beginTx ( ) ) { org.springframework.data.neo4j.util.GraphDatabaseService . getNodeById ( java.lang.Long ) . delete ( ) ; org.springframework.data.neo4j.util.Transaction . success ( ) ; } try ( Transaction org.springframework.data.neo4j.util.Transaction = org.springframework.data.neo4j.util.GraphDatabaseService . beginTx ( ) ) { assertFalse ( contains ( org.springframework.data.neo4j.util.GraphDatabaseService . getAllNodes ( ) , org.springframework.data.neo4j.util.Node ) ) ; } org.springframework.data.neo4j.util.GraphDatabaseService . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , getSingleOrNull ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , getSingle ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( getSingleOrNull ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NotFoundException .class ) public void void ( ) { getSingle ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { getSingle ( java.util.Collections . java.util.List<java.lang.Object> ( ) , STRING ) ; } catch ( NotFoundException org.springframework.data.neo4j.util.NotFoundException ) { assertEquals ( STRING , org.springframework.data.neo4j.util.NotFoundException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { getSingleOrNull ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { getSingle ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , getFirstOrNull ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , getFirst ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( getFirstOrNull ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NotFoundException .class ) public void void ( ) { getFirst ( java.util.Collections . java.util.List<java.lang.Object> ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { getFirst ( java.util.Collections . java.util.List<java.lang.Object> ( ) , STRING ) ; } catch ( NotFoundException org.springframework.data.neo4j.util.NotFoundException ) { assertEquals ( STRING , org.springframework.data.neo4j.util.NotFoundException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , getFirstOrNull ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , getFirst ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , STRING ) ) ; }  <METHOD_END>
