<METHOD_START> public static java.lang.String java.lang.String ( AlterTableSpecification org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) { return new org.springframework.cassandra.core.cql.generator.AlterTableCqlGenerator ( org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( AlterTableSpecification org.springframework.cassandra.core.cql.generator.AlterTableSpecification ) { super( org.springframework.cassandra.core.cql.generator.AlterTableSpecification ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.StringBuilder java.lang.StringBuilder ( java.lang.StringBuilder java.lang.StringBuilder ) { java.lang.StringBuilder = noNull ( java.lang.StringBuilder ) ; java.lang.StringBuilder ( java.lang.StringBuilder ) ; if ( ! spec ( ) . getChanges ( ) . isEmpty ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( ' ' ) ; java.lang.StringBuilder ( java.lang.StringBuilder ) ; } if ( ! spec ( ) . getOptions ( ) . isEmpty ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( ' ' ) ; java.lang.StringBuilder ( java.lang.StringBuilder ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> protected java.lang.StringBuilder java.lang.StringBuilder ( java.lang.StringBuilder java.lang.StringBuilder ) { return noNull ( java.lang.StringBuilder ) . append ( STRING ) . append ( spec ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.StringBuilder java.lang.StringBuilder ( java.lang.StringBuilder java.lang.StringBuilder ) { java.lang.StringBuilder = noNull ( java.lang.StringBuilder ) ; boolean boolean = true ; for ( ColumnChangeSpecification org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification : spec ( ) . getChanges ( ) ) { if ( boolean ) { boolean = false ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } org.springframework.cassandra.core.cql.generator.ColumnChangeCqlGenerator<?> ( org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification ) . toCql ( java.lang.StringBuilder ) ; } return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.core.cql.generator.ColumnChangeCqlGenerator<?> < ? > org.springframework.cassandra.core.cql.generator.ColumnChangeCqlGenerator<?> ( ColumnChangeSpecification org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification ) { if ( org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification instanceof AddColumnSpecification ) { return new AddColumnCqlGenerator ( ( AddColumnSpecification ) org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification ) ; } if ( org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification instanceof DropColumnSpecification ) { return new DropColumnCqlGenerator ( ( DropColumnSpecification ) org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification ) ; } if ( org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification instanceof AlterColumnSpecification ) { return new AlterColumnCqlGenerator ( ( AlterColumnSpecification ) org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification ) ; } if ( org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification instanceof RenameColumnSpecification ) { return new RenameColumnCqlGenerator ( ( RenameColumnSpecification ) org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification ) ; } throw new java.lang.IllegalArgumentException ( STRING + org.springframework.cassandra.core.cql.generator.ColumnChangeSpecification . getClass ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.StringBuilder java.lang.StringBuilder ( java.lang.StringBuilder java.lang.StringBuilder ) { java.lang.StringBuilder = noNull ( java.lang.StringBuilder ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = spec ( ) . getOptions ( ) ; if ( java.util.Map<java.lang.String,java.lang.Object> == null || java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { return java.lang.StringBuilder ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; boolean boolean = true ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { if ( java.lang.String . boolean ( TableOption . COMPACT_STORAGE . getName ( ) ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( boolean ) { boolean = false ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { continue; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( java.lang.Object instanceof java.util.Map ) { optionValueMap ( ( java.util.Map<org.springframework.cassandra.core.cql.generator.Option,java.lang.Object> < Option , java.lang.Object > ) java.lang.Object , java.lang.StringBuilder ) ; continue; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object . java.lang.String ( ) ) ; } return java.lang.StringBuilder ; }  <METHOD_END>
