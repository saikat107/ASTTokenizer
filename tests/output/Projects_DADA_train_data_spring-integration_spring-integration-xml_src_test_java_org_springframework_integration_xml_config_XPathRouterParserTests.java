<METHOD_START> public org.springframework.integration.xml.config.EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer ( java.lang.String java.lang.String ) { org.springframework.integration.xml.config.ConfigurableApplicationContext = TestXmlApplicationContextHelper . getTestAppContext ( java.lang.String + java.lang.String ) ; org.springframework.integration.xml.config.ConfigurableApplicationContext . getAutowireCapableBeanFactory ( ) . autowireBeanProperties ( this , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , false ) ; EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.xml.config.ConfigurableApplicationContext . getBean ( STRING ) ; org.springframework.integration.xml.config.EventDrivenConsumer . start ( ) ; return org.springframework.integration.xml.config.EventDrivenConsumer ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.integration.xml.config.ConfigurableApplicationContext != null ) { org.springframework.integration.xml.config.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.xml.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.xml.config.XPathRouterParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertEquals ( - NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; SmartLifecycleRoleController org.springframework.integration.xml.config.SmartLifecycleRoleController = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( SmartLifecycleRoleController .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.xml.config.SmartLifecycle> < SmartLifecycle > java.util.List<org.springframework.integration.xml.config.SmartLifecycle> = ( java.util.List<org.springframework.integration.xml.config.SmartLifecycle> < SmartLifecycle > ) TestUtils . getPropertyValue ( org.springframework.integration.xml.config.SmartLifecycleRoleController , STRING , MultiValueMap .class ) . get ( STRING ) ; assertThat ( java.util.List<org.springframework.integration.xml.config.SmartLifecycle> , contains ( ( SmartLifecycle ) org.springframework.integration.xml.config.EventDrivenConsumer ) ) ; org.springframework.integration.xml.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; org.springframework.integration.xml.config.EventDrivenConsumer ( STRING ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.xml.config.QueueChannel . getQueueSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; org.springframework.integration.xml.config.EventDrivenConsumer ( STRING ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.xml.config.QueueChannel . getQueueSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( STRING ) ; java.lang.StringBuffer . java.lang.StringBuffer ( STRING ) ; java.lang.StringBuffer . java.lang.StringBuffer ( STRING ) ; org.springframework.integration.xml.config.EventDrivenConsumer ( java.lang.StringBuffer . java.lang.String ( ) ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.xml.config.QueueChannel . getQueueSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( STRING ) ; java.lang.StringBuffer . java.lang.StringBuffer ( STRING ) ; java.lang.StringBuffer . java.lang.StringBuffer ( STRING ) ; org.springframework.integration.xml.config.EventDrivenConsumer ( java.lang.StringBuffer . java.lang.String ( ) ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.xml.config.QueueChannel . getQueueSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( STRING ) ; EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer = org.springframework.integration.xml.config.EventDrivenConsumer ( java.lang.StringBuffer . java.lang.String ( ) ) ; DirectFieldAccessor org.springframework.integration.xml.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.xml.config.EventDrivenConsumer ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.xml.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , false , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( STRING ) ; EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer = org.springframework.integration.xml.config.EventDrivenConsumer ( java.lang.StringBuffer . java.lang.String ( ) ) ; DirectFieldAccessor org.springframework.integration.xml.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.xml.config.EventDrivenConsumer ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.xml.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , true , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( STRING ) ; EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer = org.springframework.integration.xml.config.EventDrivenConsumer ( java.lang.StringBuffer . java.lang.String ( ) ) ; DirectFieldAccessor org.springframework.integration.xml.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.xml.config.EventDrivenConsumer ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; org.springframework.integration.xml.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , org.springframework.integration.xml.config.QueueChannel , java.lang.Object ) ; org.springframework.integration.xml.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.xml.config.QueueChannel . getQueueSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.xml.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.xml.config.XPathRouterParserTests> ( ) ) ; MessageChannel org.springframework.integration.xml.config.MessageChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; AbstractMappingMessageRouter org.springframework.integration.xml.config.AbstractMappingMessageRouter = ( AbstractMappingMessageRouter ) TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ; org.springframework.integration.xml.config.AbstractMappingMessageRouter . setChannelMapping ( STRING , STRING ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.xml.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.xml.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.xml.config.XPathRouterParserTests> ( ) ) ; MessageChannel org.springframework.integration.xml.config.MessageChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; AbstractMappingMessageRouter org.springframework.integration.xml.config.AbstractMappingMessageRouter = ( AbstractMappingMessageRouter ) TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ; org.springframework.integration.xml.config.AbstractMappingMessageRouter . removeChannelMapping ( STRING ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.xml.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.xml.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.xml.config.XPathRouterParserTests> ( ) ) ; MessageChannel org.springframework.integration.xml.config.MessageChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; EventDrivenConsumer org.springframework.integration.xml.config.EventDrivenConsumer = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; AbstractMappingMessageRouter org.springframework.integration.xml.config.AbstractMappingMessageRouter = ( AbstractMappingMessageRouter ) TestUtils . getPropertyValue ( org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ; org.springframework.integration.xml.config.AbstractMappingMessageRouter . removeChannelMapping ( STRING ) ; org.springframework.integration.xml.config.AbstractMappingMessageRouter . removeChannelMapping ( STRING ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.xml.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.xml.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.xml.config.XPathRouterParserTests> ( ) ) ; MessageChannel org.springframework.integration.xml.config.MessageChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; GenericMessage < org.w3c.dom.Document > org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> = new GenericMessage < org.w3c.dom.Document > ( org.w3c.dom.Document ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<org.w3c.dom.Document> ) ; assertNotNull ( org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.xml.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.xml.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.xml.config.XPathRouterParserTests> ( ) ) ; MessageChannel org.springframework.integration.xml.config.MessageChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; PollableChannel org.springframework.integration.xml.config.PollableChannel = org.springframework.integration.xml.config.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; GenericMessage < java.lang.String > org.springframework.integration.xml.config.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.GenericMessage<java.lang.String> ) ; Message < ? > org.springframework.integration.xml.config.Message<?> = org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.xml.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.config.Message<> . getPayload ( ) ) ; org.springframework.integration.xml.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.w3c.dom.Document org.w3c.dom.Document ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.String ) { java.lang.Object = ( ( java.lang.String ) java.lang.Object ) . java.lang.String ( STRING , STRING ) ; } return super. convertToDocument ( java.lang.Object ) ; }  <METHOD_END>
