<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext != null ) { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.TestEndpoint .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; javax.management.MBeanInfo javax.management.MBeanInfo = org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . getMBeanInfo ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) ) ; assertThat ( javax.management.MBeanInfo ) . isNotNull ( ) ; assertThat ( javax.management.MBeanInfo . javax.management.MBeanOperationInfo[] ( ) . int ) . isEqualTo ( NUMBER ) ; assertThat ( javax.management.MBeanInfo . javax.management.MBeanAttributeInfo[] ( ) . int ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class ) ) ; MutablePropertyValues org.springframework.boot.actuate.endpoint.jmx.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.boot.actuate.endpoint.jmx.MutablePropertyValues . add ( STRING , java.lang.Boolean . java.lang.Boolean ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.TestEndpoint .class , null , org.springframework.boot.actuate.endpoint.jmx.MutablePropertyValues ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . isRegistered ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class ) ) ; MutablePropertyValues org.springframework.boot.actuate.endpoint.jmx.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.boot.actuate.endpoint.jmx.MutablePropertyValues . add ( STRING , java.lang.Boolean . java.lang.Boolean ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.TestEndpoint .class , null , org.springframework.boot.actuate.endpoint.jmx.MutablePropertyValues ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . isRegistered ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.TestEndpoint .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.TestEndpoint2 .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . getMBeanInfo ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . getMBeanInfo ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class , null , new MutablePropertyValues ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.TestEndpoint .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . getMBeanInfo ( javax.management.ObjectName ( STRING , STRING , false , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , true ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class , null , new MutablePropertyValues ( java.util.Map<java.lang.String,java.lang.Object> ) ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.TestEndpoint .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . getMBeanInfo ( javax.management.ObjectName ( STRING , STRING , true , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , true ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Properties ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class , null , new MutablePropertyValues ( java.util.Map<java.lang.String,java.lang.Object> ) ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.TestEndpoint .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . getMBeanInfo ( ObjectNameManager . getInstance ( javax.management.ObjectName ( STRING , STRING , true , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) . toString ( ) + STRING ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.TestEndpoint .class ) ) ; GenericApplicationContext org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . setParent ( org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) ; org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; assertThat ( org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . getMBeanInfo ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) ) ) . isNotNull ( ) ; org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.JsonMapConversionEndpoint .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; java.lang.Object java.lang.Object = org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . invoke ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) , STRING , new java.lang.Object [ NUMBER ] , new java.lang.String [ NUMBER ] ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.Map .class ) ; assertThat ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( STRING ) ) . isInstanceOf ( java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.boot.actuate.endpoint.jmx.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; ObjectMapper org.springframework.boot.actuate.endpoint.jmx.ObjectMapper = new ObjectMapper ( ) ; org.springframework.boot.actuate.endpoint.jmx.ObjectMapper . setDateFormat ( new java.text.SimpleDateFormat ( STRING ) ) ; org.springframework.boot.actuate.endpoint.jmx.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.boot.actuate.endpoint.jmx.ObjectMapper ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class , org.springframework.boot.actuate.endpoint.jmx.ConstructorArgumentValues , null ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.JsonMapConversionEndpoint .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; java.lang.Object java.lang.Object = org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . invoke ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) , STRING , new java.lang.Object [ NUMBER ] , new java.lang.String [ NUMBER ] ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.Map .class ) ; assertThat ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( STRING ) ) . isInstanceOf ( java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests.JsonListConversionEndpoint .class ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; java.lang.Object java.lang.Object = org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . invoke ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) , STRING , new java.lang.Object [ NUMBER ] , new java.lang.String [ NUMBER ] ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.List .class ) ; assertThat ( ( ( java.util.List<?> < ? > ) java.lang.Object ) . get ( NUMBER ) ) . isInstanceOf ( java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = org.springframework.boot.actuate.endpoint.jmx.MBeanExporter ( ) ; java.lang.Object java.lang.Object = org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . invoke ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) , STRING , new java.lang.Object [] { STRING , STRING } , new java.lang.String [] { java.lang.String .class . java.lang.String ( ) , java.lang.String .class . java.lang.String ( ) } ) ; assertThat ( java.lang.Object ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter = org.springframework.boot.actuate.endpoint.jmx.MBeanExporter ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.ExpectedException . expect ( javax.management.MBeanException .class ) ; this . org.springframework.boot.actuate.endpoint.jmx.ExpectedException . expectCause ( hasMessage ( containsString ( STRING ) ) ) ; this . org.springframework.boot.actuate.endpoint.jmx.ExpectedException . expectCause ( hasMessage ( containsString ( STRING ) ) ) ; org.springframework.boot.actuate.endpoint.jmx.MBeanExporter . getServer ( ) . invoke ( javax.management.ObjectName ( STRING , this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) , STRING , new java.lang.Object [] { STRING , STRING } , new java.lang.String [] { java.lang.String .class . java.lang.String ( ) , java.lang.String .class . java.lang.String ( ) } ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.jmx.MBeanExporter org.springframework.boot.actuate.endpoint.jmx.MBeanExporter ( ) { this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( EndpointMBeanExporter .class ) ) ; RootBeanDefinition org.springframework.boot.actuate.endpoint.jmx.RootBeanDefinition = new RootBeanDefinition ( LoggersEndpoint .class ) ; ConstructorArgumentValues org.springframework.boot.actuate.endpoint.jmx.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.boot.actuate.endpoint.jmx.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , new LogbackLoggingSystem ( java.lang.Class<? extends org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporterTests> ( ) . java.lang.ClassLoader ( ) ) ) ; org.springframework.boot.actuate.endpoint.jmx.RootBeanDefinition . setConstructorArgumentValues ( org.springframework.boot.actuate.endpoint.jmx.ConstructorArgumentValues ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.actuate.endpoint.jmx.RootBeanDefinition ) ; this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . refresh ( ) ; return this . org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext . getBean ( EndpointMBeanExporter .class ) ; }  <METHOD_END>
<METHOD_START> private javax.management.ObjectName javax.management.ObjectName ( java.lang.String java.lang.String , GenericApplicationContext org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext )			throws javax.management.MalformedObjectNameException { return javax.management.ObjectName ( STRING , java.lang.String , false , org.springframework.boot.actuate.endpoint.jmx.GenericApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private javax.management.ObjectName javax.management.ObjectName ( java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean , ApplicationContext org.springframework.boot.actuate.endpoint.jmx.ApplicationContext )					throws javax.management.MalformedObjectNameException { if ( boolean ) { return ObjectNameManager . getInstance ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String , ObjectUtils . getIdentityHexString ( org.springframework.boot.actuate.endpoint.jmx.ApplicationContext . getBean ( java.lang.String ) ) ) ) ; } return ObjectNameManager . getInstance ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.Date ( ) ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( ) { return java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( new java.util.Date ( ) ) ; }  <METHOD_END>
