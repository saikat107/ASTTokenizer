<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; char char = ';' ; java.lang.String java.lang.String = java.lang.String + char + java.lang.String + char + java.lang.String + char ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; splitSqlScript ( java.lang.String , char , java.util.List<java.lang.String> ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; char char = '\n' ; java.lang.String java.lang.String = java.lang.String + char + java.lang.String + char + java.lang.String + char ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; splitSqlScript ( java.lang.String , char , java.util.List<java.lang.String> ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; char char = '\n' ; java.lang.String java.lang.String = java.lang.String + char + java.lang.String + char ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; splitSqlScript ( java.lang.String , DEFAULT_STATEMENT_SEPARATOR , java.util.List<java.lang.String> ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( '\n' , ' ' ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; char char = ';' ; java.lang.String java.lang.String = java.lang.String + char + java.lang.String + char ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; splitSqlScript ( java.lang.String , ';' , java.util.List<java.lang.String> ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; splitSqlScript ( java.lang.String , STRING , java.util.List<java.lang.String> ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; splitSqlScript ( java.lang.String , ';' , java.util.List<java.lang.String> ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; splitSqlScript ( java.lang.String , ';' , java.util.List<java.lang.String> ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; splitSqlScript ( java.lang.String , ';' , java.util.List<java.lang.String> ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( containsSqlScriptDelimiters ( STRING , STRING ) ) ; assertTrue ( containsSqlScriptDelimiters ( STRING , STRING ) ) ; assertFalse ( containsSqlScriptDelimiters ( STRING , STRING ) ) ; assertTrue ( containsSqlScriptDelimiters ( STRING , STRING ) ) ; assertFalse ( containsSqlScriptDelimiters ( STRING , STRING ) ) ; assertTrue ( containsSqlScriptDelimiters ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.Exception { EncodedResource org.springframework.jdbc.datasource.init.EncodedResource = new EncodedResource ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.jdbc.datasource.init.ScriptUtilsUnitTests> ( ) ) ) ; return ScriptUtils . readScript ( org.springframework.jdbc.datasource.init.EncodedResource ) ; }  <METHOD_END>
