<METHOD_START> public void ( SimpMessageSendingOperations org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations , boolean boolean ) { Assert . notNull ( org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations , STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations = org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHeaderInitializer org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ) { this . org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer = org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ( ) { return this . org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.messaging.simp.annotation.support.MethodParameter ) { return ( org.springframework.messaging.simp.annotation.support.MethodParameter . hasMethodAnnotation ( SendTo .class ) || AnnotatedElementUtils . hasAnnotation ( org.springframework.messaging.simp.annotation.support.MethodParameter . getDeclaringClass ( ) , SendTo .class ) || org.springframework.messaging.simp.annotation.support.MethodParameter . hasMethodAnnotation ( SendToUser .class ) || AnnotatedElementUtils . hasAnnotation ( org.springframework.messaging.simp.annotation.support.MethodParameter . getDeclaringClass ( ) , SendToUser .class ) || ! this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.messaging.simp.annotation.support.MethodParameter , Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> ) throws java.lang.Exception { if ( java.lang.Object == null ) { return; } MessageHeaders org.springframework.messaging.simp.annotation.support.MessageHeaders = org.springframework.messaging.simp.annotation.support.Message<> . getHeaders ( ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getSessionId ( org.springframework.messaging.simp.annotation.support.MessageHeaders ) ; PlaceholderResolver org.springframework.messaging.simp.annotation.support.PlaceholderResolver = org.springframework.messaging.simp.annotation.support.PlaceholderResolver ( org.springframework.messaging.simp.annotation.support.MessageHeaders ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.messaging.simp.annotation.support.MethodParameter ) ; if ( java.lang.Object != null && java.lang.Object instanceof SendToUser ) { SendToUser org.springframework.messaging.simp.annotation.support.SendToUser = ( SendToUser ) java.lang.Object ; boolean boolean = org.springframework.messaging.simp.annotation.support.SendToUser . broadcast ( ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.messaging.simp.annotation.support.Message<> , org.springframework.messaging.simp.annotation.support.MessageHeaders ) ; if ( java.lang.String == null ) { if ( java.lang.String == null ) { throw new MissingSessionUserException ( org.springframework.messaging.simp.annotation.support.Message<> ) ; } java.lang.String = java.lang.String ; boolean = false ; } java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.messaging.simp.annotation.support.SendToUser , org.springframework.messaging.simp.annotation.support.Message<> , this . java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String = this . org.springframework.messaging.simp.annotation.support.PropertyPlaceholderHelper . replacePlaceholders ( java.lang.String , org.springframework.messaging.simp.annotation.support.PlaceholderResolver ) ; if ( boolean ) { this . org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations . convertAndSendToUser ( java.lang.String , java.lang.String , java.lang.Object , org.springframework.messaging.simp.annotation.support.MessageHeaders ( null , org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; } else { this . org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations . convertAndSendToUser ( java.lang.String , java.lang.String , java.lang.Object , org.springframework.messaging.simp.annotation.support.MessageHeaders ( java.lang.String , org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; } } } else { SendTo org.springframework.messaging.simp.annotation.support.SendTo = ( SendTo ) java.lang.Object ; java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.messaging.simp.annotation.support.SendTo , org.springframework.messaging.simp.annotation.support.Message<> , this . java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String = this . org.springframework.messaging.simp.annotation.support.PropertyPlaceholderHelper . replacePlaceholders ( java.lang.String , org.springframework.messaging.simp.annotation.support.PlaceholderResolver ) ; this . org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations . convertAndSend ( java.lang.String , java.lang.Object , org.springframework.messaging.simp.annotation.support.MessageHeaders ( java.lang.String , org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MethodParameter org.springframework.messaging.simp.annotation.support.MethodParameter ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = new java.lang.annotation.Annotation [ NUMBER ] ; java.lang.annotation.Annotation[] [ NUMBER ] = AnnotatedElementUtils . findMergedAnnotation ( org.springframework.messaging.simp.annotation.support.MethodParameter . getMethod ( ) , SendToUser .class ) ; java.lang.annotation.Annotation[] [ NUMBER ] = AnnotatedElementUtils . findMergedAnnotation ( org.springframework.messaging.simp.annotation.support.MethodParameter . getMethod ( ) , SendTo .class ) ; java.lang.annotation.Annotation[] [ NUMBER ] = AnnotatedElementUtils . findMergedAnnotation ( org.springframework.messaging.simp.annotation.support.MethodParameter . getDeclaringClass ( ) , SendToUser .class ) ; java.lang.annotation.Annotation[] [ NUMBER ] = AnnotatedElementUtils . findMergedAnnotation ( org.springframework.messaging.simp.annotation.support.MethodParameter . getDeclaringClass ( ) , SendTo .class ) ; if ( java.lang.annotation.Annotation[] [ NUMBER ] != null && ! ObjectUtils . isEmpty ( ( ( SendToUser ) java.lang.annotation.Annotation[] [ NUMBER ] ) . value ( ) ) ) { return java.lang.annotation.Annotation[] [ NUMBER ] ; } if ( java.lang.annotation.Annotation[] [ NUMBER ] != null && ! ObjectUtils . isEmpty ( ( ( SendTo ) java.lang.annotation.Annotation[] [ NUMBER ] ) . value ( ) ) ) { return java.lang.annotation.Annotation[] [ NUMBER ] ; } if ( java.lang.annotation.Annotation[] [ NUMBER ] != null && ! ObjectUtils . isEmpty ( ( ( SendToUser ) java.lang.annotation.Annotation[] [ NUMBER ] ) . value ( ) ) ) { return java.lang.annotation.Annotation[] [ NUMBER ] ; } if ( java.lang.annotation.Annotation[] [ NUMBER ] != null && ! ObjectUtils . isEmpty ( ( ( SendTo ) java.lang.annotation.Annotation[] [ NUMBER ] ) . value ( ) ) ) { return java.lang.annotation.Annotation[] [ NUMBER ] ; } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { if ( java.lang.annotation.Annotation[] [ int ] != null ) { return java.lang.annotation.Annotation[] [ int ] ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.messaging.simp.annotation.support.PlaceholderResolver org.springframework.messaging.simp.annotation.support.PlaceholderResolver ( MessageHeaders org.springframework.messaging.simp.annotation.support.MessageHeaders ) { java.lang.String java.lang.String = DestinationVariableMethodArgumentResolver . DESTINATION_TEMPLATE_VARIABLES_HEADER ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.messaging.simp.annotation.support.MessageHeaders . get ( java.lang.String ) ; return new org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.DestinationVariablePlaceholderResolver ( java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> , MessageHeaders org.springframework.messaging.simp.annotation.support.MessageHeaders ) { java.security.Principal java.security.Principal = SimpMessageHeaderAccessor . getUser ( org.springframework.messaging.simp.annotation.support.MessageHeaders ) ; if ( java.security.Principal != null ) { return ( java.security.Principal instanceof DestinationUserNameProvider ? ( ( DestinationUserNameProvider ) java.security.Principal ) . getDestinationUserName ( ) : java.security.Principal . java.lang.String ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( java.lang.annotation.Annotation java.lang.annotation.Annotation , Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> , java.lang.String java.lang.String ) { if ( java.lang.annotation.Annotation != null ) { java.lang.String [] java.lang.String[] = ( java.lang.String [] ) AnnotationUtils . getValue ( java.lang.annotation.Annotation ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { return java.lang.String[] ; } } java.lang.String java.lang.String = DestinationPatternsMessageCondition . LOOKUP_DESTINATION_HEADER ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.messaging.simp.annotation.support.Message<> . getHeaders ( ) . get ( java.lang.String ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.messaging.simp.annotation.support.Message<> ) ; } return ( java.lang.String . boolean ( STRING ) ? new java.lang.String [] { java.lang.String + java.lang.String } : new java.lang.String [] { java.lang.String + '/' + java.lang.String } ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.annotation.support.MessageHeaders org.springframework.messaging.simp.annotation.support.MessageHeaders ( java.lang.String java.lang.String , MethodParameter org.springframework.messaging.simp.annotation.support.MethodParameter ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . MESSAGE ) ; if ( org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ( ) != null ) { org.springframework.messaging.simp.annotation.support.MessageHeaderInitializer ( ) . initHeaders ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ) ; } if ( java.lang.String != null ) { org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; } org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setHeader ( SimpMessagingTemplate . CONVERSION_HINT_HEADER , org.springframework.messaging.simp.annotation.support.MethodParameter ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setLeaveMutable ( true ) ; return org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getMessageHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + boolean + STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return ( this . java.util.Map<java.lang.String,java.lang.String> != null ? this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) : null ) ; }  <METHOD_END>
