<METHOD_START> public void ( ServletContext org.springframework.web.context.support.ServletContext ) { super( new ServletContextResourceLoader ( org.springframework.web.context.support.ServletContext ) ); }  <METHOD_END>
<METHOD_START> public void ( ResourceLoader org.springframework.web.context.support.ResourceLoader ) { super( org.springframework.web.context.support.ResourceLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<org.springframework.web.context.support.Resource> < Resource > java.util.Set<org.springframework.web.context.support.Resource> ( Resource org.springframework.web.context.support.Resource , java.lang.String java.lang.String )			throws java.io.IOException { if ( org.springframework.web.context.support.Resource instanceof ServletContextResource ) { ServletContextResource org.springframework.web.context.support.ServletContextResource = ( ServletContextResource ) org.springframework.web.context.support.Resource ; ServletContext org.springframework.web.context.support.ServletContext = org.springframework.web.context.support.ServletContextResource . getServletContext ( ) ; java.lang.String java.lang.String = org.springframework.web.context.support.ServletContextResource . getPath ( ) + java.lang.String ; java.util.Set<org.springframework.web.context.support.Resource> < Resource > java.util.Set<org.springframework.web.context.support.Resource> = new java.util.LinkedHashSet<org.springframework.web.context.support.Resource> <> ( NUMBER ) ; void ( org.springframework.web.context.support.ServletContext , java.lang.String , org.springframework.web.context.support.ServletContextResource . getPath ( ) , java.util.Set<org.springframework.web.context.support.Resource> ) ; return java.util.Set<org.springframework.web.context.support.Resource> ; } else { return super. doFindPathMatchingFileResources ( org.springframework.web.context.support.Resource , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ServletContext org.springframework.web.context.support.ServletContext , java.lang.String java.lang.String , java.lang.String java.lang.String , java.util.Set<org.springframework.web.context.support.Resource> < Resource > java.util.Set<org.springframework.web.context.support.Resource> )			throws java.io.IOException { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.web.context.support.ServletContext . getResourcePaths ( java.lang.String ) ; if ( java.util.Set<java.lang.String> != null ) { boolean boolean = java.lang.String . boolean ( STRING ) ; int int = java.lang.String . int ( ResourceUtils . JAR_URL_SEPARATOR ) ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; if ( int > NUMBER && int + ResourceUtils . JAR_URL_SEPARATOR . length ( ) < java.lang.String . int ( ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String = java.lang.String . java.lang.String ( int + ResourceUtils . JAR_URL_SEPARATOR . length ( ) ) ; } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( ! java.lang.String . boolean ( java.lang.String ) ) { int int = java.lang.String . int ( java.lang.String ) ; if ( int != - NUMBER ) { java.lang.String = java.lang.String . java.lang.String ( int ) ; } } if ( java.lang.String . boolean ( STRING ) && ( boolean || StringUtils . countOccurrencesOf ( java.lang.String , STRING ) <= StringUtils . countOccurrencesOf ( java.lang.String , STRING ) ) ) { void ( org.springframework.web.context.support.ServletContext , java.lang.String , java.lang.String , java.util.Set<org.springframework.web.context.support.Resource> ) ; } if ( java.lang.String != null && getPathMatcher ( ) . match ( java.lang.String , java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.web.context.support.ServletContext . getRealPath ( java.lang.String ) ; if ( java.lang.String != null ) { void ( java.lang.String , java.lang.String , java.util.Set<org.springframework.web.context.support.Resource> ) ; } } if ( getPathMatcher ( ) . match ( java.lang.String , java.lang.String ) ) { java.util.Set<org.springframework.web.context.support.Resource> . add ( new ServletContextResource ( org.springframework.web.context.support.ServletContext , java.lang.String ) ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.util.Set<org.springframework.web.context.support.Resource> < Resource > java.util.Set<org.springframework.web.context.support.Resource> ) { if ( org.springframework.web.context.support.Log . isDebugEnabled ( ) ) { org.springframework.web.context.support.Log . debug ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } try { java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.lang.String ) ; try { for ( java.util.Enumeration<java.util.jar.JarEntry> < java.util.jar.JarEntry > java.util.Enumeration<java.util.jar.JarEntry> = java.util.jar.JarFile . java.util.Enumeration<java.util.jar.JarEntry> ( ) ; java.util.Enumeration<java.util.jar.JarEntry> . boolean ( ) ;) { java.util.jar.JarEntry java.util.jar.JarEntry = java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) ; java.lang.String java.lang.String = java.util.jar.JarEntry . java.lang.String ( ) ; if ( getPathMatcher ( ) . match ( java.lang.String , java.lang.String ) ) { java.util.Set<org.springframework.web.context.support.Resource> . add ( new UrlResource ( ResourceUtils . URL_PROTOCOL_JAR , ResourceUtils . FILE_URL_PREFIX + java.lang.String + ResourceUtils . JAR_URL_SEPARATOR + java.lang.String ) ) ; } } } finally { java.util.jar.JarFile . void ( ) ; } } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.web.context.support.Log . isWarnEnabled ( ) ) { org.springframework.web.context.support.Log . warn ( STRING + java.lang.String + STRING , java.io.IOException ) ; } } }  <METHOD_END>
