<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.jms.dsl.JmsTests.ControlBusGateway . void ( STRING ) ; assertThat ( this . org.springframework.integration.jms.dsl.ListableBeanFactory . getBean ( STRING ) , instanceOf ( FixedSubscriberChannel .class ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.jms.dsl.Message<?> = this . org.springframework.integration.jms.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.dsl.Message<> ) ; assertEquals ( STRING + int , org.springframework.integration.jms.dsl.Message<> . getPayload ( ) ) ; } this . org.springframework.integration.jms.dsl.JmsTests.ControlBusGateway . void ( STRING ) ; assertTrue ( ( ( ChannelInterceptorAware ) this . org.springframework.integration.jms.dsl.PollableChannel ) . getChannelInterceptors ( ) . contains ( this . org.springframework.integration.jms.dsl.JmsTests.TestChannelInterceptor ) ) ; assertThat ( this . org.springframework.integration.jms.dsl.JmsTests.TestChannelInterceptor . java.util.concurrent.atomic.AtomicInteger . int ( ) , Matchers . greaterThanOrEqualTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.jms.dsl.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( SimpMessageHeaderAccessor . DESTINATION_HEADER , STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.jms.dsl.Message<?> = this . org.springframework.integration.jms.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.dsl.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.dsl.Message<> . getPayload ( ) ) ; this . org.springframework.integration.jms.dsl.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( SimpMessageHeaderAccessor . DESTINATION_HEADER , STRING ) . build ( ) ) ; org.springframework.integration.jms.dsl.Message<?> = this . org.springframework.integration.jms.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.dsl.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.dsl.Message<> . getPayload ( ) ) ; assertTrue ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; this . org.springframework.integration.jms.dsl.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( SimpMessageHeaderAccessor . DESTINATION_HEADER , STRING ) . build ( ) ) ; org.springframework.integration.jms.dsl.Message<?> = this . org.springframework.integration.jms.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.dsl.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.dsl.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( new java.lang.Long ( NUMBER ) , TestUtils . getPropertyValue ( this . org.springframework.integration.jms.dsl.MessageHandler , STRING , java.lang.Long .class ) ) ; PollableChannel org.springframework.integration.jms.dsl.PollableChannel = new QueueChannel ( ) ; Message < java.lang.String > org.springframework.integration.jms.dsl.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.jms.dsl.PollableChannel ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.jms.dsl.MessageChannel . send ( org.springframework.integration.jms.dsl.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.jms.dsl.Message<?> = org.springframework.integration.jms.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.dsl.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.dsl.Message<> . getPayload ( ) ) ; assertTrue ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsTemplate org.springframework.integration.jms.dsl.JmsTemplate = new JmsTemplate ( this . org.springframework.integration.jms.dsl.ConnectionFactory ) ; org.springframework.integration.jms.dsl.JmsTemplate . setPubSubDomain ( true ) ; org.springframework.integration.jms.dsl.JmsTemplate . setDefaultDestinationName ( STRING ) ; org.springframework.integration.jms.dsl.JmsTemplate . convertAndSend ( STRING ) ; Message < ? > org.springframework.integration.jms.dsl.Message<?> = this . org.springframework.integration.jms.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.dsl.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jms.dsl.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { this . org.springframework.integration.jms.dsl.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setHeader ( SimpMessageHeaderAccessor . DESTINATION_HEADER , STRING ) . build ( ) ) ; assertTrue ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.ConnectionFactory org.springframework.integration.jms.dsl.ConnectionFactory ( ) { return new CachingConnectionFactory ( org.springframework.integration.jms.dsl.ActiveMQConnectionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.ActiveMQConnectionFactory org.springframework.integration.jms.dsl.ActiveMQConnectionFactory ( ) { ActiveMQConnectionFactory org.springframework.integration.jms.dsl.ActiveMQConnectionFactory = new ActiveMQConnectionFactory ( STRING ) ; org.springframework.integration.jms.dsl.ActiveMQConnectionFactory . setTrustAllPackages ( true ) ; return org.springframework.integration.jms.dsl.ActiveMQConnectionFactory ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.JmsTemplate org.springframework.integration.jms.dsl.JmsTemplate ( ) { return new JmsTemplate ( org.springframework.integration.jms.dsl.ActiveMQConnectionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = PollerMetadata . DEFAULT_POLLER ) public org.springframework.integration.jms.dsl.PollerMetadata org.springframework.integration.jms.dsl.PollerMetadata ( ) { return Pollers . fixedRate ( NUMBER ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return IntegrationFlowDefinition :: controlBus ; }  <METHOD_END>
<METHOD_START> @ Bean @ InboundChannelAdapter ( value = STRING , autoStartup = STRING , poller = @ Poller ( fixedRate = STRING ) ) public org.springframework.integration.jms.dsl.MessageSource<?> < ? > org.springframework.integration.jms.dsl.MessageSource<?> ( ) { MethodInvokingMessageSource org.springframework.integration.jms.dsl.MethodInvokingMessageSource = new MethodInvokingMessageSource ( ) ; org.springframework.integration.jms.dsl.MethodInvokingMessageSource . setObject ( new java.util.concurrent.atomic.AtomicInteger ( ) ) ; org.springframework.integration.jms.dsl.MethodInvokingMessageSource . setMethodName ( STRING ) ; return org.springframework.integration.jms.dsl.MethodInvokingMessageSource ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return f -> f . fixedSubscriberChannel ( STRING ) . transform ( STRING ) . channel ( Jms . pollableChannel ( STRING , cachingConnectionFactory ( ) ) . destination ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return f -> f . handle ( Jms . outboundAdapter ( jmsConnectionFactory ( ) ) . destinationExpression ( STRING + SimpMessageHeaderAccessor . DESTINATION_HEADER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.MessageChannel org.springframework.integration.jms.dsl.MessageChannel ( ) { return MessageChannels . queue ( ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Jms . inboundAdapter ( org.springframework.integration.jms.dsl.ConnectionFactory ( ) ) . destination ( STRING ) ) .< java.lang.String , java.lang.String > transform ( java.lang.String :: toUpperCase ) . channel ( this . org.springframework.integration.jms.dsl.MessageChannel ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Jms . publishSubscribeChannel ( org.springframework.integration.jms.dsl.ActiveMQConnectionFactory ( ) ) . destination ( STRING ) ) . channel ( c -> c . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Jms . messageDrivenChannelAdapter ( org.springframework.integration.jms.dsl.ActiveMQConnectionFactory ( ) ) . outputChannel ( org.springframework.integration.jms.dsl.MessageChannel ( ) ) . destination ( STRING ) ) .< java.lang.String , java.lang.String > transform ( java.lang.String :: toLowerCase ) . channel ( org.springframework.integration.jms.dsl.MessageChannel ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean ( ) { return new java.util.concurrent.atomic.AtomicBoolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.MessageChannel org.springframework.integration.jms.dsl.MessageChannel ( ) { DirectChannel org.springframework.integration.jms.dsl.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.jms.dsl.DirectChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.jms.dsl.Message<?> < ? > org.springframework.integration.jms.dsl.Message<?> ( Message < ? > org.springframework.integration.jms.dsl.Message<?> , MessageChannel org.springframework.integration.jms.dsl.MessageChannel ) { java.util.concurrent.atomic.AtomicBoolean ( ) . void ( true ) ; return super. preSend ( org.springframework.integration.jms.dsl.Message<> , org.springframework.integration.jms.dsl.MessageChannel ) ; } } ) ; return org.springframework.integration.jms.dsl.DirectChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jms.dsl.Message<?> < ? > org.springframework.integration.jms.dsl.Message<?> ( Message < ? > org.springframework.integration.jms.dsl.Message<?> , MessageChannel org.springframework.integration.jms.dsl.MessageChannel ) { java.util.concurrent.atomic.AtomicBoolean ( ) . void ( true ) ; return super. preSend ( org.springframework.integration.jms.dsl.Message<> , org.springframework.integration.jms.dsl.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Jms . messageDrivenChannelAdapter ( Jms . container ( org.springframework.integration.jms.dsl.ActiveMQConnectionFactory ( ) , STRING ) . pubSubDomain ( false ) . taskExecutor ( java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ) . get ( ) ) ) . transform ( java.lang.String :: java.lang.String ) . channel ( org.springframework.integration.jms.dsl.MessageChannel ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return f -> f . handle ( Jms . outboundGateway ( jmsConnectionFactory ( ) ) . replyContainer ( c -> c . idleReplyContainerTimeout ( NUMBER ) ) . requestDestination ( STRING ) , e -> e . id ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Jms . inboundGateway ( org.springframework.integration.jms.dsl.ActiveMQConnectionFactory ( ) ) . requestChannel ( org.springframework.integration.jms.dsl.MessageChannel ( ) ) . destination ( STRING ) ) .< java.lang.String , java.lang.String > transform ( java.lang.String :: toUpperCase ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean ( ) { return new java.util.concurrent.atomic.AtomicBoolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.MessageChannel org.springframework.integration.jms.dsl.MessageChannel ( ) { DirectChannel org.springframework.integration.jms.dsl.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.jms.dsl.DirectChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.jms.dsl.Message<?> < ? > org.springframework.integration.jms.dsl.Message<?> ( Message < ? > org.springframework.integration.jms.dsl.Message<?> , MessageChannel org.springframework.integration.jms.dsl.MessageChannel ) { java.util.concurrent.atomic.AtomicBoolean ( ) . void ( true ) ; return super. preSend ( org.springframework.integration.jms.dsl.Message<> , org.springframework.integration.jms.dsl.MessageChannel ) ; } } ) ; return org.springframework.integration.jms.dsl.DirectChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jms.dsl.Message<?> < ? > org.springframework.integration.jms.dsl.Message<?> ( Message < ? > org.springframework.integration.jms.dsl.Message<?> , MessageChannel org.springframework.integration.jms.dsl.MessageChannel ) { java.util.concurrent.atomic.AtomicBoolean ( ) . void ( true ) ; return super. preSend ( org.springframework.integration.jms.dsl.Message<> , org.springframework.integration.jms.dsl.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Jms . messageDrivenChannelAdapter ( org.springframework.integration.jms.dsl.ActiveMQConnectionFactory ( ) ) . errorChannel ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME ) . destination ( STRING ) ) .< java.lang.String , java.lang.String > transform ( p -> { throw new RuntimeException ( STRING ) ; } ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jms.dsl.IntegrationFlow org.springframework.integration.jms.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME ) . handle ( m -> { MessagingException exception = ( MessagingException ) m . getPayload ( ) ; redeliveryLatch ( ) . countDown ( ) ; throw exception ; } ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jms.dsl.Message<?> < ? > org.springframework.integration.jms.dsl.Message<?> ( Message < ? > org.springframework.integration.jms.dsl.Message<?> , MessageChannel org.springframework.integration.jms.dsl.MessageChannel ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; return org.springframework.integration.jms.dsl.Message<> ; }  <METHOD_END>
