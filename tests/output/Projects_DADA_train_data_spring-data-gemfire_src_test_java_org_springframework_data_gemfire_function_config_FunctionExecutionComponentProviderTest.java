<METHOD_START> @ Test public void void ( ) java.lang.ClassNotFoundException { java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> = new java.util.ArrayList<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > ( ) ; FunctionExecutionComponentProvider org.springframework.data.gemfire.function.config.FunctionExecutionComponentProvider = new FunctionExecutionComponentProvider ( java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> , AnnotationFunctionExecutionConfigurationSource . getFunctionExecutionAnnotationTypes ( ) ) ; java.util.Set<org.springframework.data.gemfire.function.config.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.data.gemfire.function.config.BeanDefinition> = org.springframework.data.gemfire.function.config.FunctionExecutionComponentProvider . findCandidateComponents ( this . java.lang.Class<? extends org.springframework.data.gemfire.function.config.FunctionExecutionComponentProviderTest> ( ) . java.lang.Package ( ) . java.lang.String ( ) + STRING ) ; ScannedGenericBeanDefinition org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition = null ; for ( BeanDefinition org.springframework.data.gemfire.function.config.BeanDefinition : java.util.Set<org.springframework.data.gemfire.function.config.BeanDefinition> ) { if ( org.springframework.data.gemfire.function.config.BeanDefinition . getBeanClassName ( ) . equals ( TestFunctionExecution .class . java.lang.String ( ) ) ) { org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition = ( ScannedGenericBeanDefinition ) org.springframework.data.gemfire.function.config.BeanDefinition ; } } assertNotNull ( org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.ClassNotFoundException { java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> = new java.util.ArrayList<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > ( ) ; FunctionExecutionComponentProvider org.springframework.data.gemfire.function.config.FunctionExecutionComponentProvider = new FunctionExecutionComponentProvider ( java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> , AnnotationFunctionExecutionConfigurationSource . getFunctionExecutionAnnotationTypes ( ) ) ; org.springframework.data.gemfire.function.config.FunctionExecutionComponentProvider . addExcludeFilter ( new AssignableTypeFilter ( TestFunctionExecution .class ) ) ; java.util.Set<org.springframework.data.gemfire.function.config.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.data.gemfire.function.config.BeanDefinition> = org.springframework.data.gemfire.function.config.FunctionExecutionComponentProvider . findCandidateComponents ( this . java.lang.Class<? extends org.springframework.data.gemfire.function.config.FunctionExecutionComponentProviderTest> ( ) . java.lang.Package ( ) . java.lang.String ( ) + STRING ) ; for ( BeanDefinition org.springframework.data.gemfire.function.config.BeanDefinition : java.util.Set<org.springframework.data.gemfire.function.config.BeanDefinition> ) { if ( org.springframework.data.gemfire.function.config.BeanDefinition . getBeanClassName ( ) . equals ( TestFunctionExecution .class . java.lang.String ( ) ) ) { fail ( TestFunctionExecution .class . java.lang.String ( ) + STRING ) ; } } }  <METHOD_END>
