<METHOD_START> void ( ) { this( java.util.Collections .< Definition > java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ( ) ); }  <METHOD_END>
<METHOD_START> void ( java.util.Collection<? extends org.springframework.boot.test.mock.mockito.Definition> < ? extends Definition > java.util.Collection<? extends org.springframework.boot.test.mock.mockito.Definition> ) { this . java.util.Set<org.springframework.boot.test.mock.mockito.Definition> = new java.util.LinkedHashSet <> ( ) ; this . java.util.Map<org.springframework.boot.test.mock.mockito.Definition,java.lang.reflect.Field> = new java.util.LinkedHashMap <> ( ) ; if ( java.util.Collection<> != null ) { this . java.util.Set<org.springframework.boot.test.mock.mockito.Definition> . addAll ( java.util.Collection<> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { void ( java.lang.Class<> ) ; ReflectionUtils . doWithFields ( java.lang.Class<> , new FieldCallback ( ) { @ java.lang.Override public void void ( java.lang.reflect.Field java.lang.reflect.Field )					throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { void ( java.lang.reflect.Field ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Field java.lang.reflect.Field )					throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { void ( java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { for ( MockBean org.springframework.boot.test.mock.mockito.MockBean : AnnotationUtils . getRepeatableAnnotations ( java.lang.reflect.AnnotatedElement , MockBean .class , MockBeans .class ) ) { void ( org.springframework.boot.test.mock.mockito.MockBean , java.lang.reflect.AnnotatedElement ) ; } for ( SpyBean org.springframework.boot.test.mock.mockito.SpyBean : AnnotationUtils . getRepeatableAnnotations ( java.lang.reflect.AnnotatedElement , SpyBean .class , SpyBeans .class ) ) { void ( org.springframework.boot.test.mock.mockito.SpyBean , java.lang.reflect.AnnotatedElement ) ; } }  <METHOD_END>
<METHOD_START> private void void ( MockBean org.springframework.boot.test.mock.mockito.MockBean , java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> < ResolvableType > java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> = java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> ( java.lang.reflect.AnnotatedElement , org.springframework.boot.test.mock.mockito.MockBean . value ( ) ) ; Assert . state ( ! java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> . isEmpty ( ) , STRING + java.lang.reflect.AnnotatedElement ) ; if ( StringUtils . hasLength ( org.springframework.boot.test.mock.mockito.MockBean . name ( ) ) ) { Assert . state ( java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> . size ( ) == NUMBER , STRING ) ; } for ( ResolvableType org.springframework.boot.test.mock.mockito.ResolvableType : java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> ) { MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition = new MockDefinition ( org.springframework.boot.test.mock.mockito.MockBean . name ( ) , org.springframework.boot.test.mock.mockito.ResolvableType , org.springframework.boot.test.mock.mockito.MockBean . extraInterfaces ( ) , org.springframework.boot.test.mock.mockito.MockBean . answer ( ) , org.springframework.boot.test.mock.mockito.MockBean . serializable ( ) , org.springframework.boot.test.mock.mockito.MockBean . reset ( ) , QualifierDefinition . forElement ( java.lang.reflect.AnnotatedElement ) ) ; void ( java.lang.reflect.AnnotatedElement , org.springframework.boot.test.mock.mockito.MockDefinition , STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( SpyBean org.springframework.boot.test.mock.mockito.SpyBean , java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> < ResolvableType > java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> = java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> ( java.lang.reflect.AnnotatedElement , org.springframework.boot.test.mock.mockito.SpyBean . value ( ) ) ; Assert . state ( ! java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> . isEmpty ( ) , STRING + java.lang.reflect.AnnotatedElement ) ; if ( StringUtils . hasLength ( org.springframework.boot.test.mock.mockito.SpyBean . name ( ) ) ) { Assert . state ( java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> . size ( ) == NUMBER , STRING ) ; } for ( ResolvableType org.springframework.boot.test.mock.mockito.ResolvableType : java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> ) { SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = new SpyDefinition ( org.springframework.boot.test.mock.mockito.SpyBean . name ( ) , org.springframework.boot.test.mock.mockito.ResolvableType , org.springframework.boot.test.mock.mockito.SpyBean . reset ( ) , org.springframework.boot.test.mock.mockito.SpyBean . proxyTargetAware ( ) , QualifierDefinition . forElement ( java.lang.reflect.AnnotatedElement ) ) ; void ( java.lang.reflect.AnnotatedElement , org.springframework.boot.test.mock.mockito.SpyDefinition , STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , Definition org.springframework.boot.test.mock.mockito.Definition , java.lang.String java.lang.String ) { boolean boolean = this . java.util.Set<org.springframework.boot.test.mock.mockito.Definition> . add ( org.springframework.boot.test.mock.mockito.Definition ) ; Assert . state ( boolean , STRING + java.lang.String + STRING + org.springframework.boot.test.mock.mockito.Definition ) ; if ( java.lang.reflect.AnnotatedElement instanceof java.lang.reflect.Field ) { java.lang.reflect.Field java.lang.reflect.Field = ( java.lang.reflect.Field ) java.lang.reflect.AnnotatedElement ; this . java.util.Map<org.springframework.boot.test.mock.mockito.Definition,java.lang.reflect.Field> . put ( org.springframework.boot.test.mock.mockito.Definition , java.lang.reflect.Field ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> < ResolvableType > java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> < ResolvableType > java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> = new java.util.LinkedHashSet<org.springframework.boot.test.mock.mockito.ResolvableType> <> ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> . add ( ResolvableType . forClass ( java.lang.Class<> ) ) ; } if ( java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> . isEmpty ( ) && java.lang.reflect.AnnotatedElement instanceof java.lang.reflect.Field ) { java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> . add ( ResolvableType . forField ( ( java.lang.reflect.Field ) java.lang.reflect.AnnotatedElement ) ) ; } return java.util.Set<org.springframework.boot.test.mock.mockito.ResolvableType> ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.boot.test.mock.mockito.Definition> < Definition > java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ( ) { return java.util.Collections . java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ( this . java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Field java.lang.reflect.Field ( Definition org.springframework.boot.test.mock.mockito.Definition ) { return this . java.util.Map<org.springframework.boot.test.mock.mockito.Definition,java.lang.reflect.Field> . get ( org.springframework.boot.test.mock.mockito.Definition ) ; }  <METHOD_END>
