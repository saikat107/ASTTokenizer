<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { GemFireCache org.springframework.data.gemfire.search.lucene.GemFireCache = org.springframework.data.gemfire.search.lucene.GemFireCache ( ) ; Assert . state ( org.springframework.data.gemfire.search.lucene.GemFireCache != null , STRING ) ; this . org.springframework.data.gemfire.search.lucene.LuceneService = org.springframework.data.gemfire.search.lucene.LuceneService ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.search.lucene.LuceneService org.springframework.data.gemfire.search.lucene.LuceneService ( GemFireCache org.springframework.data.gemfire.search.lucene.GemFireCache ) { return LuceneServiceProvider . get ( org.springframework.data.gemfire.search.lucene.GemFireCache ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.search.lucene.LuceneService org.springframework.data.gemfire.search.lucene.LuceneService ( ) java.lang.Exception { return this . org.springframework.data.gemfire.search.lucene.LuceneService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.util.Optional . java.util.Optional ( this . org.springframework.data.gemfire.search.lucene.LuceneService ) .< java.lang.Class<?> < ? > > map ( LuceneService :: getClass ) . orElse ( LuceneService .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void void ( GemFireCache org.springframework.data.gemfire.search.lucene.GemFireCache ) { this . org.springframework.data.gemfire.search.lucene.GemFireCache = org.springframework.data.gemfire.search.lucene.GemFireCache ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.search.lucene.GemFireCache org.springframework.data.gemfire.search.lucene.GemFireCache ( ) { return this . org.springframework.data.gemfire.search.lucene.GemFireCache ; }  <METHOD_END>
