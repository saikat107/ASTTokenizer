<METHOD_START> protected org.springframework.data.gemfire.wan.Cache org.springframework.data.gemfire.wan.Cache ( final AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) { Cache org.springframework.data.gemfire.wan.Cache = mock ( Cache .class ) ; when ( ( org.springframework.data.gemfire.wan.Cache . createAsyncEventQueueFactory ( ) ) ) . thenReturn ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) ; return org.springframework.data.gemfire.wan.Cache ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.wan.AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( final java.lang.String java.lang.String ) { AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory = mock ( AsyncEventQueueFactory .class ) ; AsyncEventQueue org.springframework.data.gemfire.wan.AsyncEventQueue = mock ( AsyncEventQueue .class ) ; when ( org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory . create ( eq ( java.lang.String ) , notNull ( AsyncEventListener .class ) ) ) . thenReturn ( org.springframework.data.gemfire.wan.AsyncEventQueue ) ; return org.springframework.data.gemfire.wan.AsyncEventQueueFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.wan.AsyncEventListener org.springframework.data.gemfire.wan.AsyncEventListener ( ) { return mock ( AsyncEventListener .class ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory , final AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) throws java.lang.Exception { java.lang.Boolean java.lang.Boolean = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; verify ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) . setParallel ( eq ( java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ) ) ) ; java.lang.String java.lang.String = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; if ( java.lang.String != null ) { verify ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) . setOrderPolicy ( eq ( GatewaySender . OrderPolicy . valueOf ( java.lang.String . java.lang.String ( ) ) ) ) ; } java.lang.Integer java.lang.Integer = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; if ( java.lang.Integer != null ) { verify ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) . setDispatcherThreads ( eq ( java.lang.Integer ) ) ; } java.lang.String java.lang.String = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; if ( java.lang.String != null ) { verify ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) . setDiskStoreName ( eq ( java.lang.String ) ) ; } java.lang.Boolean java.lang.Boolean = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; if ( java.lang.Boolean != null ) { verify ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) . setDiskSynchronous ( eq ( java.lang.Boolean ) ) ; } java.lang.Boolean java.lang.Boolean = TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; if ( java.lang.Boolean != null ) { verify ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) . setPersistent ( eq ( java.lang.Boolean ) ) ; } else { verify ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory , never ( ) ) . setPersistent ( true ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean = new AsyncEventQueueFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( STRING ) ) ) ; AsyncEventListener org.springframework.data.gemfire.wan.AsyncEventListener = org.springframework.data.gemfire.wan.AsyncEventListener ( ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ) ; assertSame ( org.springframework.data.gemfire.wan.AsyncEventListener , TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ) ; AsyncEventListener org.springframework.data.gemfire.wan.AsyncEventListener = org.springframework.data.gemfire.wan.AsyncEventListener ( ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ) ; assertSame ( org.springframework.data.gemfire.wan.AsyncEventListener , TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean = new AsyncEventQueueFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( java.lang.String ) ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setName ( java.lang.String ) ; AsyncEventListener org.springframework.data.gemfire.wan.AsyncEventListener = org.springframework.data.gemfire.wan.AsyncEventListener ( ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ) ; assertSame ( org.springframework.data.gemfire.wan.AsyncEventListener , TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . doInit ( ) ; assertNotNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ) ; try { org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ( ) ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; assertSame ( org.springframework.data.gemfire.wan.AsyncEventListener , TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ) ; throw java.lang.IllegalStateException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean = new AsyncEventQueueFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( STRING ) ) ) ; assertNull ( TestUtils . readField ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . doInit ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.String ( ) ) ; throw java.lang.Exception ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory = org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( STRING ) ; AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean = new AsyncEventQueueFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ( ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setDispatcherThreads ( NUMBER ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setParallel ( true ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; AsyncEventQueue org.springframework.data.gemfire.wan.AsyncEventQueue = org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.AsyncEventQueue ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory = org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( STRING ) ; AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean = new AsyncEventQueueFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ( ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setParallel ( true ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; AsyncEventQueue org.springframework.data.gemfire.wan.AsyncEventQueue = org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.AsyncEventQueue ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory = org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( STRING ) ; AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean = new AsyncEventQueueFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ( ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setOrderPolicy ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setParallel ( true ) ; try { org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . doInit ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory = org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( STRING ) ; AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean = new AsyncEventQueueFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ( ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setOrderPolicy ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setParallel ( false ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; AsyncEventQueue org.springframework.data.gemfire.wan.AsyncEventQueue = org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.AsyncEventQueue ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory = org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( STRING ) ; AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean = new AsyncEventQueueFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ( ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setDispatcherThreads ( NUMBER ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setOrderPolicy ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; AsyncEventQueue org.springframework.data.gemfire.wan.AsyncEventQueue = org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.AsyncEventQueue ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory = org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( STRING ) ; AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean = new AsyncEventQueueFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ( ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setDiskStoreRef ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setPersistent ( false ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; AsyncEventQueue org.springframework.data.gemfire.wan.AsyncEventQueue = org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.AsyncEventQueue ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsyncEventQueueFactory org.springframework.data.gemfire.wan.AsyncEventQueueFactory = org.springframework.data.gemfire.wan.AsyncEventQueueFactory ( STRING ) ; AsyncEventQueueFactoryBean org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean = new AsyncEventQueueFactoryBean ( org.springframework.data.gemfire.wan.Cache ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setAsyncEventListener ( org.springframework.data.gemfire.wan.AsyncEventListener ( ) ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . setDiskSynchronous ( true ) ; org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . doInit ( ) ; void ( org.springframework.data.gemfire.wan.AsyncEventQueueFactory , org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean ) ; AsyncEventQueue org.springframework.data.gemfire.wan.AsyncEventQueue = org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.wan.AsyncEventQueue ) ; assertEquals ( STRING , org.springframework.data.gemfire.wan.AsyncEventQueue . getId ( ) ) ; }  <METHOD_END>
