<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext )			throws org.springframework.boot.actuate.autoconfigure.BeansException { this . org.springframework.boot.actuate.autoconfigure.ApplicationContext = org.springframework.boot.actuate.autoconfigure.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.ManagementContextResolver org.springframework.boot.actuate.autoconfigure.ManagementContextResolver ( ) { return new ManagementContextResolver ( this . org.springframework.boot.actuate.autoconfigure.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.ManagementServletContext org.springframework.boot.actuate.autoconfigure.ManagementServletContext ( final ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties ) { return new ManagementServletContext ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort = org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort ; if ( this . org.springframework.boot.actuate.autoconfigure.ApplicationContext instanceof WebApplicationContext ) { org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort = org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort ( this . org.springframework.boot.actuate.autoconfigure.ApplicationContext . getEnvironment ( ) ) ; } if ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort == org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort ) { if ( this . org.springframework.boot.actuate.autoconfigure.ApplicationContext instanceof ServletWebServerApplicationContext && ( ( ServletWebServerApplicationContext ) this . org.springframework.boot.actuate.autoconfigure.ApplicationContext ) . getWebServer ( ) != null ) { void ( ) ; } else { org.springframework.boot.actuate.autoconfigure.Log . warn ( STRING + STRING + STRING ) ; } } if ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort == org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort ) { if ( new RelaxedPropertyResolver ( this . org.springframework.boot.actuate.autoconfigure.ApplicationContext . getEnvironment ( ) , STRING ) . getProperty ( STRING ) != null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } if ( this . org.springframework.boot.actuate.autoconfigure.ApplicationContext . getEnvironment ( ) instanceof ConfigurableEnvironment ) { void ( ( ConfigurableEnvironment ) this . org.springframework.boot.actuate.autoconfigure.ApplicationContext . getEnvironment ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { AnnotationConfigServletWebServerApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . setParent ( this . org.springframework.boot.actuate.autoconfigure.ApplicationContext ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . setNamespace ( STRING ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . setId ( this . org.springframework.boot.actuate.autoconfigure.ApplicationContext . getId ( ) + STRING ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . setClassLoader ( this . org.springframework.boot.actuate.autoconfigure.ApplicationContext . getClassLoader ( ) ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( EndpointWebMvcChildContextConfiguration .class , PropertyPlaceholderAutoConfiguration .class , ServletWebServerFactoryAutoConfiguration .class , DispatcherServletAutoConfiguration .class ) ; void ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext ) ; org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.CloseManagementContextListener . void ( this . org.springframework.boot.actuate.autoconfigure.ApplicationContext , org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; org.springframework.boot.actuate.autoconfigure.ManagementContextResolver ( ) . setApplicationContext ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationConfigServletWebServerApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext ) { try { ConfigurableListableBeanFactory org.springframework.boot.actuate.autoconfigure.ConfigurableListableBeanFactory = org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBeanFactory ( ) ; if ( org.springframework.boot.actuate.autoconfigure.ConfigurableListableBeanFactory instanceof BeanDefinitionRegistry ) { BeanDefinitionRegistry org.springframework.boot.actuate.autoconfigure.BeanDefinitionRegistry = ( BeanDefinitionRegistry ) org.springframework.boot.actuate.autoconfigure.ConfigurableListableBeanFactory ; org.springframework.boot.actuate.autoconfigure.BeanDefinitionRegistry . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<?> ( ) ) ) ; } } catch ( NoSuchBeanDefinitionException org.springframework.boot.actuate.autoconfigure.NoSuchBeanDefinitionException ) { } }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( ) org.springframework.boot.actuate.autoconfigure.NoSuchBeanDefinitionException { java.lang.Class<?> < ? > java.lang.Class<?> = this . org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBean ( ServletWebServerFactory .class ) . getClass ( ) ; if ( boolean ( java.lang.Class<> ) ) { throw new FatalBeanException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + STRING + STRING ) ; } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . boolean ( ) || ( java.lang.Class<> . boolean ( ) && ! java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) ) || java.lang.Class<> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( final ConfigurableEnvironment org.springframework.boot.actuate.autoconfigure.ConfigurableEnvironment ) { org.springframework.boot.actuate.autoconfigure.ConfigurableEnvironment . getPropertySources ( ) . addLast ( new PropertySource < java.lang.Object > ( STRING ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.boot.actuate.autoconfigure.ConfigurableEnvironment . getProperty ( STRING ) ; } return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.boot.actuate.autoconfigure.ConfigurableEnvironment . getProperty ( STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.ApplicationContextHeaderFilter org.springframework.boot.actuate.autoconfigure.ApplicationContextHeaderFilter ( ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext ) { return new ApplicationContextHeaderFilter ( org.springframework.boot.actuate.autoconfigure.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> void ( ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext , ConfigurableApplicationContext org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext ) { this . org.springframework.boot.actuate.autoconfigure.ApplicationContext = org.springframework.boot.actuate.autoconfigure.ApplicationContext ; this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.boot.actuate.autoconfigure.ApplicationEvent ) { if ( org.springframework.boot.actuate.autoconfigure.ApplicationEvent instanceof ContextClosedEvent ) { void ( ( ContextClosedEvent ) org.springframework.boot.actuate.autoconfigure.ApplicationEvent ) ; } if ( org.springframework.boot.actuate.autoconfigure.ApplicationEvent instanceof ApplicationFailedEvent ) { void ( ( ApplicationFailedEvent ) org.springframework.boot.actuate.autoconfigure.ApplicationEvent ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ContextClosedEvent org.springframework.boot.actuate.autoconfigure.ContextClosedEvent ) { void ( org.springframework.boot.actuate.autoconfigure.ContextClosedEvent . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationFailedEvent org.springframework.boot.actuate.autoconfigure.ApplicationFailedEvent ) { void ( org.springframework.boot.actuate.autoconfigure.ApplicationFailedEvent . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext ) { if ( org.springframework.boot.actuate.autoconfigure.ApplicationContext == this . org.springframework.boot.actuate.autoconfigure.ApplicationContext ) { this . org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext , ConfigurableApplicationContext org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext ) { if ( org.springframework.boot.actuate.autoconfigure.ApplicationContext instanceof ConfigurableApplicationContext ) { void ( ( ConfigurableApplicationContext ) org.springframework.boot.actuate.autoconfigure.ApplicationContext , org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( ConfigurableApplicationContext org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext , ConfigurableApplicationContext org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext ) { org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext . addApplicationListener ( new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.CloseManagementContextListener ( org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext , org.springframework.boot.actuate.autoconfigure.ConfigurableApplicationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.ConfigurationPhase org.springframework.boot.actuate.autoconfigure.ConfigurationPhase ( ) { return ConfigurationPhase . REGISTER_BEAN ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.ConditionOutcome org.springframework.boot.actuate.autoconfigure.ConditionOutcome ( ConditionContext org.springframework.boot.actuate.autoconfigure.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.actuate.autoconfigure.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; if ( ! ( org.springframework.boot.actuate.autoconfigure.ConditionContext . getResourceLoader ( ) instanceof WebApplicationContext ) ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . because ( STRING ) ) ; } org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort = org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort ( org.springframework.boot.actuate.autoconfigure.ConditionContext . getEnvironment ( ) ) ; if ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort == org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort ) { return ConditionOutcome . match ( ConditionMessage.Builder . because ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . because ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort ( Environment org.springframework.boot.actuate.autoconfigure.Environment ) { java.lang.Integer java.lang.Integer = java.lang.Integer ( org.springframework.boot.actuate.autoconfigure.Environment , STRING ) ; java.lang.Integer java.lang.Integer = java.lang.Integer ( org.springframework.boot.actuate.autoconfigure.Environment , STRING ) ; if ( java.lang.Integer != null && java.lang.Integer < NUMBER ) { return org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort ; } return ( ( java.lang.Integer == null ) || ( java.lang.Integer == null && java.lang.Integer . boolean ( NUMBER ) ) || ( java.lang.Integer != NUMBER && java.lang.Integer . boolean ( java.lang.Integer ) ) ? org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort : org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.ManagementServerPort ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Integer java.lang.Integer ( Environment org.springframework.boot.actuate.autoconfigure.Environment , java.lang.String java.lang.String ) { RelaxedPropertyResolver org.springframework.boot.actuate.autoconfigure.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.actuate.autoconfigure.Environment , java.lang.String ) ; return org.springframework.boot.actuate.autoconfigure.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Integer .class ) ; }  <METHOD_END>
