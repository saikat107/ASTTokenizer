<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( GatewayTransportFilter org.springframework.data.gemfire.test.GatewayTransportFilter ) { this . java.util.List<org.springframework.data.gemfire.test.GatewayTransportFilter> . add ( org.springframework.data.gemfire.test.GatewayTransportFilter ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( GatewayTransportFilter org.springframework.data.gemfire.test.GatewayTransportFilter ) { this . java.util.List<org.springframework.data.gemfire.test.GatewayTransportFilter> . remove ( org.springframework.data.gemfire.test.GatewayTransportFilter ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiverFactory org.springframework.data.gemfire.test.GatewayReceiverFactory ( final boolean boolean ) { this . boolean = boolean ; this . boolean = ! boolean ; return this ; }  <METHOD_END>
<METHOD_START> private int int ( ) { final int int = new java.util.Random ( java.lang.System . long ( ) ) . int ( this . int - this . int ) ; return java.lang.Math . int ( this . int + int , this . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.GatewayReceiver org.springframework.data.gemfire.test.GatewayReceiver ( ) { GatewayReceiver org.springframework.data.gemfire.test.GatewayReceiver = mock ( GatewayReceiver .class ) ; when ( org.springframework.data.gemfire.test.GatewayReceiver . getBindAddress ( ) ) . thenReturn ( this . java.lang.String ) ; when ( org.springframework.data.gemfire.test.GatewayReceiver . getEndPort ( ) ) . thenReturn ( this . int ) ; when ( org.springframework.data.gemfire.test.GatewayReceiver . getGatewayTransportFilters ( ) ) . thenReturn ( this . java.util.List<org.springframework.data.gemfire.test.GatewayTransportFilter> ) ; when ( org.springframework.data.gemfire.test.GatewayReceiver . getHost ( ) ) . thenReturn ( StringUtils . hasText ( this . java.lang.String ) ? this . java.lang.String : this . java.lang.String ) ; when ( org.springframework.data.gemfire.test.GatewayReceiver . isManualStart ( ) ) . thenReturn ( this . boolean ) ; when ( org.springframework.data.gemfire.test.GatewayReceiver . getMaximumTimeBetweenPings ( ) ) . thenReturn ( this . int ) ; when ( org.springframework.data.gemfire.test.GatewayReceiver . getPort ( ) ) . thenReturn ( int ( ) ) ; when ( org.springframework.data.gemfire.test.GatewayReceiver . getSocketBufferSize ( ) ) . thenReturn ( this . int ) ; when ( org.springframework.data.gemfire.test.GatewayReceiver . getStartPort ( ) ) . thenReturn ( this . int ) ; when ( org.springframework.data.gemfire.test.GatewayReceiver . isRunning ( ) ) . thenAnswer ( new Answer < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { return org.springframework.data.gemfire.test.StubGatewayReceiverFactory .this . boolean ; } } ) ; try { doAnswer ( new Answer < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) { org.springframework.data.gemfire.test.StubGatewayReceiverFactory .this . boolean = true ; return null ; } } ) . when ( org.springframework.data.gemfire.test.GatewayReceiver ) . start ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( java.io.IOException ) ; } doAnswer ( new Answer < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { org.springframework.data.gemfire.test.StubGatewayReceiverFactory .this . boolean = false ; return null ; } } ) . when ( org.springframework.data.gemfire.test.GatewayReceiver ) . stop ( ) ; return org.springframework.data.gemfire.test.GatewayReceiver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { return org.springframework.data.gemfire.test.StubGatewayReceiverFactory .this . boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) { org.springframework.data.gemfire.test.StubGatewayReceiverFactory .this . boolean = true ; return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { org.springframework.data.gemfire.test.StubGatewayReceiverFactory .this . boolean = false ; return null ; }  <METHOD_END>
