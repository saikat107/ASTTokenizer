<METHOD_START> void ( ErrorPage org.springframework.boot.web.embedded.tomcat.ErrorPage ) { this . java.lang.String = org.springframework.boot.web.embedded.tomcat.ErrorPage . getPath ( ) ; this . java.lang.String = org.springframework.boot.web.embedded.tomcat.ErrorPage . getExceptionName ( ) ; this . int = org.springframework.boot.web.embedded.tomcat.ErrorPage . getStatusCode ( ) ; this . java.lang.Object = java.lang.Object ( org.springframework.boot.web.embedded.tomcat.ErrorPage ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ErrorPage org.springframework.boot.web.embedded.tomcat.ErrorPage ) { try { if ( ClassUtils . isPresent ( java.lang.String , null ) ) { return BeanUtils . instantiateClass ( ClassUtils . forName ( java.lang.String , null ) ) ; } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { } catch ( java.lang.LinkageError java.lang.LinkageError ) { } return null ; }  <METHOD_END>
<METHOD_START> public void void ( Context org.springframework.boot.web.embedded.tomcat.Context ) { Assert . state ( this . java.lang.Object != null , STRING ) ; if ( ClassUtils . isPresent ( java.lang.String , null ) ) { org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.tomcat.util.descriptor.web.ErrorPage = ( org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache ) this . java.lang.Object ; org.apache.tomcat.util.descriptor.web.ErrorPage . setLocation ( this . java.lang.String ) ; org.apache.tomcat.util.descriptor.web.ErrorPage . setErrorCode ( this . int ) ; org.apache.tomcat.util.descriptor.web.ErrorPage . setExceptionType ( this . java.lang.String ) ; org.springframework.boot.web.embedded.tomcat.Context . addErrorPage ( org.apache.tomcat.util.descriptor.web.ErrorPage ) ; } else { void ( this . java.lang.Object , STRING , this . java.lang.String , java.lang.String .class ) ; void ( this . java.lang.Object , STRING , this . int , int .class ) ; void ( this . java.lang.Object , STRING , this . java.lang.String , java.lang.String .class ) ; void ( org.springframework.boot.web.embedded.tomcat.Context , STRING , this . java.lang.Object , this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String , java.lang.Class<> ) ; ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
