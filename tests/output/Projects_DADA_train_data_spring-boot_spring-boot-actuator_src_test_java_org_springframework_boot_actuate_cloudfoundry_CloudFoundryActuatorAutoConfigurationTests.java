<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , WebMvcAutoConfiguration .class , ManagementWebSecurityAutoConfiguration .class , JacksonAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class , EndpointAutoConfiguration .class , EndpointWebMvcAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class , RestTemplateAutoConfiguration .class , EndpointWebMvcManagementContextConfiguration .class , CloudFoundryActuatorAutoConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CloudFoundryEndpointHandlerMapping org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping = org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping ( ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping . getPrefix ( ) ) . isEqualTo ( STRING ) ; CorsConfiguration org.springframework.boot.actuate.cloudfoundry.CorsConfiguration = ( CorsConfiguration ) ReflectionTestUtils . getField ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping , STRING ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.CorsConfiguration . getAllowedOrigins ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.CorsConfiguration . getAllowedMethods ( ) ) . containsAll ( java.util.Arrays . java.util.List ( HttpMethod . GET . name ( ) , HttpMethod . POST . name ( ) ) ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.CorsConfiguration . getAllowedHeaders ( ) ) . containsAll ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CloudFoundryEndpointHandlerMapping org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping = org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping ( ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping , STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) ReflectionTestUtils . getField ( java.lang.Object , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CloudFoundryEndpointHandlerMapping org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping = org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping ( ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping , STRING ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( java.lang.Object , STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) ReflectionTestUtils . getField ( java.lang.Object , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . refresh ( ) ; CloudFoundryEndpointHandlerMapping org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping = org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping ( ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping , STRING ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( java.lang.Object , STRING ) ; RestTemplate org.springframework.boot.actuate.cloudfoundry.RestTemplate = ( RestTemplate ) ReflectionTestUtils . getField ( java.lang.Object , STRING ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.RestTemplate . getRequestFactory ( ) ) . isInstanceOf ( SkipSslVerificationHttpRequestFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . refresh ( ) ; CloudFoundryEndpointHandlerMapping org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping = this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . getBean ( STRING , CloudFoundryEndpointHandlerMapping .class ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping , STRING ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( java.lang.Object , STRING ) ; assertThat ( java.lang.Object ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . refresh ( ) ; IgnoredRequestCustomizer org.springframework.boot.actuate.cloudfoundry.IgnoredRequestCustomizer = ( IgnoredRequestCustomizer ) this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . getBean ( STRING ) ; IgnoredRequestConfigurer org.springframework.boot.actuate.cloudfoundry.IgnoredRequestConfigurer = mock ( IgnoredRequestConfigurer .class ) ; org.springframework.boot.actuate.cloudfoundry.IgnoredRequestCustomizer . customize ( org.springframework.boot.actuate.cloudfoundry.IgnoredRequestConfigurer ) ; ArgumentCaptor < RequestMatcher > org.springframework.boot.actuate.cloudfoundry.ArgumentCaptor<org.springframework.boot.actuate.cloudfoundry.RequestMatcher> = ArgumentCaptor . forClass ( RequestMatcher .class ) ; verify ( org.springframework.boot.actuate.cloudfoundry.IgnoredRequestConfigurer ) . requestMatchers ( org.springframework.boot.actuate.cloudfoundry.ArgumentCaptor<org.springframework.boot.actuate.cloudfoundry.RequestMatcher> . capture ( ) ) ; RequestMatcher org.springframework.boot.actuate.cloudfoundry.RequestMatcher = org.springframework.boot.actuate.cloudfoundry.ArgumentCaptor<org.springframework.boot.actuate.cloudfoundry.RequestMatcher> . getValue ( ) ; MockHttpServletRequest org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . setServletPath ( STRING ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.RequestMatcher . matches ( org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest ) ) . isTrue ( ) ; org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . setServletPath ( STRING ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.RequestMatcher . matches ( org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping org.springframework.boot.actuate.cloudfoundry.CloudFoundryEndpointHandlerMapping ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext , STRING , STRING , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . refresh ( ) ; return this . org.springframework.boot.actuate.cloudfoundry.AnnotationConfigWebApplicationContext . getBean ( STRING , CloudFoundryEndpointHandlerMapping .class ) ; }  <METHOD_END>
