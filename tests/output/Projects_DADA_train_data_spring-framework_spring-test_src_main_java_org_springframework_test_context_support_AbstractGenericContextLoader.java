<METHOD_START> @ java.lang.Override public final org.springframework.test.context.support.ConfigurableApplicationContext org.springframework.test.context.support.ConfigurableApplicationContext ( MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ) throws java.lang.Exception { if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.test.context.support.MergedContextConfiguration ) ) ; } void ( org.springframework.test.context.support.MergedContextConfiguration ) ; GenericApplicationContext org.springframework.test.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ApplicationContext org.springframework.test.context.support.ApplicationContext = org.springframework.test.context.support.MergedContextConfiguration . getParentApplicationContext ( ) ; if ( org.springframework.test.context.support.ApplicationContext != null ) { org.springframework.test.context.support.GenericApplicationContext . setParent ( org.springframework.test.context.support.ApplicationContext ) ; } void ( org.springframework.test.context.support.GenericApplicationContext ) ; void ( org.springframework.test.context.support.GenericApplicationContext , org.springframework.test.context.support.MergedContextConfiguration ) ; void ( org.springframework.test.context.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) ) ; void ( org.springframework.test.context.support.GenericApplicationContext , org.springframework.test.context.support.MergedContextConfiguration ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.test.context.support.GenericApplicationContext ) ; void ( org.springframework.test.context.support.GenericApplicationContext ) ; void ( org.springframework.test.context.support.GenericApplicationContext , org.springframework.test.context.support.MergedContextConfiguration ) ; org.springframework.test.context.support.GenericApplicationContext . refresh ( ) ; org.springframework.test.context.support.GenericApplicationContext . registerShutdownHook ( ) ; return org.springframework.test.context.support.GenericApplicationContext ; }  <METHOD_END>
<METHOD_START> protected void void ( MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.test.context.support.ConfigurableApplicationContext org.springframework.test.context.support.ConfigurableApplicationContext ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING , StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ) ; } GenericApplicationContext org.springframework.test.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; void ( org.springframework.test.context.support.GenericApplicationContext ) ; void ( org.springframework.test.context.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) ) ; org.springframework.test.context.support.BeanDefinitionReader ( org.springframework.test.context.support.GenericApplicationContext ) . loadBeanDefinitions ( java.lang.String[] ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.test.context.support.GenericApplicationContext ) ; void ( org.springframework.test.context.support.GenericApplicationContext ) ; org.springframework.test.context.support.GenericApplicationContext . refresh ( ) ; org.springframework.test.context.support.GenericApplicationContext . registerShutdownHook ( ) ; return org.springframework.test.context.support.GenericApplicationContext ; }  <METHOD_END>
<METHOD_START> protected void void ( GenericApplicationContext org.springframework.test.context.support.GenericApplicationContext ) {	}  <METHOD_END>
<METHOD_START> protected void void ( DefaultListableBeanFactory org.springframework.test.context.support.DefaultListableBeanFactory ) {	}  <METHOD_END>
<METHOD_START> protected void void ( GenericApplicationContext org.springframework.test.context.support.GenericApplicationContext , MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ) { org.springframework.test.context.support.BeanDefinitionReader ( org.springframework.test.context.support.GenericApplicationContext ) . loadBeanDefinitions ( org.springframework.test.context.support.MergedContextConfiguration . getLocations ( ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.test.context.support.BeanDefinitionReader org.springframework.test.context.support.BeanDefinitionReader ( GenericApplicationContext org.springframework.test.context.support.GenericApplicationContext );  <METHOD_END>
<METHOD_START> protected void void ( GenericApplicationContext org.springframework.test.context.support.GenericApplicationContext ) {	}  <METHOD_END>
