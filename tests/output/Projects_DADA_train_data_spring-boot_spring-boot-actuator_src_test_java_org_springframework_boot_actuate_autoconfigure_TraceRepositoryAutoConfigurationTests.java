<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( TraceRepositoryAutoConfiguration .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( InMemoryTraceRepository .class ) ) . isNotNull ( ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.TraceRepositoryAutoConfigurationTests.Config .class , TraceRepositoryAutoConfiguration .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( InMemoryTraceRepository .class ) ) . isEmpty ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( TraceRepository .class ) ) . hasSize ( NUMBER ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.TraceRepository org.springframework.boot.actuate.autoconfigure.TraceRepository ( ) { return mock ( TraceRepository .class ) ; }  <METHOD_END>
