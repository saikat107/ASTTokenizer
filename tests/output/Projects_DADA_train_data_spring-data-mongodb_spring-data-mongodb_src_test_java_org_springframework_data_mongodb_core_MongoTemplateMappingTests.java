<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.MongoTemplate . getCollectionName ( Person .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.mongodb.core.MongoTemplate ) ; void ( org.springframework.data.mongodb.core.MongoTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.mongodb.core.MongoTemplate ) ; void ( org.springframework.data.mongodb.core.MongoTemplate ) ; }  <METHOD_END>
<METHOD_START> private void void ( MongoTemplate org.springframework.data.mongodb.core.MongoTemplate ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ; Person org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.MongoTemplate . findById ( org.springframework.data.mongodb.core.Person . getId ( ) , Person .class ) ; assertThat ( org.springframework.data.mongodb.core.Person . getFirstName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MongoTemplate org.springframework.data.mongodb.core.MongoTemplate ) { org.springframework.data.mongodb.core.MongoTemplate . execute ( Person .class , new CollectionCallback < java.lang.Object > ( ) { public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( new Document ( ) ) . first ( ) ; assertThat ( ( java.lang.String ) org.springframework.data.mongodb.core.Document . get ( STRING ) , is ( STRING ) ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( new Document ( ) ) . first ( ) ; assertThat ( ( java.lang.String ) org.springframework.data.mongodb.core.Document . get ( STRING ) , is ( STRING ) ) ; return null ; }  <METHOD_END>
