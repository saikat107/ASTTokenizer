<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.state.StateListener<S,E>> < StateListener < S , E > > java.util.Iterator<org.springframework.statemachine.state.StateListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.state.StateListener<S,E>> . hasNext ( ) ;) { java.util.Iterator<org.springframework.statemachine.state.StateListener<S,E>> . next ( ) . onEntry ( org.springframework.statemachine.state.StateContext<S,E> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { for ( java.util.Iterator<org.springframework.statemachine.state.StateListener<S,E>> < StateListener < S , E > > java.util.Iterator<org.springframework.statemachine.state.StateListener<S,E>> = getListeners ( ) . reverse ( ) ; java.util.Iterator<org.springframework.statemachine.state.StateListener<S,E>> . hasNext ( ) ;) { java.util.Iterator<org.springframework.statemachine.state.StateListener<S,E>> . next ( ) . onExit ( org.springframework.statemachine.state.StateContext<S,E> ) ; } }  <METHOD_END>
