<METHOD_START> @ Before public void void ( ) { org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( java.lang.String , java.lang.String ) . setHeader ( java.lang.String , java.lang.Integer ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.message.Message<> , hasHeader ( java.lang.String , java.lang.String ) ) ; assertThat ( org.springframework.integration.message.Message<> , hasHeader ( java.lang.String , java.lang.Integer ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.message.Message<> , not ( hasHeader ( STRING , java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.message.Message<> , hasHeader ( java.lang.String , is ( instanceOf ( java.lang.String .class ) ) ) ) ; assertThat ( org.springframework.integration.message.Message<> , hasHeader ( java.lang.String , notNullValue ( ) ) ) ; assertThat ( org.springframework.integration.message.Message<> , hasHeader ( java.lang.String , is ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.message.Message<> , not ( hasHeader ( java.lang.String , is ( instanceOf ( java.lang.Integer .class ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.message.Message<> , hasHeaderKey ( java.lang.String ) ) ; assertThat ( org.springframework.integration.message.Message<> , hasHeaderKey ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.message.Message<> , not ( hasHeaderKey ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.message.Message<> . getHeaders ( ) ; assertThat ( org.springframework.integration.message.Message<> , hasAllHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , is ( java.lang.Integer ) ) ; assertThat ( org.springframework.integration.message.Message<> , hasAllHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , not ( nullValue ( ) ) ) ; assertThat ( org.springframework.integration.message.Message<> , not ( hasAllHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { assertThat ( org.springframework.integration.message.Message<> , hasHeader ( STRING , STRING ) ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { assertTrue ( java.lang.AssertionError . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; assertThat ( org.springframework.integration.message.Message<> , hasAllHeaders ( java.util.Map<java.lang.String,java.lang.String> ) ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { assertTrue ( java.lang.AssertionError . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.message.Message<> , hasMessageId ( org.springframework.integration.message.Message<> . getHeaders ( ) . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.UUID java.util.UUID = org.springframework.integration.message.Message<> . getHeaders ( ) . getId ( ) ; org.springframework.integration.message.Message<?> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.util.UUID ) . build ( ) ; assertThat ( org.springframework.integration.message.Message<> , hasCorrelationId ( java.util.UUID ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = NUMBER ; org.springframework.integration.message.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<> ) . setSequenceNumber ( int ) . build ( ) ; assertThat ( org.springframework.integration.message.Message<> , hasSequenceNumber ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = NUMBER ; org.springframework.integration.message.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<> ) . setSequenceSize ( int ) . build ( ) ; assertThat ( org.springframework.integration.message.Message<> , hasSequenceSize ( int ) ) ; assertThat ( org.springframework.integration.message.Message<> , hasSequenceSize ( is ( int ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.message.Message<> , hasTimestamp ( new java.util.Date ( org.springframework.integration.message.Message<> . getHeaders ( ) . getTimestamp ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Matcher < java.lang.Long > org.springframework.integration.message.Matcher<java.lang.Long> = any ( java.lang.Long .class ) ; assertThat ( org.springframework.integration.message.Message<> , not ( hasExpirationDate ( org.springframework.integration.message.Matcher<java.lang.Long> ) ) ) ; java.util.Date java.util.Date = new java.util.Date ( java.lang.System . long ( ) + NUMBER ) ; org.springframework.integration.message.Message<?> = MessageBuilder . fromMessage ( org.springframework.integration.message.Message<> ) . setExpirationDate ( java.util.Date ) . build ( ) ; assertThat ( org.springframework.integration.message.Message<> , hasExpirationDate ( java.util.Date ) ) ; assertThat ( org.springframework.integration.message.Message<> , hasExpirationDate ( not ( is ( ( java.lang.System . long ( ) ) ) ) ) ) ; }  <METHOD_END>
