<METHOD_START> public void ( HttpStatus org.springframework.mock.http.client.reactive.test.HttpStatus ) { Assert . notNull ( org.springframework.mock.http.client.reactive.test.HttpStatus , STRING ) ; this . org.springframework.mock.http.client.reactive.test.HttpStatus = org.springframework.mock.http.client.reactive.test.HttpStatus ; }  <METHOD_END>
<METHOD_START> public org.springframework.mock.http.client.reactive.test.HttpStatus org.springframework.mock.http.client.reactive.test.HttpStatus ( ) { return this . org.springframework.mock.http.client.reactive.test.HttpStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.http.client.reactive.test.HttpHeaders org.springframework.mock.http.client.reactive.test.HttpHeaders ( ) { return this . org.springframework.mock.http.client.reactive.test.HttpHeaders ; }  <METHOD_END>
<METHOD_START> public org.springframework.mock.http.client.reactive.test.MultiValueMap<java.lang.String,org.springframework.mock.http.client.reactive.test.ResponseCookie> < java.lang.String , ResponseCookie > org.springframework.mock.http.client.reactive.test.MultiValueMap<java.lang.String,org.springframework.mock.http.client.reactive.test.ResponseCookie> ( ) { return this . org.springframework.mock.http.client.reactive.test.MultiValueMap<java.lang.String,org.springframework.mock.http.client.reactive.test.ResponseCookie> ; }  <METHOD_END>
<METHOD_START> public void void ( Publisher < DataBuffer > org.springframework.mock.http.client.reactive.test.Publisher<org.springframework.mock.http.client.reactive.test.DataBuffer> ) { this . org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> = Flux . from ( org.springframework.mock.http.client.reactive.test.Publisher<org.springframework.mock.http.client.reactive.test.DataBuffer> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.nio.charset.Charset java.nio.charset.Charset ) { DataBuffer org.springframework.mock.http.client.reactive.test.DataBuffer = org.springframework.mock.http.client.reactive.test.DataBuffer ( java.lang.String , java.nio.charset.Charset ) ; this . org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> = Flux . just ( org.springframework.mock.http.client.reactive.test.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.mock.http.client.reactive.test.DataBuffer org.springframework.mock.http.client.reactive.test.DataBuffer ( java.lang.String java.lang.String , java.nio.charset.Charset java.nio.charset.Charset ) { byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.Charset ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; return this . org.springframework.mock.http.client.reactive.test.DataBufferFactory . wrap ( java.nio.ByteBuffer ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> < DataBuffer > org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> ( ) { return this . org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> ; }  <METHOD_END>
<METHOD_START> public org.springframework.mock.http.client.reactive.test.Mono<java.lang.String> < java.lang.String > org.springframework.mock.http.client.reactive.test.Mono<java.lang.String> ( ) { java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset ( ) ; return Flux . from ( org.springframework.mock.http.client.reactive.test.Flux<org.springframework.mock.http.client.reactive.test.DataBuffer> ( ) ) . reduce ( org.springframework.mock.http.client.reactive.test.DataBufferFactory . allocateBuffer ( ) , ( previous , current ) -> { previous . write ( current ) ; DataBufferUtils . release ( current ) ; return previous ; } ) . map ( buffer -> dumpString ( buffer , charset ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( DataBuffer org.springframework.mock.http.client.reactive.test.DataBuffer , java.nio.charset.Charset java.nio.charset.Charset ) { Assert . notNull ( java.nio.charset.Charset , STRING ) ; byte [] byte[] = new byte [ org.springframework.mock.http.client.reactive.test.DataBuffer . readableByteCount ( ) ] ; org.springframework.mock.http.client.reactive.test.DataBuffer . read ( byte[] ) ; return new java.lang.String ( byte[] , java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> private java.nio.charset.Charset java.nio.charset.Charset ( ) { java.nio.charset.Charset java.nio.charset.Charset = null ; MediaType org.springframework.mock.http.client.reactive.test.MediaType = org.springframework.mock.http.client.reactive.test.HttpHeaders ( ) . getContentType ( ) ; if ( org.springframework.mock.http.client.reactive.test.MediaType != null ) { java.nio.charset.Charset = org.springframework.mock.http.client.reactive.test.MediaType . getCharset ( ) ; } return ( java.nio.charset.Charset != null ? java.nio.charset.Charset : java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
