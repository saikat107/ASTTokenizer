<METHOD_START> @ java.lang.Override protected org.springframework.jdbc.support.DataAccessException org.springframework.jdbc.support.DataAccessException ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.sql.SQLException java.sql.SQLException ) { java.lang.String java.lang.String = java.lang.String ( java.sql.SQLException ) ; if ( java.lang.String != null && java.lang.String . int ( ) >= NUMBER ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , NUMBER ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return new BadSqlGrammarException ( java.lang.String , java.lang.String , java.sql.SQLException ) ; } else if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return new DataIntegrityViolationException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } else if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return new DataAccessResourceFailureException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } else if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return new TransientDataAccessResourceException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } else if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return new ConcurrencyFailureException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } } if ( java.sql.SQLException . java.lang.Class<? extends java.sql.SQLException> ( ) . java.lang.String ( ) . boolean ( STRING ) ) { return new QueryTimeoutException ( buildMessage ( java.lang.String , java.lang.String , java.sql.SQLException ) , java.sql.SQLException ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.sql.SQLException java.sql.SQLException ) { java.lang.String java.lang.String = java.sql.SQLException . java.lang.String ( ) ; if ( java.lang.String == null ) { java.sql.SQLException java.sql.SQLException = java.sql.SQLException . java.sql.SQLException ( ) ; if ( java.sql.SQLException != null ) { java.lang.String = java.sql.SQLException . java.lang.String ( ) ; } } return java.lang.String ; }  <METHOD_END>
