<METHOD_START> public void ( PartTree org.springframework.data.gemfire.repository.query.PartTree , GemfirePersistentEntity < ? > org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<?> ) { super( org.springframework.data.gemfire.repository.query.PartTree ); this . org.springframework.data.gemfire.repository.query.QueryBuilder = new QueryBuilder ( org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<> , org.springframework.data.gemfire.repository.query.PartTree ) ; this . java.util.Iterator<java.lang.Integer> = new org.springframework.data.gemfire.repository.query.GemfireQueryCreator.IndexProvider ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.repository.query.QueryString org.springframework.data.gemfire.repository.query.QueryString ( Sort org.springframework.data.gemfire.repository.query.Sort ) { this . java.util.Iterator<java.lang.Integer> = new org.springframework.data.gemfire.repository.query.GemfireQueryCreator.IndexProvider ( ) ; return super. createQuery ( org.springframework.data.gemfire.repository.query.Sort ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.repository.query.Predicates org.springframework.data.gemfire.repository.query.Predicates ( Part org.springframework.data.gemfire.repository.query.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { return Predicates . create ( org.springframework.data.gemfire.repository.query.Part , this . java.util.Iterator<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.repository.query.Predicates org.springframework.data.gemfire.repository.query.Predicates ( Part org.springframework.data.gemfire.repository.query.Part , Predicates org.springframework.data.gemfire.repository.query.Predicates , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { return org.springframework.data.gemfire.repository.query.Predicates . and ( Predicates . create ( org.springframework.data.gemfire.repository.query.Part , this . java.util.Iterator<java.lang.Integer> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.repository.query.Predicates org.springframework.data.gemfire.repository.query.Predicates ( Predicates org.springframework.data.gemfire.repository.query.Predicates , Predicates org.springframework.data.gemfire.repository.query.Predicates ) { return org.springframework.data.gemfire.repository.query.Predicates . or ( org.springframework.data.gemfire.repository.query.Predicates ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.repository.query.QueryString org.springframework.data.gemfire.repository.query.QueryString ( Predicates org.springframework.data.gemfire.repository.query.Predicates , Sort org.springframework.data.gemfire.repository.query.Sort ) { QueryString org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.QueryBuilder . create ( org.springframework.data.gemfire.repository.query.Predicates ) . orderBy ( org.springframework.data.gemfire.repository.query.Sort ) ; if ( org.springframework.data.gemfire.repository.query.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.repository.query.Log . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.repository.query.QueryString . toString ( ) ) ) ; } return org.springframework.data.gemfire.repository.query.QueryString ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public boolean boolean ( ) { return ( int <= java.lang.Integer . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( ) { return int ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
