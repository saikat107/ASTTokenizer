<METHOD_START> @ java.lang.Override public boolean boolean ( SockJsSession org.springframework.web.socket.sockjs.transport.handler.SockJsSession ) { return ( org.springframework.web.socket.sockjs.transport.handler.SockJsSession instanceof AbstractHttpSockJsSession ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , SockJsSession org.springframework.web.socket.sockjs.transport.handler.SockJsSession ) throws org.springframework.web.socket.sockjs.transport.handler.SockJsException { Assert . notNull ( org.springframework.web.socket.sockjs.transport.handler.SockJsSession , STRING ) ; AbstractHttpSockJsSession org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSockJsSession = ( AbstractHttpSockJsSession ) org.springframework.web.socket.sockjs.transport.handler.SockJsSession ; void ( org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSockJsSession ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , AbstractHttpSockJsSession org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSockJsSession ) throws org.springframework.web.socket.sockjs.transport.handler.SockJsException { java.lang.String [] java.lang.String[] ; try { java.lang.String[] = java.lang.String[] ( org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest ) ; } catch ( java.io.IOException java.io.IOException ) { logger . error ( STRING , java.io.IOException ) ; if ( java.io.IOException . java.lang.Class<? extends java.io.IOException> ( ) . java.lang.String ( ) . boolean ( STRING ) ) { void ( org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , STRING , org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSockJsSession . getId ( ) ) ; } else { void ( org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , STRING , org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSockJsSession . getId ( ) ) ; } return; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING , java.lang.Throwable ) ; void ( org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , STRING , org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSockJsSession . getId ( ) ) ; return; } if ( java.lang.String[] == null ) { void ( org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , STRING , org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSockJsSession . getId ( ) ) ; return; } if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse . setStatusCode ( org.springframework.web.socket.sockjs.transport.handler.HttpStatus ( ) ) ; org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSockJsSession . delegateMessages ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( ServerHttpResponse org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , java.lang.String java.lang.String , java.lang.String java.lang.String ) { try { org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse . setStatusCode ( HttpStatus . INTERNAL_SERVER_ERROR ) ; org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse . getBody ( ) . write ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new SockJsException ( STRING + java.lang.String , java.lang.String , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String [] java.lang.String[] ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.socket.sockjs.transport.handler.HttpStatus org.springframework.web.socket.sockjs.transport.handler.HttpStatus ( )  <METHOD_END>
