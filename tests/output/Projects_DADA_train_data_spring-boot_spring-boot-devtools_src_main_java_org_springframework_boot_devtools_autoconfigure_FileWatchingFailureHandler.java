<METHOD_START> void ( FileSystemWatcherFactory org.springframework.boot.devtools.autoconfigure.FileSystemWatcherFactory ) { this . org.springframework.boot.devtools.autoconfigure.FileSystemWatcherFactory = org.springframework.boot.devtools.autoconfigure.FileSystemWatcherFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.devtools.autoconfigure.Outcome org.springframework.boot.devtools.autoconfigure.Outcome ( java.lang.Throwable java.lang.Throwable ) { java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; FileSystemWatcher org.springframework.boot.devtools.autoconfigure.FileSystemWatcher = this . org.springframework.boot.devtools.autoconfigure.FileSystemWatcherFactory . getFileSystemWatcher ( ) ; org.springframework.boot.devtools.autoconfigure.FileSystemWatcher . addSourceFolders ( new ClassPathFolders ( Restarter . getInstance ( ) . getInitialUrls ( ) ) ) ; org.springframework.boot.devtools.autoconfigure.FileSystemWatcher . addListener ( new org.springframework.boot.devtools.autoconfigure.FileWatchingFailureHandler.Listener ( java.util.concurrent.CountDownLatch ) ) ; org.springframework.boot.devtools.autoconfigure.FileSystemWatcher . start ( ) ; try { java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } return Outcome . RETRY ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Set<org.springframework.boot.devtools.autoconfigure.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.autoconfigure.ChangedFiles> ) { this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
