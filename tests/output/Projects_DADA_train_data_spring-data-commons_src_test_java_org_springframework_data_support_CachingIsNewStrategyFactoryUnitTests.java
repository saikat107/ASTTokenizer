<METHOD_START> @ Before public void void ( ) { org.springframework.data.support.CachingIsNewStrategyFactory = new CachingIsNewStrategyFactory ( org.springframework.data.support.IsNewStrategyFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.support.IsNewStrategyFactory . getIsNewStrategy ( java.lang.Object .class ) ) . thenReturn ( org.springframework.data.support.IsNewStrategy ) ; IsNewStrategy org.springframework.data.support.IsNewStrategy = org.springframework.data.support.CachingIsNewStrategyFactory . getIsNewStrategy ( java.lang.Object .class ) ; assertThat ( org.springframework.data.support.IsNewStrategy ) . isEqualTo ( org.springframework.data.support.IsNewStrategy ) ; verify ( org.springframework.data.support.IsNewStrategyFactory , times ( NUMBER ) ) . getIsNewStrategy ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.support.IsNewStrategyFactory . getIsNewStrategy ( Mockito . any ( java.lang.Class .class ) ) ) . thenReturn ( org.springframework.data.support.IsNewStrategy ) ; IsNewStrategy org.springframework.data.support.IsNewStrategy = org.springframework.data.support.CachingIsNewStrategyFactory . getIsNewStrategy ( java.lang.Object .class ) ; assertThat ( org.springframework.data.support.IsNewStrategy ) . isEqualTo ( org.springframework.data.support.IsNewStrategy ) ; verify ( org.springframework.data.support.IsNewStrategyFactory , times ( NUMBER ) ) . getIsNewStrategy ( java.lang.Object .class ) ; verify ( org.springframework.data.support.IsNewStrategyFactory , times ( NUMBER ) ) . getIsNewStrategy ( java.lang.String .class ) ; org.springframework.data.support.IsNewStrategy = org.springframework.data.support.CachingIsNewStrategyFactory . getIsNewStrategy ( java.lang.Object .class ) ; assertThat ( org.springframework.data.support.IsNewStrategy ) . isEqualTo ( org.springframework.data.support.IsNewStrategy ) ; verify ( org.springframework.data.support.IsNewStrategyFactory , times ( NUMBER ) ) . getIsNewStrategy ( java.lang.Object .class ) ; verify ( org.springframework.data.support.IsNewStrategyFactory , times ( NUMBER ) ) . getIsNewStrategy ( java.lang.String .class ) ; org.springframework.data.support.IsNewStrategy = org.springframework.data.support.CachingIsNewStrategyFactory . getIsNewStrategy ( java.lang.String .class ) ; assertThat ( org.springframework.data.support.IsNewStrategy ) . isEqualTo ( org.springframework.data.support.IsNewStrategy ) ; verify ( org.springframework.data.support.IsNewStrategyFactory , times ( NUMBER ) ) . getIsNewStrategy ( java.lang.Object .class ) ; verify ( org.springframework.data.support.IsNewStrategyFactory , times ( NUMBER ) ) . getIsNewStrategy ( java.lang.String .class ) ; }  <METHOD_END>
