<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , java.lang.String java.lang.String ) { super( javax.sql.DataSource , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , java.lang.String java.lang.String , int [] int[] ) { super( javax.sql.DataSource , java.lang.String , int[] ); }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , java.lang.String java.lang.String , int [] int[] , int int ) { super( javax.sql.DataSource , java.lang.String , int[] ); void ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object ... java.lang.Object[] ) throws org.springframework.jdbc.object.DataAccessException { validateParameters ( java.lang.Object[] ) ; this . java.util.LinkedList<java.lang.Object[]> . boolean ( java.lang.Object[] . java.lang.Object ( ) ) ; if ( this . java.util.LinkedList<java.lang.Object[]> . int ( ) == this . int ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . int ) ; } int[] ( ) ; } return - NUMBER ; }  <METHOD_END>
<METHOD_START> public int [] int[] ( ) { if ( this . java.util.LinkedList<java.lang.Object[]> . boolean ( ) ) { return new int [ NUMBER ] ; } int [] int[] = getJdbcTemplate ( ) . batchUpdate ( getSql ( ) , new BatchPreparedStatementSetter ( ) { @ java.lang.Override public int int ( ) { return java.util.LinkedList<java.lang.Object[]> . int ( ) ; } @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int ) throws java.sql.SQLException { java.lang.Object [] java.lang.Object[] = java.util.LinkedList<java.lang.Object[]> . java.lang.Object[] ( ) ; newPreparedStatementSetter ( java.lang.Object[] ) . setValues ( java.sql.PreparedStatement ) ; } } ) ; for ( int int : int[] ) { checkRowsAffected ( int ) ; if ( this . boolean ) { this . java.util.List<java.lang.Integer> . boolean ( int ) ; } } return int[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.util.LinkedList<java.lang.Object[]> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int ) throws java.sql.SQLException { java.lang.Object [] java.lang.Object[] = java.util.LinkedList<java.lang.Object[]> . java.lang.Object[] ( ) ; newPreparedStatementSetter ( java.lang.Object[] ) . setValues ( java.sql.PreparedStatement ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.LinkedList<java.lang.Object[]> . int ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.List<java.lang.Integer> . int ( ) ; }  <METHOD_END>
<METHOD_START> public int [] int[] ( ) { int [] int[] = new int [ this . java.util.List<java.lang.Integer> . int ( ) ] ; int int = NUMBER ; for ( java.util.Iterator<java.lang.Integer> < java.lang.Integer > java.util.Iterator<java.lang.Integer> = this . java.util.List<java.lang.Integer> . java.util.Iterator<java.lang.Integer> ( ) ; java.util.Iterator<java.lang.Integer> . boolean ( ) ; int ++ ) { int[] [ int ] = java.util.Iterator<java.lang.Integer> . java.lang.Integer ( ) ; } return int[] ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.LinkedList<java.lang.Object[]> . void ( ) ; this . java.util.List<java.lang.Integer> . void ( ) ; }  <METHOD_END>
