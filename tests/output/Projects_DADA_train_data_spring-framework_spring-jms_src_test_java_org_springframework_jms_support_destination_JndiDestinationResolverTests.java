<METHOD_START> @ Test public void void ( ) java.lang.Exception { Session org.springframework.jms.support.destination.Session = mock ( Session .class ) ; JndiDestinationResolver org.springframework.jms.support.destination.JndiDestinationResolver = new org.springframework.jms.support.destination.JndiDestinationResolverTests.OneTimeLookupJndiDestinationResolver ( ) ; Destination org.springframework.jms.support.destination.Destination = org.springframework.jms.support.destination.JndiDestinationResolver . resolveDestinationName ( org.springframework.jms.support.destination.Session , java.lang.String , true ) ; assertNotNull ( org.springframework.jms.support.destination.Destination ) ; assertSame ( org.springframework.jms.support.destination.Destination , org.springframework.jms.support.destination.Destination ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Session org.springframework.jms.support.destination.Session = mock ( Session .class ) ; org.springframework.jms.support.destination.JndiDestinationResolverTests.CountingCannedJndiDestinationResolver org.springframework.jms.support.destination.JndiDestinationResolverTests.CountingCannedJndiDestinationResolver = new org.springframework.jms.support.destination.JndiDestinationResolverTests.CountingCannedJndiDestinationResolver ( ) ; org.springframework.jms.support.destination.JndiDestinationResolverTests.CountingCannedJndiDestinationResolver . setCache ( false ) ; Destination org.springframework.jms.support.destination.Destination = org.springframework.jms.support.destination.JndiDestinationResolverTests.CountingCannedJndiDestinationResolver . resolveDestinationName ( org.springframework.jms.support.destination.Session , java.lang.String , true ) ; assertNotNull ( org.springframework.jms.support.destination.Destination ) ; assertSame ( org.springframework.jms.support.destination.Destination , org.springframework.jms.support.destination.Destination ) ; assertEquals ( NUMBER , org.springframework.jms.support.destination.JndiDestinationResolverTests.CountingCannedJndiDestinationResolver . int ( ) ) ; org.springframework.jms.support.destination.Destination = org.springframework.jms.support.destination.JndiDestinationResolverTests.CountingCannedJndiDestinationResolver . resolveDestinationName ( org.springframework.jms.support.destination.Session , java.lang.String , true ) ; assertNotNull ( org.springframework.jms.support.destination.Destination ) ; assertSame ( org.springframework.jms.support.destination.Destination , org.springframework.jms.support.destination.Destination ) ; assertEquals ( NUMBER , org.springframework.jms.support.destination.JndiDestinationResolverTests.CountingCannedJndiDestinationResolver . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Session org.springframework.jms.support.destination.Session = mock ( Session .class ) ; DestinationResolver org.springframework.jms.support.destination.DestinationResolver = mock ( DestinationResolver .class ) ; given ( org.springframework.jms.support.destination.DestinationResolver . resolveDestinationName ( org.springframework.jms.support.destination.Session , java.lang.String , true ) ) . willReturn ( org.springframework.jms.support.destination.Destination ) ; JndiDestinationResolver org.springframework.jms.support.destination.JndiDestinationResolver = new JndiDestinationResolver ( ) { @ java.lang.Override protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws javax.naming.NamingException { throw new javax.naming.NamingException ( ) ; } } ; org.springframework.jms.support.destination.JndiDestinationResolver . setFallbackToDynamicDestination ( true ) ; org.springframework.jms.support.destination.JndiDestinationResolver . setDynamicDestinationResolver ( org.springframework.jms.support.destination.DestinationResolver ) ; Destination org.springframework.jms.support.destination.Destination = org.springframework.jms.support.destination.JndiDestinationResolver . resolveDestinationName ( org.springframework.jms.support.destination.Session , java.lang.String , true ) ; assertNotNull ( org.springframework.jms.support.destination.Destination ) ; assertSame ( org.springframework.jms.support.destination.Destination , org.springframework.jms.support.destination.Destination ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws javax.naming.NamingException { throw new javax.naming.NamingException ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Session org.springframework.jms.support.destination.Session = mock ( Session .class ) ; DestinationResolver org.springframework.jms.support.destination.DestinationResolver = mock ( DestinationResolver .class ) ; final JndiDestinationResolver org.springframework.jms.support.destination.JndiDestinationResolver = new JndiDestinationResolver ( ) { @ java.lang.Override protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws javax.naming.NamingException { throw new javax.naming.NamingException ( ) ; } } ; org.springframework.jms.support.destination.JndiDestinationResolver . setDynamicDestinationResolver ( org.springframework.jms.support.destination.DestinationResolver ) ; try { org.springframework.jms.support.destination.JndiDestinationResolver . resolveDestinationName ( org.springframework.jms.support.destination.Session , java.lang.String , true ) ; fail ( STRING ) ; } catch ( DestinationResolutionException org.springframework.jms.support.destination.DestinationResolutionException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws javax.naming.NamingException { throw new javax.naming.NamingException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws javax.naming.NamingException { if ( boolean ) { fail ( STRING ) ; } assertEquals ( java.lang.String , java.lang.String ) ; boolean = true ; return java.lang.Class<T> . T ( org.springframework.jms.support.destination.Destination ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws javax.naming.NamingException { ++ this . int ; return java.lang.Class<T> . T ( org.springframework.jms.support.destination.Destination ) ; }  <METHOD_END>
