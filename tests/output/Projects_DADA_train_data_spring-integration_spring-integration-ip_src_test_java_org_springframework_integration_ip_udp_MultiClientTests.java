<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ Ignore public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = java.lang.String ( NUMBER ) ; final UnicastReceivingChannelAdapter org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter = new UnicastReceivingChannelAdapter ( NUMBER ) ; int int = NUMBER ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setPoolSize ( int ) ; QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( int * NUMBER ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.udp.QueueChannel ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . start ( ) ; final QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( NUMBER ) ; SocketTestUtils . waitListening ( org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { UnicastSendingMessageHandler org.springframework.integration.ip.udp.UnicastSendingMessageHandler = new UnicastSendingMessageHandler ( STRING , org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . getPort ( ) ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . start ( ) ; while ( true ) { Message < ? > org.springframework.integration.ip.udp.Message<?> = org.springframework.integration.ip.udp.QueueChannel . receive ( ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . handleMessage ( org.springframework.integration.ip.udp.Message<> ) ; if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { break; } } org.springframework.integration.ip.udp.UnicastSendingMessageHandler . stop ( ) ; } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; } for ( int int = NUMBER ; int < int * NUMBER ; int ++ ) { org.springframework.integration.ip.udp.QueueChannel . send ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; } for ( int int = NUMBER ; int < int * NUMBER ; int ++ ) { Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.udp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.udp.Message<byte[]> ) ; Assert . assertEquals ( java.lang.String , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; } org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . stop ( ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ Ignore public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = java.lang.String ( NUMBER ) ; final UnicastReceivingChannelAdapter org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter = new UnicastReceivingChannelAdapter ( NUMBER , false ) ; int int = NUMBER ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setPoolSize ( int ) ; QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( int * NUMBER ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.udp.QueueChannel ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . start ( ) ; final QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( NUMBER ) ; SocketTestUtils . waitListening ( org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { UnicastSendingMessageHandler org.springframework.integration.ip.udp.UnicastSendingMessageHandler = new UnicastSendingMessageHandler ( STRING , org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . getPort ( ) , false , true , STRING , NUMBER , NUMBER ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . start ( ) ; while ( true ) { Message < ? > org.springframework.integration.ip.udp.Message<?> = org.springframework.integration.ip.udp.QueueChannel . receive ( ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . handleMessage ( org.springframework.integration.ip.udp.Message<> ) ; if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { break; } } org.springframework.integration.ip.udp.UnicastSendingMessageHandler . stop ( ) ; } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; } for ( int int = NUMBER ; int < int * NUMBER ; int ++ ) { org.springframework.integration.ip.udp.QueueChannel . send ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; } for ( int int = NUMBER ; int < int * NUMBER ; int ++ ) { Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.udp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.udp.Message<byte[]> ) ; Assert . assertEquals ( java.lang.String , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; } org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . stop ( ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ Ignore public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = java.lang.String ( NUMBER ) ; final UnicastReceivingChannelAdapter org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter = new UnicastReceivingChannelAdapter ( NUMBER , true ) ; int int = NUMBER ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setPoolSize ( int ) ; QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( int * NUMBER ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . setOutputChannel ( org.springframework.integration.ip.udp.QueueChannel ) ; org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . start ( ) ; final QueueChannel org.springframework.integration.ip.udp.QueueChannel = new QueueChannel ( NUMBER ) ; SocketTestUtils . waitListening ( org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { UnicastSendingMessageHandler org.springframework.integration.ip.udp.UnicastSendingMessageHandler = new UnicastSendingMessageHandler ( STRING , org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . getPort ( ) , true , true , STRING , NUMBER , NUMBER ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . start ( ) ; while ( true ) { Message < ? > org.springframework.integration.ip.udp.Message<?> = org.springframework.integration.ip.udp.QueueChannel . receive ( ) ; org.springframework.integration.ip.udp.UnicastSendingMessageHandler . handleMessage ( org.springframework.integration.ip.udp.Message<> ) ; if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { break; } } org.springframework.integration.ip.udp.UnicastSendingMessageHandler . stop ( ) ; } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; } for ( int int = NUMBER ; int < int * NUMBER ; int ++ ) { org.springframework.integration.ip.udp.QueueChannel . send ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; } for ( int int = NUMBER ; int < int * NUMBER ; int ++ ) { Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.udp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.udp.Message<byte[]> ) ; Assert . assertEquals ( java.lang.String , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; } org.springframework.integration.ip.udp.UnicastReceivingChannelAdapter . stop ( ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( int int ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.StringBuilder . java.lang.StringBuilder ( 'x' ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
