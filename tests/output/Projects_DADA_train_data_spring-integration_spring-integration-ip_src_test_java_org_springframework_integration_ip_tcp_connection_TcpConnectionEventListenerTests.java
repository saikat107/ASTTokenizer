<METHOD_START> @ Test public void void ( ) { ApplicationEventListeningMessageProducer org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; QueueChannel org.springframework.integration.ip.tcp.connection.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.ip.tcp.connection.QueueChannel ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . setEventTypes ( TcpConnectionEvent .class ) ; BeanFactory org.springframework.integration.ip.tcp.connection.BeanFactory = mock ( BeanFactory .class ) ; given ( org.springframework.integration.ip.tcp.connection.BeanFactory . getBean ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME , ApplicationEventMulticaster .class ) ) . willReturn ( mock ( ApplicationEventMulticaster .class ) ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . setBeanFactory ( org.springframework.integration.ip.tcp.connection.BeanFactory ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . start ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = Mockito . mock ( TcpConnectionSupport .class ) ; assertTrue ( org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( TcpConnectionOpenEvent .class ) ) ) ; TcpConnectionEvent org.springframework.integration.ip.tcp.connection.TcpConnectionEvent = new TcpConnectionOpenEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , STRING ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . onApplicationEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionEvent ) ; assertTrue ( org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent .class ) ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent = new org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , STRING ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . onApplicationEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent ) ; assertTrue ( org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent .class ) ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent = new org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , STRING ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . onApplicationEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; assertSame ( org.springframework.integration.ip.tcp.connection.TcpConnectionEvent , org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ; org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; assertSame ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent , org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ; org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; assertSame ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent , org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ; org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationEventListeningMessageProducer org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; QueueChannel org.springframework.integration.ip.tcp.connection.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.ip.tcp.connection.QueueChannel ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . setEventTypes ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent .class , org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent .class ) ; BeanFactory org.springframework.integration.ip.tcp.connection.BeanFactory = mock ( BeanFactory .class ) ; given ( org.springframework.integration.ip.tcp.connection.BeanFactory . getBean ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME , ApplicationEventMulticaster .class ) ) . willReturn ( mock ( ApplicationEventMulticaster .class ) ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . setBeanFactory ( org.springframework.integration.ip.tcp.connection.BeanFactory ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . start ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = Mockito . mock ( TcpConnectionSupport .class ) ; assertFalse ( org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( TcpConnectionOpenEvent .class ) ) ) ; assertTrue ( org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent .class ) ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent = new org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , STRING ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . onApplicationEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent ) ; assertTrue ( org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent .class ) ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent = new org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , STRING ) ; org.springframework.integration.ip.tcp.connection.ApplicationEventListeningMessageProducer . onApplicationEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; assertSame ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.FooEvent , org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ; org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; assertSame ( org.springframework.integration.ip.tcp.connection.TcpConnectionEventListenerTests.BarEvent , org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ; org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; }  <METHOD_END>
<METHOD_START> void ( TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , java.lang.String java.lang.String ) { super( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , java.lang.String ); }  <METHOD_END>
<METHOD_START> void ( TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , java.lang.String java.lang.String ) { super( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , java.lang.String ); }  <METHOD_END>
