<METHOD_START> @ Parameters ( name = STRING ) static public java.lang.Iterable<java.lang.Object[]> < java.lang.Object [] > java.lang.Iterable<java.lang.Object[]> ( ) { return java.util.Arrays . java.util.List<java.lang.Object[]> ( new java.lang.Object [] [] { { HttpMethod . GET } , { HttpMethod . HEAD } } ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.net.URISyntaxException { this . java.time.Instant = java.time.Instant . java.time.Instant ( ) . java.time.Instant ( java.time.temporal.ChronoUnit . java.time.temporal.ChronoUnit ) ; this . java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; this . java.text.SimpleDateFormat . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifModifiedSince ( this . java.time.Instant . long ( ) ) . toExchange ( ) ; org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . setStatusCode ( HttpStatus . NOT_MODIFIED ) ; assertFalse ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( this . java.time.Instant ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( STRING ) . toExchange ( ) ; assertFalse ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String ) ) ; assertNull ( org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifModifiedSince ( java.time.Instant . long ( ) ) . toExchange ( ) ; org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . add ( STRING , java.lang.String ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.time.Instant ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . get ( STRING ) . size ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifModifiedSince ( java.time.Instant . long ( ) ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.time.Instant ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( java.time.Instant . long ( ) , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( NUMBER ) ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifModifiedSince ( java.time.Instant . long ( ) ) . toExchange ( ) ; assertFalse ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.time.Instant ) ) ; assertNull ( org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( java.time.Instant . long ( ) , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . toExchange ( ) ; assertFalse ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String ) ) ; assertNull ( org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . toExchange ( ) ; assertFalse ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String ) ) ; assertNull ( org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( STRING ) . toExchange ( ) ; assertFalse ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String ) ) ; assertNull ( org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; long long = java.time.Instant . long ( ) ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . ifModifiedSince ( long ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String , java.time.Instant ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; assertEquals ( long , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( NUMBER ) ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . ifModifiedSince ( java.time.Instant . long ( ) ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String , java.time.Instant ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; assertEquals ( java.time.Instant . long ( ) , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; long long = java.time.Instant . long ( ) ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . ifModifiedSince ( long ) . toExchange ( ) ; assertFalse ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String , java.time.Instant ) ) ; assertNull ( org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; assertEquals ( long , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = java.text.SimpleDateFormat . java.util.Date ( java.lang.String ) . long ( ) ; java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . header ( STRING , java.lang.String ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.time.Instant . java.time.Instant ( long ) ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( long , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = java.text.SimpleDateFormat . java.util.Date ( java.lang.String ) . long ( ) ; java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = get ( STRING ) . header ( STRING , java.lang.String ) . toExchange ( ) ; assertFalse ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.time.Instant . java.time.Instant ( long ) ) ) ; assertNull ( org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( long , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( NUMBER ) ; long long = java.time.Instant . long ( ) ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = MockServerHttpRequest . put ( STRING ) . ifUnmodifiedSince ( long ) . toExchange ( ) ; assertFalse ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.time.Instant ) ) ; assertNull ( org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( NUMBER ) ; long long = java.time.Instant . long ( ) ; MockServerWebExchange org.springframework.web.server.adapter.MockServerWebExchange = MockServerHttpRequest . put ( STRING ) . ifUnmodifiedSince ( long ) . toExchange ( ) ; assertTrue ( org.springframework.web.server.adapter.MockServerWebExchange . checkNotModified ( java.time.Instant ) ) ; assertEquals ( NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) . value ( ) ) ; assertEquals ( - NUMBER , org.springframework.web.server.adapter.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; }  <METHOD_END>
