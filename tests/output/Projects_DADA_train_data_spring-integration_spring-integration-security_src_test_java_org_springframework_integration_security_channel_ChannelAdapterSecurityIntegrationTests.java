<METHOD_START> @ After public void void ( ) { SecurityContextHolder . clearContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AccessDeniedException .class ) public void void ( ) { void ( STRING , STRING , STRING ) ; org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING ) ; org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.security.channel.TestHandler . sentMessages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING , STRING ) ; this . org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.security.channel.Message<?> = this . org.springframework.integration.security.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.channel.Message<> ) ; SecurityContextHolder . clearContext ( ) ; this . org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.security.channel.Message<?> = this . org.springframework.integration.security.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.security.channel.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.security.channel.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( MessageHandlingException .class ) ) ; assertThat ( ( ( MessageHandlingException ) java.lang.Object ) . getCause ( ) , instanceOf ( AuthenticationCredentialsNotFoundException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AccessDeniedException .class ) public void void ( ) { void ( STRING , STRING , STRING ) ; org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AccessDeniedException .class ) public void void ( ) { void ( STRING , STRING , STRING ) ; org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AuthenticationException .class ) public void void ( ) { org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.security.channel.TestHandler . sentMessages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.security.channel.TestHandler . sentMessages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.security.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.integration.security.channel.TestHandler . sentMessages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { SecurityContext org.springframework.integration.security.channel.SecurityContext = SecurityTestUtils . createContext ( java.lang.String , java.lang.String , java.lang.String[] ) ; SecurityContextHolder . setContext ( org.springframework.integration.security.channel.SecurityContext ) ; }  <METHOD_END>
