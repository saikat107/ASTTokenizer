<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( handler ( ) . handlerType ( org.springframework.test.web.servlet.samples.standalone.resultmatchers.HandlerAssertionTests.SimpleController .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.samples.standalone.resultmatchers.ExpectedException . expect ( java.lang.AssertionError .class ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.ExpectedException . expectMessage ( STRING ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.ExpectedException . expectMessage ( MvcUriComponentsBuilder . MvcUriComponentsBuilder .class . java.lang.String ( ) ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( handler ( ) . methodCall ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( handler ( ) . methodCall ( on ( org.springframework.test.web.servlet.samples.standalone.resultmatchers.HandlerAssertionTests.SimpleController .class ) . handle ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( handler ( ) . methodName ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( handler ( ) . methodName ( equalTo ( STRING ) ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( handler ( ) . methodName ( is ( not ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.web.servlet.samples.standalone.resultmatchers.HandlerAssertionTests.SimpleController .class . java.lang.reflect.Method ( STRING ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( handler ( ) . method ( java.lang.reflect.Method ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.test.web.servlet.samples.standalone.resultmatchers.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.test.web.servlet.samples.standalone.resultmatchers.ResponseEntity<java.lang.Void> ( ) { return ResponseEntity . ok ( ) . build ( ) ; }  <METHOD_END>
