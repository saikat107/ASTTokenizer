<METHOD_START> public void ( int int , org.springframework.expression.spel.ast.SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { this . int = int ; Assert . isTrue ( int != NUMBER , STRING ) ; if ( ! ObjectUtils . isEmpty ( org.springframework.expression.spel.ast.SpelNodeImpl[] ) ) { this . org.springframework.expression.spel.ast.SpelNodeImpl[] = org.springframework.expression.spel.ast.SpelNodeImpl[] ; for ( org.springframework.expression.spel.ast.SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl : org.springframework.expression.spel.ast.SpelNodeImpl[] ) { org.springframework.expression.spel.ast.SpelNodeImpl . org.springframework.expression.spel.ast.SpelNodeImpl = this ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.expression.spel.ast.SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl ( ) { org.springframework.expression.spel.ast.SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = null ; if ( this . org.springframework.expression.spel.ast.SpelNodeImpl != null ) { for ( org.springframework.expression.spel.ast.SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl : this . org.springframework.expression.spel.ast.SpelNodeImpl . org.springframework.expression.spel.ast.SpelNodeImpl[] ) { if ( this == org.springframework.expression.spel.ast.SpelNodeImpl ) { break; } org.springframework.expression.spel.ast.SpelNodeImpl = org.springframework.expression.spel.ast.SpelNodeImpl ; } } return org.springframework.expression.spel.ast.SpelNodeImpl ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { if ( this . org.springframework.expression.spel.ast.SpelNodeImpl != null ) { org.springframework.expression.spel.ast.SpelNodeImpl [] org.springframework.expression.spel.ast.SpelNodeImpl[] = this . org.springframework.expression.spel.ast.SpelNodeImpl . org.springframework.expression.spel.ast.SpelNodeImpl[] ; for ( int int = NUMBER , int = org.springframework.expression.spel.ast.SpelNodeImpl[] . int ; int < int ; int ++ ) { if ( this == org.springframework.expression.spel.ast.SpelNodeImpl[] [ int ] ) { if ( int + NUMBER >= int ) { return false ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.expression.spel.ast.SpelNodeImpl[] [ int + NUMBER ] . java.lang.Class<? extends org.springframework.expression.spel.ast.SpelNodeImpl> ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return true ; } } return false ; } } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object java.lang.Object ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { if ( org.springframework.expression.spel.ast.ExpressionState != null ) { return org.springframework.expression.spel.ast.TypedValue ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; } else { return java.lang.Object ( new ExpressionState ( new StandardEvaluationContext ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { if ( org.springframework.expression.spel.ast.ExpressionState != null ) { return org.springframework.expression.spel.ast.TypedValue ( org.springframework.expression.spel.ast.ExpressionState ) ; } else { return org.springframework.expression.spel.ast.TypedValue ( new ExpressionState ( new StandardEvaluationContext ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ExpressionState org.springframework.expression.spel.ast.ExpressionState , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.ast.EvaluationException { throw new SpelEvaluationException ( int ( ) , SpelMessage . SETVALUE_NOT_SUPPORTED , java.lang.Class<? extends org.springframework.expression.spel.ast.SpelNodeImpl> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.SpelNode org.springframework.expression.spel.ast.SpelNode ( int int ) { return this . org.springframework.expression.spel.ast.SpelNodeImpl[] [ int ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.expression.spel.ast.SpelNodeImpl[] . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } return ( java.lang.Object instanceof java.lang.Class ? ( ( java.lang.Class<?> < ? > ) java.lang.Object ) : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected final < T > T T ( ExpressionState org.springframework.expression.spel.ast.ExpressionState , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.expression.spel.ast.EvaluationException { return ExpressionUtils . convertTypedValue ( org.springframework.expression.spel.ast.ExpressionState . getEvaluationContext ( ) , org.springframework.expression.spel.ast.TypedValue ( org.springframework.expression.spel.ast.ExpressionState ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . int >> NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . int & NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.expression.spel.ast.ValueRef org.springframework.expression.spel.ast.ValueRef ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { throw new SpelEvaluationException ( this . int , SpelMessage . NOT_ASSIGNABLE , toStringAST ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { throw new java.lang.IllegalStateException ( java.lang.Class<? extends org.springframework.expression.spel.ast.SpelNodeImpl> ( ) . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public abstract org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException ;  <METHOD_END>
<METHOD_START> protected static void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow , java.lang.reflect.Member java.lang.reflect.Member , org.springframework.expression.spel.ast.SpelNodeImpl [] org.springframework.expression.spel.ast.SpelNodeImpl[] ) { java.lang.String [] java.lang.String[] = null ; boolean boolean = false ; if ( java.lang.reflect.Member instanceof java.lang.reflect.Constructor ) { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = ( java.lang.reflect.Constructor<?> < ? > ) java.lang.reflect.Member ; java.lang.String[] = CodeFlow . toDescriptors ( java.lang.reflect.Constructor<> . java.lang.Class<?>[] ( ) ) ; boolean = java.lang.reflect.Constructor<> . boolean ( ) ; } else { java.lang.reflect.Method java.lang.reflect.Method = ( java.lang.reflect.Method ) java.lang.reflect.Member ; java.lang.String[] = CodeFlow . toDescriptors ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ; boolean = java.lang.reflect.Method . boolean ( ) ; } if ( boolean ) { int int = NUMBER ; int int = org.springframework.expression.spel.ast.SpelNodeImpl[] . int ; for ( int = NUMBER ; int < java.lang.String[] . int - NUMBER ; int ++ ) { void ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow , org.springframework.expression.spel.ast.SpelNodeImpl[] [ int ] , java.lang.String[] [ int ] ) ; } org.springframework.expression.spel.ast.SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = ( int == NUMBER ? null : org.springframework.expression.spel.ast.SpelNodeImpl[] [ int - NUMBER ] ) ; java.lang.String java.lang.String = java.lang.String[] [ java.lang.String[] . int - NUMBER ] ; if ( org.springframework.expression.spel.ast.SpelNodeImpl != null && org.springframework.expression.spel.ast.SpelNodeImpl . java.lang.String ( ) . boolean ( java.lang.String ) ) { void ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow , org.springframework.expression.spel.ast.SpelNodeImpl , java.lang.String[] [ int ] ) ; } else { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; CodeFlow . insertNewArrayCode ( org.springframework.expression.spel.ast.MethodVisitor , int - int , java.lang.String ) ; int int = NUMBER ; while ( int < int ) { org.springframework.expression.spel.ast.SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = org.springframework.expression.spel.ast.SpelNodeImpl[] [ int ] ; org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( DUP ) ; CodeFlow . insertOptimalLoad ( org.springframework.expression.spel.ast.MethodVisitor , int ++ ) ; void ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow , org.springframework.expression.spel.ast.SpelNodeImpl , java.lang.String ) ; CodeFlow . insertArrayStore ( org.springframework.expression.spel.ast.MethodVisitor , java.lang.String ) ; int ++ ; } } } else { for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { void ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow , org.springframework.expression.spel.ast.SpelNodeImpl[] [ int ] , java.lang.String[] [ int ] ) ; } } }  <METHOD_END>
<METHOD_START> protected static void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow , org.springframework.expression.spel.ast.SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl , java.lang.String java.lang.String ) { org.springframework.expression.spel.ast.CodeFlow . enterCompilationScope ( ) ; org.springframework.expression.spel.ast.SpelNodeImpl . void ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; boolean boolean = CodeFlow . isPrimitive ( org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) ) ; if ( boolean && java.lang.String . char ( NUMBER ) == 'L' ) { CodeFlow . insertBoxIfNecessary ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) . charAt ( NUMBER ) ) ; } else if ( java.lang.String . int ( ) == NUMBER && ! boolean ) { CodeFlow . insertUnboxInsns ( org.springframework.expression.spel.ast.MethodVisitor , java.lang.String . char ( NUMBER ) , org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) ) ; } else if ( ! org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) . equals ( java.lang.String ) ) { CodeFlow . insertCheckCast ( org.springframework.expression.spel.ast.MethodVisitor , java.lang.String ) ; } org.springframework.expression.spel.ast.CodeFlow . exitCompilationScope ( ) ; }  <METHOD_END>
