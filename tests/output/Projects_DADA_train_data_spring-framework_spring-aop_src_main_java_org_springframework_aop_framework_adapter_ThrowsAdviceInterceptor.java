<METHOD_START> public void ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; java.lang.reflect.Method [] java.lang.reflect.Method[] = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method[] ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) && ( java.lang.reflect.Method . int ( ) == NUMBER || java.lang.reflect.Method . int ( ) == NUMBER ) && java.lang.Throwable .class . boolean ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ java.lang.reflect.Method . int ( ) - NUMBER ] ) ) { this . java.util.Map<java.lang.Class<?>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ java.lang.reflect.Method . int ( ) - NUMBER ] , java.lang.reflect.Method ) ; if ( org.springframework.aop.framework.adapter.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.adapter.Log . debug ( STRING + java.lang.reflect.Method ) ; } } } if ( this . java.util.Map<java.lang.Class<?>,java.lang.reflect.Method> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.Map<java.lang.Class<?>,java.lang.reflect.Method> . int ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Throwable java.lang.Throwable ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ; if ( org.springframework.aop.framework.adapter.Log . isTraceEnabled ( ) ) { org.springframework.aop.framework.adapter.Log . trace ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } java.lang.reflect.Method java.lang.reflect.Method = this . java.util.Map<java.lang.Class<?>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.Class<> ) ; while ( java.lang.reflect.Method == null && java.lang.Class<> != java.lang.Throwable .class ) { java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; java.lang.reflect.Method = this . java.util.Map<java.lang.Class<?>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.Class<> ) ; } if ( java.lang.reflect.Method != null && org.springframework.aop.framework.adapter.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.adapter.Log . debug ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.reflect.Method ) ; } return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.adapter.MethodInvocation ) throws java.lang.Throwable { try { return org.springframework.aop.framework.adapter.MethodInvocation . proceed ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Throwable ) ; if ( java.lang.reflect.Method != null ) { void ( org.springframework.aop.framework.adapter.MethodInvocation , java.lang.Throwable , java.lang.reflect.Method ) ; } throw java.lang.Throwable ; } }  <METHOD_END>
<METHOD_START> private void void ( MethodInvocation org.springframework.aop.framework.adapter.MethodInvocation , java.lang.Throwable java.lang.Throwable , java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.Throwable { java.lang.Object [] java.lang.Object[] ; if ( java.lang.reflect.Method . int ( ) == NUMBER ) { java.lang.Object[] = new java.lang.Object [] { java.lang.Throwable } ; } else { java.lang.Object[] = new java.lang.Object [] { org.springframework.aop.framework.adapter.MethodInvocation . getMethod ( ) , org.springframework.aop.framework.adapter.MethodInvocation . getArguments ( ) , org.springframework.aop.framework.adapter.MethodInvocation . getThis ( ) , java.lang.Throwable } ; } try { java.lang.reflect.Method . java.lang.Object ( this . java.lang.Object , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } }  <METHOD_END>
