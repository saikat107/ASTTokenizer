<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( STRING , int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.BooleanTypedValue org.springframework.expression.spel.ast.BooleanTypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { java.lang.Object java.lang.Object = getLeftOperand ( ) . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; java.lang.Object java.lang.Object = getRightOperand ( ) . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; if ( ! ( java.lang.Object instanceof java.util.List ) || ( ( java.util.List<?> < ? > ) java.lang.Object ) . int ( ) != NUMBER ) { throw new SpelEvaluationException ( getRightOperand ( ) . getStartPosition ( ) , SpelMessage . BETWEEN_RIGHT_OPERAND_MUST_BE_TWO_ELEMENT_LIST ) ; } java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; java.lang.Object java.lang.Object = java.util.List<> . get ( NUMBER ) ; java.lang.Object java.lang.Object = java.util.List<> . get ( NUMBER ) ; TypeComparator org.springframework.expression.spel.ast.TypeComparator = org.springframework.expression.spel.ast.ExpressionState . getTypeComparator ( ) ; try { return BooleanTypedValue . forValue ( org.springframework.expression.spel.ast.TypeComparator . compare ( java.lang.Object , java.lang.Object ) >= NUMBER && org.springframework.expression.spel.ast.TypeComparator . compare ( java.lang.Object , java.lang.Object ) <= NUMBER ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.ast.SpelEvaluationException ) { org.springframework.expression.spel.ast.SpelEvaluationException . setPosition ( getStartPosition ( ) ) ; throw org.springframework.expression.spel.ast.SpelEvaluationException ; } }  <METHOD_END>
