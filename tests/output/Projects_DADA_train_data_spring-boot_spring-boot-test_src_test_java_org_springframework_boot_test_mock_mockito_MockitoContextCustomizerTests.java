<METHOD_START> @ Test public void void ( ) { MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition = org.springframework.boot.test.mock.mockito.MockDefinition ( ExampleService .class ) ; MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition = org.springframework.boot.test.mock.mockito.MockDefinition ( ExampleServiceCaller .class ) ; MockitoContextCustomizer org.springframework.boot.test.mock.mockito.MockitoContextCustomizer = new MockitoContextCustomizer ( java.util.Set<org.springframework.boot.test.mock.mockito.MockDefinition> ) ; MockitoContextCustomizer org.springframework.boot.test.mock.mockito.MockitoContextCustomizer = new MockitoContextCustomizer ( new java.util.LinkedHashSet <> ( java.util.Arrays . java.util.List ( org.springframework.boot.test.mock.mockito.MockDefinition , org.springframework.boot.test.mock.mockito.MockDefinition ) ) ) ; MockitoContextCustomizer org.springframework.boot.test.mock.mockito.MockitoContextCustomizer = new MockitoContextCustomizer ( new java.util.LinkedHashSet <> ( java.util.Arrays . java.util.List ( org.springframework.boot.test.mock.mockito.MockDefinition , org.springframework.boot.test.mock.mockito.MockDefinition ) ) ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockitoContextCustomizer . hashCode ( ) ) . isEqualTo ( org.springframework.boot.test.mock.mockito.MockitoContextCustomizer . hashCode ( ) ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockitoContextCustomizer ) . isEqualTo ( org.springframework.boot.test.mock.mockito.MockitoContextCustomizer ) . isNotEqualTo ( org.springframework.boot.test.mock.mockito.MockitoContextCustomizer ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockitoContextCustomizer ) . isEqualTo ( org.springframework.boot.test.mock.mockito.MockitoContextCustomizer ) . isEqualTo ( org.springframework.boot.test.mock.mockito.MockitoContextCustomizer ) . isNotEqualTo ( org.springframework.boot.test.mock.mockito.MockitoContextCustomizer ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.mock.mockito.MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new MockDefinition ( null , ResolvableType . forClass ( java.lang.Class<> ) , null , null , false , null , null ) ; }  <METHOD_END>
