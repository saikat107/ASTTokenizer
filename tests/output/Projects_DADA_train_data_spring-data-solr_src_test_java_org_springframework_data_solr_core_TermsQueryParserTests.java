<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.solr.core.TermsQueryParser = new TermsQueryParser ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . limit ( NUMBER ) . build ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsLimit ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . limit ( - NUMBER ) . build ( ) ; Assert . assertEquals ( STRING , NUMBER , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsLimit ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . maxCount ( NUMBER ) . build ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsMaxCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . maxCount ( - NUMBER ) . build ( ) ; Assert . assertEquals ( STRING , - NUMBER , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsMaxCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . minCount ( NUMBER ) . build ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsMinCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . minCount ( - NUMBER ) . build ( ) ; Assert . assertEquals ( STRING , NUMBER , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsMinCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . prefix ( STRING ) . build ( ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsPrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . prefix ( null ) . build ( ) ; Assert . assertEquals ( STRING , STRING , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsPrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . prefix ( STRING ) . build ( ) ; Assert . assertEquals ( STRING , STRING , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsPrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . regex ( STRING ) . build ( ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsRegex ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . regex ( null ) . build ( ) ; Assert . assertNull ( org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsRegex ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . regex ( STRING ) . build ( ) ; Assert . assertNull ( org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsRegex ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . regexFlag ( RegexFlag . CASE_INSENSITIVE ) . build ( ) ; Assert . assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsRegexFlags ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . regexFlag ( null ) . build ( ) ; Assert . assertNull ( org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsRegexFlags ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . sort ( TermsOptions . Sort . INDEX ) . build ( ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsSortString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . sort ( null ) . build ( ) ; Assert . assertEquals ( STRING , STRING , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsSortString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . fields ( STRING ) . build ( ) ; Assert . assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsFields ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( STRING , STRING , STRING ) . build ( ) ; Assert . assertArrayEquals ( new java.lang.String [] { STRING , STRING , STRING } , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getTermsFields ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . handledBy ( STRING ) . build ( ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getRequestHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . handledBy ( null ) . build ( ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getRequestHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . handledBy ( STRING ) . build ( ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.TermsQueryParser . constructSolrQuery ( org.springframework.data.solr.core.TermsQuery ) . getRequestHandler ( ) ) ; }  <METHOD_END>
