<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.server.upgrade.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.server.upgrade.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , WebSocketHandler org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { ReactorServerHttpResponse org.springframework.web.reactive.socket.server.upgrade.ReactorServerHttpResponse = ( ReactorServerHttpResponse ) org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getResponse ( ) ; HandshakeInfo org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo = org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo ( org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , java.util.Optional<java.lang.String> ) ; NettyDataBufferFactory org.springframework.web.reactive.socket.server.upgrade.NettyDataBufferFactory = ( NettyDataBufferFactory ) org.springframework.web.reactive.socket.server.upgrade.ReactorServerHttpResponse . bufferFactory ( ) ; return org.springframework.web.reactive.socket.server.upgrade.ReactorServerHttpResponse . getReactorResponse ( ) . sendWebsocket ( java.util.Optional<java.lang.String> . java.lang.String ( null ) , ( in , out ) -> handler . handle ( new ReactorNettyWebSocketSession ( in , out , info , bufferFactory ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo ( ServerWebExchange org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { ServerHttpRequest org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getRequest ( ) ; Mono < java.security.Principal > org.springframework.web.reactive.socket.server.upgrade.Mono<java.security.Principal> = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getPrincipal ( ) ; return new HandshakeInfo ( org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest . getURI ( ) , org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest . getHeaders ( ) , org.springframework.web.reactive.socket.server.upgrade.Mono<java.security.Principal> , java.util.Optional<java.lang.String> ) ; }  <METHOD_END>
