<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { org.springframework.jdbc.support.lob.Log . debug ( STRING ) ; if ( this . boolean ) { java.sql.Blob java.sql.Blob = java.sql.ResultSet . java.sql.Blob ( int ) ; return java.sql.Blob . byte[] ( NUMBER , ( int ) java.sql.Blob . long ( ) ) ; } else { return java.sql.ResultSet . byte[] ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { org.springframework.jdbc.support.lob.Log . debug ( STRING ) ; if ( this . boolean ) { java.sql.Blob java.sql.Blob = java.sql.ResultSet . java.sql.Blob ( int ) ; return java.sql.Blob . java.io.InputStream ( ) ; } else { return java.sql.ResultSet . java.io.InputStream ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { org.springframework.jdbc.support.lob.Log . debug ( STRING ) ; if ( this . boolean ) { java.sql.Clob java.sql.Clob = java.sql.ResultSet . java.sql.Clob ( int ) ; return java.sql.Clob . java.lang.String ( NUMBER , ( int ) java.sql.Clob . long ( ) ) ; } else { return java.sql.ResultSet . java.lang.String ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { org.springframework.jdbc.support.lob.Log . debug ( STRING ) ; if ( this . boolean ) { java.sql.Clob java.sql.Clob = java.sql.ResultSet . java.sql.Clob ( int ) ; return java.sql.Clob . java.io.InputStream ( ) ; } else { return java.sql.ResultSet . java.io.InputStream ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.Reader java.io.Reader ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { org.springframework.jdbc.support.lob.Log . debug ( STRING ) ; if ( this . boolean ) { java.sql.Clob java.sql.Clob = java.sql.ResultSet . java.sql.Clob ( int ) ; return java.sql.Clob . java.io.Reader ( ) ; } else { return java.sql.ResultSet . java.io.Reader ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.support.lob.LobCreator org.springframework.jdbc.support.lob.LobCreator ( ) { return ( this . boolean ? new TemporaryLobCreator ( ) : new org.springframework.jdbc.support.lob.DefaultLobHandler.DefaultLobCreator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , byte [] byte[] )				throws java.sql.SQLException { if ( boolean ) { if ( byte[] != null ) { java.sql.PreparedStatement . void ( int , new java.io.ByteArrayInputStream ( byte[] ) , byte[] . int ) ; } else { java.sql.PreparedStatement . void ( int , ( java.sql.Blob ) null ) ; } } else if ( boolean ) { if ( byte[] != null ) { java.sql.PreparedStatement . void ( int , new PassThroughBlob ( byte[] ) ) ; } else { java.sql.PreparedStatement . void ( int , ( java.sql.Blob ) null ) ; } } else { java.sql.PreparedStatement . void ( int , byte[] ) ; } if ( org.springframework.jdbc.support.lob.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.lob.Log . debug ( byte[] != null ? STRING + byte[] . int : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , java.io.InputStream java.io.InputStream , int int )				throws java.sql.SQLException { if ( boolean ) { if ( java.io.InputStream != null ) { if ( int >= NUMBER ) { java.sql.PreparedStatement . void ( int , java.io.InputStream , int ) ; } else { java.sql.PreparedStatement . void ( int , java.io.InputStream ) ; } } else { java.sql.PreparedStatement . void ( int , ( java.sql.Blob ) null ) ; } } else if ( boolean ) { if ( java.io.InputStream != null ) { java.sql.PreparedStatement . void ( int , new PassThroughBlob ( java.io.InputStream , int ) ) ; } else { java.sql.PreparedStatement . void ( int , ( java.sql.Blob ) null ) ; } } else if ( int >= NUMBER ) { java.sql.PreparedStatement . void ( int , java.io.InputStream , int ) ; } else { java.sql.PreparedStatement . void ( int , java.io.InputStream ) ; } if ( org.springframework.jdbc.support.lob.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.lob.Log . debug ( java.io.InputStream != null ? STRING + int : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , java.lang.String java.lang.String )				throws java.sql.SQLException { if ( boolean ) { if ( java.lang.String != null ) { java.sql.PreparedStatement . void ( int , new java.io.StringReader ( java.lang.String ) , java.lang.String . int ( ) ) ; } else { java.sql.PreparedStatement . void ( int , ( java.sql.Clob ) null ) ; } } else if ( boolean ) { if ( java.lang.String != null ) { java.sql.PreparedStatement . void ( int , new PassThroughClob ( java.lang.String ) ) ; } else { java.sql.PreparedStatement . void ( int , ( java.sql.Clob ) null ) ; } } else { java.sql.PreparedStatement . void ( int , java.lang.String ) ; } if ( org.springframework.jdbc.support.lob.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.lob.Log . debug ( java.lang.String != null ? STRING + java.lang.String . int ( ) : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , java.io.InputStream java.io.InputStream , int int )				throws java.sql.SQLException { if ( boolean ) { if ( java.io.InputStream != null ) { try { java.io.Reader java.io.Reader = new java.io.InputStreamReader ( java.io.InputStream , STRING ) ; if ( int >= NUMBER ) { java.sql.PreparedStatement . void ( int , java.io.Reader , int ) ; } else { java.sql.PreparedStatement . void ( int , java.io.Reader ) ; } } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.sql.SQLException ( STRING + java.io.UnsupportedEncodingException ) ; } } else { java.sql.PreparedStatement . void ( int , ( java.sql.Clob ) null ) ; } } else if ( boolean ) { if ( java.io.InputStream != null ) { java.sql.PreparedStatement . void ( int , new PassThroughClob ( java.io.InputStream , int ) ) ; } else { java.sql.PreparedStatement . void ( int , ( java.sql.Clob ) null ) ; } } else if ( int >= NUMBER ) { java.sql.PreparedStatement . void ( int , java.io.InputStream , int ) ; } else { java.sql.PreparedStatement . void ( int , java.io.InputStream ) ; } if ( org.springframework.jdbc.support.lob.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.lob.Log . debug ( java.io.InputStream != null ? STRING + int : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , java.io.Reader java.io.Reader , int int )				throws java.sql.SQLException { if ( boolean ) { if ( java.io.Reader != null ) { if ( int >= NUMBER ) { java.sql.PreparedStatement . void ( int , java.io.Reader , int ) ; } else { java.sql.PreparedStatement . void ( int , java.io.Reader ) ; } } else { java.sql.PreparedStatement . void ( int , ( java.sql.Clob ) null ) ; } } else if ( boolean ) { if ( java.io.Reader != null ) { java.sql.PreparedStatement . void ( int , new PassThroughClob ( java.io.Reader , int ) ) ; } else { java.sql.PreparedStatement . void ( int , ( java.sql.Clob ) null ) ; } } else if ( int >= NUMBER ) { java.sql.PreparedStatement . void ( int , java.io.Reader , int ) ; } else { java.sql.PreparedStatement . void ( int , java.io.Reader ) ; } if ( org.springframework.jdbc.support.lob.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.lob.Log . debug ( java.io.Reader != null ? STRING + int : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
