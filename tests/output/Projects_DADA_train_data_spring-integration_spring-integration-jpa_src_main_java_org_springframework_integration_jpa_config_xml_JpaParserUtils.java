<METHOD_START> private void ( ) { throw new java.lang.AssertionError ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder ( final org.w3c.dom.Element org.w3c.dom.Element , final ParserContext org.springframework.integration.jpa.config.xml.ParserContext ) { Assert . notNull ( org.w3c.dom.Element , STRING ) ; Assert . notNull ( org.springframework.integration.jpa.config.xml.ParserContext , STRING ) ; final java.lang.Object java.lang.Object = org.springframework.integration.jpa.config.xml.ParserContext . extractSource ( org.w3c.dom.Element ) ; final BeanDefinitionBuilder org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( JpaExecutor .class ) ; int int = NUMBER ; final java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; final java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; final java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { int ++ ; org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { if ( int > NUMBER ) { org.springframework.integration.jpa.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + STRING , java.lang.Object ) ; } int ++ ; org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { if ( int > NUMBER ) { org.springframework.integration.jpa.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + STRING , java.lang.Object ) ; } int ++ ; org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } if ( int == NUMBER ) { org.springframework.integration.jpa.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + STRING , java.lang.Object ) ; } final ManagedList < BeanDefinition > org.springframework.integration.jpa.config.xml.ManagedList<org.springframework.integration.jpa.config.xml.BeanDefinition> = org.springframework.integration.jpa.config.xml.JpaParserUtils . org.springframework.integration.jpa.config.xml.ManagedList<org.springframework.integration.jpa.config.xml.BeanDefinition> ( org.w3c.dom.Element , org.springframework.integration.jpa.config.xml.ParserContext ) ; if ( ! org.springframework.integration.jpa.config.xml.ManagedList<org.springframework.integration.jpa.config.xml.BeanDefinition> . isEmpty ( ) ) { org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.jpa.config.xml.ManagedList<org.springframework.integration.jpa.config.xml.BeanDefinition> ) ; } IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; return org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder ( final org.w3c.dom.Element org.w3c.dom.Element , final ParserContext org.springframework.integration.jpa.config.xml.ParserContext ) { final BeanDefinitionBuilder org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder = org.springframework.integration.jpa.config.xml.JpaParserUtils . org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder ( org.w3c.dom.Element , org.springframework.integration.jpa.config.xml.ParserContext ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; return org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.jpa.config.xml.ManagedList<org.springframework.integration.jpa.config.xml.BeanDefinition> < BeanDefinition > org.springframework.integration.jpa.config.xml.ManagedList<org.springframework.integration.jpa.config.xml.BeanDefinition> ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.jpa.config.xml.ParserContext ) { Assert . notNull ( org.w3c.dom.Element , STRING ) ; Assert . notNull ( org.springframework.integration.jpa.config.xml.ParserContext , STRING ) ; final ManagedList < BeanDefinition > org.springframework.integration.jpa.config.xml.ManagedList<org.springframework.integration.jpa.config.xml.BeanDefinition> = new ManagedList < BeanDefinition > ( ) ; final java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : java.util.List<org.w3c.dom.Element> ) { final BeanDefinitionBuilder org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( JpaParameter .class ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { if ( org.springframework.integration.jpa.config.xml.Log . isInfoEnabled ( ) ) { org.springframework.integration.jpa.config.xml.Log . info ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String ) ) ; } org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , new TypedStringValue ( java.lang.String , java.lang.String .class ) ) ; } else { org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , new TypedStringValue ( java.lang.String , java.lang.String ) ) ; } } org.springframework.integration.jpa.config.xml.ManagedList<org.springframework.integration.jpa.config.xml.BeanDefinition> . add ( org.springframework.integration.jpa.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } return org.springframework.integration.jpa.config.xml.ManagedList<org.springframework.integration.jpa.config.xml.BeanDefinition> ; }  <METHOD_END>
