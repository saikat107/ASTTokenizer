<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; when ( org.springframework.data.repository.core.support.QueryLookupStrategy . resolveQuery ( Mockito . any ( java.lang.reflect.Method .class ) , Mockito . any ( RepositoryMetadata .class ) , Mockito . any ( ProjectionFactory .class ) , Mockito . any ( NamedQueries .class ) ) ) . thenReturn ( org.springframework.data.repository.core.support.MyRepositoryQuery ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T , ID extends java.io.Serializable > org.springframework.data.repository.core.support.EntityInformation<T,ID> < T , ID > org.springframework.data.repository.core.support.EntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return mock ( EntityInformation .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( RepositoryInformation org.springframework.data.repository.core.support.RepositoryInformation ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata ) { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.repository.core.support.QueryLookupStrategy> < QueryLookupStrategy > java.util.Optional<org.springframework.data.repository.core.support.QueryLookupStrategy> ( Key org.springframework.data.repository.core.support.Key , EvaluationContextProvider org.springframework.data.repository.core.support.EvaluationContextProvider ) { return java.util.Optional . java.util.Optional ( org.springframework.data.repository.core.support.QueryLookupStrategy ) ; }  <METHOD_END>
