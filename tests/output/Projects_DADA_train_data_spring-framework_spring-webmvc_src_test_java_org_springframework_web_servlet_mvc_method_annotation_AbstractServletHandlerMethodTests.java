<METHOD_START> @ After public void void ( ) { this . org.springframework.web.servlet.mvc.method.annotation.DispatcherServlet = null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.DispatcherServlet org.springframework.web.servlet.mvc.method.annotation.DispatcherServlet ( ) { assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.DispatcherServlet ) ; return org.springframework.web.servlet.mvc.method.annotation.DispatcherServlet ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ( final java.lang.Class<?> < ? > ... java.lang.Class<?>[] )			throws org.springframework.web.servlet.mvc.method.annotation.ServletException { return org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ( null , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ( final ApplicationContextInitializer < GenericWebApplicationContext > org.springframework.web.servlet.mvc.method.annotation.ApplicationContextInitializer<org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext> , final java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws org.springframework.web.servlet.mvc.method.annotation.ServletException { final GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; org.springframework.web.servlet.mvc.method.annotation.DispatcherServlet = new DispatcherServlet ( ) { @ java.lang.Override protected org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ( WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( java.lang.Class<> . java.lang.String ( ) , new RootBeanDefinition ( java.lang.Class<> ) ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = RequestMappingHandlerMapping .class ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<> ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; java.lang.Class<?> < ? > java.lang.Class<?> = RequestMappingHandlerAdapter .class ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ExceptionHandlerExceptionResolver .class ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; java.lang.Class<?> = ResponseStatusExceptionResolver .class ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; java.lang.Class<?> = DefaultHandlerExceptionResolver .class ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; if ( org.springframework.web.servlet.mvc.method.annotation.ApplicationContextInitializer<org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext> != null ) { org.springframework.web.servlet.mvc.method.annotation.ApplicationContextInitializer<org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext> . initialize ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) ; } org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . refresh ( ) ; return org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ; } } ; org.springframework.web.servlet.mvc.method.annotation.DispatcherServlet . init ( new MockServletConfig ( ) ) ; return org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ( WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( java.lang.Class<> . java.lang.String ( ) , new RootBeanDefinition ( java.lang.Class<> ) ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = RequestMappingHandlerMapping .class ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<> ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; java.lang.Class<?> < ? > java.lang.Class<?> = RequestMappingHandlerAdapter .class ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ExceptionHandlerExceptionResolver .class ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; java.lang.Class<?> = ResponseStatusExceptionResolver .class ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; java.lang.Class<?> = DefaultHandlerExceptionResolver .class ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; if ( org.springframework.web.servlet.mvc.method.annotation.ApplicationContextInitializer<org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext> != null ) { org.springframework.web.servlet.mvc.method.annotation.ApplicationContextInitializer<org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext> . initialize ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) ; } org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . refresh ( ) ; return org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ; }  <METHOD_END>
