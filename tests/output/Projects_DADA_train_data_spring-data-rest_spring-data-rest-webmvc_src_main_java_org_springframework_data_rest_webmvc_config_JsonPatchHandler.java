<METHOD_START> public void ( ObjectMapper org.springframework.data.rest.webmvc.config.ObjectMapper , DomainObjectReader org.springframework.data.rest.webmvc.config.DomainObjectReader ) { Assert . notNull ( org.springframework.data.rest.webmvc.config.ObjectMapper , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.config.DomainObjectReader , STRING ) ; this . org.springframework.data.rest.webmvc.config.ObjectMapper = org.springframework.data.rest.webmvc.config.ObjectMapper ; this . org.springframework.data.rest.webmvc.config.DomainObjectReader = org.springframework.data.rest.webmvc.config.DomainObjectReader ; this . org.springframework.data.rest.webmvc.config.ObjectMapper = org.springframework.data.rest.webmvc.config.ObjectMapper . copy ( ) ; this . org.springframework.data.rest.webmvc.config.ObjectMapper . setSerializationInclusion ( Include . NON_NULL ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( IncomingRequest org.springframework.data.rest.webmvc.config.IncomingRequest , T T ) throws java.lang.Exception { Assert . notNull ( org.springframework.data.rest.webmvc.config.IncomingRequest , STRING ) ; Assert . isTrue ( org.springframework.data.rest.webmvc.config.IncomingRequest . isPatchRequest ( ) , STRING ) ; Assert . notNull ( T , STRING ) ; if ( org.springframework.data.rest.webmvc.config.IncomingRequest . isJsonPatchRequest ( ) ) { return java.lang.Object ( org.springframework.data.rest.webmvc.config.IncomingRequest . getBody ( ) , T ) ; } else { return java.lang.Object ( org.springframework.data.rest.webmvc.config.IncomingRequest . getBody ( ) , T ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) < T > T T ( java.io.InputStream java.io.InputStream , T T ) throws java.lang.Exception { return org.springframework.data.rest.webmvc.config.Patch ( java.io.InputStream ) . apply ( T , ( java.lang.Class<T> < T > ) T . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> < T > T T ( java.io.InputStream java.io.InputStream , T T ) throws java.lang.Exception { return org.springframework.data.rest.webmvc.config.DomainObjectReader . read ( java.io.InputStream , T , org.springframework.data.rest.webmvc.config.ObjectMapper ) ; }  <METHOD_END>
<METHOD_START> < T > T T ( ObjectNode org.springframework.data.rest.webmvc.config.ObjectNode , T T ) { return org.springframework.data.rest.webmvc.config.DomainObjectReader . readPut ( org.springframework.data.rest.webmvc.config.ObjectNode , T , org.springframework.data.rest.webmvc.config.ObjectMapper ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.rest.webmvc.config.Patch org.springframework.data.rest.webmvc.config.Patch ( java.io.InputStream java.io.InputStream ) { try { return new JsonPatchPatchConverter ( org.springframework.data.rest.webmvc.config.ObjectMapper ) . convert ( org.springframework.data.rest.webmvc.config.ObjectMapper . readTree ( java.io.InputStream ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new HttpMessageNotReadableException ( java.lang.String . java.lang.String ( STRING , RestMediaTypes . JSON_PATCH_JSON ) , java.lang.Exception ) ; } }  <METHOD_END>
