<METHOD_START> @ Before public void void ( ) java.lang.Exception { when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Row . getDouble ( NUMBER ) ) . thenReturn ( NUMBER ) ; org.springframework.cassandra.core.SingleColumnRowMapper = new SingleColumnRowMapper ( ) ; assertThat ( org.springframework.cassandra.core.SingleColumnRowMapper . getColumnValue ( org.springframework.cassandra.core.Row , NUMBER , java.lang.Number .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( NUMBER ) ; org.springframework.cassandra.core.SingleColumnRowMapper = new SingleColumnRowMapper ( ) ; assertThat ( org.springframework.cassandra.core.SingleColumnRowMapper . getColumnValue ( org.springframework.cassandra.core.Row , NUMBER ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.core.SingleColumnRowMapper = new SingleColumnRowMapper < java.lang.Number > ( ) ; assertThat ( org.springframework.cassandra.core.SingleColumnRowMapper . convertValueToRequiredType ( NUMBER , java.lang.Integer .class ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.core.SingleColumnRowMapper . convertValueToRequiredType ( NUMBER , java.lang.Integer .class ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.core.SingleColumnRowMapper . convertValueToRequiredType ( NUMBER , java.lang.Double .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.core.SingleColumnRowMapper = new SingleColumnRowMapper < java.lang.Number > ( ) ; assertThat ( org.springframework.cassandra.core.SingleColumnRowMapper . convertValueToRequiredType ( STRING , java.lang.Integer .class ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.core.SingleColumnRowMapper . convertValueToRequiredType ( STRING , java.lang.Double .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.cassandra.core.SingleColumnRowMapper = new SingleColumnRowMapper <> ( ) ; org.springframework.cassandra.core.SingleColumnRowMapper . convertValueToRequiredType ( STRING , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getInt ( NUMBER ) ) . thenReturn ( NUMBER ) ; org.springframework.cassandra.core.SingleColumnRowMapper = SingleColumnRowMapper . newInstance ( java.lang.Integer .class ) ; assertThat ( org.springframework.cassandra.core.SingleColumnRowMapper . mapRow ( org.springframework.cassandra.core.Row , NUMBER ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( null ) ; org.springframework.cassandra.core.SingleColumnRowMapper = SingleColumnRowMapper . newInstance ( java.lang.Object .class ) ; assertThat ( org.springframework.cassandra.core.SingleColumnRowMapper . mapRow ( org.springframework.cassandra.core.Row , NUMBER ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = TypeMismatchDataAccessException .class ) public void void ( ) { when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . getType ( NUMBER ) ) . thenReturn ( DataType . blob ( ) ) ; when ( org.springframework.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; org.springframework.cassandra.core.SingleColumnRowMapper = SingleColumnRowMapper . newInstance ( ColumnDefinitions .class ) ; org.springframework.cassandra.core.SingleColumnRowMapper . mapRow ( org.springframework.cassandra.core.Row , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = IncorrectResultSetColumnCountException .class ) public void void ( ) { when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; org.springframework.cassandra.core.SingleColumnRowMapper = SingleColumnRowMapper . newInstance ( ColumnDefinitions .class ) ; org.springframework.cassandra.core.SingleColumnRowMapper . mapRow ( org.springframework.cassandra.core.Row , NUMBER ) ; }  <METHOD_END>
