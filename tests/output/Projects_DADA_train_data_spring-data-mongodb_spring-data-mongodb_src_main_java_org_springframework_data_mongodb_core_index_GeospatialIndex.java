<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.GeospatialIndex org.springframework.data.mongodb.core.index.GeospatialIndex ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.GeospatialIndex org.springframework.data.mongodb.core.index.GeospatialIndex ( int int ) { this . java.lang.Integer = java.lang.Integer . java.lang.Integer ( int ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.GeospatialIndex org.springframework.data.mongodb.core.index.GeospatialIndex ( int int ) { this . java.lang.Integer = java.lang.Integer . java.lang.Integer ( int ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.GeospatialIndex org.springframework.data.mongodb.core.index.GeospatialIndex ( int int ) { this . java.lang.Integer = java.lang.Integer . java.lang.Integer ( int ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.GeospatialIndex org.springframework.data.mongodb.core.index.GeospatialIndex ( GeoSpatialIndexType org.springframework.data.mongodb.core.index.GeoSpatialIndexType ) { Assert . notNull ( org.springframework.data.mongodb.core.index.GeoSpatialIndexType , STRING ) ; this . org.springframework.data.mongodb.core.index.GeoSpatialIndexType = org.springframework.data.mongodb.core.index.GeoSpatialIndexType ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.GeospatialIndex org.springframework.data.mongodb.core.index.GeospatialIndex ( double double ) { this . java.lang.Double = double ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.GeospatialIndex org.springframework.data.mongodb.core.index.GeospatialIndex ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.GeospatialIndex org.springframework.data.mongodb.core.index.GeospatialIndex ( IndexFilter org.springframework.data.mongodb.core.index.IndexFilter ) { this . org.springframework.data.mongodb.core.index.IndexFilter = org.springframework.data.mongodb.core.index.IndexFilter ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.Document org.springframework.data.mongodb.core.index.Document ( ) { Document org.springframework.data.mongodb.core.index.Document = new Document ( ) ; switch ( org.springframework.data.mongodb.core.index.GeoSpatialIndexType ) { case GEO_2D : org.springframework.data.mongodb.core.index.Document . put ( java.lang.String , STRING ) ; break; case GEO_2DSPHERE : org.springframework.data.mongodb.core.index.Document . put ( java.lang.String , STRING ) ; break; case GEO_HAYSTACK : org.springframework.data.mongodb.core.index.Document . put ( java.lang.String , STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } org.springframework.data.mongodb.core.index.Document . put ( java.lang.String , NUMBER ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING + org.springframework.data.mongodb.core.index.GeoSpatialIndexType ) ; } return org.springframework.data.mongodb.core.index.Document ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.Document org.springframework.data.mongodb.core.index.Document ( ) { if ( ! StringUtils . hasText ( java.lang.String ) && java.lang.Integer == null && java.lang.Integer == null && java.lang.Double == null ) { return null ; } Document org.springframework.data.mongodb.core.index.Document = new Document ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.core.index.Document . put ( STRING , java.lang.String ) ; } switch ( org.springframework.data.mongodb.core.index.GeoSpatialIndexType ) { case GEO_2D : if ( java.lang.Integer != null ) { org.springframework.data.mongodb.core.index.Document . put ( STRING , java.lang.Integer ) ; } if ( java.lang.Integer != null ) { org.springframework.data.mongodb.core.index.Document . put ( STRING , java.lang.Integer ) ; } if ( java.lang.Integer != null ) { org.springframework.data.mongodb.core.index.Document . put ( STRING , java.lang.Integer ) ; } break; case GEO_2DSPHERE : break; case GEO_HAYSTACK : if ( java.lang.Double != null ) { org.springframework.data.mongodb.core.index.Document . put ( STRING , java.lang.Double ) ; } break; } if ( org.springframework.data.mongodb.core.index.IndexFilter != null ) { org.springframework.data.mongodb.core.index.Document . put ( STRING , org.springframework.data.mongodb.core.index.IndexFilter . getFilterObject ( ) ) ; } return org.springframework.data.mongodb.core.index.Document ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.core.index.Document ( ) , org.springframework.data.mongodb.core.index.Document ( ) ) ; }  <METHOD_END>
