<METHOD_START> @ Test public void void ( ) { Page < City > sample.data.rest.service.Page<sample.data.rest.service.City> = this . sample.data.rest.service.CityRepository . findAll ( PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( sample.data.rest.service.Page<sample.data.rest.service.City> . getTotalElements ( ) ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { City sample.data.rest.service.City = this . sample.data.rest.service.CityRepository . findByNameAndCountryAllIgnoringCase ( STRING , STRING ) ; assertThat ( sample.data.rest.service.City ) . isNotNull ( ) ; assertThat ( sample.data.rest.service.City . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Page < City > sample.data.rest.service.Page<sample.data.rest.service.City> = this . sample.data.rest.service.CityRepository . findByNameContainingAndCountryContainingAllIgnoringCase ( STRING , STRING , PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( sample.data.rest.service.Page<sample.data.rest.service.City> . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
