<METHOD_START> public < T > T T ( java.io.InputStream java.io.InputStream , T T , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper ) { Assert . notNull ( T , STRING ) ; Assert . notNull ( java.io.InputStream , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.json.ObjectMapper , STRING ) ; try { return java.lang.Object ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.ObjectMapper . readTree ( java.io.InputStream ) , T , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new HttpMessageNotReadableException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( final ObjectNode org.springframework.data.rest.webmvc.json.ObjectNode , T T , final ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper ) { Assert . notNull ( org.springframework.data.rest.webmvc.json.ObjectNode , STRING ) ; Assert . notNull ( T , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.json.ObjectMapper , STRING ) ; java.lang.Class<? extends java.lang.Object> < ? extends java.lang.Object > java.lang.Class<? extends java.lang.Object> = T . java.lang.Class<? extends java.lang.Object> ( ) ; org.springframework.data.rest.webmvc.json.PersistentEntities . getRequiredPersistentEntity ( java.lang.Class<> ) ; try { java.lang.Object java.lang.Object = org.springframework.data.rest.webmvc.json.ObjectMapper . readerFor ( T . java.lang.Class<? extends java.lang.Object> ( ) ) . readValue ( org.springframework.data.rest.webmvc.json.ObjectNode ) ; return ( T ) java.lang.Object ( java.lang.Object , T , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new HttpMessageNotReadableException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> < T > T T ( T T , T T , final ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper ) { Assert . notNull ( org.springframework.data.rest.webmvc.json.ObjectMapper , STRING ) ; if ( T == null || T == null ) { return T ; } java.lang.Class<? extends java.lang.Object> < ? extends java.lang.Object > java.lang.Class<? extends java.lang.Object> = T . java.lang.Class<? extends java.lang.Object> ( ) ; return org.springframework.data.rest.webmvc.json.PersistentEntities . getPersistentEntity ( java.lang.Class<> ) . map ( it -> { MergingPropertyHandler propertyHandler = new MergingPropertyHandler ( source , target , it , mapper ) ; it . doWithProperties ( propertyHandler ) ; it . doWithAssociations ( new LinkedAssociationSkippingAssociationHandler ( associationLinks , propertyHandler ) ) ; copyRemainingProperties ( propertyHandler . getProperties ( ) , source , target ) ; return target ; } ) . orElse ( T ) ; }  <METHOD_END>
<METHOD_START> private static void void ( MappedProperties org.springframework.data.rest.webmvc.json.MappedProperties , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { PropertyAccessor org.springframework.data.rest.webmvc.json.PropertyAccessor = PropertyAccessorFactory . forDirectFieldAccess ( java.lang.Object ) ; PropertyAccessor org.springframework.data.rest.webmvc.json.PropertyAccessor = PropertyAccessorFactory . forBeanPropertyAccess ( java.lang.Object ) ; PropertyAccessor org.springframework.data.rest.webmvc.json.PropertyAccessor = PropertyAccessorFactory . forDirectFieldAccess ( java.lang.Object ) ; PropertyAccessor org.springframework.data.rest.webmvc.json.PropertyAccessor = PropertyAccessorFactory . forBeanPropertyAccess ( java.lang.Object ) ; for ( java.lang.String java.lang.String : org.springframework.data.rest.webmvc.json.MappedProperties . getSpringDataUnmappedProperties ( ) ) { if ( org.springframework.data.rest.webmvc.json.PropertyAccessor . isWritableProperty ( java.lang.String ) ) { org.springframework.data.rest.webmvc.json.PropertyAccessor . setPropertyValue ( java.lang.String , org.springframework.data.rest.webmvc.json.PropertyAccessor . getPropertyValue ( java.lang.String ) ) ; continue; } if ( org.springframework.data.rest.webmvc.json.PropertyAccessor . isWritableProperty ( java.lang.String ) && org.springframework.data.rest.webmvc.json.PropertyAccessor . isReadableProperty ( java.lang.String ) ) { org.springframework.data.rest.webmvc.json.PropertyAccessor . setPropertyValue ( java.lang.String , org.springframework.data.rest.webmvc.json.PropertyAccessor . getPropertyValue ( java.lang.String ) ) ; } } }  <METHOD_END>
<METHOD_START> public < T > T T ( ObjectNode org.springframework.data.rest.webmvc.json.ObjectNode , T T , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper ) { try { return java.lang.Object ( org.springframework.data.rest.webmvc.json.ObjectNode , T , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new HttpMessageNotReadableException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) < T > T T ( ObjectNode org.springframework.data.rest.webmvc.json.ObjectNode , T T , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper ) throws java.lang.Exception { Assert . notNull ( org.springframework.data.rest.webmvc.json.ObjectNode , STRING ) ; Assert . notNull ( T , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.json.ObjectMapper , STRING ) ; java.util.Optional<org.springframework.data.rest.webmvc.json.PersistentEntity<?,? extends org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> < PersistentEntity < ? , ? extends PersistentProperty < ? > > > java.util.Optional<org.springframework.data.rest.webmvc.json.PersistentEntity<?,? extends org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> = org.springframework.data.rest.webmvc.json.PersistentEntities . getPersistentEntity ( T . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( ! java.util.Optional<org.springframework.data.rest.webmvc.json.PersistentEntity<?,? extends org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> . isPresent ( ) ) { return org.springframework.data.rest.webmvc.json.ObjectMapper . readerForUpdating ( T ) . readValue ( org.springframework.data.rest.webmvc.json.ObjectNode ) ; } PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.json.PersistentEntity<?,?> = java.util.Optional<org.springframework.data.rest.webmvc.json.PersistentEntity<?,? extends org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> . get ( ) ; MappedProperties org.springframework.data.rest.webmvc.json.MappedProperties = MappedProperties . fromJacksonProperties ( org.springframework.data.rest.webmvc.json.PersistentEntity<,> , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; for ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> < java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode> < java.lang.String , JsonNode > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> = org.springframework.data.rest.webmvc.json.ObjectNode . fields ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> . hasNext ( ) ;) { java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode> < java.lang.String , JsonNode > java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode> = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> . next ( ) ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode> . getValue ( ) ; java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode> . getKey ( ) ; if ( ! org.springframework.data.rest.webmvc.json.MappedProperties . hasPersistentPropertyForField ( java.lang.String ) ) { continue; } PersistentProperty < ? > org.springframework.data.rest.webmvc.json.PersistentProperty<?> = org.springframework.data.rest.webmvc.json.MappedProperties . getPersistentProperty ( java.lang.String ) ; PersistentPropertyAccessor org.springframework.data.rest.webmvc.json.PersistentPropertyAccessor = org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getPropertyAccessor ( T ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.rest.webmvc.json.PersistentPropertyAccessor . getProperty ( org.springframework.data.rest.webmvc.json.PersistentProperty<> ) ; if ( ! java.util.Optional<java.lang.Object> . boolean ( ) ) { continue; } java.util.Optional<java.lang.Object> . void ( java.lang.Object -> { if ( org.springframework.data.rest.webmvc.json.JsonNode . isArray ( ) ) { if ( boolean ( org.springframework.data.rest.webmvc.json.JsonNode , java.lang.Object , org.springframework.data.rest.webmvc.json.ObjectMapper , org.springframework.data.rest.webmvc.json.PersistentProperty<> . getTypeInformation ( ) ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> . remove ( ) ; } return; } if ( org.springframework.data.rest.webmvc.json.JsonNode . isObject ( ) ) { if ( org.springframework.data.rest.webmvc.json.Associations . isLinkableAssociation ( org.springframework.data.rest.webmvc.json.PersistentProperty<> ) ) { return; } ObjectNode org.springframework.data.rest.webmvc.json.ObjectNode = ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode ; if ( org.springframework.data.rest.webmvc.json.PersistentProperty<> . isMap ( ) ) { if ( ! org.springframework.data.rest.webmvc.json.ObjectNode . fieldNames ( ) . hasNext ( ) ) { return; } void ( ( ) void ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object , org.springframework.data.rest.webmvc.json.ObjectNode , org.springframework.data.rest.webmvc.json.ObjectMapper , org.springframework.data.rest.webmvc.json.PersistentProperty<> . getTypeInformation ( ) ) ) ; if ( ! org.springframework.data.rest.webmvc.json.ObjectNode . fieldNames ( ) . hasNext ( ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> . remove ( ) ; } return; } if ( org.springframework.data.rest.webmvc.json.PersistentProperty<> . isEntity ( ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> . remove ( ) ; void ( ( ) java.lang.Object ( org.springframework.data.rest.webmvc.json.ObjectNode , java.lang.Object , org.springframework.data.rest.webmvc.json.ObjectMapper ) ) ; } } } ) ; } return org.springframework.data.rest.webmvc.json.ObjectMapper . readerForUpdating ( T ) . readValue ( org.springframework.data.rest.webmvc.json.ObjectNode ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( JsonNode org.springframework.data.rest.webmvc.json.JsonNode , java.lang.Object java.lang.Object , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper , TypeInformation < ? > org.springframework.data.rest.webmvc.json.TypeInformation<?> ) { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> ( java.lang.Object ) ; if ( java.util.Collection<java.lang.Object> == null ) { return false ; } return void ( ( ) boolean ( ( ArrayNode ) org.springframework.data.rest.webmvc.json.JsonNode , java.util.Collection<java.lang.Object> , org.springframework.data.rest.webmvc.json.ObjectMapper , org.springframework.data.rest.webmvc.json.TypeInformation<> . getComponentType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ArrayNode org.springframework.data.rest.webmvc.json.ArrayNode , java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper , java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> ) throws java.lang.Exception { Assert . notNull ( org.springframework.data.rest.webmvc.json.ArrayNode , STRING ) ; Assert . notNull ( java.util.Collection<java.lang.Object> , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.json.ObjectMapper , STRING ) ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( java.util.Collection<java.lang.Object> ) . java.util.Iterator<java.lang.Object> ( ) ; boolean boolean = false ; for ( JsonNode org.springframework.data.rest.webmvc.json.JsonNode : org.springframework.data.rest.webmvc.json.ArrayNode ) { if ( ! java.util.Iterator<java.lang.Object> . boolean ( ) ) { java.util.Collection<java.lang.Object> . boolean ( org.springframework.data.rest.webmvc.json.ObjectMapper . treeToValue ( org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.TypeInformation<?> ( null , java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> ) . getType ( ) ) ) ; continue; } java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( ArrayNode .class . boolean ( org.springframework.data.rest.webmvc.json.JsonNode ) ) { return boolean ( org.springframework.data.rest.webmvc.json.JsonNode , java.lang.Object , org.springframework.data.rest.webmvc.json.ObjectMapper , org.springframework.data.rest.webmvc.json.TypeInformation<?> ( java.util.Iterator<java.lang.Object> , java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> ) ) ; } if ( ObjectNode .class . boolean ( org.springframework.data.rest.webmvc.json.JsonNode ) ) { boolean = true ; java.lang.Object ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , java.lang.Object , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; } } while ( java.util.Iterator<java.lang.Object> . boolean ( ) ) { java.util.Collection<java.lang.Object> . boolean ( java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> , ObjectNode org.springframework.data.rest.webmvc.json.ObjectNode , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper , TypeInformation < ? > org.springframework.data.rest.webmvc.json.TypeInformation<?> ) throws java.lang.Exception { if ( java.util.Map<java.lang.Object,java.lang.Object> == null ) { return; } java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> < java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode> < java.lang.String , JsonNode > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> = org.springframework.data.rest.webmvc.json.ObjectNode . fields ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.data.rest.webmvc.json.TypeInformation<> . getComponentType ( ) ) ; java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> = org.springframework.data.rest.webmvc.json.TypeInformation<> . getMapValueType ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> . hasNext ( ) ) { java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode> < java.lang.String , JsonNode > java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode> = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> . next ( ) ; JsonNode org.springframework.data.rest.webmvc.json.JsonNode = java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode> . getValue ( ) ; java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode> . getKey ( ) ; java.lang.Object java.lang.Object = org.springframework.data.rest.webmvc.json.ObjectMapper . readValue ( java.lang.String ( java.lang.String ) , java.lang.Class<> ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object ) ; TypeInformation < ? > org.springframework.data.rest.webmvc.json.TypeInformation<?> = org.springframework.data.rest.webmvc.json.TypeInformation<?> ( java.lang.Object , java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> ) ; if ( org.springframework.data.rest.webmvc.json.JsonNode instanceof ObjectNode && java.lang.Object != null ) { java.lang.Object ( ( ObjectNode ) org.springframework.data.rest.webmvc.json.JsonNode , java.lang.Object , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; } else if ( org.springframework.data.rest.webmvc.json.JsonNode instanceof ArrayNode && java.lang.Object != null ) { boolean ( org.springframework.data.rest.webmvc.json.JsonNode , java.lang.Object , org.springframework.data.rest.webmvc.json.ObjectMapper , org.springframework.data.rest.webmvc.json.TypeInformation<?> ( java.lang.Object , java.util.Optional . java.util.Optional ( org.springframework.data.rest.webmvc.json.TypeInformation<> ) ) ) ; } else { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , org.springframework.data.rest.webmvc.json.ObjectMapper . treeToValue ( org.springframework.data.rest.webmvc.json.JsonNode , org.springframework.data.rest.webmvc.json.TypeInformation<> . getType ( ) ) ) ; } java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.data.rest.webmvc.json.JsonNode>> . remove ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Optional<java.util.Map<java.lang.Object,java.lang.Object>> < java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > > java.util.Optional<java.util.Map<java.lang.Object,java.lang.Object>> ( PersistentProperty < ? > org.springframework.data.rest.webmvc.json.PersistentProperty<?> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper ) { return java.util.Optional<java.lang.Object> . java.util.Optional<java.util.Map<java.lang.Object,java.lang.Object>> ( java.lang.Object -> { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.util.Optional<java.lang.Object> . java.lang.Object ( null ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = java.util.Map<java.lang.Object,java.lang.Object> == null ? CollectionFactory . createMap ( java.util.Map .class , java.util.Map<java.lang.Object,java.lang.Object> . int ( ) ) : CollectionFactory . createApproximateMap ( java.util.Map<java.lang.Object,java.lang.Object> , java.util.Map<java.lang.Object,java.lang.Object> . int ( ) ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.Object,java.lang.Object> == null ? null : java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) , java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) , java.lang.Object , org.springframework.data.rest.webmvc.json.ObjectMapper ) ) ; } if ( java.util.Map<java.lang.Object,java.lang.Object> == null ) { return java.util.Map<java.lang.Object,java.lang.Object> ; } try { java.util.Map<java.lang.Object,java.lang.Object> . void ( ) ; java.util.Map<java.lang.Object,java.lang.Object> . void ( java.util.Map<java.lang.Object,java.lang.Object> ) ; return java.util.Map<java.lang.Object,java.lang.Object> ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { return java.util.Map<java.lang.Object,java.lang.Object> ; } } ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.util.Collection<java.lang.Object>> < java.util.Collection<java.lang.Object> < java.lang.Object > > java.util.Optional<java.util.Collection<java.lang.Object>> ( PersistentProperty < ? > org.springframework.data.rest.webmvc.json.PersistentProperty<?> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper ) { return java.util.Optional<java.lang.Object> . java.util.Optional<java.util.Collection<java.lang.Object>> ( java.lang.Object -> { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> ( java.lang.Object ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> ( java.util.Optional<java.lang.Object> . java.lang.Object ( null ) ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> == null ? CollectionFactory . createCollection ( java.util.Collection .class , java.util.Collection<java.lang.Object> . int ( ) ) : CollectionFactory . createApproximateCollection ( java.util.Collection<java.lang.Object> , java.util.Collection<java.lang.Object> . int ( ) ) ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Collection<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) ; java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> = java.util.Collection<java.lang.Object> == null ? java.util.Collections . java.util.Iterator<java.lang.Object> ( ) : java.util.Collection<java.lang.Object> . java.util.Iterator<java.lang.Object> ( ) ; while ( java.util.Iterator<java.lang.Object> . boolean ( ) ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . boolean ( ) ? java.util.Iterator<java.lang.Object> . java.lang.Object ( ) : null ; java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( java.lang.Object , java.lang.Object , org.springframework.data.rest.webmvc.json.ObjectMapper ) ) ; } if ( java.util.Collection<java.lang.Object> == null ) { return java.util.Collection<java.lang.Object> ; } try { java.util.Collection<java.lang.Object> . void ( ) ; java.util.Collection<java.lang.Object> . boolean ( java.util.Collection<java.lang.Object> ) ; return java.util.Collection<java.lang.Object> ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { return java.util.Collection<java.lang.Object> ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.util.Collection ) { return ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { return java.util.Arrays . java.util.List ( ObjectUtils . toObjectArray ( java.lang.Object ) ) ; } else { return java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( java.lang.Object instanceof java.util.Collection ) { return ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ; } if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { return java.util.Arrays . java.util.List<java.lang.Object> ( ( java.lang.Object [] ) java.lang.Object ) ; } return null ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String == null ? null : STRING . java.lang.String ( java.lang.String ) . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private static java.lang.Class<?> < ? > java.lang.Class<?> ( java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> ) { return java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> . map ( it -> it . getType ( ) ) . orElse ( ( java.lang.Class ) java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.rest.webmvc.json.TypeInformation<?> < ? > org.springframework.data.rest.webmvc.json.TypeInformation<?> ( java.lang.Object java.lang.Object , java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> ) { return java.util.Optional<org.springframework.data.rest.webmvc.json.TypeInformation<?>> . map ( it -> { if ( value == null ) { return it ; } if ( Enum .class . isInstance ( value ) ) { return ClassTypeInformation . from ( ( ( Enum < ? > ) value ) . getDeclaringClass ( ) ) ; } return value . getClass ( ) . equals ( it . getType ( ) ) ? it : ClassTypeInformation . from ( value . getClass ( ) ) ; } ) . orElse ( ClassTypeInformation . OBJECT ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Association < ? extends PersistentProperty < ? > > org.springframework.data.rest.webmvc.json.Association<? extends org.springframework.data.rest.webmvc.json.PersistentProperty<?>> ) { if ( org.springframework.data.rest.webmvc.json.Associations . isLinkableAssociation ( org.springframework.data.rest.webmvc.json.Association<> ) ) { return; } org.springframework.data.rest.webmvc.json.SimplePropertyHandler . doWithPersistentProperty ( org.springframework.data.rest.webmvc.json.Association<> . getInverse ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.json.PersistentEntity<?,?> , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.json.PersistentEntity<,> , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.json.ObjectMapper , STRING ) ; this . org.springframework.data.rest.webmvc.json.MappedProperties = MappedProperties . fromJacksonProperties ( org.springframework.data.rest.webmvc.json.PersistentEntity<,> , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; this . org.springframework.data.rest.webmvc.json.PersistentPropertyAccessor = new ConvertingPropertyAccessor ( org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getPropertyAccessor ( java.lang.Object ) , new DefaultConversionService ( ) ) ; this . org.springframework.data.rest.webmvc.json.PersistentPropertyAccessor = org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getPropertyAccessor ( java.lang.Object ) ; this . org.springframework.data.rest.webmvc.json.ObjectMapper = org.springframework.data.rest.webmvc.json.ObjectMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PersistentProperty < ? > org.springframework.data.rest.webmvc.json.PersistentProperty<?> ) { if ( org.springframework.data.rest.webmvc.json.PersistentProperty<> . isIdProperty ( ) || org.springframework.data.rest.webmvc.json.PersistentProperty<> . isVersionProperty ( ) || ! org.springframework.data.rest.webmvc.json.PersistentProperty<> . isWritable ( ) ) { return; } if ( ! org.springframework.data.rest.webmvc.json.MappedProperties . isMappedProperty ( org.springframework.data.rest.webmvc.json.PersistentProperty<> ) ) { return; } java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.rest.webmvc.json.PersistentPropertyAccessor . getProperty ( org.springframework.data.rest.webmvc.json.PersistentProperty<> ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.rest.webmvc.json.PersistentPropertyAccessor . getProperty ( org.springframework.data.rest.webmvc.json.PersistentProperty<> ) ; java.util.Optional<?> < ? > java.util.Optional<?> = java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; if ( org.springframework.data.rest.webmvc.json.PersistentProperty<> . isMap ( ) ) { java.util.Optional<?> = java.util.Optional<java.util.Map<java.lang.Object,java.lang.Object>> ( org.springframework.data.rest.webmvc.json.PersistentProperty<> , java.util.Optional<java.lang.Object> , java.util.Optional<java.lang.Object> , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; } else if ( org.springframework.data.rest.webmvc.json.PersistentProperty<> . isCollectionLike ( ) ) { java.util.Optional<?> = java.util.Optional<java.util.Collection<java.lang.Object>> ( org.springframework.data.rest.webmvc.json.PersistentProperty<> , java.util.Optional<java.lang.Object> , java.util.Optional<java.lang.Object> , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; } else if ( org.springframework.data.rest.webmvc.json.PersistentProperty<> . isEntity ( ) ) { java.util.Optional<?> = java.lang.Object ( java.util.Optional<java.lang.Object> , java.util.Optional<java.lang.Object> , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; } else { java.util.Optional<?> = java.util.Optional<java.lang.Object> ; } org.springframework.data.rest.webmvc.json.PersistentPropertyAccessor . setProperty ( org.springframework.data.rest.webmvc.json.PersistentProperty<> , java.util.Optional<> ) ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( org.springframework.data.rest.webmvc.json.DomainObjectReader.SupplierWithException<T> < T > org.springframework.data.rest.webmvc.json.DomainObjectReader.SupplierWithException<T> ) { try { return org.springframework.data.rest.webmvc.json.DomainObjectReader.SupplierWithException<T> . T ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( org.springframework.data.rest.webmvc.json.DomainObjectReader.RunnableWithException org.springframework.data.rest.webmvc.json.DomainObjectReader.RunnableWithException ) { try { org.springframework.data.rest.webmvc.json.DomainObjectReader.RunnableWithException . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> void void ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> T T ( ) java.lang.Exception ;  <METHOD_END>
