<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.jdbc.mysql.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { new TransactionTemplate ( this . org.springframework.integration.jdbc.mysql.PlatformTransactionManager ) . execute ( status -> { this . jdbcTemplate . update ( STRING ) ; this . jdbcTemplate . update ( STRING ) ; this . jdbcTemplate . update ( STRING ) ; return null ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new TransactionTemplate ( this . org.springframework.integration.jdbc.mysql.PlatformTransactionManager ) . execute ( status -> { requestChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; return null ; } ) ; assertTrue ( STRING + java.util.concurrent.CountDownLatch . long ( ) , java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( STRING + java.util.concurrent.CountDownLatch . long ( ) , java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( STRING , java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; assertNull ( org.springframework.integration.jdbc.mysql.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.jdbc.mysql.Message<?> ) { java.util.ArrayList<java.lang.Object> < java.lang.Object > java.util.ArrayList<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.ArrayList<java.lang.Object> . boolean ( org.springframework.integration.jdbc.mysql.Message<> ) ; java.util.ArrayList<java.lang.Object> . boolean ( org.springframework.integration.jdbc.mysql.Message<> ) ; return java.util.ArrayList<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.jdbc.mysql.Message<?> ) { int int = new IntegrationMessageHeaderAccessor ( org.springframework.integration.jdbc.mysql.Message<> ) . getSequenceNumber ( ) ; org.springframework.integration.jdbc.mysql.Log . info ( STRING + int + STRING + org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . getId ( ) ) ; if ( int != NUMBER ) { java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; } java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.jdbc.mysql.Message<?> ) { int int = new IntegrationMessageHeaderAccessor ( org.springframework.integration.jdbc.mysql.Message<> ) . getSequenceNumber ( ) ; org.springframework.integration.jdbc.mysql.Log . info ( STRING + int + STRING + org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . getId ( ) ) ; if ( int != NUMBER ) { java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; } java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
