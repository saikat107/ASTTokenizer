<METHOD_START> @ Bean @ ConditionalOnMissingBean ( DataSourceConnectionProvider .class ) public org.springframework.boot.autoconfigure.jooq.DataSourceConnectionProvider org.springframework.boot.autoconfigure.jooq.DataSourceConnectionProvider ( javax.sql.DataSource javax.sql.DataSource ) { return new DataSourceConnectionProvider ( new TransactionAwareDataSourceProxy ( javax.sql.DataSource ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( PlatformTransactionManager .class ) public org.springframework.boot.autoconfigure.jooq.SpringTransactionProvider org.springframework.boot.autoconfigure.jooq.SpringTransactionProvider ( PlatformTransactionManager org.springframework.boot.autoconfigure.jooq.PlatformTransactionManager ) { return new SpringTransactionProvider ( org.springframework.boot.autoconfigure.jooq.PlatformTransactionManager ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.jooq.DefaultExecuteListenerProvider org.springframework.boot.autoconfigure.jooq.DefaultExecuteListenerProvider ( ) { return new DefaultExecuteListenerProvider ( new JooqExceptionTranslator ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( JooqProperties org.springframework.boot.autoconfigure.jooq.JooqProperties , ConnectionProvider org.springframework.boot.autoconfigure.jooq.ConnectionProvider , ObjectProvider < TransactionProvider > org.springframework.boot.autoconfigure.jooq.ObjectProvider<org.springframework.boot.autoconfigure.jooq.TransactionProvider> , ObjectProvider < RecordMapperProvider > org.springframework.boot.autoconfigure.jooq.ObjectProvider<org.springframework.boot.autoconfigure.jooq.RecordMapperProvider> , ObjectProvider < Settings > org.springframework.boot.autoconfigure.jooq.ObjectProvider<org.springframework.boot.autoconfigure.jooq.Settings> , ObjectProvider < RecordListenerProvider [] > org.springframework.boot.autoconfigure.jooq.ObjectProvider<org.springframework.boot.autoconfigure.jooq.RecordListenerProvider[]> , ExecuteListenerProvider [] org.springframework.boot.autoconfigure.jooq.ExecuteListenerProvider[] , ObjectProvider < VisitListenerProvider [] > org.springframework.boot.autoconfigure.jooq.ObjectProvider<org.springframework.boot.autoconfigure.jooq.VisitListenerProvider[]> ) { this . org.springframework.boot.autoconfigure.jooq.JooqProperties = org.springframework.boot.autoconfigure.jooq.JooqProperties ; this . org.springframework.boot.autoconfigure.jooq.ConnectionProvider = org.springframework.boot.autoconfigure.jooq.ConnectionProvider ; this . org.springframework.boot.autoconfigure.jooq.TransactionProvider = org.springframework.boot.autoconfigure.jooq.ObjectProvider<org.springframework.boot.autoconfigure.jooq.TransactionProvider> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.jooq.RecordMapperProvider = org.springframework.boot.autoconfigure.jooq.ObjectProvider<org.springframework.boot.autoconfigure.jooq.RecordMapperProvider> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.jooq.Settings = org.springframework.boot.autoconfigure.jooq.ObjectProvider<org.springframework.boot.autoconfigure.jooq.Settings> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.jooq.RecordListenerProvider[] = org.springframework.boot.autoconfigure.jooq.ObjectProvider<org.springframework.boot.autoconfigure.jooq.RecordListenerProvider[]> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.jooq.ExecuteListenerProvider[] = org.springframework.boot.autoconfigure.jooq.ExecuteListenerProvider[] ; this . org.springframework.boot.autoconfigure.jooq.VisitListenerProvider[] = org.springframework.boot.autoconfigure.jooq.ObjectProvider<org.springframework.boot.autoconfigure.jooq.VisitListenerProvider[]> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.jooq.DefaultDSLContext org.springframework.boot.autoconfigure.jooq.DefaultDSLContext ( org . org.jooq . org.jooq org.jooq.Configuration ) { return new DefaultDSLContext ( org.jooq.Configuration ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( org . org.jooq . org.jooq .class ) public org.springframework.boot.autoconfigure.jooq.DefaultConfiguration org.springframework.boot.autoconfigure.jooq.DefaultConfiguration ( ) { DefaultConfiguration org.springframework.boot.autoconfigure.jooq.DefaultConfiguration = new DefaultConfiguration ( ) ; if ( this . org.springframework.boot.autoconfigure.jooq.JooqProperties . getSqlDialect ( ) != null ) { org.springframework.boot.autoconfigure.jooq.DefaultConfiguration . set ( this . org.springframework.boot.autoconfigure.jooq.JooqProperties . getSqlDialect ( ) ) ; } org.springframework.boot.autoconfigure.jooq.DefaultConfiguration . set ( this . org.springframework.boot.autoconfigure.jooq.ConnectionProvider ) ; if ( this . org.springframework.boot.autoconfigure.jooq.TransactionProvider != null ) { org.springframework.boot.autoconfigure.jooq.DefaultConfiguration . set ( this . org.springframework.boot.autoconfigure.jooq.TransactionProvider ) ; } if ( this . org.springframework.boot.autoconfigure.jooq.RecordMapperProvider != null ) { org.springframework.boot.autoconfigure.jooq.DefaultConfiguration . set ( this . org.springframework.boot.autoconfigure.jooq.RecordMapperProvider ) ; } if ( this . org.springframework.boot.autoconfigure.jooq.Settings != null ) { org.springframework.boot.autoconfigure.jooq.DefaultConfiguration . set ( this . org.springframework.boot.autoconfigure.jooq.Settings ) ; } org.springframework.boot.autoconfigure.jooq.DefaultConfiguration . set ( this . org.springframework.boot.autoconfigure.jooq.RecordListenerProvider[] ) ; org.springframework.boot.autoconfigure.jooq.DefaultConfiguration . set ( this . org.springframework.boot.autoconfigure.jooq.ExecuteListenerProvider[] ) ; org.springframework.boot.autoconfigure.jooq.DefaultConfiguration . set ( this . org.springframework.boot.autoconfigure.jooq.VisitListenerProvider[] ) ; return org.springframework.boot.autoconfigure.jooq.DefaultConfiguration ; }  <METHOD_END>
