<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.AnnotationConfigApplicationContext org.springframework.statemachine.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PseudoState < TestStates , TestEvents > org.springframework.statemachine.PseudoState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new DefaultPseudoState < TestStates , TestEvents > ( PseudoStateKind . INITIAL ) ; TestEntryAction org.springframework.statemachine.TestEntryAction = new TestEntryAction ( STRING ) ; TestExitAction org.springframework.statemachine.TestExitAction = new TestExitAction ( STRING ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.TestEntryAction ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.TestExitAction ) ; State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . SI , org.springframework.statemachine.PseudoState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . S1 , null , java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> ) ; State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . S2 ) ; State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . S3 ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < State < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < State < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Transition < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Transition < TestStates , TestEvents > > ( ) ; DefaultExternalTransition < TestStates , TestEvents > org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new DefaultExternalTransition < TestStates , TestEvents > ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , null , TestEvents . E1 , null , new EventTrigger < TestStates , TestEvents > ( TestEvents . E1 ) ) ; DefaultExternalTransition < TestStates , TestEvents > org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new DefaultExternalTransition < TestStates , TestEvents > ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , null , TestEvents . E2 , null , new EventTrigger < TestStates , TestEvents > ( TestEvents . E2 ) ) ; DefaultExternalTransition < TestStates , TestEvents > org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new DefaultExternalTransition < TestStates , TestEvents > ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , null , TestEvents . E3 , null , new EventTrigger < TestStates , TestEvents > ( TestEvents . E3 ) ) ; java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; SyncTaskExecutor org.springframework.statemachine.SyncTaskExecutor = new SyncTaskExecutor ( ) ; BeanFactory org.springframework.statemachine.BeanFactory = new DefaultListableBeanFactory ( ) ; Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new InitialTransition < TestStates , TestEvents > ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new ObjectStateMachine < TestStates , TestEvents > ( java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , null , null , null ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setTaskExecutor ( org.springframework.statemachine.SyncTaskExecutor ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setBeanFactory ( org.springframework.statemachine.BeanFactory ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . afterPropertiesSet ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; java.util.Collection<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Region < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Region < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; RegionState < TestStates , TestEvents > org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new RegionState < TestStates , TestEvents > ( TestStates . S11 , java.util.Collection<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> ) ; assertThat ( org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . isSimple ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . isComposite ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . isOrthogonal ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . isSubmachineState ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getIds ( ) , containsInAnyOrder ( TestStates . SI , TestStates . S11 ) ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( entryActionS1 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( exitActionS1 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( entryActionS1 . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( exitActionS1 . stateContexts . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SyncTaskExecutor org.springframework.statemachine.SyncTaskExecutor = new SyncTaskExecutor ( ) ; BeanFactory org.springframework.statemachine.BeanFactory = new DefaultListableBeanFactory ( ) ; PseudoState < TestStates , TestEvents > org.springframework.statemachine.PseudoState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new DefaultPseudoState < TestStates , TestEvents > ( PseudoStateKind . INITIAL ) ; State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . SI , org.springframework.statemachine.PseudoState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; TestEntryAction org.springframework.statemachine.TestEntryAction = new TestEntryAction ( STRING ) ; TestExitAction org.springframework.statemachine.TestExitAction = new TestExitAction ( STRING ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.TestEntryAction ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.TestExitAction ) ; State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . S111 , null , java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , org.springframework.statemachine.PseudoState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; TestEntryAction org.springframework.statemachine.TestEntryAction = new TestEntryAction ( STRING ) ; TestExitAction org.springframework.statemachine.TestExitAction = new TestExitAction ( STRING ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.TestEntryAction ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.TestExitAction ) ; State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . S112 , null , java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> ) ; TestEntryAction org.springframework.statemachine.TestEntryAction = new TestEntryAction ( STRING ) ; TestExitAction org.springframework.statemachine.TestExitAction = new TestExitAction ( STRING ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.TestEntryAction ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Action < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.TestExitAction ) ; State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new EnumState < TestStates , TestEvents > ( TestStates . S121 , null , java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , java.util.Collection<org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , org.springframework.statemachine.PseudoState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < State < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < State < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Transition < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Transition < TestStates , TestEvents > > ( ) ; DefaultExternalTransition < TestStates , TestEvents > org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new DefaultExternalTransition < TestStates , TestEvents > ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , null , TestEvents . E2 , null , new EventTrigger < TestStates , TestEvents > ( TestEvents . E2 ) ) ; java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new InitialTransition < TestStates , TestEvents > ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new ObjectStateMachine < TestStates , TestEvents > ( java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , null , null , null ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setTaskExecutor ( org.springframework.statemachine.SyncTaskExecutor ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setBeanFactory ( org.springframework.statemachine.BeanFactory ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . afterPropertiesSet ( ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < State < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < State < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Transition < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Transition < TestStates , TestEvents > > ( ) ; DefaultExternalTransition < TestStates , TestEvents > org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new DefaultExternalTransition < TestStates , TestEvents > ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , null , TestEvents . E3 , null , new EventTrigger < TestStates , TestEvents > ( TestEvents . E3 ) ) ; java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new InitialTransition < TestStates , TestEvents > ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new ObjectStateMachine < TestStates , TestEvents > ( java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , null , null , null ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setTaskExecutor ( org.springframework.statemachine.SyncTaskExecutor ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setBeanFactory ( org.springframework.statemachine.BeanFactory ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . afterPropertiesSet ( ) ; java.util.Collection<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Region < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Region < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; RegionState < TestStates , TestEvents > org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new RegionState < TestStates , TestEvents > ( TestStates . S11 , java.util.Collection<org.springframework.statemachine.Region<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , null , null , null , org.springframework.statemachine.PseudoState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < State < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < State < TestStates , TestEvents > > ( ) ; java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Transition < TestStates , TestEvents > > java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> = new java.util.ArrayList<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> < Transition < TestStates , TestEvents > > ( ) ; DefaultExternalTransition < TestStates , TestEvents > org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new DefaultExternalTransition < TestStates , TestEvents > ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , null , TestEvents . E1 , null , new EventTrigger < TestStates , TestEvents > ( TestEvents . E1 ) ) ; java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.DefaultExternalTransition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new InitialTransition < TestStates , TestEvents > ( org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = new ObjectStateMachine < TestStates , TestEvents > ( java.util.Collection<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , java.util.Collection<org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> , org.springframework.statemachine.RegionState<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , null , null , null ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setTaskExecutor ( org.springframework.statemachine.SyncTaskExecutor ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setBeanFactory ( org.springframework.statemachine.BeanFactory ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . afterPropertiesSet ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; assertThat ( entryActionS111 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( exitActionS111 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( entryActionS121 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( exitActionS121 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( entryActionS111 . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( exitActionS111 . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( entryActionS121 . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( exitActionS121 . stateContexts . size ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( entryActionS111 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( exitActionS111 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( entryActionS112 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( exitActionS112 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( entryActionS111 . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( exitActionS111 . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( entryActionS112 . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( exitActionS112 . stateContexts . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.RegionMachineTests.Config1 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , notNullValue ( ) ) ; TestStateMachineListener org.springframework.statemachine.TestStateMachineListener = context . getBean ( TestStateMachineListener .class ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.TestStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; assertThat ( listener . stateMachineStartedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S10 , TestStates . S20 ) ) ; org.springframework.statemachine.TestStateMachineListener . reset ( NUMBER , NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( listener . stateChangedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S11 , TestStates . S21 ) ) ; org.springframework.statemachine.TestStateMachineListener . reset ( NUMBER , NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( listener . stateChangedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S10 , TestStates . S21 ) ) ; org.springframework.statemachine.TestStateMachineListener . reset ( NUMBER , NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( listener . stateChangedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S10 , TestStates . S20 ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.RegionMachineTests.Config2 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , notNullValue ( ) ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = TestUtils . readField ( STRING , org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; assertThat ( java.util.Collection<java.lang.Object> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.Collection<java.lang.Object> , containsInAnyOrder ( instanceOf ( ObjectState .class ) , instanceOf ( ObjectState .class ) , instanceOf ( RegionState .class ) ) ) ; TestStateMachineListener org.springframework.statemachine.TestStateMachineListener = context . getBean ( TestStateMachineListener .class ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.TestStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; org.springframework.statemachine.TestStateMachineListener . reset ( NUMBER , NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( listener . stateChangedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.RegionMachineTests.Config3 .class , BaseConfig2 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , notNullValue ( ) ) ; TestSleepAction org.springframework.statemachine.TestSleepAction = context . getBean ( STRING , TestSleepAction .class ) ; TestSleepAction org.springframework.statemachine.TestSleepAction = context . getBean ( STRING , TestSleepAction .class ) ; TestStateMachineListener org.springframework.statemachine.TestStateMachineListener = context . getBean ( TestStateMachineListener .class ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.TestStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; assertThat ( listener . stateMachineStartedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S10 , TestStates . S20 ) ) ; org.springframework.statemachine.TestStateMachineListener . reset ( NUMBER , NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( listener . stateChangedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S11 , TestStates . S21 ) ) ; org.springframework.statemachine.TestStateMachineListener . reset ( NUMBER , NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( listener . stateChangedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S10 , TestStates . S21 ) ) ; org.springframework.statemachine.TestStateMachineListener . reset ( NUMBER , NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( listener . stateChangedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S10 , TestStates . S20 ) ) ; assertThat ( action1 . now , greaterThan ( NUMBER ) ) ; assertThat ( action2 . now , greaterThan ( NUMBER ) ) ; assertThat ( java.lang.Math . int ( action1 . now - action2 . now ) , lessThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.RegionMachineTests.Config4 .class , BaseConfig2 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , notNullValue ( ) ) ; TestSleepAction org.springframework.statemachine.TestSleepAction = context . getBean ( STRING , TestSleepAction .class ) ; TestSleepAction org.springframework.statemachine.TestSleepAction = context . getBean ( STRING , TestSleepAction .class ) ; TestStateMachineListener org.springframework.statemachine.TestStateMachineListener = context . getBean ( TestStateMachineListener .class ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.TestStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; assertThat ( listener . stateMachineStartedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S10 , TestStates . S20 ) ) ; org.springframework.statemachine.TestStateMachineListener . reset ( NUMBER , NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( listener . stateChangedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S11 , TestStates . S21 ) ) ; assertThat ( action1 . now , greaterThan ( NUMBER ) ) ; assertThat ( action2 . now , greaterThan ( NUMBER ) ) ; assertThat ( java.lang.Math . int ( action1 . now - action2 . now ) , lessThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . S10 ) . state ( TestStates . S10 ) . state ( TestStates . S11 ) . and ( ) . withStates ( ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . S10 ) . target ( TestStates . S11 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S11 ) . target ( TestStates . S10 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S21 ) . target ( TestStates . S20 ) . event ( TestEvents . E3 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestStateMachineListener org.springframework.statemachine.TestStateMachineListener ( ) { return new TestStateMachineListener ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . state ( TestStates . SI ) . state ( TestStates . S2 ) . end ( TestStates . SF ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . state ( TestStates . S30 ) . state ( TestStates . S31 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestStateMachineListener org.springframework.statemachine.TestStateMachineListener ( ) { return new TestStateMachineListener ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . S10 ) . state ( TestStates . S10 ) . state ( TestStates . S11 , org.springframework.statemachine.TestSleepAction ( ) , null ) . and ( ) . withStates ( ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 , org.springframework.statemachine.TestSleepAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . S10 ) . target ( TestStates . S11 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S11 ) . target ( TestStates . S10 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S21 ) . target ( TestStates . S20 ) . event ( TestEvents . E3 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestStateMachineListener org.springframework.statemachine.TestStateMachineListener ( ) { return new TestStateMachineListener ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestSleepAction org.springframework.statemachine.TestSleepAction ( ) { return new TestSleepAction ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestSleepAction org.springframework.statemachine.TestSleepAction ( ) { return new TestSleepAction ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . S10 ) . state ( TestStates . S10 , org.springframework.statemachine.TestSleepAction ( ) , null ) . state ( TestStates . S11 ) . and ( ) . withStates ( ) . initial ( TestStates . S20 ) . state ( TestStates . S20 , org.springframework.statemachine.TestSleepAction ( ) , null ) . state ( TestStates . S21 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . S10 ) . target ( TestStates . S11 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E1 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestStateMachineListener org.springframework.statemachine.TestStateMachineListener ( ) { return new TestStateMachineListener ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestSleepAction org.springframework.statemachine.TestSleepAction ( ) { return new TestSleepAction ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestSleepAction org.springframework.statemachine.TestSleepAction ( ) { return new TestSleepAction ( NUMBER ) ; }  <METHOD_END>
