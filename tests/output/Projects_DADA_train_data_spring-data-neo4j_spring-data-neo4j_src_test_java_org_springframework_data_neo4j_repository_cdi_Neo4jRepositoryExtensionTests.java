<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Set<java.lang.reflect.Type> < java.lang.reflect.Type > java.util.Set<java.lang.reflect.Type> = java.util.Collections . java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) Session .class ) ; org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> = mock ( Bean .class ) ; when ( org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> . getTypes ( ) ) . thenReturn ( java.util.Set<java.lang.reflect.Type> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Neo4jCdiRepositoryExtension org.springframework.data.neo4j.repository.cdi.Neo4jCdiRepositoryExtension = new Neo4jCdiRepositoryExtension ( ) ; org.springframework.data.neo4j.repository.cdi.Neo4jCdiRepositoryExtension . processBean ( org.springframework.data.neo4j.repository.cdi.ProcessBean<org.springframework.data.neo4j.repository.cdi.Session> ( org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> ) ) ; void ( org.springframework.data.neo4j.repository.cdi.Neo4jCdiRepositoryExtension , org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static void void ( Neo4jCdiRepositoryExtension org.springframework.data.neo4j.repository.cdi.Neo4jCdiRepositoryExtension , Bean < Session > org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> ) { java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session>> < java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > , Bean < Session > > java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session>> = ( java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session>> < java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > , Bean < Session > > ) ReflectionTestUtils . getField ( org.springframework.data.neo4j.repository.cdi.Neo4jCdiRepositoryExtension , STRING ) ; assertThat ( java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session>> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session>> . values ( ) , hasItem ( org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static org.springframework.data.neo4j.repository.cdi.ProcessBean<org.springframework.data.neo4j.repository.cdi.Session> < Session > org.springframework.data.neo4j.repository.cdi.ProcessBean<org.springframework.data.neo4j.repository.cdi.Session> ( Bean < Session > org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> ) { ProcessBean < Session > org.springframework.data.neo4j.repository.cdi.ProcessBean<org.springframework.data.neo4j.repository.cdi.Session> = mock ( ProcessBean .class ) ; when ( org.springframework.data.neo4j.repository.cdi.ProcessBean<org.springframework.data.neo4j.repository.cdi.Session> . getBean ( ) ) . thenReturn ( org.springframework.data.neo4j.repository.cdi.Bean<org.springframework.data.neo4j.repository.cdi.Session> ) ; return org.springframework.data.neo4j.repository.cdi.ProcessBean<org.springframework.data.neo4j.repository.cdi.Session> ; }  <METHOD_END>
