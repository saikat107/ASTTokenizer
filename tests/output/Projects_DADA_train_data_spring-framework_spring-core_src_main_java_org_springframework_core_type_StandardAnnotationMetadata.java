<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this( java.lang.Class<> , false ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { super( java.lang.Class<> ); this . java.lang.annotation.Annotation[] = java.lang.Class<> . java.lang.annotation.Annotation[] ( ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : this . java.lang.annotation.Annotation[] ) { java.util.Set<java.lang.String> . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { return ( this . java.lang.annotation.Annotation[] . int > NUMBER ? AnnotatedElementUtils . getMetaAnnotationTypes ( getIntrospectedClass ( ) , java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : this . java.lang.annotation.Annotation[] ) { if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return ( this . java.lang.annotation.Annotation[] . int > NUMBER && AnnotatedElementUtils . hasMetaAnnotationTypes ( getIntrospectedClass ( ) , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return ( this . java.lang.annotation.Annotation[] . int > NUMBER && AnnotatedElementUtils . isAnnotated ( getIntrospectedClass ( ) , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String java.lang.String , boolean boolean ) { return ( this . java.lang.annotation.Annotation[] . int > NUMBER ? AnnotatedElementUtils . getMergedAnnotationAttributes ( getIntrospectedClass ( ) , java.lang.String , boolean , this . boolean ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.type.MultiValueMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > org.springframework.core.type.MultiValueMap<java.lang.String,java.lang.Object> ( java.lang.String java.lang.String ) { return org.springframework.core.type.MultiValueMap<java.lang.String,java.lang.Object> ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.type.MultiValueMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > org.springframework.core.type.MultiValueMap<java.lang.String,java.lang.Object> ( java.lang.String java.lang.String , boolean boolean ) { return ( this . java.lang.annotation.Annotation[] . int > NUMBER ? AnnotatedElementUtils . getAllAnnotationAttributes ( getIntrospectedClass ( ) , java.lang.String , boolean , this . boolean ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { try { java.lang.reflect.Method [] java.lang.reflect.Method[] = getIntrospectedClass ( ) . getDeclaredMethods ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( ! java.lang.reflect.Method . boolean ( ) && java.lang.reflect.Method . java.lang.annotation.Annotation[] ( ) . int > NUMBER && AnnotatedElementUtils . isAnnotated ( java.lang.reflect.Method , java.lang.String ) ) { return true ; } } return false ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + getIntrospectedClass ( ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.type.MethodMetadata> < MethodMetadata > java.util.Set<org.springframework.core.type.MethodMetadata> ( java.lang.String java.lang.String ) { try { java.lang.reflect.Method [] java.lang.reflect.Method[] = getIntrospectedClass ( ) . getDeclaredMethods ( ) ; java.util.Set<org.springframework.core.type.MethodMetadata> < MethodMetadata > java.util.Set<org.springframework.core.type.MethodMetadata> = new java.util.LinkedHashSet<org.springframework.core.type.MethodMetadata> <> ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( ! java.lang.reflect.Method . boolean ( ) && java.lang.reflect.Method . java.lang.annotation.Annotation[] ( ) . int > NUMBER && AnnotatedElementUtils . isAnnotated ( java.lang.reflect.Method , java.lang.String ) ) { java.util.Set<org.springframework.core.type.MethodMetadata> . add ( new StandardMethodMetadata ( java.lang.reflect.Method , this . boolean ) ) ; } } return java.util.Set<org.springframework.core.type.MethodMetadata> ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + getIntrospectedClass ( ) , java.lang.Throwable ) ; } }  <METHOD_END>
