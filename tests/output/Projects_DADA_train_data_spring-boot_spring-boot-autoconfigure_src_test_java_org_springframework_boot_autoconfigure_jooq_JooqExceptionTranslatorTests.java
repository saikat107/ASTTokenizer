<METHOD_START> @ Parameters ( name = STRING ) public static java.lang.Object [] java.lang.Object[] ( ) { return new java.lang.Object [] { new java.lang.Object [] { SQLDialect . DERBY , java.sql.SQLException ( STRING ) } , new java.lang.Object [] { SQLDialect . H2 , java.sql.SQLException ( NUMBER ) } , new java.lang.Object [] { SQLDialect . HSQLDB , java.sql.SQLException ( - NUMBER ) } , new java.lang.Object [] { SQLDialect . MARIADB , java.sql.SQLException ( NUMBER ) } , new java.lang.Object [] { SQLDialect . MYSQL , java.sql.SQLException ( NUMBER ) } , new java.lang.Object [] { SQLDialect . POSTGRES , java.sql.SQLException ( STRING ) } , new java.lang.Object [] { SQLDialect . POSTGRES_9_3 , java.sql.SQLException ( STRING ) } , new java.lang.Object [] { SQLDialect . POSTGRES_9_4 , java.sql.SQLException ( STRING ) } , new java.lang.Object [] { SQLDialect . POSTGRES_9_5 , java.sql.SQLException ( STRING ) } , new java.lang.Object [] { SQLDialect . SQLITE , java.sql.SQLException ( STRING ) } } ; }  <METHOD_END>
<METHOD_START> private static java.sql.SQLException java.sql.SQLException ( java.lang.String java.lang.String ) { return new java.sql.SQLException ( null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static java.sql.SQLException java.sql.SQLException ( int int ) { return new java.sql.SQLException ( null , null , int ) ; }  <METHOD_END>
<METHOD_START> public void ( SQLDialect org.springframework.boot.autoconfigure.jooq.SQLDialect , java.sql.SQLException java.sql.SQLException ) { this . org.springframework.boot.autoconfigure.jooq.SQLDialect = org.springframework.boot.autoconfigure.jooq.SQLDialect ; this . java.sql.SQLException = java.sql.SQLException ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExecuteContext org.springframework.boot.autoconfigure.jooq.ExecuteContext = mock ( ExecuteContext .class ) ; Configuration org.springframework.boot.autoconfigure.jooq.Configuration = mock ( Configuration .class ) ; given ( org.springframework.boot.autoconfigure.jooq.ExecuteContext . configuration ( ) ) . willReturn ( org.springframework.boot.autoconfigure.jooq.Configuration ) ; given ( org.springframework.boot.autoconfigure.jooq.Configuration . dialect ( ) ) . willReturn ( this . org.springframework.boot.autoconfigure.jooq.SQLDialect ) ; given ( org.springframework.boot.autoconfigure.jooq.ExecuteContext . sqlException ( ) ) . willReturn ( this . java.sql.SQLException ) ; this . org.springframework.boot.autoconfigure.jooq.JooqExceptionTranslator . exception ( org.springframework.boot.autoconfigure.jooq.ExecuteContext ) ; ArgumentCaptor < java.lang.RuntimeException > org.springframework.boot.autoconfigure.jooq.ArgumentCaptor<java.lang.RuntimeException> = ArgumentCaptor . forClass ( java.lang.RuntimeException .class ) ; verify ( org.springframework.boot.autoconfigure.jooq.ExecuteContext ) . exception ( org.springframework.boot.autoconfigure.jooq.ArgumentCaptor<java.lang.RuntimeException> . capture ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.jooq.ArgumentCaptor<java.lang.RuntimeException> . getValue ( ) ) . isInstanceOf ( BadSqlGrammarException .class ) ; }  <METHOD_END>
