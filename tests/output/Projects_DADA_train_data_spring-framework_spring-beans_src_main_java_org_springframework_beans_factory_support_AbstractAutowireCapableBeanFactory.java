<METHOD_START> public void ( ) { super(); void ( BeanNameAware .class ) ; void ( BeanFactoryAware .class ) ; void ( BeanClassLoaderAware .class ) ; }  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.beans.factory.support.BeanFactory ) { this(); setParentBeanFactory ( org.springframework.beans.factory.support.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( InstantiationStrategy org.springframework.beans.factory.support.InstantiationStrategy ) { this . org.springframework.beans.factory.support.InstantiationStrategy = org.springframework.beans.factory.support.InstantiationStrategy ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.InstantiationStrategy org.springframework.beans.factory.support.InstantiationStrategy ( ) { return this . org.springframework.beans.factory.support.InstantiationStrategy ; }  <METHOD_END>
<METHOD_START> public void void ( ParameterNameDiscoverer org.springframework.beans.factory.support.ParameterNameDiscoverer ) { this . org.springframework.beans.factory.support.ParameterNameDiscoverer = org.springframework.beans.factory.support.ParameterNameDiscoverer ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.ParameterNameDiscoverer org.springframework.beans.factory.support.ParameterNameDiscoverer ( ) { return this . org.springframework.beans.factory.support.ParameterNameDiscoverer ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableBeanFactory org.springframework.beans.factory.support.ConfigurableBeanFactory ) { super. copyConfigurationFrom ( org.springframework.beans.factory.support.ConfigurableBeanFactory ) ; if ( org.springframework.beans.factory.support.ConfigurableBeanFactory instanceof org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory ) { org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory = ( org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory ) org.springframework.beans.factory.support.ConfigurableBeanFactory ; this . org.springframework.beans.factory.support.InstantiationStrategy = org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . org.springframework.beans.factory.support.InstantiationStrategy ; this . boolean = org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . boolean ; this . java.util.Set<java.lang.Class<?>> . boolean ( org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . java.util.Set<java.lang.Class<?>> ) ; this . java.util.Set<java.lang.Class<?>> . boolean ( org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory . java.util.Set<java.lang.Class<?>> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.beans.factory.support.BeansException { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<T> ) ; org.springframework.beans.factory.support.RootBeanDefinition . setScope ( SCOPE_PROTOTYPE ) ; bd . allowCaching = ClassUtils . isCacheSafe ( java.lang.Class<T> , getBeanClassLoader ( ) ) ; return ( T ) java.lang.Object ( java.lang.Class<T> . java.lang.String ( ) , org.springframework.beans.factory.support.RootBeanDefinition , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( ClassUtils . getUserClass ( java.lang.Object ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; bd . allowCaching = ClassUtils . isCacheSafe ( org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) , getBeanClassLoader ( ) ) ; BeanWrapper org.springframework.beans.factory.support.BeanWrapper = new BeanWrapperImpl ( java.lang.Object ) ; initBeanWrapper ( org.springframework.beans.factory.support.BeanWrapper ) ; void ( org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) . getName ( ) , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapper ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeansException { markBeanAsCreated ( java.lang.String ) ; BeanDefinition org.springframework.beans.factory.support.BeanDefinition = getMergedBeanDefinition ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = null ; if ( org.springframework.beans.factory.support.BeanDefinition instanceof RootBeanDefinition ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = ( RootBeanDefinition ) org.springframework.beans.factory.support.BeanDefinition ; org.springframework.beans.factory.support.RootBeanDefinition = ( org.springframework.beans.factory.support.RootBeanDefinition . isPrototype ( ) ? org.springframework.beans.factory.support.RootBeanDefinition : org.springframework.beans.factory.support.RootBeanDefinition . cloneBeanDefinition ( ) ) ; } if ( ! org.springframework.beans.factory.support.BeanDefinition . isPrototype ( ) ) { if ( org.springframework.beans.factory.support.RootBeanDefinition == null ) { org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.BeanDefinition ) ; } org.springframework.beans.factory.support.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; bd . allowCaching = ClassUtils . isCacheSafe ( ClassUtils . getUserClass ( java.lang.Object ) , getBeanClassLoader ( ) ) ; } BeanWrapper org.springframework.beans.factory.support.BeanWrapper = new BeanWrapperImpl ( java.lang.Object ) ; initBeanWrapper ( org.springframework.beans.factory.support.BeanWrapper ) ; void ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapper ) ; return java.lang.Object ( java.lang.String , java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeansException { return java.lang.Object ( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String , null , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , int int , boolean boolean ) throws org.springframework.beans.factory.support.BeansException { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<> , int , boolean ) ; org.springframework.beans.factory.support.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; return java.lang.Object ( java.lang.Class<> . java.lang.String ( ) , org.springframework.beans.factory.support.RootBeanDefinition , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , int int , boolean boolean ) throws org.springframework.beans.factory.support.BeansException { final RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<> , int , boolean ) ; org.springframework.beans.factory.support.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; if ( org.springframework.beans.factory.support.RootBeanDefinition . getResolvedAutowireMode ( ) == AUTOWIRE_CONSTRUCTOR ) { return org.springframework.beans.factory.support.BeanWrapper ( java.lang.Class<> . java.lang.String ( ) , org.springframework.beans.factory.support.RootBeanDefinition , null , null ) . getWrappedInstance ( ) ; } else { java.lang.Object java.lang.Object ; final BeanFactory org.springframework.beans.factory.support.BeanFactory = this ; if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { java.lang.Object = java.security.AccessController . java.lang.Object ( new java.security.PrivilegedAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.support.InstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , null , org.springframework.beans.factory.support.BeanFactory ) ; } } , getAccessControlContext ( ) ) ; } else { java.lang.Object = org.springframework.beans.factory.support.InstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , null , org.springframework.beans.factory.support.BeanFactory ) ; } void ( java.lang.Class<> . java.lang.String ( ) , org.springframework.beans.factory.support.RootBeanDefinition , new BeanWrapperImpl ( java.lang.Object ) ) ; return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.support.InstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , null , org.springframework.beans.factory.support.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , int int , boolean boolean )			throws org.springframework.beans.factory.support.BeansException { if ( int == AUTOWIRE_CONSTRUCTOR ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( ClassUtils . getUserClass ( java.lang.Object ) , int , boolean ) ; org.springframework.beans.factory.support.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; BeanWrapper org.springframework.beans.factory.support.BeanWrapper = new BeanWrapperImpl ( java.lang.Object ) ; initBeanWrapper ( org.springframework.beans.factory.support.BeanWrapper ) ; void ( org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) . getName ( ) , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapper ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeansException { markBeanAsCreated ( java.lang.String ) ; BeanDefinition org.springframework.beans.factory.support.BeanDefinition = getMergedBeanDefinition ( java.lang.String ) ; BeanWrapper org.springframework.beans.factory.support.BeanWrapper = new BeanWrapperImpl ( java.lang.Object ) ; initBeanWrapper ( org.springframework.beans.factory.support.BeanWrapper ) ; void ( java.lang.String , org.springframework.beans.factory.support.BeanDefinition , org.springframework.beans.factory.support.BeanWrapper , org.springframework.beans.factory.support.BeanDefinition . getPropertyValues ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ( java.lang.String , java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )			throws org.springframework.beans.factory.support.BeansException { java.lang.Object java.lang.Object = java.lang.Object ; for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : getBeanPostProcessors ( ) ) { java.lang.Object = org.springframework.beans.factory.support.BeanPostProcessor . postProcessBeforeInitialization ( java.lang.Object , java.lang.String ) ; if ( java.lang.Object == null ) { return java.lang.Object ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )			throws org.springframework.beans.factory.support.BeansException { java.lang.Object java.lang.Object = java.lang.Object ; for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : getBeanPostProcessors ( ) ) { java.lang.Object = org.springframework.beans.factory.support.BeanPostProcessor . postProcessAfterInitialization ( java.lang.Object , java.lang.String ) ; if ( java.lang.Object == null ) { return java.lang.Object ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { new DisposableBeanAdapter ( java.lang.Object , getBeanPostProcessors ( ) , getAccessControlContext ( ) ) . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object [] java.lang.Object[] ) throws org.springframework.beans.factory.support.BeanCreationException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ; java.lang.Class<?> < ? > java.lang.Class<?> = resolveBeanClass ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String ) ; if ( java.lang.Class<> != null && ! org.springframework.beans.factory.support.RootBeanDefinition . hasBeanClass ( ) && org.springframework.beans.factory.support.RootBeanDefinition . getBeanClassName ( ) != null ) { org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.RootBeanDefinition . setBeanClass ( java.lang.Class<> ) ; } try { org.springframework.beans.factory.support.RootBeanDefinition . prepareMethodOverrides ( ) ; } catch ( BeanDefinitionValidationException org.springframework.beans.factory.support.BeanDefinitionValidationException ) { throw new BeanDefinitionStoreException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , org.springframework.beans.factory.support.BeanDefinitionValidationException ) ; } try { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; if ( java.lang.Object != null ) { return java.lang.Object ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , java.lang.Throwable ) ; } try { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object[] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } return java.lang.Object ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { throw org.springframework.beans.factory.support.BeanCreationException ; } catch ( ImplicitlyAppearedSingletonException org.springframework.beans.factory.support.ImplicitlyAppearedSingletonException ) { throw org.springframework.beans.factory.support.ImplicitlyAppearedSingletonException ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( final java.lang.String java.lang.String , final RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , final java.lang.Object [] java.lang.Object[] )			throws org.springframework.beans.factory.support.BeanCreationException { BeanWrapper org.springframework.beans.factory.support.BeanWrapper = null ; if ( org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) ) { org.springframework.beans.factory.support.BeanWrapper = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanWrapper> . remove ( java.lang.String ) ; } if ( org.springframework.beans.factory.support.BeanWrapper == null ) { org.springframework.beans.factory.support.BeanWrapper = org.springframework.beans.factory.support.BeanWrapper ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object[] ) ; } final java.lang.Object java.lang.Object = ( org.springframework.beans.factory.support.BeanWrapper != null ? org.springframework.beans.factory.support.BeanWrapper . getWrappedInstance ( ) : null ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ( org.springframework.beans.factory.support.BeanWrapper != null ? org.springframework.beans.factory.support.BeanWrapper . getWrappedClass ( ) : null ) ; mbd . resolvedTargetType = java.lang.Class<> ; synchronized ( mbd . postProcessingLock ) { if ( ! mbd . postProcessed ) { try { void ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<> , java.lang.String ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , java.lang.Throwable ) ; } mbd . postProcessed = true ; } } boolean boolean = ( org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) && this . boolean && isSingletonCurrentlyInCreation ( java.lang.String ) ) ; if ( boolean ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } addSingletonFactory ( java.lang.String , new ObjectFactory < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { return java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object ) ; } } ) ; } java.lang.Object java.lang.Object = java.lang.Object ; try { void ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapper ) ; if ( java.lang.Object != null ) { java.lang.Object = java.lang.Object ( java.lang.String , java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof BeanCreationException && java.lang.String . boolean ( ( ( BeanCreationException ) java.lang.Throwable ) . getBeanName ( ) ) ) { throw ( BeanCreationException ) java.lang.Throwable ; } else { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , java.lang.Throwable ) ; } } if ( boolean ) { java.lang.Object java.lang.Object = getSingleton ( java.lang.String , false ) ; if ( java.lang.Object != null ) { if ( java.lang.Object == java.lang.Object ) { java.lang.Object = java.lang.Object ; } else if ( ! this . boolean && hasDependentBean ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = getDependentBeans ( java.lang.String ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! removeSingletonIfCreatedForTypeCheckOnly ( java.lang.String ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } if ( ! java.util.Set<java.lang.String> . boolean ( ) ) { throw new BeanCurrentlyInCreationException ( java.lang.String , STRING + java.lang.String + STRING + StringUtils . collectionToCommaDelimitedString ( java.util.Set<java.lang.String> ) + STRING + STRING + STRING + STRING ) ; } } } } try { registerDisposableBeanIfNecessary ( java.lang.String , java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ) ; } catch ( BeanDefinitionValidationException org.springframework.beans.factory.support.BeanDefinitionValidationException ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , org.springframework.beans.factory.support.BeanDefinitionValidationException ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { return java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?>[] ) ; if ( java.lang.Class<> != null && ! org.springframework.beans.factory.support.RootBeanDefinition . isSynthetic ( ) && hasInstantiationAwareBeanPostProcessors ( ) ) { for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : getBeanPostProcessors ( ) ) { if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof SmartInstantiationAwareBeanPostProcessor ) { SmartInstantiationAwareBeanPostProcessor org.springframework.beans.factory.support.SmartInstantiationAwareBeanPostProcessor = ( SmartInstantiationAwareBeanPostProcessor ) org.springframework.beans.factory.support.BeanPostProcessor ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.SmartInstantiationAwareBeanPostProcessor . predictBeanType ( java.lang.Class<> , java.lang.String ) ; if ( java.lang.Class<> != null && ( java.lang.Class<?>[] . int != NUMBER || FactoryBean .class != java.lang.Class<?>[] [ NUMBER ] || FactoryBean .class . boolean ( java.lang.Class<> ) ) ) { return java.lang.Class<> ; } } } } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.RootBeanDefinition . getTargetType ( ) ; if ( java.lang.Class<> == null ) { java.lang.Class<?> = ( org.springframework.beans.factory.support.RootBeanDefinition . getFactoryMethodName ( ) != null ? java.lang.Class<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?>[] ) : resolveBeanClass ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , java.lang.Class<?>[] ) ) ; if ( ObjectUtils . isEmpty ( java.lang.Class<?>[] ) || getTempClassLoader ( ) == null ) { mbd . resolvedTargetType = java.lang.Class<> ; } } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { ResolvableType org.springframework.beans.factory.support.ResolvableType = mbd . factoryMethodReturnType ; if ( org.springframework.beans.factory.support.ResolvableType != null ) { return org.springframework.beans.factory.support.ResolvableType . resolve ( ) ; } java.lang.Class<?> < ? > java.lang.Class<?> ; boolean boolean = true ; java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getFactoryBeanName ( ) ; if ( java.lang.String != null ) { if ( java.lang.String . boolean ( java.lang.String ) ) { throw new BeanDefinitionStoreException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING ) ; } java.lang.Class<?> = getType ( java.lang.String ) ; boolean = false ; } else { java.lang.Class<?> = resolveBeanClass ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , java.lang.Class<?>[] ) ; } if ( java.lang.Class<> == null ) { return null ; } java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Class<> ) ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; java.lang.reflect.Method java.lang.reflect.Method = null ; int int = org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . getArgumentCount ( ) ; java.lang.reflect.Method [] java.lang.reflect.Method[] = ReflectionUtils . getUniqueDeclaredMethods ( java.lang.Class<> ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) == boolean && java.lang.reflect.Method . java.lang.String ( ) . boolean ( org.springframework.beans.factory.support.RootBeanDefinition . getFactoryMethodName ( ) ) && java.lang.reflect.Method . int ( ) >= int ) { if ( java.lang.reflect.Method . java.lang.reflect.TypeVariable<java.lang.reflect.Method>[] ( ) . int > NUMBER ) { try { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.lang.String [] java.lang.String[] = null ; ParameterNameDiscoverer org.springframework.beans.factory.support.ParameterNameDiscoverer = org.springframework.beans.factory.support.ParameterNameDiscoverer ( ) ; if ( org.springframework.beans.factory.support.ParameterNameDiscoverer != null ) { java.lang.String[] = org.springframework.beans.factory.support.ParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Method ) ; } ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) ; java.util.Set<ConstructorArgumentValues.ValueHolder> < ConstructorArgumentValues . ConstructorArgumentValues > java.util.Set<ConstructorArgumentValues.ValueHolder> = new java.util.HashSet<ConstructorArgumentValues.ValueHolder> <> ( java.lang.Class<?>[] . int ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.lang.Class<?>[] . int ] ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { ConstructorArgumentValues . ConstructorArgumentValues ConstructorArgumentValues.ValueHolder = org.springframework.beans.factory.support.ConstructorArgumentValues . getArgumentValue ( int , java.lang.Class<?>[] [ int ] , ( java.lang.String[] != null ? java.lang.String[] [ int ] : null ) , java.util.Set<ConstructorArgumentValues.ValueHolder> ) ; if ( ConstructorArgumentValues.ValueHolder == null ) { ConstructorArgumentValues.ValueHolder = org.springframework.beans.factory.support.ConstructorArgumentValues . getGenericArgumentValue ( null , null , java.util.Set<ConstructorArgumentValues.ValueHolder> ) ; } if ( ConstructorArgumentValues.ValueHolder != null ) { java.lang.Object[] [ int ] = ConstructorArgumentValues.ValueHolder . getValue ( ) ; java.util.Set<ConstructorArgumentValues.ValueHolder> . add ( ConstructorArgumentValues.ValueHolder ) ; } } java.lang.Class<?> < ? > java.lang.Class<?> = AutowireUtils . resolveReturnTypeForFactoryMethod ( java.lang.reflect.Method , java.lang.Object[] , getBeanClassLoader ( ) ) ; if ( java.lang.Class<> != null ) { java.lang.reflect.Method = ( java.lang.Class<> == null ? java.lang.reflect.Method : null ) ; java.lang.Class<?> = ClassUtils . determineCommonAncestor ( java.lang.Class<> , java.lang.Class<> ) ; if ( java.lang.Class<> == null ) { return null ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Throwable ) ; } } } else { java.lang.reflect.Method = ( java.lang.Class<> == null ? java.lang.reflect.Method : null ) ; java.lang.Class<?> = ClassUtils . determineCommonAncestor ( java.lang.reflect.Method . java.lang.Class<?> ( ) , java.lang.Class<> ) ; if ( java.lang.Class<> == null ) { return null ; } } } } if ( java.lang.Class<> != null ) { mbd . factoryMethodReturnType = ( java.lang.reflect.Method != null ? ResolvableType . forMethodReturnType ( java.lang.reflect.Method ) : ResolvableType . forClass ( java.lang.Class<> ) ) ; } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getFactoryBeanName ( ) ; java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getFactoryMethodName ( ) ; if ( java.lang.String != null ) { if ( java.lang.String != null ) { BeanDefinition org.springframework.beans.factory.support.BeanDefinition = getBeanDefinition ( java.lang.String ) ; if ( org.springframework.beans.factory.support.BeanDefinition instanceof AbstractBeanDefinition ) { AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.beans.factory.support.BeanDefinition ; if ( org.springframework.beans.factory.support.AbstractBeanDefinition . hasBeanClass ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.beans.factory.support.AbstractBeanDefinition . getBeanClass ( ) , java.lang.String ) ; if ( java.lang.Class<> != null ) { return java.lang.Class<> ; } } } } if ( ! isBeanEligibleForMetadataCaching ( java.lang.String ) ) { return null ; } } FactoryBean < ? > org.springframework.beans.factory.support.FactoryBean<?> = ( org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) ? org.springframework.beans.factory.support.FactoryBean<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) : org.springframework.beans.factory.support.FactoryBean<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ) ; if ( org.springframework.beans.factory.support.FactoryBean<> != null ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.beans.factory.support.FactoryBean<> ) ; if ( java.lang.Class<> != null ) { return java.lang.Class<> ; } else { return super. getTypeForFactoryBean ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; } } if ( java.lang.String == null && org.springframework.beans.factory.support.RootBeanDefinition . hasBeanClass ( ) ) { if ( java.lang.String != null ) { return java.lang.Class<?> ( org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) , java.lang.String ) ; } else { return GenericTypeResolver . resolveTypeArgument ( org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) , FactoryBean .class ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.String java.lang.String ) { class Holder { java.lang.Class<?> < ? > java.lang.Class<?> = null ; } final Holder objectType = new Holder ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Class<> ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , new ReflectionUtils . ReflectionUtils ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) && FactoryBean .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveReturnTypeArgument ( java.lang.reflect.Method , FactoryBean .class ) ; if ( java.lang.Class<> != null ) { objectType . java.lang.Class<?> = ClassUtils . determineCommonAncestor ( java.lang.Class<> , objectType . java.lang.Class<> ) ; } } } } ) ; return ( objectType . java.lang.Class<> != null && java.lang.Object .class != objectType . java.lang.Class<> ? objectType . java.lang.Class<> : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) && FactoryBean .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveReturnTypeArgument ( java.lang.reflect.Method , FactoryBean .class ) ; if ( java.lang.Class<> != null ) { objectType . java.lang.Class<?> = ClassUtils . determineCommonAncestor ( java.lang.Class<> , objectType . java.lang.Class<> ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = java.lang.Object ; if ( java.lang.Object != null && ! org.springframework.beans.factory.support.RootBeanDefinition . isSynthetic ( ) && hasInstantiationAwareBeanPostProcessors ( ) ) { for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : getBeanPostProcessors ( ) ) { if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof SmartInstantiationAwareBeanPostProcessor ) { SmartInstantiationAwareBeanPostProcessor org.springframework.beans.factory.support.SmartInstantiationAwareBeanPostProcessor = ( SmartInstantiationAwareBeanPostProcessor ) org.springframework.beans.factory.support.BeanPostProcessor ; java.lang.Object = org.springframework.beans.factory.support.SmartInstantiationAwareBeanPostProcessor . getEarlyBeanReference ( java.lang.Object , java.lang.String ) ; if ( java.lang.Object == null ) { return null ; } } } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private org.springframework.beans.factory.support.FactoryBean<?> < ? > org.springframework.beans.factory.support.FactoryBean<?> ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { synchronized ( getSingletonMutex ( ) ) { BeanWrapper org.springframework.beans.factory.support.BeanWrapper = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanWrapper> . get ( java.lang.String ) ; if ( org.springframework.beans.factory.support.BeanWrapper != null ) { return ( FactoryBean < ? > ) org.springframework.beans.factory.support.BeanWrapper . getWrappedInstance ( ) ; } if ( isSingletonCurrentlyInCreation ( java.lang.String ) || ( org.springframework.beans.factory.support.RootBeanDefinition . getFactoryBeanName ( ) != null && isSingletonCurrentlyInCreation ( org.springframework.beans.factory.support.RootBeanDefinition . getFactoryBeanName ( ) ) ) ) { return null ; } java.lang.Object java.lang.Object = null ; try { beforeSingletonCreation ( java.lang.String ) ; java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; if ( java.lang.Object == null ) { org.springframework.beans.factory.support.BeanWrapper = org.springframework.beans.factory.support.BeanWrapper ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , null ) ; java.lang.Object = org.springframework.beans.factory.support.BeanWrapper . getWrappedInstance ( ) ; } } finally { afterSingletonCreation ( java.lang.String ) ; } FactoryBean < ? > org.springframework.beans.factory.support.FactoryBean<?> = getFactoryBean ( java.lang.String , java.lang.Object ) ; if ( org.springframework.beans.factory.support.BeanWrapper != null ) { this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanWrapper> . put ( java.lang.String , org.springframework.beans.factory.support.BeanWrapper ) ; } return org.springframework.beans.factory.support.FactoryBean<> ; } }  <METHOD_END>
<METHOD_START> private org.springframework.beans.factory.support.FactoryBean<?> < ? > org.springframework.beans.factory.support.FactoryBean<?> ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { if ( isPrototypeCurrentlyInCreation ( java.lang.String ) ) { return null ; } java.lang.Object java.lang.Object = null ; try { beforePrototypeCreation ( java.lang.String ) ; java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; if ( java.lang.Object == null ) { BeanWrapper org.springframework.beans.factory.support.BeanWrapper = org.springframework.beans.factory.support.BeanWrapper ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , null ) ; java.lang.Object = org.springframework.beans.factory.support.BeanWrapper . getWrappedInstance ( ) ; } } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.beans.factory.support.BeanCreationException ) ; } onSuppressedException ( org.springframework.beans.factory.support.BeanCreationException ) ; return null ; } finally { afterPrototypeCreation ( java.lang.String ) ; } return getFactoryBean ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected void void ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : getBeanPostProcessors ( ) ) { if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof MergedBeanDefinitionPostProcessor ) { MergedBeanDefinitionPostProcessor org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor = ( MergedBeanDefinitionPostProcessor ) org.springframework.beans.factory.support.BeanPostProcessor ; org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor . postProcessMergedBeanDefinition ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<> , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { java.lang.Object java.lang.Object = null ; if ( ! java.lang.Boolean . java.lang.Boolean . boolean ( mbd . beforeInstantiationResolved ) ) { if ( ! org.springframework.beans.factory.support.RootBeanDefinition . isSynthetic ( ) && hasInstantiationAwareBeanPostProcessors ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; if ( java.lang.Class<> != null ) { java.lang.Object = java.lang.Object ( java.lang.Class<> , java.lang.String ) ; if ( java.lang.Object != null ) { java.lang.Object = java.lang.Object ( java.lang.Object , java.lang.String ) ; } } } mbd . beforeInstantiationResolved = ( java.lang.Object != null ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : getBeanPostProcessors ( ) ) { if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof InstantiationAwareBeanPostProcessor ) { InstantiationAwareBeanPostProcessor org.springframework.beans.factory.support.InstantiationAwareBeanPostProcessor = ( InstantiationAwareBeanPostProcessor ) org.springframework.beans.factory.support.BeanPostProcessor ; java.lang.Object java.lang.Object = org.springframework.beans.factory.support.InstantiationAwareBeanPostProcessor . postProcessBeforeInstantiation ( java.lang.Class<> , java.lang.String ) ; if ( java.lang.Object != null ) { return java.lang.Object ; } } } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.BeanWrapper org.springframework.beans.factory.support.BeanWrapper ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object [] java.lang.Object[] ) { java.lang.Class<?> < ? > java.lang.Class<?> = resolveBeanClass ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String ) ; if ( java.lang.Class<> != null && ! java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) && ! org.springframework.beans.factory.support.RootBeanDefinition . isNonPublicAccessAllowed ( ) ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + java.lang.Class<> . java.lang.String ( ) ) ; } java.util.function.Supplier<?> < ? > java.util.function.Supplier<?> = org.springframework.beans.factory.support.RootBeanDefinition . getInstanceSupplier ( ) ; if ( java.util.function.Supplier<> != null ) { return org.springframework.beans.factory.support.BeanWrapper ( java.util.function.Supplier<> , java.lang.String ) ; } if ( org.springframework.beans.factory.support.RootBeanDefinition . getFactoryMethodName ( ) != null ) { return org.springframework.beans.factory.support.BeanWrapper ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object[] ) ; } boolean boolean = false ; boolean boolean = false ; if ( java.lang.Object[] == null ) { synchronized ( mbd . constructorArgumentLock ) { if ( mbd . resolvedConstructorOrFactoryMethod != null ) { boolean = true ; boolean = mbd . constructorArgumentsResolved ; } } } if ( boolean ) { if ( boolean ) { return org.springframework.beans.factory.support.BeanWrapper ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , null , null ) ; } else { return org.springframework.beans.factory.support.BeanWrapper ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; } } java.lang.reflect.Constructor<?> < ? > [] java.lang.reflect.Constructor<?>[] = java.lang.reflect.Constructor<?>[] ( java.lang.Class<> , java.lang.String ) ; if ( java.lang.reflect.Constructor<?>[] != null || org.springframework.beans.factory.support.RootBeanDefinition . getResolvedAutowireMode ( ) == RootBeanDefinition . AUTOWIRE_CONSTRUCTOR || org.springframework.beans.factory.support.RootBeanDefinition . hasConstructorArgumentValues ( ) || ! ObjectUtils . isEmpty ( java.lang.Object[] ) ) { return org.springframework.beans.factory.support.BeanWrapper ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.reflect.Constructor<?>[] , java.lang.Object[] ) ; } return org.springframework.beans.factory.support.BeanWrapper ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.BeanWrapper org.springframework.beans.factory.support.BeanWrapper ( java.util.function.Supplier<?> < ? > java.util.function.Supplier<?> , java.lang.String java.lang.String ) { java.lang.String java.lang.String = this . org.springframework.beans.factory.support.NamedThreadLocal<java.lang.String> . get ( ) ; this . org.springframework.beans.factory.support.NamedThreadLocal<java.lang.String> . set ( java.lang.String ) ; java.lang.Object java.lang.Object ; try { java.lang.Object = java.util.function.Supplier<> . get ( ) ; } finally { if ( java.lang.String != null ) { this . org.springframework.beans.factory.support.NamedThreadLocal<java.lang.String> . set ( java.lang.String ) ; } else { this . org.springframework.beans.factory.support.NamedThreadLocal<java.lang.String> . remove ( ) ; } } BeanWrapper org.springframework.beans.factory.support.BeanWrapper = new BeanWrapperImpl ( java.lang.Object ) ; initBeanWrapper ( org.springframework.beans.factory.support.BeanWrapper ) ; return org.springframework.beans.factory.support.BeanWrapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { java.lang.String java.lang.String = this . org.springframework.beans.factory.support.NamedThreadLocal<java.lang.String> . get ( ) ; if ( java.lang.String != null ) { registerDependentBean ( java.lang.String , java.lang.String ) ; } return super. getObjectForBeanInstance ( java.lang.Object , java.lang.String , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.reflect.Constructor<?> < ? > [] java.lang.reflect.Constructor<?>[] ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String )			throws org.springframework.beans.factory.support.BeansException { if ( java.lang.Class<> != null && hasInstantiationAwareBeanPostProcessors ( ) ) { for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : getBeanPostProcessors ( ) ) { if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof SmartInstantiationAwareBeanPostProcessor ) { SmartInstantiationAwareBeanPostProcessor org.springframework.beans.factory.support.SmartInstantiationAwareBeanPostProcessor = ( SmartInstantiationAwareBeanPostProcessor ) org.springframework.beans.factory.support.BeanPostProcessor ; java.lang.reflect.Constructor<?> < ? > [] java.lang.reflect.Constructor<?>[] = org.springframework.beans.factory.support.SmartInstantiationAwareBeanPostProcessor . determineCandidateConstructors ( java.lang.Class<> , java.lang.String ) ; if ( java.lang.reflect.Constructor<?>[] != null ) { return java.lang.reflect.Constructor<?>[] ; } } } } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.BeanWrapper org.springframework.beans.factory.support.BeanWrapper ( final java.lang.String java.lang.String , final RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { try { java.lang.Object java.lang.Object ; final BeanFactory org.springframework.beans.factory.support.BeanFactory = this ; if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { java.lang.Object = java.security.AccessController . java.lang.Object ( new java.security.PrivilegedAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.support.InstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , org.springframework.beans.factory.support.BeanFactory ) ; } } , getAccessControlContext ( ) ) ; } else { java.lang.Object = org.springframework.beans.factory.support.InstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , org.springframework.beans.factory.support.BeanFactory ) ; } BeanWrapper org.springframework.beans.factory.support.BeanWrapper = new BeanWrapperImpl ( java.lang.Object ) ; initBeanWrapper ( org.springframework.beans.factory.support.BeanWrapper ) ; return org.springframework.beans.factory.support.BeanWrapper ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.beans.factory.support.InstantiationStrategy ( ) . instantiate ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , org.springframework.beans.factory.support.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.BeanWrapper org.springframework.beans.factory.support.BeanWrapper ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object [] java.lang.Object[] ) { return new ConstructorResolver ( this ) . instantiateUsingFactoryMethod ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.BeanWrapper org.springframework.beans.factory.support.BeanWrapper ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.reflect.Constructor<?> < ? > [] java.lang.reflect.Constructor<?>[] , java.lang.Object [] java.lang.Object[] ) { return new ConstructorResolver ( this ) . autowireConstructor ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.reflect.Constructor<?>[] , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , BeanWrapper org.springframework.beans.factory.support.BeanWrapper ) { PropertyValues org.springframework.beans.factory.support.PropertyValues = org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) ; if ( org.springframework.beans.factory.support.BeanWrapper == null ) { if ( ! org.springframework.beans.factory.support.PropertyValues . isEmpty ( ) ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING ) ; } else { return; } } boolean boolean = true ; if ( ! org.springframework.beans.factory.support.RootBeanDefinition . isSynthetic ( ) && hasInstantiationAwareBeanPostProcessors ( ) ) { for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : getBeanPostProcessors ( ) ) { if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof InstantiationAwareBeanPostProcessor ) { InstantiationAwareBeanPostProcessor org.springframework.beans.factory.support.InstantiationAwareBeanPostProcessor = ( InstantiationAwareBeanPostProcessor ) org.springframework.beans.factory.support.BeanPostProcessor ; if ( ! org.springframework.beans.factory.support.InstantiationAwareBeanPostProcessor . postProcessAfterInstantiation ( org.springframework.beans.factory.support.BeanWrapper . getWrappedInstance ( ) , java.lang.String ) ) { boolean = false ; break; } } } } if ( ! boolean ) { return; } if ( org.springframework.beans.factory.support.RootBeanDefinition . getResolvedAutowireMode ( ) == RootBeanDefinition . AUTOWIRE_BY_NAME || org.springframework.beans.factory.support.RootBeanDefinition . getResolvedAutowireMode ( ) == RootBeanDefinition . AUTOWIRE_BY_TYPE ) { MutablePropertyValues org.springframework.beans.factory.support.MutablePropertyValues = new MutablePropertyValues ( org.springframework.beans.factory.support.PropertyValues ) ; if ( org.springframework.beans.factory.support.RootBeanDefinition . getResolvedAutowireMode ( ) == RootBeanDefinition . AUTOWIRE_BY_NAME ) { void ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapper , org.springframework.beans.factory.support.MutablePropertyValues ) ; } if ( org.springframework.beans.factory.support.RootBeanDefinition . getResolvedAutowireMode ( ) == RootBeanDefinition . AUTOWIRE_BY_TYPE ) { void ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapper , org.springframework.beans.factory.support.MutablePropertyValues ) ; } org.springframework.beans.factory.support.PropertyValues = org.springframework.beans.factory.support.MutablePropertyValues ; } boolean boolean = hasInstantiationAwareBeanPostProcessors ( ) ; boolean boolean = ( org.springframework.beans.factory.support.RootBeanDefinition . getDependencyCheck ( ) != RootBeanDefinition . DEPENDENCY_CHECK_NONE ) ; if ( boolean || boolean ) { java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = java.beans.PropertyDescriptor[] ( org.springframework.beans.factory.support.BeanWrapper , mbd . allowCaching ) ; if ( boolean ) { for ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor : getBeanPostProcessors ( ) ) { if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof InstantiationAwareBeanPostProcessor ) { InstantiationAwareBeanPostProcessor org.springframework.beans.factory.support.InstantiationAwareBeanPostProcessor = ( InstantiationAwareBeanPostProcessor ) org.springframework.beans.factory.support.BeanPostProcessor ; org.springframework.beans.factory.support.PropertyValues = org.springframework.beans.factory.support.InstantiationAwareBeanPostProcessor . postProcessPropertyValues ( org.springframework.beans.factory.support.PropertyValues , java.beans.PropertyDescriptor[] , org.springframework.beans.factory.support.BeanWrapper . getWrappedInstance ( ) , java.lang.String ) ; if ( org.springframework.beans.factory.support.PropertyValues == null ) { return; } } } } if ( boolean ) { void ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.beans.PropertyDescriptor[] , org.springframework.beans.factory.support.PropertyValues ) ; } } void ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanWrapper , org.springframework.beans.factory.support.PropertyValues ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition , BeanWrapper org.springframework.beans.factory.support.BeanWrapper , MutablePropertyValues org.springframework.beans.factory.support.MutablePropertyValues ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.beans.factory.support.AbstractBeanDefinition , org.springframework.beans.factory.support.BeanWrapper ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( containsBean ( java.lang.String ) ) { java.lang.Object java.lang.Object = getBean ( java.lang.String ) ; org.springframework.beans.factory.support.MutablePropertyValues . add ( java.lang.String , java.lang.Object ) ; registerDependentBean ( java.lang.String , java.lang.String ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } } else { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } } } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition , BeanWrapper org.springframework.beans.factory.support.BeanWrapper , MutablePropertyValues org.springframework.beans.factory.support.MutablePropertyValues ) { TypeConverter org.springframework.beans.factory.support.TypeConverter = getCustomTypeConverter ( ) ; if ( org.springframework.beans.factory.support.TypeConverter == null ) { org.springframework.beans.factory.support.TypeConverter = org.springframework.beans.factory.support.BeanWrapper ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( NUMBER ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.beans.factory.support.AbstractBeanDefinition , org.springframework.beans.factory.support.BeanWrapper ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { try { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = org.springframework.beans.factory.support.BeanWrapper . getPropertyDescriptor ( java.lang.String ) ; if ( java.lang.Object .class != java.beans.PropertyDescriptor . java.lang.Class<?> ( ) ) { MethodParameter org.springframework.beans.factory.support.MethodParameter = BeanUtils . getWriteMethodParameter ( java.beans.PropertyDescriptor ) ; boolean boolean = ! PriorityOrdered .class . boolean ( org.springframework.beans.factory.support.BeanWrapper . getWrappedClass ( ) ) ; DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.AutowireByTypeDependencyDescriptor ( org.springframework.beans.factory.support.MethodParameter , boolean ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String , java.util.Set<java.lang.String> , org.springframework.beans.factory.support.TypeConverter ) ; if ( java.lang.Object != null ) { org.springframework.beans.factory.support.MutablePropertyValues . add ( java.lang.String , java.lang.Object ) ; } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { registerDependentBean ( java.lang.String , java.lang.String ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } } java.util.Set<java.lang.String> . void ( ) ; } } catch ( BeansException org.springframework.beans.factory.support.BeansException ) { throw new UnsatisfiedDependencyException ( org.springframework.beans.factory.support.AbstractBeanDefinition . getResourceDescription ( ) , java.lang.String , java.lang.String , org.springframework.beans.factory.support.BeansException ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition , BeanWrapper org.springframework.beans.factory.support.BeanWrapper ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String> <> ( ) ; PropertyValues org.springframework.beans.factory.support.PropertyValues = org.springframework.beans.factory.support.AbstractBeanDefinition . getPropertyValues ( ) ; java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = org.springframework.beans.factory.support.BeanWrapper . getPropertyDescriptors ( ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.PropertyDescriptor[] ) { if ( java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) != null && ! boolean ( java.beans.PropertyDescriptor ) && ! org.springframework.beans.factory.support.PropertyValues . contains ( java.beans.PropertyDescriptor . java.lang.String ( ) ) && ! BeanUtils . isSimpleProperty ( java.beans.PropertyDescriptor . java.lang.Class<?> ( ) ) ) { java.util.Set<java.lang.String> . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ; } } return StringUtils . toStringArray ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] ( BeanWrapper org.springframework.beans.factory.support.BeanWrapper , boolean boolean ) { java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = this . java.util.concurrent.ConcurrentMap<java.lang.Class<?>,java.beans.PropertyDescriptor[]> . java.beans.PropertyDescriptor[] ( org.springframework.beans.factory.support.BeanWrapper . getWrappedClass ( ) ) ; if ( java.beans.PropertyDescriptor[] == null ) { java.beans.PropertyDescriptor[] = java.beans.PropertyDescriptor[] ( org.springframework.beans.factory.support.BeanWrapper ) ; if ( boolean ) { java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = this . java.util.concurrent.ConcurrentMap<java.lang.Class<?>,java.beans.PropertyDescriptor[]> . java.beans.PropertyDescriptor[] ( org.springframework.beans.factory.support.BeanWrapper . getWrappedClass ( ) , java.beans.PropertyDescriptor[] ) ; if ( java.beans.PropertyDescriptor[] != null ) { java.beans.PropertyDescriptor[] = java.beans.PropertyDescriptor[] ; } } } return java.beans.PropertyDescriptor[] ; }  <METHOD_END>
<METHOD_START> protected java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] ( BeanWrapper org.springframework.beans.factory.support.BeanWrapper ) { java.util.List<java.beans.PropertyDescriptor> < java.beans.PropertyDescriptor > java.util.List<java.beans.PropertyDescriptor> = new java.util.LinkedList <> ( java.util.Arrays . java.util.List ( org.springframework.beans.factory.support.BeanWrapper . getPropertyDescriptors ( ) ) ) ; for ( java.util.Iterator<java.beans.PropertyDescriptor> < java.beans.PropertyDescriptor > java.util.Iterator<java.beans.PropertyDescriptor> = java.util.List<java.beans.PropertyDescriptor> . java.util.Iterator<java.beans.PropertyDescriptor> ( ) ; java.util.Iterator<java.beans.PropertyDescriptor> . boolean ( ) ;) { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = java.util.Iterator<java.beans.PropertyDescriptor> . java.beans.PropertyDescriptor ( ) ; if ( boolean ( java.beans.PropertyDescriptor ) ) { java.util.Iterator<java.beans.PropertyDescriptor> . void ( ) ; } } return java.util.List<java.beans.PropertyDescriptor> . java.beans.PropertyDescriptor[] ( new java.beans.PropertyDescriptor [ java.util.List<java.beans.PropertyDescriptor> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { return ( AutowireUtils . isExcludedFromDependencyCheck ( java.beans.PropertyDescriptor ) || this . java.util.Set<java.lang.Class<?>> . boolean ( java.beans.PropertyDescriptor . java.lang.Class<?> ( ) ) || AutowireUtils . isSetterDefinedInInterface ( java.beans.PropertyDescriptor , this . java.util.Set<java.lang.Class<?>> ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition , java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] , PropertyValues org.springframework.beans.factory.support.PropertyValues )			throws org.springframework.beans.factory.support.UnsatisfiedDependencyException { int int = org.springframework.beans.factory.support.AbstractBeanDefinition . getDependencyCheck ( ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.PropertyDescriptor[] ) { if ( java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) != null && ! org.springframework.beans.factory.support.PropertyValues . contains ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ) { boolean boolean = BeanUtils . isSimpleProperty ( java.beans.PropertyDescriptor . java.lang.Class<?> ( ) ) ; boolean boolean = ( int == RootBeanDefinition . DEPENDENCY_CHECK_ALL ) || ( boolean && int == RootBeanDefinition . DEPENDENCY_CHECK_SIMPLE ) || ( ! boolean && int == RootBeanDefinition . DEPENDENCY_CHECK_OBJECTS ) ; if ( boolean ) { throw new UnsatisfiedDependencyException ( org.springframework.beans.factory.support.AbstractBeanDefinition . getResourceDescription ( ) , java.lang.String , java.beans.PropertyDescriptor . java.lang.String ( ) , STRING ) ; } } } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , BeanDefinition org.springframework.beans.factory.support.BeanDefinition , BeanWrapper org.springframework.beans.factory.support.BeanWrapper , PropertyValues org.springframework.beans.factory.support.PropertyValues ) { if ( org.springframework.beans.factory.support.PropertyValues == null || org.springframework.beans.factory.support.PropertyValues . isEmpty ( ) ) { return; } MutablePropertyValues org.springframework.beans.factory.support.MutablePropertyValues = null ; java.util.List<org.springframework.beans.factory.support.PropertyValue> < PropertyValue > java.util.List<org.springframework.beans.factory.support.PropertyValue> ; if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { if ( org.springframework.beans.factory.support.BeanWrapper instanceof BeanWrapperImpl ) { ( ( BeanWrapperImpl ) org.springframework.beans.factory.support.BeanWrapper ) . setSecurityContext ( getAccessControlContext ( ) ) ; } } if ( org.springframework.beans.factory.support.PropertyValues instanceof MutablePropertyValues ) { org.springframework.beans.factory.support.MutablePropertyValues = ( MutablePropertyValues ) org.springframework.beans.factory.support.PropertyValues ; if ( org.springframework.beans.factory.support.MutablePropertyValues . isConverted ( ) ) { try { org.springframework.beans.factory.support.BeanWrapper . setPropertyValues ( org.springframework.beans.factory.support.MutablePropertyValues ) ; return; } catch ( BeansException org.springframework.beans.factory.support.BeansException ) { throw new BeanCreationException ( org.springframework.beans.factory.support.BeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , org.springframework.beans.factory.support.BeansException ) ; } } java.util.List<org.springframework.beans.factory.support.PropertyValue> = org.springframework.beans.factory.support.MutablePropertyValues . getPropertyValueList ( ) ; } else { java.util.List<org.springframework.beans.factory.support.PropertyValue> = java.util.Arrays . java.util.List ( org.springframework.beans.factory.support.PropertyValues . getPropertyValues ( ) ) ; } TypeConverter org.springframework.beans.factory.support.TypeConverter = getCustomTypeConverter ( ) ; if ( org.springframework.beans.factory.support.TypeConverter == null ) { org.springframework.beans.factory.support.TypeConverter = org.springframework.beans.factory.support.BeanWrapper ; } BeanDefinitionValueResolver org.springframework.beans.factory.support.BeanDefinitionValueResolver = new BeanDefinitionValueResolver ( this , java.lang.String , org.springframework.beans.factory.support.BeanDefinition , org.springframework.beans.factory.support.TypeConverter ) ; java.util.List<org.springframework.beans.factory.support.PropertyValue> < PropertyValue > java.util.List<org.springframework.beans.factory.support.PropertyValue> = new java.util.ArrayList <> ( java.util.List<org.springframework.beans.factory.support.PropertyValue> . size ( ) ) ; boolean boolean = false ; for ( PropertyValue org.springframework.beans.factory.support.PropertyValue : java.util.List<org.springframework.beans.factory.support.PropertyValue> ) { if ( org.springframework.beans.factory.support.PropertyValue . isConverted ( ) ) { java.util.List<org.springframework.beans.factory.support.PropertyValue> . add ( org.springframework.beans.factory.support.PropertyValue ) ; } else { java.lang.String java.lang.String = org.springframework.beans.factory.support.PropertyValue . getName ( ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.support.PropertyValue . getValue ( ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.support.BeanDefinitionValueResolver . resolveValueIfNecessary ( org.springframework.beans.factory.support.PropertyValue , java.lang.Object ) ; java.lang.Object java.lang.Object = java.lang.Object ; boolean boolean = org.springframework.beans.factory.support.BeanWrapper . isWritableProperty ( java.lang.String ) && ! PropertyAccessorUtils . isNestedOrIndexedProperty ( java.lang.String ) ; if ( boolean ) { java.lang.Object = java.lang.Object ( java.lang.Object , java.lang.String , org.springframework.beans.factory.support.BeanWrapper , org.springframework.beans.factory.support.TypeConverter ) ; } if ( java.lang.Object == java.lang.Object ) { if ( boolean ) { org.springframework.beans.factory.support.PropertyValue . setConvertedValue ( java.lang.Object ) ; } java.util.List<org.springframework.beans.factory.support.PropertyValue> . add ( org.springframework.beans.factory.support.PropertyValue ) ; } else if ( boolean && java.lang.Object instanceof TypedStringValue && ! ( ( TypedStringValue ) java.lang.Object ) . isDynamic ( ) && ! ( java.lang.Object instanceof java.util.Collection || ObjectUtils . isArray ( java.lang.Object ) ) ) { org.springframework.beans.factory.support.PropertyValue . setConvertedValue ( java.lang.Object ) ; java.util.List<org.springframework.beans.factory.support.PropertyValue> . add ( org.springframework.beans.factory.support.PropertyValue ) ; } else { boolean = true ; java.util.List<org.springframework.beans.factory.support.PropertyValue> . add ( new PropertyValue ( org.springframework.beans.factory.support.PropertyValue , java.lang.Object ) ) ; } } } if ( org.springframework.beans.factory.support.MutablePropertyValues != null && ! boolean ) { org.springframework.beans.factory.support.MutablePropertyValues . setConverted ( ) ; } try { org.springframework.beans.factory.support.BeanWrapper . setPropertyValues ( new MutablePropertyValues ( java.util.List<org.springframework.beans.factory.support.PropertyValue> ) ) ; } catch ( BeansException org.springframework.beans.factory.support.BeansException ) { throw new BeanCreationException ( org.springframework.beans.factory.support.BeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , org.springframework.beans.factory.support.BeansException ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , BeanWrapper org.springframework.beans.factory.support.BeanWrapper , TypeConverter org.springframework.beans.factory.support.TypeConverter ) { if ( org.springframework.beans.factory.support.TypeConverter instanceof BeanWrapperImpl ) { return ( ( BeanWrapperImpl ) org.springframework.beans.factory.support.TypeConverter ) . convertForProperty ( java.lang.Object , java.lang.String ) ; } else { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = org.springframework.beans.factory.support.BeanWrapper . getPropertyDescriptor ( java.lang.String ) ; MethodParameter org.springframework.beans.factory.support.MethodParameter = BeanUtils . getWriteMethodParameter ( java.beans.PropertyDescriptor ) ; return org.springframework.beans.factory.support.TypeConverter . convertIfNecessary ( java.lang.Object , java.beans.PropertyDescriptor . java.lang.Class<?> ( ) , org.springframework.beans.factory.support.MethodParameter ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { void ( java.lang.String , java.lang.Object ) ; return null ; } } , getAccessControlContext ( ) ) ; } else { void ( java.lang.String , java.lang.Object ) ; } java.lang.Object java.lang.Object = java.lang.Object ; if ( org.springframework.beans.factory.support.RootBeanDefinition == null || ! org.springframework.beans.factory.support.RootBeanDefinition . isSynthetic ( ) ) { java.lang.Object = java.lang.Object ( java.lang.Object , java.lang.String ) ; } try { void ( java.lang.String , java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( ( org.springframework.beans.factory.support.RootBeanDefinition != null ? org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) : null ) , java.lang.String , STRING , java.lang.Throwable ) ; } if ( org.springframework.beans.factory.support.RootBeanDefinition == null || ! org.springframework.beans.factory.support.RootBeanDefinition . isSynthetic ( ) ) { java.lang.Object = java.lang.Object ( java.lang.Object , java.lang.String ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { void ( java.lang.String , java.lang.Object ) ; return null ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof Aware ) { if ( java.lang.Object instanceof BeanNameAware ) { ( ( BeanNameAware ) java.lang.Object ) . setBeanName ( java.lang.String ) ; } if ( java.lang.Object instanceof BeanClassLoaderAware ) { ( ( BeanClassLoaderAware ) java.lang.Object ) . setBeanClassLoader ( getBeanClassLoader ( ) ) ; } if ( java.lang.Object instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) java.lang.Object ) . setBeanFactory ( org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory .this ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , final java.lang.Object java.lang.Object , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition )			throws java.lang.Throwable { boolean boolean = ( java.lang.Object instanceof InitializingBean ) ; if ( boolean && ( org.springframework.beans.factory.support.RootBeanDefinition == null || ! org.springframework.beans.factory.support.RootBeanDefinition . isExternallyManagedInitMethod ( STRING ) ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { try { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedExceptionAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { ( ( InitializingBean ) java.lang.Object ) . afterPropertiesSet ( ) ; return null ; } } , getAccessControlContext ( ) ) ; } catch ( java.security.PrivilegedActionException java.security.PrivilegedActionException ) { throw java.security.PrivilegedActionException . java.lang.Exception ( ) ; } } else { ( ( InitializingBean ) java.lang.Object ) . afterPropertiesSet ( ) ; } } if ( org.springframework.beans.factory.support.RootBeanDefinition != null ) { java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getInitMethodName ( ) ; if ( java.lang.String != null && ! ( boolean && STRING . boolean ( java.lang.String ) ) && ! org.springframework.beans.factory.support.RootBeanDefinition . isExternallyManagedInitMethod ( java.lang.String ) ) { void ( java.lang.String , java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { ( ( InitializingBean ) java.lang.Object ) . afterPropertiesSet ( ) ; return null ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , final java.lang.Object java.lang.Object , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition )			throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getInitMethodName ( ) ; final java.lang.reflect.Method java.lang.reflect.Method = ( org.springframework.beans.factory.support.RootBeanDefinition . isNonPublicAccessAllowed ( ) ? BeanUtils . findMethod ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String ) : ClassUtils . getMethodIfAvailable ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String ) ) ; if ( java.lang.reflect.Method == null ) { if ( org.springframework.beans.factory.support.RootBeanDefinition . isEnforceInitMethod ( ) ) { throw new BeanDefinitionValidationException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } return; } } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedExceptionAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return null ; } } ) ; try { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedExceptionAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { java.lang.reflect.Method . java.lang.Object ( java.lang.Object ) ; return null ; } } , getAccessControlContext ( ) ) ; } catch ( java.security.PrivilegedActionException java.security.PrivilegedActionException ) { java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException = ( java.lang.reflect.InvocationTargetException ) java.security.PrivilegedActionException . java.lang.Exception ( ) ; throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } } else { try { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.reflect.Method . java.lang.Object ( java.lang.Object ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { java.lang.reflect.Method . java.lang.Object ( java.lang.Object ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ( java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { super. removeSingleton ( java.lang.String ) ; this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanWrapper> . remove ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( MethodParameter org.springframework.beans.factory.support.MethodParameter , boolean boolean ) { super( org.springframework.beans.factory.support.MethodParameter , false , boolean ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
