<METHOD_START> @ Before public void void ( ) { java.util.List<org.springframework.integration.test.support.RequestResponseScenario> = java.util.List<org.springframework.integration.test.support.RequestResponseScenario> ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; for ( RequestResponseScenario org.springframework.integration.test.support.RequestResponseScenario : java.util.List<org.springframework.integration.test.support.RequestResponseScenario> ) { java.lang.String java.lang.String = org.springframework.integration.test.support.RequestResponseScenario . getName ( ) == null ? STRING + ( int ++ ) : org.springframework.integration.test.support.RequestResponseScenario . getName ( ) ; org.springframework.integration.test.support.RequestResponseScenario . init ( ) ; MessageChannel org.springframework.integration.test.support.MessageChannel = org.springframework.integration.test.support.ApplicationContext . getBean ( org.springframework.integration.test.support.RequestResponseScenario . getInputChannelName ( ) , MessageChannel .class ) ; MessageChannel org.springframework.integration.test.support.MessageChannel = org.springframework.integration.test.support.ApplicationContext . getBean ( org.springframework.integration.test.support.RequestResponseScenario . getOutputChannelName ( ) , MessageChannel .class ) ; if ( org.springframework.integration.test.support.MessageChannel instanceof SubscribableChannel ) { ( ( SubscribableChannel ) org.springframework.integration.test.support.MessageChannel ) . subscribe ( org.springframework.integration.test.support.RequestResponseScenario . getResponseValidator ( ) ) ; } assertTrue ( java.lang.String + STRING + org.springframework.integration.test.support.RequestResponseScenario . getInputChannelName ( ) , org.springframework.integration.test.support.MessageChannel . send ( org.springframework.integration.test.support.RequestResponseScenario . getMessage ( ) ) ) ; if ( org.springframework.integration.test.support.MessageChannel instanceof PollableChannel ) { Message < ? > org.springframework.integration.test.support.Message<?> = ( ( PollableChannel ) org.springframework.integration.test.support.MessageChannel ) . receive ( NUMBER ) ; assertNotNull ( java.lang.String + STRING + org.springframework.integration.test.support.RequestResponseScenario . getOutputChannelName ( ) , org.springframework.integration.test.support.Message<> ) ; org.springframework.integration.test.support.RequestResponseScenario . getResponseValidator ( ) . handleMessage ( org.springframework.integration.test.support.Message<> ) ; } assertNotNull ( STRING + org.springframework.integration.test.support.MessageChannel + STRING + java.lang.String + STRING , org.springframework.integration.test.support.RequestResponseScenario . getResponseValidator ( ) . getLastMessage ( ) ) ; if ( org.springframework.integration.test.support.MessageChannel instanceof SubscribableChannel ) { ( ( SubscribableChannel ) org.springframework.integration.test.support.MessageChannel ) . unsubscribe ( org.springframework.integration.test.support.RequestResponseScenario . getResponseValidator ( ) ) ; } } }  <METHOD_END>
<METHOD_START> protected abstract java.util.List<org.springframework.integration.test.support.RequestResponseScenario> < RequestResponseScenario > java.util.List<org.springframework.integration.test.support.RequestResponseScenario> ( )  <METHOD_END>
