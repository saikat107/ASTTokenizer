<METHOD_START> protected static void void ( StateMachine < org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> , org.springframework.statemachine.security.AbstractSecurityTests.TestListener org.springframework.statemachine.security.AbstractSecurityTests.TestListener ) throws java.lang.Exception { assertThat ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.security.AbstractSecurityTests.States . org.springframework.statemachine.security.AbstractSecurityTests.States ) ) ; org.springframework.statemachine.security.AbstractSecurityTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . sendEvent ( org.springframework.statemachine.security.AbstractSecurityTests.Events . org.springframework.statemachine.security.AbstractSecurityTests.Events ) ; assertThat ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.security.AbstractSecurityTests.States . org.springframework.statemachine.security.AbstractSecurityTests.States ) ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( StateMachine < org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> , org.springframework.statemachine.security.AbstractSecurityTests.TestListener org.springframework.statemachine.security.AbstractSecurityTests.TestListener ) throws java.lang.Exception { assertThat ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.security.AbstractSecurityTests.States . org.springframework.statemachine.security.AbstractSecurityTests.States ) ) ; org.springframework.statemachine.security.AbstractSecurityTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . sendEvent ( org.springframework.statemachine.security.AbstractSecurityTests.Events . org.springframework.statemachine.security.AbstractSecurityTests.Events ) ; assertThat ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.security.AbstractSecurityTests.States . org.springframework.statemachine.security.AbstractSecurityTests.States ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > org.springframework.statemachine.security.State<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> , State < org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > org.springframework.statemachine.security.State<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> < org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener org.springframework.statemachine.security.AbstractSecurityTests.TestListener , java.lang.String java.lang.String , ComparisonType org.springframework.statemachine.security.ComparisonType , java.lang.String java.lang.String ) throws java.lang.Exception { return org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener , java.lang.String , org.springframework.statemachine.security.ComparisonType , java.lang.String , null , null , null ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> < org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener org.springframework.statemachine.security.AbstractSecurityTests.TestListener , java.lang.String java.lang.String , ComparisonType org.springframework.statemachine.security.ComparisonType , java.lang.String java.lang.String , java.lang.String java.lang.String , ComparisonType org.springframework.statemachine.security.ComparisonType , java.lang.String java.lang.String ) throws java.lang.Exception { Builder < org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > org.springframework.statemachine.security.Builder<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> = StateMachineBuilder .< org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > builder ( ) ; StateMachineConfigurationConfigurer < org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > org.springframework.statemachine.security.StateMachineConfigurationConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> = org.springframework.statemachine.security.Builder<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . configureConfiguration ( ) ; org.springframework.statemachine.security.StateMachineConfigurationConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . withConfiguration ( ) . listener ( org.springframework.statemachine.security.AbstractSecurityTests.TestListener ) . autoStartup ( true ) . taskExecutor ( new SyncTaskExecutor ( ) ) ; SecurityConfigurer < org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > org.springframework.statemachine.security.SecurityConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> = org.springframework.statemachine.security.StateMachineConfigurationConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . withSecurity ( ) ; org.springframework.statemachine.security.SecurityConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . enabled ( true ) ; if ( java.lang.String != null && org.springframework.statemachine.security.ComparisonType != null ) { org.springframework.statemachine.security.SecurityConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . event ( java.lang.String , org.springframework.statemachine.security.ComparisonType ) ; } if ( java.lang.String != null ) { org.springframework.statemachine.security.SecurityConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . event ( java.lang.String ) ; } org.springframework.statemachine.security.Builder<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . configureStates ( ) . withStates ( ) . initial ( org.springframework.statemachine.security.AbstractSecurityTests.States . org.springframework.statemachine.security.AbstractSecurityTests.States ) . state ( org.springframework.statemachine.security.AbstractSecurityTests.States . org.springframework.statemachine.security.AbstractSecurityTests.States ) . state ( org.springframework.statemachine.security.AbstractSecurityTests.States . org.springframework.statemachine.security.AbstractSecurityTests.States ) ; ExternalTransitionConfigurer < org.springframework.statemachine.security.AbstractSecurityTests.States , org.springframework.statemachine.security.AbstractSecurityTests.Events > org.springframework.statemachine.security.ExternalTransitionConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> = org.springframework.statemachine.security.Builder<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . configureTransitions ( ) . withExternal ( ) ; if ( java.lang.String != null ) { org.springframework.statemachine.security.ExternalTransitionConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . secured ( java.lang.String , org.springframework.statemachine.security.ComparisonType ) ; } if ( java.lang.String != null ) { org.springframework.statemachine.security.ExternalTransitionConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . secured ( java.lang.String ) ; } org.springframework.statemachine.security.ExternalTransitionConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . source ( org.springframework.statemachine.security.AbstractSecurityTests.States . org.springframework.statemachine.security.AbstractSecurityTests.States ) ; org.springframework.statemachine.security.ExternalTransitionConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . target ( org.springframework.statemachine.security.AbstractSecurityTests.States . org.springframework.statemachine.security.AbstractSecurityTests.States ) ; org.springframework.statemachine.security.ExternalTransitionConfigurer<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . event ( org.springframework.statemachine.security.AbstractSecurityTests.Events . org.springframework.statemachine.security.AbstractSecurityTests.Events ) ; return org.springframework.statemachine.security.Builder<org.springframework.statemachine.security.AbstractSecurityTests.States,org.springframework.statemachine.security.AbstractSecurityTests.Events> . build ( ) ; }  <METHOD_END>
