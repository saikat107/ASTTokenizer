<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getChannelName ( java.lang.reflect.Method ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getPayloadExpression ( java.lang.reflect.Method ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getChannelName ( java.lang.reflect.Method ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getPayloadExpression ( java.lang.reflect.Method ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING , java.lang.String .class , int .class ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getPayloadExpression ( java.lang.reflect.Method ) ; assertEquals ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getHeaderExpressions ( java.lang.reflect.Method ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class , java.lang.String .class ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getPayloadExpression ( java.lang.reflect.Method ) ; assertEquals ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getHeaderExpressions ( java.lang.reflect.Method ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getChannelName ( java.lang.reflect.Method ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getPayloadExpression ( java.lang.reflect.Method ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING ) ; org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getPayloadExpression ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING , java.lang.String .class ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getPayloadExpression ( java.lang.reflect.Method ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING , java.lang.String .class ) ; org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getPayloadExpression ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getChannelName ( java.lang.reflect.Method ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING ) ; java.lang.String java.lang.String = org.springframework.integration.aop.MethodAnnotationPublisherMetadataSource . getChannelName ( java.lang.reflect.Method ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return java.lang.reflect.Method ( org.springframework.integration.aop.MethodAnnotationPublisherMetadataSourceTests.TestClass .class , java.lang.String , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return java.lang.reflect.Method ( org.springframework.integration.aop.MethodAnnotationPublisherMetadataSourceTests .class , java.lang.String , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { try { return java.lang.Class<> . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ Publisher @ Payload ( STRING ) public void void ( java.lang.String java.lang.String , int int ) {	}  <METHOD_END>
<METHOD_START> @ Publisher ( channel = STRING ) @ Payload ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Publisher ( channel = STRING ) @ Payload public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Publisher ( channel = STRING ) @ Payload ( STRING ) public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ Publisher ( channel = STRING ) @ Payload ( STRING ) public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ Publisher @ Payload ( STRING ) public void void ( java.lang.String java.lang.String , @ Header ( STRING ) java.lang.String java.lang.String , @ Header ( STRING ) java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> @ Publisher public void void ( @ Payload java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> @ Publisher public void void ( java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> @ org.springframework.integration.aop.MethodAnnotationPublisherMetadataSourceTests.CustomPublisher ( java.lang.String = STRING ) public void void ( ) {	}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
