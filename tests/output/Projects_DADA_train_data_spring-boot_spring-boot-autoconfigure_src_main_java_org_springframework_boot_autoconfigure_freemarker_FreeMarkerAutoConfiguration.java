<METHOD_START> public void ( ApplicationContext org.springframework.boot.autoconfigure.freemarker.ApplicationContext , FreeMarkerProperties org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties ) { this . org.springframework.boot.autoconfigure.freemarker.ApplicationContext = org.springframework.boot.autoconfigure.freemarker.ApplicationContext ; this . org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties = org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { if ( this . org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties . isCheckTemplateLocation ( ) ) { TemplateLocation org.springframework.boot.autoconfigure.freemarker.TemplateLocation = null ; java.util.List<org.springframework.boot.autoconfigure.freemarker.TemplateLocation> < TemplateLocation > java.util.List<org.springframework.boot.autoconfigure.freemarker.TemplateLocation> = new java.util.ArrayList<org.springframework.boot.autoconfigure.freemarker.TemplateLocation> <> ( ) ; for ( java.lang.String java.lang.String : this . org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties . getTemplateLoaderPath ( ) ) { TemplateLocation org.springframework.boot.autoconfigure.freemarker.TemplateLocation = new TemplateLocation ( java.lang.String ) ; java.util.List<org.springframework.boot.autoconfigure.freemarker.TemplateLocation> . add ( org.springframework.boot.autoconfigure.freemarker.TemplateLocation ) ; if ( org.springframework.boot.autoconfigure.freemarker.TemplateLocation . exists ( this . org.springframework.boot.autoconfigure.freemarker.ApplicationContext ) ) { org.springframework.boot.autoconfigure.freemarker.TemplateLocation = org.springframework.boot.autoconfigure.freemarker.TemplateLocation ; break; } } if ( org.springframework.boot.autoconfigure.freemarker.TemplateLocation == null ) { org.springframework.boot.autoconfigure.freemarker.Log . warn ( STRING + java.util.List<org.springframework.boot.autoconfigure.freemarker.TemplateLocation> + STRING + STRING + STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( FreeMarkerConfigurationFactory org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurationFactory ) { org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurationFactory . setTemplateLoaderPaths ( this . org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties . getTemplateLoaderPath ( ) ) ; org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurationFactory . setPreferFileSystemAccess ( this . org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties . isPreferFileSystemAccess ( ) ) ; org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurationFactory . setDefaultEncoding ( this . org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties . getCharsetName ( ) ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . void ( this . org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties . getSettings ( ) ) ; org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurationFactory . setFreemarkerSettings ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurationFactoryBean org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurationFactoryBean ( ) { FreeMarkerConfigurationFactoryBean org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurationFactoryBean = new FreeMarkerConfigurationFactoryBean ( ) ; void ( org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurationFactoryBean ) ; return org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurationFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( FreeMarkerConfig .class ) public org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurer org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurer ( ) { FreeMarkerConfigurer org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurer = new FreeMarkerConfigurer ( ) ; void ( org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurer ) ; return org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurer ; }  <METHOD_END>
<METHOD_START> @ Bean public freemarker . freemarker . freemarker.template.Configuration freemarker.template.Configuration ( FreeMarkerConfig org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfig ) { return org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfig . getConfiguration ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) @ ConditionalOnProperty ( name = STRING , matchIfMissing = true ) public org.springframework.boot.autoconfigure.freemarker.FreeMarkerViewResolver org.springframework.boot.autoconfigure.freemarker.FreeMarkerViewResolver ( ) { FreeMarkerViewResolver org.springframework.boot.autoconfigure.freemarker.FreeMarkerViewResolver = new FreeMarkerViewResolver ( ) ; this . org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties . applyToViewResolver ( org.springframework.boot.autoconfigure.freemarker.FreeMarkerViewResolver ) ; return org.springframework.boot.autoconfigure.freemarker.FreeMarkerViewResolver ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean @ ConditionalOnEnabledResourceChain public org.springframework.boot.autoconfigure.freemarker.ResourceUrlEncodingFilter org.springframework.boot.autoconfigure.freemarker.ResourceUrlEncodingFilter ( ) { return new ResourceUrlEncodingFilter ( ) ; }  <METHOD_END>
