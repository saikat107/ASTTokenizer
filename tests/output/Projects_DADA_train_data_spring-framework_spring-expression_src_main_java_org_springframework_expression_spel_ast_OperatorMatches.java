<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( STRING , int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.BooleanTypedValue org.springframework.expression.spel.ast.BooleanTypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = getLeftOperand ( ) ; SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = getRightOperand ( ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ast.SpelNodeImpl . getValue ( org.springframework.expression.spel.ast.ExpressionState , java.lang.String .class ) ; java.lang.Object java.lang.Object = getRightOperand ( ) . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; if ( ! ( java.lang.Object instanceof java.lang.String ) ) { throw new SpelEvaluationException ( org.springframework.expression.spel.ast.SpelNodeImpl . getStartPosition ( ) , SpelMessage . INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR , java.lang.Object ) ; } if ( ! ( java.lang.Object instanceof java.lang.String ) ) { throw new SpelEvaluationException ( org.springframework.expression.spel.ast.SpelNodeImpl . getStartPosition ( ) , SpelMessage . INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR , java.lang.Object ) ; } try { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; java.util.regex.Pattern java.util.regex.Pattern = this . java.util.concurrent.ConcurrentMap<java.lang.String,java.util.regex.Pattern> . java.util.regex.Pattern ( java.lang.String ) ; if ( java.util.regex.Pattern == null ) { java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String ) ; this . java.util.concurrent.ConcurrentMap<java.lang.String,java.util.regex.Pattern> . java.util.regex.Pattern ( java.lang.String , java.util.regex.Pattern ) ; } java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; return BooleanTypedValue . forValue ( java.util.regex.Matcher . boolean ( ) ) ; } catch ( java.util.regex.PatternSyntaxException java.util.regex.PatternSyntaxException ) { throw new SpelEvaluationException ( org.springframework.expression.spel.ast.SpelNodeImpl . getStartPosition ( ) , java.util.regex.PatternSyntaxException , SpelMessage . INVALID_PATTERN , java.lang.Object ) ; } }  <METHOD_END>
