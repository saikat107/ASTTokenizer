<METHOD_START> @ Test public void void ( ) { void ( false , true , false , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , true , false , false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , true , true , true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , false , false , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , false , true , true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , true , false , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , true , false , false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , true , true , true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , false , false , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , false , true , true , false ) ; }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean , boolean boolean , boolean boolean , boolean boolean , boolean boolean ) { StaticApplicationContext org.springframework.context.support.StaticApplicationContext = new StaticApplicationContext ( ) ; if ( boolean ) { StaticApplicationContext org.springframework.context.support.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.context.support.StaticApplicationContext . refresh ( ) ; org.springframework.context.support.StaticApplicationContext . setParent ( org.springframework.context.support.StaticApplicationContext ) ; } MutablePropertyValues org.springframework.context.support.MutablePropertyValues = new MutablePropertyValues ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String [] java.lang.String[] ; if ( boolean ) { java.lang.String[] = new java.lang.String [] { STRING + java.lang.String + STRING , STRING + java.lang.String + STRING } ; } else { java.lang.String[] = new java.lang.String [] { java.lang.String + STRING , java.lang.String + STRING } ; } org.springframework.context.support.MutablePropertyValues . add ( STRING , java.lang.String[] ) ; if ( ! boolean ) { org.springframework.context.support.MutablePropertyValues . add ( STRING , java.lang.Boolean . java.lang.Boolean ) ; } if ( boolean ) { org.springframework.context.support.MutablePropertyValues . add ( STRING , java.lang.Boolean . java.lang.Boolean ) ; } if ( boolean ) { org.springframework.context.support.MutablePropertyValues . add ( STRING , java.lang.Boolean . java.lang.Boolean ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = boolean ? ( java.lang.Class<?> < ? > ) ReloadableResourceBundleMessageSource .class : ResourceBundleMessageSource .class ; org.springframework.context.support.StaticApplicationContext . registerSingleton ( STRING , java.lang.Class<> , org.springframework.context.support.MutablePropertyValues ) ; org.springframework.context.support.StaticApplicationContext . refresh ( ) ; java.util.Locale . void ( boolean ? java.util.Locale . java.util.Locale : java.util.Locale . java.util.Locale ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( boolean && boolean ? STRING : STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , new java.util.Locale ( STRING , STRING ) ) ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , new java.util.Locale ( STRING , STRING , STRING ) ) ) ; if ( boolean ) { assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; } MessageSourceAccessor org.springframework.context.support.MessageSourceAccessor = new MessageSourceAccessor ( org.springframework.context.support.StaticApplicationContext ) ; LocaleContextHolder . setLocale ( new java.util.Locale ( STRING , STRING ) ) ; try { assertEquals ( STRING , org.springframework.context.support.MessageSourceAccessor . getMessage ( STRING ) ) ; } finally { LocaleContextHolder . setLocale ( null ) ; } assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; MessageSourceResolvable org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( STRING ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ; org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( new java.lang.String [] { STRING , STRING } ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( new java.lang.String [] { STRING , STRING } ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { STRING , new DefaultMessageSourceResolvable ( new java.lang.String [] { STRING } ) } ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , java.lang.Object[] , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( null , null , STRING , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( null , java.lang.Object[] , STRING , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( null , null , STRING , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( null , java.lang.Object[] , STRING , java.util.Locale . java.util.Locale ) ) ; org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( null , null , STRING ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ; org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( null , java.lang.Object[] , STRING ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ; org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( null , null , STRING ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ; org.springframework.context.support.MessageSourceResolvable = new DefaultMessageSourceResolvable ( null , java.lang.Object[] , STRING ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( org.springframework.context.support.MessageSourceResolvable , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , new java.lang.Object [] { STRING , STRING } , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; if ( boolean ) { assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; } else { assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; } assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , new java.lang.Object [] { STRING } , java.util.Locale . java.util.Locale ) ) ; try { assertEquals ( STRING , org.springframework.context.support.StaticApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; if ( ! boolean ) { fail ( STRING ) ; } } catch ( NoSuchMessageException org.springframework.context.support.NoSuchMessageException ) { if ( boolean ) { fail ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.support.GenericApplicationContext . refresh ( ) ; assertEquals ( STRING , org.springframework.context.support.GenericApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.GenericApplicationContext . getMessage ( STRING , new java.lang.Object [] { STRING } , STRING , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceBundleMessageSource org.springframework.context.support.ResourceBundleMessageSource = new ResourceBundleMessageSource ( ) ; org.springframework.context.support.ResourceBundleMessageSource . setBasename ( STRING ) ; assertEquals ( STRING , org.springframework.context.support.ResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceBundleMessageSource org.springframework.context.support.ResourceBundleMessageSource = new ResourceBundleMessageSource ( ) ; org.springframework.context.support.ResourceBundleMessageSource . setBasename ( STRING ) ; assertEquals ( STRING , org.springframework.context.support.ResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceBundleMessageSource org.springframework.context.support.ResourceBundleMessageSource = new ResourceBundleMessageSource ( ) ; org.springframework.context.support.ResourceBundleMessageSource . setBasename ( STRING ) ; org.springframework.context.support.ResourceBundleMessageSource . setDefaultEncoding ( STRING ) ; assertEquals ( STRING , org.springframework.context.support.ResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceBundleMessageSource org.springframework.context.support.ResourceBundleMessageSource = new ResourceBundleMessageSource ( ) ; org.springframework.context.support.ResourceBundleMessageSource . setBasename ( STRING ) ; org.springframework.context.support.ResourceBundleMessageSource . setDefaultEncoding ( STRING ) ; org.springframework.context.support.ResourceBundleMessageSource . setFallbackToSystemLocale ( false ) ; try { org.springframework.context.support.ResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ; fail ( STRING ) ; } catch ( NoSuchMessageException org.springframework.context.support.NoSuchMessageException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReloadableResourceBundleMessageSource org.springframework.context.support.ReloadableResourceBundleMessageSource = new ReloadableResourceBundleMessageSource ( ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setBasename ( STRING ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { ReloadableResourceBundleMessageSource org.springframework.context.support.ReloadableResourceBundleMessageSource = new ReloadableResourceBundleMessageSource ( ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setBasename ( STRING ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setCacheSeconds ( NUMBER ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { ReloadableResourceBundleMessageSource org.springframework.context.support.ReloadableResourceBundleMessageSource = new ReloadableResourceBundleMessageSource ( ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setBasename ( STRING ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setCacheSeconds ( NUMBER ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setConcurrentRefresh ( false ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReloadableResourceBundleMessageSource org.springframework.context.support.ReloadableResourceBundleMessageSource = new ReloadableResourceBundleMessageSource ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setCommonMessages ( java.util.Properties ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setBasename ( STRING ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , new java.lang.Object [] { STRING } , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , new java.lang.Object [] { STRING } , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReloadableResourceBundleMessageSource org.springframework.context.support.ReloadableResourceBundleMessageSource = new ReloadableResourceBundleMessageSource ( ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setBasename ( STRING ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReloadableResourceBundleMessageSource org.springframework.context.support.ReloadableResourceBundleMessageSource = new ReloadableResourceBundleMessageSource ( ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setBasename ( STRING ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setDefaultEncoding ( STRING ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReloadableResourceBundleMessageSource org.springframework.context.support.ReloadableResourceBundleMessageSource = new ReloadableResourceBundleMessageSource ( ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setBasename ( STRING ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setDefaultEncoding ( STRING ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setFileEncodings ( java.util.Properties ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setFallbackToSystemLocale ( false ) ; try { org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ; fail ( STRING ) ; } catch ( NoSuchMessageException org.springframework.context.support.NoSuchMessageException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReloadableResourceBundleMessageSource org.springframework.context.support.ReloadableResourceBundleMessageSource = new ReloadableResourceBundleMessageSource ( ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setBasename ( STRING ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setFallbackToSystemLocale ( false ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setFileEncodings ( java.util.Properties ) ; try { org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ; fail ( STRING ) ; } catch ( NoSuchMessageException org.springframework.context.support.NoSuchMessageException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReloadableResourceBundleMessageSource org.springframework.context.support.ReloadableResourceBundleMessageSource = new ReloadableResourceBundleMessageSource ( ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setBasename ( STRING ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setFallbackToSystemLocale ( false ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.context.support.ReloadableResourceBundleMessageSource . setFileEncodings ( java.util.Properties ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.context.support.ReloadableResourceBundleMessageSource . getMessage ( STRING , null , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReloadableResourceBundleMessageSource org.springframework.context.support.ReloadableResourceBundleMessageSource = new ReloadableResourceBundleMessageSource ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.context.support.ReloadableResourceBundleMessageSource . calculateFilenamesForLocale ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> = org.springframework.context.support.ReloadableResourceBundleMessageSource . calculateFilenamesForLocale ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> = org.springframework.context.support.ReloadableResourceBundleMessageSource . calculateFilenamesForLocale ( STRING , new java.util.Locale ( STRING , STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> = org.springframework.context.support.ReloadableResourceBundleMessageSource . calculateFilenamesForLocale ( STRING , new java.util.Locale ( STRING , STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> = org.springframework.context.support.ReloadableResourceBundleMessageSource . calculateFilenamesForLocale ( STRING , new java.util.Locale ( STRING , STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> = org.springframework.context.support.ReloadableResourceBundleMessageSource . calculateFilenamesForLocale ( STRING , new java.util.Locale ( STRING , STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceBundleMessageSource org.springframework.context.support.ResourceBundleMessageSource = new ResourceBundleMessageSource ( ) ; org.springframework.context.support.ResourceBundleMessageSource . setBasename ( STRING ) ; MessageSourceResourceBundle org.springframework.context.support.MessageSourceResourceBundle = new MessageSourceResourceBundle ( org.springframework.context.support.ResourceBundleMessageSource , java.util.Locale . java.util.Locale ) ; assertEquals ( STRING , org.springframework.context.support.MessageSourceResourceBundle . getString ( STRING ) ) ; assertTrue ( org.springframework.context.support.MessageSourceResourceBundle . containsKey ( STRING ) ) ; MessageSourceResourceBundle org.springframework.context.support.MessageSourceResourceBundle = new MessageSourceResourceBundle ( org.springframework.context.support.ResourceBundleMessageSource , java.util.Locale . java.util.Locale ) ; assertEquals ( STRING , org.springframework.context.support.MessageSourceResourceBundle . getString ( STRING ) ) ; assertTrue ( org.springframework.context.support.MessageSourceResourceBundle . containsKey ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { java.util.ResourceBundle . void ( ) ; }  <METHOD_END>
