<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . setBeanFactory ( this . org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ) ; this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . setEnvironment ( this . org.springframework.boot.autoconfigure.MockEnvironment ) ; this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . setResourceLoader ( new DefaultResourceLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.BasicEnableAutoConfiguration .class ) ; assertThat ( java.lang.String[] ) . hasSameSizeAs ( SpringFactoriesLoader . loadFactoryNames ( EnableAutoConfiguration .class , java.lang.Class<? extends org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests> ( ) . java.lang.ClassLoader ( ) ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ( ) . getExclusions ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.EnableAutoConfigurationWithClassExclusions .class ) ; assertThat ( java.lang.String[] ) . hasSize ( java.util.List<java.lang.String> ( ) . int ( ) - NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ( ) . getExclusions ( ) ) . contains ( FreeMarkerAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.SpringBootApplicationWithClassExclusions .class ) ; assertThat ( java.lang.String[] ) . hasSize ( java.util.List<java.lang.String> ( ) . int ( ) - NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ( ) . getExclusions ( ) ) . contains ( FreeMarkerAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.EnableAutoConfigurationWithClassNameExclusions .class ) ; assertThat ( java.lang.String[] ) . hasSize ( java.util.List<java.lang.String> ( ) . int ( ) - NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ( ) . getExclusions ( ) ) . contains ( MustacheAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.SpringBootApplicationWithClassNameExclusions .class ) ; assertThat ( java.lang.String[] ) . hasSize ( java.util.List<java.lang.String> ( ) . int ( ) - NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ( ) . getExclusions ( ) ) . contains ( MustacheAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.MockEnvironment . setProperty ( STRING , FreeMarkerAutoConfiguration .class . java.lang.String ( ) ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.BasicEnableAutoConfiguration .class ) ; assertThat ( java.lang.String[] ) . hasSize ( java.util.List<java.lang.String> ( ) . int ( ) - NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ( ) . getExclusions ( ) ) . contains ( FreeMarkerAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.MockEnvironment . setProperty ( STRING , FreeMarkerAutoConfiguration .class . java.lang.String ( ) + STRING + MustacheAutoConfiguration .class . java.lang.String ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.MockEnvironment . setProperty ( STRING , FreeMarkerAutoConfiguration .class . java.lang.String ( ) + STRING + MustacheAutoConfiguration .class . java.lang.String ( ) + STRING ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.MockEnvironment . setProperty ( STRING , FreeMarkerAutoConfiguration .class . java.lang.String ( ) ) ; this . org.springframework.boot.autoconfigure.MockEnvironment . setProperty ( STRING , MustacheAutoConfiguration .class . java.lang.String ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.BasicEnableAutoConfiguration .class ) ; assertThat ( java.lang.String[] ) . hasSize ( java.util.List<java.lang.String> ( ) . int ( ) - NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ( ) . getExclusions ( ) ) . contains ( FreeMarkerAutoConfiguration .class . java.lang.String ( ) , MustacheAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.MockEnvironment . setProperty ( STRING , ThymeleafAutoConfiguration .class . java.lang.String ( ) ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.EnableAutoConfigurationWithClassAndClassNameExclusions .class ) ; assertThat ( java.lang.String[] ) . hasSize ( java.util.List<java.lang.String> ( ) . int ( ) - NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ( ) . getExclusions ( ) ) . contains ( FreeMarkerAutoConfiguration .class . java.lang.String ( ) , MustacheAutoConfiguration .class . java.lang.String ( ) , ThymeleafAutoConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.EnableAutoConfigurationWithFaultyClassExclude .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.EnableAutoConfigurationWithFaultyClassNameExclude .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.MockEnvironment . setProperty ( STRING , STRING + STRING ) ; this . org.springframework.boot.autoconfigure.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.BasicEnableAutoConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.MockEnvironment . setProperty ( STRING , STRING ) ; java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.EnableAutoConfigurationWithAbsentClassNameExclude .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ( ) . getExclusions ( ) ) . containsExactlyInAnyOrder ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.BasicEnableAutoConfiguration .class ) ; this . java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportFilter> . add ( new org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportFilter ( java.lang.String[] , NUMBER ) ) ; this . java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportFilter> . add ( new org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportFilter ( java.lang.String[] , NUMBER , NUMBER ) ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.BasicEnableAutoConfiguration .class ) ; assertThat ( java.lang.String[] ) . hasSize ( java.lang.String[] . int - NUMBER ) ; assertThat ( java.lang.String[] ) . doesNotContain ( java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportFilter org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportFilter = new org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportFilter ( new java.lang.String [] {} ) ; this . java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportFilter> . add ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportFilter ) ; java.lang.String[] ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.BasicEnableAutoConfiguration .class ) ; assertThat ( org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportFilter . org.springframework.boot.autoconfigure.BeanFactory ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return this . org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector . selectImports ( new StandardAnnotationMetadata ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return SpringFactoriesLoader . loadFactoryNames ( EnableAutoConfiguration .class , java.lang.Class<? extends org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportFilter> < AutoConfigurationImportFilter > java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportFilter> ( ) { return org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests .this . java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportFilter> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportListener> < AutoConfigurationImportListener > java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportListener> ( ) { return java.util.Collections .< AutoConfigurationImportListener > java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportListener> ( new AutoConfigurationImportListener ( ) { @ java.lang.Override public void void ( AutoConfigurationImportEvent org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ) { org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector .this . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent = org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AutoConfigurationImportEvent org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ) { org.springframework.boot.autoconfigure.AutoConfigurationImportSelectorTests.TestAutoConfigurationImportSelector .this . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent = org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.AutoConfigurationImportEvent org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ( ) { return this . org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String [] java.lang.String[] , int ... int[] ) { for ( int int : int[] ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String[] [ int ] ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean [] boolean[] ( java.lang.String [] java.lang.String[] , AutoConfigurationMetadata org.springframework.boot.autoconfigure.AutoConfigurationMetadata ) { boolean [] boolean[] = new boolean [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < boolean[] . int ; int ++ ) { boolean[] [ int ] = ! this . java.util.Set<java.lang.String> . boolean ( java.lang.String[] [ int ] ) ; } return boolean[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.autoconfigure.BeanFactory ) throws org.springframework.boot.autoconfigure.BeansException { this . org.springframework.boot.autoconfigure.BeanFactory = org.springframework.boot.autoconfigure.BeanFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.BeanFactory org.springframework.boot.autoconfigure.BeanFactory ( ) { return this . org.springframework.boot.autoconfigure.BeanFactory ; }  <METHOD_END>
