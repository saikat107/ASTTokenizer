<METHOD_START> @ Test public void void ( ) { RedisInboundChannelAdapter org.springframework.integration.redis.config.RedisInboundChannelAdapter = org.springframework.integration.redis.config.ApplicationContext . getBean ( STRING , RedisInboundChannelAdapter .class ) ; assertEquals ( STRING , org.springframework.integration.redis.config.RedisInboundChannelAdapter . getComponentName ( ) ) ; assertEquals ( STRING , org.springframework.integration.redis.config.RedisInboundChannelAdapter . getComponentType ( ) ) ; DirectFieldAccessor org.springframework.integration.redis.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.redis.config.RedisInboundChannelAdapter ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.Object , org.springframework.integration.redis.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.Object , org.springframework.integration.redis.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.integration.redis.config.ApplicationContext . getBean ( STRING ) , org.springframework.integration.redis.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.config.ApplicationContext . getBean ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertNull ( TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisInboundChannelAdapter org.springframework.integration.redis.config.RedisInboundChannelAdapter = org.springframework.integration.redis.config.ApplicationContext . getBean ( STRING , RedisInboundChannelAdapter .class ) ; this . awaitContainerSubscribedWithPatterns ( TestUtils . getPropertyValue ( org.springframework.integration.redis.config.RedisInboundChannelAdapter , STRING , RedisMessageListenerContainer .class ) ) ; RedisConnectionFactory org.springframework.integration.redis.config.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; org.springframework.integration.redis.config.RedisConnectionFactory . getConnection ( ) . publish ( STRING . byte[] ( ) , STRING . byte[] ( ) ) ; org.springframework.integration.redis.config.RedisConnectionFactory . getConnection ( ) . publish ( STRING . byte[] ( ) , STRING . byte[] ( ) ) ; QueueChannel org.springframework.integration.redis.config.QueueChannel = org.springframework.integration.redis.config.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.redis.config.Message<?> = org.springframework.integration.redis.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.config.Message<> ) ; assertThat ( org.springframework.integration.redis.config.Message<> . getPayload ( ) , Matchers .< java.lang.Object > isOneOf ( STRING , STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( org.springframework.integration.redis.config.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.redis.config.RedisInboundChannelAdapter , STRING ) ) ; }  <METHOD_END>
