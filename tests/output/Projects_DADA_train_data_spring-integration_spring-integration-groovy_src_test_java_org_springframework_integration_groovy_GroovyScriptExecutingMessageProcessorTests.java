<METHOD_START> @ Test @ Repeat ( NUMBER ) public void void ( ) java.lang.Exception { int int = java.util.concurrent.atomic.AtomicInteger . int ( ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING + int ) . build ( ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource = new org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource ( java.lang.String , STRING ) ; ScriptSource org.springframework.integration.groovy.ScriptSource = new ResourceScriptSource ( org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource ) ; MessageProcessor < java.lang.Object > org.springframework.integration.groovy.MessageProcessor<java.lang.Object> = new GroovyScriptExecutingMessageProcessor ( org.springframework.integration.groovy.ScriptSource ) ; java.lang.Object java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING + int , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = java.util.concurrent.atomic.AtomicInteger . int ( ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING + int ) . build ( ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource = new org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource ( java.lang.String , STRING ) ; ScriptSource org.springframework.integration.groovy.ScriptSource = new ResourceScriptSource ( org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource ) ; java.lang.Object java.lang.Object = null ; class CustomScriptVariableGenerator implements ScriptVariableGenerator { @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Message < ? > org.springframework.integration.groovy.Message<?> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.System . long ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.groovy.Message<> . getPayload ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.groovy.Message<> . getHeaders ( ) ) ; return java.util.Map<java.lang.String,java.lang.Object> ; } } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { ScriptVariableGenerator org.springframework.integration.groovy.ScriptVariableGenerator = new CustomScriptVariableGenerator ( ) ; MessageProcessor < java.lang.Object > org.springframework.integration.groovy.MessageProcessor<java.lang.Object> = new GroovyScriptExecutingMessageProcessor ( org.springframework.integration.groovy.ScriptSource , org.springframework.integration.groovy.ScriptVariableGenerator ) ; java.lang.Object java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertFalse ( java.lang.Object . boolean ( java.lang.Object ) ) ; java.lang.Object = java.lang.Object ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Message < ? > org.springframework.integration.groovy.Message<?> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.System . long ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.groovy.Message<> . getPayload ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.groovy.Message<> . getHeaders ( ) ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource = new org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource ( java.lang.String , STRING ) ; long long = org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource . long ( ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource . void ( STRING ) ; assertFalse ( STRING + long + STRING + org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource . long ( ) , long == org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource . long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource = new org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource ( java.lang.String , STRING ) ; ScriptSource org.springframework.integration.groovy.ScriptSource = new ResourceScriptSource ( org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource ) ; MessageProcessor < java.lang.Object > org.springframework.integration.groovy.MessageProcessor<java.lang.Object> = new GroovyScriptExecutingMessageProcessor ( org.springframework.integration.groovy.ScriptSource ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource . void ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource = new org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource ( java.lang.String , STRING ) ; ScriptSource org.springframework.integration.groovy.ScriptSource = new RefreshableResourceScriptSource ( org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource , NUMBER ) ; MessageProcessor < java.lang.Object > org.springframework.integration.groovy.MessageProcessor<java.lang.Object> = new GroovyScriptExecutingMessageProcessor ( org.springframework.integration.groovy.ScriptSource ) ; java.lang.Object java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource . void ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource . void ( STRING ) ; java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource = new org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource ( java.lang.String , STRING ) ; ScriptSource org.springframework.integration.groovy.ScriptSource = new RefreshableResourceScriptSource ( org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource , - NUMBER ) ; MessageProcessor < java.lang.Object > org.springframework.integration.groovy.MessageProcessor<java.lang.Object> = new GroovyScriptExecutingMessageProcessor ( org.springframework.integration.groovy.ScriptSource ) ; java.lang.Object java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource . void ( STRING ) ; java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.groovy.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource = new org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource ( java.lang.String , STRING ) ; ScriptSource org.springframework.integration.groovy.ScriptSource = new RefreshableResourceScriptSource ( org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource , NUMBER ) ; MessageProcessor < java.lang.Object > org.springframework.integration.groovy.MessageProcessor<java.lang.Object> = new GroovyScriptExecutingMessageProcessor ( org.springframework.integration.groovy.ScriptSource ) ; java.lang.Object java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource . void ( STRING ) ; java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.integration.groovy.GroovyScriptExecutingMessageProcessorTests.TestResource . void ( STRING ) ; java.lang.Object = org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Message < ? > org.springframework.integration.groovy.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; java.lang.String java.lang.String = STRING ; ScriptSource org.springframework.integration.groovy.ScriptSource = new StaticScriptSource ( java.lang.String , Script .class . java.lang.String ( ) ) ; final MessageProcessor < java.lang.Object > org.springframework.integration.groovy.MessageProcessor<java.lang.Object> = new GroovyScriptExecutingMessageProcessor ( org.springframework.integration.groovy.ScriptSource , message1 -> { Map < String , Object > variables = new HashMap < String , Object > ( NUMBER ) ; variables . put ( STRING , var1 ) ; variables . put ( STRING , var2 ) ; return variables ; } ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.concurrent.ExecutorService . void ( ( ) org.springframework.integration.groovy.MessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.groovy.Message<> ) ) ; } java.util.concurrent.ExecutorService . void ( ) ; assertTrue ( java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicInteger . int ( ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( java.lang.String ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) java.io.IOException { return long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . long = java.lang.System . long ( ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( STRING ) ) ; }  <METHOD_END>
