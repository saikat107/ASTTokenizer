<METHOD_START> public void ( HttpHeaders org.springframework.web.socket.adapter.standard.HttpHeaders , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.net.InetSocketAddress java.net.InetSocketAddress , java.net.InetSocketAddress java.net.InetSocketAddress ) { this( org.springframework.web.socket.adapter.standard.HttpHeaders , java.util.Map<java.lang.String,java.lang.Object> , java.net.InetSocketAddress , java.net.InetSocketAddress , null ); }  <METHOD_END>
<METHOD_START> public void ( HttpHeaders org.springframework.web.socket.adapter.standard.HttpHeaders , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.net.InetSocketAddress java.net.InetSocketAddress , java.net.InetSocketAddress java.net.InetSocketAddress , java.security.Principal java.security.Principal ) { super( java.util.Map<java.lang.String,java.lang.Object> ); org.springframework.web.socket.adapter.standard.HttpHeaders = ( org.springframework.web.socket.adapter.standard.HttpHeaders != null ) ? org.springframework.web.socket.adapter.standard.HttpHeaders : new HttpHeaders ( ) ; this . org.springframework.web.socket.adapter.standard.HttpHeaders = HttpHeaders . readOnlyHttpHeaders ( org.springframework.web.socket.adapter.standard.HttpHeaders ) ; this . java.security.Principal = java.security.Principal ; this . java.net.InetSocketAddress = java.net.InetSocketAddress ; this . java.net.InetSocketAddress = java.net.InetSocketAddress ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { checkNativeSessionInitialized ( ) ; return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { checkNativeSessionInitialized ( ) ; return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.adapter.standard.HttpHeaders org.springframework.web.socket.adapter.standard.HttpHeaders ( ) { return this . org.springframework.web.socket.adapter.standard.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { checkNativeSessionInitialized ( ) ; return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.adapter.standard.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.adapter.standard.WebSocketExtension> ( ) { checkNativeSessionInitialized ( ) ; return this . java.util.List<org.springframework.web.socket.adapter.standard.WebSocketExtension> ; }  <METHOD_END>
<METHOD_START> public java.security.Principal java.security.Principal ( ) { return this . java.security.Principal ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return this . java.net.InetSocketAddress ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return this . java.net.InetSocketAddress ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { checkNativeSessionInitialized ( ) ; getNativeSession ( ) . setMaxTextMessageBufferSize ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { checkNativeSessionInitialized ( ) ; return getNativeSession ( ) . getMaxTextMessageBufferSize ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { checkNativeSessionInitialized ( ) ; getNativeSession ( ) . setMaxBinaryMessageBufferSize ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { checkNativeSessionInitialized ( ) ; return getNativeSession ( ) . getMaxBinaryMessageBufferSize ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( getNativeSession ( ) != null && getNativeSession ( ) . isOpen ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Session org.springframework.web.socket.adapter.standard.Session ) { super. initializeNativeSession ( org.springframework.web.socket.adapter.standard.Session ) ; this . java.lang.String = org.springframework.web.socket.adapter.standard.Session . getId ( ) ; this . java.net.URI = org.springframework.web.socket.adapter.standard.Session . getRequestURI ( ) ; this . java.lang.String = org.springframework.web.socket.adapter.standard.Session . getNegotiatedSubprotocol ( ) ; java.util.List<org.springframework.web.socket.adapter.standard.Extension> < Extension > java.util.List<org.springframework.web.socket.adapter.standard.Extension> = getNativeSession ( ) . getNegotiatedExtensions ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.web.socket.adapter.standard.Extension> ) ) { this . java.util.List<org.springframework.web.socket.adapter.standard.WebSocketExtension> = new java.util.ArrayList <> ( java.util.List<org.springframework.web.socket.adapter.standard.Extension> . size ( ) ) ; for ( Extension org.springframework.web.socket.adapter.standard.Extension : java.util.List<org.springframework.web.socket.adapter.standard.Extension> ) { this . java.util.List<org.springframework.web.socket.adapter.standard.WebSocketExtension> . add ( new StandardToWebSocketExtensionAdapter ( org.springframework.web.socket.adapter.standard.Extension ) ) ; } this . java.util.List<org.springframework.web.socket.adapter.standard.WebSocketExtension> = java.util.Collections . java.util.List<org.springframework.web.socket.adapter.standard.WebSocketExtension> ( this . java.util.List<org.springframework.web.socket.adapter.standard.WebSocketExtension> ) ; } else { this . java.util.List<org.springframework.web.socket.adapter.standard.WebSocketExtension> = java.util.Collections . java.util.List<java.lang.Object> ( ) ; } if ( this . java.security.Principal == null ) { this . java.security.Principal = org.springframework.web.socket.adapter.standard.Session . getUserPrincipal ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TextMessage org.springframework.web.socket.adapter.standard.TextMessage ) throws java.io.IOException { getNativeSession ( ) . getBasicRemote ( ) . sendText ( org.springframework.web.socket.adapter.standard.TextMessage . getPayload ( ) , org.springframework.web.socket.adapter.standard.TextMessage . isLast ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BinaryMessage org.springframework.web.socket.adapter.standard.BinaryMessage ) throws java.io.IOException { getNativeSession ( ) . getBasicRemote ( ) . sendBinary ( org.springframework.web.socket.adapter.standard.BinaryMessage . getPayload ( ) , org.springframework.web.socket.adapter.standard.BinaryMessage . isLast ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( PingMessage org.springframework.web.socket.adapter.standard.PingMessage ) throws java.io.IOException { getNativeSession ( ) . getBasicRemote ( ) . sendPing ( org.springframework.web.socket.adapter.standard.PingMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( PongMessage org.springframework.web.socket.adapter.standard.PongMessage ) throws java.io.IOException { getNativeSession ( ) . getBasicRemote ( ) . sendPong ( org.springframework.web.socket.adapter.standard.PongMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( CloseStatus org.springframework.web.socket.adapter.standard.CloseStatus ) throws java.io.IOException { getNativeSession ( ) . close ( new CloseReason ( CloseCodes . getCloseCode ( org.springframework.web.socket.adapter.standard.CloseStatus . getCode ( ) ) , org.springframework.web.socket.adapter.standard.CloseStatus . getReason ( ) ) ) ; }  <METHOD_END>
