<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.boot.context.config.StaticApplicationContext = new StaticApplicationContext ( ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.context.config.StaticApplicationContext , STRING + org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.MockInitB .class . java.lang.String ( ) + STRING + org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.MockInitA .class . java.lang.String ( ) ) ; this . org.springframework.boot.context.config.DelegatingApplicationContextInitializer . initialize ( org.springframework.boot.context.config.StaticApplicationContext ) ; assertThat ( org.springframework.boot.context.config.StaticApplicationContext . getBeanFactory ( ) . getSingleton ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.context.config.StaticApplicationContext . getBeanFactory ( ) . getSingleton ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.boot.context.config.StaticApplicationContext = new StaticApplicationContext ( ) ; this . org.springframework.boot.context.config.DelegatingApplicationContextInitializer . initialize ( org.springframework.boot.context.config.StaticApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.boot.context.config.StaticApplicationContext = new StaticApplicationContext ( ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.context.config.StaticApplicationContext , STRING ) ; this . org.springframework.boot.context.config.DelegatingApplicationContextInitializer . initialize ( org.springframework.boot.context.config.StaticApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.boot.context.config.StaticApplicationContext = new StaticApplicationContext ( ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.context.config.StaticApplicationContext , STRING ) ; this . org.springframework.boot.context.config.ExpectedException . expect ( ApplicationContextException .class ) ; this . org.springframework.boot.context.config.DelegatingApplicationContextInitializer . initialize ( org.springframework.boot.context.config.StaticApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.boot.context.config.StaticApplicationContext = new StaticApplicationContext ( ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.context.config.StaticApplicationContext , STRING + java.lang.Object .class . java.lang.String ( ) ) ; this . org.springframework.boot.context.config.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.context.config.DelegatingApplicationContextInitializer . initialize ( org.springframework.boot.context.config.StaticApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.boot.context.config.StaticApplicationContext = new StaticApplicationContext ( ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.context.config.StaticApplicationContext , STRING + org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.NotSuitableInit .class . java.lang.String ( ) ) ; this . org.springframework.boot.context.config.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.context.config.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.context.config.DelegatingApplicationContextInitializer . initialize ( org.springframework.boot.context.config.StaticApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext ) { org.springframework.boot.context.config.ConfigurableApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.context.config.ConfigurableApplicationContext ) { assertThat ( org.springframework.boot.context.config.ConfigurableApplicationContext . getBeanFactory ( ) . getSingleton ( STRING ) ) . isEqualTo ( STRING ) ; org.springframework.boot.context.config.ConfigurableApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableWebApplicationContext org.springframework.boot.context.config.ConfigurableWebApplicationContext ) {		}  <METHOD_END>
