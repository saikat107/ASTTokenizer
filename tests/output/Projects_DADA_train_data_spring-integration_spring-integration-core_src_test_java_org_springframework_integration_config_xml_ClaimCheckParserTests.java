<METHOD_START> @ Test public void void ( ) { ClaimCheckInTransformer org.springframework.integration.config.xml.ClaimCheckInTransformer = ( ClaimCheckInTransformer ) new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.config.xml.EventDrivenConsumer ) . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ; MessageStore org.springframework.integration.config.xml.MessageStore = ( MessageStore ) new DirectFieldAccessor ( org.springframework.integration.config.xml.ClaimCheckInTransformer ) . getPropertyValue ( STRING ) ; assertEquals ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , org.springframework.integration.config.xml.MessageStore ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClaimCheckOutTransformer org.springframework.integration.config.xml.ClaimCheckOutTransformer = ( ClaimCheckOutTransformer ) new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.config.xml.EventDrivenConsumer ) . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ; MessageStore org.springframework.integration.config.xml.MessageStore = ( MessageStore ) new DirectFieldAccessor ( org.springframework.integration.config.xml.ClaimCheckOutTransformer ) . getPropertyValue ( STRING ) ; assertEquals ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , org.springframework.integration.config.xml.MessageStore ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . build ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; java.util.UUID java.util.UUID = ( java.util.UUID ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ; assertEquals ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . getId ( ) , java.util.UUID ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertNotNull ( this . org.springframework.integration.config.xml.MessageStore . getMessage ( java.util.UUID ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . build ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; java.util.UUID java.util.UUID = ( java.util.UUID ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ; assertEquals ( org.springframework.integration.config.xml.Message<> . getHeaders ( ) . getId ( ) , java.util.UUID ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.config.xml.MessageStore . getMessage ( java.util.UUID ) ) ; }  <METHOD_END>
