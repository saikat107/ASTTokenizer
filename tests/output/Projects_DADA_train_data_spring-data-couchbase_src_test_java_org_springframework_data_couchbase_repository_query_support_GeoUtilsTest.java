<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Distance org.springframework.data.couchbase.repository.query.support.Distance = new Distance ( NUMBER ) ; double [] double[] = GeoUtils . getBoundingBoxForNear ( new Point ( NUMBER , NUMBER ) , org.springframework.data.couchbase.repository.query.support.Distance ) ; assertEquals ( - NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( - NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( NUMBER , double[] [ NUMBER ] , NUMBER ) ; double[] = GeoUtils . getBoundingBoxForNear ( new Point ( - NUMBER , - NUMBER ) , org.springframework.data.couchbase.repository.query.support.Distance ) ; assertEquals ( - NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( - NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( NUMBER , double[] [ NUMBER ] , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Distance org.springframework.data.couchbase.repository.query.support.Distance = new Distance ( - NUMBER ) ; double [] double[] = GeoUtils . getBoundingBoxForNear ( new Point ( NUMBER , NUMBER ) , org.springframework.data.couchbase.repository.query.support.Distance ) ; assertEquals ( - NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( - NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( NUMBER , double[] [ NUMBER ] , NUMBER ) ; double[] = GeoUtils . getBoundingBoxForNear ( new Point ( - NUMBER , - NUMBER ) , org.springframework.data.couchbase.repository.query.support.Distance ) ; assertEquals ( - NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( - NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( NUMBER , double[] [ NUMBER ] , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.NullPointerException .class ) public void void ( ) { GeoUtils . getBoundingBoxForNear ( null , new Distance ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.NullPointerException .class ) public void void ( ) { GeoUtils . getBoundingBoxForNear ( new Point ( NUMBER , NUMBER ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.NullPointerException .class ) public void void ( ) { GeoUtils . getBoundingBoxForNear ( null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; GeoUtils . convertPointsTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , true , org.springframework.data.couchbase.repository.query.support.Point ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; GeoUtils . convertPointsTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , true , org.springframework.data.couchbase.repository.query.support.Point , org.springframework.data.couchbase.repository.query.support.Point , org.springframework.data.couchbase.repository.query.support.Point ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; GeoUtils . convertPointsTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , true , org.springframework.data.couchbase.repository.query.support.Point , org.springframework.data.couchbase.repository.query.support.Point ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; GeoUtils . convertPointsTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , true , org.springframework.data.couchbase.repository.query.support.Point , org.springframework.data.couchbase.repository.query.support.Point ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; GeoUtils . convertPointsTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , false , org.springframework.data.couchbase.repository.query.support.Point , org.springframework.data.couchbase.repository.query.support.Point ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( - NUMBER , NUMBER ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , - NUMBER ) ; GeoUtils . convertPointsTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , false , org.springframework.data.couchbase.repository.query.support.Point , org.springframework.data.couchbase.repository.query.support.Point , org.springframework.data.couchbase.repository.query.support.Point ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( - NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( - NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; GeoUtils . convertPointsTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , false , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { GeoUtils . convertPointsTo2DRanges ( JsonArray . empty ( ) , JsonArray . empty ( ) , false , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { GeoUtils . convertPointsTo2DRanges ( JsonArray . empty ( ) , JsonArray . empty ( ) , false , new Point [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Box org.springframework.data.couchbase.repository.query.support.Box = new Box ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.Box ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Box org.springframework.data.couchbase.repository.query.support.Box = new Box ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , - NUMBER ) ) ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.Box ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( - NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Polygon org.springframework.data.couchbase.repository.query.support.Polygon = new Polygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , - NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.Polygon ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( - NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Polygon org.springframework.data.couchbase.repository.query.support.Polygon = new Polygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.Polygon ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; GeoUtils . convertPointsTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , false , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; Polygon org.springframework.data.couchbase.repository.query.support.Polygon = new Polygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.Polygon ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray ) ; assertEquals ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Circle org.springframework.data.couchbase.repository.query.support.Circle = new Circle ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.Circle ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( - NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( - NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Point org.springframework.data.couchbase.repository.query.support.Point = new Point ( NUMBER , NUMBER ) ; Distance org.springframework.data.couchbase.repository.query.support.Distance = new Distance ( NUMBER ) ; Circle org.springframework.data.couchbase.repository.query.support.Circle = new Circle ( org.springframework.data.couchbase.repository.query.support.Point , org.springframework.data.couchbase.repository.query.support.Distance ) ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.Circle ) ; double [] double[] = GeoUtils . getBoundingBoxForNear ( org.springframework.data.couchbase.repository.query.support.Point , org.springframework.data.couchbase.repository.query.support.Distance ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.query.support.JsonArray . size ( ) ) ; assertEquals ( - NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( - NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( NUMBER , double[] [ NUMBER ] , NUMBER ) ; assertEquals ( double[] [ NUMBER ] , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( double[] [ NUMBER ] , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( double[] [ NUMBER ] , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; assertEquals ( double[] [ NUMBER ] , org.springframework.data.couchbase.repository.query.support.JsonArray . getDouble ( NUMBER ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; Shape org.springframework.data.couchbase.repository.query.support.Shape = new Shape ( ) {} ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.Shape ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.NullPointerException .class ) public void void ( ) java.lang.Exception { JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; JsonArray org.springframework.data.couchbase.repository.query.support.JsonArray = JsonArray . create ( ) ; GeoUtils . convertShapeTo2DRanges ( org.springframework.data.couchbase.repository.query.support.JsonArray , org.springframework.data.couchbase.repository.query.support.JsonArray , null ) ; }  <METHOD_END>
