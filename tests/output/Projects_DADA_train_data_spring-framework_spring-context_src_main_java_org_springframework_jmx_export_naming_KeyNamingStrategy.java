<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.jmx.export.naming.Resource ) { this . org.springframework.jmx.export.naming.Resource[] = new Resource [] { org.springframework.jmx.export.naming.Resource } ; }  <METHOD_END>
<METHOD_START> public void void ( Resource [] org.springframework.jmx.export.naming.Resource[] ) { this . org.springframework.jmx.export.naming.Resource[] = org.springframework.jmx.export.naming.Resource[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { this . java.util.Properties = new java.util.Properties ( ) ; CollectionUtils . mergePropertiesIntoMap ( this . java.util.Properties , this . java.util.Properties ) ; if ( this . org.springframework.jmx.export.naming.Resource[] != null ) { for ( int int = NUMBER ; int < this . org.springframework.jmx.export.naming.Resource[] . length ; int ++ ) { Resource org.springframework.jmx.export.naming.Resource = this . org.springframework.jmx.export.naming.Resource[] [ int ] ; if ( org.springframework.jmx.export.naming.Log . isInfoEnabled ( ) ) { org.springframework.jmx.export.naming.Log . info ( STRING + org.springframework.jmx.export.naming.Resource ) ; } PropertiesLoaderUtils . fillProperties ( this . java.util.Properties , org.springframework.jmx.export.naming.Resource ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.management.ObjectName javax.management.ObjectName ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws javax.management.MalformedObjectNameException { java.lang.String java.lang.String = null ; if ( this . java.util.Properties != null ) { java.lang.String = this . java.util.Properties . java.lang.String ( java.lang.String ) ; } if ( java.lang.String == null ) { java.lang.String = java.lang.String ; } return ObjectNameManager . getInstance ( java.lang.String ) ; }  <METHOD_END>
