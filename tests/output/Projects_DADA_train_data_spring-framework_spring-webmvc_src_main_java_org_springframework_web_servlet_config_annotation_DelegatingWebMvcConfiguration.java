<METHOD_START> @ Autowired ( required = false ) public void void ( java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> < WebMvcConfigurer > java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) { if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . addWebMvcConfigurers ( java.util.List<org.springframework.web.servlet.config.annotation.WebMvcConfigurer> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( PathMatchConfigurer org.springframework.web.servlet.config.annotation.PathMatchConfigurer ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . configurePathMatch ( org.springframework.web.servlet.config.annotation.PathMatchConfigurer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ContentNegotiationConfigurer org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . configureContentNegotiation ( org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( AsyncSupportConfigurer org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . configureAsyncSupport ( org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultServletHandlerConfigurer org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . configureDefaultServletHandling ( org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( FormatterRegistry org.springframework.web.servlet.config.annotation.FormatterRegistry ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . addFormatters ( org.springframework.web.servlet.config.annotation.FormatterRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( InterceptorRegistry org.springframework.web.servlet.config.annotation.InterceptorRegistry ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . addInterceptors ( org.springframework.web.servlet.config.annotation.InterceptorRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ResourceHandlerRegistry org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . addResourceHandlers ( org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( CorsRegistry org.springframework.web.servlet.config.annotation.CorsRegistry ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . addCorsMappings ( org.springframework.web.servlet.config.annotation.CorsRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ViewControllerRegistry org.springframework.web.servlet.config.annotation.ViewControllerRegistry ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . addViewControllers ( org.springframework.web.servlet.config.annotation.ViewControllerRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . configureViewResolvers ( org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . addArgumentResolvers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . addReturnValueHandlers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . configureMessageConverters ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . extendMessageConverters ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . configureHandlerExceptionResolvers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) { this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . extendHandlerExceptionResolvers ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.config.annotation.Validator org.springframework.web.servlet.config.annotation.Validator ( ) { return this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . getValidator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.config.annotation.MessageCodesResolver org.springframework.web.servlet.config.annotation.MessageCodesResolver ( ) { return this . org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite . getMessageCodesResolver ( ) ; }  <METHOD_END>
