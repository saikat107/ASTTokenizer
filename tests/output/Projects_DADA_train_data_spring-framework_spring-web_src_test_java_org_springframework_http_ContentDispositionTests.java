<METHOD_START> @ Test public void void ( ) { ContentDisposition org.springframework.http.ContentDisposition = ContentDisposition . parse ( STRING ) ; assertEquals ( ContentDisposition . builder ( STRING ) . name ( STRING ) . filename ( STRING ) . size ( NUMBER ) . build ( ) , org.springframework.http.ContentDisposition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ContentDisposition org.springframework.http.ContentDisposition = ContentDisposition . parse ( STRING ) ; assertEquals ( ContentDisposition . builder ( STRING ) . build ( ) , org.springframework.http.ContentDisposition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ContentDisposition org.springframework.http.ContentDisposition = ContentDisposition . parse ( STRING ) ; assertEquals ( ContentDisposition . builder ( STRING ) . filename ( STRING ) . build ( ) , org.springframework.http.ContentDisposition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ContentDisposition org.springframework.http.ContentDisposition = ContentDisposition . parse ( STRING ) ; assertEquals ( ContentDisposition . builder ( STRING ) . name ( STRING ) . filename ( STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) . build ( ) , org.springframework.http.ContentDisposition ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ContentDisposition . parse ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ContentDisposition . parse ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ContentDisposition . parse ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ContentDisposition org.springframework.http.ContentDisposition = ContentDisposition . builder ( STRING ) . name ( STRING ) . filename ( STRING ) . size ( NUMBER ) . build ( ) ; assertEquals ( STRING , org.springframework.http.ContentDisposition . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ContentDisposition org.springframework.http.ContentDisposition = ContentDisposition . builder ( STRING ) . name ( STRING ) . filename ( STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) . build ( ) ; assertEquals ( STRING , org.springframework.http.ContentDisposition . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( ContentDisposition .class , STRING , java.lang.String .class , java.nio.charset.Charset .class ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.String java.lang.String = ( java.lang.String ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = ( java.lang.String ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( ContentDisposition .class , STRING , java.lang.String .class , java.nio.charset.Charset .class ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( ContentDisposition .class , STRING , java.lang.String .class ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.String java.lang.String = ( java.lang.String ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , STRING ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = ( java.lang.String ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( ContentDisposition .class , STRING , java.lang.String .class ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , STRING ) ; }  <METHOD_END>
